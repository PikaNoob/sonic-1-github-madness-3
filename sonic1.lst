00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000326 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C 2011                       		move.l	(a1),d0
0000032E 7200                       		moveq	#0,d1
00000330                            
00000330                            loc_32C:
00000330 D258                       		add.w	(a0)+,d1
00000332 B088                       		cmp.l	a0,d0
00000334 64FA                       		bcc.s	loc_32C
00000336 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033C B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000342 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000346 7E00                       		moveq	#0,d7
00000348 3C3C 007F                  		move.w	#$7F,d6
0000034C                            
0000034C                            loc_348:
0000034C 2CC7                       		move.l	d7,(a6)+
0000034E 51CE FFFC                  		dbf	d6,loc_348
00000352 1039 00A1 0001             		move.b	($A10001).l,d0
00000358 0200 00C0                  		andi.b	#$C0,d0
0000035C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000360 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000368                            
00000368                            GameInit:
00000368 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036E 7E00                       		moveq	#0,d7
00000370 3C3C 3F7F                  		move.w	#$3F7F,d6
00000374                            
00000374                            GameClrRAM:
00000374 2CC7                       		move.l	d7,(a6)+
00000376 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037A                            
0000037A 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000380 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000388                            
00000388 6100 0000                  		bsr.w	VDPSetupGame
0000038C 6100 0000                  		bsr.w	SoundDriverLoad
00000390 6100 0000                  		bsr.w	JoypadInit
00000394 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039A                            
0000039A                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000039A                            
0000039A                            MainGameLoop:
0000039A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000039E 0240 003C                  		andi.w	#$3C,d0
000003A2 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A6 60F2                       		bra.s	MainGameLoop
000003A8                            ; ===========================================================================
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            ; Main game mode array
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            
000003A8                            GameModeArray:
000003A8 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C8                            ; ===========================================================================
000003C8 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003CE                            ; ===========================================================================
000003CE                            
000003CE                            CheckSumError:
000003CE 6100 0000                  		bsr.w	VDPSetupGame
000003D2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DC 7E3F                       		moveq	#$3F,d7
000003DE                            
000003DE                            CheckSum_Red:
000003DE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003EA                            
000003EA                            CheckSum_Loop:
000003EA 60FE                       		bra.s	CheckSum_Loop
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            BusError:
000003EC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_43A
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            AddressError:
000003F4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            IllegalInstr:
000003FC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000402 54AF 0002                  		addq.l	#2,2(sp)
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            ZeroDivide:
00000408 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ChkInstr:
00000410 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            TrapvInstr:
00000418 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            PrivilegeViol:
00000420 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            Trace:
00000428 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Line1010Emu:
00000430 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000436 54AF 0002                  		addq.l	#2,2(sp)
0000043A 6000                       		bra.s	loc_462
0000043C                            ; ===========================================================================
0000043C                            
0000043C                            Line1111Emu:
0000043C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000442 54AF 0002                  		addq.l	#2,2(sp)
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            ErrorExcept:
00000448 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            loc_43A:
00000450 46FC 2700                  		move	#$2700,sr
00000454 544F                       		addq.w	#2,sp
00000456 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000045A 544F                       		addq.w	#2,sp
0000045C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000462 6100 0000                  		bsr.w	ShowErrorMsg
00000466 202F 0002                  		move.l	2(sp),d0
0000046A 6100 0000                  		bsr.w	sub_5BA
0000046E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 6000                       		bra.s	loc_478
00000478                            ; ===========================================================================
00000478                            
00000478                            loc_462:
00000478 46FC 2700                  		move	#$2700,sr
0000047C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000482 6100 0000                  		bsr.w	ShowErrorMsg
00000486 202F 0002                  		move.l	2(sp),d0
0000048A 6100 0000                  		bsr.w	sub_5BA
0000048E                            
0000048E                            loc_478:
0000048E 6100 0000                  		bsr.w	ErrorWaitForC
00000492 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000498 46FC 2300                  		move	#$2300,sr
0000049C 4E73                       		rte	
0000049E                            
0000049E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000049E                            
0000049E                            
0000049E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000049E 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A4 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004AE 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B4 323C 027F                  		move.w	#$27F,d1
000004B8                            
000004B8                            Error_LoadGfx:
000004B8 3C98                       		move.w	(a0)+,(a6)
000004BA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004BE 7000                       		moveq	#0,d0		; clear	d0
000004C0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D6 7212                       		moveq	#$12,d1		; number of characters
000004D8                            
000004D8                            Error_LoopChars:
000004D8 7000                       		moveq	#0,d0
000004DA 1018                       		move.b	(a0)+,d0
000004DC 0640 0790                  		addi.w	#$790,d0
000004E0 3C80                       		move.w	d0,(a6)
000004E2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E6 4E75                       		rts	
000004E8                            ; End of function ShowErrorMsg
000004E8                            
000004E8                            ; ===========================================================================
000004E8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004F8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FC 0000                       		dc.w asc_5A6-ErrorText
000004FE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000511 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000524 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000537 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000054A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000570 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000583 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000596 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005A9 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D0 00                         		even
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5BA:				; XREF: loc_43A; loc_462
000005D0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D4 7407                       		moveq	#7,d2
000005D6                            
000005D6                            loc_5C0:
000005D6 E998                       		rol.l	#4,d0
000005D8 6100                       		bsr.s	sub_5CA
000005DA 51CA FFFA                  		dbf	d2,loc_5C0
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5BA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            sub_5CA:				; XREF: sub_5BA
000005E0 3200                       		move.w	d0,d1
000005E2 0241 000F                  		andi.w	#$F,d1
000005E6 0C41 000A                  		cmpi.w	#$A,d1
000005EA 6500                       		bcs.s	loc_5D8
000005EC 5E41                       		addq.w	#7,d1
000005EE                            
000005EE                            loc_5D8:
000005EE 0641 07C0                  		addi.w	#$7C0,d1
000005F2 3C81                       		move.w	d1,(a6)
000005F4 4E75                       		rts	
000005F6                            ; End of function sub_5CA
000005F6                            
000005F6                            
000005F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F6                            
000005F6                            
000005F6                            ErrorWaitForC:				; XREF: loc_478
000005F6 6100 0000                  		bsr.w	ReadJoypads
000005FA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000600 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000604 4E75                       		rts	
00000606                            ; End of function ErrorWaitForC
00000606                            
00000606                            ; ===========================================================================
00000606                            
00000606                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D46                            Art_Text_end:		even
00000D46                            
00000D46                            ; ===========================================================================
00000D46                            ;VBlank
00000D46                            loc_B10:				; XREF: Vectors
00000D46 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D4A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D4E 6700                       		beq.s	loc_B88
00000D50 3039 00C0 0004             		move.w	($C00004).l,d0
00000D56 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D60 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D68 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D6E 6700                       		beq.s	loc_B42
00000D70 303C 0700                  		move.w	#$700,d0
00000D74                            
00000D74                            loc_B3E:
00000D74 51C8 FFFE                  		dbf	d0,loc_B3E
00000D78                            
00000D78                            loc_B42:
00000D78 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D7C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D82 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D88 0240 003E                  		andi.w	#$3E,d0
00000D8C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D90 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D94                            
00000D94                            loc_B5E:				; XREF: loc_B88
00000D94 4EB9 0000 0000             		jsr	sub_71B4C
00000D9A                            
00000D9A                            loc_B64:				; XREF: loc_D50
00000D9A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D9E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000DA2 4E73                       		rte	
00000DA4                            ; ===========================================================================
00000DA4 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000DA8 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DAC 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DB0 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DB4 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DB8 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DBC 0000                       		dc.w loc_E72-off_B6E
00000DBE                            ; ===========================================================================
00000DBE                            
00000DBE                            loc_B88:				; XREF: loc_B10; off_B6E
00000DBE 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DC4 6700                       		beq.s	loc_B9A
00000DC6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DCC 6600 FFC6                  		bne.w	loc_B5E
00000DD0                            
00000DD0                            loc_B9A:
00000DD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DD6 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DDA 3039 00C0 0004             		move.w	($C00004).l,d0
00000DE0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DE6 6700                       		beq.s	loc_BBA
00000DE8 303C 0700                  		move.w	#$700,d0
00000DEC                            
00000DEC                            loc_BB6:
00000DEC 51C8 FFFE                  		dbf	d0,loc_BB6
00000DF0                            
00000DF0                            loc_BBA:
00000DF0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DF6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DFE                            
00000DFE                            loc_BC8:
00000DFE 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000E06 66F6                       		bne.s	loc_BC8
00000E08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0C 6600                       		bne.s	loc_BFE
00000E0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E20 3ABC 977F                  		move.w	#$977F,(a5)
00000E24 3ABC C000                  		move.w	#$C000,(a5)
00000E28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E32 6000                       		bra.s	loc_C22
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_BFE:				; XREF: loc_BC8
00000E34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E46 3ABC 977F                  		move.w	#$977F,(a5)
00000E4A 3ABC C000                  		move.w	#$C000,(a5)
00000E4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E58                            
00000E58                            loc_C22:				; XREF: loc_BC8
00000E58 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E64 6000 FF2E                  		bra.w	loc_B5E
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C32:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C                            
00000E6C                            loc_C36:				; XREF: off_B6E
00000E6C 4A78 F614                  		tst.w	($FFFFF614).w
00000E70 6700 0000                  		beq.w	locret_C42
00000E74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E78                            
00000E78                            locret_C42:
00000E78 4E75                       		rts	
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_C44:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	sub_106E
00000E7E 6100 0000                  		bsr.w	sub_6886
00000E82 6100 0000                  		bsr.w	sub_1642
00000E86 4A78 F614                  		tst.w	($FFFFF614).w
00000E8A 6700 0000                  		beq.w	locret_C5C
00000E8E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E92                            
00000E92                            locret_C5C:
00000E92 4E75                       		rts	
00000E94                            ; ===========================================================================
00000E94                            
00000E94                            loc_C5E:				; XREF: off_B6E
00000E94 6100 0000                  		bsr.w	sub_106E
00000E98 4E75                       		rts	
00000E9A                            ; ===========================================================================
00000E9A                            
00000E9A                            loc_C64:				; XREF: off_B6E
00000E9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000EA0 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000EA4                            
00000EA4                            loc_C6E:				; XREF: off_B6E
00000EA4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000EAC                            
00000EAC                            loc_C76:
00000EAC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EB4 66F6                       		bne.s	loc_C76		; if not, branch
00000EB6 6100 0000                  		bsr.w	ReadJoypads
00000EBA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EBE 6600                       		bne.s	loc_CB0
00000EC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ECC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED2 3ABC 977F                  		move.w	#$977F,(a5)
00000ED6 3ABC C000                  		move.w	#$C000,(a5)
00000EDA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE4 6000                       		bra.s	loc_CD4
00000EE6                            ; ===========================================================================
00000EE6                            
00000EE6                            loc_CB0:				; XREF: loc_C76
00000EE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EF8 3ABC 977F                  		move.w	#$977F,(a5)
00000EFC 3ABC C000                  		move.w	#$C000,(a5)
00000F00 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0A                            
00000F0A                            loc_CD4:				; XREF: loc_C76
00000F0A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F44 3ABC 977F                  		move.w	#$977F,(a5)
00000F48 3ABC 7800                  		move.w	#$7800,(a5)
00000F4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F56 4A38 F767                  		tst.b	($FFFFF767).w
00000F5A 6700                       		beq.s	loc_D50
00000F5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F62 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F68 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F6E 3ABC 977F                  		move.w	#$977F,(a5)
00000F72 3ABC 7000                  		move.w	#$7000,(a5)
00000F76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F80 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F86                            
00000F86                            loc_D50:
00000F86 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F8E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F94 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F9A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FA0 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FA6 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FAC 6400                       		bcc.s	Demo_Time
00000FAE 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FB4 588F                       		addq.l	#4,sp
00000FB6 6000 FDE2                  		bra.w	loc_B64
00000FBA                            
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            ; Subroutine to	run a demo for an amount of time
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            
00000FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FBA                            
00000FBA                            
00000FBA                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FBA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FBE 4EB9 0000 0000             		jsr	AniArt_Load
00000FC4 4EB9 0000 0000             		jsr	HudUpdate
00000FCA 6100 0000                  		bsr.w	sub_165E
00000FCE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FD2 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FD6 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FDA                            
00000FDA                            Demo_TimeEnd:
00000FDA 4E75                       		rts	
00000FDC                            ; End of function Demo_Time
00000FDC                            
00000FDC                            ; ===========================================================================
00000FDC                            
00000FDC                            loc_DA6:				; XREF: off_B6E
00000FDC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE4                            
00000FE4                            loc_DAE:
00000FE4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FEC 66F6                       		bne.s	loc_DAE		; if not, branch
00000FEE 6100 0000                  		bsr.w	ReadJoypads
00000FF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FFE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001004 3ABC 977F                  		move.w	#$977F,(a5)
00001008 3ABC C000                  		move.w	#$C000,(a5)
0000100C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001012 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001016 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001022 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001028 3ABC 977F                  		move.w	#$977F,(a5)
0000102C 3ABC 7800                  		move.w	#$7800,(a5)
00001030 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001036 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000103A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001040 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001046 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000104C 3ABC 977F                  		move.w	#$977F,(a5)
00001050 3ABC 7C00                  		move.w	#$7C00,(a5)
00001054 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000105A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001066 6100 0000                  		bsr.w	PalCycle_SS
0000106A 4A38 F767                  		tst.b	($FFFFF767).w
0000106E 6700                       		beq.s	loc_E64
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000107C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7000                  		move.w	#$7000,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000109A                            
0000109A                            loc_E64:
0000109A 4A78 F614                  		tst.w	($FFFFF614).w
0000109E 6700 0000                  		beq.w	locret_E70
000010A2 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A6                            
000010A6                            locret_E70:
000010A6 4E75                       		rts	
000010A8                            ; ===========================================================================
000010A8                            
000010A8                            loc_E72:				; XREF: off_B6E
000010A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010B0                            
000010B0                            loc_E7A:
000010B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B8 66F6                       		bne.s	loc_E7A		; if not, branch
000010BA 6100 0000                  		bsr.w	ReadJoypads
000010BE 4A38 F64E                  		tst.b	($FFFFF64E).w
000010C2 6600                       		bne.s	loc_EB4
000010C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010CA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010D0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D6 3ABC 977F                  		move.w	#$977F,(a5)
000010DA 3ABC C000                  		move.w	#$C000,(a5)
000010DE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010E4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E8 6000                       		bra.s	loc_ED8
000010EA                            ; ===========================================================================
000010EA                            
000010EA                            loc_EB4:				; XREF: loc_E7A
000010EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010FC 3ABC 977F                  		move.w	#$977F,(a5)
00001100 3ABC C000                  		move.w	#$C000,(a5)
00001104 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000110A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000110E                            
0000110E                            loc_ED8:				; XREF: loc_E7A
0000110E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001112 4BF9 00C0 0004             		lea	($C00004).l,a5
00001118 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000111E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001124                            
00001124                            loc_EEE:
00001124 3ABC 977F                  		move.w	#$977F,(a5)
00001128 3ABC 7C00                  		move.w	#$7C00,(a5)
0000112C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001132 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001136 4BF9 00C0 0004             		lea	($C00004).l,a5
0000113C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001142 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001148 3ABC 977F                  		move.w	#$977F,(a5)
0000114C 3ABC 7800                  		move.w	#$7800,(a5)
00001150 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001156 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000115A 4A38 F767                  		tst.b	($FFFFF767).w
0000115E 6700                       		beq.s	loc_F54
00001160 4BF9 00C0 0004             		lea	($C00004).l,a5
00001166 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000116C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001172 3ABC 977F                  		move.w	#$977F,(a5)
00001176 3ABC 7000                  		move.w	#$7000,(a5)
0000117A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001180 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001184 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000118A                            
0000118A                            loc_F54:
0000118A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001192 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001198 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000119E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011A4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011AA 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011AE 4EB9 0000 0000             		jsr	AniArt_Load
000011B4 4EB9 0000 0000             		jsr	HudUpdate
000011BA 6100 0000                  		bsr.w	sub_1642
000011BE 4E75                       		rts	
000011C0                            ; ===========================================================================
000011C0                            
000011C0                            loc_F8A:				; XREF: off_B6E
000011C0 6100 0000                  		bsr.w	sub_106E
000011C4 5238 F628                  		addq.b	#1,($FFFFF628).w
000011C8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011CE 4E75                       		rts	
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_F9A:				; XREF: off_B6E
000011D0 6100 0000                  		bsr.w	sub_106E
000011D4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011D8 6000 0000                  		bra.w	sub_1642
000011DC                            ; ===========================================================================
000011DC                            
000011DC                            loc_FA6:				; XREF: off_B6E
000011DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011E4                            
000011E4                            loc_FAE:
000011E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011EC 66F6                       		bne.s	loc_FAE		; if not, branch
000011EE 6100 0000                  		bsr.w	ReadJoypads
000011F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011FE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001204 3ABC 977F                  		move.w	#$977F,(a5)
00001208 3ABC C000                  		move.w	#$C000,(a5)
0000120C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001212 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001216 4BF9 00C0 0004             		lea	($C00004).l,a5
0000121C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001222 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001228 3ABC 977F                  		move.w	#$977F,(a5)
0000122C 3ABC 7800                  		move.w	#$7800,(a5)
00001230 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001236 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000123A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001240 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001246 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000124C 3ABC 977F                  		move.w	#$977F,(a5)
00001250 3ABC 7C00                  		move.w	#$7C00,(a5)
00001254 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000125A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000125E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001266 4A38 F767                  		tst.b	($FFFFF767).w
0000126A 6700                       		beq.s	loc_1060
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001278 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000127E 3ABC 977F                  		move.w	#$977F,(a5)
00001282 3ABC 7000                  		move.w	#$7000,(a5)
00001286 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000128C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001290 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001296                            
00001296                            loc_1060:
00001296 4A78 F614                  		tst.w	($FFFFF614).w
0000129A 6700 0000                  		beq.w	locret_106C
0000129E 5378 F614                  		subq.w	#1,($FFFFF614).w
000012A2                            
000012A2                            locret_106C:
000012A2 4E75                       		rts	
000012A4                            
000012A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A4                            
000012A4                            
000012A4                            sub_106E:				; XREF: loc_C32; et al
000012A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012AC                            
000012AC                            loc_1076:
000012AC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012B4 66F6                       		bne.s	loc_1076	; if not, branch
000012B6 6100 0000                  		bsr.w	ReadJoypads
000012BA 4A38 F64E                  		tst.b	($FFFFF64E).w
000012BE 6600                       		bne.s	loc_10B0
000012C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012C6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012CC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012D2 3ABC 977F                  		move.w	#$977F,(a5)
000012D6 3ABC C000                  		move.w	#$C000,(a5)
000012DA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012E4 6000                       		bra.s	loc_10D4
000012E6                            ; ===========================================================================
000012E6                            
000012E6                            loc_10B0:				; XREF: sub_106E
000012E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012F2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012F8 3ABC 977F                  		move.w	#$977F,(a5)
000012FC 3ABC C000                  		move.w	#$C000,(a5)
00001300 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001306 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130A                            
0000130A                            loc_10D4:				; XREF: sub_106E
0000130A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001310 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001316 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000131C 3ABC 977F                  		move.w	#$977F,(a5)
00001320 3ABC 7800                  		move.w	#$7800,(a5)
00001324 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000132A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000133A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001340 3ABC 977F                  		move.w	#$977F,(a5)
00001344 3ABC 7C00                  		move.w	#$7C00,(a5)
00001348 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000134E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001352 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000135A 4E75                       		rts	
0000135C                            ; End of function sub_106E
0000135C                            
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            ; Subroutine to	move pallets from the RAM to CRAM
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            
0000135C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000135C                            
0000135C                            
0000135C                            PalToCRAM:
0000135C 46FC 2700                  		move	#$2700,sr
00001360 4A78 F644                  		tst.w	($FFFFF644).w
00001364 6700                       		beq.s	locret_119C
00001366 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000136C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001370 43F9 00C0 0000             		lea	($C00000).l,a1
00001376 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000137A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001382 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013C8 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013CC 4A38 F64F                  		tst.b	($FFFFF64F).w
000013D0 6600                       		bne.s	loc_119E
000013D2                            
000013D2                            locret_119C:
000013D2 4E73                       		rte	
000013D4                            ; ===========================================================================
000013D4                            
000013D4                            loc_119E:				; XREF: PalToCRAM
000013D4 4238 F64F                  		clr.b	($FFFFF64F).w
000013D8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013DC 6100 FBDC                  		bsr.w	Demo_Time
000013E0 4EB9 0000 0000             		jsr	sub_71B4C
000013E6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013EA 4E73                       		rte	
000013EC                            ; End of function PalToCRAM
000013EC                            
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Subroutine to	initialise joypads
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            
000013EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013EC                            
000013EC                            
000013EC                            JoypadInit:				; XREF: GameClrRAM
000013EC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013F4                            
000013F4                            Joypad_WaitZ80:
000013F4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013FC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013FE 7040                       		moveq	#$40,d0
00001400 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001406 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000140C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001412 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000141A 4E75                       		rts	
0000141C                            ; End of function JoypadInit
0000141C                            
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            ; Subroutine to	read joypad input, and send it to the RAM
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            
0000141C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141C                            
0000141C                            
0000141C                            ReadJoypads:
0000141C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001420 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001426 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001428 5449                       		addq.w	#2,a1		; do the second	joypad
0000142A                            
0000142A                            Joypad_Read:
0000142A 12BC 0000                  		move.b	#0,(a1)
0000142E 4E71                       		nop	
00001430 4E71                       		nop	
00001432 1011                       		move.b	(a1),d0
00001434 E508                       		lsl.b	#2,d0
00001436 0200 00C0                  		andi.b	#$C0,d0
0000143A 12BC 0040                  		move.b	#$40,(a1)
0000143E 4E71                       		nop	
00001440 4E71                       		nop	
00001442 1211                       		move.b	(a1),d1
00001444 0201 003F                  		andi.b	#$3F,d1
00001448 8001                       		or.b	d1,d0
0000144A 4600                       		not.b	d0
0000144C 1210                       		move.b	(a0),d1
0000144E B101                       		eor.b	d0,d1
00001450 10C0                       		move.b	d0,(a0)+
00001452 C200                       		and.b	d0,d1
00001454 10C1                       		move.b	d1,(a0)+
00001456 4E75                       		rts	
00001458                            ; End of function ReadJoypads
00001458                            
00001458                            
00001458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001458                            
00001458                            
00001458                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001458 41F9 00C0 0004             		lea	($C00004).l,a0
0000145E 43F9 00C0 0000             		lea	($C00000).l,a1
00001464 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000146A 7E12                       		moveq	#$12,d7
0000146C                            
0000146C                            VDP_Loop:
0000146C 309A                       		move.w	(a2)+,(a0)
0000146E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001472                            
00001472 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001478 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000147C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001482 7000                       		moveq	#0,d0
00001484 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000148E 3E3C 003F                  		move.w	#$3F,d7
00001492                            
00001492                            VDP_ClrCRAM:
00001492 3280                       		move.w	d0,(a1)
00001494 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001498                            
00001498 42B8 F616                  		clr.l	($FFFFF616).w
0000149C 42B8 F61A                  		clr.l	($FFFFF61A).w
000014A0 2F01                       		move.l	d1,-(sp)
000014A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014B2 3ABC 9780                  		move.w	#$9780,(a5)
000014B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014C4                            
000014C4                            loc_128E:
000014C4 3215                       		move.w	(a5),d1
000014C6 0801 0001                  		btst	#1,d1
000014CA 66F8                       		bne.s	loc_128E
000014CC                            
000014CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014D0 221F                       		move.l	(sp)+,d1
000014D2 4E75                       		rts	
000014D4                            ; End of function VDPSetupGame
000014D4                            
000014D4                            ; ===========================================================================
000014D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	clear the screen
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ClearScreen:
000014FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001500 3ABC 8F01                  		move.w	#$8F01,(a5)
00001504 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000150A 3ABC 9780                  		move.w	#$9780,(a5)
0000150E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001514 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000151C                            
0000151C                            loc_12E6:
0000151C 3215                       		move.w	(a5),d1
0000151E 0801 0001                  		btst	#1,d1
00001522 66F8                       		bne.s	loc_12E6
00001524                            
00001524 3ABC 8F02                  		move.w	#$8F02,(a5)
00001528 4BF9 00C0 0004             		lea	($C00004).l,a5
0000152E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001532 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001538 3ABC 9780                  		move.w	#$9780,(a5)
0000153C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001542 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000154A                            
0000154A                            loc_1314:
0000154A 3215                       		move.w	(a5),d1
0000154C 0801 0001                  		btst	#1,d1
00001550 66F8                       		bne.s	loc_1314
00001552                            
00001552 3ABC 8F02                  		move.w	#$8F02,(a5)
00001556 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000155E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001566 43F8 F800                  		lea	($FFFFF800).w,a1
0000156A 7000                       		moveq	#0,d0
0000156C 323C 009F                  		move.w	#$9F,d1
00001570                            
00001570                            loc_133A:
00001570 22C0                       		move.l	d0,(a1)+
00001572 51C9 FFFC                  		dbf	d1,loc_133A
00001576                            
00001576 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000157A 7000                       		moveq	#0,d0
0000157C 323C 00FF                  		move.w	#$FF,d1
00001580                            
00001580                            loc_134A:
00001580 22C0                       		move.l	d0,(a1)+
00001582 51C9 FFFC                  		dbf	d1,loc_134A
00001586 4E75                       		rts	
00001588                            ; End of function ClearScreen
00001588                            
00001588                            ; ---------------------------------------------------------------------------
00001588                            ; Subroutine to	load the sound driver
00001588                            ; ---------------------------------------------------------------------------
00001588                            
00001588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001588                            
00001588                            
00001588                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001588 4E71                       		nop	
0000158A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001592 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000159A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015A0 43F9 00A0 0000             		lea	($A00000).l,a1
000015A6 6100 0000                  		bsr.w	KosDec		; decompress
000015AA 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015B2 4E71                       		nop	
000015B4 4E71                       		nop	
000015B6 4E71                       		nop	
000015B8 4E71                       		nop	
000015BA 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015CA 4E75                       		rts	
000015CC                            ; End of function SoundDriverLoad
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	play a sound or	music track
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PlaySound:
000015CC 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015D0 4E75                       		rts	
000015D2                            ; End of function PlaySound
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	play a special sound/music (E0-E4)
000015D2                            ;
000015D2                            ; E0 - Fade out
000015D2                            ; E1 - Sega
000015D2                            ; E2 - Speed up
000015D2                            ; E3 - Normal speed
000015D2                            ; E4 - Stop
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            PlaySound_Special:
000015D2 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015D6 4E75                       		rts	
000015D8                            ; End of function PlaySound_Special
000015D8                            
000015D8                            ; ===========================================================================
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            ; Unused sound/music subroutine
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            
000015D8                            PlaySound_Unk:
000015D8 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015DC 4E75                       		rts	
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	pause the game
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            PauseGame:				; XREF: Level_MainLoop; et al
000015DE 4E71                       		nop	
000015E0 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015E4 6700                       		beq.s	Unpause		; if not, branch
000015E6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015EA 6600                       		bne.s	loc_13BE	; if yes, branch
000015EC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F2 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015F4                            
000015F4                            loc_13BE:
000015F4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015FA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001600                            
00001600                            loc_13CA:
00001600 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001606 6100 0000                  		bsr.w	DelayProgram
0000160A 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000160E 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001610 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001616 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001618 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000161E 4E71                       		nop	
00001620 6000                       		bra.s	loc_1404
00001622                            ; ===========================================================================
00001622                            
00001622                            Pause_ChkBC:				; XREF: PauseGame
00001622 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001628 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000162A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001630 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001632                            
00001632                            Pause_ChkStart:				; XREF: PauseGame
00001632 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001638 67C6                       		beq.s	loc_13CA	; if not, branch
0000163A                            
0000163A                            loc_1404:				; XREF: PauseGame
0000163A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001640                            
00001640                            Unpause:				; XREF: PauseGame
00001640 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001646                            
00001646                            Pause_DoNothing:			; XREF: PauseGame
00001646 4E75                       		rts	
00001648                            ; ===========================================================================
00001648                            
00001648                            Pause_SlowMo:				; XREF: PauseGame
00001648 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000164E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001654 4E75                       		rts	
00001656                            ; End of function PauseGame
00001656                            
00001656                            ; ---------------------------------------------------------------------------
00001656                            ; Subroutine to	display	patterns via the VDP
00001656                            ; ---------------------------------------------------------------------------
00001656                            
00001656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001656                            
00001656                            
00001656                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001656 4DF9 00C0 0000             		lea	($C00000).l,a6
0000165C 283C 0080 0000             		move.l	#$800000,d4
00001662                            
00001662                            loc_142C:
00001662 2D40 0004                  		move.l	d0,4(a6)
00001666 3601                       		move.w	d1,d3
00001668                            
00001668                            loc_1432:
00001668 3C99                       		move.w	(a1)+,(a6)
0000166A 51CB FFFC                  		dbf	d3,loc_1432
0000166E D084                       		add.l	d4,d0
00001670 51CA FFF0                  		dbf	d2,loc_142C
00001674 4E75                       		rts	
00001676                            ; End of function ShowVDPGraphics
00001676                            
00001676                            ; ---------------------------------------------------------------------------
00001676                            ; Nemesis decompression	algorithm
00001676                            ; ---------------------------------------------------------------------------
00001676                            
00001676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001676                            
00001676                            
00001676                            NemDec:
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1502).l,a3
00001680 49F9 00C0 0000             		lea	($C00000).l,a4
00001686 6000                       		bra.s	loc_145C
00001688                            ; ===========================================================================
00001688 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001692                            
00001692                            loc_145C:				; XREF: NemDec
00001692 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001696 3418                       		move.w	(a0)+,d2
00001698 E34A                       		lsl.w	#1,d2
0000169A 6400                       		bcc.s	loc_146A
0000169C D6FC 000A                  		adda.w	#$A,a3
000016A0                            
000016A0                            loc_146A:
000016A0 E54A                       		lsl.w	#2,d2
000016A2 3A42                       		movea.w	d2,a5
000016A4 7608                       		moveq	#8,d3
000016A6 7400                       		moveq	#0,d2
000016A8 7800                       		moveq	#0,d4
000016AA 6100 0000                  		bsr.w	NemDec4
000016AE 1A18                       		move.b	(a0)+,d5
000016B0 E145                       		asl.w	#8,d5
000016B2 1A18                       		move.b	(a0)+,d5
000016B4 3C3C 0010                  		move.w	#$10,d6
000016B8 6100                       		bsr.s	NemDec2
000016BA 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016BE 4E75                       		rts	
000016C0                            ; End of function NemDec
000016C0                            
000016C0                            
000016C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C0                            
000016C0                            
000016C0                            NemDec2:				; XREF: NemDec
000016C0 3E06                       		move.w	d6,d7
000016C2 5147                       		subq.w	#8,d7
000016C4 3205                       		move.w	d5,d1
000016C6 EE69                       		lsr.w	d7,d1
000016C8 0C01 00FC                  		cmpi.b	#-4,d1
000016CC 6400                       		bcc.s	loc_14D6
000016CE 0241 00FF                  		andi.w	#$FF,d1
000016D2 D241                       		add.w	d1,d1
000016D4 1031 1000                  		move.b	(a1,d1.w),d0
000016D8 4880                       		ext.w	d0
000016DA 9C40                       		sub.w	d0,d6
000016DC 0C46 0009                  		cmpi.w	#9,d6
000016E0 6400                       		bcc.s	loc_14B2
000016E2 5046                       		addq.w	#8,d6
000016E4 E145                       		asl.w	#8,d5
000016E6 1A18                       		move.b	(a0)+,d5
000016E8                            
000016E8                            loc_14B2:
000016E8 1231 1001                  		move.b	1(a1,d1.w),d1
000016EC 3001                       		move.w	d1,d0
000016EE 0241 000F                  		andi.w	#$F,d1
000016F2 0240 00F0                  		andi.w	#$F0,d0
000016F6                            
000016F6                            loc_14C0:				; XREF: NemDec3
000016F6 E848                       		lsr.w	#4,d0
000016F8                            
000016F8                            loc_14C2:				; XREF: NemDec3
000016F8 E98C                       		lsl.l	#4,d4
000016FA 8801                       		or.b	d1,d4
000016FC 5343                       		subq.w	#1,d3
000016FE 6600                       		bne.s	loc_14D0
00001700 4ED3                       		jmp	(a3)
00001702                            ; End of function NemDec2
00001702                            
00001702                            
00001702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001702                            
00001702                            
00001702                            NemDec3:				; XREF: loc_1502
00001702 7800                       		moveq	#0,d4
00001704 7608                       		moveq	#8,d3
00001706                            
00001706                            loc_14D0:				; XREF: NemDec2
00001706 51C8 FFF0                  		dbf	d0,loc_14C2
0000170A 60B4                       		bra.s	NemDec2
0000170C                            ; ===========================================================================
0000170C                            
0000170C                            loc_14D6:				; XREF: NemDec2
0000170C 5D46                       		subq.w	#6,d6
0000170E 0C46 0009                  		cmpi.w	#9,d6
00001712 6400                       		bcc.s	loc_14E4
00001714 5046                       		addq.w	#8,d6
00001716 E145                       		asl.w	#8,d5
00001718 1A18                       		move.b	(a0)+,d5
0000171A                            
0000171A                            loc_14E4:				; XREF: NemDec3
0000171A 5F46                       		subq.w	#7,d6
0000171C 3205                       		move.w	d5,d1
0000171E EC69                       		lsr.w	d6,d1
00001720 3001                       		move.w	d1,d0
00001722 0241 000F                  		andi.w	#$F,d1
00001726 0240 0070                  		andi.w	#$70,d0
0000172A 0C46 0009                  		cmpi.w	#9,d6
0000172E 64C6                       		bcc.s	loc_14C0
00001730 5046                       		addq.w	#8,d6
00001732 E145                       		asl.w	#8,d5
00001734 1A18                       		move.b	(a0)+,d5
00001736 60BE                       		bra.s	loc_14C0
00001738                            ; End of function NemDec3
00001738                            
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1502:				; XREF: NemDec
00001738 2884                       		move.l	d4,(a4)
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66C2                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 2882                       		move.l	d2,(a4)
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66B6                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            ; ===========================================================================
0000174E                            
0000174E                            loc_1518:				; XREF: NemDec
0000174E 28C4                       		move.l	d4,(a4)+
00001750 534D                       		subq.w	#1,a5
00001752 380D                       		move.w	a5,d4
00001754 66AC                       		bne.s	NemDec3
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758 B982                       		eor.l	d4,d2
0000175A 28C2                       		move.l	d2,(a4)+
0000175C 534D                       		subq.w	#1,a5
0000175E 380D                       		move.w	a5,d4
00001760 66A0                       		bne.s	NemDec3
00001762 4E75                       		rts	
00001764                            
00001764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001764                            
00001764                            
00001764                            NemDec4:				; XREF: NemDec
00001764 1018                       		move.b	(a0)+,d0
00001766                            
00001766                            loc_1530:
00001766 0C00 00FF                  		cmpi.b	#-1,d0
0000176A 6600                       		bne.s	loc_1538
0000176C 4E75                       		rts	
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1538:				; XREF: NemDec4
0000176E 3E00                       		move.w	d0,d7
00001770                            
00001770                            loc_153A:
00001770 1018                       		move.b	(a0)+,d0
00001772 0C00 0080                  		cmpi.b	#$80,d0
00001776 64EE                       		bcc.s	loc_1530
00001778 1200                       		move.b	d0,d1
0000177A 0247 000F                  		andi.w	#$F,d7
0000177E 0241 0070                  		andi.w	#$70,d1
00001782 8E41                       		or.w	d1,d7
00001784 0240 000F                  		andi.w	#$F,d0
00001788 1200                       		move.b	d0,d1
0000178A E149                       		lsl.w	#8,d1
0000178C 8E41                       		or.w	d1,d7
0000178E 7208                       		moveq	#8,d1
00001790 9240                       		sub.w	d0,d1
00001792 6600                       		bne.s	loc_1568
00001794 1018                       		move.b	(a0)+,d0
00001796 D040                       		add.w	d0,d0
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 60D2                       		bra.s	loc_153A
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_1568:				; XREF: NemDec4
0000179E 1018                       		move.b	(a0)+,d0
000017A0 E368                       		lsl.w	d1,d0
000017A2 D040                       		add.w	d0,d0
000017A4 7A01                       		moveq	#1,d5
000017A6 E36D                       		lsl.w	d1,d5
000017A8 5345                       		subq.w	#1,d5
000017AA                            
000017AA                            loc_1574:
000017AA 3387 0000                  		move.w	d7,(a1,d0.w)
000017AE 5440                       		addq.w	#2,d0
000017B0 51CD FFF8                  		dbf	d5,loc_1574
000017B4 60BA                       		bra.s	loc_153A
000017B6                            ; End of function NemDec4
000017B6                            
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            ; Subroutine to	load pattern load cues
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            
000017B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B6                            
000017B6                            
000017B6                            LoadPLC:
000017B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C0 D040                       		add.w	d0,d0
000017C2 3031 0000                  		move.w	(a1,d0.w),d0
000017C6 43F1 0000                  		lea	(a1,d0.w),a1
000017CA 45F8 F680                  		lea	($FFFFF680).w,a2
000017CE                            
000017CE                            loc_1598:
000017CE 4A92                       		tst.l	(a2)
000017D0 6700                       		beq.s	loc_15A0
000017D2 5C4A                       		addq.w	#6,a2
000017D4 60F8                       		bra.s	loc_1598
000017D6                            ; ===========================================================================
000017D6                            
000017D6                            loc_15A0:				; XREF: LoadPLC
000017D6 3019                       		move.w	(a1)+,d0
000017D8 6B00                       		bmi.s	loc_15AC
000017DA                            
000017DA                            loc_15A4:
000017DA 24D9                       		move.l	(a1)+,(a2)+
000017DC 34D9                       		move.w	(a1)+,(a2)+
000017DE 51C8 FFFA                  		dbf	d0,loc_15A4
000017E2                            
000017E2                            loc_15AC:
000017E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E6 4E75                       		rts	
000017E8                            ; End of function LoadPLC
000017E8                            
000017E8                            
000017E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017E8                            
000017E8                            
000017E8                            LoadPLC2:
000017E8 48E7 0060                  		movem.l	a1-a2,-(sp)
000017EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017F2 D040                       		add.w	d0,d0
000017F4 3031 0000                  		move.w	(a1,d0.w),d0
000017F8 43F1 0000                  		lea	(a1,d0.w),a1
000017FC 6100                       		bsr.s	ClearPLC
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 3019                       		move.w	(a1)+,d0
00001804 6B00                       		bmi.s	loc_15D8
00001806                            
00001806                            loc_15D0:
00001806 24D9                       		move.l	(a1)+,(a2)+
00001808 34D9                       		move.w	(a1)+,(a2)+
0000180A 51C8 FFFA                  		dbf	d0,loc_15D0
0000180E                            
0000180E                            loc_15D8:
0000180E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001812 4E75                       		rts	
00001814                            ; End of function LoadPLC2
00001814                            
00001814                            ; ---------------------------------------------------------------------------
00001814                            ; Subroutine to	clear the pattern load cues
00001814                            ; ---------------------------------------------------------------------------
00001814                            
00001814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001814                            
00001814                            
00001814                            ClearPLC:				; XREF: LoadPLC2
00001814 45F8 F680                  		lea	($FFFFF680).w,a2
00001818 701F                       		moveq	#$1F,d0
0000181A                            
0000181A                            ClearPLC_Loop:
0000181A 429A                       		clr.l	(a2)+
0000181C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001820 4E75                       		rts	
00001822                            ; End of function ClearPLC
00001822                            
00001822                            ; ---------------------------------------------------------------------------
00001822                            ; Subroutine to	use graphics listed in a pattern load cue
00001822                            ; ---------------------------------------------------------------------------
00001822                            
00001822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001822                            
00001822                            
00001822                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001822 4AB8 F680                  		tst.l	($FFFFF680).w
00001826 6700                       		beq.s	locret_1640
00001828 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000182C 6600                       		bne.s	locret_1640
0000182E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001832 47F9 0000 1738             		lea	(loc_1502).l,a3
00001838 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000183C 3418                       		move.w	(a0)+,d2
0000183E 6A00                       		bpl.s	loc_160E
00001840 D6FC 000A                  		adda.w	#$A,a3
00001844                            
00001844                            loc_160E:
00001844 0242 7FFF                  		andi.w	#$7FFF,d2
00001848 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000184C 6100 FF16                  		bsr.w	NemDec4
00001850 1A18                       		move.b	(a0)+,d5
00001852 E145                       		asl.w	#8,d5
00001854 1A18                       		move.b	(a0)+,d5
00001856 7C10                       		moveq	#$10,d6
00001858 7000                       		moveq	#0,d0
0000185A 21C8 F680                  		move.l	a0,($FFFFF680).w
0000185E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001862 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001866 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000186A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000186E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001872 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001876                            
00001876                            locret_1640:
00001876 4E75                       		rts	
00001878                            ; End of function RunPLC_RAM
00001878                            
00001878                            
00001878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001878                            
00001878                            
00001878                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001878 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000187C 6700 0000                  		beq.w	locret_16DA
00001880 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001886 7000                       		moveq	#0,d0
00001888 3038 F684                  		move.w	($FFFFF684).w,d0
0000188C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001892 6000                       		bra.s	loc_1676
00001894                            ; End of function sub_1642
00001894                            
00001894                            
00001894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001894                            
00001894                            
00001894                            sub_165E:				; XREF: Demo_Time
00001894 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001898 6700                       		beq.s	locret_16DA
0000189A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018A0 7000                       		moveq	#0,d0
000018A2 3038 F684                  		move.w	($FFFFF684).w,d0
000018A6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018AC                            
000018AC                            loc_1676:				; XREF: sub_1642
000018AC 49F9 00C0 0004             		lea	($C00004).l,a4
000018B2 E588                       		lsl.l	#2,d0
000018B4 E448                       		lsr.w	#2,d0
000018B6 0040 4000                  		ori.w	#$4000,d0
000018BA 4840                       		swap	d0
000018BC 2880                       		move.l	d0,(a4)
000018BE 594C                       		subq.w	#4,a4
000018C0 2078 F680                  		movea.l	($FFFFF680).w,a0
000018C4 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018C8 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018CC 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018D0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018D4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018D8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018DC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018E0                            
000018E0                            loc_16AA:				; XREF: sub_165E
000018E0 3A7C 0008                  		movea.w	#8,a5
000018E4 6100 FE1C                  		bsr.w	NemDec3
000018E8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018EC 6700                       		beq.s	loc_16DC
000018EE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018F2 66EC                       		bne.s	loc_16AA
000018F4 21C8 F680                  		move.l	a0,($FFFFF680).w
000018F8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018FC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001900 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001904 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001908 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000190C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001910                            
00001910                            locret_16DA:				; XREF: sub_1642
00001910 4E75                       		rts	
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_16DC:				; XREF: sub_165E
00001912 41F8 F680                  		lea	($FFFFF680).w,a0
00001916 7015                       		moveq	#$15,d0
00001918                            
00001918                            loc_16E2:				; XREF: sub_165E
00001918 20E8 0006                  		move.l	6(a0),(a0)+
0000191C 51C8 FFFA                  		dbf	d0,loc_16E2
00001920 4E75                       		rts	
00001922                            ; End of function sub_165E
00001922                            
00001922                            ; ---------------------------------------------------------------------------
00001922                            ; Subroutine to	execute	the pattern load cue
00001922                            ; ---------------------------------------------------------------------------
00001922                            
00001922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001922                            
00001922                            
00001922                            RunPLC_ROM:
00001922 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001928 D040                       		add.w	d0,d0
0000192A 3031 0000                  		move.w	(a1,d0.w),d0
0000192E 43F1 0000                  		lea	(a1,d0.w),a1
00001932 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001934                            
00001934                            RunPLC_Loop:
00001934 2059                       		movea.l	(a1)+,a0	; get art pointer
00001936 7000                       		moveq	#0,d0
00001938 3019                       		move.w	(a1)+,d0	; get VRAM address
0000193A E588                       		lsl.l	#2,d0		; divide address by $20
0000193C E448                       		lsr.w	#2,d0
0000193E 0040 4000                  		ori.w	#$4000,d0
00001942 4840                       		swap	d0
00001944 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000194A 6100 FD2A                  		bsr.w	NemDec		; decompress
0000194E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001952 4E75                       		rts	
00001954                            ; End of function RunPLC_ROM
00001954                            
00001954                            ; ---------------------------------------------------------------------------
00001954                            ; Enigma decompression algorithm
00001954                            ; ---------------------------------------------------------------------------
00001954                            
00001954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001954                            
00001954                            
00001954                            EniDec:
00001954 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001958 3640                       		movea.w	d0,a3
0000195A 1018                       		move.b	(a0)+,d0
0000195C 4880                       		ext.w	d0
0000195E 3A40                       		movea.w	d0,a5
00001960 1818                       		move.b	(a0)+,d4
00001962 E70C                       		lsl.b	#3,d4
00001964 3458                       		movea.w	(a0)+,a2
00001966 D4CB                       		adda.w	a3,a2
00001968 3858                       		movea.w	(a0)+,a4
0000196A D8CB                       		adda.w	a3,a4
0000196C 1A18                       		move.b	(a0)+,d5
0000196E E145                       		asl.w	#8,d5
00001970 1A18                       		move.b	(a0)+,d5
00001972 7C10                       		moveq	#$10,d6
00001974                            
00001974                            loc_173E:				; XREF: loc_1768
00001974 7007                       		moveq	#7,d0
00001976 3E06                       		move.w	d6,d7
00001978 9E40                       		sub.w	d0,d7
0000197A 3205                       		move.w	d5,d1
0000197C EE69                       		lsr.w	d7,d1
0000197E 0241 007F                  		andi.w	#$7F,d1
00001982 3401                       		move.w	d1,d2
00001984 0C41 0040                  		cmpi.w	#$40,d1
00001988 6400                       		bcc.s	loc_1758
0000198A 7006                       		moveq	#6,d0
0000198C E24A                       		lsr.w	#1,d2
0000198E                            
0000198E                            loc_1758:
0000198E 6100 0000                  		bsr.w	sub_188C
00001992 0242 000F                  		andi.w	#$F,d2
00001996 E849                       		lsr.w	#4,d1
00001998 D241                       		add.w	d1,d1
0000199A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000199E                            ; End of function EniDec
0000199E                            
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_1768:				; XREF: loc_17B4
0000199E 32CA                       		move.w	a2,(a1)+
000019A0 524A                       		addq.w	#1,a2
000019A2 51CA FFFA                  		dbf	d2,loc_1768
000019A6 60CC                       		bra.s	loc_173E
000019A8                            ; ===========================================================================
000019A8                            
000019A8                            loc_1772:				; XREF: loc_17B4
000019A8 32CC                       		move.w	a4,(a1)+
000019AA 51CA FFFC                  		dbf	d2,loc_1772
000019AE 60C4                       		bra.s	loc_173E
000019B0                            ; ===========================================================================
000019B0                            
000019B0                            loc_177A:				; XREF: loc_17B4
000019B0 6100 0000                  		bsr.w	loc_17DC
000019B4                            
000019B4                            loc_177E:
000019B4 32C1                       		move.w	d1,(a1)+
000019B6 51CA FFFC                  		dbf	d2,loc_177E
000019BA 60B8                       		bra.s	loc_173E
000019BC                            ; ===========================================================================
000019BC                            
000019BC                            loc_1786:				; XREF: loc_17B4
000019BC 6100 0000                  		bsr.w	loc_17DC
000019C0                            
000019C0                            loc_178A:
000019C0 32C1                       		move.w	d1,(a1)+
000019C2 5241                       		addq.w	#1,d1
000019C4 51CA FFFA                  		dbf	d2,loc_178A
000019C8 60AA                       		bra.s	loc_173E
000019CA                            ; ===========================================================================
000019CA                            
000019CA                            loc_1794:				; XREF: loc_17B4
000019CA 6100 0000                  		bsr.w	loc_17DC
000019CE                            
000019CE                            loc_1798:
000019CE 32C1                       		move.w	d1,(a1)+
000019D0 5341                       		subq.w	#1,d1
000019D2 51CA FFFA                  		dbf	d2,loc_1798
000019D6 609C                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17A2:				; XREF: loc_17B4
000019D8 0C42 000F                  		cmpi.w	#$F,d2
000019DC 6700                       		beq.s	loc_17C4
000019DE                            
000019DE                            loc_17A8:
000019DE 6100 0000                  		bsr.w	loc_17DC
000019E2 32C1                       		move.w	d1,(a1)+
000019E4 51CA FFF8                  		dbf	d2,loc_17A8
000019E8 608A                       		bra.s	loc_173E
000019EA                            ; ===========================================================================
000019EA                            
000019EA                            loc_17B4:				; XREF: EniDec
000019EA 60B2                       		bra.s	loc_1768
000019EC                            ; ===========================================================================
000019EC 60B0                       		bra.s	loc_1768
000019EE                            ; ===========================================================================
000019EE 60B8                       		bra.s	loc_1772
000019F0                            ; ===========================================================================
000019F0 60B6                       		bra.s	loc_1772
000019F2                            ; ===========================================================================
000019F2 60BC                       		bra.s	loc_177A
000019F4                            ; ===========================================================================
000019F4 60C6                       		bra.s	loc_1786
000019F6                            ; ===========================================================================
000019F6 60D2                       		bra.s	loc_1794
000019F8                            ; ===========================================================================
000019F8 60DE                       		bra.s	loc_17A2
000019FA                            ; ===========================================================================
000019FA                            
000019FA                            loc_17C4:				; XREF: loc_17A2
000019FA 5348                       		subq.w	#1,a0
000019FC 0C46 0010                  		cmpi.w	#$10,d6
00001A00 6600                       		bne.s	loc_17CE
00001A02 5348                       		subq.w	#1,a0
00001A04                            
00001A04                            loc_17CE:
00001A04 3008                       		move.w	a0,d0
00001A06 E248                       		lsr.w	#1,d0
00001A08 6400                       		bcc.s	loc_17D6
00001A0A 5248                       		addq.w	#1,a0
00001A0C                            
00001A0C                            loc_17D6:
00001A0C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A10 4E75                       		rts	
00001A12                            ; ===========================================================================
00001A12                            
00001A12                            loc_17DC:				; XREF: loc_17A2
00001A12 360B                       		move.w	a3,d3
00001A14 1204                       		move.b	d4,d1
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_17EE
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_17EE
00001A20 0043 8000                  		ori.w	#-$8000,d3
00001A24                            
00001A24                            loc_17EE:
00001A24 D201                       		add.b	d1,d1
00001A26 6400                       		bcc.s	loc_17FC
00001A28 5346                       		subq.w	#1,d6
00001A2A 0D05                       		btst	d6,d5
00001A2C 6700                       		beq.s	loc_17FC
00001A2E 0643 4000                  		addi.w	#$4000,d3
00001A32                            
00001A32                            loc_17FC:
00001A32 D201                       		add.b	d1,d1
00001A34 6400                       		bcc.s	loc_180A
00001A36 5346                       		subq.w	#1,d6
00001A38 0D05                       		btst	d6,d5
00001A3A 6700                       		beq.s	loc_180A
00001A3C 0643 2000                  		addi.w	#$2000,d3
00001A40                            
00001A40                            loc_180A:
00001A40 D201                       		add.b	d1,d1
00001A42 6400                       		bcc.s	loc_1818
00001A44 5346                       		subq.w	#1,d6
00001A46 0D05                       		btst	d6,d5
00001A48 6700                       		beq.s	loc_1818
00001A4A 0043 1000                  		ori.w	#$1000,d3
00001A4E                            
00001A4E                            loc_1818:
00001A4E D201                       		add.b	d1,d1
00001A50 6400                       		bcc.s	loc_1826
00001A52 5346                       		subq.w	#1,d6
00001A54 0D05                       		btst	d6,d5
00001A56 6700                       		beq.s	loc_1826
00001A58 0043 0800                  		ori.w	#$800,d3
00001A5C                            
00001A5C                            loc_1826:
00001A5C 3205                       		move.w	d5,d1
00001A5E 3E06                       		move.w	d6,d7
00001A60 9E4D                       		sub.w	a5,d7
00001A62 6400                       		bcc.s	loc_1856
00001A64 3C07                       		move.w	d7,d6
00001A66 0646 0010                  		addi.w	#$10,d6
00001A6A 4447                       		neg.w	d7
00001A6C EF69                       		lsl.w	d7,d1
00001A6E 1A10                       		move.b	(a0),d5
00001A70 EF3D                       		rol.b	d7,d5
00001A72 DE47                       		add.w	d7,d7
00001A74 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A78 D245                       		add.w	d5,d1
00001A7A                            
00001A7A                            loc_1844:				; XREF: loc_1868
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 1A18                       		move.b	(a0)+,d5
00001A86 E14D                       		lsl.w	#8,d5
00001A88 1A18                       		move.b	(a0)+,d5
00001A8A 4E75                       		rts	
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1856:				; XREF: loc_1826
00001A8C 6700                       		beq.s	loc_1868
00001A8E EE69                       		lsr.w	d7,d1
00001A90 300D                       		move.w	a5,d0
00001A92 D040                       		add.w	d0,d0
00001A94 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A98 D243                       		add.w	d3,d1
00001A9A 300D                       		move.w	a5,d0
00001A9C 6000                       		bra.s	sub_188C
00001A9E                            ; ===========================================================================
00001A9E                            
00001A9E                            loc_1868:				; XREF: loc_1856
00001A9E 7C10                       		moveq	#$10,d6
00001AA0                            
00001AA0                            loc_186A:
00001AA0 60D8                       		bra.s	loc_1844
00001AA2                            ; ===========================================================================
00001AA2 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AB8 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AC2                            
00001AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC2                            
00001AC2                            
00001AC2                            sub_188C:				; XREF: EniDec
00001AC2 9C40                       		sub.w	d0,d6
00001AC4 0C46 0009                  		cmpi.w	#9,d6
00001AC8 6400                       		bcc.s	locret_189A
00001ACA 5046                       		addq.w	#8,d6
00001ACC E145                       		asl.w	#8,d5
00001ACE 1A18                       		move.b	(a0)+,d5
00001AD0                            
00001AD0                            locret_189A:
00001AD0 4E75                       		rts	
00001AD2                            ; End of function sub_188C
00001AD2                            
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Kosinski decompression algorithm
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            KosDec:
00001AD2                            
00001AD2 =FFFFFFFE                  var_2		= -2
00001AD2 =FFFFFFFF                  var_1		= -1
00001AD2                            
00001AD2 558F                       		subq.l	#2,sp
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18A8:
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 40C6                       		move	sr,d6
00001AE2 51CC 0000                  		dbf	d4,loc_18BA
00001AE6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEA 1E98                       		move.b	(a0)+,(sp)
00001AEC 3A17                       		move.w	(sp),d5
00001AEE 780F                       		moveq	#$F,d4
00001AF0                            
00001AF0                            loc_18BA:
00001AF0 44C6                       		move	d6,ccr
00001AF2 6400                       		bcc.s	loc_18C2
00001AF4 12D8                       		move.b	(a0)+,(a1)+
00001AF6 60E6                       		bra.s	loc_18A8
00001AF8                            ; ===========================================================================
00001AF8                            
00001AF8                            loc_18C2:				; XREF: KosDec
00001AF8 7600                       		moveq	#0,d3
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 40C6                       		move	sr,d6
00001AFE 51CC 0000                  		dbf	d4,loc_18D6
00001B02 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B06 1E98                       		move.b	(a0)+,(sp)
00001B08 3A17                       		move.w	(sp),d5
00001B0A 780F                       		moveq	#$F,d4
00001B0C                            
00001B0C                            loc_18D6:
00001B0C 44C6                       		move	d6,ccr
00001B0E 6500                       		bcs.s	loc_1906
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18EA
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18EA:
00001B20 E353                       		roxl.w	#1,d3
00001B22 E24D                       		lsr.w	#1,d5
00001B24 51CC 0000                  		dbf	d4,loc_18FC
00001B28 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2C 1E98                       		move.b	(a0)+,(sp)
00001B2E 3A17                       		move.w	(sp),d5
00001B30 780F                       		moveq	#$F,d4
00001B32                            
00001B32                            loc_18FC:
00001B32 E353                       		roxl.w	#1,d3
00001B34 5243                       		addq.w	#1,d3
00001B36 74FF                       		moveq	#-1,d2
00001B38 1418                       		move.b	(a0)+,d2
00001B3A 6000                       		bra.s	loc_191C
00001B3C                            ; ===========================================================================
00001B3C                            
00001B3C                            loc_1906:				; XREF: loc_18C2
00001B3C 1018                       		move.b	(a0)+,d0
00001B3E 1218                       		move.b	(a0)+,d1
00001B40 74FF                       		moveq	#-1,d2
00001B42 1401                       		move.b	d1,d2
00001B44 EB4A                       		lsl.w	#5,d2
00001B46 1400                       		move.b	d0,d2
00001B48 0241 0007                  		andi.w	#7,d1
00001B4C 6700                       		beq.s	loc_1928
00001B4E 1601                       		move.b	d1,d3
00001B50 5243                       		addq.w	#1,d3
00001B52                            
00001B52                            loc_191C:
00001B52 1031 2000                  		move.b	(a1,d2.w),d0
00001B56 12C0                       		move.b	d0,(a1)+
00001B58 51CB FFF8                  		dbf	d3,loc_191C
00001B5C 6080                       		bra.s	loc_18A8
00001B5E                            ; ===========================================================================
00001B5E                            
00001B5E                            loc_1928:				; XREF: loc_1906
00001B5E 1218                       		move.b	(a0)+,d1
00001B60 6700                       		beq.s	loc_1938
00001B62 0C01 0001                  		cmpi.b	#1,d1
00001B66 6700 FF76                  		beq.w	loc_18A8
00001B6A 1601                       		move.b	d1,d3
00001B6C 60E4                       		bra.s	loc_191C
00001B6E                            ; ===========================================================================
00001B6E                            
00001B6E                            loc_1938:				; XREF: loc_1928
00001B6E 548F                       		addq.l	#2,sp
00001B70 4E75                       		rts	
00001B72                            ; End of function KosDec
00001B72                            
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routine loading subroutine
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            
00001B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B72                            
00001B72                            
00001B72                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B72 7400                       		moveq	#0,d2
00001B74 7000                       		moveq	#0,d0
00001B76 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B7A D040                       		add.w	d0,d0		; multiply by 2
00001B7C 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B80 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B84                            ; End of function PalCycle_Load
00001B84                            
00001B84                            ; ===========================================================================
00001B84                            ; ---------------------------------------------------------------------------
00001B84                            ; Pallet cycling routines
00001B84                            ; ---------------------------------------------------------------------------
00001B84 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B86 0000                       		dc.w PalCycle_LZ-PalCycle
00001B88 0000                       		dc.w PalCycle_MZ-PalCycle
00001B8A 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B8C 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B8E 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B90 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B92 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B94                            
00001B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B94                            
00001B94                            
00001B94                            PalCycle_Title:				; XREF: TitleScreen
00001B94 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B9A 6000                       		bra.s	loc_196A
00001B9C                            ; ===========================================================================
00001B9C                            
00001B9C                            PalCycle_GHZ:				; XREF: PalCycle
00001B9C 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BA2                            
00001BA2                            loc_196A:				; XREF: PalCycle_Title
00001BA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BA6 6A00                       		bpl.s	locret_1990
00001BA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BB6 0240 0003                  		andi.w	#3,d0
00001BBA E748                       		lsl.w	#3,d0
00001BBC 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BC0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BC8                            
00001BC8                            locret_1990:
00001BC8 4E75                       		rts	
00001BCA                            ; End of function PalCycle_Title
00001BCA                            
00001BCA                            
00001BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCA                            
00001BCA                            
00001BCA                            PalCycle_LZ:				; XREF: PalCycle
00001BCA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCE 6A00                       		bpl.s	loc_19D8
00001BD0 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BD6 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BDE 0240 0003                  		andi.w	#3,d0
00001BE2 E748                       		lsl.w	#3,d0
00001BE4 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BEA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BF0 6600                       		bne.s	loc_19C0
00001BF2 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BF8                            
00001BF8                            loc_19C0:
00001BF8 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C00 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C04 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C10                            
00001C10                            loc_19D8:
00001C10 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C14 0240 0007                  		andi.w	#7,d0
00001C18 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C1C 6700                       		beq.s	locret_1A3A
00001C1E 7201                       		moveq	#1,d1
00001C20 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C24 6700                       		beq.s	loc_19F0
00001C26 4441                       		neg.w	d1
00001C28                            
00001C28                            loc_19F0:
00001C28 3038 F650                  		move.w	($FFFFF650).w,d0
00001C2C 0240 0003                  		andi.w	#3,d0
00001C30 D041                       		add.w	d1,d0
00001C32 0C40 0003                  		cmpi.w	#3,d0
00001C36 6500                       		bcs.s	loc_1A0A
00001C38 3200                       		move.w	d0,d1
00001C3A 7000                       		moveq	#0,d0
00001C3C 4A41                       		tst.w	d1
00001C3E 6A00                       		bpl.s	loc_1A0A
00001C40 7002                       		moveq	#2,d0
00001C42                            
00001C42                            loc_1A0A:
00001C42 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C46 D040                       		add.w	d0,d0
00001C48 3200                       		move.w	d0,d1
00001C4A D040                       		add.w	d0,d0
00001C4C D041                       		add.w	d1,d0
00001C4E 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C54 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C60 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C66 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C6E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C72                            
00001C72                            locret_1A3A:
00001C72 4E75                       		rts	
00001C74                            ; End of function PalCycle_LZ
00001C74                            
00001C74                            ; ===========================================================================
00001C74 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C7C                            ; ===========================================================================
00001C7C                            
00001C7C                            PalCycle_MZ:				; XREF: PalCycle
00001C7C 4E75                       		rts	
00001C7E                            
00001C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7E                            
00001C7E                            
00001C7E                            PalCycle_SLZ:				; XREF: PalCycle
00001C7E 4E75                       		rts	
00001C80                            ; End of function PalCycle_SLZ
00001C80                            
00001C80                            
00001C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C80                            
00001C80                            
00001C80                            PalCycle_SYZ:				; XREF: PalCycle
00001C80 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C84 6A00                       		bpl.s	locret_1AC6
00001C86 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C8C 3038 F632                  		move.w	($FFFFF632).w,d0
00001C90 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C94 0240 0003                  		andi.w	#3,d0
00001C98 E548                       		lsl.w	#2,d0
00001C9A 3200                       		move.w	d0,d1
00001C9C D040                       		add.w	d0,d0
00001C9E 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CA4 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CB0 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CB6 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CBA 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CBE 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CC4                            
00001CC4                            locret_1AC6:
00001CC4 4E75                       		rts	
00001CC6                            ; End of function PalCycle_SYZ
00001CC6                            
00001CC6                            
00001CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CC6                            
00001CC6                            
00001CC6                            PalCycle_SBZ:				; XREF: PalCycle
00001CC6 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CCC 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CD0 6700                       		beq.s	loc_1ADA
00001CD2 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CD8                            
00001CD8                            loc_1ADA:
00001CD8 43F8 F650                  		lea	($FFFFF650).w,a1
00001CDC 321A                       		move.w	(a2)+,d1
00001CDE                            
00001CDE                            loc_1AE0:
00001CDE 5311                       		subq.b	#1,(a1)
00001CE0 6B00                       		bmi.s	loc_1AEA
00001CE2 5489                       		addq.l	#2,a1
00001CE4 5C8A                       		addq.l	#6,a2
00001CE6 6000                       		bra.s	loc_1B06
00001CE8                            ; ===========================================================================
00001CE8                            
00001CE8                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CE8 12DA                       		move.b	(a2)+,(a1)+
00001CEA 1011                       		move.b	(a1),d0
00001CEC 5200                       		addq.b	#1,d0
00001CEE B01A                       		cmp.b	(a2)+,d0
00001CF0 6500                       		bcs.s	loc_1AF6
00001CF2 7000                       		moveq	#0,d0
00001CF4                            
00001CF4                            loc_1AF6:
00001CF4 12C0                       		move.b	d0,(a1)+
00001CF6 0240 000F                  		andi.w	#$F,d0
00001CFA D040                       		add.w	d0,d0
00001CFC 305A                       		movea.w	(a2)+,a0
00001CFE 365A                       		movea.w	(a2)+,a3
00001D00 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D04                            
00001D04                            loc_1B06:				; XREF: PalCycle_SBZ
00001D04 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D08 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D0C 6A00                       		bpl.s	locret_1B64
00001D0E 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D14 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D1A 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D1E 6700                       		beq.s	loc_1B2E
00001D20 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D26 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D2C                            
00001D2C                            loc_1B2E:
00001D2C 72FF                       		moveq	#-1,d1
00001D2E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D32 6700                       		beq.s	loc_1B38
00001D34 4441                       		neg.w	d1
00001D36                            
00001D36                            loc_1B38:
00001D36 3038 F632                  		move.w	($FFFFF632).w,d0
00001D3A 0240 0003                  		andi.w	#3,d0
00001D3E D041                       		add.w	d1,d0
00001D40 0C40 0003                  		cmpi.w	#3,d0
00001D44 6500                       		bcs.s	loc_1B52
00001D46 3200                       		move.w	d0,d1
00001D48 7000                       		moveq	#0,d0
00001D4A 4A41                       		tst.w	d1
00001D4C 6A00                       		bpl.s	loc_1B52
00001D4E 7002                       		moveq	#2,d0
00001D50                            
00001D50                            loc_1B52:
00001D50 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D54 D040                       		add.w	d0,d0
00001D56 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D5A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D62                            
00001D62                            locret_1B64:
00001D62 4E75                       		rts	
00001D64                            ; End of function PalCycle_SBZ
00001D64                            
00001D64                            ; ===========================================================================
00001D64                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D84                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DA4                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DC4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DD6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DE8                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E50                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E74                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E94                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EA4                            
00001EA4                            Pal_SBZCycList:
00001EA4                            	include "_inc\SBZ pallet script 1.asm"
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4                            ; Scrap Brain Zone 1 pallet cycling script
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4 0008                       	dc.w 8			; number of entries - 1
00001EA6 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EA8 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EAA FB50                       	dc.w $FB50		; RAM address
00001EAC 0D08                       	dc.b $D, 8
00001EAE 0000                       	dc.w Pal_SBZCyc2
00001EB0 FB52                       	dc.w $FB52
00001EB2 0E08                       	dc.b $E, 8
00001EB4 0000                       	dc.w Pal_SBZCyc3
00001EB6 FB6E                       	dc.w $FB6E
00001EB8 0B08                       	dc.b $B, 8
00001EBA 0000                       	dc.w Pal_SBZCyc5
00001EBC FB70                       	dc.w $FB70
00001EBE 0708                       	dc.b 7,	8
00001EC0 0000                       	dc.w Pal_SBZCyc6
00001EC2 FB72                       	dc.w $FB72
00001EC4 1C10                       	dc.b $1C, $10
00001EC6 0000                       	dc.w Pal_SBZCyc7
00001EC8 FB7E                       	dc.w $FB7E
00001ECA 0303                       	dc.b 3,	3
00001ECC 0000                       	dc.w Pal_SBZCyc8
00001ECE FB78                       	dc.w $FB78
00001ED0 0303                       	dc.b 3,	3
00001ED2 0000                       	dc.w Pal_SBZCyc8+2
00001ED4 FB7A                       	dc.w $FB7A
00001ED6 0303                       	dc.b 3,	3
00001ED8 0000                       	dc.w Pal_SBZCyc8+4
00001EDA FB7C                       	dc.w $FB7C
00001EDC                            	even
00001EDC                            	even
00001EDC                            
00001EDC                            Pal_SBZCycList2:
00001EDC                            	include "_inc\SBZ pallet script 2.asm"
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC                            ; Scrap Brain Zone 2 pallet cycling script
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC 0006                       	dc.w 6
00001EDE 0708                       	dc.b 7,	8
00001EE0 0000                       	dc.w Pal_SBZCyc1
00001EE2 FB50                       	dc.w $FB50
00001EE4 0D08                       	dc.b $D, 8
00001EE6 0000                       	dc.w Pal_SBZCyc2
00001EE8 FB52                       	dc.w $FB52
00001EEA 0908                       	dc.b 9,	8
00001EEC 0000                       	dc.w Pal_SBZCyc9
00001EEE FB70                       	dc.w $FB70
00001EF0 0708                       	dc.b 7,	8
00001EF2 0000                       	dc.w Pal_SBZCyc6
00001EF4 FB72                       	dc.w $FB72
00001EF6 0303                       	dc.b 3,	3
00001EF8 0000                       	dc.w Pal_SBZCyc8
00001EFA FB78                       	dc.w $FB78
00001EFC 0303                       	dc.b 3,	3
00001EFE 0000                       	dc.w Pal_SBZCyc8+2
00001F00 FB7A                       	dc.w $FB7A
00001F02 0303                       	dc.b 3,	3
00001F04 0000                       	dc.w Pal_SBZCyc8+4
00001F06 FB7C                       	dc.w $FB7C
00001F08                            	even
00001F08                            	even
00001F08                            
00001F08                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F18                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F28                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F38                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F44                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F54                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F64                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F84                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F8E                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F9E                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FAA                            ; ---------------------------------------------------------------------------
00001FAA                            ; Subroutine to	fade out and fade in
00001FAA                            ; ---------------------------------------------------------------------------
00001FAA                            
00001FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FAA                            
00001FAA                            
00001FAA                            Pal_FadeTo:
00001FAA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FB0                            
00001FB0                            Pal_FadeTo2:
00001FB0 7000                       		moveq	#0,d0
00001FB2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBA D0C0                       		adda.w	d0,a0
00001FBC 7200                       		moveq	#0,d1
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            Pal_ToBlack:
00001FC2 30C1                       		move.w	d1,(a0)+
00001FC4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FC8                            
00001FC8 383C 0015                  		move.w	#$15,d4
00001FCC 1A3C 0009                  		move.b	#9,d5
00001FD0                            
00001FD0                            loc_1DCE:
00001FD0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FD6 6100 0000                  		bsr.w	DelayProgram
00001FDA 6100                       		bsr.s	Pal_FadeIn
00001FDC 6100 F844                  		bsr.w	RunPLC_RAM
00001FE0 51CC FFEE                  		dbf	d4,loc_1DCE
00001FE4 4E75                       		rts	
00001FE6                            ; End of function Pal_FadeTo
00001FE6                            
00001FE6                            ; ---------------------------------------------------------------------------
00001FE6                            ; Pallet fade-in subroutine
00001FE6                            ; ---------------------------------------------------------------------------
00001FE6                            
00001FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE6                            
00001FE6                            
00001FE6                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FE6 7000                       		moveq	#0,d0
00001FE8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FEC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FF0 1038 F626                  		move.b	($FFFFF626).w,d0
00001FF4 D0C0                       		adda.w	d0,a0
00001FF6 D2C0                       		adda.w	d0,a1
00001FF8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FFC                            
00001FFC                            loc_1DFA:
00001FFC 6100                       		bsr.s	Pal_AddColor
00001FFE 51C8 FFFC                  		dbf	d0,loc_1DFA
00002002 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002008 6600                       		bne.s	locret_1E24
0000200A 7000                       		moveq	#0,d0
0000200C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002010 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002014 1038 F626                  		move.b	($FFFFF626).w,d0
00002018 D0C0                       		adda.w	d0,a0
0000201A D2C0                       		adda.w	d0,a1
0000201C 1038 F627                  		move.b	($FFFFF627).w,d0
00002020                            
00002020                            loc_1E1E:
00002020 6100                       		bsr.s	Pal_AddColor
00002022 51C8 FFFC                  		dbf	d0,loc_1E1E
00002026                            
00002026                            locret_1E24:
00002026 4E75                       		rts	
00002028                            ; End of function Pal_FadeIn
00002028                            
00002028                            
00002028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002028                            
00002028                            
00002028                            Pal_AddColor:				; XREF: Pal_FadeIn
00002028 3419                       		move.w	(a1)+,d2
0000202A 3610                       		move.w	(a0),d3
0000202C B642                       		cmp.w	d2,d3
0000202E 6700                       		beq.s	loc_1E4E
00002030 3203                       		move.w	d3,d1
00002032 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002036 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002038 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000203A 30C1                       		move.w	d1,(a0)+	; update pallet
0000203C 4E75                       		rts	
0000203E                            ; ===========================================================================
0000203E                            
0000203E                            Pal_AddGreen:				; XREF: Pal_AddColor
0000203E 3203                       		move.w	d3,d1
00002040 0641 0020                  		addi.w	#$20,d1		; increase green value
00002044 B242                       		cmp.w	d2,d1
00002046 6200                       		bhi.s	Pal_AddRed
00002048 30C1                       		move.w	d1,(a0)+	; update pallet
0000204A 4E75                       		rts	
0000204C                            ; ===========================================================================
0000204C                            
0000204C                            Pal_AddRed:				; XREF: Pal_AddGreen
0000204C 5458                       		addq.w	#2,(a0)+	; increase red value
0000204E 4E75                       		rts	
00002050                            ; ===========================================================================
00002050                            
00002050                            loc_1E4E:				; XREF: Pal_AddColor
00002050 5448                       		addq.w	#2,a0
00002052 4E75                       		rts	
00002054                            ; End of function Pal_AddColor
00002054                            
00002054                            
00002054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002054                            
00002054                            
00002054                            Pal_FadeFrom:
00002054 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000205A 383C 0015                  		move.w	#$15,d4
0000205E                            loc_1E5C:
0000205E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002064 6100 0000                  		bsr.w	DelayProgram
00002068 6100                       		bsr.s	Pal_FadeOut
0000206A 6100 F7B6                  		bsr.w	RunPLC_RAM
0000206E 51CC FFEE                  		dbf	d4,loc_1E5C
00002072 4E75                       		rts	
00002074                            ; End of function Pal_FadeFrom
00002074                            
00002074                            ; ---------------------------------------------------------------------------
00002074                            ; Pallet fade-out subroutine
00002074                            ; ---------------------------------------------------------------------------
00002074                            
00002074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002074                            
00002074                            
00002074                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002074 7000                       		moveq	#0,d0
00002076 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000207A 1038 F626                  		move.b	($FFFFF626).w,d0
0000207E D0C0                       		adda.w	d0,a0
00002080 1038 F627                  		move.b	($FFFFF627).w,d0
00002084                            
00002084                            loc_1E82:
00002084 6100                       		bsr.s	Pal_DecColor
00002086 51C8 FFFC                  		dbf	d0,loc_1E82
0000208A                            
0000208A 7000                       		moveq	#0,d0
0000208C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002090 1038 F626                  		move.b	($FFFFF626).w,d0
00002094 D0C0                       		adda.w	d0,a0
00002096 1038 F627                  		move.b	($FFFFF627).w,d0
0000209A                            
0000209A                            loc_1E98:
0000209A 6100                       		bsr.s	Pal_DecColor
0000209C 51C8 FFFC                  		dbf	d0,loc_1E98
000020A0 4E75                       		rts	
000020A2                            ; End of function Pal_FadeOut
000020A2                            
000020A2                            
000020A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A2                            
000020A2                            
000020A2                            Pal_DecColor:				; XREF: Pal_FadeOut
000020A2 3410                       		move.w	(a0),d2
000020A4 6700                       		beq.s	loc_1ECC
000020A6 3202                       		move.w	d2,d1
000020A8 0241 000E                  		andi.w	#$E,d1
000020AC 6700                       		beq.s	Pal_DecGreen
000020AE 5558                       		subq.w	#2,(a0)+	; decrease red value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            Pal_DecGreen:				; XREF: Pal_DecColor
000020B2 3202                       		move.w	d2,d1
000020B4 0241 00E0                  		andi.w	#$E0,d1
000020B8 6700                       		beq.s	Pal_DecBlue
000020BA 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020BE 4E75                       		rts	
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020C0 3202                       		move.w	d2,d1
000020C2 0241 0E00                  		andi.w	#$E00,d1
000020C6 6700                       		beq.s	loc_1ECC
000020C8 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020CC 4E75                       		rts	
000020CE                            ; ===========================================================================
000020CE                            
000020CE                            loc_1ECC:				; XREF: Pal_DecColor
000020CE 5448                       		addq.w	#2,a0
000020D0 4E75                       		rts	
000020D2                            ; End of function Pal_DecColor
000020D2                            
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            ; Subroutine to	fill the pallet	with white (special stage)
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            
000020D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D2                            
000020D2                            
000020D2                            Pal_MakeWhite:				; XREF: SpecialStage
000020D2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D8 7000                       		moveq	#0,d0
000020DA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DE 1038 F626                  		move.b	($FFFFF626).w,d0
000020E2 D0C0                       		adda.w	d0,a0
000020E4 323C 0EEE                  		move.w	#$EEE,d1
000020E8 1038 F627                  		move.b	($FFFFF627).w,d0
000020EC                            
000020EC                            PalWhite_Loop:
000020EC 30C1                       		move.w	d1,(a0)+
000020EE 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020F2 383C 0015                  		move.w	#$15,d4
000020F6                            
000020F6                            loc_1EF4:
000020F6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020FC 6100 0000                  		bsr.w	DelayProgram
00002100 6100                       		bsr.s	Pal_WhiteToBlack
00002102 6100 F71E                  		bsr.w	RunPLC_RAM
00002106 51CC FFEE                  		dbf	d4,loc_1EF4
0000210A 4E75                       		rts	
0000210C                            ; End of function Pal_MakeWhite
0000210C                            
0000210C                            
0000210C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210C                            
0000210C                            
0000210C                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000210C 7000                       		moveq	#0,d0
0000210E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002112 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002116 1038 F626                  		move.b	($FFFFF626).w,d0
0000211A D0C0                       		adda.w	d0,a0
0000211C D2C0                       		adda.w	d0,a1
0000211E 1038 F627                  		move.b	($FFFFF627).w,d0
00002122                            
00002122                            loc_1F20:
00002122 6100                       		bsr.s	Pal_DecColor2
00002124 51C8 FFFC                  		dbf	d0,loc_1F20
00002128                            
00002128 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000212E 6600                       		bne.s	locret_1F4A
00002130 7000                       		moveq	#0,d0
00002132 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002136 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213A 1038 F626                  		move.b	($FFFFF626).w,d0
0000213E D0C0                       		adda.w	d0,a0
00002140 D2C0                       		adda.w	d0,a1
00002142 1038 F627                  		move.b	($FFFFF627).w,d0
00002146                            
00002146                            loc_1F44:
00002146 6100                       		bsr.s	Pal_DecColor2
00002148 51C8 FFFC                  		dbf	d0,loc_1F44
0000214C                            
0000214C                            locret_1F4A:
0000214C 4E75                       		rts	
0000214E                            ; End of function Pal_WhiteToBlack
0000214E                            
0000214E                            
0000214E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214E                            
0000214E                            
0000214E                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000214E 3419                       		move.w	(a1)+,d2
00002150 3610                       		move.w	(a0),d3
00002152 B642                       		cmp.w	d2,d3
00002154 6700                       		beq.s	loc_1F78
00002156 3203                       		move.w	d3,d1
00002158 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000215C 6500                       		bcs.s	loc_1F64
0000215E B242                       		cmp.w	d2,d1
00002160 6500                       		bcs.s	loc_1F64
00002162 30C1                       		move.w	d1,(a0)+
00002164 4E75                       		rts	
00002166                            ; ===========================================================================
00002166                            
00002166                            loc_1F64:				; XREF: Pal_DecColor2
00002166 3203                       		move.w	d3,d1
00002168 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000216C 6500                       		bcs.s	loc_1F74
0000216E B242                       		cmp.w	d2,d1
00002170 6500                       		bcs.s	loc_1F74
00002172 30C1                       		move.w	d1,(a0)+
00002174 4E75                       		rts	
00002176                            ; ===========================================================================
00002176                            
00002176                            loc_1F74:				; XREF: loc_1F64
00002176 5558                       		subq.w	#2,(a0)+	; decrease red value
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            loc_1F78:				; XREF: Pal_DecColor2
0000217A 5448                       		addq.w	#2,a0
0000217C 4E75                       		rts	
0000217E                            ; End of function Pal_DecColor2
0000217E                            
0000217E                            ; ---------------------------------------------------------------------------
0000217E                            ; Subroutine to	make a white flash when	you enter a special stage
0000217E                            ; ---------------------------------------------------------------------------
0000217E                            
0000217E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000217E                            
0000217E                            
0000217E                            Pal_MakeFlash:				; XREF: SpecialStage
0000217E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002184 383C 0015                  		move.w	#$15,d4
00002188                            
00002188                            loc_1F86:
00002188 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000218E 6100 0000                  		bsr.w	DelayProgram
00002192 6100                       		bsr.s	Pal_ToWhite
00002194 6100 F68C                  		bsr.w	RunPLC_RAM
00002198 51CC FFEE                  		dbf	d4,loc_1F86
0000219C 4E75                       		rts	
0000219E                            ; End of function Pal_MakeFlash
0000219E                            
0000219E                            
0000219E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219E                            
0000219E                            
0000219E                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000219E 7000                       		moveq	#0,d0
000021A0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021A4 1038 F626                  		move.b	($FFFFF626).w,d0
000021A8 D0C0                       		adda.w	d0,a0
000021AA 1038 F627                  		move.b	($FFFFF627).w,d0
000021AE                            
000021AE                            loc_1FAC:
000021AE 6100                       		bsr.s	Pal_AddColor2
000021B0 51C8 FFFC                  		dbf	d0,loc_1FAC
000021B4 7000                       		moveq	#0,d0
000021B6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021BA 1038 F626                  		move.b	($FFFFF626).w,d0
000021BE D0C0                       		adda.w	d0,a0
000021C0 1038 F627                  		move.b	($FFFFF627).w,d0
000021C4                            
000021C4                            loc_1FC2:
000021C4 6100                       		bsr.s	Pal_AddColor2
000021C6 51C8 FFFC                  		dbf	d0,loc_1FC2
000021CA 4E75                       		rts	
000021CC                            ; End of function Pal_ToWhite
000021CC                            
000021CC                            
000021CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021CC                            
000021CC                            
000021CC                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021CC 3410                       		move.w	(a0),d2
000021CE 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021D2 6700                       		beq.s	loc_2006
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 0C41 000E                  		cmpi.w	#$E,d1
000021DE 6700                       		beq.s	loc_1FE2
000021E0 5458                       		addq.w	#2,(a0)+	; increase red value
000021E2 4E75                       		rts	
000021E4                            ; ===========================================================================
000021E4                            
000021E4                            loc_1FE2:				; XREF: Pal_AddColor2
000021E4 3202                       		move.w	d2,d1
000021E6 0241 00E0                  		andi.w	#$E0,d1
000021EA 0C41 00E0                  		cmpi.w	#$E0,d1
000021EE 6700                       		beq.s	loc_1FF4
000021F0 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021F4 4E75                       		rts	
000021F6                            ; ===========================================================================
000021F6                            
000021F6                            loc_1FF4:				; XREF: loc_1FE2
000021F6 3202                       		move.w	d2,d1
000021F8 0241 0E00                  		andi.w	#$E00,d1
000021FC 0C41 0E00                  		cmpi.w	#$E00,d1
00002200 6700                       		beq.s	loc_2006
00002202 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002206 4E75                       		rts	
00002208                            ; ===========================================================================
00002208                            
00002208                            loc_2006:				; XREF: Pal_AddColor2
00002208 5448                       		addq.w	#2,a0
0000220A 4E75                       		rts	
0000220C                            ; End of function Pal_AddColor2
0000220C                            
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            ; Pallet cycling routine - Sega	logo
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            
0000220C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000220C                            
0000220C                            
0000220C                            PalCycle_Sega:				; XREF: SegaScreen
0000220C 4A38 F635                  		tst.b	($FFFFF635).w
00002210 6600                       		bne.s	loc_206A
00002212 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002216 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000221C 7205                       		moveq	#5,d1
0000221E 3038 F632                  		move.w	($FFFFF632).w,d0
00002222                            
00002222                            loc_2020:
00002222 6A00                       		bpl.s	loc_202A
00002224 5448                       		addq.w	#2,a0
00002226 5341                       		subq.w	#1,d1
00002228 5440                       		addq.w	#2,d0
0000222A 60F6                       		bra.s	loc_2020
0000222C                            ; ===========================================================================
0000222C                            
0000222C                            loc_202A:				; XREF: PalCycle_Sega
0000222C 3400                       		move.w	d0,d2
0000222E 0242 001E                  		andi.w	#$1E,d2
00002232 6600                       		bne.s	loc_2034
00002234 5440                       		addq.w	#2,d0
00002236                            
00002236                            loc_2034:
00002236 0C40 0060                  		cmpi.w	#$60,d0
0000223A 6400                       		bcc.s	loc_203E
0000223C 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002240                            
00002240                            loc_203E:
00002240 5440                       		addq.w	#2,d0
00002242 51C9 FFE8                  		dbf	d1,loc_202A
00002246 3038 F632                  		move.w	($FFFFF632).w,d0
0000224A 5440                       		addq.w	#2,d0
0000224C 3400                       		move.w	d0,d2
0000224E 0242 001E                  		andi.w	#$1E,d2
00002252 6600                       		bne.s	loc_2054
00002254 5440                       		addq.w	#2,d0
00002256                            
00002256                            loc_2054:
00002256 0C40 0064                  		cmpi.w	#$64,d0
0000225A 6D00                       		blt.s	loc_2062
0000225C 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002262 70F4                       		moveq	#-$C,d0
00002264                            
00002264                            loc_2062:
00002264 31C0 F632                  		move.w	d0,($FFFFF632).w
00002268 7001                       		moveq	#1,d0
0000226A 4E75                       		rts	
0000226C                            ; ===========================================================================
0000226C                            
0000226C                            loc_206A:				; XREF: loc_202A
0000226C 5338 F634                  		subq.b	#1,($FFFFF634).w
00002270 6A00                       		bpl.s	loc_20BC
00002272 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002278 3038 F632                  		move.w	($FFFFF632).w,d0
0000227C 0640 000C                  		addi.w	#$C,d0
00002280 0C40 0030                  		cmpi.w	#$30,d0
00002284 6500                       		bcs.s	loc_2088
00002286 7000                       		moveq	#0,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_2088:				; XREF: loc_206A
0000228A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000228E 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002294 41F0 0000                  		lea	(a0,d0.w),a0
00002298 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000229C 22D8                       		move.l	(a0)+,(a1)+
0000229E 22D8                       		move.l	(a0)+,(a1)+
000022A0 3298                       		move.w	(a0)+,(a1)
000022A2 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022A6 7000                       		moveq	#0,d0
000022A8 722C                       		moveq	#$2C,d1
000022AA                            
000022AA                            loc_20A8:
000022AA 3400                       		move.w	d0,d2
000022AC 0242 001E                  		andi.w	#$1E,d2
000022B0 6600                       		bne.s	loc_20B2
000022B2 5440                       		addq.w	#2,d0
000022B4                            
000022B4                            loc_20B2:
000022B4 3390 0000                  		move.w	(a0),(a1,d0.w)
000022B8 5440                       		addq.w	#2,d0
000022BA 51C9 FFEE                  		dbf	d1,loc_20A8
000022BE                            
000022BE                            loc_20BC:
000022BE 7001                       		moveq	#1,d0
000022C0 4E75                       		rts	
000022C2                            ; End of function PalCycle_Sega
000022C2                            
000022C2                            ; ===========================================================================
000022C2                            
000022C2                            Pal_Sega1:	incbin	pallet\sega1.bin
000022CE                            Pal_Sega2:	incbin	pallet\sega2.bin
000022FE                            
000022FE                            ; ---------------------------------------------------------------------------
000022FE                            ; Subroutines to load pallets
000022FE                            ; ---------------------------------------------------------------------------
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            PalLoad1:
000022FE 43F9 0000 0000             		lea	(PalPointers).l,a1
00002304 E748                       		lsl.w	#3,d0
00002306 D2C0                       		adda.w	d0,a1
00002308 2459                       		movea.l	(a1)+,a2
0000230A 3659                       		movea.w	(a1)+,a3
0000230C D6FC 0080                  		adda.w	#$80,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2110:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2110
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad1
0000231A                            
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad2:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2128:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2128
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad2
00002332                            
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Underwater pallet loading subroutine
00002332                            ; ---------------------------------------------------------------------------
00002332                            
00002332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002332                            
00002332                            
00002332                            PalLoad3_Water:
00002332 43F9 0000 0000             		lea	(PalPointers).l,a1
00002338 E748                       		lsl.w	#3,d0
0000233A D2C0                       		adda.w	d0,a1
0000233C 2459                       		movea.l	(a1)+,a2
0000233E 3659                       		movea.w	(a1)+,a3
00002340 96FC 0080                  		suba.w	#$80,a3
00002344 3E19                       		move.w	(a1)+,d7
00002346                            
00002346                            loc_2144:
00002346 26DA                       		move.l	(a2)+,(a3)+
00002348 51CF FFFC                  		dbf	d7,loc_2144
0000234C 4E75                       		rts	
0000234E                            ; End of function PalLoad3_Water
0000234E                            
0000234E                            
0000234E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234E                            
0000234E                            
0000234E                            PalLoad4_Water:
0000234E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002354 E748                       		lsl.w	#3,d0
00002356 D2C0                       		adda.w	d0,a1
00002358 2459                       		movea.l	(a1)+,a2
0000235A 3659                       		movea.w	(a1)+,a3
0000235C 96FC 0100                  		suba.w	#$100,a3
00002360 3E19                       		move.w	(a1)+,d7
00002362                            
00002362                            loc_2160:
00002362 26DA                       		move.l	(a2)+,(a3)+
00002364 51CF FFFC                  		dbf	d7,loc_2160
00002368 4E75                       		rts	
0000236A                            ; End of function PalLoad4_Water
0000236A                            
0000236A                            ; ===========================================================================
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            ; Pallet pointers
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            PalPointers:
0000236A                            	include "_inc\Pallet pointers.asm"
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            ; Pallet pointers
0000236A                            ; ---------------------------------------------------------------------------
0000236A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000236E FB00                       	dc.w $FB00		; RAM address
00002370 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002372 0000 0000                  	dc.l Pal_Title
00002376 FB00                       	dc.w $FB00
00002378 001F                       	dc.w $1F
0000237A 0000 0000                  	dc.l Pal_LevelSel
0000237E FB00                       	dc.w $FB00
00002380 001F                       	dc.w $1F
00002382 0000 0000                  	dc.l Pal_Sonic
00002386 FB00                       	dc.w $FB00
00002388 0007                       	dc.w 7
0000238A 0000 0000                  	dc.l Pal_GHZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_LZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_MZ
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_SLZ
000023A6 FB20                       	dc.w $FB20
000023A8 0017                       	dc.w $17
000023AA 0000 0000                  	dc.l Pal_SYZ
000023AE FB20                       	dc.w $FB20
000023B0 0017                       	dc.w $17
000023B2 0000 0000                  	dc.l Pal_SBZ1
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_Special
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_LZWater
000023C6 FB00                       	dc.w $FB00
000023C8 001F                       	dc.w $1F
000023CA 0000 0000                  	dc.l Pal_SBZ3
000023CE FB20                       	dc.w $FB20
000023D0 0017                       	dc.w $17
000023D2 0000 0000                  	dc.l Pal_SBZ3Water
000023D6 FB00                       	dc.w $FB00
000023D8 001F                       	dc.w $1F
000023DA 0000 0000                  	dc.l Pal_SBZ2
000023DE FB20                       	dc.w $FB20
000023E0 0017                       	dc.w $17
000023E2 0000 0000                  	dc.l Pal_LZSonWater
000023E6 FB00                       	dc.w $FB00
000023E8 0007                       	dc.w 7
000023EA 0000 0000                  	dc.l Pal_SBZ3SonWat
000023EE FB00                       	dc.w $FB00
000023F0 0007                       	dc.w 7
000023F2 0000 0000                  	dc.l Pal_SpeResult
000023F6 FB00                       	dc.w $FB00
000023F8 001F                       	dc.w $1F
000023FA 0000 0000                  	dc.l Pal_SpeContinue
000023FE FB00                       	dc.w $FB00
00002400 000F                       	dc.w $F
00002402 0000 0000                  	dc.l Pal_Ending
00002406 FB00                       	dc.w $FB00
00002408 001F                       	dc.w $1F
0000240A 0000 0000                  	dc.l Pal_Idiot
0000240E FB20                       	dc.w $FB20
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_BHZ
00002416 FB20                       	dc.w $FB20
00002418 0017                       	dc.w $17
0000241A 0000 0000                  	dc.l Pal_Gronic
0000241E FB00                       	dc.w $FB00
00002420 0007                       	dc.w 7
00002422 0000 0000                  	dc.l Pal_LZGroWater
00002426 FB00                       	dc.w $FB00
00002428 0007                       	dc.w 7
0000242A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000242E FB00                       	dc.w $FB00
00002430 0007                       	dc.w 7
00002432 0000 0000                  	dc.l Pal_Anakama
00002436 FB00                       	dc.w $FB00
00002438 0007                       	dc.w 7
00002438 0007                       	dc.w 7
0000243A                            
0000243A                            ; ---------------------------------------------------------------------------
0000243A                            ; Pallet data
0000243A                            ; ---------------------------------------------------------------------------
0000243A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024BA                            Pal_Title:	incbin	pallet\title.bin
0000253A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025BA                            Pal_Sonic:	incbin	pallet\sonic.bin
000025DA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000263A                            Pal_LZ:		incbin	pallet\lz.bin
0000269A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
0000271A                            Pal_MZ:		incbin	pallet\mz.bin
0000277A                            Pal_SLZ:	incbin	pallet\slz.bin
000027DA                            Pal_SYZ:	incbin	pallet\syz.bin
0000283A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000289A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028FA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000297A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029DA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A5A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A7A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A9A                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AFA                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B7A                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BBA                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C3A                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C5A                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C7A                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C9A                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CBA                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D3A                            
00002D3A                            ; ---------------------------------------------------------------------------
00002D3A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D3A                            ; ---------------------------------------------------------------------------
00002D3A                            
00002D3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D3A                            
00002D3A                            
00002D3A                            DelayProgram:				; XREF: PauseGame
00002D3A 46FC 2300                  		move	#$2300,sr
00002D3E                            
00002D3E                            loc_29AC:
00002D3E 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D42 66FA                       		bne.s	loc_29AC
00002D44 4E75                       		rts	
00002D46                            ; End of function DelayProgram
00002D46                            
00002D46                            ; ---------------------------------------------------------------------------
00002D46                            ; Subroutine to	generate a pseudo-random number	in d0
00002D46                            ; ---------------------------------------------------------------------------
00002D46                            
00002D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D46                            
00002D46                            
00002D46                            RandomNumber:
00002D46 2238 F636                  		move.l	($FFFFF636).w,d1
00002D4A 6600                       		bne.s	loc_29C0
00002D4C 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D52                            
00002D52                            loc_29C0:
00002D52 2001                       		move.l	d1,d0
00002D54 E581                       		asl.l	#2,d1
00002D56 D280                       		add.l	d0,d1
00002D58 E781                       		asl.l	#3,d1
00002D5A D280                       		add.l	d0,d1
00002D5C 3001                       		move.w	d1,d0
00002D5E 4841                       		swap	d1
00002D60 D041                       		add.w	d1,d0
00002D62 3200                       		move.w	d0,d1
00002D64 4841                       		swap	d1
00002D66 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D6A 4E75                       		rts	
00002D6C                            ; End of function RandomNumber
00002D6C                            
00002D6C                            
00002D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D6C                            
00002D6C                            
00002D6C                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D6C 0240 00FF                  		andi.w	#$FF,d0
00002D70 D040                       		add.w	d0,d0
00002D72 0640 0080                  		addi.w	#$80,d0
00002D76 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D7A 0440 0080                  		subi.w	#$80,d0
00002D7E 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D82 4E75                       		rts	
00002D84                            ; End of function CalcSine
00002D84                            
00002D84                            ; ===========================================================================
00002D84                            
00002D84                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00003004                            
00003004                            ; ===========================================================================
00003004 48E7 6000                  		movem.l	d1-d2,-(sp)
00003008 3200                       		move.w	d0,d1
0000300A 4841                       		swap	d1
0000300C 7000                       		moveq	#0,d0
0000300E 3200                       		move.w	d0,d1
00003010 7407                       		moveq	#7,d2
00003012                            
00003012                            loc_2C80:
00003012 E599                       		rol.l	#2,d1
00003014 D040                       		add.w	d0,d0
00003016 5240                       		addq.w	#1,d0
00003018 9240                       		sub.w	d0,d1
0000301A 6400                       		bcc.s	loc_2C9A
0000301C D240                       		add.w	d0,d1
0000301E 5340                       		subq.w	#1,d0
00003020 51CA FFF0                  		dbf	d2,loc_2C80
00003024 E248                       		lsr.w	#1,d0
00003026 4CDF 0006                  		movem.l	(sp)+,d1-d2
0000302A 4E75                       		rts	
0000302C                            ; ===========================================================================
0000302C                            
0000302C                            loc_2C9A:
0000302C 5240                       		addq.w	#1,d0
0000302E 51CA FFE2                  		dbf	d2,loc_2C80
00003032 E248                       		lsr.w	#1,d0
00003034 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003038 4E75                       		rts	
0000303A                            
0000303A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000303A                            
0000303A                            
0000303A                            CalcAngle:
0000303A 48E7 1800                  		movem.l	d3-d4,-(sp)
0000303E 7600                       		moveq	#0,d3
00003040 7800                       		moveq	#0,d4
00003042 3601                       		move.w	d1,d3
00003044 3802                       		move.w	d2,d4
00003046 8843                       		or.w	d3,d4
00003048 6700                       		beq.s	loc_2D04
0000304A 3802                       		move.w	d2,d4
0000304C 4A43                       		tst.w	d3
0000304E 6A00 0000                  		bpl.w	loc_2CC2
00003052 4443                       		neg.w	d3
00003054                            
00003054                            loc_2CC2:
00003054 4A44                       		tst.w	d4
00003056 6A00 0000                  		bpl.w	loc_2CCA
0000305A 4444                       		neg.w	d4
0000305C                            
0000305C                            loc_2CCA:
0000305C B843                       		cmp.w	d3,d4
0000305E 6400 0000                  		bcc.w	loc_2CDC
00003062 E18C                       		lsl.l	#8,d4
00003064 88C3                       		divu.w	d3,d4
00003066 7000                       		moveq	#0,d0
00003068 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
0000306C 6000                       		bra.s	loc_2CE6
0000306E                            ; ===========================================================================
0000306E                            
0000306E                            loc_2CDC:				; XREF: CalcAngle
0000306E E18B                       		lsl.l	#8,d3
00003070 86C4                       		divu.w	d4,d3
00003072 7040                       		moveq	#$40,d0
00003074 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003078                            
00003078                            loc_2CE6:
00003078 4A41                       		tst.w	d1
0000307A 6A00 0000                  		bpl.w	loc_2CF2
0000307E 4440                       		neg.w	d0
00003080 0640 0080                  		addi.w	#$80,d0
00003084                            
00003084                            loc_2CF2:
00003084 4A42                       		tst.w	d2
00003086 6A00 0000                  		bpl.w	loc_2CFE
0000308A 4440                       		neg.w	d0
0000308C 0640 0100                  		addi.w	#$100,d0
00003090                            
00003090                            loc_2CFE:
00003090 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003094 4E75                       		rts	
00003096                            ; ===========================================================================
00003096                            
00003096                            loc_2D04:				; XREF: CalcAngle
00003096 303C 0040                  		move.w	#$40,d0
0000309A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000309E 4E75                       		rts	
000030A0                            ; End of function CalcAngle
000030A0                            
000030A0                            ; ===========================================================================
000030A0                            
000030A0                            Angle_Data:	incbin	misc\angles.bin
000031A2                            
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Sega screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            SegaScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 E668                  		bsr.w	ClearPLC
000031AE 6100 EEA4                  		bsr.w	Pal_FadeFrom
000031B2 4DF9 00C0 0004             		lea	($C00004).l,a6
000031B8 3CBC 8004                  		move.w	#$8004,(a6)
000031BC 3CBC 8230                  		move.w	#$8230,(a6)
000031C0 3CBC 8407                  		move.w	#$8407,(a6)
000031C4 3CBC 8700                  		move.w	#$8700,(a6)
000031C8 3CBC 8B00                  		move.w	#$8B00,(a6)
000031CC 4238 F64E                  		clr.b	($FFFFF64E).w
000031D0 46FC 2700                  		move	#$2700,sr
000031D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031D8 0200 00BF                  		andi.b	#$BF,d0
000031DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000031E2 6100 E316                  		bsr.w	ClearScreen
000031E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031F0 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031F6 6100 E47E                  		bsr.w	NemDec
000031FA 43F9 00FF 0000             		lea	($FF0000).l,a1
00003200 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003206 303C 0000                  		move.w	#0,d0
0000320A 6100 E748                  		bsr.w	EniDec
0000320E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003214 203C 6510 0003             		move.l	#$65100003,d0
0000321A 7217                       		moveq	#$17,d1
0000321C 7407                       		moveq	#7,d2
0000321E 6100 E436                  		bsr.w	ShowVDPGraphics
00003222 43F9 00FF 0180             		lea	($FF0180).l,a1
00003228 203C 4000 0003             		move.l	#$40000003,d0
0000322E 7227                       		moveq	#$27,d1
00003230 741B                       		moveq	#$1B,d2
00003232 6100 E422                  		bsr.w	ShowVDPGraphics
00003236 7000                       		moveq	#0,d0
00003238 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
0000323C 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003242 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003248 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000324E 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003254 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003258 0000 0040                  		ori.b	#$40,d0
0000325C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003262                            
00003262                            Sega_WaitPallet:
00003262 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003268 6100 FAD0                  		bsr.w	DelayProgram
0000326C 6100 EF9E                  		bsr.w	PalCycle_Sega
00003270 66F0                       		bne.s	Sega_WaitPallet
00003272                            
00003272 103C 00E1                  		move.b	#$E1,d0
00003276 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000327A 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003280 6100 FAB8                  		bsr.w	DelayProgram
00003284 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000328A                            
0000328A                            Sega_WaitEnd:
0000328A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003290 6100 FAA8                  		bsr.w	DelayProgram
00003294 4A78 F614                  		tst.w	($FFFFF614).w
00003298 6700                       		beq.s	Sega_GotoTitle
0000329A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000032A0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000032A2                            
000032A2                            Sega_GotoTitle:
000032A2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000032A8 4E75                       		rts	
000032AA                            ; ===========================================================================
000032AA                            
000032AA                            ; ---------------------------------------------------------------------------
000032AA                            ; Title	screen
000032AA                            ; ---------------------------------------------------------------------------
000032AA                            
000032AA                            TitleScreen:				; XREF: GameModeArray
000032AA 103C 00E4                  		move.b	#$E4,d0
000032AE 6100 E322                  		bsr.w	PlaySound_Special ; stop music
000032B2 6100 EDA0                  		bsr.w	Pal_FadeFrom
000032B6 6100 E55C                  		bsr.w	ClearPLC
000032BA 46FC 2700                  		move	#$2700,sr
000032BE 6100 E2C8                  		bsr.w	SoundDriverLoad
000032C2 4DF9 00C0 0004             		lea	($C00004).l,a6
000032C8 3CBC 8004                  		move.w	#$8004,(a6)
000032CC 3CBC 8230                  		move.w	#$8230,(a6)
000032D0 3CBC 8407                  		move.w	#$8407,(a6)
000032D4 3CBC 9001                  		move.w	#$9001,(a6)
000032D8 3CBC 9200                  		move.w	#$9200,(a6)
000032DC 3CBC 8B03                  		move.w	#$8B03,(a6)
000032E0 3CBC 8720                  		move.w	#$8720,(a6)
000032E4 4238 F64E                  		clr.b	($FFFFF64E).w
000032E8 6100 E210                  		bsr.w	ClearScreen
000032EC 43F8 D000                  		lea	($FFFFD000).w,a1
000032F0 7000                       		moveq	#0,d0
000032F2 323C 07FF                  		move.w	#$7FF,d1
000032F6                            
000032F6                            Title_ClrObjRam:
000032F6 22C0                       		move.l	d0,(a1)+
000032F8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032FC                            
000032FC                            ; gomer
000032FC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003306 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000330C 6100 E368                  		bsr.w	NemDec
00003310 7003                       		moveq	#3,d0		; load Sonic's pallet
00003312 6100 EFEA                  		bsr.w	PalLoad1
00003316                            
00003316 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003322 303C 0000                  		move.w	#0,d0
00003326 6100 E62C                  		bsr.w	EniDec
0000332A                            ; help how the fuck can i do this IT SHOWS NOTHING
0000332A 6100 EC7E                  		bsr.w	Pal_FadeTo
0000332E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003334 203C 4000 0003             		move.l	#$40000003,d0
0000333A 7227                       		moveq	#$27,d1
0000333C 741B                       		moveq	#$1B,d2
0000333E 6100 E316                  		bsr.w	ShowVDPGraphics
00003342                            
00003342                            
00003342 43F9 00FF 0000             		lea	($FF0000).l,a1
00003348 203C 6000 0003             		move.l	#$60000003,d0
0000334E 7227                       		moveq	#$27,d1
00003350 741B                       		moveq	#$1B,d2
00003352                            
00003352 6100 ED00                  		bsr.w	Pal_FadeFrom
00003356                            
00003356                            
00003356 6100 E1A2                  		bsr.w	ClearScreen
0000335A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003364 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000336A 6100 E30A                  		bsr.w	NemDec
0000336E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003378 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000337E 6100 E2F6                  		bsr.w	NemDec
00003382 43F9 00FF 0000             		lea	($FF0000).l,a1
00003388 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000338E 303C 0000                  		move.w	#0,d0
00003392 6100 E5C0                  		bsr.w	EniDec
00003396 43F9 00FF 0000             		lea	($FF0000).l,a1
0000339C 203C 4000 0003             		move.l	#$40000003,d0
000033A2 7227                       		moveq	#$27,d1
000033A4 741B                       		moveq	#$1B,d2
000033A6 6100 E2AE                  		bsr.w	ShowVDPGraphics
000033AA 6100 ECA8                  		bsr.w	Pal_FadeFrom
000033AE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000033B2 7000                       		moveq	#0,d0
000033B4 323C 001F                  		move.w	#$1F,d1
000033B8                            
000033B8                            
000033B8                            Title_ClrPallet:
000033B8 22C0                       		move.l	d0,(a1)+
000033BA 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000033BE                            
000033BE 7003                       		moveq	#3,d0		; load Sonic's pallet
000033C0 6100 EF3C                  		bsr.w	PalLoad1
000033C4 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000033CA 4EB9 0000 0000             		jsr	ObjectsLoad
000033D0 4EB9 0000 0000             		jsr	BuildSprites
000033D6 6100 EBD2                  		bsr.w	Pal_FadeTo
000033DA 46FC 2700                  		move	#$2700,sr
000033DE 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033E8 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033EE 6100 E286                  		bsr.w	NemDec
000033F2 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033FC 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003402 6100 E272                  		bsr.w	NemDec
00003406 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003410 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003416 6100 E25E                  		bsr.w	NemDec
0000341A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003420 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003428 4BF9 0000 0606             		lea	(Art_Text).l,a5
0000342E 323C 0BC4                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003432                            
00003432                            Title_LoadText:
00003432 2C9D                       		move.l	(a5)+,(a6)
00003434 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003438                            
00003438 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000343E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003444 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000344A 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003450 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003456 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000345C 6100 0000                  		bsr.w	LevelSizeLoad
00003460 6100 0000                  		bsr.w	DeformBgLayer
00003464                            
00003464 43F8 B000                  		lea	($FFFFB000).w,a1
00003468 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000346E 303C 0000                  		move.w	#0,d0
00003472 6100 E4E0                  		bsr.w	EniDec
00003476 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000347C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003482 6100 E64E                  		bsr.w	KosDec
00003486 6100 0000                  		bsr.w	LevelLayoutLoad
0000348A                            
0000348A 46FC 2700                  		move	#$2700,sr
0000348E 6100 E06A                  		bsr.w	ClearScreen
00003492 4BF9 00C0 0004             		lea	($C00004).l,a5
00003498 4DF9 00C0 0000             		lea	($C00000).l,a6
0000349E 47F8 F708                  		lea	($FFFFF708).w,a3
000034A2 49F8 A440                  		lea	($FFFFA440).w,a4
000034A6 343C 6000                  		move.w	#$6000,d2
000034AA 6100 0000                  		bsr.w	LoadTilesFromStart2
000034AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000034B4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000034BA 303C 0000                  		move.w	#0,d0
000034BE 6100 E494                  		bsr.w	EniDec
000034C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000034C8 203C 4206 0003             		move.l	#$42060003,d0
000034CE 7221                       		moveq	#$21,d1
000034D0 7415                       		moveq	#$15,d2
000034D2 6100 E182                  		bsr.w	ShowVDPGraphics
000034D6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034E0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034E6 6100 E18E                  		bsr.w	NemDec
000034EA 7001                       		moveq	#1,d0		; load title screen pallet
000034EC 6100 EE10                  		bsr.w	PalLoad1
000034F0 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034F4 6100 E0DC                  		bsr.w	PlaySound_Special
000034F8 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034FE 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003504 43F8 D080                  		lea	($FFFFD080).w,a1
00003508 7000                       		moveq	#0,d0
0000350A 323C 000F                  		move.w	#$F,d1
0000350E                            
0000350E                            Title_ClrObjRam2:
0000350E 22C0                       		move.l	d0,(a1)+
00003510 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003514                            
00003514 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000351A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003520 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003526 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000352C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003532 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003538 4EB9 0000 0000             		jsr	ObjectsLoad
0000353E 6100 0000                  		bsr.w	DeformBgLayer
00003542 4EB9 0000 0000             		jsr	BuildSprites
00003548 7000                       		moveq	#0,d0
0000354A 6100 E29C                  		bsr.w	LoadPLC2
0000354E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003554 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000355A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000355E 0000 0040                  		ori.b	#$40,d0
00003562 33C0 00C0 0004             		move.w	d0,($C00004).l
00003568 6100 EA40                  		bsr.w	Pal_FadeTo
0000356C                            
0000356C                            loc_317C:
0000356C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003572 6100 F7C6                  		bsr.w	DelayProgram
00003576 4EB9 0000 0000             		jsr	ObjectsLoad
0000357C 6100 0000                  		bsr.w	DeformBgLayer
00003580 4EB9 0000 0000             		jsr	BuildSprites
00003586 6100 E60C                  		bsr.w	PalCycle_Title
0000358A 6100 E296                  		bsr.w	RunPLC_RAM
0000358E 3038 D008                  		move.w	($FFFFD008).w,d0
00003592 5440                       		addq.w	#2,d0
00003594 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003598 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000359C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000359E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000035A4 4E75                       		rts	
000035A6                            ; ===========================================================================
000035A6                            
000035A6                            Title_ChkRegion:
000035A6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000035AA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000035AC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000035B2 6000                       		bra.s	Title_EnterCheat
000035B4                            ; ===========================================================================
000035B4                            
000035B4                            Title_RegionJ:				; XREF: Title_ChkRegion
000035B4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000035BA                            
000035BA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000035BA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000035BE D0C0                       		adda.w	d0,a0
000035C0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000035C4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000035C8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000035CA 6600                       		bne.s	loc_3210	; if not, branch
000035CC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000035D0 4A00                       		tst.b	d0
000035D2 6600                       		bne.s	Title_CountC
000035D4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035D8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035DC E249                       		lsr.w	#1,d1
000035DE 0241 0003                  		andi.w	#3,d1
000035E2 6700                       		beq.s	Title_PlayRing
000035E4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035E8 6A00                       		bpl.s	Title_PlayRing
000035EA 7201                       		moveq	#1,d1
000035EC 1181 1001                  		move.b	d1,1(a0,d1.w)
000035F0                            
000035F0                            Title_PlayRing:
000035F0 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035F6 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035FA 6100 DFD6                  		bsr.w	PlaySound_Special
000035FE 6000                       		bra.s	Title_CountC
00003600                            ; ===========================================================================
00003600                            
00003600                            loc_3210:				; XREF: Title_EnterCheat
00003600 4A00                       		tst.b	d0
00003602 6700                       		beq.s	Title_CountC
00003604 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000360A 6700                       		beq.s	Title_CountC
0000360C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003612                            
00003612                            Title_CountC:
00003612 1038 F605                  		move.b	($FFFFF605).w,d0
00003616 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000361A 6700                       		beq.s	loc_3230	; if not, branch
0000361C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003620                            
00003620                            loc_3230:
00003620 4A78 F614                  		tst.w	($FFFFF614).w
00003624 6700 0000                  		beq.w	Demo
00003628                            		; (temporary until we have an actual options screen)
00003628 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
0000362E 6700                       		beq.s	@notc
00003630                            
00003630 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003634 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
0000363A 6D00                       		blt.s	@notoverflow
0000363C 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003642                            	@notoverflow:
00003642 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003646 6100 DF8A                  		bsr.w	PlaySound_Special
0000364A                            	@notc:
0000364A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003650 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003654                            
00003654                            Title_ChkLevSel:
00003654 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000365A 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000365E                            		
0000365E                            		
0000365E 7002                       		moveq	#2,d0
00003660 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
00003664 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003668 7000                       		moveq	#0,d0
0000366A 323C 00DF                  		move.w	#$DF,d1
0000366E                            
0000366E                            Title_ClrScroll:
0000366E 22C0                       		move.l	d0,(a1)+
00003670 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003674                            
00003674 21C0 F616                  		move.l	d0,($FFFFF616).w
00003678 46FC 2700                  		move	#$2700,sr
0000367C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003682 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000368C 323C 03FF                  		move.w	#$3FF,d1
00003690                            
00003690                            Title_ClrVram:
00003690 2C80                       		move.l	d0,(a6)
00003692 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003696                            
00003696 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000369A 6700 0000                  		beq.w	GotoOptions	; if not, play level
0000369E                            
0000369E 6100 0000                  		bsr.w	LevSelTextLoad
000036A2                            		
000036A2                            		; sound test fix
000036A2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036A6 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000036AC                            		
000036AC 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000036B0 0C46 0014                  		cmpi.w	#$14,d6
000036B4 6700                       		beq.s	@issndtst
000036B6 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000036BA                            	@issndtst:
000036BA 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000036BE 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000036C2                            		
000036C2 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000036C6 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000036CE                            		
000036CE 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000036D4 6700                       		beq.s	@issndtst2
000036D6                            		
000036D6 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036DC 6100 0000                  		bsr.w	CStringSlop
000036E0 6000                       		bra.s	LevelSelect
000036E2                            	@issndtst2:
000036E2 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036E8 6100 0000                  		bsr.w	CStringSlop
000036EC                            		
000036EC                            ; ---------------------------------------------------------------------------
000036EC                            ; Level	Select
000036EC                            ; ---------------------------------------------------------------------------
000036EC                            LevelSelect:
000036EC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036F2 6100 F646                  		bsr.w	DelayProgram
000036F6 6100 0000                  		bsr.w	LevSelControls
000036FA 6100 E126                  		bsr.w	RunPLC_RAM
000036FE 4AB8 F680                  		tst.l	($FFFFF680).w
00003702 66E8                       		bne.s	LevelSelect
00003704 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000370A 67E0                       		beq.s	LevelSelect	; if not, branch
0000370C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003710 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003714 6600                       		bne.s	@dont	; if not, dont blow this place up
00003716                            			
00003716 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000371C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003722 6100 F616                  		bsr.w	DelayProgram
00003726                            	@dont:
00003726 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
0000372A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000372C                            		
0000372C 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003732 67B8                       		beq.s	LevelSelect	; if not, branch
00003734                            		
00003734 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
0000373A 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
0000373C                            		
0000373C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003740 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003744                            		
00003744 4EB9 0000 0000             		jsr		ShowNow_Playing
0000374A 60A0                       		bra.s	LevelSelect
0000374C                            ; ===========================================================================
0000374C                            
0000374C                            LevSel_SEGA:				; XREF: LevelSelect
0000374C 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003752 4E75                       		rts	
00003754                            ; ===========================================================================
00003754                            
00003754                            LevSel_Ending:				; XREF: LevelSelect
00003754 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000375A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003760 4E75                       		rts	
00003762                            ; ===========================================================================
00003762                            
00003762                            LevSel_Credits:				; XREF: LevelSelect
00003762 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003768 103C 0091                  		move.b	#$91,d0
0000376C 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
00003770 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003776 4E75                       		rts	
00003778                            ; ===========================================================================
00003778                            
00003778                            LevSel_Level_SS:			; XREF: LevelSelect
00003778 D040                       		add.w	d0,d0
0000377A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000377E 6B00 FF6C                  		bmi.w	LevelSelect
00003782 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003786 6600                       		bne.s	LevSel_Level	; if not, branch
00003788 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000378E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003792 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003798 7000                       		moveq	#0,d0
0000379A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000379E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037A2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037A6 4E75                       		rts	
000037A8                            ; ===========================================================================
000037A8                            
000037A8                            LevSel_Level:				; XREF: LevSel_Level_SS
000037A8 0240 3FFF                  		andi.w	#$3FFF,d0
000037AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000037B0                            
000037B0                            PlayLevel:				; XREF: ROM:00003246j ...
000037B0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000037B6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037BC 7000                       		moveq	#0,d0
000037BE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037C2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037C6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037CA 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000037CE 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000037D2 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037D6 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037DA 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037DE 103C 00E0                  		move.b	#$E0,d0
000037E2 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037E6 4E75                       		rts	
000037E8                            ; ===========================================================================
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            ; Level	select - level pointers
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            LSelectPointers:
000037E8                            		incbin	misc\ls_point.bin
00003812                            		even
00003812                            ; ---------------------------------------------------------------------------
00003812                            ; Level	select codes
00003812                            ; ---------------------------------------------------------------------------
00003812                            LevelSelectCode_J:
00003812                            		incbin	misc\ls_jcode.bin
00003818                            		even
00003818                            
00003818                            LevelSelectCode_US:
00003818                            		incbin	misc\ls_ucode.bin
0000381E                            		even
0000381E                            ; ===========================================================================
0000381E                            
0000381E                            ; ---------------------------------------------------------------------------
0000381E                            ; Demo mode
0000381E                            ; ---------------------------------------------------------------------------
0000381E                            
0000381E                            Demo:					; XREF: TitleScreen
0000381E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003824                            
00003824                            loc_33B6:				; XREF: loc_33E4
00003824 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000382A 6100 F50E                  		bsr.w	DelayProgram
0000382E 6100 0000                  		bsr.w	DeformBgLayer
00003832 6100 E33E                  		bsr.w	PalCycle_Load
00003836 6100 DFEA                  		bsr.w	RunPLC_RAM
0000383A 3038 D008                  		move.w	($FFFFD008).w,d0
0000383E 5440                       		addq.w	#2,d0
00003840 31C0 D008                  		move.w	d0,($FFFFD008).w
00003844 0C40 1C00                  		cmpi.w	#$1C00,d0
00003848 6500                       		bcs.s	loc_33E4
0000384A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003850 4E75                       		rts	
00003852                            ; ===========================================================================
00003852                            
00003852                            loc_33E4:				; XREF: Demo
00003852 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003858 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
0000385C 4A78 F614                  		tst.w	($FFFFF614).w
00003860 6600 FFC2                  		bne.w	loc_33B6
00003864 103C 00E0                  		move.b	#$E0,d0
00003868 6100 DD68                  		bsr.w	PlaySound_Special ; fade out music
0000386C 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003870 0240 0007                  		andi.w	#7,d0
00003874 D040                       		add.w	d0,d0
00003876 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000387A 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000387E 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003882 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003888 6500                       		bcs.s	loc_3422	; if yes, branch
0000388A 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003890                            
00003890                            loc_3422:
00003890 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003896 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000389C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000038A0 6600                       		bne.s	Demo_Level	; if not, branch
000038A2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000038A8 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000038AC 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000038B0                            
000038B0                            Demo_Level:
000038B0 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000038B6 7000                       		moveq	#0,d0
000038B8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000038BC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000038C0 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000038C4 4E75                       		rts	
000038C6                            ; ===========================================================================
000038C6                            ; ---------------------------------------------------------------------------
000038C6                            ; Levels used in demos
000038C6                            ; ---------------------------------------------------------------------------
000038C6                            Demo_Levels:	incbin	misc\dm_ord1.bin
000038CE                            		even
000038CE                            
000038CE                            ; ---------------------------------------------------------------------------
000038CE                            ; Subroutine to	change what you're selecting in the level select
000038CE                            ; ---------------------------------------------------------------------------
000038CE                            
000038CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038CE                            
000038CE                            
000038CE                            LevSelControls:				; XREF: LevelSelect
000038CE 1238 F605                  		move.b	($FFFFF605).w,d1
000038D2 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038D6 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038D8 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038DC 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038E0                            
000038E0                            LevSel_UpDown:
000038E0 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038E6 1238 F604                  		move.b	($FFFFF604).w,d1
000038EA 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038EE 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038F2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038F6 0801 0000                  		btst	#0,d1		; is up	pressed?
000038FA 6700                       		beq.s	LevSel_Down	; if not, branch
000038FC 5346                       		subq.w	#1,d6		; move up 1 selection
000038FE 6400                       		bcc.s	LevSel_Down
00003900 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003902                            
00003902                            LevSel_Down:
00003902 0801 0001                  		btst	#1,d1		; is down pressed?
00003906 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003908 5246                       		addq.w	#1,d6		; move down 1 selection
0000390A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000390E 6500                       		bcs.s	LevSel_Refresh
00003910 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003912 6000                       		bra.s	LevSel_Refresh
00003914                            		
00003914                            LevSel_LR:
00003914 0801 0002                  		btst	#2,d1		; is left pressed?
00003918 6700                       		beq.s	LevSel_Right	; if not, branch
0000391A 0446 0000                  		sub.w	#lsrow2size,d6
0000391E 64E2                       		bcc.s	LevSel_Down
00003920 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003924                            LevSel_Right:
00003924 0801 0003                  		btst	#3,d1		; is right pressed?
00003928 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000392A 0646 0000                  		add.w	#lsrow1size,d6
0000392E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003932 6500                       		bcs.s	LevSel_Refresh
00003934 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003938                            ; ===========================================================================
00003938                            LevSel_Refresh:
00003938                            		
00003938 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000393C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003940                            		
00003940 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003946 6600                       		bne.s	@exitsndtest
00003948                            		
00003948 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000394C 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003952 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000395A 6100 0000                  		bsr.w	CStringSlop
0000395E                            	@exitsndtest:
0000395E                            	
0000395E 363C C65F                  		move.w	#$C680-$21,d3
00003962 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003966 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000396A                            		
0000396A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003970 6600                       		bne.s	@entersndtest
00003972                            		
00003972 363C C65F                  		move.w	#$C680-$21,d3
00003976 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000397C 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003984 6100 0000                  		bsr.w	CStringSlop
00003988                            	@entersndtest:
00003988 4E75                       		rts	
0000398A                            		
0000398A                            LevSel_SndTest:				; XREF: LevSelControls
0000398A 1238 F605                  		move.b	($FFFFF605).w,d1
0000398E 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003992 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003994 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000399A 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000399E                            		
0000399E 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039A2 0801 0002                  		btst	#2,d1		; is left pressed?
000039A6 6700                       		beq.s	SndTest_Right	; if not, branch
000039A8 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000039AA                            		; no need the fact it's a byte does the trick
000039AA                            
000039AA                            SndTest_Right:
000039AA 0801 0003                  		btst	#3,d1		; is right pressed?
000039AE 6700                       		beq.s	SndTest_A	; if not, branch
000039B0 5200                       		addq.b	#1,d0		; add 1	to sound test
000039B2                            		; same here
000039B2                            		
000039B2                            SndTest_A:
000039B2 0801 0006                  		btst	#6,d1		; is A pressed?
000039B6 6700                       		beq.s	SndTest_B	; if not, branch
000039B8 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000039BA 5100                       		subq.b	#8,d0
000039BC                            		
000039BC                            SndTest_B:
000039BC 0801 0004                  		btst	#4,d1		; is B pressed?
000039C0 6700                       		beq.s	SndTest_Refresh	; if not, branch
000039C2 5000                       		addq.b	#8,d0		; add $10 to sound test
000039C4 5000                       		addq.b	#8,d0
000039C6                            
000039C6                            SndTest_Refresh:
000039C6 363C C65F                  		move.w	#$C680-$21,d3
000039CA 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000039CE 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039D2                            
000039D2                            LevSel_NoMove:
000039D2 4E75                       		rts	
000039D4                            ; End of function LevSelControls
000039D4                            
000039D4                            ; ---------------------------------------------------------------------------
000039D4                            ; Subroutine to load level select text
000039D4                            ; ---------------------------------------------------------------------------
000039D4                            
000039D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039D4                            
000039D4                            LevSelTextLoad_loop:
000039D4 2D44 0004                  		move.l	d4,4(a6)
000039D8 6100 0000                  		bsr.w	LevSel_ChgLine
000039DC 0684 0080 0000             		addi.l	#$800000,d4
000039E2 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039E6 4E75                       		rts
000039E8                            LevSelTextLoad:				; XREF: TitleScreen
000039E8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039EE 4DF9 00C0 0000             		lea	($C00000).l,a6
000039F4 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039F8 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039FE                            		
000039FE 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003A02 61D0                       		bsr.s	LevSelTextLoad_loop
00003A04                            		
00003A04                            		
00003A04 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003A0A 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003A0E 61C4                       		bsr.s	LevSelTextLoad_loop
00003A10 363C C65F                  		move.w	#$C680-$21,d3
00003A14                            		
00003A14                            LevSelHighlightCode:
00003A14 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A1A 7000                       		moveq	#0,d0
00003A1C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003A20 3200                       		move.w	d0,d1
00003A22 283C 6086 0003             		move.l	#lsscrpos,d4
00003A28                            		
00003A28 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003A2C 6D00                       		blt.s	@notsecond
00003A2E                            		
00003A2E 0440 0000                  		sub.w	#lsrow1size,d0
00003A32 0684 0024 0000             		addi.l	#lsoff,d4
00003A38                            	@notsecond:
00003A38 EF48                       		lsl.w	#7,d0
00003A3A 4840                       		swap	d0
00003A3C D880                       		add.l	d0,d4
00003A3E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A44 E749                       		lsl.w	#3,d1
00003A46 D241                       		add.w	d1,d1
00003A48 D2C1                       		adda.w	d1,a1
00003A4A 2D44 0004                  		move.l	d4,4(a6)
00003A4E 6100 0000                  		bsr.w	LevSel_ChgLine
00003A52 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A58 6700                       		beq.s	LevSelSndTest
00003A5A 4E75                       		rts
00003A5C                            
00003A5C                            LevSelSndTest:
00003A5C 0643 0030                  		add.w	#$30,d3
00003A60 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A6A 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A6E 1400                       		move.b	d0,d2
00003A70 E808                       		lsr.b	#4,d0
00003A72 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A76 1002                       		move.b	d2,d0
00003A78 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A7C 4E75                       		rts	
00003A7E                            ; End of function LevSelTextLoad
00003A7E                            
00003A7E                            
00003A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A7E                            
00003A7E                            
00003A7E                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A7E 0240 000F                  		andi.w	#$F,d0
00003A82 0C00 000A                  		cmpi.b	#$A,d0
00003A86 6500                       		bcs.s	loc_3580
00003A88 5E00                       		addi.b	#7,d0
00003A8A                            
00003A8A                            loc_3580:
00003A8A D043                       		add.w	d3,d0
00003A8C 3C80                       		move.w	d0,(a6)
00003A8E 4E75                       		rts	
00003A90                            ; End of function LevSel_ChgSnd
00003A90                            
00003A90                            
00003A90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A90                            
00003A90                            
00003A90                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A90 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A92                            
00003A92                            @loop:
00003A92 7000                       		moveq	#0,d0
00003A94 1019                       		move.b	(a1)+,d0
00003A96 0C00 0020                  		cmpi.b	#$20,d0
00003A9A 6E00                       		bgt.s	@draw
00003A9C 3CBC 0000                  		move.w	#0,(a6)
00003AA0 51CA FFF0                  		dbf	d2,@loop
00003AA4 4E75                       		rts	
00003AA6                            ; ===========================================================================
00003AA6                            
00003AA6                            @draw:				; XREF: LevSel_ChgLine
00003AA6 D043                       		add.w	d3,d0
00003AA8 3C80                       		move.w	d0,(a6)
00003AAA 51CA FFE6                  		dbf	d2,@loop
00003AAE 4E75                       		rts	
00003AB0                            ; End of function LevSel_ChgLine
00003AB0                            		
00003AB0                            CStringSlop_draw:
00003AB0 D043                       		add.w	d3,d0
00003AB2 3C80                       		move.w	d0,(a6)
00003AB4                            CStringSlop:				; XREF: LevSelTextLoad
00003AB4 7000                       		moveq	#0,d0
00003AB6 1019                       		move.b	(a1)+,d0
00003AB8 0C00 0020                  		cmpi.b	#$20,d0
00003ABC 6EF2                       		bgt.s	CStringSlop_draw
00003ABE                            		
00003ABE 0C00 0001                  		cmpi.b	#1,d0
00003AC2 6700                       		beq.s	@InsertSpaces
00003AC4 6500                       		blo.s	@end
00003AC6                            		
00003AC6 3CBC 0000                  		move.w	#0,(a6)
00003ACA 60E8                       		bra.s	CStringSlop
00003ACC                            	@end:
00003ACC 4E75                       		rts
00003ACE                            	@InsertSpaces:
00003ACE 7000                       		moveq	#0,d0
00003AD0 1019                       		move.b	(a1)+,d0
00003AD2                            		
00003AD2                            	@insert:
00003AD2 3CBC 0000                  		move.w	#0,(a6)
00003AD6 51C8 FFFA                  		dbf.w	d0,@insert
00003ADA 60D8                       		bra.s	CStringSlop
00003ADC                            ; End of function LevSel_ChgLine
00003ADC                            
00003ADC                            ; ===========================================================================
00003ADC                            ; ---------------------------------------------------------------------------
00003ADC                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003ADC                            ; ---------------------------------------------------------------------------
00003ADC                            LevelMenuText:	
00003ADC 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003AEC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AFC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B0C 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003B1C 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003B2C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B3C 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B4C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B5C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B6C 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B7C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B8C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B9C                            LMTSecondRow:
00003B9C 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BAC 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BBC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BCC 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BDC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BEC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BFC 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C0C 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C1C 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C2C 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C3C 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C4C                            LMTSelectableEnd:
00003C4C 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C5C                            LMTEnd:
00003C5C                            
00003C5C                            Now_Playing:
00003C5C 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C6C                            		even
00003C6C                            NP_Track:
00003C6C 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C74                            		even
00003C74                            NP_SFX:
00003C74 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C7C                            		even
00003C7C                            
00003C7C                            ShowNow_Playing:
00003C7C 1C00                       		move.b	d0,d6
00003C7E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C82 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C86 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C8C 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C94 6100 FE1E                  		bsr.w	CStringSlop
00003C98                            		
00003C98 43FA FFD2                  		lea	NP_Track(pc),a1
00003C9C 0C06 00A0                  		cmpi.b	#$A0,d6
00003CA0 6D00                       		blt.s	@track
00003CA2                            		
00003CA2 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CA6                            	@track:
00003CA6 6100 FE0C                  		bsr.w	CStringSlop
00003CAA                            		
00003CAA 0643 0030                  		add.w	#$30,d3
00003CAE 1006                       		move.b	d6,d0
00003CB0 1400                       		move.b	d0,d2
00003CB2 E808                       		lsr.b	#4,d0
00003CB4 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003CB8 1002                       		move.b	d2,d0
00003CBA 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003CBE 4E75                       		rts	
00003CC0                            
00003CC0                            ; 1 is insert spaces btw
00003CC0                            Controls_Normal:
00003CC0 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003CCC                            		even		
00003CCC                            Controls_SND:
00003CCC 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CF2 00                         		even
00003CF2                            		
00003CF2                            OptionMenuText:	
00003CF2 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D02 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D12                            OMTEnd:
00003D12                            		
00003D12                            ; ---------------------------------------------------------------------------
00003D12                            ; Level	Select
00003D12                            ; ---------------------------------------------------------------------------
00003D12                            GotoOptions:
00003D12 43F9 0000 3CF2             		lea	(OptionMenuText).l,a1
00003D18 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D1E 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D22 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D28                            		
00003D28 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D2C 6100 FCA6                  		bsr.w	LevSelTextLoad_loop
00003D30                            
00003D30                            OptionsMenu:
00003D30 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D36 6100 F002                  		bsr.w	DelayProgram
00003D3A 6100 0000                  		bsr.w	OptControls
00003D3E 6100 DAE2                  		bsr.w	RunPLC_RAM
00003D42 4AB8 F680                  		tst.l	($FFFFF680).w
00003D46 66E8                       		bne.s	OptionsMenu
00003D48 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D4E 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D50 4E71                       		nop
00003D52 60DC                       		bra.s	OptionsMenu
00003D54                            		
00003D54                            OptReturn:
00003D54 4E75                       		rts
00003D56                            OptControls:				; XREF: LevelSelect
00003D56 1238 F605                  		move.b	($FFFFF605).w,d1
00003D5A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D5E 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D60 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D64 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D66                            Opt_UpDown:
00003D66 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003D6C 1238 F604                  		move.b	($FFFFF604).w,d1
00003D70 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D74 0801 0000                  		btst	#0,d1		; is up	pressed?
00003D78 6700                       		beq.s	Opt_Down	; if not, branch
00003D7A 5346                       		subq.w	#1,d6		; move up 1 selection
00003D7C 6400                       		bcc.s	Opt_Down
00003D7E 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003D80                            
00003D80                            Opt_Down:
00003D80 0801 0001                  		btst	#1,d1		; is down pressed?
00003D84 6700                       		beq.s	Opt_Refresh	; if not, branch
00003D86 5246                       		addq.w	#1,d6		; move down 1 selection
00003D88 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003D8C 6500                       		bcs.s	Opt_Refresh
00003D8E 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003D90                            Opt_Refresh:
00003D90                            		
00003D90                            ; ---------------------------------------------------------------------------
00003D90                            ; Music	playlist
00003D90                            ; ---------------------------------------------------------------------------
00003D90                            MusicList1:	incbin	misc\muslist1.bin
00003D98                            		even
00003D98                            MusicList2:	incbin	misc\muslist2.bin
00003D9E                            		even
00003D9E                            MusicList3:	incbin	misc\muslist3.bin
00003DA4                            		even
00003DA4                            MusicList4:	incbin	misc\muslist4.bin
00003DAA                            		even
00003DAA                            ; ===========================================================================
00003DAA                            
00003DAA                            ; ---------------------------------------------------------------------------
00003DAA                            ; Level
00003DAA                            ; ---------------------------------------------------------------------------
00003DAA                            
00003DAA                            Level:					; XREF: GameModeArray
00003DAA 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DB4 6B00                       		bmi.s	loc_37B6
00003DB6 103C 00E0                  		move.b	#$E0,d0
00003DBA 6100 D816                  		bsr.w	PlaySound_Special ; fade out music
00003DBE                            
00003DBE                            loc_37B6:
00003DBE 6100 DA54                  		bsr.w	ClearPLC
00003DC2 6100 E290                  		bsr.w	Pal_FadeFrom
00003DC6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DCA 6B00                       		bmi.s	Level_ClrRam
00003DCC 46FC 2700                  		move	#$2700,sr
00003DD0 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003DDA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003DE0 6100 D894                  		bsr.w	NemDec
00003DE4 46FC 2300                  		move	#$2300,sr
00003DE8 7000                       		moveq	#0,d0
00003DEA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DEE E948                       		lsl.w	#4,d0
00003DF0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003DF6 45F2 0000                  		lea	(a2,d0.w),a2
00003DFA 7000                       		moveq	#0,d0
00003DFC 1012                       		move.b	(a2),d0
00003DFE 6700                       		beq.s	loc_37FC
00003E00 6100 D9B4                  		bsr.w	LoadPLC		; load level patterns
00003E04                            
00003E04                            loc_37FC:
00003E04 7001                       		moveq	#1,d0
00003E06 6100 D9AE                  		bsr.w	LoadPLC		; load standard	patterns
00003E0A                            
00003E0A                            Level_ClrRam:
00003E0A 43F8 D000                  		lea	($FFFFD000).w,a1
00003E0E 7000                       		moveq	#0,d0
00003E10 323C 07FF                  		move.w	#$7FF,d1
00003E14                            
00003E14                            Level_ClrObjRam:
00003E14 22C0                       		move.l	d0,(a1)+
00003E16 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E1A                            
00003E1A 43F8 F628                  		lea	($FFFFF628).w,a1
00003E1E 7000                       		moveq	#0,d0
00003E20 323C 0015                  		move.w	#$15,d1
00003E24                            
00003E24                            Level_ClrVars:
00003E24 22C0                       		move.l	d0,(a1)+
00003E26 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E2A                            
00003E2A 43F8 F700                  		lea	($FFFFF700).w,a1
00003E2E 7000                       		moveq	#0,d0
00003E30 323C 003F                  		move.w	#$3F,d1
00003E34                            
00003E34                            Level_ClrVars2:
00003E34 22C0                       		move.l	d0,(a1)+
00003E36 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E3A                            
00003E3A 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E3E 7000                       		moveq	#0,d0
00003E40 323C 0047                  		move.w	#$47,d1
00003E44                            
00003E44                            Level_ClrVars3:
00003E44 22C0                       		move.l	d0,(a1)+
00003E46 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E4A                            
00003E4A 46FC 2700                  		move	#$2700,sr
00003E4E 6100 D6AA                  		bsr.w	ClearScreen
00003E52 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E58 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E5C 3CBC 8230                  		move.w	#$8230,(a6)
00003E60 3CBC 8407                  		move.w	#$8407,(a6)
00003E64 3CBC 857C                  		move.w	#$857C,(a6)
00003E68 3CBC 9001                  		move.w	#$9001,(a6)
00003E6C 3CBC 8004                  		move.w	#$8004,(a6)
00003E70 3CBC 8720                  		move.w	#$8720,(a6)
00003E74 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003E7A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003E7E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E84 6600                       		bne.s	Level_LoadPal	; if not, branch
00003E86 3CBC 8014                  		move.w	#$8014,(a6)
00003E8A 7000                       		moveq	#0,d0
00003E8C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E90 D040                       		add.w	d0,d0
00003E92 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003E98 3031 0000                  		move.w	(a1,d0.w),d0
00003E9C 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EA0 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EA4 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EA8 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EAC 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EB0 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EB6 6000 0000                  		bra.w	Level_LoadPal
00003EBA                            Player_Palette:
00003EBA                            		; normal, lz, sbz, blank
00003EBA 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003EC2                            		
00003EC2 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003ECA 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003ED2 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003EDA                            
00003EDA                            		; add more player palettes
00003EDA                            Level_LoadPal:
00003EDA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003EE0 46FC 2300                  		move	#$2300,sr
00003EE4                            
00003EE4 7200                       		moveq	#0,d1
00003EE6 1238 FFE8                  		move.b	(v_character),d1
00003EEA D241                       		add.w	d1,d1
00003EEC D241                       		add.w	d1,d1
00003EEE D241                       		add.w	d1,d1
00003EF0 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003EF4                            		
00003EF4 6100 E424                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003EF8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EFE 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F00 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F04 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F0A 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F0C 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F10                            
00003F10                            Level_WaterPal:
00003F10 6100 E420                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F14 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F18 6700                       		beq.s	Level_GetBgm
00003F1A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F20                            
00003F20                            ; NineKode begins here - How to play different songs on different acts
00003F20                             
00003F20                            Level_GetBgm:
00003F20 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F24 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F28 7000                       		moveq	#0,d0
00003F2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F2E                             
00003F2E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F34 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F36 43F9 0000 3D90             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F3C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F3E                             
00003F3E                            Level_GetBgm2:
00003F3E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F44 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F46 43F9 0000 3D98             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F4C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F4E                             
00003F4E                            Level_GetBgm3:
00003F4E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F54 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F56 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F5C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F5E                             
00003F5E                            Level_GetBgm4:
00003F5E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003F64 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003F66 43F9 0000 3DA4             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003F6C                             
00003F6C                            Level_PlayBgm:
00003F6C 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003F70 6100 D65A                  		bsr.w	PlaySound	; play music
00003F74 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003F7A                             
00003F7A                            ; NineKode ends here
00003F7A                            
00003F7A                            Level_TtlCard:
00003F7A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003F80 6100 EDB8                  		bsr.w	DelayProgram
00003F84 4EB9 0000 0000             		jsr	ObjectsLoad
00003F8A 4EB9 0000 0000             		jsr	BuildSprites
00003F90 6100 D890                  		bsr.w	RunPLC_RAM
00003F94 3038 D108                  		move.w	($FFFFD108).w,d0
00003F98 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003F9C 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003F9E 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FA2 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FA4 4EB9 0000 0000             		jsr	Hud_Base
00003FAA                            
00003FAA                            loc_3946:
00003FAA 7003                       		moveq	#3,d0
00003FAC 6100 E350                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FB0 6100 0000                  		bsr.w	LevelSizeLoad
00003FB4 6100 0000                  		bsr.w	DeformBgLayer
00003FB8 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FBE 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FC2 6100 0000                  		bsr.w	LoadTilesFromStart
00003FC6 4EB9 0000 0000             		jsr	FloorLog_Unk
00003FCC 6100 0000                  		bsr.w	ColIndexLoad
00003FD0 6100 0000                  		bsr.w	LZWaterEffects
00003FD4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003FDA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FDE 6B00                       		bmi.s	Level_ChkDebug
00003FE0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003FE6                            
00003FE6                            Level_ChkDebug:
00003FE6 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003FEA 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FEC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003FF2 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003FFA                            
00003FFA                            Level_ChkWater:
00003FFA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004000 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004006 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000400C 6600                       		bne.s	Level_LoadObj	; if not, branch
0000400E 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004014 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000401A 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004020 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004026                            
00004026                            Level_LoadObj:
00004026 4EB9 0000 0000             		jsr	ObjPosLoad
0000402C 4EB9 0000 0000             		jsr	ObjectsLoad
00004032 4EB9 0000 0000             		jsr	BuildSprites
00004038 7000                       		moveq	#0,d0
0000403A 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000403E 6600                       		bne.s	loc_39E8	; if yes, branch
00004040 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004044 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004048 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000404C                            
0000404C                            loc_39E8:
0000404C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004050 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004054 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004058 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000405C                            		; move.b	d0,($FFFFFE2F).w
0000405C 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00004062 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004066 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000406A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000406E 6100 0000                  		bsr.w	OscillateNumInit
00004072 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004078 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000407E 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004084 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000408A 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004090 7000                       		moveq	#0,d0
00004092 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004096 E548                       		lsl.w	#2,d0
00004098 2271 0000                  		movea.l	(a1,d0.w),a1
0000409C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040A0 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040A2 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040A8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040AC 5340                       		subq.w	#1,d0
000040AE E548                       		lsl.w	#2,d0
000040B0 2271 0000                  		movea.l	(a1,d0.w),a1
000040B4                            
000040B4                            Level_Demo:
000040B4 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040BA 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040BE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000040C4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040C8 6A00                       		bpl.s	Level_ChkWaterPal
000040CA 31FC 021C F614             		move.w	#540,($FFFFF614).w
000040D0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000040D6 6600                       		bne.s	Level_ChkWaterPal
000040D8 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000040DE                            
000040DE                            Level_ChkWaterPal:
000040DE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000040E4 6600                       		bne.s	Level_Delay	; if not, branch
000040E6 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000040E8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000040EE 6600                       		bne.s	Level_WaterPal2	; if not, branch
000040F0 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000040F2                            
000040F2                            Level_WaterPal2:
000040F2 6100 E25A                  		bsr.w	PalLoad4_Water
000040F6                            
000040F6                            Level_Delay:
000040F6 323C 0003                  		move.w	#3,d1
000040FA                            
000040FA                            Level_DelayLoop:
000040FA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004100 6100 EC38                  		bsr.w	DelayProgram
00004104 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004108                            
00004108 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000410E 6100 DEA0                  		bsr.w	Pal_FadeTo2
00004112 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004116 6B00                       		bmi.s	Level_ClrCardArt
00004118 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000411C 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004120 5838 D124                  		addq.b	#4,($FFFFD124).w
00004124 5838 D164                  		addq.b	#4,($FFFFD164).w
00004128 6000                       		bra.s	Level_StartGame
0000412A                            ; ===========================================================================
0000412A                            
0000412A                            Level_ClrCardArt:
0000412A 7002                       		moveq	#2,d0
0000412C 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
00004132 7000                       		moveq	#0,d0
00004134 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004138 0640 0015                  		addi.w	#$15,d0
0000413C 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004142                            
00004142                            Level_StartGame:
00004142 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004148                            
00004148                            ; ---------------------------------------------------------------------------
00004148                            ; Main level loop (when	all title card and loading sequences are finished)
00004148                            ; ---------------------------------------------------------------------------
00004148                            
00004148                            Level_MainLoop:
00004148 6100 D494                  		bsr.w	PauseGame
0000414C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004152 6100 EBE6                  		bsr.w	DelayProgram
00004156 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000415A 6100 0000                  		bsr.w	MoveSonicInDemo
0000415E 6100 0000                  		bsr.w	LZWaterEffects
00004162 4EB9 0000 0000             		jsr	ObjectsLoad
00004168 4A78 FE08                  		tst.w	($FFFFFE08).w
0000416C 6600                       		bne.s	loc_3B10
0000416E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004174 6400                       		bcc.s	loc_3B14
00004176                            
00004176                            loc_3B10:
00004176 6100 0000                  		bsr.w	DeformBgLayer
0000417A                            
0000417A                            loc_3B14:
0000417A 4EB9 0000 0000             		jsr	BuildSprites
00004180 4EB9 0000 0000             		jsr	ObjPosLoad
00004186 6100 D9EA                  		bsr.w	PalCycle_Load
0000418A 6100 D696                  		bsr.w	RunPLC_RAM
0000418E 6100 0000                  		bsr.w	OscillateNumDo
00004192 6100 0000                  		bsr.w	ChangeRingFrame
00004196 6100 0000                  		bsr.w	SignpostArtLoad
0000419A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041A0 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041A2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041A6 6600 FC02                  		bne.w	Level		; if yes, branch
000041AA 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041B0 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041B4 4E75                       		rts	
000041B6                            ; ===========================================================================
000041B6                            
000041B6                            Level_ChkDemo:				; XREF: Level_MainLoop
000041B6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041BA 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041BC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041C0 6700                       		beq.s	Level_EndDemo	; if not, branch
000041C2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041C8 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000041CC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041D2 4E75                       		rts	
000041D4                            ; ===========================================================================
000041D4                            
000041D4                            Level_EndDemo:				; XREF: Level_ChkDemo
000041D4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000041DA 6600                       		bne.s	loc_3B88	; if not, branch
000041DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041E2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041E6 6A00                       		bpl.s	loc_3B88	; if yes, branch
000041E8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000041EE                            
000041EE                            loc_3B88:
000041EE 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000041F4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000041FA 4278 F794                  		clr.w	($FFFFF794).w
000041FE                            
000041FE                            loc_3B98:
000041FE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004204 6100 EB34                  		bsr.w	DelayProgram
00004208 6100 0000                  		bsr.w	MoveSonicInDemo
0000420C 4EB9 0000 0000             		jsr	ObjectsLoad
00004212 4EB9 0000 0000             		jsr	BuildSprites
00004218 4EB9 0000 0000             		jsr	ObjPosLoad
0000421E 5378 F794                  		subq.w	#1,($FFFFF794).w
00004222 6A00                       		bpl.s	loc_3BC8
00004224 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000422A 6100 DE48                  		bsr.w	Pal_FadeOut
0000422E                            
0000422E                            loc_3BC8:
0000422E 4A78 F614                  		tst.w	($FFFFF614).w
00004232 66CA                       		bne.s	loc_3B98
00004234 4E75                       		rts	
00004236                            ; ===========================================================================
00004236                            ; ---------------------------------------------------------------------------
00004236                            ; Subroutine to	do special water effects in Labyrinth Zone
00004236                            ; ---------------------------------------------------------------------------
00004236                            
00004236                            LZWaterEffects:				; XREF: Level
00004236 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000423C 6600                       		bne.s	locret_3C28	; if not, branch
0000423E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004244 6400                       		bcc.s	LZMoveWater
00004246 6100 0000                  		bsr.w	LZWindTunnels
0000424A 6100 0000                  		bsr.w	LZWaterSlides
0000424E 6100 0000                  		bsr.w	LZDynamicWater
00004252                            
00004252                            LZMoveWater:
00004252 4238 F64E                  		clr.b	($FFFFF64E).w
00004256 7000                       		moveq	#0,d0
00004258 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000425C E248                       		lsr.w	#1,d0
0000425E D078 F648                  		add.w	($FFFFF648).w,d0
00004262 31C0 F646                  		move.w	d0,($FFFFF646).w
00004266 3038 F646                  		move.w	($FFFFF646).w,d0
0000426A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000426E 6400                       		bcc.s	loc_3C1A
00004270 4A40                       		tst.w	d0
00004272 6A00                       		bpl.s	loc_3C1A
00004274 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000427A 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004280                            
00004280                            loc_3C1A:
00004280 0C40 00DF                  		cmpi.w	#$DF,d0
00004284 6500                       		bcs.s	loc_3C24
00004286 303C 00DF                  		move.w	#$DF,d0
0000428A                            
0000428A                            loc_3C24:
0000428A 11C0 F625                  		move.b	d0,($FFFFF625).w
0000428E                            
0000428E                            locret_3C28:
0000428E 4E75                       		rts	
00004290                            ; ===========================================================================
00004290                            ; ---------------------------------------------------------------------------
00004290                            ; Labyrinth default water heights
00004290                            ; ---------------------------------------------------------------------------
00004290                            WaterHeight:	incbin	misc\lz_heigh.bin
00004298                            		even
00004298                            ; ===========================================================================
00004298                            
00004298                            ; ---------------------------------------------------------------------------
00004298                            ; Labyrinth dynamic water routines
00004298                            ; ---------------------------------------------------------------------------
00004298                            
00004298                            LZDynamicWater:				; XREF: LZWaterEffects
00004298 7000                       		moveq	#0,d0
0000429A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000429E D040                       		add.w	d0,d0
000042A0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042A4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042A8 7200                       		moveq	#0,d1
000042AA 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042AE 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042B2 9078 F648                  		sub.w	($FFFFF648).w,d0
000042B6 6700                       		beq.s	locret_3C5A
000042B8 6400                       		bcc.s	loc_3C56
000042BA 4441                       		neg.w	d1
000042BC                            
000042BC                            loc_3C56:
000042BC D378 F648                  		add.w	d1,($FFFFF648).w
000042C0                            
000042C0                            locret_3C5A:
000042C0 4E75                       		rts	
000042C2                            ; ===========================================================================
000042C2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000042C4 0000                       		dc.w DynWater_LZ2-DynWater_Index
000042C6 0000                       		dc.w DynWater_LZ3-DynWater_Index
000042C8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000042CA                            ; ===========================================================================
000042CA                            
000042CA                            DynWater_LZ1:				; XREF: DynWater_Index
000042CA 3038 F700                  		move.w	($FFFFF700).w,d0
000042CE 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042D2 6600                       		bne.s	loc_3CD0
000042D4 323C 00B8                  		move.w	#$B8,d1
000042D8 0C40 0600                  		cmpi.w	#$600,d0
000042DC 6500                       		bcs.s	loc_3CB4
000042DE 323C 0108                  		move.w	#$108,d1
000042E2 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000042E8 6500                       		bcs.s	loc_3CBA
000042EA 0C40 0C00                  		cmpi.w	#$C00,d0
000042EE 6500                       		bcs.s	loc_3CB4
000042F0 323C 0318                  		move.w	#$318,d1
000042F4 0C40 1080                  		cmpi.w	#$1080,d0
000042F8 6500                       		bcs.s	loc_3CB4
000042FA 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004300 323C 05C8                  		move.w	#$5C8,d1
00004304 0C40 1380                  		cmpi.w	#$1380,d0
00004308 6500                       		bcs.s	loc_3CB4
0000430A 323C 03A8                  		move.w	#$3A8,d1
0000430E B278 F648                  		cmp.w	($FFFFF648).w,d1
00004312 6600                       		bne.s	loc_3CB4
00004314 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000431A                            
0000431A                            loc_3CB4:
0000431A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000431E 4E75                       		rts	
00004320                            ; ===========================================================================
00004320                            
00004320                            loc_3CBA:				; XREF: DynWater_LZ1
00004320 0C40 0C80                  		cmpi.w	#$C80,d0
00004324 65F4                       		bcs.s	loc_3CB4
00004326 323C 00E8                  		move.w	#$E8,d1
0000432A 0C40 1500                  		cmpi.w	#$1500,d0
0000432E 65EA                       		bcs.s	loc_3CB4
00004330 323C 0108                  		move.w	#$108,d1
00004334 60E4                       		bra.s	loc_3CB4
00004336                            ; ===========================================================================
00004336                            
00004336                            loc_3CD0:				; XREF: DynWater_LZ1
00004336 5302                       		subq.b	#1,d2
00004338 6600                       		bne.s	locret_3CF4
0000433A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004340 6400                       		bcc.s	locret_3CF4
00004342 323C 03A8                  		move.w	#$3A8,d1
00004346 0C40 1300                  		cmpi.w	#$1300,d0
0000434A 6500                       		bcs.s	loc_3CF0
0000434C 323C 0108                  		move.w	#$108,d1
00004350 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004356                            
00004356                            loc_3CF0:
00004356 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000435A                            
0000435A                            locret_3CF4:
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            DynWater_LZ2:				; XREF: DynWater_Index
0000435C 3038 F700                  		move.w	($FFFFF700).w,d0
00004360 323C 0328                  		move.w	#$328,d1
00004364 0C40 0500                  		cmpi.w	#$500,d0
00004368 6500                       		bcs.s	loc_3D12
0000436A 323C 03C8                  		move.w	#$3C8,d1
0000436E 0C40 0B00                  		cmpi.w	#$B00,d0
00004372 6500                       		bcs.s	loc_3D12
00004374 323C 0428                  		move.w	#$428,d1
00004378                            
00004378                            loc_3D12:
00004378 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000437C 4E75                       		rts	
0000437E                            ; ===========================================================================
0000437E                            
0000437E                            DynWater_LZ3:				; XREF: DynWater_Index
0000437E 3038 F700                  		move.w	($FFFFF700).w,d0
00004382 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004386 6600                       		bne.s	loc_3D5E
00004388 323C 0500                  		move.w	#$500,d1
0000438C 0C40 0600                  		cmpi.w	#$600,d0
00004390 6500                       		bcs.s	loc_3D54
00004392 0C40 1B00                  		cmpi.w	#$1B00,d0
00004396 6500                       		bcs.s	loc_3D54
00004398 323C 0850                  		move.w	#$850,d1
0000439C                            
0000439C                            loc_3D54:
0000439C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043A0 31C1 F648                  		move.w	d1,($FFFFF648).w
000043A4 4E75                       		rts	
000043A6                            ; ===========================================================================
000043A6                            
000043A6                            loc_3D5E:				; XREF: DynWater_LZ3
000043A6 5302                       		subq.b	#1,d2
000043A8 6600                       		bne.s	loc_3DA8
000043AA 323C 04C8                  		move.w	#$4C8,d1
000043AE 0C40 0770                  		cmpi.w	#$770,d0
000043B2 6500                       		bcs.s	loc_3DA2
000043B4 323C 0308                  		move.w	#$308,d1
000043B8 0C40 1400                  		cmpi.w	#$1400,d0
000043BC 6500                       		bcs.s	loc_3DA2
000043BE 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000043C4 6700                       		beq.s	loc_3D8E
000043C6 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000043CC 6400                       		bcc.s	loc_3D8E
000043CE 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000043D4 6400                       		bcc.s	loc_3DA2
000043D6                            
000043D6                            loc_3D8E:
000043D6 323C 0508                  		move.w	#$508,d1
000043DA 31C1 F648                  		move.w	d1,($FFFFF648).w
000043DE 0C40 1770                  		cmpi.w	#$1770,d0
000043E2 6500                       		bcs.s	loc_3DA2
000043E4 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043EA                            
000043EA                            loc_3DA2:
000043EA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043EE 4E75                       		rts	
000043F0                            ; ===========================================================================
000043F0                            
000043F0                            loc_3DA8:
000043F0 5302                       		subq.b	#1,d2
000043F2 6600                       		bne.s	loc_3DD2
000043F4 323C 0508                  		move.w	#$508,d1
000043F8 0C40 1860                  		cmpi.w	#$1860,d0
000043FC 6500                       		bcs.s	loc_3DCC
000043FE 323C 0188                  		move.w	#$188,d1
00004402 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004406 6400                       		bcc.s	loc_3DC6
00004408 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000440C 6600                       		bne.s	loc_3DCC
0000440E                            
0000440E                            loc_3DC6:
0000440E 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004414                            
00004414                            loc_3DCC:
00004414 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004418 4E75                       		rts	
0000441A                            ; ===========================================================================
0000441A                            
0000441A                            loc_3DD2:
0000441A 5302                       		subq.b	#1,d2
0000441C 6600                       		bne.s	loc_3E0E
0000441E 323C 0188                  		move.w	#$188,d1
00004422 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004426 6500                       		bcs.s	loc_3E04
00004428 323C 0900                  		move.w	#$900,d1
0000442C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004430 6500                       		bcs.s	loc_3E04
00004432 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004438 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000443E 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004444 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000444A 4E75                       		rts	
0000444C                            ; ===========================================================================
0000444C                            
0000444C                            loc_3E04:
0000444C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004450 31C1 F648                  		move.w	d1,($FFFFF648).w
00004454 4E75                       		rts	
00004456                            ; ===========================================================================
00004456                            
00004456                            loc_3E0E:
00004456 0C40 1E00                  		cmpi.w	#$1E00,d0
0000445A 6500                       		bcs.s	locret_3E1A
0000445C 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004462                            
00004462                            locret_3E1A:
00004462 4E75                       		rts	
00004464                            ; ===========================================================================
00004464                            
00004464                            DynWater_SBZ3:				; XREF: DynWater_Index
00004464 323C 0228                  		move.w	#$228,d1
00004468 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000446E 6500                       		bcs.s	loc_3E2C
00004470 323C 04C8                  		move.w	#$4C8,d1
00004474                            
00004474                            loc_3E2C:
00004474 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004478 4E75                       		rts
0000447A                            
0000447A                            ; ---------------------------------------------------------------------------
0000447A                            ; Labyrinth Zone "wind tunnels"	subroutine
0000447A                            ; ---------------------------------------------------------------------------
0000447A                            
0000447A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000447A                            
0000447A                            
0000447A                            LZWindTunnels:				; XREF: LZWaterEffects
0000447A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000447E 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004482 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004488 7000                       		moveq	#0,d0
0000448A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000448E E748                       		lsl.w	#3,d0
00004490 D4C0                       		adda.w	d0,a2
00004492 7200                       		moveq	#0,d1
00004494 4A38 FE11                  		tst.b	($FFFFFE11).w
00004498 6600                       		bne.s	loc_3E56
0000449A 7201                       		moveq	#1,d1
0000449C 514A                       		subq.w	#8,a2
0000449E                            
0000449E                            loc_3E56:
0000449E 43F8 D000                  		lea	($FFFFD000).w,a1
000044A2                            
000044A2                            LZWind_Loop:
000044A2 3029 0008                  		move.w	8(a1),d0
000044A6 B052                       		cmp.w	(a2),d0
000044A8 6500 0000                  		bcs.w	loc_3EF4
000044AC B06A 0004                  		cmp.w	4(a2),d0
000044B0 6400 0000                  		bcc.w	loc_3EF4
000044B4 3429 000C                  		move.w	$C(a1),d2
000044B8 B46A 0002                  		cmp.w	2(a2),d2
000044BC 6500                       		bcs.s	loc_3EF4
000044BE B46A 0006                  		cmp.w	6(a2),d2
000044C2 6400                       		bcc.s	loc_3EF4
000044C4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044C8 0200 003F                  		andi.b	#$3F,d0
000044CC 6600                       		bne.s	loc_3E90
000044CE 303C 00D0                  		move.w	#$D0,d0
000044D2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rushing water sound
000044D8                            
000044D8                            loc_3E90:
000044D8 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000044DC 6600 0000                  		bne.w	locret_3F0A
000044E0 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000044E6 6400                       		bcc.s	loc_3F06
000044E8 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000044EE 0440 0080                  		subi.w	#$80,d0
000044F2 B052                       		cmp.w	(a2),d0
000044F4 6400                       		bcc.s	LZWind_Move
000044F6 7002                       		moveq	#2,d0
000044F8 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000044FE 6600                       		bne.s	loc_3EBA
00004500 4440                       		neg.w	d0
00004502                            
00004502                            loc_3EBA:
00004502 D169 000C                  		add.w	d0,$C(a1)
00004506                            
00004506                            LZWind_Move:
00004506 5869 0008                  		addq.w	#4,8(a1)
0000450A 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004510 337C 0000 0012             		move.w	#0,$12(a1)
00004516 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000451C 08E9 0001 0022             		bset	#1,$22(a1)
00004522 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004528 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000452A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000452E                            
0000452E                            LZWind_MoveDown:
0000452E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004534 6700                       		beq.s	locret_3EF2	; if not, branch
00004536 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000453A                            
0000453A                            locret_3EF2:
0000453A 4E75                       		rts	
0000453C                            ; ===========================================================================
0000453C                            
0000453C                            loc_3EF4:				; XREF: LZWindTunnels
0000453C 504A                       		addq.w	#8,a2
0000453E 51C9 FF62                  		dbf	d1,LZWind_Loop
00004542 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004546 6700                       		beq.s	locret_3F0A
00004548 137C 0000 001C             		move.b	#0,$1C(a1)
0000454E                            
0000454E                            loc_3F06:
0000454E 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004552                            
00004552                            locret_3F0A:
00004552 4E75                       		rts	
00004554                            ; End of function LZWindTunnels
00004554                            
00004554                            ; ===========================================================================
00004554 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000455C 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000456E 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000457C                            					; XREF: LZWindTunnels
0000457C                            		even
0000457C                            
0000457C                            ; ---------------------------------------------------------------------------
0000457C                            ; Labyrinth Zone water slide subroutine
0000457C                            ; ---------------------------------------------------------------------------
0000457C                            
0000457C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000457C                            
0000457C                            
0000457C                            LZWaterSlides:				; XREF: LZWaterEffects
0000457C 43F8 D000                  		lea	($FFFFD000).w,a1
00004580 0829 0001 0022             		btst	#1,$22(a1)
00004586 6600                       		bne.s	loc_3F6A
00004588 3029 000C                  		move.w	$C(a1),d0
0000458C E248                       		lsr.w	#1,d0
0000458E 0240 0380                  		andi.w	#$380,d0
00004592 1229 0008                  		move.b	8(a1),d1
00004596 0241 007F                  		andi.w	#$7F,d1
0000459A D041                       		add.w	d1,d0
0000459C 45F8 A400                  		lea	($FFFFA400).w,a2
000045A0 1032 0000                  		move.b	(a2,d0.w),d0
000045A4 45FA 0000                  		lea	byte_3FCF(pc),a2
000045A8 7206                       		moveq	#6,d1
000045AA                            
000045AA                            loc_3F62:
000045AA B022                       		cmp.b	-(a2),d0
000045AC 57C9 FFFC                  		dbeq	d1,loc_3F62
000045B0 6700                       		beq.s	LZSlide_Move
000045B2                            
000045B2                            loc_3F6A:
000045B2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045B6 6700                       		beq.s	locret_3F7A
000045B8 337C 0005 003E             		move.w	#5,$3E(a1)
000045BE 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045C2                            
000045C2                            locret_3F7A:
000045C2 4E75                       		rts	
000045C4                            ; ===========================================================================
000045C4                            
000045C4                            LZSlide_Move:				; XREF: LZWaterSlides
000045C4 0C41 0003                  		cmpi.w	#3,d1
000045C8 6400                       		bcc.s	loc_3F84
000045CA 4E71                       		nop	
000045CC                            
000045CC                            loc_3F84:
000045CC 08A9 0000 0022             		bclr	#0,$22(a1)
000045D2 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000045D6 1340 0014                  		move.b	d0,$14(a1)
000045DA 6A00                       		bpl.s	loc_3F9A
000045DC 08E9 0000 0022             		bset	#0,$22(a1)
000045E2                            
000045E2                            loc_3F9A:
000045E2 4229 0015                  		clr.b	$15(a1)
000045E6 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000045EC 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000045F2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000045F6 0200 001F                  		andi.b	#$1F,d0
000045FA 6600                       		bne.s	locret_3FBE
000045FC 303C 00D0                  		move.w	#$D0,d0
00004600 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play water sound
00004606                            
00004606                            locret_3FBE:
00004606 4E75                       		rts	
00004608                            ; End of function LZWaterSlides
00004608                            
00004608                            ; ===========================================================================
00004608 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004617 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004618                            		even
00004618                            
00004618                            ; ---------------------------------------------------------------------------
00004618                            ; Subroutine to	move Sonic in demo mode
00004618                            ; ---------------------------------------------------------------------------
00004618                            
00004618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004618                            
00004618                            
00004618                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004618 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000461C 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000461E 4E75                       		rts	
00004620                            ; ===========================================================================
00004620                            
00004620                            ; This is an unused subroutine for recording a demo
00004620                            
00004620                            MoveDemo_Record:
00004620 43F9 0008 0000             		lea	($80000).l,a1
00004626 3038 F790                  		move.w	($FFFFF790).w,d0
0000462A D2C0                       		adda.w	d0,a1
0000462C 1038 F604                  		move.b	($FFFFF604).w,d0
00004630 B011                       		cmp.b	(a1),d0
00004632 6600                       		bne.s	loc_3FFA
00004634 5229 0001                  		addq.b	#1,1(a1)
00004638 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000463E 6700                       		beq.s	loc_3FFA
00004640 4E75                       		rts	
00004642                            ; ===========================================================================
00004642                            
00004642                            loc_3FFA:				; XREF: MoveDemo_Record
00004642 1340 0002                  		move.b	d0,2(a1)
00004646 137C 0000 0003             		move.b	#0,3(a1)
0000464C 5478 F790                  		addq.w	#2,($FFFFF790).w
00004650 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004656 4E75                       		rts	
00004658                            ; ===========================================================================
00004658                            
00004658                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004658 4A38 F604                  		tst.b	($FFFFF604).w
0000465C 6A00                       		bpl.s	loc_4022
0000465E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004662 6B00                       		bmi.s	loc_4022
00004664 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000466A                            
0000466A                            loc_4022:
0000466A 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004670 7000                       		moveq	#0,d0
00004672 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004676 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000467C 6600                       		bne.s	loc_4038
0000467E 7006                       		moveq	#6,d0
00004680                            
00004680                            loc_4038:
00004680 E548                       		lsl.w	#2,d0
00004682 2271 0000                  		movea.l	(a1,d0.w),a1
00004686 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000468A 6A00                       		bpl.s	loc_4056
0000468C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004692 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004696 5340                       		subq.w	#1,d0
00004698 E548                       		lsl.w	#2,d0
0000469A 2271 0000                  		movea.l	(a1,d0.w),a1
0000469E                            
0000469E                            loc_4056:
0000469E 3038 F790                  		move.w	($FFFFF790).w,d0
000046A2 D2C0                       		adda.w	d0,a1
000046A4 1011                       		move.b	(a1),d0
000046A6 41F8 F604                  		lea	($FFFFF604).w,a0
000046AA 1200                       		move.b	d0,d1
000046AC 1410                       		move.b	(a0),d2
000046AE B500                       		eor.b	d2,d0
000046B0 10C1                       		move.b	d1,(a0)+
000046B2 C001                       		and.b	d1,d0
000046B4 10C0                       		move.b	d0,(a0)+
000046B6 5338 F792                  		subq.b	#1,($FFFFF792).w
000046BA 6400                       		bcc.s	locret_407E
000046BC 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046C2 5478 F790                  		addq.w	#2,($FFFFF790).w
000046C6                            
000046C6                            locret_407E:
000046C6 4E75                       		rts	
000046C8                            ; End of function MoveSonicInDemo
000046C8                            
000046C8                            ; ===========================================================================
000046C8                            ; ---------------------------------------------------------------------------
000046C8                            ; Demo sequence	pointers
000046C8                            ; ---------------------------------------------------------------------------
000046C8                            Demo_Index:
000046C8                            	include "_inc\Demo pointers for intro.asm"
000046C8                            ; ---------------------------------------------------------------------------
000046C8                            ; Demo sequence	pointers
000046C8                            ; ---------------------------------------------------------------------------
000046C8 0000 0000                  	dc.l Demo_GHZ
000046CC 0000 0000                  	dc.l Demo_GHZ
000046D0 0000 0000                  	dc.l Demo_MZ
000046D4 0000 0000                  	dc.l Demo_MZ
000046D8 0000 0000                  	dc.l Demo_SYZ
000046DC 0000 0000                  	dc.l Demo_SYZ
000046E0 0000 0000                  	dc.l Demo_SS
000046E4 0000 0000                  	dc.l Demo_SS
000046E4 0000 0000                  	dc.l Demo_SS
000046E8                            
000046E8                            Demo_EndIndex:
000046E8                            	include "_inc\Demo pointers for ending.asm"
000046E8                            ; ---------------------------------------------------------------------------
000046E8                            ; Demo (ending) sequence pointers
000046E8                            ; ---------------------------------------------------------------------------
000046E8 0000 0000                  	dc.l Demo_EndGHZ1
000046EC 0000 0000                  	dc.l Demo_EndMZ
000046F0 0000 0000                  	dc.l Demo_EndSYZ
000046F4 0000 0000                  	dc.l Demo_EndLZ
000046F8 0000 0000                  	dc.l Demo_EndSLZ
000046FC 0000 0000                  	dc.l Demo_EndSBZ1
00004700 0000 0000                  	dc.l Demo_EndSBZ2
00004704 0000 0000                  	dc.l Demo_EndGHZ2
00004704 0000 0000                  	dc.l Demo_EndGHZ2
00004708                            
00004708 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004718 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004728 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004738                            		even
00004738                            
00004738                            ; ---------------------------------------------------------------------------
00004738                            ; Collision index loading subroutine
00004738                            ; ---------------------------------------------------------------------------
00004738                            
00004738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004738                            
00004738                            
00004738                            ColIndexLoad:				; XREF: Level
00004738 7000                       		moveq	#0,d0
0000473A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000473E E548                       		lsl.w	#2,d0
00004740 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004746 4E75                       		rts	
00004748                            ; End of function ColIndexLoad
00004748                            
00004748                            ; ===========================================================================
00004748                            ; ---------------------------------------------------------------------------
00004748                            ; Collision index pointers
00004748                            ; ---------------------------------------------------------------------------
00004748                            ColPointers:
00004748                            	include "_inc\Collision index pointers.asm"
00004748                            ; ---------------------------------------------------------------------------
00004748                            ; Collision index pointers
00004748                            ; ---------------------------------------------------------------------------
00004748 0000 0000                  	dc.l Col_GHZ
0000474C 0000 0000                  	dc.l Col_LZ
00004750 0000 0000                  	dc.l Col_MZ
00004754 0000 0000                  	dc.l Col_SLZ
00004758 0000 0000                  	dc.l Col_SYZ
0000475C 0000 0000                  	dc.l Col_SBZ
00004760 0000 0000                  	dc.l Col_BHZ
00004760 0000 0000                  	dc.l Col_BHZ
00004764                            
00004764                            ; ---------------------------------------------------------------------------
00004764                            ; Oscillating number subroutine
00004764                            ; ---------------------------------------------------------------------------
00004764                            
00004764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004764                            
00004764                            
00004764                            OscillateNumInit:			; XREF: Level
00004764 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004768 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000476E 7220                       		moveq	#$20,d1
00004770                            
00004770                            Osc_Loop:
00004770 32DA                       		move.w	(a2)+,(a1)+
00004772 51C9 FFFC                  		dbf	d1,Osc_Loop
00004776 4E75                       		rts	
00004778                            ; End of function OscillateNumInit
00004778                            
00004778                            ; ===========================================================================
00004778 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000477C 0000 0080                  		dc.w 0,	$80
00004780 0000 0080                  		dc.w 0,	$80
00004784 0000 0080                  		dc.w 0,	$80
00004788 0000 0080                  		dc.w 0,	$80
0000478C 0000 0080                  		dc.w 0,	$80
00004790 0000 0080                  		dc.w 0,	$80
00004794 0000 0080                  		dc.w 0,	$80
00004798 0000 0080                  		dc.w 0,	$80
0000479C 0000 50F0                  		dc.w 0,	$50F0
000047A0 011E 2080                  		dc.w $11E, $2080
000047A4 00B4 3080                  		dc.w $B4, $3080
000047A8 010E 5080                  		dc.w $10E, $5080
000047AC 01C2 7080                  		dc.w $1C2, $7080
000047B0 0276 0080                  		dc.w $276, $80
000047B4 0000 0080                  		dc.w 0,	$80
000047B8 0000                       		dc.w 0
000047BA                            		even
000047BA                            
000047BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047BA                            
000047BA                            
000047BA                            OscillateNumDo:				; XREF: Level
000047BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000047C0 6400                       		bcc.s	locret_41C4
000047C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000047CC 3619                       		move.w	(a1)+,d3
000047CE 720F                       		moveq	#$F,d1
000047D0                            
000047D0                            loc_4184:
000047D0 341A                       		move.w	(a2)+,d2
000047D2 381A                       		move.w	(a2)+,d4
000047D4 0303                       		btst	d1,d3
000047D6 6600                       		bne.s	loc_41A4
000047D8 3029 0002                  		move.w	2(a1),d0
000047DC D042                       		add.w	d2,d0
000047DE 3340 0002                  		move.w	d0,2(a1)
000047E2 D151                       		add.w	d0,0(a1)
000047E4 B811                       		cmp.b	0(a1),d4
000047E6 6200                       		bhi.s	loc_41BA
000047E8 03C3                       		bset	d1,d3
000047EA 6000                       		bra.s	loc_41BA
000047EC                            ; ===========================================================================
000047EC                            
000047EC                            loc_41A4:				; XREF: OscillateNumDo
000047EC 3029 0002                  		move.w	2(a1),d0
000047F0 9042                       		sub.w	d2,d0
000047F2 3340 0002                  		move.w	d0,2(a1)
000047F6 D151                       		add.w	d0,0(a1)
000047F8 B811                       		cmp.b	0(a1),d4
000047FA 6300                       		bls.s	loc_41BA
000047FC 0383                       		bclr	d1,d3
000047FE                            
000047FE                            loc_41BA:
000047FE 5849                       		addq.w	#4,a1
00004800 51C9 FFCE                  		dbf	d1,loc_4184
00004804 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004808                            
00004808                            locret_41C4:
00004808 4E75                       		rts	
0000480A                            ; End of function OscillateNumDo
0000480A                            
0000480A                            ; ===========================================================================
0000480A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000480E 0002 0018                  		dc.w 2,	$18
00004812 0002 0020                  		dc.w 2,	$20
00004816 0002 0030                  		dc.w 2,	$30
0000481A 0004 0020                  		dc.w 4,	$20
0000481E 0008 0008                  		dc.w 8,	8
00004822 0008 0040                  		dc.w 8,	$40
00004826 0004 0040                  		dc.w 4,	$40
0000482A 0002 0050                  		dc.w 2,	$50
0000482E 0002 0050                  		dc.w 2,	$50
00004832 0002 0020                  		dc.w 2,	$20
00004836 0003 0030                  		dc.w 3,	$30
0000483A 0005 0050                  		dc.w 5,	$50
0000483E 0007 0070                  		dc.w 7,	$70
00004842 0002 0010                  		dc.w 2,	$10
00004846 0002 0010                  		dc.w 2,	$10
0000484A                            		even
0000484A                            
0000484A                            ; ---------------------------------------------------------------------------
0000484A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000484A                            ; ---------------------------------------------------------------------------
0000484A                            
0000484A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000484A                            
0000484A                            
0000484A                            ChangeRingFrame:			; XREF: Level
0000484A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000484E 6A00                       		bpl.s	loc_421C
00004850 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004856 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000485A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004860                            
00004860                            loc_421C:
00004860 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004864 6A00                       		bpl.s	loc_4232
00004866 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000486C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004870 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004876                            
00004876                            loc_4232:
00004876 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000487A 6A00                       		bpl.s	loc_4250
0000487C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004882 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004886 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000488C 6500                       		bcs.s	loc_4250
0000488E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004894                            
00004894                            loc_4250:
00004894 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004898 6700                       		beq.s	locret_4272
0000489A 7000                       		moveq	#0,d0
0000489C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048A8 EF58                       		rol.w	#7,d0
000048AA 0240 0003                  		andi.w	#3,d0
000048AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048B6                            
000048B6                            locret_4272:
000048B6 4E75                       		rts	
000048B8                            ; End of function ChangeRingFrame
000048B8                            
000048B8                            ; ---------------------------------------------------------------------------
000048B8                            ; End-of-act signpost pattern loading subroutine
000048B8                            ; ---------------------------------------------------------------------------
000048B8                            
000048B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048B8                            
000048B8                            
000048B8                            SignpostArtLoad:			; XREF: Level
000048B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000048C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000048C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000048C8 3038 F700                  		move.w	($FFFFF700).w,d0
000048CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000048D0 0441 0100                  		subi.w	#$100,d1
000048D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000048D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000048D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000048DC 6700                       		beq.s	Signpost_Exit
000048DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000048E2 6700                       		beq.s	Signpost_Exit
000048E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000048E8 7012                       		moveq	#$12,d0
000048EA 6000 CEFC                  		bra.w	LoadPLC2	; load signpost	patterns
000048EE                            ; ===========================================================================
000048EE                            
000048EE                            Signpost_Exit:
000048EE 4E75                       		rts	
000048F0                            ; End of function SignpostArtLoad
000048F0                            
000048F0                            ; ===========================================================================
000048F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004970                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AA0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B20                            Demo_SS:	incbin	demodata\i_ss.bin
00004C20                            ; ===========================================================================
00004C20                            
00004C20                            ; ---------------------------------------------------------------------------
00004C20                            ; Special Stage
00004C20                            ; ---------------------------------------------------------------------------
00004C20                            
00004C20                            SpecialStage:				; XREF: GameModeArray
00004C20 303C 00CA                  		move.w	#$CA,d0
00004C24 6100 C9AC                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C28 6100 D554                  		bsr.w	Pal_MakeFlash
00004C2C 46FC 2700                  		move	#$2700,sr
00004C30 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C36 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C3A 3CBC 8004                  		move.w	#$8004,(a6)
00004C3E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C44 3CBC 9011                  		move.w	#$9011,(a6)
00004C48 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C4C 0200 00BF                  		andi.b	#$BF,d0
00004C50 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C56 6100 C8A2                  		bsr.w	ClearScreen
00004C5A 46FC 2300                  		move	#$2300,sr
00004C5E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004C64 3ABC 8F01                  		move.w	#$8F01,(a5)
00004C68 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004C6E 3ABC 9780                  		move.w	#$9780,(a5)
00004C72 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004C78 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004C80                            
00004C80                            loc_463C:
00004C80 3215                       		move.w	(a5),d1
00004C82 0801 0001                  		btst	#1,d1
00004C86 66F8                       		bne.s	loc_463C
00004C88 3ABC 8F02                  		move.w	#$8F02,(a5)
00004C8C 6100 0000                  		bsr.w	SS_BGLoad
00004C90 7014                       		moveq	#$14,d0
00004C92 6100 CC8E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004C96 43F8 D000                  		lea	($FFFFD000).w,a1
00004C9A 7000                       		moveq	#0,d0
00004C9C 323C 07FF                  		move.w	#$7FF,d1
00004CA0                            
00004CA0                            SS_ClrObjRam:
00004CA0 22C0                       		move.l	d0,(a1)+
00004CA2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CA6                            
00004CA6 43F8 F700                  		lea	($FFFFF700).w,a1
00004CAA 7000                       		moveq	#0,d0
00004CAC 323C 003F                  		move.w	#$3F,d1
00004CB0                            
00004CB0                            SS_ClrRam:
00004CB0 22C0                       		move.l	d0,(a1)+
00004CB2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CB6                            
00004CB6 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CBA 7000                       		moveq	#0,d0
00004CBC 323C 0027                  		move.w	#$27,d1
00004CC0                            
00004CC0                            SS_ClrRam2:
00004CC0 22C0                       		move.l	d0,(a1)+
00004CC2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004CC6                            
00004CC6 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004CCA 7000                       		moveq	#0,d0
00004CCC 323C 007F                  		move.w	#$7F,d1
00004CD0                            
00004CD0                            SS_ClrNemRam:
00004CD0 22C0                       		move.l	d0,(a1)+
00004CD2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004CD6                            
00004CD6 4238 F64E                  		clr.b	($FFFFF64E).w
00004CDA 4278 FE02                  		clr.w	($FFFFFE02).w
00004CDE 700A                       		moveq	#$A,d0
00004CE0 6100 D61C                  		bsr.w	PalLoad1	; load special stage pallet
00004CE4 4EB9 0000 0000             		jsr	SS_Load
00004CEA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004CF2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004CFA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D00 6100 0000                  		bsr.w	PalCycle_SS
00004D04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D08 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D0C 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D12 303C 0089                  		move.w	#$89,d0
00004D16 6100 C8B4                  		bsr.w	PlaySound	; play special stage BG	music
00004D1A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D20 43F9 0000 46C8             		lea	(Demo_Index).l,a1
00004D26 7006                       		moveq	#6,d0
00004D28 E548                       		lsl.w	#2,d0
00004D2A 2271 0000                  		movea.l	(a1,d0.w),a1
00004D2E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D34 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D38 4278 FE20                  		clr.w	($FFFFFE20).w
00004D3C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D40 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D46 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D4C                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D4C                            ;		beq.s	SS_NoDebug	; if not, branch
00004D4C                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D4C                            ;		beq.s	SS_NoDebug	; if not, branch
00004D4C                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D4C                            
00004D4C                            SS_NoDebug:
00004D4C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D50 0000 0040                  		ori.b	#$40,d0
00004D54 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D5A 6100 D376                  		bsr.w	Pal_MakeWhite
00004D5E                            
00004D5E                            ; ---------------------------------------------------------------------------
00004D5E                            ; Main Special Stage loop
00004D5E                            ; ---------------------------------------------------------------------------
00004D5E                            
00004D5E                            SS_MainLoop:
00004D5E 6100 C87E                  		bsr.w	PauseGame
00004D62 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004D68 6100 DFD0                  		bsr.w	DelayProgram
00004D6C 4A78 F784                          tst.w   ($FFFFF784).w
00004D70 6700                               beq.s   SS_NotReversed
00004D72 5378 F784                          subi.w  #1,($FFFFF784).w
00004D76                            
00004D76                            SS_NotReversed:
00004D76 6100 F8A0                  		bsr.w	MoveSonicInDemo
00004D7A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D80 4EB9 0000 0000             		jsr	ObjectsLoad
00004D86 4EB9 0000 0000             		jsr	BuildSprites
00004D8C 4EB9 0000 0000             		jsr	SS_ShowLayout
00004D92 6100 0000                  		bsr.w	SS_BGAnimate
00004D96 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004D9A 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004D9C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DA0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DA4                            
00004DA4                            SS_ChkEnd:
00004DA4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DAA 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DAE                            
00004DAE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DB2 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DB6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DBC 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004DC2 6500                       		bcs.s	SS_End		; if not, branch
00004DC4 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004DC8                            
00004DC8                            SS_End:
00004DC8 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004DCE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004DD4 4278 F794                  		clr.w	($FFFFF794).w
00004DD8                            
00004DD8                            SS_EndLoop:
00004DD8 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DDE 6100 DF5A                  		bsr.w	DelayProgram
00004DE2 6100 F834                  		bsr.w	MoveSonicInDemo
00004DE6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DEC 4EB9 0000 0000             		jsr	ObjectsLoad
00004DF2 4EB9 0000 0000             		jsr	BuildSprites
00004DF8 4EB9 0000 0000             		jsr	SS_ShowLayout
00004DFE 6100 0000                  		bsr.w	SS_BGAnimate
00004E02 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E06 6A00                       		bpl.s	loc_47D4
00004E08 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E0E 6100 D38E                  		bsr.w	Pal_ToWhite
00004E12                            
00004E12                            loc_47D4:
00004E12 4A78 F614                  		tst.w	($FFFFF614).w
00004E16 66C0                       		bne.s	SS_EndLoop
00004E18                            
00004E18 46FC 2700                  		move	#$2700,sr
00004E1C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E22 3CBC 8230                  		move.w	#$8230,(a6)
00004E26 3CBC 8407                  		move.w	#$8407,(a6)
00004E2A 3CBC 9001                  		move.w	#$9001,(a6)
00004E2E 6100 C6CA                  		bsr.w	ClearScreen
00004E32 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E3C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E42 6100 C832                  		bsr.w	NemDec
00004E46 4EB9 0000 0000             		jsr	Hud_Base
00004E4C 46FC 2300                  		move	#$2300,sr
00004E50 7011                       		moveq	#$11,d0
00004E52 6100 D4C6                  		bsr.w	PalLoad2	; load results screen pallet
00004E56 7000                       		moveq	#0,d0
00004E58 6100 C98E                  		bsr.w	LoadPLC2
00004E5C 701B                       		moveq	#$1B,d0
00004E5E 6100 C956                  		bsr.w	LoadPLC		; load results screen patterns
00004E62 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004E68 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004E6E 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004E72 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004E76 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004E7A 303C 008E                  		move.w	#$8E,d0
00004E7E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004E84 43F8 D000                  		lea	($FFFFD000).w,a1
00004E88 7000                       		moveq	#0,d0
00004E8A 323C 07FF                  		move.w	#$7FF,d1
00004E8E                            
00004E8E                            SS_EndClrObjRam:
00004E8E 22C0                       		move.l	d0,(a1)+
00004E90 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004E94                            
00004E94 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004E9A                            
00004E9A                            SS_NormalExit:
00004E9A 6100 C742                  		bsr.w	PauseGame
00004E9E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EA4 6100 DE94                  		bsr.w	DelayProgram
00004EA8 4EB9 0000 0000             		jsr	ObjectsLoad
00004EAE 4EB9 0000 0000             		jsr	BuildSprites
00004EB4 6100 C96C                  		bsr.w	RunPLC_RAM
00004EB8 4A78 FE02                  		tst.w	($FFFFFE02).w
00004EBC 67DC                       		beq.s	SS_NormalExit
00004EBE 4AB8 F680                  		tst.l	($FFFFF680).w
00004EC2 66D6                       		bne.s	SS_NormalExit
00004EC4 303C 00CA                  		move.w	#$CA,d0
00004EC8 6100 C708                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004ECC 6100 D2B0                  		bsr.w	Pal_MakeFlash
00004ED0 4E75                       		rts	
00004ED2                            ; ===========================================================================
00004ED2                            
00004ED2                            SS_ToSegaScreen:
00004ED2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004ED8 4E75                       		rts
00004EDA                            
00004EDA                            ; ---------------------------------------------------------------------------
00004EDA                            ; Special stage	background loading subroutine
00004EDA                            ; ---------------------------------------------------------------------------
00004EDA                            
00004EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EDA                            
00004EDA                            
00004EDA                            SS_BGLoad:				; XREF: SpecialStage
00004EDA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EE0 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004EE6 303C 4051                  		move.w	#$4051,d0
00004EEA 6100 CA68                  		bsr.w	EniDec
00004EEE 263C 5000 0001             		move.l	#$50000001,d3
00004EF4 45F9 00FF 0080             		lea	($FF0080).l,a2
00004EFA 7E06                       		moveq	#6,d7
00004EFC                            
00004EFC                            loc_48BE:
00004EFC 2003                       		move.l	d3,d0
00004EFE 7C03                       		moveq	#3,d6
00004F00 7800                       		moveq	#0,d4
00004F02 0C47 0003                  		cmpi.w	#3,d7
00004F06 6400                       		bcc.s	loc_48CC
00004F08 7801                       		moveq	#1,d4
00004F0A                            
00004F0A                            loc_48CC:
00004F0A 7A07                       		moveq	#7,d5
00004F0C                            
00004F0C                            loc_48CE:
00004F0C 224A                       		movea.l	a2,a1
00004F0E 0A04 0001                  		eori.b	#1,d4
00004F12 6600                       		bne.s	loc_48E2
00004F14 0C47 0006                  		cmpi.w	#6,d7
00004F18 6600                       		bne.s	loc_48F2
00004F1A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F20                            
00004F20                            loc_48E2:
00004F20 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F24 7207                       		moveq	#7,d1
00004F26 7407                       		moveq	#7,d2
00004F28 6100 C72C                  		bsr.w	ShowVDPGraphics
00004F2C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F30                            
00004F30                            loc_48F2:
00004F30 0680 0010 0000             		addi.l	#$100000,d0
00004F36 51CD FFD4                  		dbf	d5,loc_48CE
00004F3A 0680 0380 0000             		addi.l	#$3800000,d0
00004F40 0A04 0001                  		eori.b	#1,d4
00004F44 51CE FFC4                  		dbf	d6,loc_48CC
00004F48 0683 1000 0000             		addi.l	#$10000000,d3
00004F4E 6A00                       		bpl.s	loc_491C
00004F50 4843                       		swap	d3
00004F52 0683 0000 C000             		addi.l	#$C000,d3
00004F58 4843                       		swap	d3
00004F5A                            
00004F5A                            loc_491C:
00004F5A D4FC 0080                  		adda.w	#$80,a2
00004F5E 51CF FF9C                  		dbf	d7,loc_48BE
00004F62 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F68 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004F6E 303C 4000                  		move.w	#$4000,d0
00004F72 6100 C9E0                  		bsr.w	EniDec
00004F76 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F7C 203C 4000 0003             		move.l	#$40000003,d0
00004F82 723F                       		moveq	#$3F,d1
00004F84 741F                       		moveq	#$1F,d2
00004F86 6100 C6CE                  		bsr.w	ShowVDPGraphics
00004F8A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F90 203C 5000 0003             		move.l	#$50000003,d0
00004F96 723F                       		moveq	#$3F,d1
00004F98 743F                       		moveq	#$3F,d2
00004F9A 6100 C6BA                  		bsr.w	ShowVDPGraphics
00004F9E 4E75                       		rts	
00004FA0                            ; End of function SS_BGLoad
00004FA0                            
00004FA0                            ; ---------------------------------------------------------------------------
00004FA0                            ; Pallet cycling routine - special stage
00004FA0                            ; ---------------------------------------------------------------------------
00004FA0                            
00004FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA0                            
00004FA0                            
00004FA0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FA0 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FA4 6600                       		bne.s	locret_49E6
00004FA6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FAA 6A00                       		bpl.s	locret_49E6
00004FAC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FB2 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FB6 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FBA 0240 001F                  		andi.w	#$1F,d0
00004FBE E548                       		lsl.w	#2,d0
00004FC0 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004FC6 D0C0                       		adda.w	d0,a0
00004FC8 1018                       		move.b	(a0)+,d0
00004FCA 6A00                       		bpl.s	loc_4992
00004FCC 303C 01FF                  		move.w	#$1FF,d0
00004FD0                            
00004FD0                            loc_4992:
00004FD0 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004FD4 7000                       		moveq	#0,d0
00004FD6 1018                       		move.b	(a0)+,d0
00004FD8 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004FDC 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004FE2 43F1 0000                  		lea	(a1,d0.w),a1
00004FE6 303C 8200                  		move.w	#-$7E00,d0
00004FEA 1019                       		move.b	(a1)+,d0
00004FEC 3C80                       		move.w	d0,(a6)
00004FEE 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004FF2 303C 8400                  		move.w	#-$7C00,d0
00004FF6 1018                       		move.b	(a0)+,d0
00004FF8 3C80                       		move.w	d0,(a6)
00004FFA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005004 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000500C 7000                       		moveq	#0,d0
0000500E 1018                       		move.b	(a0)+,d0
00005010 6B00                       		bmi.s	loc_49E8
00005012 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005018 D2C0                       		adda.w	d0,a1
0000501A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000501E 24D9                       		move.l	(a1)+,(a2)+
00005020 24D9                       		move.l	(a1)+,(a2)+
00005022 24D9                       		move.l	(a1)+,(a2)+
00005024                            
00005024                            locret_49E6:
00005024 4E75                       		rts	
00005026                            ; ===========================================================================
00005026                            
00005026                            loc_49E8:				; XREF: PalCycle_SS
00005026 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000502A 0C40 008A                  		cmpi.w	#$8A,d0
0000502E 6500                       		bcs.s	loc_49F4
00005030 5241                       		addq.w	#1,d1
00005032                            
00005032                            loc_49F4:
00005032 C2FC 002A                  		mulu.w	#$2A,d1
00005036 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000503C D2C1                       		adda.w	d1,a1
0000503E 0240 007F                  		andi.w	#$7F,d0
00005042 0880 0000                  		bclr	#0,d0
00005046 6700                       		beq.s	loc_4A18
00005048 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000504C 24D1                       		move.l	(a1),(a2)+
0000504E 24E9 0004                  		move.l	4(a1),(a2)+
00005052 24E9 0008                  		move.l	8(a1),(a2)+
00005056                            
00005056                            loc_4A18:
00005056 D2FC 000C                  		adda.w	#$C,a1
0000505A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000505E 0C40 000A                  		cmpi.w	#$A,d0
00005062 6500                       		bcs.s	loc_4A2E
00005064 0440 000A                  		subi.w	#$A,d0
00005068 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000506C                            
0000506C                            loc_4A2E:
0000506C 3200                       		move.w	d0,d1
0000506E D040                       		add.w	d0,d0
00005070 D041                       		add.w	d1,d0
00005072 D2C0                       		adda.w	d0,a1
00005074 24D9                       		move.l	(a1)+,(a2)+
00005076 34D9                       		move.w	(a1)+,(a2)+
00005078 4E75                       		rts	
0000507A                            ; End of function PalCycle_SS
0000507A                            
0000507A                            ; ===========================================================================
0000507A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000508A                            					; XREF: PalCycle_SS
0000508A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000509A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050AA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050BA 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000050CA 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000050DA 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000050EA FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000050FA                            		even
000050FA 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005108                            					; XREF: PalCycle_SS
00005108                            		even
00005108                            
00005108                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005150                            		even
00005150                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005222                            		even
00005222                            
00005222                            ; ---------------------------------------------------------------------------
00005222                            ; Subroutine to	make the special stage background animated
00005222                            ; ---------------------------------------------------------------------------
00005222                            
00005222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005222                            
00005222                            
00005222                            SS_BGAnimate:				; XREF: SpecialStage
00005222 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005226 6600                       		bne.s	loc_4BF6
00005228 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000522E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005234                            
00005234                            loc_4BF6:
00005234 0C40 0008                  		cmpi.w	#8,d0
00005238 6400                       		bcc.s	loc_4C4E
0000523A 0C40 0006                  		cmpi.w	#6,d0
0000523E 6600                       		bne.s	loc_4C10
00005240 5278 F718                  		addq.w	#1,($FFFFF718).w
00005244 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005248 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000524E                            
0000524E                            loc_4C10:
0000524E 7000                       		moveq	#0,d0
00005250 3038 F708                  		move.w	($FFFFF708).w,d0
00005254 4440                       		neg.w	d0
00005256 4840                       		swap	d0
00005258 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000525E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005262 7609                       		moveq	#9,d3
00005264                            
00005264                            loc_4C26:
00005264 302B 0002                  		move.w	2(a3),d0
00005268 6100 DB02                  		bsr.w	CalcSine
0000526C 7400                       		moveq	#0,d2
0000526E 1419                       		move.b	(a1)+,d2
00005270 C1C2                       		muls.w	d2,d0
00005272 E080                       		asr.l	#8,d0
00005274 36C0                       		move.w	d0,(a3)+
00005276 1419                       		move.b	(a1)+,d2
00005278 4882                       		ext.w	d2
0000527A D55B                       		add.w	d2,(a3)+
0000527C 51CB FFE6                  		dbf	d3,loc_4C26
00005280 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005284 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000528A 6000                       		bra.s	loc_4C7E
0000528C                            ; ===========================================================================
0000528C                            
0000528C                            loc_4C4E:				; XREF: SS_BGAnimate
0000528C 0C40 000C                  		cmpi.w	#$C,d0
00005290 6600                       		bne.s	loc_4C74
00005292 5378 F718                  		subq.w	#1,($FFFFF718).w
00005296 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000529A 243C 0001 8000             		move.l	#$18000,d2
000052A0 7206                       		moveq	#6,d1
000052A2                            
000052A2                            loc_4C64:
000052A2 2013                       		move.l	(a3),d0
000052A4 9082                       		sub.l	d2,d0
000052A6 26C0                       		move.l	d0,(a3)+
000052A8 0482 0000 2000             		subi.l	#$2000,d2
000052AE 51C9 FFF2                  		dbf	d1,loc_4C64
000052B2                            
000052B2                            loc_4C74:
000052B2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052B6 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052BC                            
000052BC                            loc_4C7E:
000052BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000052C0 3038 F718                  		move.w	($FFFFF718).w,d0
000052C4 4440                       		neg.w	d0
000052C6 4840                       		swap	d0
000052C8 7600                       		moveq	#0,d3
000052CA 161A                       		move.b	(a2)+,d3
000052CC 3438 F70C                  		move.w	($FFFFF70C).w,d2
000052D0 4442                       		neg.w	d2
000052D2 0242 00FF                  		andi.w	#$FF,d2
000052D6 E54A                       		lsl.w	#2,d2
000052D8                            
000052D8                            loc_4C9A:
000052D8 301B                       		move.w	(a3)+,d0
000052DA 544B                       		addq.w	#2,a3
000052DC 7200                       		moveq	#0,d1
000052DE 121A                       		move.b	(a2)+,d1
000052E0 5341                       		subq.w	#1,d1
000052E2                            
000052E2                            loc_4CA4:
000052E2 2380 2000                  		move.l	d0,(a1,d2.w)
000052E6 5842                       		addq.w	#4,d2
000052E8 0242 03FC                  		andi.w	#$3FC,d2
000052EC 51C9 FFF4                  		dbf	d1,loc_4CA4
000052F0 51CB FFE6                  		dbf	d3,loc_4C9A
000052F4 4E75                       		rts	
000052F6                            ; End of function SS_BGAnimate
000052F6                            
000052F6                            ; ===========================================================================
000052F6 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005302                            		even
00005302 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000530A                            		even
0000530A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000531E                            		even
0000531E                            					; XREF: SS_BGAnimate
0000531E                            ; ===========================================================================
0000531E                            
0000531E                            ; ---------------------------------------------------------------------------
0000531E                            ; Continue screen
0000531E                            ; ---------------------------------------------------------------------------
0000531E                            
0000531E                            ContinueScreen:				; XREF: GameModeArray
0000531E 6100 CD34                  		bsr.w	Pal_FadeFrom
00005322 46FC 2700                  		move	#$2700,sr
00005326 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000532A 0200 00BF                  		andi.b	#$BF,d0
0000532E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005334 4DF9 00C0 0004             		lea	($C00004).l,a6
0000533A 3CBC 8004                  		move.w	#$8004,(a6)
0000533E 3CBC 8700                  		move.w	#$8700,(a6)
00005342 6100 C1B6                  		bsr.w	ClearScreen
00005346 43F8 D000                  		lea	($FFFFD000).w,a1
0000534A 7000                       		moveq	#0,d0
0000534C 323C 07FF                  		move.w	#$7FF,d1
00005350                            
00005350                            Cont_ClrObjRam:
00005350 22C0                       		move.l	d0,(a1)+
00005352 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005356                            
00005356 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005360 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005366 6100 C30E                  		bsr.w	NemDec
0000536A 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005374 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000537A 6100 C2FA                  		bsr.w	NemDec
0000537E 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005388 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000538E 6100 C2E6                  		bsr.w	NemDec
00005392 720A                       		moveq	#10,d1
00005394 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000539A 7012                       		moveq	#$12,d0
0000539C 6100 CF60                  		bsr.w	PalLoad1	; load continue	screen pallet
000053A0 103C 0090                  		move.b	#$90,d0
000053A4 6100 C226                  		bsr.w	PlaySound	; play continue	music
000053A8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053AE 42B8 F700                  		clr.l	($FFFFF700).w
000053B2 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053BA 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000053C0 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000053C6 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000053CC 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000053D2 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000053D8 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000053DE 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000053E4 4EB9 0000 0000             		jsr	ObjectsLoad
000053EA 4EB9 0000 0000             		jsr	BuildSprites
000053F0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053F4 0000 0040                  		ori.b	#$40,d0
000053F8 33C0 00C0 0004             		move.w	d0,($C00004).l
000053FE 6100 CBAA                  		bsr.w	Pal_FadeTo
00005402                            
00005402                            ; ---------------------------------------------------------------------------
00005402                            ; Continue screen main loop
00005402                            ; ---------------------------------------------------------------------------
00005402                            
00005402                            Cont_MainLoop:
00005402 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005408 6100 D930                  		bsr.w	DelayProgram
0000540C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005412 6400                       		bcc.s	loc_4DF2
00005414 46FC 2700                  		move	#$2700,sr
00005418 3238 F614                  		move.w	($FFFFF614).w,d1
0000541C 82FC 003C                  		divu.w	#$3C,d1
00005420 0281 0000 000F             		andi.l	#$F,d1
00005426 4EB9 0000 0000             		jsr	ContScrCounter
0000542C 46FC 2300                  		move	#$2300,sr
00005430                            
00005430                            loc_4DF2:
00005430 4EB9 0000 0000             		jsr	ObjectsLoad
00005436 4EB9 0000 0000             		jsr	BuildSprites
0000543C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005442 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005444 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000544A 64B6                       		bcc.s	Cont_MainLoop
0000544C 4A78 F614                  		tst.w	($FFFFF614).w
00005450 6600 FFB0                  		bne.w	Cont_MainLoop
00005454 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000545A 4E75                       		rts	
0000545C                            ; ===========================================================================
0000545C                            
0000545C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000545C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005462 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005468 7000                       		moveq	#0,d0
0000546A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000546E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005472 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005476 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000547A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000547E 4E75                       		rts	
00005480                            ; ===========================================================================
00005480                            
00005480                            ; ---------------------------------------------------------------------------
00005480                            ; Object 80 - Continue screen elements
00005480                            ; ---------------------------------------------------------------------------
00005480                            
00005480                            Obj80:					; XREF: Obj_Index
00005480 7000                       		moveq	#0,d0
00005482 1028 0024                  		move.b	$24(a0),d0
00005486 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000548A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000548E                            ; ===========================================================================
0000548E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005490 0000                       		dc.w Obj80_Display-Obj80_Index
00005492 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005494 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005496                            ; ===========================================================================
00005496                            
00005496                            Obj80_Main:				; XREF: Obj80_Index
00005496 5428 0024                  		addq.b	#2,$24(a0)
0000549A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054A2 317C 8500 0002             		move.w	#$8500,2(a0)
000054A8 117C 0000 0001             		move.b	#0,1(a0)
000054AE 117C 003C 0019             		move.b	#$3C,$19(a0)
000054B4 317C 0120 0008             		move.w	#$120,8(a0)
000054BA 317C 00C0 000A             		move.w	#$C0,$A(a0)
000054C0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000054C6                            
000054C6                            Obj80_Display:				; XREF: Obj80_Index
000054C6 4EF9 0000 0000             		jmp	DisplaySprite
000054CC                            ; ===========================================================================
000054CC                            Obj80_MiniSonicPos:
000054CC 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000054DE 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000054EA                            ; ===========================================================================
000054EA                            
000054EA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000054EA 2248                       		movea.l	a0,a1
000054EC 45F9 0000 54CC             		lea	(Obj80_MiniSonicPos).l,a2
000054F2 7200                       		moveq	#0,d1
000054F4 1238 FE18                  		move.b	($FFFFFE18).w,d1
000054F8 5501                       		subq.b	#2,d1
000054FA 6400                       		bcc.s	loc_4EC4
000054FC 4EF9 0000 0000             		jmp	DeleteObject
00005502                            ; ===========================================================================
00005502                            
00005502                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005502 7601                       		moveq	#1,d3
00005504 0C01 000E                  		cmpi.b	#$E,d1
00005508 6500                       		bcs.s	loc_4ED0
0000550A 7600                       		moveq	#0,d3
0000550C 720E                       		moveq	#$E,d1
0000550E                            
0000550E                            loc_4ED0:
0000550E 1401                       		move.b	d1,d2
00005510 0202 0001                  		andi.b	#1,d2
00005514                            
00005514                            Obj80_MiniSonLoop:
00005514 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005518 335A 0008                  		move.w	(a2)+,8(a1)
0000551C 4A02                       		tst.b	d2
0000551E 6700                       		beq.s	loc_4EEA
00005520 0469 000A 0008             		subi.w	#$A,8(a1)
00005526                            
00005526                            loc_4EEA:
00005526 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000552C 137C 0006 001A             		move.b	#6,$1A(a1)
00005532 137C 0006 0024             		move.b	#6,$24(a1)
00005538 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005540 337C 8551 0002             		move.w	#$8551,2(a1)
00005546 137C 0000 0001             		move.b	#0,1(a1)
0000554C 43E9 0040                  		lea	$40(a1),a1
00005550 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005554 43E9 FFC0                  		lea	-$40(a1),a1
00005558 1343 0028                  		move.b	d3,$28(a1)
0000555C                            
0000555C                            Obj80_ChkType:				; XREF: Obj80_Index
0000555C 4A28 0028                  		tst.b	$28(a0)
00005560 6700                       		beq.s	loc_4F40
00005562 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005568 6500                       		bcs.s	loc_4F40
0000556A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000556E 0200 0001                  		andi.b	#1,d0
00005572 6600                       		bne.s	loc_4F40
00005574 4A78 D010                  		tst.w	($FFFFD010).w
00005578 6600                       		bne.s	Obj80_Delete
0000557A 4E75                       		rts	
0000557C                            ; ===========================================================================
0000557C                            
0000557C                            loc_4F40:				; XREF: Obj80_ChkType
0000557C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005580 0200 000F                  		andi.b	#$F,d0
00005584 6600                       		bne.s	Obj80_Display2
00005586 0868 0000 001A             		bchg	#0,$1A(a0)
0000558C                            
0000558C                            Obj80_Display2:
0000558C 4EF9 0000 0000             		jmp	DisplaySprite
00005592                            ; ===========================================================================
00005592                            
00005592                            Obj80_Delete:				; XREF: Obj80_ChkType
00005592 4EF9 0000 0000             		jmp	DeleteObject
00005598                            ; ===========================================================================
00005598                            
00005598                            ; ---------------------------------------------------------------------------
00005598                            ; Object 81 - Sonic on the continue screen
00005598                            ; ---------------------------------------------------------------------------
00005598                            
00005598                            Obj81:					; XREF: Obj_Index
00005598 7000                       		moveq	#0,d0
0000559A 1028 0024                  		move.b	$24(a0),d0
0000559E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055A2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055A6 4EF9 0000 0000             		jmp	DisplaySprite
000055AC                            ; ===========================================================================
000055AC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055AE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055B0 0000                       		dc.w Obj81_Animate-Obj81_Index
000055B2 0000                       		dc.w Obj81_Run-Obj81_Index
000055B4                            ; ===========================================================================
000055B4                            
000055B4                            Obj81_Main:				; XREF: Obj81_Index
000055B4 5428 0024                  		addq.b	#2,$24(a0)
000055B8 317C 00A0 0008             		move.w	#$A0,8(a0)
000055BE 317C 00C0 000C             		move.w	#$C0,$C(a0)
000055C4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055CC 317C 0780 0002             		move.w	#$780,2(a0)
000055D2 117C 0004 0001             		move.b	#4,1(a0)
000055D8 117C 0002 0018             		move.b	#2,$18(a0)
000055DE 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000055E4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000055EA                            
000055EA                            Obj81_ChkLand:				; XREF: Obj81_Index
000055EA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000055F0 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000055F2 5428 0024                  		addq.b	#2,$24(a0)
000055F6 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000055FA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005602 317C 8500 0002             		move.w	#$8500,2(a0)
00005608 117C 0000 001C             		move.b	#0,$1C(a0)
0000560E 6000                       		bra.s	Obj81_Animate
00005610                            ; ===========================================================================
00005610                            
00005610                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005610 4EB9 0000 0000             		jsr	SpeedToPos
00005616 4EB9 0000 0000             		jsr	Sonic_Animate
0000561C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005622                            ; ===========================================================================
00005622                            
00005622                            Obj81_Animate:				; XREF: Obj81_Index
00005622 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005626 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005628 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000562E 4EF9 0000 0000             		jmp	AnimateSprite
00005634                            ; ===========================================================================
00005634                            
00005634                            Obj81_GetUp:				; XREF: Obj81_Animate
00005634 5428 0024                  		addq.b	#2,$24(a0)
00005638 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005640 317C 0780 0002             		move.w	#$780,2(a0)
00005646 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000564C 4268 0014                  		clr.w	$14(a0)
00005650 5168 000C                  		subq.w	#8,$C(a0)
00005654 103C 00E0                  		move.b	#$E0,d0
00005658 6100 BF78                  		bsr.w	PlaySound_Special ; fade out music
0000565C                            
0000565C                            Obj81_Run:				; XREF: Obj81_Index
0000565C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005662 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005664 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000566A 6000                       		bra.s	Obj81_ShowRun
0000566C                            ; ===========================================================================
0000566C                            
0000566C                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000566C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005672                            
00005672                            Obj81_ShowRun:				; XREF: Obj81_Run
00005672 4EB9 0000 0000             		jsr	SpeedToPos
00005678 4EB9 0000 0000             		jsr	Sonic_Animate
0000567E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005684                            ; ===========================================================================
00005684                            Ani_obj81:
00005684                            	include "_anim\obj81.asm"
00005684                            ; ---------------------------------------------------------------------------
00005684                            ; Animation script - Sonic on the continue screen
00005684                            ; ---------------------------------------------------------------------------
00005684 0000                       		dc.w byte_504A-Ani_obj81
00005686 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005692 00                         		even
00005692 00                         		even
00005692                            
00005692                            ; ---------------------------------------------------------------------------
00005692                            ; Sprite mappings - Continue screen
00005692                            ; ---------------------------------------------------------------------------
00005692                            Map_obj80:
00005692                            	include "_maps\obj80.asm"
00005692                            ; ---------------------------------------------------------------------------
00005692                            ; Sprite mappings - Continue screen
00005692                            ; ---------------------------------------------------------------------------
00005692 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005696 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000569A 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000569E 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056A2 0B                         byte_5066:	dc.b $B
000056A3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056A8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056AD F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056B2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056B7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056BC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000056C1 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000056C6 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000056CB 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000056D0 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000056D5 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000056DA 03                         byte_509E:	dc.b 3
000056DB 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000056E0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056E5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056EA 03                         byte_50AE:	dc.b 3
000056EB 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000056F0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056F5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056FA 03                         byte_50BE:	dc.b 3
000056FB 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005700 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005705 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000570A 02                         byte_50CE:	dc.b 2
0000570B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005710 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005715 01                         byte_50D9:	dc.b 1
00005716 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000571B 01                         byte_50DF:	dc.b 1
0000571C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005722 00                         		even
00005722 00                         		even
00005722                            
00005722                            ; ===========================================================================
00005722                            ; ---------------------------------------------------------------------------
00005722                            ; Ending sequence in Green Hill	Zone
00005722                            ; ---------------------------------------------------------------------------
00005722                            
00005722                            EndingSequence:				; XREF: GameModeArray
00005722 103C 00E4                  		move.b	#$E4,d0
00005726 6100 BEAA                  		bsr.w	PlaySound_Special ; stop music
0000572A 6100 C928                  		bsr.w	Pal_FadeFrom
0000572E 43F8 D000                  		lea	($FFFFD000).w,a1
00005732 7000                       		moveq	#0,d0
00005734 323C 07FF                  		move.w	#$7FF,d1
00005738                            
00005738                            End_ClrObjRam:
00005738 22C0                       		move.l	d0,(a1)+
0000573A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000573E                            
0000573E 43F8 F628                  		lea	($FFFFF628).w,a1
00005742 7000                       		moveq	#0,d0
00005744 323C 0015                  		move.w	#$15,d1
00005748                            
00005748                            End_ClrRam:
00005748 22C0                       		move.l	d0,(a1)+
0000574A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000574E                            
0000574E 43F8 F700                  		lea	($FFFFF700).w,a1
00005752 7000                       		moveq	#0,d0
00005754 323C 003F                  		move.w	#$3F,d1
00005758                            
00005758                            End_ClrRam2:
00005758 22C0                       		move.l	d0,(a1)+
0000575A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000575E                            
0000575E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005762 7000                       		moveq	#0,d0
00005764 323C 0047                  		move.w	#$47,d1
00005768                            
00005768                            End_ClrRam3:
00005768 22C0                       		move.l	d0,(a1)+
0000576A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000576E                            
0000576E 46FC 2700                  		move	#$2700,sr
00005772 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005776 0200 00BF                  		andi.b	#$BF,d0
0000577A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005780 6100 BD78                  		bsr.w	ClearScreen
00005784 4DF9 00C0 0004             		lea	($C00004).l,a6
0000578A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000578E 3CBC 8230                  		move.w	#$8230,(a6)
00005792 3CBC 8407                  		move.w	#$8407,(a6)
00005796 3CBC 857C                  		move.w	#$857C,(a6)
0000579A 3CBC 9001                  		move.w	#$9001,(a6)
0000579E 3CBC 8004                  		move.w	#$8004,(a6)
000057A2 3CBC 8720                  		move.w	#$8720,(a6)
000057A6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057AC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057B0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057B6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057BC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057C2 6700                       		beq.s	End_LoadData	; if yes, branch
000057C4 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000057CA                            
000057CA                            End_LoadData:
000057CA 701C                       		moveq	#$1C,d0
000057CC 6100 C154                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000057D0 4EB9 0000 0000             		jsr	Hud_Base
000057D6 6100 0000                  		bsr.w	LevelSizeLoad
000057DA 6100 0000                  		bsr.w	DeformBgLayer
000057DE 08F8 0002 F754             		bset	#2,($FFFFF754).w
000057E4 6100 0000                  		bsr.w	MainLoadBlockLoad
000057E8 6100 0000                  		bsr.w	LoadTilesFromStart
000057EC 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000057F4 46FC 2300                  		move	#$2300,sr
000057F8 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000057FE 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005802 6100 C2CE                  		bsr.w	KosDec
00005806 7003                       		moveq	#3,d0
00005808 6100 CAF4                  		bsr.w	PalLoad1	; load Sonic's pallet
0000580C 303C 008B                  		move.w	#$8B,d0
00005810 6100 BDBA                  		bsr.w	PlaySound	; play ending sequence music
00005814 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000581A 6700                       		beq.s	End_LoadSonic	; if not, branch
0000581C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005822                            
00005822                            End_LoadSonic:
00005822 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005828 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000582E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005834 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000583A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005840 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005846 4EB9 0000 0000             		jsr	ObjPosLoad
0000584C 4EB9 0000 0000             		jsr	ObjectsLoad
00005852 4EB9 0000 0000             		jsr	BuildSprites
00005858 7000                       		moveq	#0,d0
0000585A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000585E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005862 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005866 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000586A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000586E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005872 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005876 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000587A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000587E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005882 6100 EEE0                  		bsr.w	OscillateNumInit
00005886 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000588C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005892 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005898 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000589E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058A4 6100 D494                  		bsr.w	DelayProgram
000058A8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058AC 0000 0040                  		ori.b	#$40,d0
000058B0 33C0 00C0 0004             		move.w	d0,($C00004).l
000058B6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058BC 6100 C6EC                  		bsr.w	Pal_FadeTo
000058C0                            
000058C0                            ; ---------------------------------------------------------------------------
000058C0                            ; Main ending sequence loop
000058C0                            ; ---------------------------------------------------------------------------
000058C0                            
000058C0                            End_MainLoop:
000058C0 6100 BD1C                  		bsr.w	PauseGame
000058C4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058CA 6100 D46E                  		bsr.w	DelayProgram
000058CE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058D2 6100 0000                  		bsr.w	End_MoveSonic
000058D6 4EB9 0000 0000             		jsr	ObjectsLoad
000058DC 6100 0000                  		bsr.w	DeformBgLayer
000058E0 4EB9 0000 0000             		jsr	BuildSprites
000058E6 4EB9 0000 0000             		jsr	ObjPosLoad
000058EC 6100 C284                  		bsr.w	PalCycle_Load
000058F0 6100 EEC8                  		bsr.w	OscillateNumDo
000058F4 6100 EF54                  		bsr.w	ChangeRingFrame
000058F8 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000058FE 6700                       		beq.s	loc_52DA	; if yes, branch
00005900 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005906 103C 0091                  		move.b	#$91,d0
0000590A 6100 BCC6                  		bsr.w	PlaySound_Special ; play credits music
0000590E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005914 4E75                       		rts	
00005916                            ; ===========================================================================
00005916                            
00005916                            loc_52DA:
00005916 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000591A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000591E                            
0000591E 4278 FE02                  		clr.w	($FFFFFE02).w
00005922 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005928 4278 F794                  		clr.w	($FFFFF794).w
0000592C                            
0000592C                            End_AllEmlds:				; XREF: loc_5334
0000592C 6100 BCB0                  		bsr.w	PauseGame
00005930 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005936 6100 D402                  		bsr.w	DelayProgram
0000593A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000593E 6100 0000                  		bsr.w	End_MoveSonic
00005942 4EB9 0000 0000             		jsr	ObjectsLoad
00005948 6100 0000                  		bsr.w	DeformBgLayer
0000594C 4EB9 0000 0000             		jsr	BuildSprites
00005952 4EB9 0000 0000             		jsr	ObjPosLoad
00005958 6100 EE60                  		bsr.w	OscillateNumDo
0000595C 6100 EEEC                  		bsr.w	ChangeRingFrame
00005960 5378 F794                  		subq.w	#1,($FFFFF794).w
00005964 6A00                       		bpl.s	loc_5334
00005966 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000596C 6100 C830                  		bsr.w	Pal_ToWhite
00005970                            
00005970                            loc_5334:
00005970 4A78 FE02                  		tst.w	($FFFFFE02).w
00005974 6700 FFB6                  		beq.w	End_AllEmlds
00005978 4278 FE02                  		clr.w	($FFFFFE02).w
0000597C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005982 4BF9 00C0 0004             		lea	($C00004).l,a5
00005988 4DF9 00C0 0000             		lea	($C00000).l,a6
0000598E 47F8 F700                  		lea	($FFFFF700).w,a3
00005992 49F8 A400                  		lea	($FFFFA400).w,a4
00005996 343C 4000                  		move.w	#$4000,d2
0000599A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000599E 7013                       		moveq	#$13,d0
000059A0 6100 C95C                  		bsr.w	PalLoad1	; load ending pallet
000059A4 6100 C72C                  		bsr.w	Pal_MakeWhite
000059A8 6000 FF16                  		bra.w	End_MainLoop
000059AC                            
000059AC                            ; ---------------------------------------------------------------------------
000059AC                            ; Subroutine controlling Sonic on the ending sequence
000059AC                            ; ---------------------------------------------------------------------------
000059AC                            
000059AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059AC                            
000059AC                            
000059AC                            End_MoveSonic:				; XREF: End_MainLoop
000059AC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059B0 6600                       		bne.s	End_MoveSonic2
000059B2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059B8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059BA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059BE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000059C4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000059CA 4E75                       		rts	
000059CC                            ; ===========================================================================
000059CC                            
000059CC                            End_MoveSonic2:				; XREF: End_MoveSonic
000059CC 5500                       		subq.b	#2,d0
000059CE 6600                       		bne.s	End_MoveSonic3
000059D0 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000059D6 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000059D8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059DC 7000                       		moveq	#0,d0
000059DE 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000059E2 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000059E6 31C0 D014                  		move.w	d0,($FFFFD014).w
000059EA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000059F0 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000059F6 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000059FC 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A02 4E75                       		rts	
00005A04                            ; ===========================================================================
00005A04                            
00005A04                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A04 5500                       		subq.b	#2,d0
00005A06 6600                       		bne.s	End_MoveSonExit
00005A08 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A0C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A12 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A18 4278 D024                  		clr.w	($FFFFD024).w
00005A1C                            
00005A1C                            End_MoveSonExit:
00005A1C 4E75                       		rts	
00005A1E                            ; End of function End_MoveSonic
00005A1E                            
00005A1E                            ; ===========================================================================
00005A1E                            ; ---------------------------------------------------------------------------
00005A1E                            ; Object 87 - Sonic on ending sequence
00005A1E                            ; ---------------------------------------------------------------------------
00005A1E                            
00005A1E                            Obj87:					; XREF: Obj_Index
00005A1E 7000                       		moveq	#0,d0
00005A20 1028 0025                  		move.b	$25(a0),d0
00005A24 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A28 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A2C 4EF9 0000 0000             		jmp	DisplaySprite
00005A32                            ; ===========================================================================
00005A32 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A36 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A3A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A3E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A42 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A46                            ; ===========================================================================
00005A46                            
00005A46                            Obj87_Main:				; XREF: Obj87_Index
00005A46 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A4C 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A4E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A54 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A5A 4E75                       		rts	
00005A5C                            ; ===========================================================================
00005A5C                            
00005A5C                            Obj87_Main2:				; XREF: Obj87_Main
00005A5C 5428 0025                  		addq.b	#2,$25(a0)
00005A60 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A68 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A6E 117C 0004 0001             		move.b	#4,1(a0)
00005A74 4228 0022                  		clr.b	$22(a0)
00005A78 117C 0002 0018             		move.b	#2,$18(a0)
00005A7E 117C 0000 001A             		move.b	#0,$1A(a0)
00005A84 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A8A                            
00005A8A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A8A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A8E 6600                       		bne.s	Obj87_Wait
00005A90 5428 0025                  		addq.b	#2,$25(a0)
00005A94 317C 0001 001C             		move.w	#1,$1C(a0)
00005A9A 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AA0                            
00005AA0                            Obj87_Wait:
00005AA0 4E75                       		rts	
00005AA2                            ; ===========================================================================
00005AA2                            
00005AA2                            Obj87_LookUp:				; XREF: Obj87_Index
00005AA2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AAA 6600                       		bne.s	locret_5480
00005AAC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005AB2 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AB8 5428 0025                  		addq.b	#2,$25(a0)
00005ABC                            
00005ABC                            locret_5480:
00005ABC 4E75                       		rts	
00005ABE                            ; ===========================================================================
00005ABE                            
00005ABE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005ABE 5368 0030                  		subq.w	#1,$30(a0)
00005AC2 6600                       		bne.s	Obj87_Wait2
00005AC4 43F8 D400                  		lea	($FFFFD400).w,a1
00005AC8 323C 00FF                  		move.w	#$FF,d1
00005ACC                            
00005ACC                            Obj87_ClrLoop:
00005ACC 4299                       		clr.l	(a1)+
00005ACE 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005AD2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005AD8 5428 0025                  		addq.b	#2,$25(a0)
00005ADC 117C 0001 001C             		move.b	#1,$1C(a0)
00005AE2 317C 003C 0030             		move.w	#$3C,$30(a0)
00005AE8                            
00005AE8                            Obj87_Wait2:
00005AE8 4E75                       		rts	
00005AEA                            ; ===========================================================================
00005AEA                            
00005AEA                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005AEA 5368 0030                  		subq.w	#1,$30(a0)
00005AEE 6600                       		bne.s	Obj87_Wait3
00005AF0 5428 0025                  		addq.b	#2,$25(a0)
00005AF4 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005AFA 117C 0002 001C             		move.b	#2,$1C(a0)
00005B00 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B06                            
00005B06                            Obj87_Wait3:
00005B06 4E75                       		rts	
00005B08                            ; ===========================================================================
00005B08                            
00005B08                            Obj87_Animate:				; XREF: Obj87_Index
00005B08 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B0E 4EF9 0000 0000             		jmp	AnimateSprite
00005B14                            ; ===========================================================================
00005B14                            
00005B14                            Obj87_Leap:				; XREF: Obj87_Index
00005B14 5368 0030                  		subq.w	#1,$30(a0)
00005B18 6600                       		bne.s	Obj87_Wait4
00005B1A 5428 0025                  		addq.b	#2,$25(a0)
00005B1E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B26 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B2C 117C 0004 0001             		move.b	#4,1(a0)
00005B32 4228 0022                  		clr.b	$22(a0)
00005B36 117C 0002 0018             		move.b	#2,$18(a0)
00005B3C 117C 0005 001A             		move.b	#5,$1A(a0)
00005B42 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B48 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B4E 60B8                       		bra.s	Obj87_Animate
00005B50                            ; ===========================================================================
00005B50                            
00005B50                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B50 4E75                       		rts	
00005B52                            ; ===========================================================================
00005B52                            Ani_obj87:
00005B52                            	include "_anim\obj87.asm"
00005B52                            ; ---------------------------------------------------------------------------
00005B52                            ; Animation script - Sonic on the ending sequence
00005B52                            ; ---------------------------------------------------------------------------
00005B52 0000                       		dc.w byte_551C-Ani_obj87
00005B54 0000                       		dc.w byte_552A-Ani_obj87
00005B56 0000                       		dc.w byte_5534-Ani_obj87
00005B58 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005B66 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005B70 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005B78                            		even
00005B78                            		even
00005B78                            
00005B78                            ; ===========================================================================
00005B78                            ; ---------------------------------------------------------------------------
00005B78                            ; Object 88 - chaos emeralds on	the ending sequence
00005B78                            ; ---------------------------------------------------------------------------
00005B78                            
00005B78                            Obj88:					; XREF: Obj_Index
00005B78 7000                       		moveq	#0,d0
00005B7A 1028 0024                  		move.b	$24(a0),d0
00005B7E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B82 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B86 4EF9 0000 0000             		jmp	DisplaySprite
00005B8C                            ; ===========================================================================
00005B8C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B8E 0000                       		dc.w Obj88_Move-Obj88_Index
00005B90                            ; ===========================================================================
00005B90                            
00005B90                            Obj88_Main:				; XREF: Obj88_Index
00005B90 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005B96 6700                       		beq.s	Obj88_Main2
00005B98 588F                       		addq.l	#4,sp
00005B9A 4E75                       		rts	
00005B9C                            ; ===========================================================================
00005B9C                            
00005B9C                            Obj88_Main2:				; XREF: Obj88_Main
00005B9C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BA2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BA8 2248                       		movea.l	a0,a1
00005BAA 7600                       		moveq	#0,d3
00005BAC 7401                       		moveq	#1,d2
00005BAE 7205                       		moveq	#5,d1
00005BB0                            
00005BB0                            Obj88_MainLoop:
00005BB0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BB4 5429 0024                  		addq.b	#2,$24(a1)
00005BB8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005BC0 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005BC6 137C 0004 0001             		move.b	#4,1(a1)
00005BCC 137C 0001 0018             		move.b	#1,$18(a1)
00005BD2 3368 0008 0038             		move.w	8(a0),$38(a1)
00005BD8 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005BDE 1342 001C                  		move.b	d2,$1C(a1)
00005BE2 1342 001A                  		move.b	d2,$1A(a1)
00005BE6 5202                       		addq.b	#1,d2
00005BE8 1343 0026                  		move.b	d3,$26(a1)
00005BEC 0603 002A                  		addi.b	#$2A,d3
00005BF0 43E9 0040                  		lea	$40(a1),a1
00005BF4 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005BF8                            
00005BF8                            Obj88_Move:				; XREF: Obj88_Index
00005BF8 3028 003E                  		move.w	$3E(a0),d0
00005BFC D168 0026                  		add.w	d0,$26(a0)
00005C00 1028 0026                  		move.b	$26(a0),d0
00005C04 4EB9 0000 2D6C             		jsr	(CalcSine).l
00005C0A 7800                       		moveq	#0,d4
00005C0C 1828 003C                  		move.b	$3C(a0),d4
00005C10 C3C4                       		muls.w	d4,d1
00005C12 E081                       		asr.l	#8,d1
00005C14 C1C4                       		muls.w	d4,d0
00005C16 E080                       		asr.l	#8,d0
00005C18 D268 0038                  		add.w	$38(a0),d1
00005C1C D068 003A                  		add.w	$3A(a0),d0
00005C20 3141 0008                  		move.w	d1,8(a0)
00005C24 3140 000C                  		move.w	d0,$C(a0)
00005C28 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C2E 6700                       		beq.s	loc_55FA
00005C30 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C36                            
00005C36                            loc_55FA:
00005C36 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C3C 6700                       		beq.s	loc_5608
00005C3E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C44                            
00005C44                            loc_5608:
00005C44 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C4A 6700                       		beq.s	locret_5614
00005C4C 5368 003A                  		subq.w	#1,$3A(a0)
00005C50                            
00005C50                            locret_5614:
00005C50 4E75                       		rts	
00005C52                            ; ===========================================================================
00005C52                            ; ---------------------------------------------------------------------------
00005C52                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C52                            ; ---------------------------------------------------------------------------
00005C52                            
00005C52                            Obj89:					; XREF: Obj_Index
00005C52 7000                       		moveq	#0,d0
00005C54 1028 0024                  		move.b	$24(a0),d0
00005C58 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C5C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005C60                            ; ===========================================================================
00005C60 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005C62 0000                       		dc.w Obj89_Move-Obj89_Index
00005C64 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005C66                            ; ===========================================================================
00005C66                            
00005C66                            Obj89_Main:				; XREF: Obj89_Index
00005C66 5428 0024                  		addq.b	#2,$24(a0)
00005C6A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005C70 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005C76 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C7E 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C84 117C 0000 0001             		move.b	#0,1(a0)
00005C8A 117C 0000 0018             		move.b	#0,$18(a0)
00005C90                            
00005C90                            Obj89_Move:				; XREF: Obj89_Index
00005C90 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005C96 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005C98 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005C9E 4EB9 0000 0000             		jsr	DisplaySprite
00005CA4                            ; ===========================================================================
00005CA4                            
00005CA4                            Obj89_Delay:				; XREF: Obj89_Move
00005CA4 5428 0024                  		addq.b	#2,$24(a0)
00005CA8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CAE                            
00005CAE                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CAE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CB2 6A00                       		bpl.s	Obj89_Display
00005CB4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CBA                            
00005CBA                            Obj89_Display:
00005CBA 4EB9 0000 0000             		jsr	DisplaySprite
00005CC0                            ; ===========================================================================
00005CC0                            ; ---------------------------------------------------------------------------
00005CC0                            ; Sprite mappings - Sonic on the ending	sequence
00005CC0                            ; ---------------------------------------------------------------------------
00005CC0                            Map_obj87:
00005CC0                            	include "_maps\obj87.asm"
00005CC0                            ; ---------------------------------------------------------------------------
00005CC0                            ; Sprite mappings - Sonic on the ending	sequence
00005CC0                            ; ---------------------------------------------------------------------------
00005CC0 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005CC4 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005CC8 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005CCC 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005CD0 02                         byte_5690:	dc.b 2
00005CD1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005CD6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CDB 03                         byte_569B:	dc.b 3
00005CDC FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005CE1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005CE6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CEB 02                         byte_56AB:	dc.b 2
00005CEC EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005CF1 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005CF6 02                         byte_56B6:	dc.b 2
00005CF7 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005CFC FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D01 02                         byte_56C1:	dc.b 2
00005D02 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D07 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D0C 03                         byte_56CC:	dc.b 3
00005D0D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D12 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D17 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D1C 07                         byte_56DC:	dc.b 7
00005D1D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D22 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D27 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D2C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D31 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D36 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D3B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D40 18                         byte_5700:	dc.b $18
00005D41 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D46 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D4B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D50 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D55 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D5A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D5F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005D64 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005D69 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005D6E B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005D73 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005D78 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D7D C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D82 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D87 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D8C D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D91 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005D96 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005D9B E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DA0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DA5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DAA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DAF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DB4 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DBA 00                         		even
00005DBA 00                         		even
00005DBA                            
00005DBA                            ; ---------------------------------------------------------------------------
00005DBA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DBA                            ; ---------------------------------------------------------------------------
00005DBA                            Map_obj88:
00005DBA                            	include "_maps\obj88.asm"
00005DBA                            ; ---------------------------------------------------------------------------
00005DBA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DBA                            ; ---------------------------------------------------------------------------
00005DBA 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DBE 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005DC2 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005DC6 0000                       		dc.w byte_57AC-Map_obj88
00005DC8 01                         byte_5788:	dc.b 1
00005DC9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005DCE 01                         byte_578E:	dc.b 1
00005DCF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005DD4 01                         byte_5794:	dc.b 1
00005DD5 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005DDA 01                         byte_579A:	dc.b 1
00005DDB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005DE0 01                         byte_57A0:	dc.b 1
00005DE1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005DE6 01                         byte_57A6:	dc.b 1
00005DE7 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005DEC 01                         byte_57AC:	dc.b 1
00005DED F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005DF2                            		even
00005DF2                            		even
00005DF2                            
00005DF2                            ; ---------------------------------------------------------------------------
00005DF2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DF2                            ; ---------------------------------------------------------------------------
00005DF2                            Map_obj89:
00005DF2                            	include "_maps\obj89.asm"
00005DF2                            ; ---------------------------------------------------------------------------
00005DF2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DF2                            ; ---------------------------------------------------------------------------
00005DF2 0000                       		dc.w byte_57B4-Map_obj89
00005DF4 03                         byte_57B4:	dc.b 3
00005DF5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005DFA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005DFF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E04                            		even
00005E04                            		even
00005E04                            
00005E04                            ; ===========================================================================
00005E04                            ; ---------------------------------------------------------------------------
00005E04                            ; Credits ending sequence
00005E04                            ; ---------------------------------------------------------------------------
00005E04                            
00005E04                            Credits:				; XREF: GameModeArray
00005E04 6100 BA0E                  		bsr.w	ClearPLC
00005E08 6100 C24A                  		bsr.w	Pal_FadeFrom
00005E0C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E12 3CBC 8004                  		move.w	#$8004,(a6)
00005E16 3CBC 8230                  		move.w	#$8230,(a6)
00005E1A 3CBC 8407                  		move.w	#$8407,(a6)
00005E1E 3CBC 9001                  		move.w	#$9001,(a6)
00005E22 3CBC 9200                  		move.w	#$9200,(a6)
00005E26 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E2A 3CBC 8720                  		move.w	#$8720,(a6)
00005E2E 4238 F64E                  		clr.b	($FFFFF64E).w
00005E32 6100 B6C6                  		bsr.w	ClearScreen
00005E36 43F8 D000                  		lea	($FFFFD000).w,a1
00005E3A 7000                       		moveq	#0,d0
00005E3C 323C 07FF                  		move.w	#$7FF,d1
00005E40                            
00005E40                            Cred_ClrObjRam:
00005E40 22C0                       		move.l	d0,(a1)+
00005E42 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E46                            
00005E46 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E50 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E56 6100 B81E                  		bsr.w	NemDec
00005E5A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E5E 7000                       		moveq	#0,d0
00005E60 323C 001F                  		move.w	#$1F,d1
00005E64                            
00005E64                            Cred_ClrPallet:
00005E64 22C0                       		move.l	d0,(a1)+
00005E66 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005E6A                            
00005E6A 7003                       		moveq	#3,d0
00005E6C 6100 C490                  		bsr.w	PalLoad1	; load Sonic's pallet
00005E70 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005E76 4EB9 0000 0000             		jsr	ObjectsLoad
00005E7C 4EB9 0000 0000             		jsr	BuildSprites
00005E82 6100 0000                  		bsr.w	EndingDemoLoad
00005E86 7000                       		moveq	#0,d0
00005E88 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E8C E948                       		lsl.w	#4,d0
00005E8E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005E94 45F2 0000                  		lea	(a2,d0.w),a2
00005E98 7000                       		moveq	#0,d0
00005E9A 1012                       		move.b	(a2),d0
00005E9C 6700                       		beq.s	loc_5862
00005E9E 6100 B916                  		bsr.w	LoadPLC		; load level patterns
00005EA2                            
00005EA2                            loc_5862:
00005EA2 7001                       		moveq	#1,d0
00005EA4 6100 B910                  		bsr.w	LoadPLC		; load standard	level patterns
00005EA8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EAE 6100 C0FA                  		bsr.w	Pal_FadeTo
00005EB2                            
00005EB2                            Cred_WaitLoop:
00005EB2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EB8 6100 CE80                  		bsr.w	DelayProgram
00005EBC 6100 B964                  		bsr.w	RunPLC_RAM
00005EC0 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005EC4 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005EC6 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ECA 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005ECC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005ED2 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005ED6 4E75                       		rts	
00005ED8                            
00005ED8                            ; ---------------------------------------------------------------------------
00005ED8                            ; Ending sequence demo loading subroutine
00005ED8                            ; ---------------------------------------------------------------------------
00005ED8                            
00005ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005ED8                            
00005ED8                            
00005ED8                            EndingDemoLoad:				; XREF: Credits
00005ED8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005EDC 0240 000F                  		andi.w	#$F,d0
00005EE0 D040                       		add.w	d0,d0
00005EE2 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005EE6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005EEA 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005EEE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005EF4 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005EF6 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005EFC 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F02 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F08 7000                       		moveq	#0,d0
00005F0A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F0E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F12 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F16 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F1A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F20 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F22 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F28 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F2C 303C 0008                  		move.w	#8,d0
00005F30                            
00005F30                            EndDemo_LampLoad:
00005F30 24D9                       		move.l	(a1)+,(a2)+
00005F32 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F36                            
00005F36                            EndDemo_Exit:
00005F36 4E75                       		rts	
00005F38                            ; End of function EndingDemoLoad
00005F38                            
00005F38                            ; ===========================================================================
00005F38                            ; ---------------------------------------------------------------------------
00005F38                            ; Levels used in the end sequence demos
00005F38                            ; ---------------------------------------------------------------------------
00005F38                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F48                            
00005F48                            ; ---------------------------------------------------------------------------
00005F48                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F48                            ; ---------------------------------------------------------------------------
00005F48                            EndDemo_LampVar:
00005F48 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F4A 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F50 0000 0000                  		dc.l 0
00005F54 0000                       		dc.b 0,	0
00005F56 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005F6A 0101                       		dc.b 1,	1
00005F6C                            ; ===========================================================================
00005F6C                            ; ---------------------------------------------------------------------------
00005F6C                            ; "TRY AGAIN" and "END"	screens
00005F6C                            ; ---------------------------------------------------------------------------
00005F6C                            
00005F6C                            TryAgainEnd:				; XREF: Credits
00005F6C 6100 B8A6                  		bsr.w	ClearPLC
00005F70 6100 C0E2                  		bsr.w	Pal_FadeFrom
00005F74 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F7A 3CBC 8004                  		move.w	#$8004,(a6)
00005F7E 3CBC 8230                  		move.w	#$8230,(a6)
00005F82 3CBC 8407                  		move.w	#$8407,(a6)
00005F86 3CBC 9001                  		move.w	#$9001,(a6)
00005F8A 3CBC 9200                  		move.w	#$9200,(a6)
00005F8E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F92 3CBC 8720                  		move.w	#$8720,(a6)
00005F96 4238 F64E                  		clr.b	($FFFFF64E).w
00005F9A 6100 B55E                  		bsr.w	ClearScreen
00005F9E 43F8 D000                  		lea	($FFFFD000).w,a1
00005FA2 7000                       		moveq	#0,d0
00005FA4 323C 07FF                  		move.w	#$7FF,d1
00005FA8                            
00005FA8                            TryAg_ClrObjRam:
00005FA8 22C0                       		move.l	d0,(a1)+
00005FAA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FAE                            
00005FAE 701D                       		moveq	#$1D,d0
00005FB0 6100 B970                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FB4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FB8 7000                       		moveq	#0,d0
00005FBA 323C 001F                  		move.w	#$1F,d1
00005FBE                            
00005FBE                            TryAg_ClrPallet:
00005FBE 22C0                       		move.l	d0,(a1)+
00005FC0 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005FC4                            
00005FC4 7013                       		moveq	#$13,d0
00005FC6 6100 C336                  		bsr.w	PalLoad1	; load ending pallet
00005FCA 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005FCE 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005FD4 4EB9 0000 0000             		jsr	ObjectsLoad
00005FDA 4EB9 0000 0000             		jsr	BuildSprites
00005FE0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005FE6 6100 BFC2                  		bsr.w	Pal_FadeTo
00005FEA                            
00005FEA                            ; ---------------------------------------------------------------------------
00005FEA                            ; "TRY AGAIN" and "END"	screen main loop
00005FEA                            ; ---------------------------------------------------------------------------
00005FEA                            TryAg_MainLoop:
00005FEA 6100 B5F2                  		bsr.w	PauseGame
00005FEE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005FF4 6100 CD44                  		bsr.w	DelayProgram
00005FF8 4EB9 0000 0000             		jsr	ObjectsLoad
00005FFE 4EB9 0000 0000             		jsr	BuildSprites
00006004 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000600A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000600C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006010 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006012 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006018 67D0                       		beq.s	TryAg_MainLoop
0000601A                            
0000601A                            TryAg_Exit:
0000601A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006020 4E75                       		rts	
00006022                            
00006022                            ; ===========================================================================
00006022                            ; ---------------------------------------------------------------------------
00006022                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006022                            ; ---------------------------------------------------------------------------
00006022                            
00006022                            Obj8B:					; XREF: Obj_Index
00006022 7000                       		moveq	#0,d0
00006024 1028 0024                  		move.b	$24(a0),d0
00006028 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000602C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006030 4EF9 0000 0000             		jmp	DisplaySprite
00006036                            ; ===========================================================================
00006036 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006038 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000603A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000603C 0000                       		dc.w loc_5A8E-Obj8B_Index
0000603E                            ; ===========================================================================
0000603E                            
0000603E                            Obj8B_Main:				; XREF: Obj8B_Index
0000603E 5428 0024                  		addq.b	#2,$24(a0)
00006042 317C 0120 0008             		move.w	#$120,8(a0)
00006048 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000604E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006056 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000605C 117C 0000 0001             		move.b	#0,1(a0)
00006062 117C 0002 0018             		move.b	#2,$18(a0)
00006068 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000606E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006074 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006076 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000607C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006082 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006088 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000608E                            
0000608E                            Obj8B_Animate:				; XREF: Obj8B_Index
0000608E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00006094 4EF9 0000 0000             		jmp	AnimateSprite
0000609A                            ; ===========================================================================
0000609A                            
0000609A                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000609A 5428 0024                  		addq.b	#2,$24(a0)
0000609E 7002                       		moveq	#2,d0
000060A0 0828 0000 001C             		btst	#0,$1C(a0)
000060A6 6700                       		beq.s	loc_5A6A
000060A8 4440                       		neg.w	d0
000060AA                            
000060AA                            loc_5A6A:
000060AA 43F8 D800                  		lea	($FFFFD800).w,a1
000060AE 7205                       		moveq	#5,d1
000060B0                            
000060B0                            loc_5A70:
000060B0 1340 003E                  		move.b	d0,$3E(a1)
000060B4 3400                       		move.w	d0,d2
000060B6 E742                       		asl.w	#3,d2
000060B8 D529 0026                  		add.b	d2,$26(a1)
000060BC 43E9 0040                  		lea	$40(a1),a1
000060C0 51C9 FFEE                  		dbf	d1,loc_5A70
000060C4 5228 001A                  		addq.b	#1,$1A(a0)
000060C8 317C 0070 0030             		move.w	#112,$30(a0)
000060CE                            
000060CE                            loc_5A8E:				; XREF: Obj8B_Index
000060CE 5368 0030                  		subq.w	#1,$30(a0)
000060D2 6A00                       		bpl.s	locret_5AA0
000060D4 0868 0000 001C             		bchg	#0,$1C(a0)
000060DA 117C 0002 0024             		move.b	#2,$24(a0)
000060E0                            
000060E0                            locret_5AA0:
000060E0 4E75                       		rts	
000060E2                            ; ===========================================================================
000060E2                            Ani_obj8B:
000060E2                            	include "_anim\obj8B.asm"
000060E2                            ; ---------------------------------------------------------------------------
000060E2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000060E2                            ; ---------------------------------------------------------------------------
000060E2 0000                       		dc.w byte_5AA8-Ani_obj8B
000060E4 0000                       		dc.w byte_5AAC-Ani_obj8B
000060E6 0000                       		dc.w byte_5AB0-Ani_obj8B
000060E8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000060EC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000060F0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006102                            		even
00006102                            		even
00006102                            
00006102                            ; ===========================================================================
00006102                            ; ---------------------------------------------------------------------------
00006102                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006102                            ; ---------------------------------------------------------------------------
00006102                            
00006102                            Obj8C:					; XREF: Obj_Index
00006102 7000                       		moveq	#0,d0
00006104 1028 0024                  		move.b	$24(a0),d0
00006108 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000610C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006110 4EF9 0000 0000             		jmp	DisplaySprite
00006116                            ; ===========================================================================
00006116 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006118 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000611A                            ; ===========================================================================
0000611A                            
0000611A                            Obj8C_Main:				; XREF: Obj8C_Index
0000611A 2248                       		movea.l	a0,a1
0000611C 7400                       		moveq	#0,d2
0000611E 7600                       		moveq	#0,d3
00006120 7205                       		moveq	#5,d1
00006122 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006126                            
00006126                            Obj8C_MakeEms:				; XREF: loc_5B42
00006126 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000612A 5429 0024                  		addq.b	#2,$24(a1)
0000612E 237C 0000 5DBA 0004        		move.l	#Map_obj88,4(a1)
00006136 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000613C 137C 0000 0001             		move.b	#0,1(a1)
00006142 137C 0001 0018             		move.b	#1,$18(a1)
00006148 337C 0104 0008             		move.w	#$104,8(a1)
0000614E 337C 0120 0038             		move.w	#$120,$38(a1)
00006154 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000615A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006160 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006166 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000616A                            
0000616A                            Obj8C_ChkEms:
0000616A 7000                       		moveq	#0,d0
0000616C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006170 5340                       		subq.w	#1,d0
00006172 6500                       		bcs.s	loc_5B42
00006174                            
00006174                            Obj8C_ChkEmLoop:
00006174 B433 0000                  		cmp.b	(a3,d0.w),d2
00006178 6600                       		bne.s	loc_5B3E
0000617A 5202                       		addq.b	#1,d2
0000617C 60EC                       		bra.s	Obj8C_ChkEms
0000617E                            ; ===========================================================================
0000617E                            
0000617E                            loc_5B3E:
0000617E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006182                            
00006182                            loc_5B42:
00006182 1342 001A                  		move.b	d2,$1A(a1)
00006186 5229 001A                  		addq.b	#1,$1A(a1)
0000618A 5202                       		addq.b	#1,d2
0000618C 137C 0080 0026             		move.b	#$80,$26(a1)
00006192 1343 001E                  		move.b	d3,$1E(a1)
00006196 1343 001F                  		move.b	d3,$1F(a1)
0000619A 0643 000A                  		addi.w	#$A,d3
0000619E 43E9 0040                  		lea	$40(a1),a1
000061A2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061A6                            
000061A6                            Obj8C_Move:				; XREF: Obj8C_Index
000061A6 4A68 003E                  		tst.w	$3E(a0)
000061AA 6700                       		beq.s	locret_5BBA
000061AC 4A28 001E                  		tst.b	$1E(a0)
000061B0 6700                       		beq.s	loc_5B78
000061B2 5328 001E                  		subq.b	#1,$1E(a0)
000061B6 6600                       		bne.s	loc_5B80
000061B8                            
000061B8                            loc_5B78:
000061B8 3028 003E                  		move.w	$3E(a0),d0
000061BC D168 0026                  		add.w	d0,$26(a0)
000061C0                            
000061C0                            loc_5B80:
000061C0 1028 0026                  		move.b	$26(a0),d0
000061C4 6700                       		beq.s	loc_5B8C
000061C6 0C00 0080                  		cmpi.b	#$80,d0
000061CA 6600                       		bne.s	loc_5B96
000061CC                            
000061CC                            loc_5B8C:
000061CC 4268 003E                  		clr.w	$3E(a0)
000061D0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000061D6                            
000061D6                            loc_5B96:
000061D6 4EB9 0000 2D6C             		jsr	(CalcSine).l
000061DC 7800                       		moveq	#0,d4
000061DE 1828 003C                  		move.b	$3C(a0),d4
000061E2 C3C4                       		muls.w	d4,d1
000061E4 E081                       		asr.l	#8,d1
000061E6 C1C4                       		muls.w	d4,d0
000061E8 E080                       		asr.l	#8,d0
000061EA D268 0038                  		add.w	$38(a0),d1
000061EE D068 003A                  		add.w	$3A(a0),d0
000061F2 3141 0008                  		move.w	d1,8(a0)
000061F6 3140 000A                  		move.w	d0,$A(a0)
000061FA                            
000061FA                            locret_5BBA:
000061FA 4E75                       		rts	
000061FC                            ; ===========================================================================
000061FC                            ; ---------------------------------------------------------------------------
000061FC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000061FC                            ; ---------------------------------------------------------------------------
000061FC                            Map_obj8B:
000061FC                            	include "_maps\obj8B.asm"
000061FC                            ; ---------------------------------------------------------------------------
000061FC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000061FC                            ; ---------------------------------------------------------------------------
000061FC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006200 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006204 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006208 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000620C 08                         byte_5BCC:	dc.b 8
0000620D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006212 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006217 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000621C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006221 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006226 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000622B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006230 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006235 08                         byte_5BF5:	dc.b 8
00006236 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000623B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006240 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006245 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000624A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000624F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006254 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006259 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000625E 08                         byte_5C1E:	dc.b 8
0000625F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006264 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006269 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000626E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006273 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006278 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000627D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006282 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006287 08                         byte_5C47:	dc.b 8
00006288 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000628D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006292 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006297 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000629C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062A1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062A6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062AB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062B0 0C                         byte_5C70:	dc.b $C
000062B1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062B6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062BB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000062C0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000062C5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000062CA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000062CF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000062D4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000062D9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000062DE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000062E3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062E8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062ED 0A                         byte_5CAD:	dc.b $A
000062EE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000062F3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000062F8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000062FD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006302 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006307 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000630C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006311 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006316 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000631B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006320 0A                         byte_5CE0:	dc.b $A
00006321 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006326 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000632B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006330 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006335 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000633A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000633F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006344 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006349 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000634E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006353 0C                         byte_5D13:	dc.b $C
00006354 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006359 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000635E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006363 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006368 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000636D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006372 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006377 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000637C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006381 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006386 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000638B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006390                            		even
00006390                            		even
00006390                            
00006390                            ; ---------------------------------------------------------------------------
00006390                            ; Ending sequence demos
00006390                            ; ---------------------------------------------------------------------------
00006390                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063BE                            		even
000063BE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000063FE                            		even
000063FE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000642E                            		even
0000642E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000645E                            		even
0000645E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000647E                            		even
0000647E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000649E                            		even
0000649E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000064CE                            		even
000064CE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000064FE                            		even
000064FE                            
000064FE                            ; ---------------------------------------------------------------------------
000064FE                            ; Subroutine to	load level boundaries and start	locations
000064FE                            ; ---------------------------------------------------------------------------
000064FE                            
000064FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064FE                            
000064FE                            
000064FE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000064FE 7000                       		moveq	#0,d0
00006500 11C0 F740                  		move.b	d0,($FFFFF740).w
00006504 11C0 F741                  		move.b	d0,($FFFFF741).w
00006508 11C0 F746                  		move.b	d0,($FFFFF746).w
0000650C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006510 11C0 F742                  		move.b	d0,($FFFFF742).w
00006514 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006518 ED08                       		lsl.b	#6,d0
0000651A E848                       		lsr.w	#4,d0
0000651C 3200                       		move.w	d0,d1
0000651E D040                       		add.w	d0,d0
00006520 D041                       		add.w	d1,d0
00006522 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006526 3018                       		move.w	(a0)+,d0
00006528 31C0 F730                  		move.w	d0,($FFFFF730).w
0000652C 2018                       		move.l	(a0)+,d0
0000652E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006532 21C0 F720                  		move.l	d0,($FFFFF720).w
00006536 2018                       		move.l	(a0)+,d0
00006538 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000653C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006540 3038 F728                  		move.w	($FFFFF728).w,d0
00006544 0640 0240                  		addi.w	#$240,d0
00006548 31C0 F732                  		move.w	d0,($FFFFF732).w
0000654C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006552 3018                       		move.w	(a0)+,d0
00006554 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006558 6000 0000                  		bra.w	LevSz_ChkLamp
0000655C                            ; ===========================================================================
0000655C                            ; ---------------------------------------------------------------------------
0000655C                            ; Level size array and ending start location array
0000655C                            ; ---------------------------------------------------------------------------
0000655C                            LevelSizeArray:        ; GHZ
0000655C 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006568 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006574 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006580 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
0000658C                                    ; LZ
0000658C 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006598 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065A4 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065B0 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065BC                                    ; MZ
000065BC 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000065C8 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000065D4 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000065E0 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000065EC                                    ; SLZ
000065EC 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000065F8 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006604 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006610 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000661C                                    ; SYZ
0000661C 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006628 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006634 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006640 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
0000664C                                    ; SBZ
0000664C 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006658 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006664 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006670 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000667C                                    ; Ending
0000667C 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006688 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006694 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066A0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066AC                                    ; BHZ
000066AC 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066B8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000066C4 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000066D0 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000066DC                                    even
000066DC                            
000066DC                            ; ===========================================================================
000066DC                            
000066DC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066DC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066E0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066E2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066E8 3238 D008                  		move.w	($FFFFD008).w,d1
000066EC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066F0 6000 0000                  		bra.w	loc_60D0
000066F4                            ; ===========================================================================
000066F4                            
000066F4                            
000066F4                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000066F4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000066F8 ED08                       		lsl.b	#6,d0
000066FA E848                       		lsr.w	#4,d0
000066FC 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006700 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006704 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006708 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000670C 5340                       		subq.w	#1,d0
0000670E E548                       		lsl.w	#2,d0
00006710 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006714 6000 0000                  		bra.w	LevSz_SonicPos
00006718                            
00006718                            EndingStLocArray:
00006718                            		incbin	misc\sloc_end.bin
00006738                            		even
00006738                            		
00006738                            ; ===========================================================================
00006738                            ; ---------------------------------------------------------------------------
00006738                            ; Sonic	start location array
00006738                            ; ---------------------------------------------------------------------------
00006738                            StartLocArray:	incbin	misc\sloc_lev.bin
000067B8                            		even
000067B8                            
000067B8                            LevSz_SonicPos:
000067B8 7200                       		moveq	#0,d1
000067BA 3219                       		move.w	(a1)+,d1
000067BC 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000067C0 7000                       		moveq	#0,d0
000067C2 3011                       		move.w	(a1),d0
000067C4 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000067C8                            
000067C8                            loc_60D0:				; XREF: LevSz_ChkLamp
000067C8 0441 00A0                  		subi.w	#$A0,d1
000067CC 6400                       		bcc.s	loc_60D8
000067CE 7200                       		moveq	#0,d1
000067D0                            
000067D0                            loc_60D8:
000067D0 3438 F72A                  		move.w	($FFFFF72A).w,d2
000067D4 B242                       		cmp.w	d2,d1
000067D6 6500                       		bcs.s	loc_60E2
000067D8 3202                       		move.w	d2,d1
000067DA                            
000067DA                            loc_60E2:
000067DA 31C1 F700                  		move.w	d1,($FFFFF700).w
000067DE 0440 0060                  		subi.w	#$60,d0
000067E2 6400                       		bcc.s	loc_60EE
000067E4 7000                       		moveq	#0,d0
000067E6                            
000067E6                            loc_60EE:
000067E6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000067EA 6D00                       		blt.s	loc_60F8
000067EC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000067F0                            
000067F0                            loc_60F8:
000067F0 31C0 F704                  		move.w	d0,($FFFFF704).w
000067F4 6100 0000                  		bsr.w	BgScrollSpeed
000067F8 7000                       		moveq	#0,d0
000067FA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067FE E508                       		lsl.b	#2,d0
00006800 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006806 6000 0000                  		bra.w	LevSz_Unk
0000680A                            
0000680A                            ; ---------------------------------------------------------------------------
0000680A                            ; Which	256x256	tiles contain loops or roll-tunnels
0000680A                            ; ---------------------------------------------------------------------------
0000680A                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000680A                            ; loop,	loop, tunnel, tunnel
0000680A                            ; ---------------------------------------------------------------------------
0000680A                            LoopTileNums:	incbin	misc\loopnums.bin
0000682A                            		even
0000682A                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
0000682A                            ; ITS GONJE HELP
0000682A                            ; ===========================================================================
0000682A                            
0000682A                            LevSz_Unk:				; XREF: LevelSizeLoad
0000682A 7000                       		moveq	#0,d0
0000682C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006830 E748                       		lsl.w	#3,d0
00006832 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006836 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000683A 24D9                       		move.l	(a1)+,(a2)+
0000683C 24D9                       		move.l	(a1)+,(a2)+
0000683E 4E75                       		rts	
00006840                            ; End of function LevelSizeLoad
00006840                            
00006840                            ; ===========================================================================
00006840 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006848 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006850 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006858 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006860 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006868 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006870 0070 0100 0100 0100        		dc.l $700100, $1000100
00006878                            
00006878                            ; ---------------------------------------------------------------------------
00006878                            ; Subroutine to	set scroll speed of some backgrounds
00006878                            ; ---------------------------------------------------------------------------
00006878                            
00006878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006878                            
00006878                            
00006878                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006878 4A38 FE30                  		tst.b	($FFFFFE30).w
0000687C 6600                       		bne.s	loc_6206
0000687E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006882 31C0 F714                  		move.w	d0,($FFFFF714).w
00006886 31C1 F708                  		move.w	d1,($FFFFF708).w
0000688A 31C1 F710                  		move.w	d1,($FFFFF710).w
0000688E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006892                            
00006892                            loc_6206:
00006892 7400                       		moveq	#0,d2
00006894 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006898 D442                       		add.w	d2,d2
0000689A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000689E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068A2                            ; End of function BgScrollSpeed
000068A2                            
000068A2                            ; ===========================================================================
000068A2 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068A6 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068AA 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068AE 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
000068B2                            ; ===========================================================================
000068B2                            
000068B2                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068B2 6000 0000                  		bra.w	Deform_GHZ
000068B6                            ; ===========================================================================
000068B6                            
000068B6                            BgScroll_LZ:				; XREF: BgScroll_Index
000068B6 E280                       		asr.l	#1,d0
000068B8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068BC 4E75                       		rts	
000068BE                            ; ===========================================================================
000068BE                            
000068BE                            BgScroll_MZ:				; XREF: BgScroll_Index
000068BE 4E75                       		rts	
000068C0                            ; ===========================================================================
000068C0                            
000068C0                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068C0 E280                       		asr.l	#1,d0
000068C2 0640 00C0                  		addi.w	#$C0,d0
000068C6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068CA 4E75                       		rts	
000068CC                            ; ===========================================================================
000068CC                            
000068CC                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068CC E980                       		asl.l	#4,d0
000068CE 2400                       		move.l	d0,d2
000068D0 E380                       		asl.l	#1,d0
000068D2 D082                       		add.l	d2,d0
000068D4 E080                       		asr.l	#8,d0
000068D6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068DA 31C0 F714                  		move.w	d0,($FFFFF714).w
000068DE 4E75                       		rts	
000068E0                            ; ===========================================================================
000068E0                            
000068E0                            BgScroll_SBZ:				; XREF: BgScroll_Index
000068E0 E980                       		asl.l	#4,d0
000068E2 E380                       		asl.l	#1,d0
000068E4 E080                       		asr.l	#8,d0
000068E6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068EA 4E75                       		rts	
000068EC                            ; ===========================================================================
000068EC                            
000068EC                            BgScroll_End:				; XREF: BgScroll_Index
000068EC 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068F2 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000068F8 4E75                       		rts	
000068FA                            ; ===========================================================================
000068FA 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006900 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006906 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000690C 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006912 4E75                       		rts
00006914                            
00006914                            ; ---------------------------------------------------------------------------
00006914                            ; Background layer deformation subroutines
00006914                            ; ---------------------------------------------------------------------------
00006914                            
00006914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006914                            
00006914                            
00006914                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006914 4A38 F744                  		tst.b	($FFFFF744).w
00006918 6700                       		beq.s	loc_628E
0000691A 4E75                       		rts	
0000691C                            ; ===========================================================================
0000691C                            
0000691C                            loc_628E:
0000691C 4278 F754                  		clr.w	($FFFFF754).w
00006920 4278 F756                  		clr.w	($FFFFF756).w
00006924 4278 F758                  		clr.w	($FFFFF758).w
00006928 4278 F75A                  		clr.w	($FFFFF75A).w
0000692C 6100 0000                  		bsr.w	ScrollHoriz
00006930 6100 0000                  		bsr.w	ScrollVertical
00006934 6100 0000                  		bsr.w	DynScrResizeLoad
00006938 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000693E 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006944 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000694A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006950 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006956 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000695C 7000                       		moveq	#0,d0
0000695E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006962 D040                       		add.w	d0,d0
00006964 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006968 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000696C                            ; End of function DeformBgLayer
0000696C                            
0000696C                            ; ===========================================================================
0000696C                            ; ---------------------------------------------------------------------------
0000696C                            ; Offset index for background layer deformation	code
0000696C                            ; ---------------------------------------------------------------------------
0000696C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006970 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006974 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006978 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
0000697C                            ; ---------------------------------------------------------------------------
0000697C                            ; Green	Hill Zone background layer deformation code
0000697C                            ; ---------------------------------------------------------------------------
0000697C                            
0000697C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000697C                            
0000697C                            
0000697C                            Deform_GHZ:				; XREF: Deform_Index
0000697C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006980 48C4                       		ext.l	d4
00006982 EB84                       		asl.l	#5,d4
00006984 2204                       		move.l	d4,d1
00006986 E384                       		asl.l	#1,d4
00006988 D881                       		add.l	d1,d4
0000698A 7A00                       		moveq	#0,d5
0000698C 6100 0000                  		bsr.w	ScrollBlock1
00006990 6100 0000                  		bsr.w	ScrollBlock4
00006994 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006998 3038 F704                  		move.w	($FFFFF704).w,d0
0000699C 0240 07FF                  		andi.w	#$7FF,d0
000069A0 EA48                       		lsr.w	#5,d0
000069A2 4440                       		neg.w	d0
000069A4 0640 0026                  		addi.w	#$26,d0
000069A8 31C0 F714                  		move.w	d0,($FFFFF714).w
000069AC 3800                       		move.w	d0,d4
000069AE 6100 0000                  		bsr.w	ScrollBlock3
000069B2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069B8 323C 006F                  		move.w	#$6F,d1
000069BC 9244                       		sub.w	d4,d1
000069BE 3038 F700                  		move.w	($FFFFF700).w,d0
000069C2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000069C8 6600                       		bne.s	loc_633C
000069CA 7000                       		moveq	#0,d0
000069CC                            
000069CC                            loc_633C:
000069CC 4440                       		neg.w	d0
000069CE 4840                       		swap	d0
000069D0 3038 F708                  		move.w	($FFFFF708).w,d0
000069D4 4440                       		neg.w	d0
000069D6                            
000069D6                            loc_6346:
000069D6 22C0                       		move.l	d0,(a1)+
000069D8 51C9 FFFC                  		dbf	d1,loc_6346
000069DC 323C 0027                  		move.w	#$27,d1
000069E0 3038 F710                  		move.w	($FFFFF710).w,d0
000069E4 4440                       		neg.w	d0
000069E6                            
000069E6                            loc_6356:
000069E6 22C0                       		move.l	d0,(a1)+
000069E8 51C9 FFFC                  		dbf	d1,loc_6356
000069EC 3038 F710                  		move.w	($FFFFF710).w,d0
000069F0 0640 0000                  		addi.w	#0,d0
000069F4 3438 F700                  		move.w	($FFFFF700).w,d2
000069F8 0642 FE00                  		addi.w	#-$200,d2
000069FC 9440                       		sub.w	d0,d2
000069FE 48C2                       		ext.l	d2
00006A00 E182                       		asl.l	#8,d2
00006A02 85FC 0068                  		divs.w	#$68,d2
00006A06 48C2                       		ext.l	d2
00006A08 E182                       		asl.l	#8,d2
00006A0A 7600                       		moveq	#0,d3
00006A0C 3600                       		move.w	d0,d3
00006A0E 323C 0047                  		move.w	#$47,d1
00006A12 D244                       		add.w	d4,d1
00006A14                            
00006A14                            loc_6384:
00006A14 3003                       		move.w	d3,d0
00006A16 4440                       		neg.w	d0
00006A18 22C0                       		move.l	d0,(a1)+
00006A1A 4843                       		swap	d3
00006A1C D682                       		add.l	d2,d3
00006A1E 4843                       		swap	d3
00006A20 51C9 FFF2                  		dbf	d1,loc_6384
00006A24 4E75                       		rts	
00006A26                            ; End of function Deform_GHZ
00006A26                            
00006A26                            ; ---------------------------------------------------------------------------
00006A26                            ; Labyrinth Zone background layer deformation code
00006A26                            ; ---------------------------------------------------------------------------
00006A26                            
00006A26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A26                            
00006A26                            
00006A26                            Deform_LZ:				; XREF: Deform_Index
00006A26 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A2A 48C4                       		ext.l	d4
00006A2C EF84                       		asl.l	#7,d4
00006A2E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A32 48C5                       		ext.l	d5
00006A34 EF85                       		asl.l	#7,d5
00006A36 6100 0000                  		bsr.w	ScrollBlock1
00006A3A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A40 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A44 323C 00DF                  		move.w	#$DF,d1
00006A48 3038 F700                  		move.w	($FFFFF700).w,d0
00006A4C 4440                       		neg.w	d0
00006A4E 4840                       		swap	d0
00006A50 3038 F708                  		move.w	($FFFFF708).w,d0
00006A54 4440                       		neg.w	d0
00006A56                            
00006A56                            loc_63C6:
00006A56 22C0                       		move.l	d0,(a1)+
00006A58 51C9 FFFC                  		dbf	d1,loc_63C6
00006A5C 3038 F646                  		move.w	($FFFFF646).w,d0
00006A60 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A64 4E75                       		rts	
00006A66                            ; End of function Deform_LZ
00006A66                            
00006A66                            ; ---------------------------------------------------------------------------
00006A66                            ; Marble Zone background layer deformation code
00006A66                            ; ---------------------------------------------------------------------------
00006A66                            
00006A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A66                            
00006A66                            
00006A66                            Deform_MZ:				; XREF: Deform_Index
00006A66 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A6A 48C4                       		ext.l	d4
00006A6C ED84                       		asl.l	#6,d4
00006A6E 2204                       		move.l	d4,d1
00006A70 E384                       		asl.l	#1,d4
00006A72 D881                       		add.l	d1,d4
00006A74 7A00                       		moveq	#0,d5
00006A76 6100 0000                  		bsr.w	ScrollBlock1
00006A7A 303C 0200                  		move.w	#$200,d0
00006A7E 3238 F704                  		move.w	($FFFFF704).w,d1
00006A82 0441 01C8                  		subi.w	#$1C8,d1
00006A86 6500                       		bcs.s	loc_6402
00006A88 3401                       		move.w	d1,d2
00006A8A D241                       		add.w	d1,d1
00006A8C D242                       		add.w	d2,d1
00006A8E E441                       		asr.w	#2,d1
00006A90 D041                       		add.w	d1,d0
00006A92                            
00006A92                            loc_6402:
00006A92 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A96 6100 0000                  		bsr.w	ScrollBlock3
00006A9A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AA0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AA4 323C 00DF                  		move.w	#$DF,d1
00006AA8 3038 F700                  		move.w	($FFFFF700).w,d0
00006AAC 4440                       		neg.w	d0
00006AAE 4840                       		swap	d0
00006AB0 3038 F708                  		move.w	($FFFFF708).w,d0
00006AB4 4440                       		neg.w	d0
00006AB6                            
00006AB6                            loc_6426:
00006AB6 22C0                       		move.l	d0,(a1)+
00006AB8 51C9 FFFC                  		dbf	d1,loc_6426
00006ABC 4E75                       		rts	
00006ABE                            ; End of function Deform_MZ
00006ABE                            
00006ABE                            ; ---------------------------------------------------------------------------
00006ABE                            ; Star Light Zone background layer deformation code
00006ABE                            ; ---------------------------------------------------------------------------
00006ABE                            
00006ABE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ABE                            
00006ABE                            
00006ABE                            Deform_SLZ:				; XREF: Deform_Index
00006ABE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AC2 48C4                       		ext.l	d4
00006AC4 EB84                       		asl.l	#5,d4
00006AC6 2204                       		move.l	d4,d1
00006AC8 E384                       		asl.l	#1,d4
00006ACA D881                       		add.l	d1,d4
00006ACC 7A00                       		moveq	#0,d5
00006ACE 6100 0000                  		bsr.w	ScrollBlock1
00006AD2 6100 0000                  		bsr.w	ScrollBlock3
00006AD6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006ADA                            	;	move.w	($FFFFF704).w,d0
00006ADA                            	;	andi.w	#$7FF,d0
00006ADA EA48                       		lsr.w	#5,d0
00006ADC 4440                       		neg.w	d0
00006ADE 0640 0026                  		addi.w	#$26,d0
00006AE2 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AE6 3800                       		move.w	d0,d4
00006AE8                            	;	bsr.w	ScrollBlock3
00006AE8 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006AEE 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006AF2                            
00006AF2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AF6 4440                       		neg.w	d0			; negate (positive to negative)
00006AF8 4840                       		swap	d0			; send to the left side of d0
00006AFA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AFE 45F8 A800                  		lea	($FFFFA800).w,a2
00006B02 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B08 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B0E 3038 A800                  		move.w	($FFFFA800).w,d0
00006B12 4440                       		neg.w	d0			; negate (positive to negative)
00006B14 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B16 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B1A                            slz_DeformLoop_1:
00006B1A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B1C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B20                            
00006B20 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B24 4440                       		neg.w	d0			; negate (positive to negative)
00006B26 4840                       		swap	d0			; send to the left side of d0
00006B28 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B2C 45F8 A800                  		lea	($FFFFA800).w,a2
00006B30 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B36 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B3C 3038 A800                  		move.w	($FFFFA800).w,d0
00006B40 4440                       		neg.w	d0			; negate (positive to negative)
00006B42 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B44 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B48                            slz_DeformLoop_2:
00006B48 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B4A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B4E                            
00006B4E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B52 4440                       		neg.w	d0			; negate (positive to negative)
00006B54 4840                       		swap	d0			; send to the left side of d0
00006B56 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B5A 45F8 A800                  		lea	($FFFFA800).w,a2
00006B5E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B64 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B6A 3038 A800                  		move.w	($FFFFA800).w,d0
00006B6E 4440                       		neg.w	d0			; negate (positive to negative)
00006B70 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B72 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B76                            slz_DeformLoop_3:
00006B76 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B78 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006B7C                            
00006B7C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B80 4440                       		neg.w	d0			; negate (positive to negative)
00006B82 4840                       		swap	d0			; send to the left side of d0
00006B84 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B88 45F8 A800                  		lea	($FFFFA800).w,a2
00006B8C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B92 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B98 3038 A800                  		move.w	($FFFFA800).w,d0
00006B9C 4440                       		neg.w	d0			; negate (positive to negative)
00006B9E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BA0 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BA4                            slz_DeformLoop_4:
00006BA4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BA6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BAA                            
00006BAA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BAE 4440                       		neg.w	d0			; negate (positive to negative)
00006BB0 4840                       		swap	d0			; send to the left side of d0
00006BB2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BB6 45F8 A800                  		lea	($FFFFA800).w,a2
00006BBA 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BC0 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BC6 3038 A800                  		move.w	($FFFFA800).w,d0
00006BCA 4440                       		neg.w	d0			; negate (positive to negative)
00006BCC E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006BCE 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BD2                            slz_DeformLoop_5:
00006BD2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BD4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006BD8                            
00006BD8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BDC 4440                       		neg.w	d0			; negate (positive to negative)
00006BDE 4840                       		swap	d0			; send to the left side of d0
00006BE0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BE4 4440                       		neg.w	d0			; negate (positive to negative)
00006BE6 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006BE8 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BEC                            slz_DeformLoop_6:
00006BEC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BEE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006BF2                            
00006BF2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BF6 4440                       		neg.w	d0			; negate (positive to negative)
00006BF8 4840                       		swap	d0			; send to the left side of d0
00006BFA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BFE 4440                       		neg.w	d0			; negate (positive to negative)
00006C00 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C02 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C06                            slz_DeformLoop_7:
00006C06 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C08 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C0C                            
00006C0C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C10 4440                       		neg.w	d0			; negate (positive to negative)
00006C12 4840                       		swap	d0			; send to the left side of d0
00006C14 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C18 4440                       		neg.w	d0			; negate (positive to negative)
00006C1A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C1C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C20                            slz_DeformLoop_8:
00006C20 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C22 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C26                            
00006C26 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C2A 4440                       		neg.w	d0			; negate (positive to negative)
00006C2C 4840                       		swap	d0			; send to the left side of d0
00006C2E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C32 4440                       		neg.w	d0			; negate (positive to negative)
00006C34 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C36 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C3A                            slz_DeformLoop_9:
00006C3A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C3C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C40                            
00006C40 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C44 4440                       		neg.w	d0			; negate (positive to negative)
00006C46 4840                       		swap	d0			; send to the left side of d0
00006C48 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C4C 4440                       		neg.w	d0			; negate (positive to negative)
00006C4E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C50 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C54                            slz_DeformLoop_10:
00006C54 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C56 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C5A                            
00006C5A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C5E 4440                       		neg.w	d0			; negate (positive to negative)
00006C60 4840                       		swap	d0			; send to the left side of d0
00006C62 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C66 4440                       		neg.w	d0			; negate (positive to negative)
00006C68 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C6A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C6E                            slz_DeformLoop_11:
00006C6E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C70 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006C74                            
00006C74 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C78 4440                       		neg.w	d0			; negate (positive to negative)
00006C7A 4840                       		swap	d0			; send to the left side of d0
00006C7C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C80 4440                       		neg.w	d0			; negate (positive to negative)
00006C82 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006C84 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C88                            slz_DeformLoop_12:
00006C88 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C8A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006C8E                            
00006C8E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C92 4440                       		neg.w	d0			; negate (positive to negative)
00006C94 4840                       		swap	d0			; send to the left side of d0
00006C96 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C9A 4440                       		neg.w	d0			; negate (positive to negative)
00006C9C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006C9E 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CA2                            slz_DeformLoop_13:
00006CA2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CA4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CA8 4E75                       		rts	
00006CAA                            ; End of function Deform_SLZ
00006CAA 4E75                       		rts	
00006CAC                            ; End of function Deform_SLZ_2
00006CAC                            
00006CAC                            ; ---------------------------------------------------------------------------
00006CAC                            ; Spring Yard Zone background layer deformation	code
00006CAC                            ; ---------------------------------------------------------------------------
00006CAC                            
00006CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CAC                            
00006CAC                            
00006CAC                            Deform_SYZ:				; XREF: Deform_Index
00006CAC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CB0 48C4                       		ext.l	d4
00006CB2 ED84                       		asl.l	#6,d4
00006CB4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CB8 48C5                       		ext.l	d5
00006CBA E985                       		asl.l	#4,d5
00006CBC 2205                       		move.l	d5,d1
00006CBE E385                       		asl.l	#1,d5
00006CC0 DA81                       		add.l	d1,d5
00006CC2 6100 0000                  		bsr.w	ScrollBlock1
00006CC6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006CCC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CD0 323C 00DF                  		move.w	#$DF,d1
00006CD4 3038 F700                  		move.w	($FFFFF700).w,d0
00006CD8 4440                       		neg.w	d0
00006CDA 4840                       		swap	d0
00006CDC 3038 F708                  		move.w	($FFFFF708).w,d0
00006CE0 4440                       		neg.w	d0
00006CE2                            
00006CE2                            loc_653C:
00006CE2 22C0                       		move.l	d0,(a1)+
00006CE4 51C9 FFFC                  		dbf	d1,loc_653C
00006CE8 4E75                       		rts	
00006CEA                            ; End of function Deform_SYZ
00006CEA                            
00006CEA                            ; ---------------------------------------------------------------------------
00006CEA                            ; Scrap	Brain Zone background layer deformation	code
00006CEA                            ; ---------------------------------------------------------------------------
00006CEA                            
00006CEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CEA                            
00006CEA                            
00006CEA                            Deform_SBZ:				; XREF: Deform_Index
00006CEA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CEE 48C4                       		ext.l	d4
00006CF0 ED84                       		asl.l	#6,d4
00006CF2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CF6 48C5                       		ext.l	d5
00006CF8 E985                       		asl.l	#4,d5
00006CFA E385                       		asl.l	#1,d5
00006CFC 6100 0000                  		bsr.w	ScrollBlock1
00006D00 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D06 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D0A 323C 00DF                  		move.w	#$DF,d1
00006D0E 3038 F700                  		move.w	($FFFFF700).w,d0
00006D12 4440                       		neg.w	d0
00006D14 4840                       		swap	d0
00006D16 3038 F708                  		move.w	($FFFFF708).w,d0
00006D1A 4440                       		neg.w	d0
00006D1C                            
00006D1C                            loc_6576:
00006D1C 22C0                       		move.l	d0,(a1)+
00006D1E 51C9 FFFC                  		dbf	d1,loc_6576
00006D22 4E75                       		rts	
00006D24                            ; End of function Deform_SBZ
00006D24                            
00006D24                            ; ---------------------------------------------------------------------------
00006D24                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D24                            ; ---------------------------------------------------------------------------
00006D24                            
00006D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D24                            
00006D24                            
00006D24                            ScrollHoriz:				; XREF: DeformBgLayer
00006D24 3838 F700                  		move.w	($FFFFF700).w,d4
00006D28 6100                       		bsr.s	ScrollHoriz2
00006D2A 3038 F700                  		move.w	($FFFFF700).w,d0
00006D2E 0240 0010                  		andi.w	#$10,d0
00006D32 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D36 B300                       		eor.b	d1,d0
00006D38 6600                       		bne.s	locret_65B0
00006D3A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D40 3038 F700                  		move.w	($FFFFF700).w,d0
00006D44 9044                       		sub.w	d4,d0
00006D46 6A00                       		bpl.s	loc_65AA
00006D48 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D4E 4E75                       		rts	
00006D50                            ; ===========================================================================
00006D50                            
00006D50                            loc_65AA:
00006D50 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006D56                            
00006D56                            locret_65B0:
00006D56 4E75                       		rts	
00006D58                            ; End of function ScrollHoriz
00006D58                            
00006D58                            
00006D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D58                            
00006D58                            
00006D58                            ScrollHoriz2:				; XREF: ScrollHoriz
00006D58 3038 D008                  		move.w	($FFFFD008).w,d0
00006D5C 9078 F700                  		sub.w	($FFFFF700).w,d0
00006D60 0440 0090                  		subi.w	#$90,d0
00006D64 6500                       		bcs.s	loc_65F6
00006D66 0440 0010                  		subi.w	#$10,d0
00006D6A 6400                       		bcc.s	loc_65CC
00006D6C 4278 F73A                  		clr.w	($FFFFF73A).w
00006D70 4E75                       		rts	
00006D72                            ; ===========================================================================
00006D72                            
00006D72                            loc_65CC:
00006D72 0C40 0010                  		cmpi.w	#$10,d0
00006D76 6500                       		bcs.s	loc_65D6
00006D78 303C 0010                  		move.w	#$10,d0
00006D7C                            
00006D7C                            loc_65D6:
00006D7C D078 F700                  		add.w	($FFFFF700).w,d0
00006D80 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006D84 6D00                       		blt.s	loc_65E4
00006D86 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006D8A                            
00006D8A                            loc_65E4:
00006D8A 3200                       		move.w	d0,d1
00006D8C 9278 F700                  		sub.w	($FFFFF700).w,d1
00006D90 E141                       		asl.w	#8,d1
00006D92 31C0 F700                  		move.w	d0,($FFFFF700).w
00006D96 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006D9A 4E75                       		rts	
00006D9C                            ; ===========================================================================
00006D9C                            
00006D9C                            loc_65F6:				; XREF: ScrollHoriz2
00006D9C D078 F700                  		add.w	($FFFFF700).w,d0
00006DA0 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DA4 6EE4                       		bgt.s	loc_65E4
00006DA6 3038 F728                  		move.w	($FFFFF728).w,d0
00006DAA 60DE                       		bra.s	loc_65E4
00006DAC                            ; End of function ScrollHoriz2
00006DAC                            
00006DAC                            ; ===========================================================================
00006DAC 4A40                       		tst.w	d0
00006DAE 6A00                       		bpl.s	loc_6610
00006DB0 303C FFFE                  		move.w	#-2,d0
00006DB4 60E6                       		bra.s	loc_65F6
00006DB6                            ; ===========================================================================
00006DB6                            
00006DB6                            loc_6610:
00006DB6 303C 0002                  		move.w	#2,d0
00006DBA 60B6                       		bra.s	loc_65CC
00006DBC                            
00006DBC                            ; ---------------------------------------------------------------------------
00006DBC                            ; Subroutine to	scroll the level vertically as Sonic moves
00006DBC                            ; ---------------------------------------------------------------------------
00006DBC                            
00006DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DBC                            
00006DBC                            
00006DBC                            ScrollVertical:				; XREF: DeformBgLayer
00006DBC 7200                       		moveq	#0,d1
00006DBE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006DC2 9078 F704                  		sub.w	($FFFFF704).w,d0
00006DC6 0838 0002 D022             		btst	#2,($FFFFD022).w
00006DCC 6700                       		beq.s	loc_662A
00006DCE 5B40                       		subq.w	#5,d0
00006DD0                            
00006DD0                            loc_662A:
00006DD0 0838 0001 D022             		btst	#1,($FFFFD022).w
00006DD6 6700                       		beq.s	loc_664A
00006DD8 0640 0020                  		addi.w	#$20,d0
00006DDC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DE0 6500                       		bcs.s	loc_6696
00006DE2 0440 0040                  		subi.w	#$40,d0
00006DE6 6400                       		bcc.s	loc_6696
00006DE8 4A38 F75C                  		tst.b	($FFFFF75C).w
00006DEC 6600                       		bne.s	loc_66A8
00006DEE 6000                       		bra.s	loc_6656
00006DF0                            ; ===========================================================================
00006DF0                            
00006DF0                            loc_664A:
00006DF0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DF4 6600                       		bne.s	loc_665C
00006DF6 4A38 F75C                  		tst.b	($FFFFF75C).w
00006DFA 6600                       		bne.s	loc_66A8
00006DFC                            
00006DFC                            loc_6656:
00006DFC 4278 F73C                  		clr.w	($FFFFF73C).w
00006E00 4E75                       		rts	
00006E02                            ; ===========================================================================
00006E02                            
00006E02                            loc_665C:
00006E02 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E08 6600                       		bne.s	loc_6684
00006E0A 3238 D014                  		move.w	($FFFFD014).w,d1
00006E0E 6A00                       		bpl.s	loc_666C
00006E10 4441                       		neg.w	d1
00006E12                            
00006E12                            loc_666C:
00006E12 0C41 0800                  		cmpi.w	#$800,d1
00006E16 6400                       		bcc.s	loc_6696
00006E18 323C 0600                  		move.w	#$600,d1
00006E1C 0C40 0006                  		cmpi.w	#6,d0
00006E20 6E00                       		bgt.s	loc_66F6
00006E22 0C40 FFFA                  		cmpi.w	#-6,d0
00006E26 6D00                       		blt.s	loc_66C0
00006E28 6000                       		bra.s	loc_66AE
00006E2A                            ; ===========================================================================
00006E2A                            
00006E2A                            loc_6684:
00006E2A 323C 0200                  		move.w	#$200,d1
00006E2E 0C40 0002                  		cmpi.w	#2,d0
00006E32 6E00                       		bgt.s	loc_66F6
00006E34 0C40 FFFE                  		cmpi.w	#-2,d0
00006E38 6D00                       		blt.s	loc_66C0
00006E3A 6000                       		bra.s	loc_66AE
00006E3C                            ; ===========================================================================
00006E3C                            
00006E3C                            loc_6696:
00006E3C 323C 1000                  		move.w	#$1000,d1
00006E40 0C40 0010                  		cmpi.w	#$10,d0
00006E44 6E00                       		bgt.s	loc_66F6
00006E46 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E4A 6D00                       		blt.s	loc_66C0
00006E4C 6000                       		bra.s	loc_66AE
00006E4E                            ; ===========================================================================
00006E4E                            
00006E4E                            loc_66A8:
00006E4E 7000                       		moveq	#0,d0
00006E50 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006E54                            
00006E54                            loc_66AE:
00006E54 7200                       		moveq	#0,d1
00006E56 3200                       		move.w	d0,d1
00006E58 D278 F704                  		add.w	($FFFFF704).w,d1
00006E5C 4A40                       		tst.w	d0
00006E5E 6A00 0000                  		bpl.w	loc_6700
00006E62 6000 0000                  		bra.w	loc_66CC
00006E66                            ; ===========================================================================
00006E66                            
00006E66                            loc_66C0:
00006E66 4441                       		neg.w	d1
00006E68 48C1                       		ext.l	d1
00006E6A E181                       		asl.l	#8,d1
00006E6C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006E70 4841                       		swap	d1
00006E72                            
00006E72                            loc_66CC:
00006E72 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006E76 6E00                       		bgt.s	loc_6724
00006E78 0C41 FF00                  		cmpi.w	#-$100,d1
00006E7C 6E00                       		bgt.s	loc_66F0
00006E7E 0241 07FF                  		andi.w	#$7FF,d1
00006E82 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006E88 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006E8E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006E94 6000                       		bra.s	loc_6724
00006E96                            ; ===========================================================================
00006E96                            
00006E96                            loc_66F0:
00006E96 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006E9A 6000                       		bra.s	loc_6724
00006E9C                            ; ===========================================================================
00006E9C                            
00006E9C                            loc_66F6:
00006E9C 48C1                       		ext.l	d1
00006E9E E181                       		asl.l	#8,d1
00006EA0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EA4 4841                       		swap	d1
00006EA6                            
00006EA6                            loc_6700:
00006EA6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EAA 6D00                       		blt.s	loc_6724
00006EAC 0441 0800                  		subi.w	#$800,d1
00006EB0 6500                       		bcs.s	loc_6720
00006EB2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006EB8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006EBE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006EC4 6000                       		bra.s	loc_6724
00006EC6                            ; ===========================================================================
00006EC6                            
00006EC6                            loc_6720:
00006EC6 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006ECA                            
00006ECA                            loc_6724:
00006ECA 3838 F704                  		move.w	($FFFFF704).w,d4
00006ECE 4841                       		swap	d1
00006ED0 2601                       		move.l	d1,d3
00006ED2 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006ED6 E09B                       		ror.l	#8,d3
00006ED8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006EDC 21C1 F704                  		move.l	d1,($FFFFF704).w
00006EE0 3038 F704                  		move.w	($FFFFF704).w,d0
00006EE4 0240 0010                  		andi.w	#$10,d0
00006EE8 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006EEC B300                       		eor.b	d1,d0
00006EEE 6600                       		bne.s	locret_6766
00006EF0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006EF6 3038 F704                  		move.w	($FFFFF704).w,d0
00006EFA 9044                       		sub.w	d4,d0
00006EFC 6A00                       		bpl.s	loc_6760
00006EFE 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F04 4E75                       		rts	
00006F06                            ; ===========================================================================
00006F06                            
00006F06                            loc_6760:
00006F06 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F0C                            
00006F0C                            locret_6766:
00006F0C 4E75                       		rts	
00006F0E                            ; End of function ScrollVertical
00006F0E                            
00006F0E                            
00006F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F0E                            
00006F0E                            
00006F0E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F0E 2438 F708                  		move.l	($FFFFF708).w,d2
00006F12 2002                       		move.l	d2,d0
00006F14 D084                       		add.l	d4,d0
00006F16 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F1A 2200                       		move.l	d0,d1
00006F1C 4841                       		swap	d1
00006F1E 0241 0010                  		andi.w	#$10,d1
00006F22 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F26 B701                       		eor.b	d3,d1
00006F28 6600                       		bne.s	loc_679C
00006F2A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F30 9082                       		sub.l	d2,d0
00006F32 6A00                       		bpl.s	loc_6796
00006F34 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F3A 6000                       		bra.s	loc_679C
00006F3C                            ; ===========================================================================
00006F3C                            
00006F3C                            loc_6796:
00006F3C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F42                            
00006F42                            loc_679C:
00006F42 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F46 2003                       		move.l	d3,d0
00006F48 D085                       		add.l	d5,d0
00006F4A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F4E 2200                       		move.l	d0,d1
00006F50 4841                       		swap	d1
00006F52 0241 0010                  		andi.w	#$10,d1
00006F56 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006F5A B501                       		eor.b	d2,d1
00006F5C 6600                       		bne.s	locret_67D0
00006F5E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006F64 9083                       		sub.l	d3,d0
00006F66 6A00                       		bpl.s	loc_67CA
00006F68 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006F6E 4E75                       		rts	
00006F70                            ; ===========================================================================
00006F70                            
00006F70                            loc_67CA:
00006F70 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006F76                            
00006F76                            locret_67D0:
00006F76 4E75                       		rts	
00006F78                            ; End of function ScrollBlock1
00006F78                            
00006F78                            
00006F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F78                            
00006F78                            
00006F78                            ScrollBlock2:				; XREF: Deform_SLZ
00006F78 2438 F708                  		move.l	($FFFFF708).w,d2
00006F7C 2002                       		move.l	d2,d0
00006F7E D084                       		add.l	d4,d0
00006F80 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F84 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F88 2003                       		move.l	d3,d0
00006F8A D085                       		add.l	d5,d0
00006F8C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F90 2200                       		move.l	d0,d1
00006F92 4841                       		swap	d1
00006F94 0241 0010                  		andi.w	#$10,d1
00006F98 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006F9C B501                       		eor.b	d2,d1
00006F9E 6600                       		bne.s	locret_6812
00006FA0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FA6 9083                       		sub.l	d3,d0
00006FA8 6A00                       		bpl.s	loc_680C
00006FAA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FB0 4E75                       		rts	
00006FB2                            ; ===========================================================================
00006FB2                            
00006FB2                            loc_680C:
00006FB2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FB8                            
00006FB8                            locret_6812:
00006FB8 4E75                       		rts	
00006FBA                            ; End of function ScrollBlock2
00006FBA                            
00006FBA                            
00006FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FBA                            
00006FBA                            
00006FBA                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006FBA 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006FBE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FC2 3200                       		move.w	d0,d1
00006FC4 0241 0010                  		andi.w	#$10,d1
00006FC8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FCC B501                       		eor.b	d2,d1
00006FCE 6600                       		bne.s	locret_6842
00006FD0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FD6 9043                       		sub.w	d3,d0
00006FD8 6A00                       		bpl.s	loc_683C
00006FDA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FE0 4E75                       		rts	
00006FE2                            ; ===========================================================================
00006FE2                            
00006FE2                            loc_683C:
00006FE2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FE8                            
00006FE8                            locret_6842:
00006FE8 4E75                       		rts	
00006FEA                            ; End of function ScrollBlock3
00006FEA                            
00006FEA                            
00006FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FEA                            
00006FEA                            
00006FEA                            ScrollBlock4:				; XREF: Deform_GHZ
00006FEA 3438 F710                  		move.w	($FFFFF710).w,d2
00006FEE 3638 F714                  		move.w	($FFFFF714).w,d3
00006FF2 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006FF6 48C0                       		ext.l	d0
00006FF8 EF80                       		asl.l	#7,d0
00006FFA D1B8 F710                  		add.l	d0,($FFFFF710).w
00006FFE 3038 F710                  		move.w	($FFFFF710).w,d0
00007002 0240 0010                  		andi.w	#$10,d0
00007006 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000700A B300                       		eor.b	d1,d0
0000700C 6600                       		bne.s	locret_6884
0000700E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007014 3038 F710                  		move.w	($FFFFF710).w,d0
00007018 9042                       		sub.w	d2,d0
0000701A 6A00                       		bpl.s	loc_687E
0000701C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007022 6000                       		bra.s	locret_6884
00007024                            ; ===========================================================================
00007024                            
00007024                            loc_687E:
00007024 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000702A                            
0000702A                            locret_6884:
0000702A 4E75                       		rts	
0000702C                            ; End of function ScrollBlock4
0000702C                            
0000702C                            
0000702C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000702C                            
0000702C                            
0000702C                            sub_6886:				; XREF: loc_C44
0000702C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007032 4DF9 00C0 0000             		lea	($C00000).l,a6
00007038 45F8 F756                  		lea	($FFFFF756).w,a2
0000703C 47F8 F708                  		lea	($FFFFF708).w,a3
00007040 49F8 A440                  		lea	($FFFFA440).w,a4
00007044 343C 6000                  		move.w	#$6000,d2
00007048 6100 0000                  		bsr.w	sub_6954
0000704C 45F8 F758                  		lea	($FFFFF758).w,a2
00007050 47F8 F710                  		lea	($FFFFF710).w,a3
00007054 6000 0000                  		bra.w	sub_69F4
00007058                            ; End of function sub_6886
00007058                            
00007058                            ; ---------------------------------------------------------------------------
00007058                            ; Subroutine to	display	correct	tiles as you move
00007058                            ; ---------------------------------------------------------------------------
00007058                            
00007058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007058                            
00007058                            
00007058                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007058 4BF9 00C0 0004             		lea	($C00004).l,a5
0000705E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007064 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007068 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000706C 49F8 A440                  		lea	($FFFFA440).w,a4
00007070 343C 6000                  		move.w	#$6000,d2
00007074 6100 0000                  		bsr.w	sub_6954
00007078 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000707C 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007080 6100 0000                  		bsr.w	sub_69F4
00007084 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007088 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000708C 49F8 A400                  		lea	($FFFFA400).w,a4
00007090 343C 4000                  		move.w	#$4000,d2
00007094 4A12                       		tst.b	(a2)
00007096 6700                       		beq.s	locret_6952
00007098 0892 0000                  		bclr	#0,(a2)
0000709C 6700                       		beq.s	loc_6908
0000709E 78F0                       		moveq	#-$10,d4
000070A0 7AF0                       		moveq	#-$10,d5
000070A2 6100 0000                  		bsr.w	sub_6C20
000070A6 78F0                       		moveq	#-$10,d4
000070A8 7AF0                       		moveq	#-$10,d5
000070AA 6100 0000                  		bsr.w	sub_6AD8
000070AE                            
000070AE                            loc_6908:
000070AE 0892 0001                  		bclr	#1,(a2)
000070B2 6700                       		beq.s	loc_6922
000070B4 383C 00E0                  		move.w	#$E0,d4
000070B8 7AF0                       		moveq	#-$10,d5
000070BA 6100 0000                  		bsr.w	sub_6C20
000070BE 383C 00E0                  		move.w	#$E0,d4
000070C2 7AF0                       		moveq	#-$10,d5
000070C4 6100 0000                  		bsr.w	sub_6AD8
000070C8                            
000070C8                            loc_6922:
000070C8 0892 0002                  		bclr	#2,(a2)
000070CC 6700                       		beq.s	loc_6938
000070CE 78F0                       		moveq	#-$10,d4
000070D0 7AF0                       		moveq	#-$10,d5
000070D2 6100 0000                  		bsr.w	sub_6C20
000070D6 78F0                       		moveq	#-$10,d4
000070D8 7AF0                       		moveq	#-$10,d5
000070DA 6100 0000                  		bsr.w	sub_6B04
000070DE                            
000070DE                            loc_6938:
000070DE 0892 0003                  		bclr	#3,(a2)
000070E2 6700                       		beq.s	locret_6952
000070E4 78F0                       		moveq	#-$10,d4
000070E6 3A3C 0140                  		move.w	#$140,d5
000070EA 6100 0000                  		bsr.w	sub_6C20
000070EE 78F0                       		moveq	#-$10,d4
000070F0 3A3C 0140                  		move.w	#$140,d5
000070F4 6100 0000                  		bsr.w	sub_6B04
000070F8                            
000070F8                            locret_6952:
000070F8 4E75                       		rts	
000070FA                            ; End of function LoadTilesAsYouMove
000070FA                            
000070FA                            
000070FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070FA                            
000070FA                            
000070FA                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000070FA 4A12                       		tst.b	(a2)
000070FC 6700 0000                  		beq.w	locret_69F2
00007100 0892 0000                  		bclr	#0,(a2)
00007104 6700                       		beq.s	loc_6972
00007106 78F0                       		moveq	#-$10,d4
00007108 7AF0                       		moveq	#-$10,d5
0000710A 6100 0000                  		bsr.w	sub_6C20
0000710E 78F0                       		moveq	#-$10,d4
00007110 7AF0                       		moveq	#-$10,d5
00007112 7C1F                       		moveq	#$1F,d6
00007114 6100 0000                  		bsr.w	sub_6ADA
00007118                            
00007118                            loc_6972:
00007118 0892 0001                  		bclr	#1,(a2)
0000711C 6700                       		beq.s	loc_698E
0000711E 383C 00E0                  		move.w	#$E0,d4
00007122 7AF0                       		moveq	#-$10,d5
00007124 6100 0000                  		bsr.w	sub_6C20
00007128 383C 00E0                  		move.w	#$E0,d4
0000712C 7AF0                       		moveq	#-$10,d5
0000712E 7C1F                       		moveq	#$1F,d6
00007130 6100 0000                  		bsr.w	sub_6ADA
00007134                            
00007134                            loc_698E:
00007134 0892 0002                  		bclr	#2,(a2)
00007138 6700                       		beq.s	loc_69BE
0000713A 78F0                       		moveq	#-$10,d4
0000713C 7AF0                       		moveq	#-$10,d5
0000713E 6100 0000                  		bsr.w	sub_6C20
00007142 78F0                       		moveq	#-$10,d4
00007144 7AF0                       		moveq	#-$10,d5
00007146 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000714A 322B 0004                  		move.w	4(a3),d1
0000714E 0241 FFF0                  		andi.w	#-$10,d1
00007152 9C41                       		sub.w	d1,d6
00007154 6D00                       		blt.s	loc_69BE
00007156 E84E                       		lsr.w	#4,d6
00007158 0C46 000F                  		cmpi.w	#$F,d6
0000715C 6500                       		bcs.s	loc_69BA
0000715E 7C0F                       		moveq	#$F,d6
00007160                            
00007160                            loc_69BA:
00007160 6100 0000                  		bsr.w	sub_6B06
00007164                            
00007164                            loc_69BE:
00007164 0892 0003                  		bclr	#3,(a2)
00007168 6700                       		beq.s	locret_69F2
0000716A 78F0                       		moveq	#-$10,d4
0000716C 3A3C 0140                  		move.w	#$140,d5
00007170 6100 0000                  		bsr.w	sub_6C20
00007174 78F0                       		moveq	#-$10,d4
00007176 3A3C 0140                  		move.w	#$140,d5
0000717A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000717E 322B 0004                  		move.w	4(a3),d1
00007182 0241 FFF0                  		andi.w	#-$10,d1
00007186 9C41                       		sub.w	d1,d6
00007188 6D00                       		blt.s	locret_69F2
0000718A E84E                       		lsr.w	#4,d6
0000718C 0C46 000F                  		cmpi.w	#$F,d6
00007190 6500                       		bcs.s	loc_69EE
00007192 7C0F                       		moveq	#$F,d6
00007194                            
00007194                            loc_69EE:
00007194 6100 0000                  		bsr.w	sub_6B06
00007198                            
00007198                            locret_69F2:
00007198 4E75                       		rts	
0000719A                            ; End of function sub_6954
0000719A                            
0000719A                            
0000719A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000719A                            
0000719A                            
0000719A                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000719A 4A12                       		tst.b	(a2)
0000719C 6700 0000                  		beq.w	locret_6A80
000071A0 0892 0002                  		bclr	#2,(a2)
000071A4 6700                       		beq.s	loc_6A3E
000071A6 0C53 0010                  		cmpi.w	#$10,(a3)
000071AA 6500                       		bcs.s	loc_6A3E
000071AC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071B0 322B 0004                  		move.w	4(a3),d1
000071B4 0241 FFF0                  		andi.w	#-$10,d1
000071B8 9841                       		sub.w	d1,d4
000071BA 3F04                       		move.w	d4,-(sp)
000071BC 7AF0                       		moveq	#-$10,d5
000071BE 6100 0000                  		bsr.w	sub_6C20
000071C2 381F                       		move.w	(sp)+,d4
000071C4 7AF0                       		moveq	#-$10,d5
000071C6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071CA 322B 0004                  		move.w	4(a3),d1
000071CE 0241 FFF0                  		andi.w	#-$10,d1
000071D2 9C41                       		sub.w	d1,d6
000071D4 6D00                       		blt.s	loc_6A3E
000071D6 E84E                       		lsr.w	#4,d6
000071D8 0446 000E                  		subi.w	#$E,d6
000071DC 6400                       		bcc.s	loc_6A3E
000071DE 4446                       		neg.w	d6
000071E0 6100 0000                  		bsr.w	sub_6B06
000071E4                            
000071E4                            loc_6A3E:
000071E4 0892 0003                  		bclr	#3,(a2)
000071E8 6700                       		beq.s	locret_6A80
000071EA 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071EE 322B 0004                  		move.w	4(a3),d1
000071F2 0241 FFF0                  		andi.w	#-$10,d1
000071F6 9841                       		sub.w	d1,d4
000071F8 3F04                       		move.w	d4,-(sp)
000071FA 3A3C 0140                  		move.w	#$140,d5
000071FE 6100 0000                  		bsr.w	sub_6C20
00007202 381F                       		move.w	(sp)+,d4
00007204 3A3C 0140                  		move.w	#$140,d5
00007208 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000720C 322B 0004                  		move.w	4(a3),d1
00007210 0241 FFF0                  		andi.w	#-$10,d1
00007214 9C41                       		sub.w	d1,d6
00007216 6D00                       		blt.s	locret_6A80
00007218 E84E                       		lsr.w	#4,d6
0000721A 0446 000E                  		subi.w	#$E,d6
0000721E 6400                       		bcc.s	locret_6A80
00007220 4446                       		neg.w	d6
00007222 6100 0000                  		bsr.w	sub_6B06
00007226                            
00007226                            locret_6A80:
00007226 4E75                       		rts	
00007228                            ; End of function sub_69F4
00007228                            
00007228                            ; ===========================================================================
00007228 4A12                       		tst.b	(a2)
0000722A 6700                       		beq.s	locret_6AD6
0000722C 0892 0002                  		bclr	#2,(a2)
00007230 6700                       		beq.s	loc_6AAC
00007232 383C 00D0                  		move.w	#$D0,d4
00007236 322B 0004                  		move.w	4(a3),d1
0000723A 0241 FFF0                  		andi.w	#-$10,d1
0000723E 9841                       		sub.w	d1,d4
00007240 3F04                       		move.w	d4,-(sp)
00007242 7AF0                       		moveq	#-$10,d5
00007244 6100 0000                  		bsr.w	sub_6C3C
00007248 381F                       		move.w	(sp)+,d4
0000724A 7AF0                       		moveq	#-$10,d5
0000724C 7C02                       		moveq	#2,d6
0000724E 6100 0000                  		bsr.w	sub_6B06
00007252                            
00007252                            loc_6AAC:
00007252 0892 0003                  		bclr	#3,(a2)
00007256 6700                       		beq.s	locret_6AD6
00007258 383C 00D0                  		move.w	#$D0,d4
0000725C 322B 0004                  		move.w	4(a3),d1
00007260 0241 FFF0                  		andi.w	#-$10,d1
00007264 9841                       		sub.w	d1,d4
00007266 3F04                       		move.w	d4,-(sp)
00007268 3A3C 0140                  		move.w	#$140,d5
0000726C 6100 0000                  		bsr.w	sub_6C3C
00007270 381F                       		move.w	(sp)+,d4
00007272 3A3C 0140                  		move.w	#$140,d5
00007276 7C02                       		moveq	#2,d6
00007278 6100 0000                  		bsr.w	sub_6B06
0000727C                            
0000727C                            locret_6AD6:
0000727C 4E75                       		rts	
0000727E                            
0000727E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000727E                            
0000727E                            
0000727E                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000727E 7C15                       		moveq	#$15,d6
00007280                            ; End of function sub_6AD8
00007280                            
00007280                            
00007280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007280                            
00007280                            
00007280                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007280 2E3C 0080 0000             		move.l	#$800000,d7
00007286 2200                       		move.l	d0,d1
00007288                            
00007288                            loc_6AE2:
00007288 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000728C 6100 0000                  		bsr.w	sub_6BD6
00007290 2001                       		move.l	d1,d0
00007292 6100 0000                  		bsr.w	sub_6B32
00007296 5801                       		addq.b	#4,d1
00007298 0201 007F                  		andi.b	#$7F,d1
0000729C 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072A0 0645 0010                  		addi.w	#$10,d5
000072A4 51CE FFE2                  		dbf	d6,loc_6AE2
000072A8 4E75                       		rts	
000072AA                            ; End of function sub_6ADA
000072AA                            
000072AA                            
000072AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072AA                            
000072AA                            
000072AA                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072AA 7C0F                       		moveq	#$F,d6
000072AC                            ; End of function sub_6B04
000072AC                            
000072AC                            
000072AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072AC                            
000072AC                            
000072AC                            sub_6B06:				; XREF: sub_6954
000072AC 2E3C 0080 0000             		move.l	#$800000,d7
000072B2 2200                       		move.l	d0,d1
000072B4                            
000072B4                            loc_6B0E:
000072B4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072B8 6100 0000                  		bsr.w	sub_6BD6
000072BC 2001                       		move.l	d1,d0
000072BE 6100 0000                  		bsr.w	sub_6B32
000072C2 0641 0100                  		addi.w	#$100,d1
000072C6 0241 0FFF                  		andi.w	#$FFF,d1
000072CA 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072CE 0644 0010                  		addi.w	#$10,d4
000072D2 51CE FFE0                  		dbf	d6,loc_6B0E
000072D6 4E75                       		rts	
000072D8                            ; End of function sub_6B06
000072D8                            
000072D8                            
000072D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D8                            
000072D8                            
000072D8                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000072D8 8042                       		or.w	d2,d0
000072DA 4840                       		swap	d0
000072DC 0810 0004                  		btst	#4,(a0)
000072E0 6600                       		bne.s	loc_6B6E
000072E2 0810 0003                  		btst	#3,(a0)
000072E6 6600                       		bne.s	loc_6B4E
000072E8 2A80                       		move.l	d0,(a5)
000072EA 2C99                       		move.l	(a1)+,(a6)
000072EC D087                       		add.l	d7,d0
000072EE 2A80                       		move.l	d0,(a5)
000072F0 2C99                       		move.l	(a1)+,(a6)
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6B4E:
000072F4 2A80                       		move.l	d0,(a5)
000072F6 2819                       		move.l	(a1)+,d4
000072F8 0A84 0800 0800             		eori.l	#$8000800,d4
000072FE 4844                       		swap	d4
00007300 2C84                       		move.l	d4,(a6)
00007302 D087                       		add.l	d7,d0
00007304 2A80                       		move.l	d0,(a5)
00007306 2819                       		move.l	(a1)+,d4
00007308 0A84 0800 0800             		eori.l	#$8000800,d4
0000730E 4844                       		swap	d4
00007310 2C84                       		move.l	d4,(a6)
00007312 4E75                       		rts	
00007314                            ; ===========================================================================
00007314                            
00007314                            loc_6B6E:
00007314 0810 0003                  		btst	#3,(a0)
00007318 6600                       		bne.s	loc_6B90
0000731A 2A80                       		move.l	d0,(a5)
0000731C 2A19                       		move.l	(a1)+,d5
0000731E 2819                       		move.l	(a1)+,d4
00007320 0A84 1000 1000             		eori.l	#$10001000,d4
00007326 2C84                       		move.l	d4,(a6)
00007328 D087                       		add.l	d7,d0
0000732A 2A80                       		move.l	d0,(a5)
0000732C 0A85 1000 1000             		eori.l	#$10001000,d5
00007332 2C85                       		move.l	d5,(a6)
00007334 4E75                       		rts	
00007336                            ; ===========================================================================
00007336                            
00007336                            loc_6B90:
00007336 2A80                       		move.l	d0,(a5)
00007338 2A19                       		move.l	(a1)+,d5
0000733A 2819                       		move.l	(a1)+,d4
0000733C 0A84 1800 1800             		eori.l	#$18001800,d4
00007342 4844                       		swap	d4
00007344 2C84                       		move.l	d4,(a6)
00007346 D087                       		add.l	d7,d0
00007348 2A80                       		move.l	d0,(a5)
0000734A 0A85 1800 1800             		eori.l	#$18001800,d5
00007350 4845                       		swap	d5
00007352 2C85                       		move.l	d5,(a6)
00007354 4E75                       		rts	
00007356                            ; End of function sub_6B32
00007356                            
00007356                            ; ===========================================================================
00007356 4E75                       		rts	
00007358                            ; ===========================================================================
00007358 2A80                       		move.l	d0,(a5)
0000735A 3A3C 2000                  		move.w	#$2000,d5
0000735E 3819                       		move.w	(a1)+,d4
00007360 D845                       		add.w	d5,d4
00007362 3C84                       		move.w	d4,(a6)
00007364 3819                       		move.w	(a1)+,d4
00007366 D845                       		add.w	d5,d4
00007368 3C84                       		move.w	d4,(a6)
0000736A D087                       		add.l	d7,d0
0000736C 2A80                       		move.l	d0,(a5)
0000736E 3819                       		move.w	(a1)+,d4
00007370 D845                       		add.w	d5,d4
00007372 3C84                       		move.w	d4,(a6)
00007374 3819                       		move.w	(a1)+,d4
00007376 D845                       		add.w	d5,d4
00007378 3C84                       		move.w	d4,(a6)
0000737A 4E75                       		rts	
0000737C                            
0000737C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000737C                            
0000737C                            
0000737C                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000737C 43F8 B000                  		lea	($FFFFB000).w,a1
00007380 D86B 0004                  		add.w	4(a3),d4
00007384 DA53                       		add.w	(a3),d5
00007386 3604                       		move.w	d4,d3
00007388 E24B                       		lsr.w	#1,d3
0000738A 0243 0380                  		andi.w	#$380,d3
0000738E E64D                       		lsr.w	#3,d5
00007390 3005                       		move.w	d5,d0
00007392 EA48                       		lsr.w	#5,d0
00007394 0240 007F                  		andi.w	#$7F,d0
00007398 D043                       		add.w	d3,d0
0000739A 76FF                       		moveq	#-1,d3
0000739C 1634 0000                  		move.b	(a4,d0.w),d3
000073A0 6700                       		beq.s	locret_6C1E
000073A2 5303                       		subq.b	#1,d3
000073A4 0243 007F                  		andi.w	#$7F,d3
000073A8 EE5B                       		ror.w	#7,d3
000073AA D844                       		add.w	d4,d4
000073AC 0244 01E0                  		andi.w	#$1E0,d4
000073B0 0245 001E                  		andi.w	#$1E,d5
000073B4 D644                       		add.w	d4,d3
000073B6 D645                       		add.w	d5,d3
000073B8 2043                       		movea.l	d3,a0
000073BA 3610                       		move.w	(a0),d3
000073BC 0243 03FF                  		andi.w	#$3FF,d3
000073C0 E74B                       		lsl.w	#3,d3
000073C2 D2C3                       		adda.w	d3,a1
000073C4                            
000073C4                            locret_6C1E:
000073C4 4E75                       		rts	
000073C6                            ; End of function sub_6BD6
000073C6                            
000073C6                            
000073C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073C6                            
000073C6                            
000073C6                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000073C6 D86B 0004                  		add.w	4(a3),d4
000073CA DA53                       		add.w	(a3),d5
000073CC 0244 00F0                  		andi.w	#$F0,d4
000073D0 0245 01F0                  		andi.w	#$1F0,d5
000073D4 E94C                       		lsl.w	#4,d4
000073D6 E44D                       		lsr.w	#2,d5
000073D8 D845                       		add.w	d5,d4
000073DA 7003                       		moveq	#3,d0
000073DC 4840                       		swap	d0
000073DE 3004                       		move.w	d4,d0
000073E0 4E75                       		rts	
000073E2                            ; End of function sub_6C20
000073E2                            
000073E2                            
000073E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073E2                            ; not used
000073E2                            
000073E2                            
000073E2                            sub_6C3C:
000073E2 D86B 0004                  		add.w	4(a3),d4
000073E6 DA53                       		add.w	(a3),d5
000073E8 0244 00F0                  		andi.w	#$F0,d4
000073EC 0245 01F0                  		andi.w	#$1F0,d5
000073F0 E94C                       		lsl.w	#4,d4
000073F2 E44D                       		lsr.w	#2,d5
000073F4 D845                       		add.w	d5,d4
000073F6 7002                       		moveq	#2,d0
000073F8 4840                       		swap	d0
000073FA 3004                       		move.w	d4,d0
000073FC 4E75                       		rts	
000073FE                            ; End of function sub_6C3C
000073FE                            
000073FE                            ; ---------------------------------------------------------------------------
000073FE                            ; Subroutine to	load tiles as soon as the level	appears
000073FE                            ; ---------------------------------------------------------------------------
000073FE                            
000073FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073FE                            
000073FE                            
000073FE                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000073FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00007404 4DF9 00C0 0000             		lea	($C00000).l,a6
0000740A 47F8 F700                  		lea	($FFFFF700).w,a3
0000740E 49F8 A400                  		lea	($FFFFA400).w,a4
00007412 343C 4000                  		move.w	#$4000,d2
00007416 6100                       		bsr.s	LoadTilesFromStart2
00007418 47F8 F708                  		lea	($FFFFF708).w,a3
0000741C 49F8 A440                  		lea	($FFFFA440).w,a4
00007420 343C 6000                  		move.w	#$6000,d2
00007424                            ; End of function LoadTilesFromStart
00007424                            
00007424                            
00007424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007424                            
00007424                            
00007424                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007424 78F0                       		moveq	#-$10,d4
00007426 7C0F                       		moveq	#$F,d6
00007428                            
00007428                            loc_6C82:
00007428 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000742C 7A00                       		moveq	#0,d5
0000742E 3204                       		move.w	d4,d1
00007430 6100 FF94                  		bsr.w	sub_6C20
00007434 3801                       		move.w	d1,d4
00007436 7A00                       		moveq	#0,d5
00007438 7C1F                       		moveq	#$1F,d6
0000743A 6100 FE44                  		bsr.w	sub_6ADA
0000743E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007442 0644 0010                  		addi.w	#$10,d4
00007446 51CE FFE0                  		dbf	d6,loc_6C82
0000744A 4E75                       		rts	
0000744C                            ; End of function LoadTilesFromStart2
0000744C                            
0000744C                            ; ---------------------------------------------------------------------------
0000744C                            ; Main Load Block loading subroutine
0000744C                            ; ---------------------------------------------------------------------------
0000744C                            
0000744C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000744C                            
0000744C                            
0000744C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000744C 7000                       		moveq	#0,d0
0000744E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007452 E948                       		lsl.w	#4,d0
00007454 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000745A 45F2 0000                  		lea	(a2,d0.w),a2
0000745E 2F0A                       		move.l	a2,-(sp)
00007460 588A                       		addq.l	#4,a2
00007462 205A                       		movea.l	(a2)+,a0
00007464 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007468 303C 0000                  		move.w	#0,d0
0000746C 6100 A4E6                  		bsr.w	EniDec
00007470 205A                       		movea.l	(a2)+,a0
00007472 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007478 6100 A658                  		bsr.w	KosDec
0000747C 6100 0000                  		bsr.w	LevelLayoutLoad
00007480 301A                       		move.w	(a2)+,d0
00007482 3012                       		move.w	(a2),d0
00007484 0240 00FF                  		andi.w	#$FF,d0
00007488 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000748E 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007490 700C                       		moveq	#$C,d0		; use SB3 pallet
00007492                            
00007492                            MLB_ChkSBZPal:
00007492 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007498 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000749A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000074A0 6600                       		bne.s	MLB_NormalPal	; if not, branch
000074A2                            
000074A2                            MLB_UsePal0E:
000074A2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074A4                            
000074A4                            MLB_NormalPal:
000074A4 6100 AE58                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074A8 245F                       		movea.l	(sp)+,a2
000074AA 584A                       		addq.w	#4,a2
000074AC 7000                       		moveq	#0,d0
000074AE 1012                       		move.b	(a2),d0
000074B0 6700                       		beq.s	locret_6D10
000074B2 6100 A302                  		bsr.w	LoadPLC		; load pattern load cues
000074B6                            
000074B6                            locret_6D10:
000074B6 4E75                       		rts	
000074B8                            ; End of function MainLoadBlockLoad
000074B8                            
000074B8                            ; ---------------------------------------------------------------------------
000074B8                            ; Level	layout loading subroutine
000074B8                            ; ---------------------------------------------------------------------------
000074B8                            
000074B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074B8                            
000074B8                            
000074B8                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000074B8 47F8 A400                  		lea	($FFFFA400).w,a3
000074BC 323C 01FF                  		move.w	#$1FF,d1
000074C0 7000                       		moveq	#0,d0
000074C2                            
000074C2                            LevLoad_ClrRam:
000074C2 26C0                       		move.l	d0,(a3)+
000074C4 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000074C8                            
000074C8 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000074CC 7200                       		moveq	#0,d1
000074CE 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000074D2 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000074D6 7202                       		moveq	#2,d1
000074D8                            ; End of function LevelLayoutLoad
000074D8                            
000074D8                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000074D8                            
000074D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074D8                            
000074D8                            
000074D8                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000074D8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000074DC ED08                       		lsl.b	#6,d0
000074DE EA48                       		lsr.w	#5,d0
000074E0 3400                       		move.w	d0,d2
000074E2 D040                       		add.w	d0,d0
000074E4 D042                       		add.w	d2,d0
000074E6 D041                       		add.w	d1,d0
000074E8 43F9 0000 0000             		lea	(Level_Index).l,a1
000074EE 3031 0000                  		move.w	(a1,d0.w),d0
000074F2 43F1 0000                  		lea	(a1,d0.w),a1
000074F6 7200                       		moveq	#0,d1
000074F8 3401                       		move.w	d1,d2
000074FA 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000074FC 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000074FE                            
000074FE                            LevLoad_NumRows:
000074FE 3001                       		move.w	d1,d0
00007500 204B                       		movea.l	a3,a0
00007502                            
00007502                            LevLoad_Row:
00007502 10D9                       		move.b	(a1)+,(a0)+
00007504 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007508 47EB 0080                  		lea	$80(a3),a3	; do next row
0000750C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007510 4E75                       		rts	
00007512                            ; End of function LevelLayoutLoad2
00007512                            
00007512                            ; ---------------------------------------------------------------------------
00007512                            ; Dynamic screen resize	loading	subroutine
00007512                            ; ---------------------------------------------------------------------------
00007512                            
00007512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007512                            
00007512                            
00007512                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007512 7000                       		moveq	#0,d0
00007514 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007518 D040                       		add.w	d0,d0
0000751A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000751E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007522 7202                       		moveq	#2,d1
00007524 3038 F726                  		move.w	($FFFFF726).w,d0
00007528 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000752C 6700                       		beq.s	locret_6DAA
0000752E 6400                       		bcc.s	loc_6DAC
00007530 4441                       		neg.w	d1
00007532 3038 F704                  		move.w	($FFFFF704).w,d0
00007536 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000753A 6300                       		bls.s	loc_6DA0
0000753C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007540 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007546                            
00007546                            loc_6DA0:
00007546 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000754A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007550                            
00007550                            locret_6DAA:
00007550 4E75                       		rts	
00007552                            ; ===========================================================================
00007552                            
00007552                            loc_6DAC:				; XREF: DynScrResizeLoad
00007552 3038 F704                  		move.w	($FFFFF704).w,d0
00007556 5040                       		addq.w	#8,d0
00007558 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000755C 6500                       		bcs.s	loc_6DC4
0000755E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007564 6700                       		beq.s	loc_6DC4
00007566 D241                       		add.w	d1,d1
00007568 D241                       		add.w	d1,d1
0000756A                            
0000756A                            loc_6DC4:
0000756A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000756E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007574 4E75                       		rts	
00007576                            ; End of function DynScrResizeLoad
00007576                            
00007576                            ; ===========================================================================
00007576                            ; ---------------------------------------------------------------------------
00007576                            ; Offset index for dynamic screen resizing
00007576                            ; ---------------------------------------------------------------------------
00007576 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000757A 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000757E 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007582 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007586                            ; ===========================================================================
00007586                            ; ---------------------------------------------------------------------------
00007586                            ; Green	Hill Zone dynamic screen resizing
00007586                            ; ---------------------------------------------------------------------------
00007586                            
00007586                            Resize_GHZ:				; XREF: Resize_Index
00007586 7000                       		moveq	#0,d0
00007588 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000758C D040                       		add.w	d0,d0
0000758E 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007592 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007596                            ; ===========================================================================
00007596 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007598 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000759A 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000759C                            ; ===========================================================================
0000759C                            
0000759C                            Resize_GHZ1:
0000759C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000075A2 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075A8 6500                       		bcs.s	locret_6E08	; if not, branch
000075AA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000075B0                            
000075B0                            locret_6E08:
000075B0 4E75                       		rts	
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            Resize_GHZ2:
000075B2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000075B8 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000075BE 6500                       		bcs.s	locret_6E3A
000075C0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000075C6 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000075CC 6500                       		bcs.s	locret_6E3A
000075CE 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000075D4 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
000075DA 6500                       		bcs.s	locret_6E3A
000075DC 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
000075E2 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
000075E8 6500                       		bcs.s	locret_6E3A
000075EA 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
000075F0                            		
000075F0                            locret_6E3A:
000075F0 4E75                       		rts	
000075F2                            ; ===========================================================================
000075F2                            
000075F2                            Resize_GHZ3:
000075F2 7000                       		moveq	#0,d0
000075F4 1038 F742                  		move.b	($FFFFF742).w,d0
000075F8 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000075FC 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007600                            ; ===========================================================================
00007600 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007602 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007604 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007606                            ; ===========================================================================
00007606                            
00007606                            Resize_GHZ3main:
00007606 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000760C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007612 6500                       		bcs.s	locret_6E96
00007614 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000761A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007620 6500                       		bcs.s	locret_6E96
00007622 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007628 6500                       		bcs.s	loc_6E98
0000762A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007630 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007636 6400                       		bcc.s	loc_6E8E
00007638 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000763E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007644                            
00007644                            loc_6E8E:
00007644 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000764A 6400                       		bcc.s	loc_6E98
0000764C                            
0000764C                            locret_6E96:
0000764C 4E75                       		rts	
0000764E                            ; ===========================================================================
0000764E                            
0000764E                            loc_6E98:
0000764E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007654 5438 F742                  		addq.b	#2,($FFFFF742).w
00007658 4E75                       		rts	
0000765A                            ; ===========================================================================
0000765A                            
0000765A                            Resize_GHZ3boss:
0000765A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007660 6400                       		bcc.s	loc_6EB0
00007662 5538 F742                  		subq.b	#2,($FFFFF742).w
00007666                            
00007666                            loc_6EB0:
00007666 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000766C 6500                       		bcs.s	locret_6EE8
0000766E 6100 0000                  		bsr.w	SingleObjLoad
00007672 6600                       		bne.s	loc_6ED0
00007674 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007678 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000767E 337C 0280 000C             		move.w	#$280,$C(a1)
00007684                            
00007684                            loc_6ED0:
00007684 303C 008C                  		move.w	#$8C,d0
00007688 6100 9F42                  		bsr.w	PlaySound	; play boss music
0000768C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007692 5438 F742                  		addq.b	#2,($FFFFF742).w
00007696 7011                       		moveq	#$11,d0
00007698 6000 A11C                  		bra.w	LoadPLC		; load boss patterns
0000769C                            ; ===========================================================================
0000769C                            
0000769C                            locret_6EE8:
0000769C 4E75                       		rts	
0000769E                            ; ===========================================================================
0000769E                            
0000769E                            Resize_GHZ3end:
0000769E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076A4 4E75                       		rts	
000076A6                            ; ===========================================================================
000076A6                            ; ---------------------------------------------------------------------------
000076A6                            ; Labyrinth Zone dynamic screen	resizing
000076A6                            ; ---------------------------------------------------------------------------
000076A6                            
000076A6                            Resize_LZ:				; XREF: Resize_Index
000076A6 7000                       		moveq	#0,d0
000076A8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076AC D040                       		add.w	d0,d0
000076AE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000076B2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000076B6                            ; ===========================================================================
000076B6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000076B8 0000                       		dc.w Resize_LZ12-Resize_LZx
000076BA 0000                       		dc.w Resize_LZ3-Resize_LZx
000076BC 0000                       		dc.w Resize_SBZ3-Resize_LZx
000076BE                            ; ===========================================================================
000076BE                            
000076BE                            Resize_LZ12:
000076BE 4E75                       		rts	
000076C0                            ; ===========================================================================
000076C0                            
000076C0                            Resize_LZ3:
000076C0 7000                       		moveq	#0,d0
000076C2 1038 F742                  		move.b	($FFFFF742).w,d0
000076C6 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000076CA 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000076CE                            ; ===========================================================================
000076CE                            off_6E4A2:	
000076CE 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000076D0 0000                       		dc.w Resize_LZ3end-off_6E4A2
000076D2                            ; ===========================================================================
000076D2                            Resize_LZ3boss:
000076D2 4A38 F742                  		tst.b	($FFFFF742).w
000076D6 6600                       		bne.s	locret_6F62
000076D8 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000076DE 6500                       		bcs.s	locret_6F62
000076E0 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000076E6 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000076EC                            
000076EC 6100 0000                  		bsr.w	SingleObjLoad
000076F0 6600                       		bne.s	loc_6F4A
000076F2 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000076F6 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000076FC 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007702                            loc_6F4A:
00007702 303C 008C                  		move.w	#$8C,d0
00007706 6100 9EC4                  		bsr.w	PlaySound	; play boss music
0000770A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007710 5438 F742                  		addq.b	#2,($FFFFF742).w
00007714 7020                       		moveq	#$20,d0
00007716 6000 A09E                  		bra.w	LoadPLC		; load boss patterns
0000771A                            ; ===========================================================================
0000771A                            
0000771A                            locret_6F62:
0000771A 4E75                       		rts	
0000771C                            ; ===========================================================================
0000771C                            
0000771C                            Resize_LZ3end:
0000771C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007722 4E75                       		rts	
00007724                            ; ===========================================================================
00007724                            
00007724                            Resize_SBZ3:
00007724 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000772A 6500                       		bcs.s	locret_6F8C
0000772C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007732 6400                       		bcc.s	locret_6F8C	; if not, branch
00007734 4238 FE30                  		clr.b	($FFFFFE30).w
00007738 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000773E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007744 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000774A                            
0000774A                            locret_6F8C:
0000774A 4E75                       		rts	
0000774C                            ; ===========================================================================
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            ; Marble Zone dynamic screen resizing
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            
0000774C                            Resize_MZ:				; XREF: Resize_Index
0000774C 7000                       		moveq	#0,d0
0000774E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007752 D040                       		add.w	d0,d0
00007754 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007758 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000775C                            ; ===========================================================================
0000775C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000775E 0000                       		dc.w Resize_MZ2-Resize_MZx
00007760 0000                       		dc.w Resize_MZ3-Resize_MZx
00007762                            ; ===========================================================================
00007762                            
00007762                            Resize_MZ1:
00007762 7000                       		moveq	#0,d0
00007764 1038 F742                  		move.b	($FFFFF742).w,d0
00007768 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000776C 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007770                            ; ===========================================================================
00007770 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007772 0000                       		dc.w loc_6FEA-off_6FB2
00007774 0000                       		dc.w loc_702E-off_6FB2
00007776 0000                       		dc.w loc_7050-off_6FB2
00007778                            ; ===========================================================================
00007778                            
00007778                            loc_6FBA:
00007778 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000777E 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007784 6500                       		bcs.s	locret_6FE8
00007786 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000778C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007792 6500                       		bcs.s	locret_6FE8
00007794 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000779A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077A0 6500                       		bcs.s	locret_6FE8
000077A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000077A6                            
000077A6                            locret_6FE8:
000077A6 4E75                       		rts	
000077A8                            ; ===========================================================================
000077A8                            
000077A8                            loc_6FEA:
000077A8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077AE 6400                       		bcc.s	loc_6FF8
000077B0 5538 F742                  		subq.b	#2,($FFFFF742).w
000077B4 4E75                       		rts	
000077B6                            ; ===========================================================================
000077B6                            
000077B6                            loc_6FF8:
000077B6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000077BC 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000077C2 6400                       		bcc.s	locret_702C
000077C4 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000077CA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077D0 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000077D6 6400                       		bcc.s	locret_702C
000077D8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000077DE 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077E4 6500                       		bcs.s	locret_702C
000077E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000077EA                            
000077EA                            locret_702C:
000077EA 4E75                       		rts	
000077EC                            ; ===========================================================================
000077EC                            
000077EC                            loc_702E:
000077EC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077F2 6400                       		bcc.s	loc_703C
000077F4 5538 F742                  		subq.b	#2,($FFFFF742).w
000077F8 4E75                       		rts	
000077FA                            ; ===========================================================================
000077FA                            
000077FA                            loc_703C:
000077FA 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007800 6500                       		bcs.s	locret_704E
00007802 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007808 5438 F742                  		addq.b	#2,($FFFFF742).w
0000780C                            
0000780C                            locret_704E:
0000780C 4E75                       		rts	
0000780E                            ; ===========================================================================
0000780E                            
0000780E                            loc_7050:
0000780E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007814 6500                       		bcs.s	locret_7072
00007816 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000781C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007822 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007828 6500                       		bcs.s	locret_7072
0000782A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007830                            
00007830                            locret_7072:
00007830 4E75                       		rts	
00007832                            ; ===========================================================================
00007832                            
00007832                            Resize_MZ2:
00007832 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007838 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000783E 6500                       		bcs.s	locret_7088
00007840 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007846                            
00007846                            locret_7088:
00007846 4E75                       		rts	
00007848                            ; ===========================================================================
00007848                            
00007848                            Resize_MZ3:
00007848 7000                       		moveq	#0,d0
0000784A 1038 F742                  		move.b	($FFFFF742).w,d0
0000784E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007852 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007856                            ; ===========================================================================
00007856 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007858 0000                       		dc.w Resize_MZ3end-off_7098
0000785A                            ; ===========================================================================
0000785A                            
0000785A                            Resize_MZ3boss:
0000785A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007860 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007866 6500                       		bcs.s	locret_70E8
00007868 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000786E 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007874 6500                       		bcs.s	locret_70E8
00007876 6100 0000                  		bsr.w	SingleObjLoad
0000787A 6600                       		bne.s	loc_70D0
0000787C 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007880 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007886 337C 022C 000C             		move.w	#$22C,$C(a1)
0000788C                            
0000788C                            loc_70D0:
0000788C 303C 008C                  		move.w	#$8C,d0
00007890 6100 9D3A                  		bsr.w	PlaySound	; play boss music
00007894 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000789A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000789E 7011                       		moveq	#$11,d0
000078A0 6000 9F14                  		bra.w	LoadPLC		; load boss patterns
000078A4                            ; ===========================================================================
000078A4                            
000078A4                            locret_70E8:
000078A4 4E75                       		rts	
000078A6                            ; ===========================================================================
000078A6                            
000078A6                            Resize_MZ3end:
000078A6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078AC 4E75                       		rts	
000078AE                            ; ===========================================================================
000078AE                            ; ---------------------------------------------------------------------------
000078AE                            ; Star Light Zone dynamic screen resizing
000078AE                            ; ---------------------------------------------------------------------------
000078AE                            
000078AE                            Resize_SLZ:				; XREF: Resize_Index
000078AE 7000                       		moveq	#0,d0
000078B0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078B4 D040                       		add.w	d0,d0
000078B6 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000078BA 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000078BE                            ; ===========================================================================
000078BE 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000078C0 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000078C2 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000078C4                            ; ===========================================================================
000078C4                            
000078C4                            Resize_SLZ1:
000078C4 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000078CA 4E75                       		rts	
000078CC                            
000078CC                            Resize_SLZ2:
000078CC 4E75                       		rts	
000078CE                            ; ===========================================================================
000078CE                            
000078CE                            Resize_SLZ3:
000078CE 7000                       		moveq	#0,d0
000078D0 1038 F742                  		move.b	($FFFFF742).w,d0
000078D4 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000078D8 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000078DC                            ; ===========================================================================
000078DC 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000078DE 0000                       		dc.w Resize_SLZ3boss-off_7118
000078E0 0000                       		dc.w Resize_SLZ3end-off_7118
000078E2                            ; ===========================================================================
000078E2                            
000078E2                            Resize_SLZ3main:
000078E2 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000078E8 6500                       		bcs.s	locret_7130
000078EA 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078F0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F4                            
000078F4                            locret_7130:
000078F4 4E75                       		rts	
000078F6                            ; ===========================================================================
000078F6                            
000078F6                            Resize_SLZ3boss:
000078F6 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000078FC 6500                       		bcs.s	locret_715C
000078FE 6100 0000                  		bsr.w	SingleObjLoad
00007902 6600                       		bne.s	loc_7144
00007904 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007908                            
00007908                            loc_7144:
00007908 303C 008C                  		move.w	#$8C,d0
0000790C 6100 9CBE                  		bsr.w	PlaySound	; play boss music
00007910 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007916 5438 F742                  		addq.b	#2,($FFFFF742).w
0000791A 7011                       		moveq	#$11,d0
0000791C 6000 9E98                  		bra.w	LoadPLC		; load boss patterns
00007920                            ; ===========================================================================
00007920                            
00007920                            locret_715C:
00007920 4E75                       		rts	
00007922                            ; ===========================================================================
00007922                            
00007922                            Resize_SLZ3end:
00007922 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007928 4E75                       		rts
0000792A 4E75                       		rts
0000792C                            ; ===========================================================================
0000792C                            ; ---------------------------------------------------------------------------
0000792C                            ; Spring Yard Zone dynamic screen resizing
0000792C                            ; ---------------------------------------------------------------------------
0000792C                            
0000792C                            Resize_SYZ:				; XREF: Resize_Index
0000792C 7000                       		moveq	#0,d0
0000792E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007932 D040                       		add.w	d0,d0
00007934 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007938 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000793C                            ; ===========================================================================
0000793C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000793E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007940 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007942                            ; ===========================================================================
00007942                            
00007942                            Resize_SYZ1:
00007942 4E75                       		rts	
00007944                            ; ===========================================================================
00007944                            
00007944                            Resize_SYZ2:
00007944 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000794A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007950 6500                       		bcs.s	locret_71A2
00007952 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007958 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000795E 6500                       		bcs.s	locret_71A2
00007960 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007966                            
00007966                            locret_71A2:
00007966 4E75                       		rts	
00007968                            ; ===========================================================================
00007968                            
00007968                            Resize_SYZ3:
00007968 7000                       		moveq	#0,d0
0000796A 1038 F742                  		move.b	($FFFFF742).w,d0
0000796E 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007972 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007976                            ; ===========================================================================
00007976 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007978 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000797A 0000                       		dc.w Resize_SYZ3end-off_71B2
0000797C                            ; ===========================================================================
0000797C                            
0000797C                            Resize_SYZ3main:
0000797C 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007982 6500                       		bcs.s	locret_71CE
00007984 6100 0000                  		bsr.w	SingleObjLoad
00007988 6600                       		bne.s	locret_71CE
0000798A 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000798E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007992                            
00007992                            locret_71CE:
00007992 4E75                       		rts	
00007994                            ; ===========================================================================
00007994                            
00007994                            Resize_SYZ3boss:
00007994 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000799A 6500                       		bcs.s	locret_7200
0000799C 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000079A2 6100 0000                  		bsr.w	SingleObjLoad
000079A6 6600                       		bne.s	loc_71EC
000079A8 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079AC 5438 F742                  		addq.b	#2,($FFFFF742).w
000079B0                            
000079B0                            loc_71EC:
000079B0 303C 008C                  		move.w	#$8C,d0
000079B4 6100 9C16                  		bsr.w	PlaySound	; play boss music
000079B8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079BE 7011                       		moveq	#$11,d0
000079C0 6000 9DF4                  		bra.w	LoadPLC		; load boss patterns
000079C4                            ; ===========================================================================
000079C4                            
000079C4                            locret_7200:
000079C4 4E75                       		rts	
000079C6                            ; ===========================================================================
000079C6                            
000079C6                            Resize_SYZ3end:
000079C6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079CC 4E75                       		rts	
000079CE                            ; ===========================================================================
000079CE                            ; ---------------------------------------------------------------------------
000079CE                            ; Scrap	Brain Zone dynamic screen resizing
000079CE                            ; ---------------------------------------------------------------------------
000079CE                            
000079CE                            Resize_SBZ:				; XREF: Resize_Index
000079CE 7000                       		moveq	#0,d0
000079D0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079D4 D040                       		add.w	d0,d0
000079D6 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000079DA 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000079DE                            ; ===========================================================================
000079DE 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000079E0 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000079E2 0000                       		dc.w Resize_FZ-Resize_SBZx
000079E4                            ; ===========================================================================
000079E4                            
000079E4                            Resize_SBZ1:
000079E4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000079EA 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000079F0 6500                       		bcs.s	locret_7242
000079F2 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000079F8 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000079FE 6500                       		bcs.s	locret_7242
00007A00 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A06                            
00007A06                            locret_7242:
00007A06 4E75                       		rts	
00007A08                            ; ===========================================================================
00007A08                            
00007A08                            Resize_SBZ2:
00007A08 7000                       		moveq	#0,d0
00007A0A 1038 F742                  		move.b	($FFFFF742).w,d0
00007A0E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A12 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A16                            ; ===========================================================================
00007A16 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A18 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A1A 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A1C 0000                       		dc.w Resize_SBZ2end-off_7252
00007A1E                            ; ===========================================================================
00007A1E                            
00007A1E                            Resize_SBZ2main:
00007A1E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A24 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A2A 6500                       		bcs.s	locret_727A
00007A2C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A32 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A38 6500                       		bcs.s	locret_727A
00007A3A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A3E                            
00007A3E                            locret_727A:
00007A3E 4E75                       		rts	
00007A40                            ; ===========================================================================
00007A40                            
00007A40                            Resize_SBZ2boss:
00007A40 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A46 6500                       		bcs.s	locret_7298
00007A48 6100 0000                  		bsr.w	SingleObjLoad
00007A4C 6600                       		bne.s	locret_7298
00007A4E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007A52 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A56 701E                       		moveq	#$1E,d0
00007A58 6000 9D5C                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007A5C                            ; ===========================================================================
00007A5C                            
00007A5C                            locret_7298:
00007A5C 4E75                       		rts	
00007A5E                            ; ===========================================================================
00007A5E                            
00007A5E                            Resize_SBZ2boss2:
00007A5E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007A64 6500                       		bcs.s	loc_72B6
00007A66 6100 0000                  		bsr.w	SingleObjLoad
00007A6A 6600                       		bne.s	loc_72B0
00007A6C 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007A70 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A74                            
00007A74                            loc_72B0:
00007A74 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A7A                            
00007A7A                            loc_72B6:
00007A7A 6000                       		bra.s	loc_72C2
00007A7C                            ; ===========================================================================
00007A7C                            
00007A7C                            Resize_SBZ2end:
00007A7C 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007A82 6500                       		bcs.s	loc_72C2
00007A84 4E75                       		rts	
00007A86                            ; ===========================================================================
00007A86                            
00007A86                            loc_72C2:
00007A86 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A8C 4E75                       		rts	
00007A8E                            ; ===========================================================================
00007A8E                            
00007A8E                            Resize_FZ:
00007A8E 7000                       		moveq	#0,d0
00007A90 1038 F742                  		move.b	($FFFFF742).w,d0
00007A94 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007A98 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007A9C                            ; ===========================================================================
00007A9C 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007AA0 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AA4 0000                       		dc.w Resize_FZend2-off_72D8
00007AA6                            ; ===========================================================================
00007AA6                            
00007AA6                            Resize_FZmain:
00007AA6 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AAC 6500                       		bcs.s	loc_72F4
00007AAE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AB2 701F                       		moveq	#$1F,d0
00007AB4 6100 9D00                  		bsr.w	LoadPLC		; load FZ boss patterns
00007AB8                            
00007AB8                            loc_72F4:
00007AB8 60CC                       		bra.s	loc_72C2
00007ABA                            ; ===========================================================================
00007ABA                            
00007ABA                            Resize_FZboss:
00007ABA 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007AC0 6500                       		bcs.s	loc_7312
00007AC2 6100 0000                  		bsr.w	SingleObjLoad
00007AC6 6600                       		bne.s	loc_7312
00007AC8 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007ACC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AD0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007AD6                            
00007AD6                            loc_7312:
00007AD6 60AE                       		bra.s	loc_72C2
00007AD8                            ; ===========================================================================
00007AD8                            
00007AD8                            Resize_FZend:
00007AD8 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007ADE 6500                       		bcs.s	loc_7320
00007AE0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AE4                            
00007AE4                            loc_7320:
00007AE4 60A0                       		bra.s	loc_72C2
00007AE6                            ; ===========================================================================
00007AE6                            
00007AE6                            locret_7322:
00007AE6 4E75                       		rts	
00007AE8                            ; ===========================================================================
00007AE8                            
00007AE8                            Resize_FZend2:
00007AE8 609C                       		bra.s	loc_72C2
00007AEA                            ; ===========================================================================
00007AEA                            ; ---------------------------------------------------------------------------
00007AEA                            ; Ending sequence dynamic screen resizing (empty)
00007AEA                            ; ---------------------------------------------------------------------------
00007AEA                            
00007AEA                            Resize_Ending:				; XREF: Resize_Index
00007AEA 4E75                       		rts	
00007AEC                            ; ===========================================================================
00007AEC                            ; ---------------------------------------------------------------------------
00007AEC                            ; Object 11 - GHZ bridge
00007AEC                            ; ---------------------------------------------------------------------------
00007AEC                            
00007AEC                            Obj11:					; XREF: Obj_Index
00007AEC 7000                       		moveq	#0,d0
00007AEE 1028 0024                  		move.b	$24(a0),d0
00007AF2 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007AF6 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007AFA                            ; ===========================================================================
00007AFA 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007AFE 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007B02 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B06                            ; ===========================================================================
00007B06                            
00007B06                            Obj11_Main:				; XREF: Obj11_Index
00007B06 5428 0024                  		addq.b	#2,$24(a0)
00007B0A 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B12 317C 438E 0002             		move.w	#$438E,2(a0)
00007B18 117C 0004 0001             		move.b	#4,1(a0)
00007B1E 117C 0003 0018             		move.b	#3,$18(a0)
00007B24 117C 0080 0019             		move.b	#$80,$19(a0)
00007B2A 3428 000C                  		move.w	$C(a0),d2
00007B2E 3628 0008                  		move.w	8(a0),d3
00007B32 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B34 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B38 7200                       		moveq	#0,d1
00007B3A 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B3C 14FC 0000                  		move.b	#0,(a2)+
00007B40 3001                       		move.w	d1,d0
00007B42 E248                       		lsr.w	#1,d0
00007B44 E948                       		lsl.w	#4,d0
00007B46 9640                       		sub.w	d0,d3
00007B48 5501                       		subq.b	#2,d1
00007B4A 6500                       		bcs.s	Obj11_Action
00007B4C                            
00007B4C                            Obj11_MakeBdg:
00007B4C 6100 0000                  		bsr.w	SingleObjLoad
00007B50 6600                       		bne.s	Obj11_Action
00007B52 5228 0028                  		addq.b	#1,$28(a0)
00007B56 B668 0008                  		cmp.w	8(a0),d3
00007B5A 6600                       		bne.s	loc_73B8
00007B5C 0643 0010                  		addi.w	#$10,d3
00007B60 3142 000C                  		move.w	d2,$C(a0)
00007B64 3142 003C                  		move.w	d2,$3C(a0)
00007B68 3A08                       		move.w	a0,d5
00007B6A 0445 D000                  		subi.w	#-$3000,d5
00007B6E EC4D                       		lsr.w	#6,d5
00007B70 0245 007F                  		andi.w	#$7F,d5
00007B74 14C5                       		move.b	d5,(a2)+
00007B76 5228 0028                  		addq.b	#1,$28(a0)
00007B7A                            
00007B7A                            loc_73B8:				; XREF: ROM:00007398j
00007B7A 3A09                       		move.w	a1,d5
00007B7C 0445 D000                  		subi.w	#-$3000,d5
00007B80 EC4D                       		lsr.w	#6,d5
00007B82 0245 007F                  		andi.w	#$7F,d5
00007B86 14C5                       		move.b	d5,(a2)+
00007B88 137C 000A 0024             		move.b	#$A,$24(a1)
00007B8E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007B90 3342 000C                  		move.w	d2,$C(a1)
00007B94 3342 003C                  		move.w	d2,$3C(a1)
00007B98 3343 0008                  		move.w	d3,8(a1)
00007B9C 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BA4 337C 438E 0002             		move.w	#$438E,2(a1)
00007BAA 137C 0004 0001             		move.b	#4,1(a1)
00007BB0 137C 0003 0018             		move.b	#3,$18(a1)
00007BB6 137C 0008 0019             		move.b	#8,$19(a1)
00007BBC 0643 0010                  		addi.w	#$10,d3
00007BC0 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007BC4                            
00007BC4                            Obj11_Action:				; XREF: Obj11_Index
00007BC4 6100                       		bsr.s	Obj11_Solid
00007BC6 4A28 003E                  		tst.b	$3E(a0)
00007BCA 6700                       		beq.s	Obj11_Display
00007BCC 5928 003E                  		subq.b	#4,$3E(a0)
00007BD0 6100 0000                  		bsr.w	Obj11_Bend
00007BD4                            
00007BD4                            Obj11_Display:
00007BD4 6100 0000                  		bsr.w	DisplaySprite
00007BD8 6000 0000                  		bra.w	Obj11_ChkDel
00007BDC                            
00007BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BDC                            
00007BDC                            
00007BDC                            Obj11_Solid:				; XREF: Obj11_Action
00007BDC 7200                       		moveq	#0,d1
00007BDE 1228 0028                  		move.b	$28(a0),d1
00007BE2 E749                       		lsl.w	#3,d1
00007BE4 3401                       		move.w	d1,d2
00007BE6 5041                       		addq.w	#8,d1
00007BE8 D442                       		add.w	d2,d2
00007BEA 43F8 D000                  		lea	($FFFFD000).w,a1
00007BEE 4A69 0012                  		tst.w	$12(a1)
00007BF2 6B00 0000                  		bmi.w	locret_751E
00007BF6 3029 0008                  		move.w	8(a1),d0
00007BFA 9068 0008                  		sub.w	8(a0),d0
00007BFE D041                       		add.w	d1,d0
00007C00 6B00 0000                  		bmi.w	locret_751E
00007C04 B042                       		cmp.w	d2,d0
00007C06 6400 0000                  		bcc.w	locret_751E
00007C0A 6000                       		bra.s	Platform2
00007C0C                            ; End of function Obj11_Solid
00007C0C                            
00007C0C                            ; ---------------------------------------------------------------------------
00007C0C                            ; Platform subroutine
00007C0C                            ; ---------------------------------------------------------------------------
00007C0C                            
00007C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C0C                            
00007C0C                            
00007C0C                            PlatformObject:
00007C0C 43F8 D000                  		lea	($FFFFD000).w,a1
00007C10 4A69 0012                  		tst.w	$12(a1)
00007C14 6B00 0000                  		bmi.w	locret_751E
00007C18 3029 0008                  		move.w	8(a1),d0
00007C1C 9068 0008                  		sub.w	8(a0),d0
00007C20 D041                       		add.w	d1,d0
00007C22 6B00 0000                  		bmi.w	locret_751E
00007C26 D241                       		add.w	d1,d1
00007C28 B041                       		cmp.w	d1,d0
00007C2A 6400 0000                  		bcc.w	locret_751E
00007C2E                            
00007C2E                            Platform2:
00007C2E 3028 000C                  		move.w	$C(a0),d0
00007C32 5140                       		subq.w	#8,d0
00007C34                            
00007C34                            Platform3:
00007C34 3429 000C                  		move.w	$C(a1),d2
00007C38 1229 0016                  		move.b	$16(a1),d1
00007C3C 4881                       		ext.w	d1
00007C3E D242                       		add.w	d2,d1
00007C40 5841                       		addq.w	#4,d1
00007C42 9041                       		sub.w	d1,d0
00007C44 6200 0000                  		bhi.w	locret_751E
00007C48 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C4C 6500 0000                  		bcs.w	locret_751E
00007C50 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C54 6B00 0000                  		bmi.w	locret_751E
00007C58 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007C5E 6400 0000                  		bcc.w	locret_751E
00007C62 D440                       		add.w	d0,d2
00007C64 5642                       		addq.w	#3,d2
00007C66 3342 000C                  		move.w	d2,$C(a1)
00007C6A 5428 0024                  		addq.b	#2,$24(a0)
00007C6E                            
00007C6E                            loc_74AE:
00007C6E 0829 0003 0022             		btst	#3,$22(a1)
00007C74 6700                       		beq.s	loc_74DC
00007C76 7000                       		moveq	#0,d0
00007C78 1029 003D                  		move.b	$3D(a1),d0
00007C7C ED48                       		lsl.w	#6,d0
00007C7E 0680 00FF D000             		addi.l	#$FFD000,d0
00007C84 2440                       		movea.l	d0,a2
00007C86 08AA 0003 0022             		bclr	#3,$22(a2)
00007C8C 422A 0025                  		clr.b	$25(a2)
00007C90 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007C96 6600                       		bne.s	loc_74DC
00007C98 552A 0024                  		subq.b	#2,$24(a2)
00007C9C                            
00007C9C                            loc_74DC:
00007C9C 3008                       		move.w	a0,d0
00007C9E 0440 D000                  		subi.w	#-$3000,d0
00007CA2 EC48                       		lsr.w	#6,d0
00007CA4 0240 007F                  		andi.w	#$7F,d0
00007CA8 1340 003D                  		move.b	d0,$3D(a1)
00007CAC 137C 0000 0026             		move.b	#0,$26(a1)
00007CB2 337C 0000 0012             		move.w	#0,$12(a1)
00007CB8 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007CBE 0829 0001 0022             		btst	#1,$22(a1)
00007CC4 6700                       		beq.s	loc_7512
00007CC6 2F08                       		move.l	a0,-(sp)
00007CC8 2049                       		movea.l	a1,a0
00007CCA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007CD0 205F                       		movea.l	(sp)+,a0
00007CD2                            
00007CD2                            loc_7512:
00007CD2 08E9 0003 0022             		bset	#3,$22(a1)
00007CD8 08E8 0003 0022             		bset	#3,$22(a0)
00007CDE                            
00007CDE                            locret_751E:
00007CDE 4E75                       		rts	
00007CE0                            ; End of function PlatformObject
00007CE0                            
00007CE0                            ; ---------------------------------------------------------------------------
00007CE0                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007CE0                            ; ---------------------------------------------------------------------------
00007CE0                            
00007CE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CE0                            
00007CE0                            
00007CE0                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007CE0 43F8 D000                  		lea	($FFFFD000).w,a1
00007CE4 4A69 0012                  		tst.w	$12(a1)
00007CE8 6B00 FFF4                  		bmi.w	locret_751E
00007CEC 3029 0008                  		move.w	8(a1),d0
00007CF0 9068 0008                  		sub.w	8(a0),d0
00007CF4 D041                       		add.w	d1,d0
00007CF6 6BE6                       		bmi.s	locret_751E
00007CF8 D241                       		add.w	d1,d1
00007CFA B041                       		cmp.w	d1,d0
00007CFC 64E0                       		bcc.s	locret_751E
00007CFE 0828 0000 0001             		btst	#0,1(a0)
00007D04 6700                       		beq.s	loc_754A
00007D06 4640                       		not.w	d0
00007D08 D041                       		add.w	d1,d0
00007D0A                            
00007D0A                            loc_754A:
00007D0A E248                       		lsr.w	#1,d0
00007D0C 7600                       		moveq	#0,d3
00007D0E 1632 0000                  		move.b	(a2,d0.w),d3
00007D12 3028 000C                  		move.w	$C(a0),d0
00007D16 9043                       		sub.w	d3,d0
00007D18 6000 FF1A                  		bra.w	Platform3
00007D1C                            ; End of function SlopeObject
00007D1C                            
00007D1C                            
00007D1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D1C                            
00007D1C                            
00007D1C                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D1C 43F8 D000                  		lea	($FFFFD000).w,a1
00007D20 4A69 0012                  		tst.w	$12(a1)
00007D24 6B00 FFB8                  		bmi.w	locret_751E
00007D28 3029 0008                  		move.w	8(a1),d0
00007D2C 9068 0008                  		sub.w	8(a0),d0
00007D30 D041                       		add.w	d1,d0
00007D32 6B00 FFAA                  		bmi.w	locret_751E
00007D36 D241                       		add.w	d1,d1
00007D38 B041                       		cmp.w	d1,d0
00007D3A 6400 FFA2                  		bcc.w	locret_751E
00007D3E 3028 000C                  		move.w	$C(a0),d0
00007D42 9043                       		sub.w	d3,d0
00007D44 6000 FEEE                  		bra.w	Platform3
00007D48                            ; End of function Obj15_Solid
00007D48                            
00007D48                            ; ===========================================================================
00007D48                            
00007D48                            Obj11_Action2:				; XREF: Obj11_Index
00007D48 6100                       		bsr.s	Obj11_WalkOff
00007D4A 6100 0000                  		bsr.w	DisplaySprite
00007D4E 6000 0000                  		bra.w	Obj11_ChkDel
00007D52                            
00007D52                            ; ---------------------------------------------------------------------------
00007D52                            ; Subroutine allowing Sonic to walk off a bridge
00007D52                            ; ---------------------------------------------------------------------------
00007D52                            
00007D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D52                            
00007D52                            
00007D52                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D52 7200                       		moveq	#0,d1
00007D54 1228 0028                  		move.b	$28(a0),d1
00007D58 E749                       		lsl.w	#3,d1
00007D5A 3401                       		move.w	d1,d2
00007D5C 5041                       		addq.w	#8,d1
00007D5E 6100                       		bsr.s	ExitPlatform2
00007D60 6400                       		bcc.s	locret_75BE
00007D62 E848                       		lsr.w	#4,d0
00007D64 1140 003F                  		move.b	d0,$3F(a0)
00007D68 1028 003E                  		move.b	$3E(a0),d0
00007D6C 0C00 0040                  		cmpi.b	#$40,d0
00007D70 6700                       		beq.s	loc_75B6
00007D72 5828 003E                  		addq.b	#4,$3E(a0)
00007D76                            
00007D76                            loc_75B6:
00007D76 6100 0000                  		bsr.w	Obj11_Bend
00007D7A 6100 0000                  		bsr.w	Obj11_MoveSonic
00007D7E                            
00007D7E                            locret_75BE:
00007D7E 4E75                       		rts	
00007D80                            ; End of function Obj11_WalkOff
00007D80                            
00007D80                            ; ---------------------------------------------------------------------------
00007D80                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007D80                            ; ---------------------------------------------------------------------------
00007D80                            
00007D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D80                            
00007D80                            
00007D80                            ExitPlatform:
00007D80 3401                       		move.w	d1,d2
00007D82                            
00007D82                            ExitPlatform2:
00007D82 D442                       		add.w	d2,d2
00007D84 43F8 D000                  		lea	($FFFFD000).w,a1
00007D88 0829 0001 0022             		btst	#1,$22(a1)
00007D8E 6600                       		bne.s	loc_75E0
00007D90 3029 0008                  		move.w	8(a1),d0
00007D94 9068 0008                  		sub.w	8(a0),d0
00007D98 D041                       		add.w	d1,d0
00007D9A 6B00                       		bmi.s	loc_75E0
00007D9C B042                       		cmp.w	d2,d0
00007D9E 6500                       		bcs.s	locret_75F2
00007DA0                            
00007DA0                            loc_75E0:
00007DA0 08A9 0003 0022             		bclr	#3,$22(a1)
00007DA6 117C 0002 0024             		move.b	#2,$24(a0)
00007DAC 08A8 0003 0022             		bclr	#3,$22(a0)
00007DB2                            
00007DB2                            locret_75F2:
00007DB2 4E75                       		rts	
00007DB4                            ; End of function ExitPlatform
00007DB4                            
00007DB4                            
00007DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DB4                            
00007DB4                            
00007DB4                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007DB4 7000                       		moveq	#0,d0
00007DB6 1028 003F                  		move.b	$3F(a0),d0
00007DBA 1030 0029                  		move.b	$29(a0,d0.w),d0
00007DBE ED48                       		lsl.w	#6,d0
00007DC0 0680 00FF D000             		addi.l	#$FFD000,d0
00007DC6 2440                       		movea.l	d0,a2
00007DC8 43F8 D000                  		lea	($FFFFD000).w,a1
00007DCC 302A 000C                  		move.w	$C(a2),d0
00007DD0 5140                       		subq.w	#8,d0
00007DD2 7200                       		moveq	#0,d1
00007DD4 1229 0016                  		move.b	$16(a1),d1
00007DD8 9041                       		sub.w	d1,d0
00007DDA 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007DDE 4E75                       		rts	
00007DE0                            ; End of function Obj11_MoveSonic
00007DE0                            
00007DE0                            
00007DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE0                            
00007DE0                            
00007DE0                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007DE0 1028 003E                  		move.b	$3E(a0),d0
00007DE4 6100 AF86                  		bsr.w	CalcSine
00007DE8 3800                       		move.w	d0,d4
00007DEA 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007DF0 7000                       		moveq	#0,d0
00007DF2 1028 0028                  		move.b	$28(a0),d0
00007DF6 E948                       		lsl.w	#4,d0
00007DF8 7600                       		moveq	#0,d3
00007DFA 1628 003F                  		move.b	$3F(a0),d3
00007DFE 3403                       		move.w	d3,d2
00007E00 D640                       		add.w	d0,d3
00007E02 7A00                       		moveq	#0,d5
00007E04 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E0A 1A35 3000                  		move.b	(a5,d3.w),d5
00007E0E 0243 000F                  		andi.w	#$F,d3
00007E12 E94B                       		lsl.w	#4,d3
00007E14 47F4 3000                  		lea	(a4,d3.w),a3
00007E18 45E8 0029                  		lea	$29(a0),a2
00007E1C                            
00007E1C                            loc_765C:
00007E1C 7000                       		moveq	#0,d0
00007E1E 101A                       		move.b	(a2)+,d0
00007E20 ED48                       		lsl.w	#6,d0
00007E22 0680 00FF D000             		addi.l	#$FFD000,d0
00007E28 2240                       		movea.l	d0,a1
00007E2A 7000                       		moveq	#0,d0
00007E2C 101B                       		move.b	(a3)+,d0
00007E2E 5240                       		addq.w	#1,d0
00007E30 C0C5                       		mulu.w	d5,d0
00007E32 C0C4                       		mulu.w	d4,d0
00007E34 4840                       		swap	d0
00007E36 D069 003C                  		add.w	$3C(a1),d0
00007E3A 3340 000C                  		move.w	d0,$C(a1)
00007E3E 51CA FFDC                  		dbf	d2,loc_765C
00007E42 7000                       		moveq	#0,d0
00007E44 1028 0028                  		move.b	$28(a0),d0
00007E48 7600                       		moveq	#0,d3
00007E4A 1628 003F                  		move.b	$3F(a0),d3
00007E4E 5203                       		addq.b	#1,d3
00007E50 9600                       		sub.b	d0,d3
00007E52 4403                       		neg.b	d3
00007E54 6B00                       		bmi.s	locret_76CA
00007E56 3403                       		move.w	d3,d2
00007E58 E94B                       		lsl.w	#4,d3
00007E5A 47F4 3000                  		lea	(a4,d3.w),a3
00007E5E D6C2                       		adda.w	d2,a3
00007E60 5342                       		subq.w	#1,d2
00007E62 6500                       		bcs.s	locret_76CA
00007E64                            
00007E64                            loc_76A4:
00007E64 7000                       		moveq	#0,d0
00007E66 101A                       		move.b	(a2)+,d0
00007E68 ED48                       		lsl.w	#6,d0
00007E6A 0680 00FF D000             		addi.l	#$FFD000,d0
00007E70 2240                       		movea.l	d0,a1
00007E72 7000                       		moveq	#0,d0
00007E74 1023                       		move.b	-(a3),d0
00007E76 5240                       		addq.w	#1,d0
00007E78 C0C5                       		mulu.w	d5,d0
00007E7A C0C4                       		mulu.w	d4,d0
00007E7C 4840                       		swap	d0
00007E7E D069 003C                  		add.w	$3C(a1),d0
00007E82 3340 000C                  		move.w	d0,$C(a1)
00007E86 51CA FFDC                  		dbf	d2,loc_76A4
00007E8A                            
00007E8A                            locret_76CA:
00007E8A 4E75                       		rts	
00007E8C                            ; End of function Obj11_Bend
00007E8C                            
00007E8C                            ; ===========================================================================
00007E8C                            ; ---------------------------------------------------------------------------
00007E8C                            ; GHZ bridge-bending data
00007E8C                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007E8C                            ; ---------------------------------------------------------------------------
00007E8C                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007F9C                            		even
00007F9C                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000809C                            		even
0000809C                            
0000809C                            ; ===========================================================================
0000809C                            
0000809C                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000809C 3028 0008                  		move.w	8(a0),d0
000080A0 0240 FF80                  		andi.w	#$FF80,d0
000080A4 3238 F700                  		move.w	($FFFFF700).w,d1
000080A8 0441 0080                  		subi.w	#$80,d1
000080AC 0241 FF80                  		andi.w	#$FF80,d1
000080B0 9041                       		sub.w	d1,d0
000080B2 0C40 0280                  		cmpi.w	#$280,d0
000080B6 6200 0000                  		bhi.w	Obj11_DelAll
000080BA 4E75                       		rts	
000080BC                            ; ===========================================================================
000080BC                            
000080BC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000080BC 7400                       		moveq	#0,d2
000080BE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000080C2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000080C4 5302                       		subq.b	#1,d2		; subtract 1
000080C6 6500                       		bcs.s	Obj11_Delete
000080C8                            
000080C8                            Obj11_DelLoop:
000080C8 7000                       		moveq	#0,d0
000080CA 101A                       		move.b	(a2)+,d0
000080CC ED48                       		lsl.w	#6,d0
000080CE 0680 00FF D000             		addi.l	#$FFD000,d0
000080D4 2240                       		movea.l	d0,a1
000080D6 B048                       		cmp.w	a0,d0
000080D8 6700                       		beq.s	loc_791E
000080DA 6100 0000                  		bsr.w	DeleteObject2
000080DE                            
000080DE                            loc_791E:
000080DE 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000080E2                            
000080E2                            Obj11_Delete:
000080E2 6100 0000                  		bsr.w	DeleteObject
000080E6 4E75                       		rts	
000080E8                            ; ===========================================================================
000080E8                            
000080E8                            Obj11_Delete2:				; XREF: Obj11_Index
000080E8 6100 0000                  		bsr.w	DeleteObject
000080EC 4E75                       		rts	
000080EE                            ; ===========================================================================
000080EE                            
000080EE                            Obj11_Display2:				; XREF: Obj11_Index
000080EE 6100 0000                  		bsr.w	DisplaySprite
000080F2 4E75                       		rts	
000080F4                            ; ===========================================================================
000080F4                            ; ---------------------------------------------------------------------------
000080F4                            ; Sprite mappings - GHZ	bridge
000080F4                            ; ---------------------------------------------------------------------------
000080F4                            Map_obj11:
000080F4                            	include "_maps\obj11.asm"
000080F4                            ; ---------------------------------------------------------------------------
000080F4                            ; Sprite mappings - GHZ	bridge
000080F4                            ; ---------------------------------------------------------------------------
000080F4 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000080F8 0000                       		dc.w byte_794B-Map_obj11
000080FA 01                         byte_793A:	dc.b 1
000080FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008100 02                         byte_7940:	dc.b 2
00008101 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008106 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000810B 01                         byte_794B:	dc.b 1
0000810C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008112 00                         		even
00008112 00                         		even
00008112                            
00008112                            ; ===========================================================================
00008112                            ; ---------------------------------------------------------------------------
00008112                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008112                            ;	    - spiked ball on a chain (SBZ)
00008112                            ; ---------------------------------------------------------------------------
00008112                            
00008112                            Obj15:					; XREF: Obj_Index
00008112 7000                       		moveq	#0,d0
00008114 1028 0024                  		move.b	$24(a0),d0
00008118 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000811C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008120                            ; ===========================================================================
00008120 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008124 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008128 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000812C 0000                       		dc.w Obj15_Action-Obj15_Index
0000812E                            ; ===========================================================================
0000812E                            
0000812E                            Obj15_Main:				; XREF: Obj15_Index
0000812E 5428 0024                  		addq.b	#2,$24(a0)
00008132 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000813A 317C 4380 0002             		move.w	#$4380,2(a0)
00008140 117C 0004 0001             		move.b	#4,1(a0)
00008146 117C 0003 0018             		move.b	#3,$18(a0)
0000814C 117C 0018 0019             		move.b	#$18,$19(a0)
00008152 117C 0008 0016             		move.b	#8,$16(a0)
00008158 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000815E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008164 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000816A 6600                       		bne.s	Obj15_NotSLZ
0000816C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008174 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000817A 117C 0020 0019             		move.b	#$20,$19(a0)
00008180 117C 0010 0016             		move.b	#$10,$16(a0)
00008186 117C 0099 0020             		move.b	#$99,$20(a0)
0000818C                            
0000818C                            Obj15_NotSLZ:
0000818C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008192 6600                       		bne.s	Obj15_SetLength
00008194 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000819C 317C 0391 0002             		move.w	#$391,2(a0)
000081A2 117C 0018 0019             		move.b	#$18,$19(a0)
000081A8 117C 0018 0016             		move.b	#$18,$16(a0)
000081AE 117C 0086 0020             		move.b	#$86,$20(a0)
000081B4 117C 000C 0024             		move.b	#$C,$24(a0)
000081BA                            
000081BA                            Obj15_SetLength:
000081BA 1810                       		move.b	0(a0),d4
000081BC 7200                       		moveq	#0,d1
000081BE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000081C2 1212                       		move.b	(a2),d1		; move a2 to d1
000081C4 3F01                       		move.w	d1,-(sp)
000081C6 0241 000F                  		andi.w	#$F,d1
000081CA 14FC 0000                  		move.b	#0,(a2)+
000081CE 3601                       		move.w	d1,d3
000081D0 E94B                       		lsl.w	#4,d3
000081D2 5003                       		addq.b	#8,d3
000081D4 1143 003C                  		move.b	d3,$3C(a0)
000081D8 5103                       		subq.b	#8,d3
000081DA 4A28 001A                  		tst.b	$1A(a0)
000081DE 6700                       		beq.s	Obj15_MakeChain
000081E0 5003                       		addq.b	#8,d3
000081E2 5341                       		subq.w	#1,d1
000081E4                            
000081E4                            Obj15_MakeChain:
000081E4 6100 0000                  		bsr.w	SingleObjLoad
000081E8 6600                       		bne.s	loc_7A92
000081EA 5228 0028                  		addq.b	#1,$28(a0)
000081EE 3A09                       		move.w	a1,d5
000081F0 0445 D000                  		subi.w	#-$3000,d5
000081F4 EC4D                       		lsr.w	#6,d5
000081F6 0245 007F                  		andi.w	#$7F,d5
000081FA 14C5                       		move.b	d5,(a2)+
000081FC 137C 000A 0024             		move.b	#$A,$24(a1)
00008202 1284                       		move.b	d4,0(a1)	; load swinging	object
00008204 2368 0004 0004             		move.l	4(a0),4(a1)
0000820A 3368 0002 0002             		move.w	2(a0),2(a1)
00008210 08A9 0006 0002             		bclr	#6,2(a1)
00008216 137C 0004 0001             		move.b	#4,1(a1)
0000821C 137C 0004 0018             		move.b	#4,$18(a1)
00008222 137C 0008 0019             		move.b	#8,$19(a1)
00008228 137C 0001 001A             		move.b	#1,$1A(a1)
0000822E 1343 003C                  		move.b	d3,$3C(a1)
00008232 0403 0010                  		subi.b	#$10,d3
00008236 6400                       		bcc.s	loc_7A8E
00008238 137C 0002 001A             		move.b	#2,$1A(a1)
0000823E 137C 0003 0018             		move.b	#3,$18(a1)
00008244 08E9 0006 0002             		bset	#6,2(a1)
0000824A                            
0000824A                            loc_7A8E:
0000824A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000824E                            
0000824E                            loc_7A92:
0000824E 3A08                       		move.w	a0,d5
00008250 0445 D000                  		subi.w	#-$3000,d5
00008254 EC4D                       		lsr.w	#6,d5
00008256 0245 007F                  		andi.w	#$7F,d5
0000825A 14C5                       		move.b	d5,(a2)+
0000825C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008262 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008268 321F                       		move.w	(sp)+,d1
0000826A 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000826E 6700                       		beq.s	loc_7AD4	; if not, branch
00008270 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008278 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000827E 117C 0001 001A             		move.b	#1,$1A(a0)
00008284 117C 0002 0018             		move.b	#2,$18(a0)
0000828A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008290                            
00008290                            loc_7AD4:
00008290 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008296 6700                       		beq.s	Obj15_Action	; if yes, branch
00008298                            
00008298                            Obj15_SetSolid:				; XREF: Obj15_Index
00008298 7200                       		moveq	#0,d1
0000829A 1228 0019                  		move.b	$19(a0),d1
0000829E 7600                       		moveq	#0,d3
000082A0 1628 0016                  		move.b	$16(a0),d3
000082A4 6100 FA76                  		bsr.w	Obj15_Solid
000082A8                            
000082A8                            Obj15_Action:				; XREF: Obj15_Index
000082A8 6100 0000                  		bsr.w	Obj15_Move
000082AC 6100 0000                  		bsr.w	DisplaySprite
000082B0 6000 0000                  		bra.w	Obj15_ChkDel
000082B4                            ; ===========================================================================
000082B4                            
000082B4                            Obj15_Action2:				; XREF: Obj15_Index
000082B4 7200                       		moveq	#0,d1
000082B6 1228 0019                  		move.b	$19(a0),d1
000082BA 6100 FAC4                  		bsr.w	ExitPlatform
000082BE 3F28 0008                  		move.w	8(a0),-(sp)
000082C2 6100 0000                  		bsr.w	Obj15_Move
000082C6 341F                       		move.w	(sp)+,d2
000082C8 7600                       		moveq	#0,d3
000082CA 1628 0016                  		move.b	$16(a0),d3
000082CE 5203                       		addq.b	#1,d3
000082D0 6100 0000                  		bsr.w	MvSonicOnPtfm
000082D4 6100 0000                  		bsr.w	DisplaySprite
000082D8 6000 0000                  		bra.w	Obj15_ChkDel
000082DC                            
000082DC 4E75                       		rts
000082DE                            
000082DE                            ; ---------------------------------------------------------------------------
000082DE                            ; Subroutine to	change Sonic's position with a platform
000082DE                            ; ---------------------------------------------------------------------------
000082DE                            
000082DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082DE                            
000082DE                            
000082DE                            MvSonicOnPtfm:
000082DE 43F8 D000                  		lea	($FFFFD000).w,a1
000082E2 3028 000C                  		move.w	$C(a0),d0
000082E6 9043                       		sub.w	d3,d0
000082E8 6000                       		bra.s	MvSonic2
000082EA                            ; End of function MvSonicOnPtfm
000082EA                            
000082EA                            ; ---------------------------------------------------------------------------
000082EA                            ; Subroutine to	change Sonic's position with a platform
000082EA                            ; ---------------------------------------------------------------------------
000082EA                            
000082EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082EA                            
000082EA                            
000082EA                            MvSonicOnPtfm2:
000082EA 43F8 D000                  		lea	($FFFFD000).w,a1
000082EE 3028 000C                  		move.w	$C(a0),d0
000082F2 0440 0009                  		subi.w	#9,d0
000082F6                            
000082F6                            MvSonic2:
000082F6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000082FA 6B00                       		bmi.s	locret_7B62
000082FC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008302 6400                       		bcc.s	locret_7B62
00008304 4A78 FE08                  		tst.w	($FFFFFE08).w
00008308 6600                       		bne.s	locret_7B62
0000830A 7200                       		moveq	#0,d1
0000830C 1229 0016                  		move.b	$16(a1),d1
00008310 9041                       		sub.w	d1,d0
00008312 3340 000C                  		move.w	d0,$C(a1)
00008316 9468 0008                  		sub.w	8(a0),d2
0000831A 9569 0008                  		sub.w	d2,8(a1)
0000831E                            
0000831E                            locret_7B62:
0000831E 4E75                       		rts	
00008320                            ; End of function MvSonicOnPtfm2
00008320                            
00008320                            
00008320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008320                            
00008320                            
00008320                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008320 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008324 323C 0080                  		move.w	#$80,d1
00008328 0828 0000 0022             		btst	#0,$22(a0)
0000832E 6700                       		beq.s	loc_7B78
00008330 4440                       		neg.w	d0
00008332 D041                       		add.w	d1,d0
00008334                            
00008334                            loc_7B78:
00008334 6000                       		bra.s	Obj15_Move2
00008336                            ; End of function Obj15_Move
00008336                            
00008336                            
00008336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008336                            
00008336                            
00008336                            Obj48_Move:				; XREF: Obj48_Display2
00008336 4A28 003D                  		tst.b	$3D(a0)
0000833A 6600                       		bne.s	loc_7B9C
0000833C 3028 003E                  		move.w	$3E(a0),d0
00008340 5040                       		addq.w	#8,d0
00008342 3140 003E                  		move.w	d0,$3E(a0)
00008346 D168 0026                  		add.w	d0,$26(a0)
0000834A 0C40 0200                  		cmpi.w	#$200,d0
0000834E 6600                       		bne.s	loc_7BB6
00008350 117C 0001 003D             		move.b	#1,$3D(a0)
00008356 6000                       		bra.s	loc_7BB6
00008358                            ; ===========================================================================
00008358                            
00008358                            loc_7B9C:
00008358 3028 003E                  		move.w	$3E(a0),d0
0000835C 5140                       		subq.w	#8,d0
0000835E 3140 003E                  		move.w	d0,$3E(a0)
00008362 D168 0026                  		add.w	d0,$26(a0)
00008366 0C40 FE00                  		cmpi.w	#-$200,d0
0000836A 6600                       		bne.s	loc_7BB6
0000836C 117C 0000 003D             		move.b	#0,$3D(a0)
00008372                            
00008372                            loc_7BB6:
00008372 1028 0026                  		move.b	$26(a0),d0
00008376                            ; End of function Obj48_Move
00008376                            
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008376 6100 A9F4                  		bsr.w	CalcSine
0000837A 3428 0038                  		move.w	$38(a0),d2
0000837E 3628 003A                  		move.w	$3A(a0),d3
00008382 45E8 0028                  		lea	$28(a0),a2
00008386 7C00                       		moveq	#0,d6
00008388 1C1A                       		move.b	(a2)+,d6
0000838A                            
0000838A                            loc_7BCE:
0000838A 7800                       		moveq	#0,d4
0000838C 181A                       		move.b	(a2)+,d4
0000838E ED4C                       		lsl.w	#6,d4
00008390 0684 00FF D000             		addi.l	#$FFD000,d4
00008396 2244                       		movea.l	d4,a1
00008398 7800                       		moveq	#0,d4
0000839A 1829 003C                  		move.b	$3C(a1),d4
0000839E 2A04                       		move.l	d4,d5
000083A0 C9C0                       		muls.w	d0,d4
000083A2 E084                       		asr.l	#8,d4
000083A4 CBC1                       		muls.w	d1,d5
000083A6 E085                       		asr.l	#8,d5
000083A8 D842                       		add.w	d2,d4
000083AA DA43                       		add.w	d3,d5
000083AC 3344 000C                  		move.w	d4,$C(a1)
000083B0 3345 0008                  		move.w	d5,8(a1)
000083B4 51CE FFD4                  		dbf	d6,loc_7BCE
000083B8 4E75                       		rts	
000083BA                            ; End of function Obj15_Move2
000083BA                            
000083BA                            ; ===========================================================================
000083BA                            
000083BA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000083BA 3028 003A                  		move.w	$3A(a0),d0
000083BE 0240 FF80                  		andi.w	#$FF80,d0
000083C2 3238 F700                  		move.w	($FFFFF700).w,d1
000083C6 0441 0080                  		subi.w	#$80,d1
000083CA 0241 FF80                  		andi.w	#$FF80,d1
000083CE 9041                       		sub.w	d1,d0
000083D0 0C40 0280                  		cmpi.w	#$280,d0
000083D4 6200 0000                  		bhi.w	Obj15_DelAll
000083D8 4E75                       		rts	
000083DA                            ; ===========================================================================
000083DA                            
000083DA                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000083DA 7400                       		moveq	#0,d2
000083DC 45E8 0028                  		lea	$28(a0),a2
000083E0 141A                       		move.b	(a2)+,d2
000083E2                            
000083E2                            Obj15_DelLoop:
000083E2 7000                       		moveq	#0,d0
000083E4 101A                       		move.b	(a2)+,d0
000083E6 ED48                       		lsl.w	#6,d0
000083E8 0680 00FF D000             		addi.l	#$FFD000,d0
000083EE 2240                       		movea.l	d0,a1
000083F0 6100 0000                  		bsr.w	DeleteObject2
000083F4 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000083F8 4E75                       		rts	
000083FA                            ; ===========================================================================
000083FA                            
000083FA                            Obj15_Delete:				; XREF: Obj15_Index
000083FA 6100 0000                  		bsr.w	DeleteObject
000083FE 4E75                       		rts	
00008400                            ; ===========================================================================
00008400                            
00008400                            Obj15_Display:				; XREF: Obj15_Index
00008400 6000 0000                  		bra.w	DisplaySprite
00008404                            ; ===========================================================================
00008404                            ; ---------------------------------------------------------------------------
00008404                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008404                            ; ---------------------------------------------------------------------------
00008404                            Map_obj15:
00008404                            	include "_maps\obj15ghz.asm"
00008404                            ; ---------------------------------------------------------------------------
00008404                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008404                            ; ---------------------------------------------------------------------------
00008404 0000                       		dc.w byte_7C4E-Map_obj15
00008406 0000                       		dc.w byte_7C59-Map_obj15
00008408 0000                       		dc.w byte_7C5F-Map_obj15
0000840A 02                         byte_7C4E:	dc.b 2
0000840B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008410 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008415 01                         byte_7C59:	dc.b 1
00008416 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000841B 01                         byte_7C5F:	dc.b 1
0000841C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008422 00                         		even
00008422 00                         		even
00008422                            
00008422                            ; ---------------------------------------------------------------------------
00008422                            ; Sprite mappings - SLZ	swinging platforms
00008422                            ; ---------------------------------------------------------------------------
00008422                            Map_obj15a:
00008422                            	include "_maps\obj15slz.asm"
00008422                            ; ---------------------------------------------------------------------------
00008422                            ; Sprite mappings - SLZ	swinging platforms
00008422                            ; ---------------------------------------------------------------------------
00008422 0000                       		dc.w byte_7C6C-Map_obj15a
00008424 0000                       		dc.w byte_7C95-Map_obj15a
00008426 0000                       		dc.w byte_7C9B-Map_obj15a
00008428 08                         byte_7C6C:	dc.b 8
00008429 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000842E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008433 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008438 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000843D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008442 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008447 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000844C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008451 01                         byte_7C95:	dc.b 1
00008452 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008457 01                         byte_7C9B:	dc.b 1
00008458 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000845E 00                         		even
0000845E 00                         		even
0000845E                            
0000845E                            ; ===========================================================================
0000845E                            ; ---------------------------------------------------------------------------
0000845E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000845E                            ; ---------------------------------------------------------------------------
0000845E                            
0000845E                            Obj17:					; XREF: Obj_Index
0000845E 7000                       		moveq	#0,d0
00008460 1028 0024                  		move.b	$24(a0),d0
00008464 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008468 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000846C                            ; ===========================================================================
0000846C 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000846E 0000                       		dc.w Obj17_Action-Obj17_Index
00008470 0000                       		dc.w Obj17_Action-Obj17_Index
00008472 0000                       		dc.w Obj17_Delete-Obj17_Index
00008474 0000                       		dc.w Obj17_Display-Obj17_Index
00008476                            ; ===========================================================================
00008476                            
00008476                            Obj17_Main:				; XREF: Obj17_Index
00008476 5428 0024                  		addq.b	#2,$24(a0)
0000847A 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008482 317C 4398 0002             		move.w	#$4398,2(a0)
00008488 117C 0007 0022             		move.b	#7,$22(a0)
0000848E 117C 0004 0001             		move.b	#4,1(a0)
00008494 117C 0003 0018             		move.b	#3,$18(a0)
0000849A 117C 0008 0019             		move.b	#8,$19(a0)
000084A0 3428 000C                  		move.w	$C(a0),d2
000084A4 3628 0008                  		move.w	8(a0),d3
000084A8 1810                       		move.b	0(a0),d4
000084AA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084AE 7200                       		moveq	#0,d1
000084B0 1212                       		move.b	(a2),d1		; move a2 to d1
000084B2 14FC 0000                  		move.b	#0,(a2)+
000084B6 3001                       		move.w	d1,d0
000084B8 E248                       		lsr.w	#1,d0
000084BA E948                       		lsl.w	#4,d0
000084BC 9640                       		sub.w	d0,d3
000084BE 5501                       		subq.b	#2,d1
000084C0 6500                       		bcs.s	Obj17_Action
000084C2 7C00                       		moveq	#0,d6
000084C4                            
000084C4                            Obj17_MakeHelix:
000084C4 6100 0000                  		bsr.w	SingleObjLoad
000084C8 6600                       		bne.s	Obj17_Action
000084CA 5228 0028                  		addq.b	#1,$28(a0)
000084CE 3A09                       		move.w	a1,d5
000084D0 0445 D000                  		subi.w	#$D000,d5
000084D4 EC4D                       		lsr.w	#6,d5
000084D6 0245 007F                  		andi.w	#$7F,d5
000084DA 14C5                       		move.b	d5,(a2)+
000084DC 137C 0008 0024             		move.b	#8,$24(a1)
000084E2 1284                       		move.b	d4,0(a1)
000084E4 3342 000C                  		move.w	d2,$C(a1)
000084E8 3343 0008                  		move.w	d3,8(a1)
000084EC 2368 0004 0004             		move.l	4(a0),4(a1)
000084F2 337C 4398 0002             		move.w	#$4398,2(a1)
000084F8 137C 0004 0001             		move.b	#4,1(a1)
000084FE 137C 0003 0018             		move.b	#3,$18(a1)
00008504 137C 0008 0019             		move.b	#8,$19(a1)
0000850A 1346 003E                  		move.b	d6,$3E(a1)
0000850E 5206                       		addq.b	#1,d6
00008510 0206 0007                  		andi.b	#7,d6
00008514 0643 0010                  		addi.w	#$10,d3
00008518 B668 0008                  		cmp.w	8(a0),d3
0000851C 6600                       		bne.s	loc_7D78
0000851E 1146 003E                  		move.b	d6,$3E(a0)
00008522 5206                       		addq.b	#1,d6
00008524 0206 0007                  		andi.b	#7,d6
00008528 0643 0010                  		addi.w	#$10,d3
0000852C 5228 0028                  		addq.b	#1,$28(a0)
00008530                            
00008530                            loc_7D78:
00008530 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008534                            
00008534                            Obj17_Action:				; XREF: Obj17_Index
00008534 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008538 6100 0000                  		bsr.w	DisplaySprite
0000853C 6000 0000                  		bra.w	Obj17_ChkDel
00008540                            
00008540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008540                            
00008540                            
00008540                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008540 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008544 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000854A D028 003E                  		add.b	$3E(a0),d0
0000854E 0200 0007                  		andi.b	#7,d0
00008552 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008556 6600                       		bne.s	locret_7DA6
00008558 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000855E                            
0000855E                            locret_7DA6:
0000855E 4E75                       		rts	
00008560                            ; End of function Obj17_RotateSpikes
00008560                            
00008560                            ; ===========================================================================
00008560                            
00008560                            Obj17_ChkDel:				; XREF: Obj17_Action
00008560 3028 0008                  		move.w	8(a0),d0
00008564 0240 FF80                  		andi.w	#$FF80,d0
00008568 3238 F700                  		move.w	($FFFFF700).w,d1
0000856C 0441 0080                  		subi.w	#$80,d1
00008570 0241 FF80                  		andi.w	#$FF80,d1
00008574 9041                       		sub.w	d1,d0
00008576 0C40 0280                  		cmpi.w	#$280,d0
0000857A 6200 0000                  		bhi.w	Obj17_DelAll
0000857E 4E75                       		rts	
00008580                            ; ===========================================================================
00008580                            
00008580                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008580 7400                       		moveq	#0,d2
00008582 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008586 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008588 5502                       		subq.b	#2,d2
0000858A 6500                       		bcs.s	Obj17_Delete
0000858C                            
0000858C                            Obj17_DelLoop:
0000858C 7000                       		moveq	#0,d0
0000858E 101A                       		move.b	(a2)+,d0
00008590 ED48                       		lsl.w	#6,d0
00008592 0680 00FF D000             		addi.l	#$FFD000,d0
00008598 2240                       		movea.l	d0,a1
0000859A 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000859E 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000085A2                            
000085A2                            Obj17_Delete:				; XREF: Obj17_Index
000085A2 6100 0000                  		bsr.w	DeleteObject
000085A6 4E75                       		rts	
000085A8                            ; ===========================================================================
000085A8                            
000085A8                            Obj17_Display:				; XREF: Obj17_Index
000085A8 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085AC 6000 0000                  		bra.w	DisplaySprite
000085B0                            ; ===========================================================================
000085B0                            ; ---------------------------------------------------------------------------
000085B0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085B0                            ; ---------------------------------------------------------------------------
000085B0                            Map_obj17:
000085B0                            	include "_maps\obj17.asm"
000085B0                            ; ---------------------------------------------------------------------------
000085B0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085B0                            ; ---------------------------------------------------------------------------
000085B0 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000085B4 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000085B8 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000085BC 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000085C0 01                         byte_7E08:	dc.b 1
000085C1 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000085C6 01                         byte_7E0E:	dc.b 1
000085C7 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000085CC 01                         byte_7E14:	dc.b 1
000085CD F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000085D2 01                         byte_7E1A:	dc.b 1
000085D3 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000085D8 01                         byte_7E20:	dc.b 1
000085D9 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000085DE 01                         byte_7E26:	dc.b 1
000085DF 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000085E4 01                         byte_7E2C:	dc.b 1
000085E5 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000085EA                            		even
000085EA                            		even
000085EA                            
000085EA                            ; ===========================================================================
000085EA                            ; ---------------------------------------------------------------------------
000085EA                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000085EA                            ; ---------------------------------------------------------------------------
000085EA                            
000085EA                            Obj18:					; XREF: Obj_Index
000085EA 7000                       		moveq	#0,d0
000085EC 1028 0024                  		move.b	$24(a0),d0
000085F0 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000085F4 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000085F8                            ; ===========================================================================
000085F8 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000085FA 0000                       		dc.w Obj18_Solid-Obj18_Index
000085FC 0000                       		dc.w Obj18_Action2-Obj18_Index
000085FE 0000                       		dc.w Obj18_Delete-Obj18_Index
00008600 0000                       		dc.w Obj18_Action-Obj18_Index
00008602                            ; ===========================================================================
00008602                            
00008602                            Obj18_Main:				; XREF: Obj18_Index
00008602 5428 0024                  		addq.b	#2,$24(a0)
00008606 317C 4000 0002             		move.w	#$4000,2(a0)
0000860C 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008614 117C 0020 0019             		move.b	#$20,$19(a0)
0000861A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008620 6600                       		bne.s	Obj18_NotSYZ
00008622 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000862A 117C 0020 0019             		move.b	#$20,$19(a0)
00008630                            
00008630                            Obj18_NotSYZ:
00008630 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008636 6600                       		bne.s	Obj18_NotSLZ
00008638 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008640 117C 0020 0019             		move.b	#$20,$19(a0)
00008646 317C 4000 0002             		move.w	#$4000,2(a0)
0000864C 117C 0003 0028             		move.b	#3,$28(a0)
00008652                            
00008652                            Obj18_NotSLZ:
00008652 117C 0004 0001             		move.b	#4,1(a0)
00008658 117C 0004 0018             		move.b	#4,$18(a0)
0000865E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008664 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000866A 3168 0008 0032             		move.w	8(a0),$32(a0)
00008670 317C 0080 0026             		move.w	#$80,$26(a0)
00008676 7200                       		moveq	#0,d1
00008678 1028 0028                  		move.b	$28(a0),d0
0000867C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008680 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008682 5201                       		addq.b	#1,d1		; use frame #1
00008684 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000868A                            
0000868A                            Obj18_SetFrame:
0000868A 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000868E                            
0000868E                            Obj18_Solid:				; XREF: Obj18_Index
0000868E 4A28 0038                  		tst.b	$38(a0)
00008692 6700                       		beq.s	loc_7EE0
00008694 5928 0038                  		subq.b	#4,$38(a0)
00008698                            
00008698                            loc_7EE0:
00008698 7200                       		moveq	#0,d1
0000869A 1228 0019                  		move.b	$19(a0),d1
0000869E 6100 F56C                  		bsr.w	PlatformObject
000086A2                            
000086A2                            Obj18_Action:				; XREF: Obj18_Index
000086A2 6100 0000                  		bsr.w	Obj18_Move
000086A6 6100 0000                  		bsr.w	Obj18_Nudge
000086AA 6100 0000                  		bsr.w	DisplaySprite
000086AE 6000 0000                  		bra.w	Obj18_ChkDel
000086B2                            ; ===========================================================================
000086B2                            
000086B2                            Obj18_Action2:				; XREF: Obj18_Index
000086B2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000086B8 6700                       		beq.s	loc_7F06
000086BA 5828 0038                  		addq.b	#4,$38(a0)
000086BE                            
000086BE                            loc_7F06:
000086BE 7200                       		moveq	#0,d1
000086C0 1228 0019                  		move.b	$19(a0),d1
000086C4 6100 F6BA                  		bsr.w	ExitPlatform
000086C8 3F28 0008                  		move.w	8(a0),-(sp)
000086CC 6100 0000                  		bsr.w	Obj18_Move
000086D0 6100 0000                  		bsr.w	Obj18_Nudge
000086D4 341F                       		move.w	(sp)+,d2
000086D6 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000086DA 6100 0000                  		bsr.w	DisplaySprite
000086DE 6000 0000                  		bra.w	Obj18_ChkDel
000086E2                            
000086E2 4E75                       		rts
000086E4                            
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            ; Subroutine to	move platform slightly when you	stand on it
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            
000086E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E4                            
000086E4                            
000086E4                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000086E4 1028 0038                  		move.b	$38(a0),d0
000086E8 6100 A682                  		bsr.w	CalcSine
000086EC 323C 0400                  		move.w	#$400,d1
000086F0 C1C1                       		muls.w	d1,d0
000086F2 4840                       		swap	d0
000086F4 D068 002C                  		add.w	$2C(a0),d0
000086F8 3140 000C                  		move.w	d0,$C(a0)
000086FC 4E75                       		rts	
000086FE                            ; End of function Obj18_Nudge
000086FE                            
000086FE                            ; ---------------------------------------------------------------------------
000086FE                            ; Subroutine to	move platforms
000086FE                            ; ---------------------------------------------------------------------------
000086FE                            
000086FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086FE                            
000086FE                            
000086FE                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000086FE 7000                       		moveq	#0,d0
00008700 1028 0028                  		move.b	$28(a0),d0
00008704 0240 000F                  		andi.w	#$F,d0
00008708 D040                       		add.w	d0,d0
0000870A 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000870E 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008712                            ; End of function Obj18_Move
00008712                            
00008712                            ; ===========================================================================
00008712 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008716 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000871A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000871E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008722 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008726 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000872A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000872C                            ; ===========================================================================
0000872C                            
0000872C                            Obj18_Type00:
0000872C 4E75                       		rts			; platform 00 doesn't move
0000872E                            ; ===========================================================================
0000872E                            
0000872E                            Obj18_Type05:
0000872E 3028 0032                  		move.w	$32(a0),d0
00008732 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008736 4401                       		neg.b	d1		; reverse platform-motion
00008738 0601 0040                  		addi.b	#$40,d1
0000873C 6000                       		bra.s	Obj18_01_Move
0000873E                            ; ===========================================================================
0000873E                            
0000873E                            Obj18_Type01:
0000873E 3028 0032                  		move.w	$32(a0),d0
00008742 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008746 0401 0040                  		subi.b	#$40,d1
0000874A                            
0000874A                            Obj18_01_Move:
0000874A 4881                       		ext.w	d1
0000874C D041                       		add.w	d1,d0
0000874E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008752 6000 0000                  		bra.w	Obj18_ChgMotion
00008756                            ; ===========================================================================
00008756                            
00008756                            Obj18_Type0C:
00008756 3028 0034                  		move.w	$34(a0),d0
0000875A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000875E 4401                       		neg.b	d1		; reverse platform-motion
00008760 0601 0030                  		addi.b	#$30,d1
00008764 6000                       		bra.s	Obj18_02_Move
00008766                            ; ===========================================================================
00008766                            
00008766                            Obj18_Type0B:
00008766 3028 0034                  		move.w	$34(a0),d0
0000876A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000876E 0401 0030                  		subi.b	#$30,d1
00008772 6000                       		bra.s	Obj18_02_Move
00008774                            ; ===========================================================================
00008774                            
00008774                            Obj18_Type06:
00008774 3028 0034                  		move.w	$34(a0),d0
00008778 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000877C 4401                       		neg.b	d1		; reverse platform-motion
0000877E 0601 0040                  		addi.b	#$40,d1
00008782 6000                       		bra.s	Obj18_02_Move
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj18_Type02:
00008784 3028 0034                  		move.w	$34(a0),d0
00008788 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000878C 0401 0040                  		subi.b	#$40,d1
00008790                            
00008790                            Obj18_02_Move:
00008790 4881                       		ext.w	d1
00008792 D041                       		add.w	d1,d0
00008794 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008798 6000 0000                  		bra.w	Obj18_ChgMotion
0000879C                            ; ===========================================================================
0000879C                            
0000879C                            Obj18_Type03:
0000879C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087A0 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000087A2 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087A8 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087AA 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087B0                            
000087B0                            Obj18_03_NoMove:
000087B0 4E75                       		rts	
000087B2                            ; ===========================================================================
000087B2                            
000087B2                            Obj18_03_Wait:
000087B2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000087B6 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000087B8 317C 0020 003A             		move.w	#32,$3A(a0)
000087BE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000087C2 4E75                       		rts	
000087C4                            ; ===========================================================================
000087C4                            
000087C4                            Obj18_Type04:
000087C4 4A68 003A                  		tst.w	$3A(a0)
000087C8 6700                       		beq.s	loc_8048
000087CA 5368 003A                  		subq.w	#1,$3A(a0)
000087CE 6600                       		bne.s	loc_8048
000087D0 0828 0003 0022             		btst	#3,$22(a0)
000087D6 6700                       		beq.s	loc_8042
000087D8 08E9 0001 0022             		bset	#1,$22(a1)
000087DE 08A9 0003 0022             		bclr	#3,$22(a1)
000087E4 137C 0002 0024             		move.b	#2,$24(a1)
000087EA 08A8 0003 0022             		bclr	#3,$22(a0)
000087F0 4228 0025                  		clr.b	$25(a0)
000087F4 3368 0012 0012             		move.w	$12(a0),$12(a1)
000087FA                            
000087FA                            loc_8042:
000087FA 117C 0008 0024             		move.b	#8,$24(a0)
00008800                            
00008800                            loc_8048:
00008800 2628 002C                  		move.l	$2C(a0),d3
00008804 3028 0012                  		move.w	$12(a0),d0
00008808 48C0                       		ext.l	d0
0000880A E180                       		asl.l	#8,d0
0000880C D680                       		add.l	d0,d3
0000880E 2143 002C                  		move.l	d3,$2C(a0)
00008812 0668 0038 0012             		addi.w	#$38,$12(a0)
00008818 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000881C 0640 00E0                  		addi.w	#$E0,d0
00008820 B068 002C                  		cmp.w	$2C(a0),d0
00008824 6400                       		bcc.s	locret_8074
00008826 117C 0006 0024             		move.b	#6,$24(a0)
0000882C                            
0000882C                            locret_8074:
0000882C 4E75                       		rts	
0000882E                            ; ===========================================================================
0000882E                            
0000882E                            Obj18_Type07:
0000882E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008832 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008834 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008838 7000                       		moveq	#0,d0
0000883A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000883E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008840 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008844 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008846 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000884C                            
0000884C                            Obj18_07_NoMove:
0000884C 4E75                       		rts	
0000884E                            ; ===========================================================================
0000884E                            
0000884E                            Obj18_07_Wait:
0000884E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008852 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008854 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008858 4E75                       		rts	
0000885A                            ; ===========================================================================
0000885A                            
0000885A                            Obj18_Type08:
0000885A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000885E 3028 0034                  		move.w	$34(a0),d0
00008862 0440 0200                  		subi.w	#$200,d0
00008866 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000886A 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000886C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008870                            
00008870                            Obj18_08_NoStop:
00008870 4E75                       		rts	
00008872                            ; ===========================================================================
00008872                            
00008872                            Obj18_Type0A:
00008872 3028 0034                  		move.w	$34(a0),d0
00008876 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000887A 0401 0040                  		subi.b	#$40,d1
0000887E 4881                       		ext.w	d1
00008880 E241                       		asr.w	#1,d1
00008882 D041                       		add.w	d1,d0
00008884 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008888                            
00008888                            Obj18_ChgMotion:
00008888 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000888E 4E75                       		rts	
00008890                            ; ===========================================================================
00008890                            
00008890                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008890 3028 0032                  		move.w	$32(a0),d0
00008894 0240 FF80                  		andi.w	#$FF80,d0
00008898 3238 F700                  		move.w	($FFFFF700).w,d1
0000889C 0441 0080                  		subi.w	#$80,d1
000088A0 0241 FF80                  		andi.w	#$FF80,d1
000088A4 9041                       		sub.w	d1,d0
000088A6 0C40 0280                  		cmpi.w	#$280,d0
000088AA 6200                       		bhi.s	Obj18_Delete
000088AC 4E75                       		rts	
000088AE                            ; ===========================================================================
000088AE                            
000088AE                            Obj18_Delete:				; XREF: Obj18_Index
000088AE 6000 0000                  		bra.w	DeleteObject
000088B2                            ; ===========================================================================
000088B2                            ; ---------------------------------------------------------------------------
000088B2                            ; Sprite mappings - unused
000088B2                            ; ---------------------------------------------------------------------------
000088B2                            Map_obj18x:
000088B2                            	include "_maps\obj18x.asm"
000088B2                            ; ---------------------------------------------------------------------------
000088B2                            ; Sprite mappings - unused
000088B2                            ; ---------------------------------------------------------------------------
000088B2 0000                       		dc.w byte_80FE-Map_obj18x
000088B4 0000                       		dc.w byte_8109-Map_obj18x
000088B6 02                         byte_80FE:	dc.b 2
000088B7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000088BC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000088C1 0A                         byte_8109:	dc.b $A
000088C2 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000088C7 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000088CC 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000088D1 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000088D6 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000088DB F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000088E0 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000088E5 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000088EA 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000088EF 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000088F4                            		even
000088F4                            		even
000088F4                            
000088F4                            ; ---------------------------------------------------------------------------
000088F4                            ; Sprite mappings - GHZ	platforms
000088F4                            ; ---------------------------------------------------------------------------
000088F4                            Map_obj18:
000088F4                            	include "_maps\obj18ghz.asm"
000088F4                            ; ---------------------------------------------------------------------------
000088F4                            ; Sprite mappings - GHZ	platforms
000088F4                            ; ---------------------------------------------------------------------------
000088F4 0000                       		dc.w byte_8140-Map_obj18
000088F6 0000                       		dc.w byte_8155-Map_obj18
000088F8 04                         byte_8140:	dc.b 4
000088F9 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000088FE F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008903 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008908 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000890D 0A                         byte_8155:	dc.b $A
0000890E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008913 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008918 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000891D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008922 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008927 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000892C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008931 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008936 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000893B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008940                            		even
00008940                            		even
00008940                            
00008940                            ; ---------------------------------------------------------------------------
00008940                            ; Sprite mappings - SYZ	platforms
00008940                            ; ---------------------------------------------------------------------------
00008940                            Map_obj18a:
00008940                            	include "_maps\obj18syz.asm"
00008940                            ; ---------------------------------------------------------------------------
00008940                            ; Sprite mappings - SYZ	platforms
00008940                            ; ---------------------------------------------------------------------------
00008940 0000                       		dc.w byte_818A-Map_obj18a
00008942 03                         byte_818A:	dc.b 3
00008943 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008948 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000894D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008952                            		even
00008952                            		even
00008952                            
00008952                            ; ---------------------------------------------------------------------------
00008952                            ; Sprite mappings - SLZ	platforms
00008952                            ; ---------------------------------------------------------------------------
00008952                            Map_obj18b:
00008952                            	include "_maps\obj18slz.asm"
00008952                            ; ---------------------------------------------------------------------------
00008952                            ; Sprite mappings - SLZ	platforms
00008952                            ; ---------------------------------------------------------------------------
00008952 0000                       		dc.w byte_819C-Map_obj18b
00008954 02                         byte_819C:	dc.b 2
00008955 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000895A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008960 00                         		even
00008960 00                         		even
00008960                            
00008960                            ; ===========================================================================
00008960                            ; ---------------------------------------------------------------------------
00008960                            ; Object 19 - Pearto bombs
00008960                            ; ---------------------------------------------------------------------------
00008960                            Obj19:					; XREF: Obj_Index
00008960 7000                       		moveq	#0,d0
00008962 1028 0024                  		move.b	$24(a0),d0
00008966 323B 0000                  		move.w	off_7070(pc,d0.w),d1
0000896A 4EFB 1000                  		jmp	off_7070(pc,d1.w)
0000896E                            ; ---------------------------------------------------------------------------
0000896E                            
0000896E 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008974                            ; ---------------------------------------------------------------------------
00008974                            
00008974                            loc_7076:
00008974 5428 0024                  		addq.b	#2,$24(a0)
00008978 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008980 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008986 117C 0004 0001             		move.b	#4,1(a0)
0000898C 117C 0003 0019             		move.b	#3,$19(a0)
00008992 117C 0087 0020             		move.b	#$87,$20(a0)
00008998 117C 0008 0018             		move.b	#8,$18(a0)
0000899E 317C 0018 0030             		move.w	#$18,$30(a0)
000089A4                            
000089A4                            loc_70A6:
000089A4 0828 0007 0022             		btst	#7,$22(a0)
000089AA 6600                       		bne.s	loc_70C2
000089AC 4A68 0030                  		tst.w	$30(a0)
000089B0 6600                       		bne.s	loc_70D2
000089B2 4EB9 0000 0000             		jsr	ObjHitFloor
000089B8 4A41                       		tst.w	d1
000089BA 6A00                       		bpl.s	loc_70D6
000089BC D368 000C                  		add.w	d1,$C(a0)
000089C0                            
000089C0                            loc_70C2:
000089C0 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000089C4 117C 0000 0024             		move.b	#0,$24(a0)
000089CA                            ; ---------------------------------------------------------------------------
000089CA                            
000089CA                            loc_70D2:
000089CA 5368 0030                  		subq.w	#1,$30(a0)
000089CE                            
000089CE                            loc_70D6:
000089CE 6100 0000                  		bsr.w	ObjectFall
000089D2 6100 0000                  		bsr.w	DisplaySprite
000089D6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000089DA 0640 00E0                  		addi.w	#$E0,d0
000089DE B068 000C                  		cmp.w	$C(a0),d0
000089E2 6500                       		bcs.s	loc_70EE
000089E4 4E75                       		rts
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            loc_70EE:
000089E6 6100 0000                  		bsr.w	DeleteObject
000089EA 4E75                       		rts
000089EC                            		
000089EC                            Map_obj19:
000089EC                            	include "_maps\obj19.asm"
000089EC                            Map_02b4:
000089EC 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000089EE 01                         Map_02b4_2: 	dc.b $1
000089EF F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000089F4                            	even
000089F4                            	even
000089F4                            ; ===========================================================================
000089F4                            ; ---------------------------------------------------------------------------
000089F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089F4                            ; ---------------------------------------------------------------------------
000089F4                            Map_obj48:
000089F4                            	include "_maps\obj48.asm"
000089F4                            ; ---------------------------------------------------------------------------
000089F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089F4                            ; ---------------------------------------------------------------------------
000089F4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000089F8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000089FC 06                         byte_81B2:	dc.b 6
000089FD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008A02 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A07 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A0C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A11 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A16 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A1B 04                         byte_81D1:	dc.b 4
00008A1C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A21 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A26 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A2B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A30 04                         byte_81E6:	dc.b 4
00008A31 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A36 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A3B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A40 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A45 04                         byte_81FB:	dc.b 4
00008A46 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A4B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008A50 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008A55 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008A5A                            		even
00008A5A                            		even
00008A5A                            
00008A5A                            ; ===========================================================================
00008A5A                            ; ---------------------------------------------------------------------------
00008A5A                            ; Object 1A - GHZ collapsing ledge
00008A5A                            ; ---------------------------------------------------------------------------
00008A5A                            
00008A5A                            Obj1A:					; XREF: Obj_Index
00008A5A 7000                       		moveq	#0,d0
00008A5C 1028 0024                  		move.b	$24(a0),d0
00008A60 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008A64 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008A68                            ; ===========================================================================
00008A68 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008A6C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008A70 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            Obj1A_Main:				; XREF: Obj1A_Index
00008A74 5428 0024                  		addq.b	#2,$24(a0)
00008A78 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008A80 317C 4000 0002             		move.w	#$4000,2(a0)
00008A86 0028 0004 0001             		ori.b	#4,1(a0)
00008A8C 117C 0004 0018             		move.b	#4,$18(a0)
00008A92 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008A98 117C 0064 0019             		move.b	#$64,$19(a0)
00008A9E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AA4 117C 0038 0016             		move.b	#$38,$16(a0)
00008AAA 08E8 0004 0001             		bset	#4,1(a0)
00008AB0                            
00008AB0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AB0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008AB4 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008AB6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008ABA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008ABE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AC2                            
00008AC2                            Obj1A_Slope:
00008AC2 323C 0030                  		move.w	#$30,d1
00008AC6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008ACC 6100 F212                  		bsr.w	SlopeObject
00008AD0 6000 0000                  		bra.w	MarkObjGone
00008AD4                            ; ===========================================================================
00008AD4                            
00008AD4                            Obj1A_Touch:				; XREF: Obj1A_Index
00008AD4 4A28 0038                  		tst.b	$38(a0)
00008AD8 6700 0000                  		beq.w	loc_847A
00008ADC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008AE2 5328 0038                  		subq.b	#1,$38(a0)
00008AE6                            
00008AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AE6                            
00008AE6                            
00008AE6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008AE6 323C 0030                  		move.w	#$30,d1
00008AEA 6100 F294                  		bsr.w	ExitPlatform
00008AEE 323C 0030                  		move.w	#$30,d1
00008AF2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AF8 3428 0008                  		move.w	8(a0),d2
00008AFC 6100 0000                  		bsr.w	SlopeObject2
00008B00 6000 0000                  		bra.w	MarkObjGone
00008B04                            ; End of function Obj1A_WalkOff
00008B04                            
00008B04                            ; ===========================================================================
00008B04                            
00008B04                            Obj1A_Display:				; XREF: Obj1A_Index
00008B04 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B08 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B0A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B0E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B12 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B16 6000 0000                  		bra.w	DisplaySprite
00008B1A                            ; ===========================================================================
00008B1A                            
00008B1A                            loc_82D0:				; XREF: Obj1A_Display
00008B1A 5328 0038                  		subq.b	#1,$38(a0)
00008B1E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B22 43F8 D000                  		lea	($FFFFD000).w,a1
00008B26 0829 0003 0022             		btst	#3,$22(a1)
00008B2C 6700                       		beq.s	loc_82FC
00008B2E 4A28 0038                  		tst.b	$38(a0)
00008B32 6600                       		bne.s	locret_8308
00008B34 08A9 0003 0022             		bclr	#3,$22(a1)
00008B3A 08A9 0005 0022             		bclr	#5,$22(a1)
00008B40 137C 0001 001D             		move.b	#1,$1D(a1)
00008B46                            
00008B46                            loc_82FC:
00008B46 117C 0000 003A             		move.b	#0,$3A(a0)
00008B4C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B52                            
00008B52                            locret_8308:
00008B52 4E75                       		rts	
00008B54                            ; ===========================================================================
00008B54                            
00008B54                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B54 6100 0000                  		bsr.w	ObjectFall
00008B58 6100 0000                  		bsr.w	DisplaySprite
00008B5C 4A28 0001                  		tst.b	1(a0)
00008B60 6A00                       		bpl.s	Obj1A_Delete
00008B62 4E75                       		rts	
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            Obj1A_Delete:				; XREF: Obj1A_Index
00008B64 6100 0000                  		bsr.w	DeleteObject
00008B68 4E75                       		rts	
00008B6A                            ; ===========================================================================
00008B6A                            ; ---------------------------------------------------------------------------
00008B6A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008B6A                            ; ---------------------------------------------------------------------------
00008B6A                            
00008B6A                            Obj53:					; XREF: Obj_Index
00008B6A 7000                       		moveq	#0,d0
00008B6C 1028 0024                  		move.b	$24(a0),d0
00008B70 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008B74 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008B78                            ; ===========================================================================
00008B78 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008B7C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008B80 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008B84                            ; ===========================================================================
00008B84                            
00008B84                            Obj53_Main:				; XREF: Obj53_Index
00008B84 5428 0024                  		addq.b	#2,$24(a0)
00008B88 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008B90 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008B96 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008B9C 6600                       		bne.s	Obj53_NotSLZ
00008B9E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BA4 5428 001A                  		addq.b	#2,$1A(a0)
00008BA8                            
00008BA8                            Obj53_NotSLZ:
00008BA8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BAE 6600                       		bne.s	Obj53_NotSBZ
00008BB0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008BB6                            
00008BB6                            Obj53_NotSBZ:
00008BB6 0028 0004 0001             		ori.b	#4,1(a0)
00008BBC 117C 0004 0018             		move.b	#4,$18(a0)
00008BC2 117C 0007 0038             		move.b	#7,$38(a0)
00008BC8 117C 0044 0019             		move.b	#$44,$19(a0)
00008BCE                            
00008BCE                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008BCE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008BD2 6700                       		beq.s	Obj53_Solid	; if not, branch
00008BD4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008BD8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008BDC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008BE0                            
00008BE0                            Obj53_Solid:
00008BE0 323C 0020                  		move.w	#$20,d1
00008BE4 6100 F026                  		bsr.w	PlatformObject
00008BE8 4A28 0028                  		tst.b	$28(a0)
00008BEC 6A00                       		bpl.s	Obj53_MarkAsGone
00008BEE 0829 0003 0022             		btst	#3,$22(a1)
00008BF4 6700                       		beq.s	Obj53_MarkAsGone
00008BF6 08A8 0000 0001             		bclr	#0,1(a0)
00008BFC 3029 0008                  		move.w	8(a1),d0
00008C00 9068 0008                  		sub.w	8(a0),d0
00008C04 6400                       		bcc.s	Obj53_MarkAsGone
00008C06 08E8 0000 0001             		bset	#0,1(a0)
00008C0C                            
00008C0C                            Obj53_MarkAsGone:
00008C0C 6000 0000                  		bra.w	MarkObjGone
00008C10                            ; ===========================================================================
00008C10                            
00008C10                            Obj53_Touch:				; XREF: Obj53_Index
00008C10 4A28 0038                  		tst.b	$38(a0)
00008C14 6700 0000                  		beq.w	loc_8458
00008C18 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C1E 5328 0038                  		subq.b	#1,$38(a0)
00008C22                            
00008C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C22                            
00008C22                            
00008C22                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C22 323C 0020                  		move.w	#$20,d1
00008C26 6100 F158                  		bsr.w	ExitPlatform
00008C2A 3428 0008                  		move.w	8(a0),d2
00008C2E 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C32 6000 0000                  		bra.w	MarkObjGone
00008C36                            ; End of function Obj53_WalkOff
00008C36                            
00008C36                            ; ===========================================================================
00008C36                            
00008C36                            Obj53_Display:				; XREF: Obj53_Index
00008C36 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C3A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C3C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C40 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C44 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C48 6000 0000                  		bra.w	DisplaySprite
00008C4C                            ; ===========================================================================
00008C4C                            
00008C4C                            loc_8402:
00008C4C 5328 0038                  		subq.b	#1,$38(a0)
00008C50 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C54 43F8 D000                  		lea	($FFFFD000).w,a1
00008C58 0829 0003 0022             		btst	#3,$22(a1)
00008C5E 6700                       		beq.s	loc_842E
00008C60 4A28 0038                  		tst.b	$38(a0)
00008C64 6600                       		bne.s	locret_843A
00008C66 08A9 0003 0022             		bclr	#3,$22(a1)
00008C6C 08A9 0005 0022             		bclr	#5,$22(a1)
00008C72 137C 0001 001D             		move.b	#1,$1D(a1)
00008C78                            
00008C78                            loc_842E:
00008C78 117C 0000 003A             		move.b	#0,$3A(a0)
00008C7E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008C84                            
00008C84                            locret_843A:
00008C84 4E75                       		rts	
00008C86                            ; ===========================================================================
00008C86                            
00008C86                            Obj53_TimeZero:				; XREF: Obj53_Display
00008C86 6100 0000                  		bsr.w	ObjectFall
00008C8A 6100 0000                  		bsr.w	DisplaySprite
00008C8E 4A28 0001                  		tst.b	1(a0)
00008C92 6A00                       		bpl.s	Obj53_Delete
00008C94 4E75                       		rts	
00008C96                            ; ===========================================================================
00008C96                            
00008C96                            Obj53_Delete:				; XREF: Obj53_Index
00008C96 6100 0000                  		bsr.w	DeleteObject
00008C9A 4E75                       		rts	
00008C9C                            ; ===========================================================================
00008C9C                            
00008C9C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008C9C 117C 0000 003A             		move.b	#0,$3A(a0)
00008CA2                            
00008CA2                            loc_8458:				; XREF: Obj53_Touch
00008CA2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CA8 0828 0000 0028             		btst	#0,$28(a0)
00008CAE 6700                       		beq.s	loc_846C
00008CB0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008CB6                            
00008CB6                            loc_846C:
00008CB6 7207                       		moveq	#7,d1
00008CB8 5228 001A                  		addq.b	#1,$1A(a0)
00008CBC 6000                       		bra.s	loc_8486
00008CBE                            ; ===========================================================================
00008CBE                            
00008CBE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008CBE 117C 0000 003A             		move.b	#0,$3A(a0)
00008CC4                            
00008CC4                            loc_847A:				; XREF: Obj1A_Touch
00008CC4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008CCA 7218                       		moveq	#$18,d1
00008CCC 5428 001A                  		addq.b	#2,$1A(a0)
00008CD0                            
00008CD0                            loc_8486:				; XREF: Obj53_Collapse
00008CD0 7000                       		moveq	#0,d0
00008CD2 1028 001A                  		move.b	$1A(a0),d0
00008CD6 D040                       		add.w	d0,d0
00008CD8 2668 0004                  		movea.l	4(a0),a3
00008CDC D6F3 0000                  		adda.w	(a3,d0.w),a3
00008CE0 524B                       		addq.w	#1,a3
00008CE2 08E8 0005 0001             		bset	#5,1(a0)
00008CE8 1810                       		move.b	0(a0),d4
00008CEA 1A28 0001                  		move.b	1(a0),d5
00008CEE 2248                       		movea.l	a0,a1
00008CF0 6000                       		bra.s	loc_84B2
00008CF2                            ; ===========================================================================
00008CF2                            
00008CF2                            loc_84AA:
00008CF2 6100 0000                  		bsr.w	SingleObjLoad
00008CF6 6600                       		bne.s	loc_84F2
00008CF8 5A4B                       		addq.w	#5,a3
00008CFA                            
00008CFA                            loc_84B2:
00008CFA 137C 0006 0024             		move.b	#6,$24(a1)
00008D00 1284                       		move.b	d4,0(a1)
00008D02 234B 0004                  		move.l	a3,4(a1)
00008D06 1345 0001                  		move.b	d5,1(a1)
00008D0A 3368 0008 0008             		move.w	8(a0),8(a1)
00008D10 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D16 3368 0002 0002             		move.w	2(a0),2(a1)
00008D1C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D22 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D28 135C 0038                  		move.b	(a4)+,$38(a1)
00008D2C B3C8                       		cmpa.l	a0,a1
00008D2E 6400                       		bcc.s	loc_84EE
00008D30 6100 0000                  		bsr.w	DisplaySprite2
00008D34                            
00008D34                            loc_84EE:
00008D34 51C9 FFBC                  		dbf	d1,loc_84AA
00008D38                            
00008D38                            loc_84F2:
00008D38 6100 0000                  		bsr.w	DisplaySprite
00008D3C 303C 00B9                  		move.w	#$B9,d0
00008D40 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D46                            ; ===========================================================================
00008D46                            ; ---------------------------------------------------------------------------
00008D46                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D46                            ; ---------------------------------------------------------------------------
00008D46 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008D56 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008D60 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008D68 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008D70                            
00008D70                            ; ---------------------------------------------------------------------------
00008D70                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008D70                            ; ---------------------------------------------------------------------------
00008D70                            
00008D70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D70                            
00008D70                            
00008D70                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008D70 43F8 D000                  		lea	($FFFFD000).w,a1
00008D74 0829 0003 0022             		btst	#3,$22(a1)
00008D7A 6700                       		beq.s	locret_856E
00008D7C 3029 0008                  		move.w	8(a1),d0
00008D80 9068 0008                  		sub.w	8(a0),d0
00008D84 D041                       		add.w	d1,d0
00008D86 E248                       		lsr.w	#1,d0
00008D88 0828 0000 0001             		btst	#0,1(a0)
00008D8E 6700                       		beq.s	loc_854E
00008D90 4640                       		not.w	d0
00008D92 D041                       		add.w	d1,d0
00008D94                            
00008D94                            loc_854E:
00008D94 7200                       		moveq	#0,d1
00008D96 1232 0000                  		move.b	(a2,d0.w),d1
00008D9A 3028 000C                  		move.w	$C(a0),d0
00008D9E 9041                       		sub.w	d1,d0
00008DA0 7200                       		moveq	#0,d1
00008DA2 1229 0016                  		move.b	$16(a1),d1
00008DA6 9041                       		sub.w	d1,d0
00008DA8 3340 000C                  		move.w	d0,$C(a1)
00008DAC 9468 0008                  		sub.w	8(a0),d2
00008DB0 9569 0008                  		sub.w	d2,8(a1)
00008DB4                            
00008DB4                            locret_856E:
00008DB4 4E75                       		rts	
00008DB6                            ; End of function SlopeObject2
00008DB6                            
00008DB6                            ; ===========================================================================
00008DB6                            ; ---------------------------------------------------------------------------
00008DB6                            ; Collision data for GHZ collapsing ledge
00008DB6                            ; ---------------------------------------------------------------------------
00008DB6                            Obj1A_SlopeData:
00008DB6                            		incbin	misc\ghzledge.bin
00008DE6                            		even
00008DE6                            
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            ; Sprite mappings - GHZ	collapsing ledge
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            Map_obj1A:
00008DE6                            	include "_maps\obj1A.asm"
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            ; Sprite mappings - GHZ	collapsing ledge
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008DEA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008DEE 10                         byte_85A8:	dc.b $10
00008DEF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008DF4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008DF9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008DFE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E0D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E12 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E21 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E26 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E2B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E30 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E35 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E3A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E3F 10                         byte_85F9:	dc.b $10
00008E40 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E45 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E4A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E4F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E54 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E59 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E5E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E63 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E68 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E6D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E72 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E7C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E81 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E86 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E90 19                         byte_864A:	dc.b $19
00008E91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008E96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008E9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008EA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008EB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EBE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008EC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008EC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ECD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008ED2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008ED7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008EDC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008EE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008EE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008EEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008EF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008EFA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008EFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F0E 19                         byte_86C8:	dc.b $19
00008F0F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F14 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F19 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F1E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F23 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F28 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F2D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F32 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F37 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F3C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F41 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F46 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F4B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F50 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F55 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F5A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008F5F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F64 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F69 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F6E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F73 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F78 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008F7D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F82 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F8C                            		even
00008F8C                            		even
00008F8C                            
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            Map_obj53:
00008F8C                            	include "_maps\obj53.asm"
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008F90 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008F94 04                         byte_874E:	dc.b 4
00008F95 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008F9A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008F9F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FA4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FA9 08                         byte_8763:	dc.b 8
00008FAA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FAF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FB4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FB9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008FBE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008FC3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008FC8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008FCD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008FD2 04                         byte_878C:	dc.b 4
00008FD3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008FD8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008FDD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FE2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008FE7 08                         byte_87A1:	dc.b 8
00008FE8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FED F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008FF2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FF7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008FFC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009001 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009006 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000900B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009010                            		even
00009010                            		even
00009010                            
00009010                            ; ===========================================================================
00009010                            ; ---------------------------------------------------------------------------
00009010                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009010                            ; ---------------------------------------------------------------------------
00009010                            
00009010                            Obj1C:					; XREF: Obj_Index
00009010 7000                       		moveq	#0,d0
00009012 1028 0024                  		move.b	$24(a0),d0
00009016 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000901A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000901E                            ; ===========================================================================
0000901E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009020 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009022                            ; ===========================================================================
00009022                            
00009022                            Obj1C_Main:				; XREF: Obj1C_Index
00009022 5428 0024                  		addq.b	#2,$24(a0)
00009026 7000                       		moveq	#0,d0
00009028 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000902C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009030 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009034 2159 0004                  		move.l	(a1)+,4(a0)
00009038 3159 0002                  		move.w	(a1)+,2(a0)
0000903C 0028 0004 0001             		ori.b	#4,1(a0)
00009042 1159 001A                  		move.b	(a1)+,$1A(a0)
00009046 1159 0019                  		move.b	(a1)+,$19(a0)
0000904A 1159 0018                  		move.b	(a1)+,$18(a0)
0000904E 1159 0020                  		move.b	(a1)+,$20(a0)
00009052                            
00009052                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009052 3028 0008                  		move.w	8(a0),d0
00009056 0240 FF80                  		andi.w	#$FF80,d0
0000905A 3238 F700                  		move.w	($FFFFF700).w,d1
0000905E 0441 0080                  		subi.w	#$80,d1
00009062 0241 FF80                  		andi.w	#$FF80,d1
00009066 9041                       		sub.w	d1,d0
00009068 0C40 0280                  		cmpi.w	#$280,d0
0000906C 6200 0000                  		bhi.w	DeleteObject
00009070 6000 0000                  		bra.w	DisplaySprite
00009074                            ; ===========================================================================
00009074                            ; ---------------------------------------------------------------------------
00009074                            ; Variables for	object $1C are stored in an array
00009074                            ; ---------------------------------------------------------------------------
00009074 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009078 44D8                       		dc.w $44D8		; VRAM setting
0000907A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000907E 0000 0000                  		dc.l Map_obj1C
00009082 44D8                       		dc.w $44D8
00009084 0008 0200                  		dc.b 0,	8, 2, 0
00009088 0000 0000                  		dc.l Map_obj1C
0000908C 44D8                       		dc.w $44D8
0000908E 0008 0200                  		dc.b 0,	8, 2, 0
00009092 0000 80F4                  		dc.l Map_obj11
00009096 438E                       		dc.w $438E
00009098 0110 0100                  		dc.b 1,	$10, 1,	0
0000909C                            ; ---------------------------------------------------------------------------
0000909C                            ; Sprite mappings - SLZ	lava thrower
0000909C                            ; ---------------------------------------------------------------------------
0000909C                            Map_obj1C:
0000909C                            	include "_maps\obj1C.asm"
0000909C                            ; ---------------------------------------------------------------------------
0000909C                            ; Sprite mappings - SLZ	lava thrower
0000909C                            ; ---------------------------------------------------------------------------
0000909C 0000                       		dc.w byte_8858-Map_obj1C
0000909E 01                         byte_8858:	dc.b 1
0000909F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090A4                            		even
000090A4                            		even
000090A4                            
000090A4                            ; ===========================================================================
000090A4                            ; ---------------------------------------------------------------------------
000090A4                            ; Object 1D - switch that activates when Sonic touches it
000090A4                            ; (this	is not used anywhere in	the game)
000090A4                            ; ---------------------------------------------------------------------------
000090A4                            
000090A4                            Obj1D:					; XREF: Obj_Index
000090A4 7000                       		moveq	#0,d0
000090A6 1028 0024                  		move.b	$24(a0),d0
000090AA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090AE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090B2                            ; ===========================================================================
000090B2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090B4 0000                       		dc.w Obj1D_Action-Obj1D_Index
000090B6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000090B8                            ; ===========================================================================
000090B8                            
000090B8                            Obj1D_Main:				; XREF: Obj1D_Index
000090B8 5428 0024                  		addq.b	#2,$24(a0)
000090BC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000090C4 317C 4000 0002             		move.w	#$4000,2(a0)
000090CA 117C 0004 0001             		move.b	#4,1(a0)
000090D0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000090D6 117C 0010 0019             		move.b	#$10,$19(a0)
000090DC 117C 0005 0018             		move.b	#5,$18(a0)
000090E2                            
000090E2                            Obj1D_Action:				; XREF: Obj1D_Index
000090E2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000090E8 323C 0010                  		move.w	#$10,d1
000090EC 6100 0000                  		bsr.w	Obj1D_ChkTouch
000090F0 6700                       		beq.s	Obj1D_ChkDel
000090F2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000090F6 7001                       		moveq	#1,d0
000090F8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000090FC                            
000090FC                            Obj1D_ChkDel:
000090FC 6100 0000                  		bsr.w	DisplaySprite
00009100 3028 0008                  		move.w	8(a0),d0
00009104 0240 FF80                  		andi.w	#$FF80,d0
00009108 3238 F700                  		move.w	($FFFFF700).w,d1
0000910C 0441 0080                  		subi.w	#$80,d1
00009110 0241 FF80                  		andi.w	#$FF80,d1
00009114 9041                       		sub.w	d1,d0
00009116 0C40 0280                  		cmpi.w	#$280,d0
0000911A 6200 0000                  		bhi.w	Obj1D_Delete
0000911E 4E75                       		rts	
00009120                            ; ===========================================================================
00009120                            
00009120                            Obj1D_Delete:				; XREF: Obj1D_Index
00009120 6100 0000                  		bsr.w	DeleteObject
00009124 4E75                       		rts	
00009126                            ; ---------------------------------------------------------------------------
00009126                            ; Subroutine to	check if Sonic touches the object
00009126                            ; ---------------------------------------------------------------------------
00009126                            
00009126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009126                            
00009126                            
00009126                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009126 43F8 D000                  		lea	($FFFFD000).w,a1
0000912A 3029 0008                  		move.w	8(a1),d0
0000912E 9068 0008                  		sub.w	8(a0),d0
00009132 D041                       		add.w	d1,d0
00009134 6B00                       		bmi.s	loc_8918
00009136 D241                       		add.w	d1,d1
00009138 B041                       		cmp.w	d1,d0
0000913A 6400                       		bcc.s	loc_8918
0000913C 3429 000C                  		move.w	$C(a1),d2
00009140 1229 0016                  		move.b	$16(a1),d1
00009144 4881                       		ext.w	d1
00009146 D242                       		add.w	d2,d1
00009148 3028 000C                  		move.w	$C(a0),d0
0000914C 0440 0010                  		subi.w	#$10,d0
00009150 9041                       		sub.w	d1,d0
00009152 6200                       		bhi.s	loc_8918
00009154 0C40 FFF0                  		cmpi.w	#-$10,d0
00009158 6500                       		bcs.s	loc_8918
0000915A 70FF                       		moveq	#-1,d0
0000915C 4E75                       		rts	
0000915E                            ; ===========================================================================
0000915E                            
0000915E                            loc_8918:
0000915E 7000                       		moveq	#0,d0
00009160 4E75                       		rts	
00009162                            ; End of function Obj1D_ChkTouch
00009162                            
00009162                            ; ===========================================================================
00009162                            ; ---------------------------------------------------------------------------
00009162                            ; Sprite mappings - object 1D
00009162                            ; ---------------------------------------------------------------------------
00009162                            Map_obj1D:
00009162                            	include "_maps\obj1D.asm"
00009162                            ; ---------------------------------------------------------------------------
00009162                            ; Sprite mappings - object 1D
00009162                            ; ---------------------------------------------------------------------------
00009162 0000                       		dc.w byte_891E-Map_obj1D
00009164 04                         byte_891E:	dc.b 4
00009165 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000916A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000916F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009174 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000917A 00                         		even
0000917A 00                         		even
0000917A                            
0000917A                            ; ===========================================================================
0000917A                            ; ---------------------------------------------------------------------------
0000917A                            ; Object 2A - doors (SBZ)
0000917A                            ; ---------------------------------------------------------------------------
0000917A                            
0000917A                            Obj2A:					; XREF: Obj_Index
0000917A 7000                       		moveq	#0,d0
0000917C 1028 0024                  		move.b	$24(a0),d0
00009180 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009184 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009188                            ; ===========================================================================
00009188 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000918A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000918C                            ; ===========================================================================
0000918C                            
0000918C                            Obj2A_Main:				; XREF: Obj2A_Index
0000918C 5428 0024                  		addq.b	#2,$24(a0)
00009190 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009198 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000919E 0028 0004 0001             		ori.b	#4,1(a0)
000091A4 117C 0008 0019             		move.b	#8,$19(a0)
000091AA 117C 0004 0018             		move.b	#4,$18(a0)
000091B0                            
000091B0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091B0 323C 0040                  		move.w	#$40,d1
000091B4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000091B8 3038 D008                  		move.w	($FFFFD008).w,d0
000091BC D041                       		add.w	d1,d0
000091BE B068 0008                  		cmp.w	8(a0),d0
000091C2 6500                       		bcs.s	Obj2A_Animate
000091C4 9041                       		sub.w	d1,d0
000091C6 9041                       		sub.w	d1,d0
000091C8 B068 0008                  		cmp.w	8(a0),d0
000091CC 6400                       		bcc.s	Obj2A_Animate
000091CE D041                       		add.w	d1,d0
000091D0 B068 0008                  		cmp.w	8(a0),d0
000091D4 6400                       		bcc.s	loc_899A
000091D6 0828 0000 0022             		btst	#0,$22(a0)
000091DC 6600                       		bne.s	Obj2A_Animate
000091DE 6000                       		bra.s	Obj2A_Open
000091E0                            ; ===========================================================================
000091E0                            
000091E0                            loc_899A:				; XREF: Obj2A_OpenShut
000091E0 0828 0000 0022             		btst	#0,$22(a0)
000091E6 6700                       		beq.s	Obj2A_Animate
000091E8                            
000091E8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000091E8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000091EE                            
000091EE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000091EE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000091F4 6100 0000                  		bsr.w	AnimateSprite
000091F8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000091FC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000091FE 323C 0011                  		move.w	#$11,d1
00009202 343C 0020                  		move.w	#$20,d2
00009206 3602                       		move.w	d2,d3
00009208 5243                       		addq.w	#1,d3
0000920A 3828 0008                  		move.w	8(a0),d4
0000920E 6100 0000                  		bsr.w	SolidObject
00009212                            
00009212                            Obj2A_MarkAsUsed:
00009212 6000 0000                  		bra.w	MarkObjGone
00009216                            ; ===========================================================================
00009216                            Ani_obj2A:
00009216                            	include "_anim\obj2A.asm"
00009216                            ; ---------------------------------------------------------------------------
00009216                            ; Animation script - doors (SBZ)
00009216                            ; ---------------------------------------------------------------------------
00009216 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009218 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000921A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009226 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009232                            		even
00009232                            		even
00009232                            
00009232                            ; ---------------------------------------------------------------------------
00009232                            ; Sprite mappings - doors (SBZ)
00009232                            ; ---------------------------------------------------------------------------
00009232                            Map_obj2A:
00009232                            	include "_maps\obj2A.asm"
00009232                            ; ---------------------------------------------------------------------------
00009232                            ; Sprite mappings - doors (SBZ)
00009232                            ; ---------------------------------------------------------------------------
00009232 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009236 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000923A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000923E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009242 0000                       		dc.w byte_8A56-Map_obj2A
00009244 02                         byte_89FE:	dc.b 2
00009245 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000924A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000924F 02                         byte_8A09:	dc.b 2
00009250 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009255 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000925A 02                         byte_8A14:	dc.b 2
0000925B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009260 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009265 02                         byte_8A1F:	dc.b 2
00009266 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000926B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009270 02                         byte_8A2A:	dc.b 2
00009271 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009276 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000927B 02                         byte_8A35:	dc.b 2
0000927C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009281 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009286 02                         byte_8A40:	dc.b 2
00009287 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000928C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009291 02                         byte_8A4B:	dc.b 2
00009292 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009297 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000929C 02                         byte_8A56:	dc.b 2
0000929D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000092A2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092A8 00                         		even
000092A8 00                         		even
000092A8                            
000092A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092A8                            
000092A8                            
000092A8                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092A8 6100 0000                  		bsr.w	Obj44_SolidWall2
000092AC 6700                       		beq.s	loc_8AA8
000092AE 6B00 0000                  		bmi.w	loc_8AC4
000092B2 4A40                       		tst.w	d0
000092B4 6700 0000                  		beq.w	loc_8A92
000092B8 6B00                       		bmi.s	loc_8A7C
000092BA 4A69 0010                  		tst.w	$10(a1)
000092BE 6B00                       		bmi.s	loc_8A92
000092C0 6000                       		bra.s	loc_8A82
000092C2                            ; ===========================================================================
000092C2                            
000092C2                            loc_8A7C:
000092C2 4A69 0010                  		tst.w	$10(a1)
000092C6 6A00                       		bpl.s	loc_8A92
000092C8                            
000092C8                            loc_8A82:
000092C8 9169 0008                  		sub.w	d0,8(a1)
000092CC 337C 0000 0014             		move.w	#0,$14(a1)
000092D2 337C 0000 0010             		move.w	#0,$10(a1)
000092D8                            
000092D8                            loc_8A92:
000092D8 0829 0001 0022             		btst	#1,$22(a1)
000092DE 6600                       		bne.s	loc_8AB6
000092E0 08E9 0005 0022             		bset	#5,$22(a1)
000092E6 08E8 0005 0022             		bset	#5,$22(a0)
000092EC 4E75                       		rts	
000092EE                            ; ===========================================================================
000092EE                            
000092EE                            loc_8AA8:
000092EE 0828 0005 0022             		btst	#5,$22(a0)
000092F4 6700                       		beq.s	locret_8AC2
000092F6 337C 0001 001C             		move.w	#1,$1C(a1)
000092FC                            
000092FC                            loc_8AB6:
000092FC 08A8 0005 0022             		bclr	#5,$22(a0)
00009302 08A9 0005 0022             		bclr	#5,$22(a1)
00009308                            
00009308                            locret_8AC2:
00009308 4E75                       		rts	
0000930A                            ; ===========================================================================
0000930A                            
0000930A                            loc_8AC4:
0000930A 4A69 0012                  		tst.w	$12(a1)
0000930E 6A00                       		bpl.s	locret_8AD8
00009310 4A43                       		tst.w	d3
00009312 6A00                       		bpl.s	locret_8AD8
00009314 9769 000C                  		sub.w	d3,$C(a1)
00009318 337C 0000 0012             		move.w	#0,$12(a1)
0000931E                            
0000931E                            locret_8AD8:
0000931E 4E75                       		rts	
00009320                            ; End of function Obj44_SolidWall
00009320                            
00009320                            
00009320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009320                            
00009320                            
00009320                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009320 43F8 D000                  		lea	($FFFFD000).w,a1
00009324 3029 0008                  		move.w	8(a1),d0
00009328 9068 0008                  		sub.w	8(a0),d0
0000932C D041                       		add.w	d1,d0
0000932E 6B00                       		bmi.s	loc_8B48
00009330 3601                       		move.w	d1,d3
00009332 D643                       		add.w	d3,d3
00009334 B043                       		cmp.w	d3,d0
00009336 6200                       		bhi.s	loc_8B48
00009338 1629 0016                  		move.b	$16(a1),d3
0000933C 4883                       		ext.w	d3
0000933E D443                       		add.w	d3,d2
00009340 3629 000C                  		move.w	$C(a1),d3
00009344 9668 000C                  		sub.w	$C(a0),d3
00009348 D642                       		add.w	d2,d3
0000934A 6B00                       		bmi.s	loc_8B48
0000934C 3802                       		move.w	d2,d4
0000934E D844                       		add.w	d4,d4
00009350 B644                       		cmp.w	d4,d3
00009352 6400                       		bcc.s	loc_8B48
00009354 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009358 6B00                       		bmi.s	loc_8B48
0000935A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009360 6400                       		bcc.s	loc_8B48
00009362 4A78 FE08                  		tst.w	($FFFFFE08).w
00009366 6600                       		bne.s	loc_8B48
00009368 3A00                       		move.w	d0,d5
0000936A B240                       		cmp.w	d0,d1
0000936C 6400                       		bcc.s	loc_8B30
0000936E D241                       		add.w	d1,d1
00009370 9041                       		sub.w	d1,d0
00009372 3A00                       		move.w	d0,d5
00009374 4445                       		neg.w	d5
00009376                            
00009376                            loc_8B30:
00009376 3203                       		move.w	d3,d1
00009378 B443                       		cmp.w	d3,d2
0000937A 6400                       		bcc.s	loc_8B3C
0000937C 9644                       		sub.w	d4,d3
0000937E 3203                       		move.w	d3,d1
00009380 4441                       		neg.w	d1
00009382                            
00009382                            loc_8B3C:
00009382 BA41                       		cmp.w	d1,d5
00009384 6200                       		bhi.s	loc_8B44
00009386 7801                       		moveq	#1,d4
00009388 4E75                       		rts	
0000938A                            ; ===========================================================================
0000938A                            
0000938A                            loc_8B44:
0000938A 78FF                       		moveq	#-1,d4
0000938C 4E75                       		rts	
0000938E                            ; ===========================================================================
0000938E                            
0000938E                            loc_8B48:
0000938E 7800                       		moveq	#0,d4
00009390 4E75                       		rts	
00009392                            ; End of function Obj44_SolidWall2
00009392                            
00009392                            ; ===========================================================================
00009392                            ; ---------------------------------------------------------------------------
00009392                            ; Object 1E - Ball Hog enemy (SBZ)
00009392                            ; ---------------------------------------------------------------------------
00009392                            
00009392                            Obj1E:					; XREF: Obj_Index
00009392 7000                       		moveq	#0,d0
00009394 1028 0024                  		move.b	$24(a0),d0
00009398 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000939C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000093A0                            ; ===========================================================================
000093A0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000093A2 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093A4                            ; ===========================================================================
000093A4                            
000093A4                            Obj1E_Main:				; XREF: Obj1E_Index
000093A4 117C 0013 0016             		move.b	#$13,$16(a0)
000093AA 117C 0008 0017             		move.b	#8,$17(a0)
000093B0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000093B8 317C 2302 0002             		move.w	#$2302,2(a0)
000093BE 117C 0004 0001             		move.b	#4,1(a0)
000093C4 117C 0004 0018             		move.b	#4,$18(a0)
000093CA 117C 0005 0020             		move.b	#5,$20(a0)
000093D0 117C 000C 0019             		move.b	#$C,$19(a0)
000093D6 6100 0000                  		bsr.w	ObjectFall
000093DA 4EB9 0000 0000             		jsr	ObjHitFloor
000093E0 4A41                       		tst.w	d1
000093E2 6A00                       		bpl.s	locret_8BAC
000093E4 D368 000C                  		add.w	d1,$C(a0)
000093E8 317C 0000 0012             		move.w	#0,$12(a0)
000093EE 5428 0024                  		addq.b	#2,$24(a0)
000093F2                            
000093F2                            locret_8BAC:
000093F2 4E75                       		rts	
000093F4                            ; ===========================================================================
000093F4                            
000093F4                            Obj1E_Action:				; XREF: Obj1E_Index
000093F4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000093FA 6100 0000                  		bsr.w	AnimateSprite
000093FE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009404 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009406 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000940A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000940C 6000                       		bra.s	Obj1E_MarkAsGone
0000940E                            ; ===========================================================================
0000940E                            
0000940E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000940E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009412                            
00009412                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009412 6000 0000                  		bra.w	MarkObjGone
00009416                            ; ===========================================================================
00009416                            
00009416                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009416 117C 0001 0032             		move.b	#1,$32(a0)
0000941C 6100 0000                  		bsr.w	SingleObjLoad
00009420 6600                       		bne.s	loc_8C1A
00009422 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009426 3368 0008 0008             		move.w	8(a0),8(a1)
0000942C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009432 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009438 337C 0000 0012             		move.w	#0,$12(a1)
0000943E 70FC                       		moveq	#-4,d0
00009440 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009446 6700                       		beq.s	loc_8C0A	; if not, branch
00009448 4440                       		neg.w	d0
0000944A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000944E                            
0000944E                            loc_8C0A:
0000944E D169 0008                  		add.w	d0,8(a1)
00009452 0669 000C 000C             		addi.w	#$C,$C(a1)
00009458 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000945E                            
0000945E                            loc_8C1A:
0000945E 60B2                       		bra.s	Obj1E_MarkAsGone
00009460                            ; ===========================================================================
00009460                            ; ---------------------------------------------------------------------------
00009460                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009460                            ; ---------------------------------------------------------------------------
00009460                            
00009460                            Obj20:					; XREF: Obj_Index
00009460 7000                       		moveq	#0,d0
00009462 1028 0024                  		move.b	$24(a0),d0
00009466 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000946A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000946E                            ; ===========================================================================
0000946E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009470 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009472                            ; ===========================================================================
00009472                            
00009472                            Obj20_Main:				; XREF: Obj20_Index
00009472 5428 0024                  		addq.b	#2,$24(a0)
00009476 117C 0007 0016             		move.b	#7,$16(a0)
0000947C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009484 317C 2302 0002             		move.w	#$2302,2(a0)
0000948A 117C 0004 0001             		move.b	#4,1(a0)
00009490 117C 0003 0018             		move.b	#3,$18(a0)
00009496 117C 0087 0020             		move.b	#$87,$20(a0)
0000949C 117C 0008 0019             		move.b	#8,$19(a0)
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094AC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094B0 117C 0004 001A             		move.b	#4,$1A(a0)
000094B6                            
000094B6                            Obj20_Bounce:				; XREF: Obj20_Index
000094B6 4EB9 0000 0000             		jsr	ObjectFall
000094BC 4A68 0012                  		tst.w	$12(a0)
000094C0 6B00                       		bmi.s	Obj20_ChkExplode
000094C2 4EB9 0000 0000             		jsr	ObjHitFloor
000094C8 4A41                       		tst.w	d1
000094CA 6A00                       		bpl.s	Obj20_ChkExplode
000094CC D368 000C                  		add.w	d1,$C(a0)
000094D0 317C FD00 0012             		move.w	#-$300,$12(a0)
000094D6 4A03                       		tst.b	d3
000094D8 6700                       		beq.s	Obj20_ChkExplode
000094DA 6B00                       		bmi.s	loc_8CA4
000094DC 4A68 0010                  		tst.w	$10(a0)
000094E0 6A00                       		bpl.s	Obj20_ChkExplode
000094E2 4468 0010                  		neg.w	$10(a0)
000094E6 6000                       		bra.s	Obj20_ChkExplode
000094E8                            ; ===========================================================================
000094E8                            
000094E8                            loc_8CA4:				; XREF: Obj20_Bounce
000094E8 4A68 0010                  		tst.w	$10(a0)
000094EC 6B00                       		bmi.s	Obj20_ChkExplode
000094EE 4468 0010                  		neg.w	$10(a0)
000094F2                            
000094F2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000094F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000094F6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000094F8 10BC 0024                  		move.b	#$24,0(a0)
000094FC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009500 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009506 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000950A                            ; ===========================================================================
0000950A                            
0000950A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000950A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000950E 6A00                       		bpl.s	Obj20_Display
00009510 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009516 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000951C                            
0000951C                            Obj20_Display:
0000951C 6100 0000                  		bsr.w	DisplaySprite
00009520 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009524 0640 00E0                  		addi.w	#$E0,d0
00009528 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000952C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009530 4E75                       		rts	
00009532                            ; ===========================================================================
00009532                            ; ---------------------------------------------------------------------------
00009532                            ; Object 24 - explosion	from a destroyed monitor
00009532                            ; ---------------------------------------------------------------------------
00009532                            
00009532                            Obj24:					; XREF: Obj_Index
00009532 7000                       		moveq	#0,d0
00009534 1028 0024                  		move.b	$24(a0),d0
00009538 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000953C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009540                            ; ===========================================================================
00009540 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009542 0000                       		dc.w Obj24_Animate-Obj24_Index
00009544                            ; ===========================================================================
00009544                            
00009544                            Obj24_Main:				; XREF: Obj24_Index
00009544 5428 0024                  		addq.b	#2,$24(a0)
00009548 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009550 317C 041C 0002             		move.w	#$41C,2(a0)
00009556 117C 0004 0001             		move.b	#4,1(a0)
0000955C 117C 0001 0018             		move.b	#1,$18(a0)
00009562 117C 0000 0020             		move.b	#0,$20(a0)
00009568 117C 000C 0019             		move.b	#$C,$19(a0)
0000956E 117C 0009 001E             		move.b	#9,$1E(a0)
00009574 117C 0000 001A             		move.b	#0,$1A(a0)
0000957A 303C 00A5                  		move.w	#$A5,d0
0000957E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play explosion sound
00009584                            
00009584                            Obj24_Animate:				; XREF: Obj24_Index
00009584 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009588 6A00                       		bpl.s	Obj24_Display
0000958A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009590 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009594 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000959A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000959E                            
0000959E                            Obj24_Display:
0000959E 6000 0000                  		bra.w	DisplaySprite
000095A2                            ; ===========================================================================
000095A2                            ; ---------------------------------------------------------------------------
000095A2                            ; Object 27 - explosion	from a destroyed enemy
000095A2                            ; ---------------------------------------------------------------------------
000095A2                            
000095A2                            Obj27:					; XREF: Obj_Index
000095A2 7000                       		moveq	#0,d0
000095A4 1028 0024                  		move.b	$24(a0),d0
000095A8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095AC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095B0                            ; ===========================================================================
000095B0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095B2 0000                       		dc.w Obj27_Main-Obj27_Index
000095B4 0000                       		dc.w Obj27_Animate-Obj27_Index
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000095B6 5428 0024                  		addq.b	#2,$24(a0)
000095BA 6100 0000                  		bsr.w	SingleObjLoad
000095BE 6600                       		bne.s	Obj27_Main
000095C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000095C4 3368 0008 0008             		move.w	8(a0),8(a1)
000095CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000095D6                            
000095D6                            Obj27_Main:				; XREF: Obj27_Index
000095D6 5428 0024                  		addq.b	#2,$24(a0)
000095DA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000095E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000095E8 117C 0004 0001             		move.b	#4,1(a0)
000095EE 117C 0001 0018             		move.b	#1,$18(a0)
000095F4 117C 0000 0020             		move.b	#0,$20(a0)
000095FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009600                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009600 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009606 117C 0000 001A             		move.b	#0,$1A(a0)
0000960C 303C 00C1                  		move.w	#$C1,d0
00009610 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009616                            
00009616 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000961C 1028 0028                  		move.b	$28(a0),d0
00009620 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009626 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000962C                            
0000962C                            Obj27_Animate:				; XREF: Obj27_Index
0000962C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009630 6A00                       		bpl.s	Obj27_Display
00009632                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009632 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009638 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000963C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009642 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009646                            
00009646                            Obj27_Display:
00009646 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000964C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009652 6000 0000                  		bra.w	DisplaySprite
00009656                            ; ===========================================================================
00009656                            ; ---------------------------------------------------------------------------
00009656                            Obj27_ExplosionXYSpd:
00009656                            		; dc.w	-$350, -$300	; Left
00009656                            		; dc.w	-$200, -$450	; Near middle (left)
00009656                            		; dc.w	0, -$500	; Middle
00009656                            		; dc.w	$200, -$450	; Near middle (right)
00009656                            		; dc.w	$350, -$300	; Right
00009656                            
00009656 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000965A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000965E 0000 FA00                  		dc.w	0, -$600	; Middle
00009662 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009666 0150 FC00                  		dc.w	$150, -$400	; Right
0000966A                            
0000966A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009684                            ; ---------------------------------------------------------------------------
00009684                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009684                            ; ---------------------------------------------------------------------------
00009684                            
00009684                            Obj3F:					; XREF: Obj_Index
00009684 7000                       		moveq	#0,d0
00009686 1028 0024                  		move.b	$24(a0),d0
0000968A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000968E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009692                            ; ===========================================================================
00009692 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009694 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009696                            ; ===========================================================================
00009696                            
00009696                            Obj3F_Main:				; XREF: Obj3F_Index
00009696 5428 0024                  		addq.b	#2,$24(a0)
0000969A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000096A2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096A8 117C 0004 0001             		move.b	#4,1(a0)
000096AE 117C 0001 0018             		move.b	#1,$18(a0)
000096B4 117C 0000 0020             		move.b	#0,$20(a0)
000096BA 117C 000C 0019             		move.b	#$C,$19(a0)
000096C0 117C 0007 001E             		move.b	#7,$1E(a0)
000096C6 117C 0000 001A             		move.b	#0,$1A(a0)
000096CC 303C 00C4                  		move.w	#$C4,d0
000096D0 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000096D6                            ; ===========================================================================
000096D6                            Ani_obj1E:
000096D6                            	include "_anim\obj1E.asm"
000096D6                            ; ---------------------------------------------------------------------------
000096D6                            ; Animation script - doors (SBZ)
000096D6                            ; ---------------------------------------------------------------------------
000096D6 0000                       		dc.w byte_8E4A-Ani_obj1E
000096D8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000096F0 00                         		even
000096F0 00                         		even
000096F0                            
000096F0                            ; ---------------------------------------------------------------------------
000096F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000096F0                            ; ---------------------------------------------------------------------------
000096F0                            Map_obj1E:
000096F0                            	include "_maps\obj1E.asm"
000096F0                            Map_a7ad:
000096F0 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
000096F2 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
000096F4 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
000096F6 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
000096F8 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
000096FA 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
000096FC 02                         Map_a7ad_C: 	dc.b $2
000096FD EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009702 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009707 02                         Map_a7ad_17: 	dc.b $2
00009708 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000970D FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009712 02                         Map_a7ad_22: 	dc.b $2
00009713 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009718 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000971D 02                         Map_a7ad_2D: 	dc.b $2
0000971E E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009723 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009728 02                         Map_a7ad_38: 	dc.b $2
00009729 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
0000972E E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009733 02                         Map_a7ad_43: 	dc.b $2
00009734 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009739 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
0000973E                            	even
0000973E                            	even
0000973E                            
0000973E                            ; ---------------------------------------------------------------------------
0000973E                            ; Sprite mappings - explosion
0000973E                            ; ---------------------------------------------------------------------------
0000973E                            Map_obj24:
0000973E                            	include "_maps\obj24.asm"
0000973E                            ; ---------------------------------------------------------------------------
0000973E                            ; Sprite mappings - explosion
0000973E                            ; ---------------------------------------------------------------------------
0000973E 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009742 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009746 01                         byte_8EAE:	dc.b 1
00009747 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000974C 01                         byte_8EB4:	dc.b 1
0000974D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009752 01                         byte_8EBA:	dc.b 1
00009753 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009758 01                         byte_8EC0:	dc.b 1
00009759 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000975E                            		even
0000975E                            		even
0000975E                            
0000975E                            ; ---------------------------------------------------------------------------
0000975E                            ; Sprite mappings - explosion
0000975E                            ; ---------------------------------------------------------------------------
0000975E 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009762 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009766 0000                       		dc.w byte_8EF7-Map_obj27
00009768 01                         byte_8ED0:	dc.b 1
00009769 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000976E 01                         byte_8ED6:	dc.b 1
0000976F F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009774 01                         byte_8EDC:	dc.b 1
00009775 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000977A 04                         byte_8EE2:	dc.b 4
0000977B EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009780 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009785 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000978A FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000978F 04                         byte_8EF7:	dc.b 4
00009790 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009795 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000979A 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000979F FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097A4                            		even
000097A4                            ; ---------------------------------------------------------------------------
000097A4                            ; Sprite mappings - explosion from when	a boss is destroyed
000097A4                            ; ---------------------------------------------------------------------------
000097A4 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097A6 0000                       		dc.w byte_8F16-Map_obj3F
000097A8 0000                       		dc.w byte_8F1C-Map_obj3F
000097AA FFD6                       		dc.w byte_8EE2-Map_obj3F
000097AC FFEB                       		dc.w byte_8EF7-Map_obj3F
000097AE 01                         byte_8F16:	dc.b 1
000097AF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000097B4 01                         byte_8F1C:	dc.b 1
000097B5 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000097BA                            		even
000097BA                            ; ===========================================================================
000097BA                            ; ---------------------------------------------------------------------------
000097BA                            ; Object 28 - animals
000097BA                            ; ---------------------------------------------------------------------------
000097BA                            
000097BA                            Obj28:					; XREF: Obj_Index
000097BA 7000                       		moveq	#0,d0
000097BC 1028 0024                  		move.b	$24(a0),d0
000097C0 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000097C4 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000097C8                            ; ===========================================================================
000097C8 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000097CC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097D0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000097D4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097D8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000097DC 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000097E0 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000097E4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097E8 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097EC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000097F0 0000                       		dc.w loc_92D6-Obj28_Index
000097F2                            
000097F2 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000097FE                            
000097FE FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009802 0000 0000                  		dc.l Map_obj28
00009806 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000980A 0000 0000                  		dc.l Map_obj28a		; mappings address
0000980E FE80 FD00                  		dc.w $FE80, $FD00
00009812 0000 0000                  		dc.l Map_obj28
00009816 FEC0 FE80                  		dc.w $FEC0, $FE80
0000981A 0000 0000                  		dc.l Map_obj28a
0000981E FE40 FD00                  		dc.w $FE40, $FD00
00009822 0000 0000                  		dc.l Map_obj28b
00009826 FD00 FC00                  		dc.w $FD00, $FC00
0000982A 0000 0000                  		dc.l Map_obj28a
0000982E FD80 FC80                  		dc.w $FD80, $FC80
00009832 0000 0000                  		dc.l Map_obj28b
00009836                            
00009836 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009846 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009856 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009862                            
00009862 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009876 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000988A 0000 0000                  		dc.l Map_obj28b
0000988E                            
0000988E 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098A0 0565 05B3                  		dc.w $565, $5B3
000098A4                            ; ===========================================================================
000098A4                            
000098A4                            Obj28_Ending:				; XREF: Obj28_Index
000098A4 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098A8 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000098AC 7000                       		moveq	#0,d0
000098AE 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000098B2 D040                       		add.w	d0,d0		; multiply d0 by 2
000098B4 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000098B8 0440 0014                  		subi.w	#$14,d0
000098BC 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000098C2 D040                       		add.w	d0,d0
000098C4 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000098CA 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000098CE 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000098D4 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000098DA 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000098E0 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000098E6 117C 000C 0016             		move.b	#$C,$16(a0)
000098EC 117C 0004 0001             		move.b	#4,1(a0)
000098F2 08E8 0000 0001             		bset	#0,1(a0)
000098F8 117C 0006 0018             		move.b	#6,$18(a0)
000098FE 117C 0008 0019             		move.b	#8,$19(a0)
00009904 117C 0007 001E             		move.b	#7,$1E(a0)
0000990A 6000 0000                  		bra.w	DisplaySprite
0000990E                            ; ===========================================================================
0000990E                            
0000990E                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000990E 5428 0024                  		addq.b	#2,$24(a0)
00009912 6100 9432                  		bsr.w	RandomNumber
00009916 0240 0001                  		andi.w	#1,d0
0000991A 7200                       		moveq	#0,d1
0000991C 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009920 D241                       		add.w	d1,d1
00009922 D240                       		add.w	d0,d1
00009924 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009928 1031 1000                  		move.b	(a1,d1.w),d0
0000992C 1140 0030                  		move.b	d0,$30(a0)
00009930 E748                       		lsl.w	#3,d0
00009932 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009936 D2C0                       		adda.w	d0,a1
00009938 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000993C 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009940 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009944 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000994A 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009950 6700                       		beq.s	loc_90C0	; if yes, branch
00009952 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009958                            
00009958                            loc_90C0:
00009958 117C 000C 0016             		move.b	#$C,$16(a0)
0000995E 117C 0004 0001             		move.b	#4,1(a0)
00009964 08E8 0000 0001             		bset	#0,1(a0)
0000996A 117C 0006 0018             		move.b	#6,$18(a0)
00009970 117C 0008 0019             		move.b	#8,$19(a0)
00009976 117C 0007 001E             		move.b	#7,$1E(a0)
0000997C 117C 0002 001A             		move.b	#2,$1A(a0)
00009982 317C FC00 0012             		move.w	#-$400,$12(a0)
00009988 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000998C 6600                       		bne.s	loc_911C
0000998E 6100 0000                  		bsr.w	SingleObjLoad
00009992 6600                       		bne.s	Obj28_Display
00009994 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009998 3368 0008 0008             		move.w	8(a0),8(a1)
0000999E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099A4 3028 003E                  		move.w	$3E(a0),d0
000099A8 E248                       		lsr.w	#1,d0
000099AA 1340 001A                  		move.b	d0,$1A(a1)
000099AE                            
000099AE                            Obj28_Display:
000099AE 6000 0000                  		bra.w	DisplaySprite
000099B2                            ; ===========================================================================
000099B2                            
000099B2                            loc_911C:
000099B2 117C 0012 0024             		move.b	#$12,$24(a0)
000099B8 4268 0010                  		clr.w	$10(a0)
000099BC 6000 0000                  		bra.w	DisplaySprite
000099C0                            ; ===========================================================================
000099C0                            
000099C0                            loc_912A:				; XREF: Obj28_Index
000099C0 4A28 0001                  		tst.b	1(a0)
000099C4 6A00 0000                  		bpl.w	DeleteObject
000099C8 6100 0000                  		bsr.w	ObjectFall
000099CC 4A68 0012                  		tst.w	$12(a0)
000099D0 6B00                       		bmi.s	loc_9180
000099D2 4EB9 0000 0000             		jsr	ObjHitFloor
000099D8 4A41                       		tst.w	d1
000099DA 6A00                       		bpl.s	loc_9180
000099DC D368 000C                  		add.w	d1,$C(a0)
000099E0 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099E6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099EC 117C 0001 001A             		move.b	#1,$1A(a0)
000099F2 1028 0030                  		move.b	$30(a0),d0
000099F6 D000                       		add.b	d0,d0
000099F8 5800                       		addq.b	#4,d0
000099FA 1140 0024                  		move.b	d0,$24(a0)
000099FE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A02 6700                       		beq.s	loc_9180
00009A04 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A0A 6700                       		beq.s	loc_9180
00009A0C 4468 0010                  		neg.w	$10(a0)
00009A10 0868 0000 0001             		bchg	#0,1(a0)
00009A16                            
00009A16                            loc_9180:
00009A16 6000 0000                  		bra.w	DisplaySprite
00009A1A                            ; ===========================================================================
00009A1A                            
00009A1A                            loc_9184:				; XREF: Obj28_Index
00009A1A 6100 0000                  		bsr.w	ObjectFall
00009A1E 117C 0001 001A             		move.b	#1,$1A(a0)
00009A24 4A68 0012                  		tst.w	$12(a0)
00009A28 6B00                       		bmi.s	loc_91AE
00009A2A 117C 0000 001A             		move.b	#0,$1A(a0)
00009A30 4EB9 0000 0000             		jsr	ObjHitFloor
00009A36 4A41                       		tst.w	d1
00009A38 6A00                       		bpl.s	loc_91AE
00009A3A D368 000C                  		add.w	d1,$C(a0)
00009A3E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A44                            
00009A44                            loc_91AE:
00009A44 4A28 0028                  		tst.b	$28(a0)
00009A48 6600                       		bne.s	loc_9224
00009A4A 4A28 0001                  		tst.b	1(a0)
00009A4E 6A00 0000                  		bpl.w	DeleteObject
00009A52 6000 0000                  		bra.w	DisplaySprite
00009A56                            ; ===========================================================================
00009A56                            
00009A56                            loc_91C0:				; XREF: Obj28_Index
00009A56 6100 0000                  		bsr.w	SpeedToPos
00009A5A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A60 4A68 0012                  		tst.w	$12(a0)
00009A64 6B00                       		bmi.s	loc_91FC
00009A66 4EB9 0000 0000             		jsr	ObjHitFloor
00009A6C 4A41                       		tst.w	d1
00009A6E 6A00                       		bpl.s	loc_91FC
00009A70 D368 000C                  		add.w	d1,$C(a0)
00009A74 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A7A 4A28 0028                  		tst.b	$28(a0)
00009A7E 6700                       		beq.s	loc_91FC
00009A80 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009A86 6700                       		beq.s	loc_91FC
00009A88 4468 0010                  		neg.w	$10(a0)
00009A8C 0868 0000 0001             		bchg	#0,1(a0)
00009A92                            
00009A92                            loc_91FC:
00009A92 5328 001E                  		subq.b	#1,$1E(a0)
00009A96 6A00                       		bpl.s	loc_9212
00009A98 117C 0001 001E             		move.b	#1,$1E(a0)
00009A9E 5228 001A                  		addq.b	#1,$1A(a0)
00009AA2 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AA8                            
00009AA8                            loc_9212:
00009AA8 4A28 0028                  		tst.b	$28(a0)
00009AAC 6600                       		bne.s	loc_9224
00009AAE 4A28 0001                  		tst.b	1(a0)
00009AB2 6A00 0000                  		bpl.w	DeleteObject
00009AB6 6000 0000                  		bra.w	DisplaySprite
00009ABA                            ; ===========================================================================
00009ABA                            
00009ABA                            loc_9224:				; XREF: Obj28_Index
00009ABA 3028 0008                  		move.w	8(a0),d0
00009ABE 9078 D008                  		sub.w	($FFFFD008).w,d0
00009AC2 6500                       		bcs.s	loc_923C
00009AC4 0440 0180                  		subi.w	#$180,d0
00009AC8 6A00                       		bpl.s	loc_923C
00009ACA 4A28 0001                  		tst.b	1(a0)
00009ACE 6A00 0000                  		bpl.w	DeleteObject
00009AD2                            
00009AD2                            loc_923C:
00009AD2 6000 0000                  		bra.w	DisplaySprite
00009AD6                            ; ===========================================================================
00009AD6                            
00009AD6                            loc_9240:				; XREF: Obj28_Index
00009AD6 4A28 0001                  		tst.b	1(a0)
00009ADA 6A00 0000                  		bpl.w	DeleteObject
00009ADE 5368 0036                  		subq.w	#1,$36(a0)
00009AE2 6600 0000                  		bne.w	loc_925C
00009AE6 117C 0002 0024             		move.b	#2,$24(a0)
00009AEC 117C 0003 0018             		move.b	#3,$18(a0)
00009AF2                            
00009AF2                            loc_925C:
00009AF2 6000 0000                  		bra.w	DisplaySprite
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_9260:				; XREF: Obj28_Index
00009AF6 6100 0000                  		bsr.w	sub_9404
00009AFA 6400                       		bcc.s	loc_927C
00009AFC 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B02 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B08 117C 000E 0024             		move.b	#$E,$24(a0)
00009B0E 6000 FF46                  		bra.w	loc_91C0
00009B12                            ; ===========================================================================
00009B12                            
00009B12                            loc_927C:
00009B12 6000 FFA6                  		bra.w	loc_9224
00009B16                            ; ===========================================================================
00009B16                            
00009B16                            loc_9280:				; XREF: Obj28_Index
00009B16 6100 0000                  		bsr.w	sub_9404
00009B1A 6A00                       		bpl.s	loc_92B6
00009B1C 4268 0010                  		clr.w	$10(a0)
00009B20 4268 0032                  		clr.w	$32(a0)
00009B24 6100 0000                  		bsr.w	SpeedToPos
00009B28 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B2E 6100 0000                  		bsr.w	loc_93C4
00009B32 6100 0000                  		bsr.w	loc_93EC
00009B36 5328 001E                  		subq.b	#1,$1E(a0)
00009B3A 6A00                       		bpl.s	loc_92B6
00009B3C 117C 0001 001E             		move.b	#1,$1E(a0)
00009B42 5228 001A                  		addq.b	#1,$1A(a0)
00009B46 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B4C                            
00009B4C                            loc_92B6:
00009B4C 6000 FF6C                  		bra.w	loc_9224
00009B50                            ; ===========================================================================
00009B50                            
00009B50                            loc_92BA:				; XREF: Obj28_Index
00009B50 6100 0000                  		bsr.w	sub_9404
00009B54 6A00                       		bpl.s	loc_9310
00009B56 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B5C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B62 117C 0004 0024             		move.b	#4,$24(a0)
00009B68 6000 FEB0                  		bra.w	loc_9184
00009B6C                            ; ===========================================================================
00009B6C                            
00009B6C                            loc_92D6:				; XREF: Obj28_Index
00009B6C 6100 0000                  		bsr.w	ObjectFall
00009B70 117C 0001 001A             		move.b	#1,$1A(a0)
00009B76 4A68 0012                  		tst.w	$12(a0)
00009B7A 6B00                       		bmi.s	loc_9310
00009B7C 117C 0000 001A             		move.b	#0,$1A(a0)
00009B82 4EB9 0000 0000             		jsr	ObjHitFloor
00009B88 4A41                       		tst.w	d1
00009B8A 6A00                       		bpl.s	loc_9310
00009B8C 4628 0029                  		not.b	$29(a0)
00009B90 6600                       		bne.s	loc_9306
00009B92 4468 0010                  		neg.w	$10(a0)
00009B96 0868 0000 0001             		bchg	#0,1(a0)
00009B9C                            
00009B9C                            loc_9306:
00009B9C D368 000C                  		add.w	d1,$C(a0)
00009BA0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BA6                            
00009BA6                            loc_9310:
00009BA6 6000 FF12                  		bra.w	loc_9224
00009BAA                            ; ===========================================================================
00009BAA                            
00009BAA                            loc_9314:				; XREF: Obj28_Index
00009BAA 6100 0000                  		bsr.w	sub_9404
00009BAE 6A00                       		bpl.s	loc_932E
00009BB0 4268 0010                  		clr.w	$10(a0)
00009BB4 4268 0032                  		clr.w	$32(a0)
00009BB8 6100 0000                  		bsr.w	ObjectFall
00009BBC 6100 0000                  		bsr.w	loc_93C4
00009BC0 6100 0000                  		bsr.w	loc_93EC
00009BC4                            
00009BC4                            loc_932E:
00009BC4 6000 FEF4                  		bra.w	loc_9224
00009BC8                            ; ===========================================================================
00009BC8                            
00009BC8                            loc_9332:				; XREF: Obj28_Index
00009BC8 6100 0000                  		bsr.w	sub_9404
00009BCC 6A00                       		bpl.s	loc_936C
00009BCE 6100 0000                  		bsr.w	ObjectFall
00009BD2 117C 0001 001A             		move.b	#1,$1A(a0)
00009BD8 4A68 0012                  		tst.w	$12(a0)
00009BDC 6B00                       		bmi.s	loc_936C
00009BDE 117C 0000 001A             		move.b	#0,$1A(a0)
00009BE4 4EB9 0000 0000             		jsr	ObjHitFloor
00009BEA 4A41                       		tst.w	d1
00009BEC 6A00                       		bpl.s	loc_936C
00009BEE 4468 0010                  		neg.w	$10(a0)
00009BF2 0868 0000 0001             		bchg	#0,1(a0)
00009BF8 D368 000C                  		add.w	d1,$C(a0)
00009BFC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C02                            
00009C02                            loc_936C:
00009C02 6000 FEB6                  		bra.w	loc_9224
00009C06                            ; ===========================================================================
00009C06                            
00009C06                            loc_9370:				; XREF: Obj28_Index
00009C06 6100 0000                  		bsr.w	sub_9404
00009C0A 6A00                       		bpl.s	loc_93C0
00009C0C 6100 0000                  		bsr.w	SpeedToPos
00009C10 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C16 4A68 0012                  		tst.w	$12(a0)
00009C1A 6B00                       		bmi.s	loc_93AA
00009C1C 4EB9 0000 0000             		jsr	ObjHitFloor
00009C22 4A41                       		tst.w	d1
00009C24 6A00                       		bpl.s	loc_93AA
00009C26 4628 0029                  		not.b	$29(a0)
00009C2A 6600                       		bne.s	loc_93A0
00009C2C 4468 0010                  		neg.w	$10(a0)
00009C30 0868 0000 0001             		bchg	#0,1(a0)
00009C36                            
00009C36                            loc_93A0:
00009C36 D368 000C                  		add.w	d1,$C(a0)
00009C3A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C40                            
00009C40                            loc_93AA:
00009C40 5328 001E                  		subq.b	#1,$1E(a0)
00009C44 6A00                       		bpl.s	loc_93C0
00009C46 117C 0001 001E             		move.b	#1,$1E(a0)
00009C4C 5228 001A                  		addq.b	#1,$1A(a0)
00009C50 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C56                            
00009C56                            loc_93C0:
00009C56 6000 FE62                  		bra.w	loc_9224
00009C5A                            ; ===========================================================================
00009C5A                            
00009C5A                            loc_93C4:
00009C5A 117C 0001 001A             		move.b	#1,$1A(a0)
00009C60 4A68 0012                  		tst.w	$12(a0)
00009C64 6B00                       		bmi.s	locret_93EA
00009C66 117C 0000 001A             		move.b	#0,$1A(a0)
00009C6C 4EB9 0000 0000             		jsr	ObjHitFloor
00009C72 4A41                       		tst.w	d1
00009C74 6A00                       		bpl.s	locret_93EA
00009C76 D368 000C                  		add.w	d1,$C(a0)
00009C7A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C80                            
00009C80                            locret_93EA:
00009C80 4E75                       		rts	
00009C82                            ; ===========================================================================
00009C82                            
00009C82                            loc_93EC:
00009C82 08E8 0000 0001             		bset	#0,1(a0)
00009C88 3028 0008                  		move.w	8(a0),d0
00009C8C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009C90 6400                       		bcc.s	locret_9402
00009C92 08A8 0000 0001             		bclr	#0,1(a0)
00009C98                            
00009C98                            locret_9402:
00009C98 4E75                       		rts	
00009C9A                            
00009C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C9A                            
00009C9A                            
00009C9A                            sub_9404:
00009C9A 3038 D008                  		move.w	($FFFFD008).w,d0
00009C9E 9068 0008                  		sub.w	8(a0),d0
00009CA2 0440 00B8                  		subi.w	#$B8,d0
00009CA6 4E75                       		rts	
00009CA8                            ; End of function sub_9404
00009CA8                            
00009CA8                            ; ===========================================================================
00009CA8                            ; ---------------------------------------------------------------------------
00009CA8                            ; Object 29 - points that appear when you destroy something
00009CA8                            ; ---------------------------------------------------------------------------
00009CA8                            
00009CA8                            Obj29:					; XREF: Obj_Index
00009CA8 7000                       		moveq	#0,d0
00009CAA 1028 0024                  		move.b	$24(a0),d0
00009CAE 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009CB2 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009CB6 6000 0000                  		bra.w	DisplaySprite
00009CBA                            ; ===========================================================================
00009CBA 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009CBC 0000                       		dc.w Obj29_Slower-Obj29_Index
00009CBE                            ; ===========================================================================
00009CBE                            
00009CBE                            Obj29_Main:				; XREF: Obj29_Index
00009CBE 5428 0024                  		addq.b	#2,$24(a0)
00009CC2 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009CCA 317C 2797 0002             		move.w	#$2797,2(a0)
00009CD0 117C 0004 0001             		move.b	#4,1(a0)
00009CD6 117C 0001 0018             		move.b	#1,$18(a0)
00009CDC 117C 0008 0019             		move.b	#8,$19(a0)
00009CE2 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009CE8                            
00009CE8                            Obj29_Slower:				; XREF: Obj29_Index
00009CE8 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009CEC 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009CF0 6100 0000                  		bsr.w	SpeedToPos
00009CF4 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009CFA 4E75                       		rts	
00009CFC                            ; ===========================================================================
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            ; Sprite mappings - animals
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            Map_obj28:
00009CFC                            	include "_maps\obj28.asm"
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            ; Sprite mappings - animals
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC 0000                       		dc.w byte_9472-Map_obj28
00009CFE 0000                       		dc.w byte_9478-Map_obj28
00009D00 0000                       		dc.w byte_946C-Map_obj28
00009D02 01                         byte_946C:	dc.b 1
00009D03 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D08 01                         byte_9472:	dc.b 1
00009D09 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D0E 01                         byte_9478:	dc.b 1
00009D0F F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D14                            		even
00009D14                            		even
00009D14                            
00009D14                            Map_obj28a:
00009D14                            	include "_maps\obj28a.asm"
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            ; Sprite mappings - animals
00009D14                            ; ---------------------------------------------------------------------------
00009D14 0000                       		dc.w byte_948A-Map_obj28a
00009D16 0000                       		dc.w byte_9490-Map_obj28a
00009D18 0000                       		dc.w byte_9484-Map_obj28a
00009D1A 01                         byte_9484:	dc.b 1
00009D1B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D20 01                         byte_948A:	dc.b 1
00009D21 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D26 01                         byte_9490:	dc.b 1
00009D27 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D2C                            		even
00009D2C                            		even
00009D2C                            
00009D2C                            Map_obj28b:
00009D2C                            	include "_maps\obj28b.asm"
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C                            ; Sprite mappings - animals
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C 0000                       		dc.w byte_94A2-Map_obj28b
00009D2E 0000                       		dc.w byte_94A8-Map_obj28b
00009D30 0000                       		dc.w byte_949C-Map_obj28b
00009D32 01                         byte_949C:	dc.b 1
00009D33 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D38 01                         byte_94A2:	dc.b 1
00009D39 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D3E 01                         byte_94A8:	dc.b 1
00009D3F FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D44                            		even
00009D44                            		even
00009D44                            
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            ; Sprite mappings - points that	appear when you	destroy	something
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            Map_obj29:
00009D44                            	include "_maps\obj29.asm"
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            ; Sprite mappings - points that	appear when you	destroy	something
00009D44                            ; ---------------------------------------------------------------------------
00009D44 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D48 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009D4C 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009D50 0000                       		dc.w byte_94E5-Map_obj29
00009D52 01                         byte_94BC:	dc.b 1
00009D53 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009D58 01                         byte_94C2:	dc.b 1
00009D59 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009D5E 01                         byte_94C8:	dc.b 1
00009D5F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009D64 01                         byte_94CE:	dc.b 1
00009D65 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009D6A 01                         byte_94D4:	dc.b 1
00009D6B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009D70 02                         byte_94DA:	dc.b 2
00009D71 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009D76 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009D7B 02                         byte_94E5:	dc.b 2
00009D7C FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009D81 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009D86                            		even
00009D86                            		even
00009D86                            
00009D86                            ; ===========================================================================
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            
00009D86                            Obj1F:					; XREF: Obj_Index
00009D86 7000                       		moveq	#0,d0
00009D88 1028 0024                  		move.b	$24(a0),d0
00009D8C 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009D90 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009D94                            ; ===========================================================================
00009D94 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009D96 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009D98 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009D9A 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009D9C 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009D9E                            ; ===========================================================================
00009D9E                            
00009D9E                            Obj1F_Main:				; XREF: Obj1F_Index
00009D9E 117C 0010 0016             		move.b	#$10,$16(a0)
00009DA4 117C 0008 0017             		move.b	#8,$17(a0)
00009DAA 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DB2 317C 0400 0002             		move.w	#$400,2(a0)
00009DB8 117C 0004 0001             		move.b	#4,1(a0)
00009DBE 117C 0003 0018             		move.b	#3,$18(a0)
00009DC4 117C 0006 0020             		move.b	#6,$20(a0)
00009DCA 117C 0015 0019             		move.b	#$15,$19(a0)
00009DD0 6100 0000                  		bsr.w	ObjectFall
00009DD4 4EB9 0000 0000             		jsr	ObjHitFloor
00009DDA 4A41                       		tst.w	d1
00009DDC 6A00                       		bpl.s	locret_955A
00009DDE D368 000C                  		add.w	d1,$C(a0)
00009DE2 1143 0026                  		move.b	d3,$26(a0)
00009DE6 317C 0000 0012             		move.w	#0,$12(a0)
00009DEC 5428 0024                  		addq.b	#2,$24(a0)
00009DF0                            
00009DF0                            locret_955A:
00009DF0 4E75                       		rts	
00009DF2                            ; ===========================================================================
00009DF2                            
00009DF2                            Obj1F_Action:				; XREF: Obj1F_Index
00009DF2 7000                       		moveq	#0,d0
00009DF4 1028 0025                  		move.b	$25(a0),d0
00009DF8 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009DFC 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E00 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E06 6100 0000                  		bsr.w	AnimateSprite
00009E0A 6000 0000                  		bra.w	MarkObjGone
00009E0E                            ; ===========================================================================
00009E0E 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E10 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E12 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E16 6A00                       		bpl.s	locret_95B6
00009E18 4A28 0001                  		tst.b	1(a0)
00009E1C 6A00                       		bpl.s	Obj1F_Move
00009E1E 0868 0001 0032             		bchg	#1,$32(a0)
00009E24 6600                       		bne.s	Obj1F_MakeFire
00009E26                            
00009E26                            Obj1F_Move:
00009E26 5428 0025                  		addq.b	#2,$25(a0)
00009E2A 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E30 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E36 6100 0000                  		bsr.w	Obj1F_SetAni
00009E3A 5600                       		addq.b	#3,d0
00009E3C 1140 001C                  		move.b	d0,$1C(a0)
00009E40 0868 0000 0022             		bchg	#0,$22(a0)
00009E46 6600                       		bne.s	locret_95B6
00009E48 4468 0010                  		neg.w	$10(a0)		; change direction
00009E4C                            
00009E4C                            locret_95B6:
00009E4C 4E75                       		rts	
00009E4E                            ; ===========================================================================
00009E4E                            
00009E4E                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009E4E 317C 003B 0030             		move.w	#$3B,$30(a0)
00009E54 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009E5A 6100 0000                  		bsr.w	SingleObjLoad
00009E5E 6600                       		bne.s	Obj1F_MakeFire2
00009E60 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009E64 137C 0006 0024             		move.b	#6,$24(a1)
00009E6A 3368 0008 0008             		move.w	8(a0),8(a1)
00009E70 0469 0010 0008             		subi.w	#$10,8(a1)
00009E76 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E7C 337C FF00 0010             		move.w	#-$100,$10(a1)
00009E82                            
00009E82                            Obj1F_MakeFire2:
00009E82 6100 0000                  		bsr.w	SingleObjLoad
00009E86 6600                       		bne.s	locret_9618
00009E88 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009E8C 137C 0006 0024             		move.b	#6,$24(a1)
00009E92 3368 0008 0008             		move.w	8(a0),8(a1)
00009E98 0669 0010 0008             		addi.w	#$10,8(a1)
00009E9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EA4 337C 0100 0010             		move.w	#$100,$10(a1)
00009EAA                            
00009EAA                            locret_9618:
00009EAA 4E75                       		rts	
00009EAC                            ; ===========================================================================
00009EAC                            
00009EAC                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009EAC 5368 0030                  		subq.w	#1,$30(a0)
00009EB0 6B00                       		bmi.s	loc_966E
00009EB2 6100 0000                  		bsr.w	SpeedToPos
00009EB6 0868 0000 0032             		bchg	#0,$32(a0)
00009EBC 6600                       		bne.s	loc_9654
00009EBE 3628 0008                  		move.w	8(a0),d3
00009EC2 0643 0010                  		addi.w	#$10,d3
00009EC6 0828 0000 0022             		btst	#0,$22(a0)
00009ECC 6700                       		beq.s	loc_9640
00009ECE 0443 0020                  		subi.w	#$20,d3
00009ED2                            
00009ED2                            loc_9640:
00009ED2 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ED8 0C41 FFF8                  		cmpi.w	#-8,d1
00009EDC 6D00                       		blt.s	loc_966E
00009EDE 0C41 000C                  		cmpi.w	#$C,d1
00009EE2 6C00                       		bge.s	loc_966E
00009EE4 4E75                       		rts	
00009EE6                            ; ===========================================================================
00009EE6                            
00009EE6                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009EE6 4EB9 0000 0000             		jsr	ObjHitFloor
00009EEC D368 000C                  		add.w	d1,$C(a0)
00009EF0 1143 0026                  		move.b	d3,$26(a0)
00009EF4 6100 0000                  		bsr.w	Obj1F_SetAni
00009EF8 5600                       		addq.b	#3,d0
00009EFA 1140 001C                  		move.b	d0,$1C(a0)
00009EFE 4E75                       		rts	
00009F00                            ; ===========================================================================
00009F00                            
00009F00                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F00 5528 0025                  		subq.b	#2,$25(a0)
00009F04 317C 003B 0030             		move.w	#59,$30(a0)
00009F0A 317C 0000 0010             		move.w	#0,$10(a0)
00009F10 6100 0000                  		bsr.w	Obj1F_SetAni
00009F14 1140 001C                  		move.b	d0,$1C(a0)
00009F18 4E75                       		rts	
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            
00009F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F1A                            
00009F1A                            
00009F1A                            Obj1F_SetAni:				; XREF: loc_966E
00009F1A 7000                       		moveq	#0,d0
00009F1C 1628 0026                  		move.b	$26(a0),d3
00009F20 6B00                       		bmi.s	loc_96A4
00009F22 0C03 0006                  		cmpi.b	#6,d3
00009F26 6500                       		bcs.s	locret_96A2
00009F28 7001                       		moveq	#1,d0
00009F2A 0828 0000 0022             		btst	#0,$22(a0)
00009F30 6600                       		bne.s	locret_96A2
00009F32 7002                       		moveq	#2,d0
00009F34                            
00009F34                            locret_96A2:
00009F34 4E75                       		rts	
00009F36                            ; ===========================================================================
00009F36                            
00009F36                            loc_96A4:				; XREF: Obj1F_SetAni
00009F36 0C03 00FA                  		cmpi.b	#-6,d3
00009F3A 6200                       		bhi.s	locret_96B6
00009F3C 7002                       		moveq	#2,d0
00009F3E 0828 0000 0022             		btst	#0,$22(a0)
00009F44 6600                       		bne.s	locret_96B6
00009F46 7001                       		moveq	#1,d0
00009F48                            
00009F48                            locret_96B6:
00009F48 4E75                       		rts	
00009F4A                            ; End of function Obj1F_SetAni
00009F4A                            
00009F4A                            ; ===========================================================================
00009F4A                            
00009F4A                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F4A 6100 0000                  		bsr.w	DeleteObject
00009F4E 4E75                       		rts	
00009F50                            ; ===========================================================================
00009F50                            ; ---------------------------------------------------------------------------
00009F50                            ; Sub-object - missile that the	Crabmeat throws
00009F50                            ; ---------------------------------------------------------------------------
00009F50                            
00009F50                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009F50 5428 0024                  		addq.b	#2,$24(a0)
00009F54 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009F5C 317C 0400 0002             		move.w	#$400,2(a0)
00009F62 117C 0004 0001             		move.b	#4,1(a0)
00009F68 117C 0003 0018             		move.b	#3,$18(a0)
00009F6E 117C 0087 0020             		move.b	#$87,$20(a0)
00009F74 117C 0008 0019             		move.b	#8,$19(a0)
00009F7A 317C FC00 0012             		move.w	#-$400,$12(a0)
00009F80 117C 0007 001C             		move.b	#7,$1C(a0)
00009F86                            
00009F86                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009F86 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009F8C 6100 0000                  		bsr.w	AnimateSprite
00009F90 6100 0000                  		bsr.w	ObjectFall
00009F94 6100 0000                  		bsr.w	DisplaySprite
00009F98 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009F9C 0640 00E0                  		addi.w	#$E0,d0
00009FA0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FA4 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FA6 4E75                       		rts	
00009FA8                            ; ===========================================================================
00009FA8                            
00009FA8                            Obj1F_Delete2:
00009FA8 6000 0000                  		bra.w	DeleteObject
00009FAC                            ; ===========================================================================
00009FAC                            Ani_obj1F:
00009FAC                            	include "_anim\obj1F.asm"
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Animation script - Crabmeat enemy
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009FB2 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009FB8 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009FBC 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009FC0 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009FC4 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009FC8 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009FCE 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009FD4 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009FDA 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009FDE 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009FE2                            		even
00009FE2                            		even
00009FE2                            
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            Map_obj1F:
00009FE2                            	include "_maps\obj1F.asm"
00009FE2                            Map_1514:
00009FE2 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009FE4 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009FE6 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009FE8 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009FEA 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009FEC 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009FEE 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009FF0 03                         Map_1514_E: 	dc.b $3
00009FF1 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009FF6 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009FFB F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A000 03                         Map_1514_1E: 	dc.b $3
0000A001 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A006 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A00B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A010 03                         Map_1514_2E: 	dc.b $3
0000A011 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A016 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A01B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A020 03                         Map_1514_3E: 	dc.b $3
0000A021 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A026 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A02B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A030 03                         Map_1514_4E: 	dc.b $3
0000A031 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A036 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A03B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A040 01                         Map_1514_5E: 	dc.b $1
0000A041 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A046 01                         Map_1514_64: 	dc.b $1
0000A047 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A04C                            	even
0000A04C                            	even
0000A04C                            
0000A04C                            ; ===========================================================================
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            
0000A04C                            Obj22:					; XREF: Obj_Index
0000A04C 7000                       		moveq	#0,d0
0000A04E 1028 0024                  		move.b	$24(a0),d0
0000A052 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A056 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A05A                            ; ===========================================================================
0000A05A 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A05C 0000                       		dc.w Obj22_Action-Obj22_Index
0000A05E 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A060                            ; ===========================================================================
0000A060                            
0000A060                            Obj22_Main:				; XREF: Obj22_Index
0000A060 5428 0024                  		addq.b	#2,$24(a0)
0000A064 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A06C 317C 0444 0002             		move.w	#$444,2(a0)
0000A072 117C 0004 0001             		move.b	#4,1(a0)
0000A078 117C 0003 0018             		move.b	#3,$18(a0)
0000A07E 117C 0008 0020             		move.b	#8,$20(a0)
0000A084 117C 0018 0019             		move.b	#$18,$19(a0)
0000A08A                            
0000A08A                            Obj22_Action:				; XREF: Obj22_Index
0000A08A 7000                       		moveq	#0,d0
0000A08C 1028 0025                  		move.b	$25(a0),d0
0000A090 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A094 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A098 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A09E 6100 0000                  		bsr.w	AnimateSprite
0000A0A2 6000 0000                  		bra.w	MarkObjGone
0000A0A6                            ; ===========================================================================
0000A0A6 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0A8 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0AA                            ; ===========================================================================
0000A0AA                            
0000A0AA                            Obj22_Move:				; XREF: Obj22_Index2
0000A0AA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0AE 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A0B0 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A0B6 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A0B8 5428 0025                  		addq.b	#2,$25(a0)
0000A0BC 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A0C2 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A0C8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A0CE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A0D4 6600                       		bne.s	locret_986C	; if not, branch
0000A0D6 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A0DA                            
0000A0DA                            locret_986C:
0000A0DA 4E75                       		rts	
0000A0DC                            ; ===========================================================================
0000A0DC                            
0000A0DC                            Obj22_Fire:				; XREF: Obj22_Move
0000A0DC 6100 0000                  		bsr.w	SingleObjLoad
0000A0E0 6600                       		bne.s	locret_98D0
0000A0E2 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A0E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0F2 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A0F8 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A0FE 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A104 303C 0018                  		move.w	#$18,d0
0000A108 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A10E 6600                       		bne.s	loc_98AA	; if not, branch
0000A110 4440                       		neg.w	d0
0000A112 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A116                            
0000A116                            loc_98AA:
0000A116 D169 0008                  		add.w	d0,8(a1)
0000A11A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A120 337C 000E 0032             		move.w	#$E,$32(a1)
0000A126 2348 003C                  		move.l	a0,$3C(a1)
0000A12A 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A130 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A136 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A13C                            
0000A13C                            locret_98D0:
0000A13C 4E75                       		rts	
0000A13E                            ; ===========================================================================
0000A13E                            
0000A13E                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A13E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A142 6B00                       		bmi.s	Obj22_ChgDir
0000A144 6100 0000                  		bsr.w	SpeedToPos
0000A148 4A28 0034                  		tst.b	$34(a0)
0000A14C 6600                       		bne.s	locret_992A
0000A14E 3038 D008                  		move.w	($FFFFD008).w,d0
0000A152 9068 0008                  		sub.w	8(a0),d0
0000A156 6A00                       		bpl.s	Obj22_SetNrSonic
0000A158 4440                       		neg.w	d0
0000A15A                            
0000A15A                            Obj22_SetNrSonic:
0000A15A 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A15E 6400                       		bcc.s	locret_992A	; if not, branch
0000A160 4A28 0001                  		tst.b	1(a0)
0000A164 6A00                       		bpl.s	locret_992A
0000A166 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A16C 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A172 6000                       		bra.s	Obj22_Stop
0000A174                            ; ===========================================================================
0000A174                            
0000A174                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A174 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A17A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A180 317C 003B 0032             		move.w	#59,$32(a0)
0000A186                            
0000A186                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A186 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A18A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A190 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A196                            
0000A196                            locret_992A:
0000A196 4E75                       		rts	
0000A198                            ; ===========================================================================
0000A198                            
0000A198                            Obj22_Delete:				; XREF: Obj22_Index
0000A198 6100 0000                  		bsr.w	DeleteObject
0000A19C 4E75                       		rts	
0000A19E                            ; ===========================================================================
0000A19E                            ; ---------------------------------------------------------------------------
0000A19E                            ; Object 23 - missile that Buzz	Bomber throws
0000A19E                            ; ---------------------------------------------------------------------------
0000A19E                            
0000A19E                            Obj23:					; XREF: Obj_Index
0000A19E 7000                       		moveq	#0,d0
0000A1A0 1028 0024                  		move.b	$24(a0),d0
0000A1A4 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1A8 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A1AC                            ; ===========================================================================
0000A1AC 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A1AE 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A1B0 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A1B2 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A1B4 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A1B6                            ; ===========================================================================
0000A1B6                            
0000A1B6                            Obj23_Main:				; XREF: Obj23_Index
0000A1B6 5368 0032                  		subq.w	#1,$32(a0)
0000A1BA 6A00                       		bpl.s	Obj23_ChkCancel
0000A1BC 5428 0024                  		addq.b	#2,$24(a0)
0000A1C0 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A1C8 317C 2444 0002             		move.w	#$2444,2(a0)
0000A1CE 117C 0004 0001             		move.b	#4,1(a0)
0000A1D4 117C 0003 0018             		move.b	#3,$18(a0)
0000A1DA 117C 0008 0019             		move.b	#8,$19(a0)
0000A1E0 0228 0003 0022             		andi.b	#3,$22(a0)
0000A1E6 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A1EA 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A1EC 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A1F2 117C 0087 0020             		move.b	#$87,$20(a0)
0000A1F8 117C 0001 001C             		move.b	#1,$1C(a0)
0000A1FE 6000                       		bra.s	Obj23_Animate2
0000A200                            ; ===========================================================================
0000A200                            
0000A200                            Obj23_Animate:				; XREF: Obj23_Index
0000A200 6100                       		bsr.s	Obj23_ChkCancel
0000A202 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A208 6100 0000                  		bsr.w	AnimateSprite
0000A20C 6000 0000                  		bra.w	DisplaySprite
0000A210                            ; ---------------------------------------------------------------------------
0000A210                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A210                            ; destroyed, and if it has, then cancel	the missile
0000A210                            ; ---------------------------------------------------------------------------
0000A210                            
0000A210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A210                            
0000A210                            
0000A210                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A210 2268 003C                  		movea.l	$3C(a0),a1
0000A214 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A218 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A21A 4E75                       		rts	
0000A21C                            ; End of function Obj23_ChkCancel
0000A21C                            
0000A21C                            ; ===========================================================================
0000A21C                            
0000A21C                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A21C 0828 0007 0022             		btst	#7,$22(a0)
0000A222 6600                       		bne.s	Obj23_Explode
0000A224 117C 0087 0020             		move.b	#$87,$20(a0)
0000A22A 117C 0001 001C             		move.b	#1,$1C(a0)
0000A230 6100 0000                  		bsr.w	SpeedToPos
0000A234 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A23A 6100 0000                  		bsr.w	AnimateSprite
0000A23E 6100 0000                  		bsr.w	DisplaySprite
0000A242 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A246 0640 00E0                  		addi.w	#$E0,d0
0000A24A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A24E 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A250 4E75                       		rts	
0000A252                            ; ===========================================================================
0000A252                            
0000A252                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A252 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A256 117C 0000 0024             		move.b	#0,$24(a0)
0000A25C 6000 F2D4                  		bra.w	Obj24
0000A260                            ; ===========================================================================
0000A260                            
0000A260                            Obj23_Delete:				; XREF: Obj23_Index
0000A260 6100 0000                  		bsr.w	DeleteObject
0000A264 4E75                       		rts	
0000A266                            ; ===========================================================================
0000A266                            
0000A266                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A266 4A28 0001                  		tst.b	1(a0)
0000A26A 6AF4                       		bpl.s	Obj23_Delete
0000A26C 6100 0000                  		bsr.w	SpeedToPos
0000A270                            
0000A270                            Obj23_Animate2:				; XREF: Obj23_Main
0000A270 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A276 6100 0000                  		bsr.w	AnimateSprite
0000A27A 6100 0000                  		bsr.w	DisplaySprite
0000A27E 4E75                       		rts	
0000A280                            ; ===========================================================================
0000A280                            Ani_obj22:
0000A280                            	include "_anim\obj22.asm"
0000A280                            ; ---------------------------------------------------------------------------
0000A280                            ; Animation script - Buzz Bomber enemy
0000A280                            ; ---------------------------------------------------------------------------
0000A280 0000                       		dc.w byte_9A1E-Ani_obj22
0000A282 0000                       		dc.w byte_9A22-Ani_obj22
0000A284 0000                       		dc.w byte_9A26-Ani_obj22
0000A286 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A28A 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A28E 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A292                            		even
0000A292                            		even
0000A292                            
0000A292                            Ani_obj23:
0000A292                            	include "_anim\obj23.asm"
0000A292                            ; ---------------------------------------------------------------------------
0000A292                            ; Animation script - missile that Buzz Bomber throws
0000A292                            ; ---------------------------------------------------------------------------
0000A292 0000                       		dc.w byte_9A2E-Ani_obj23
0000A294 0000                       		dc.w byte_9A32-Ani_obj23
0000A296 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A29A 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A29E                            		even
0000A29E                            		even
0000A29E                            
0000A29E                            ; ---------------------------------------------------------------------------
0000A29E                            ; Sprite mappings - Buzz Bomber	enemy
0000A29E                            ; ---------------------------------------------------------------------------
0000A29E                            Map_obj22:
0000A29E                            	include "_maps\obj22.asm"
0000A29E                            Map_e97a:
0000A29E 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2A0 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2A2 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2A4 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2A6 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2A8 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2AA 06                         Map_e97a_C: 	dc.b $6
0000A2AB F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2B0 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2B5 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2BA 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2BF F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A2C4 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A2C9 06                         Map_e97a_2B: 	dc.b $6
0000A2CA F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2CF F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2D4 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2D9 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2DE F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A2E3 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A2E8 07                         Map_e97a_4A: 	dc.b $7
0000A2E9 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A2EE F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2F3 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2F8 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2FD 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A302 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A307 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A30C 07                         Map_e97a_6E: 	dc.b $7
0000A30D 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A312 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A317 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A31C 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A321 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A326 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A32B F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A330 06                         Map_e97a_92: 	dc.b $6
0000A331 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A336 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A33B 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A340 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A345 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A34A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A34F 04                         Map_e97a_B1: 	dc.b $4
0000A350 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A355 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A35A 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A35F 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A364                            	even
0000A364                            	even
0000A364                            
0000A364                            ; ---------------------------------------------------------------------------
0000A364                            ; Sprite mappings - missile that Buzz Bomber throws
0000A364                            ; ---------------------------------------------------------------------------
0000A364                            Map_obj23:
0000A364                            	include "_maps\obj23.asm"
0000A364                            ; ---------------------------------------------------------------------------
0000A364                            ; Sprite mappings - missile that Buzz Bomber throws
0000A364                            ; ---------------------------------------------------------------------------
0000A364 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A368 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A36C 01                         byte_9B0E:	dc.b 1
0000A36D F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A372 01                         byte_9B14:	dc.b 1
0000A373 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A378 01                         byte_9B1A:	dc.b 1
0000A379 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A37E 01                         byte_9B20:	dc.b 1
0000A37F F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A384                            		even
0000A384                            		even
0000A384                            
0000A384                            ; ===========================================================================
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            ; Object 25 - rings
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            
0000A384                            Obj25:					; XREF: Obj_Index
0000A384 7000                       		moveq	#0,d0
0000A386 1028 0024                  		move.b	$24(a0),d0
0000A38A 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A38E 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A392                            ; ===========================================================================
0000A392 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A394 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A396 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A398 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A39A 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A39C                            ; ---------------------------------------------------------------------------
0000A39C                            ; Distances between rings (format: horizontal, vertical)
0000A39C                            ; ---------------------------------------------------------------------------
0000A39C 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A39E 1800                       		dc.b $18, 0		; horizontal normal
0000A3A0 2000                       		dc.b $20, 0		; horizontal wide
0000A3A2 0010                       		dc.b 0,	$10		; vertical tight
0000A3A4 0018                       		dc.b 0,	$18		; vertical normal
0000A3A6 0020                       		dc.b 0,	$20		; vertical wide
0000A3A8 1010                       		dc.b $10, $10		; diagonal
0000A3AA 1818                       		dc.b $18, $18
0000A3AC 2020                       		dc.b $20, $20
0000A3AE F010                       		dc.b $F0, $10
0000A3B0 E818                       		dc.b $E8, $18
0000A3B2 E020                       		dc.b $E0, $20
0000A3B4 1008                       		dc.b $10, 8
0000A3B6 1810                       		dc.b $18, $10
0000A3B8 F008                       		dc.b $F0, 8
0000A3BA E810                       		dc.b $E8, $10
0000A3BC                            ; ===========================================================================
0000A3BC                            
0000A3BC                            Obj25_Main:				; XREF: Obj25_Index
0000A3BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3C0 7000                       		moveq	#0,d0
0000A3C2 1028 0023                  		move.b	$23(a0),d0
0000A3C6 45F2 0002                  		lea	2(a2,d0.w),a2
0000A3CA 1812                       		move.b	(a2),d4
0000A3CC 1228 0028                  		move.b	$28(a0),d1
0000A3D0 1001                       		move.b	d1,d0
0000A3D2 0241 0007                  		andi.w	#7,d1
0000A3D6 0C41 0007                  		cmpi.w	#7,d1
0000A3DA 6600                       		bne.s	loc_9B80
0000A3DC 7206                       		moveq	#6,d1
0000A3DE                            
0000A3DE                            loc_9B80:
0000A3DE 4841                       		swap	d1
0000A3E0 323C 0000                  		move.w	#0,d1
0000A3E4 E808                       		lsr.b	#4,d0
0000A3E6 D040                       		add.w	d0,d0
0000A3E8 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A3EC 4885                       		ext.w	d5
0000A3EE 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A3F2 4886                       		ext.w	d6
0000A3F4 2248                       		movea.l	a0,a1
0000A3F6 3428 0008                  		move.w	8(a0),d2
0000A3FA 3628 000C                  		move.w	$C(a0),d3
0000A3FE E20C                       		lsr.b	#1,d4
0000A400 6500                       		bcs.s	loc_9C02
0000A402 0892 0007                  		bclr	#7,(a2)
0000A406 6000                       		bra.s	loc_9BBA
0000A408                            ; ===========================================================================
0000A408                            
0000A408                            Obj25_MakeRings:
0000A408 4841                       		swap	d1
0000A40A E20C                       		lsr.b	#1,d4
0000A40C 6500                       		bcs.s	loc_9C02
0000A40E 0892 0007                  		bclr	#7,(a2)
0000A412 6100 0000                  		bsr.w	SingleObjLoad
0000A416 6600                       		bne.s	loc_9C0E
0000A418                            
0000A418                            loc_9BBA:				; XREF: Obj25_Main
0000A418 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A41C 5429 0024                  		addq.b	#2,$24(a1)
0000A420 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A424 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A42A 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A42E 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A436 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A43C 137C 0004 0001             		move.b	#4,1(a1)
0000A442 137C 0002 0018             		move.b	#2,$18(a1)
0000A448 137C 0047 0020             		move.b	#$47,$20(a1)
0000A44E 137C 0008 0019             		move.b	#8,$19(a1)
0000A454 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A45A 1341 0034                  		move.b	d1,$34(a1)
0000A45E                            
0000A45E                            loc_9C02:
0000A45E 5241                       		addq.w	#1,d1
0000A460 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A462 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A464 4841                       		swap	d1
0000A466 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A46A                            
0000A46A                            loc_9C0E:
0000A46A 0812 0000                  		btst	#0,(a2)
0000A46E 6600 0000                  		bne.w	DeleteObject
0000A472                            
0000A472                            Obj25_Animate:				; XREF: Obj25_Index
0000A472 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A478 6100 0000                  		bsr.w	DisplaySprite
0000A47C 3028 0032                  		move.w	$32(a0),d0
0000A480 0240 FF80                  		andi.w	#$FF80,d0
0000A484 3238 F700                  		move.w	($FFFFF700).w,d1
0000A488 0441 0080                  		subi.w	#$80,d1
0000A48C 0241 FF80                  		andi.w	#$FF80,d1
0000A490 9041                       		sub.w	d1,d0
0000A492 0C40 0280                  		cmpi.w	#$280,d0
0000A496 6200                       		bhi.s	Obj25_Delete
0000A498 4E75                       		rts	
0000A49A                            ; ===========================================================================
0000A49A                            
0000A49A                            Obj25_Collect:				; XREF: Obj25_Index
0000A49A 5428 0024                  		addq.b	#2,$24(a0)
0000A49E 117C 0000 0020             		move.b	#0,$20(a0)
0000A4A4 117C 0001 0018             		move.b	#1,$18(a0)
0000A4AA 6100 0000                  		bsr.w	CollectRing
0000A4AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A4B2 7000                       		moveq	#0,d0
0000A4B4 1028 0023                  		move.b	$23(a0),d0
0000A4B8 1228 0034                  		move.b	$34(a0),d1
0000A4BC 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A4C0                            
0000A4C0                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A4C0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4C6 6100 0000                  		bsr.w	AnimateSprite
0000A4CA 6000 0000                  		bra.w	DisplaySprite
0000A4CE                            ; ===========================================================================
0000A4CE                            
0000A4CE                            Obj25_Delete:				; XREF: Obj25_Index
0000A4CE 6000 0000                  		bra.w	DeleteObject
0000A4D2                            
0000A4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4D2                            
0000A4D2                            
0000A4D2                            CollectRing:				; XREF: Obj25_Collect
0000A4D2 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A4D6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A4DC 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A4E0 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A4E6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A4E8 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A4EE 6700                       		beq.s	loc_9CA4
0000A4F0 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A4F6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A4F8 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A4FE 6600                       		bne.s	Obj25_PlaySnd
0000A500                            
0000A500                            loc_9CA4:
0000A500 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A504 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A508 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A50C                            
0000A50C                            Obj25_PlaySnd:
0000A50C 4EF9 0000 15D2             		jmp	(PlaySound_Special).l
0000A512                            ; End of function CollectRing
0000A512                            
0000A512                            ; ===========================================================================
0000A512                            ; ---------------------------------------------------------------------------
0000A512                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A512                            ; ---------------------------------------------------------------------------
0000A512                            
0000A512                            Obj37:					; XREF: Obj_Index
0000A512 7000                       		moveq	#0,d0
0000A514 1028 0024                  		move.b	$24(a0),d0
0000A518 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A51C 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A520                            ; ===========================================================================
0000A520 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A522 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A524 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A526 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A528 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A52A                            ; ===========================================================================
0000A52A                            
0000A52A                            Obj37_CountRings:			; XREF: Obj37_Index
0000A52A 2248                       		movea.l	a0,a1
0000A52C 7A00                       		moveq	#0,d5
0000A52E 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A532 7020                       		moveq	#32,d0
0000A534 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A536 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A538 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A53A                            
0000A53A                            loc_9CDE:
0000A53A 5345                       		subq.w	#1,d5
0000A53C 383C 0288                  		move.w	#$288,d4
0000A540 6000                       		bra.s	Obj37_MakeRings
0000A542                            ; ===========================================================================
0000A542                            
0000A542                            Obj37_Loop:
0000A542 6100 0000                  		bsr.w	SingleObjLoad
0000A546 6600 0000                  		bne.w	Obj37_ResetCounter
0000A54A                            
0000A54A                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A54A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A54E 5429 0024                  		addq.b	#2,$24(a1)
0000A552 137C 0008 0016             		move.b	#8,$16(a1)
0000A558 137C 0008 0017             		move.b	#8,$17(a1)
0000A55E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A564 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A56A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A572 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A578 137C 0004 0001             		move.b	#4,1(a1)
0000A57E 137C 0003 0018             		move.b	#3,$18(a1)
0000A584 137C 0047 0020             		move.b	#$47,$20(a1)
0000A58A 137C 0008 0019             		move.b	#8,$19(a1)
0000A590 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A596 4A44                       		tst.w	d4
0000A598 6B00                       		bmi.s	loc_9D62
0000A59A 3004                       		move.w	d4,d0
0000A59C 6100 87CE                  		bsr.w	CalcSine
0000A5A0 3404                       		move.w	d4,d2
0000A5A2 E04A                       		lsr.w	#8,d2
0000A5A4 E560                       		asl.w	d2,d0
0000A5A6 E561                       		asl.w	d2,d1
0000A5A8 3400                       		move.w	d0,d2
0000A5AA 3601                       		move.w	d1,d3
0000A5AC 0604 0010                  		addi.b	#$10,d4
0000A5B0 6400                       		bcc.s	loc_9D62
0000A5B2 0444 0080                  		subi.w	#$80,d4
0000A5B6 6400                       		bcc.s	loc_9D62
0000A5B8 383C 0288                  		move.w	#$288,d4
0000A5BC                            
0000A5BC                            loc_9D62:
0000A5BC 3342 0010                  		move.w	d2,$10(a1)
0000A5C0 3343 0012                  		move.w	d3,$12(a1)
0000A5C4 4442                       		neg.w	d2
0000A5C6 4444                       		neg.w	d4
0000A5C8 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A5CC                            
0000A5CC                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A5CC 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A5D2 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A5D8 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A5DE 303C 00C6                  		move.w	#$C6,d0
0000A5E2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A5E8                            
0000A5E8                            Obj37_Bounce:				; XREF: Obj37_Index
0000A5E8 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A5EE 6100 0000                  		bsr.w	SpeedToPos
0000A5F2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A5F8 6B00                       		bmi.s	Obj37_ChkDel
0000A5FA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A5FE D007                       		add.b	d7,d0
0000A600 0200 0003                  		andi.b	#3,d0
0000A604 6600                       		bne.s	Obj37_ChkDel
0000A606 4EB9 0000 0000             		jsr	ObjHitFloor
0000A60C 4A41                       		tst.w	d1
0000A60E 6A00                       		bpl.s	Obj37_ChkDel
0000A610 D368 000C                  		add.w	d1,$C(a0)
0000A614 3028 0012                  		move.w	$12(a0),d0
0000A618 E440                       		asr.w	#2,d0
0000A61A 9168 0012                  		sub.w	d0,$12(a0)
0000A61E 4468 0012                  		neg.w	$12(a0)
0000A622                            
0000A622                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A622 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A626 6700                       		beq.s	Obj37_Delete
0000A628 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A62C 0640 00E0                  		addi.w	#$E0,d0
0000A630 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A634 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A636 6000 0000                  		bra.w	DisplaySprite
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            Obj37_Collect:				; XREF: Obj37_Index
0000A63A 5428 0024                  		addq.b	#2,$24(a0)
0000A63E 117C 0000 0020             		move.b	#0,$20(a0)
0000A644 117C 0001 0018             		move.b	#1,$18(a0)
0000A64A 6100 FE86                  		bsr.w	CollectRing
0000A64E                            
0000A64E                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A64E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A654 6100 0000                  		bsr.w	AnimateSprite
0000A658 6000 0000                  		bra.w	DisplaySprite
0000A65C                            ; ===========================================================================
0000A65C                            
0000A65C                            Obj37_Delete:				; XREF: Obj37_Index
0000A65C 6000 0000                  		bra.w	DeleteObject
0000A660                            ; ===========================================================================
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Object 4B - giant ring for entry to special stage
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            
0000A660                            Obj4B:					; XREF: Obj_Index
0000A660 7000                       		moveq	#0,d0
0000A662 1028 0024                  		move.b	$24(a0),d0
0000A666 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A66A 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A66E                            ; ===========================================================================
0000A66E 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A670 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A672 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A674 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A676                            ; ===========================================================================
0000A676                            
0000A676                            Obj4B_Main:				; XREF: Obj4B_Index
0000A676 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A67E 317C 2400 0002             		move.w	#$2400,2(a0)
0000A684 0028 0004 0001             		ori.b	#4,1(a0)
0000A68A 117C 0040 0019             		move.b	#$40,$19(a0)
0000A690 4A28 0001                  		tst.b	1(a0)
0000A694 6A00                       		bpl.s	Obj4B_Animate
0000A696 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A69C 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6A0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6A6 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6A8 4E75                       		rts	
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6AA 5428 0024                  		addq.b	#2,$24(a0)
0000A6AE 117C 0002 0018             		move.b	#2,$18(a0)
0000A6B4 117C 0052 0020             		move.b	#$52,$20(a0)
0000A6BA 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A6C0                            
0000A6C0                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A6C0 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A6C6 3028 0008                  		move.w	8(a0),d0
0000A6CA 0240 FF80                  		andi.w	#$FF80,d0
0000A6CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6D2 0441 0080                  		subi.w	#$80,d1
0000A6D6 0241 FF80                  		andi.w	#$FF80,d1
0000A6DA 9041                       		sub.w	d1,d0
0000A6DC 0C40 0280                  		cmpi.w	#$280,d0
0000A6E0 6200 0000                  		bhi.w	DeleteObject
0000A6E4 6000 0000                  		bra.w	DisplaySprite
0000A6E8                            ; ===========================================================================
0000A6E8                            
0000A6E8                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A6E8 5528 0024                  		subq.b	#2,$24(a0)
0000A6EC 117C 0000 0020             		move.b	#0,$20(a0)
0000A6F2 6100 0000                  		bsr.w	SingleObjLoad
0000A6F6 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A6FA 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A6FE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A704 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A70A 2348 003C                  		move.l	a0,$3C(a1)
0000A70E 3038 D008                  		move.w	($FFFFD008).w,d0
0000A712 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A716 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A718 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A71E                            
0000A71E                            Obj4B_PlaySnd:
0000A71E 303C 00C3                  		move.w	#$C3,d0
0000A722 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A728 6096                       		bra.s	Obj4B_Animate
0000A72A                            ; ===========================================================================
0000A72A                            
0000A72A                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A72A 6000 0000                  		bra.w	DeleteObject
0000A72E                            ; ===========================================================================
0000A72E                            ; ---------------------------------------------------------------------------
0000A72E                            ; Object 7C - flash effect when	you collect the	giant ring
0000A72E                            ; ---------------------------------------------------------------------------
0000A72E                            
0000A72E                            Obj7C:					; XREF: Obj_Index
0000A72E 7000                       		moveq	#0,d0
0000A730 1028 0024                  		move.b	$24(a0),d0
0000A734 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A738 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A73C                            ; ===========================================================================
0000A73C 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A73E 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A740 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A742                            ; ===========================================================================
0000A742                            
0000A742                            Obj7C_Main:				; XREF: Obj7C_Index
0000A742 5428 0024                  		addq.b	#2,$24(a0)
0000A746 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A74E 317C 2462 0002             		move.w	#$2462,2(a0)
0000A754 0028 0004 0001             		ori.b	#4,1(a0)
0000A75A 117C 0000 0018             		move.b	#0,$18(a0)
0000A760 117C 0020 0019             		move.b	#$20,$19(a0)
0000A766 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A76C                            
0000A76C                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A76C 6100                       		bsr.s	Obj7C_Collect
0000A76E 3028 0008                  		move.w	8(a0),d0
0000A772 0240 FF80                  		andi.w	#$FF80,d0
0000A776 3238 F700                  		move.w	($FFFFF700).w,d1
0000A77A 0441 0080                  		subi.w	#$80,d1
0000A77E 0241 FF80                  		andi.w	#$FF80,d1
0000A782 9041                       		sub.w	d1,d0
0000A784 0C40 0280                  		cmpi.w	#$280,d0
0000A788 6200 0000                  		bhi.w	DeleteObject
0000A78C 6000 0000                  		bra.w	DisplaySprite
0000A790                            
0000A790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A790                            
0000A790                            
0000A790                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A790 5328 001E                  		subq.b	#1,$1E(a0)
0000A794 6A00                       		bpl.s	locret_9F76
0000A796 117C 0001 001E             		move.b	#1,$1E(a0)
0000A79C 5228 001A                  		addq.b	#1,$1A(a0)
0000A7A0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7A6 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7A8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A7AE 6600                       		bne.s	locret_9F76	; if not, branch
0000A7B0 2268 003C                  		movea.l	$3C(a0),a1
0000A7B4 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A7BA 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A7C0 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A7C6 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A7CA 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A7CE                            
0000A7CE                            locret_9F76:
0000A7CE 4E75                       		rts	
0000A7D0                            ; ===========================================================================
0000A7D0                            
0000A7D0                            Obj7C_End:				; XREF: Obj7C_Collect
0000A7D0 5428 0024                  		addq.b	#2,$24(a0)
0000A7D4 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A7DA 588F                       		addq.l	#4,sp
0000A7DC 4E75                       		rts	
0000A7DE                            ; End of function Obj7C_Collect
0000A7DE                            
0000A7DE                            ; ===========================================================================
0000A7DE                            
0000A7DE                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A7DE 6000 0000                  		bra.w	DeleteObject
0000A7E2                            ; ===========================================================================
0000A7E2                            Ani_obj25:
0000A7E2                            	include "_anim\obj25.asm"
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2                            ; Animation script - ring
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2 0000                       		dc.w byte_9F8C-Ani_obj25
0000A7E4 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A7EA                            		even
0000A7EA                            		even
0000A7EA                            
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA                            ; Sprite mappings - rings
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA                            Map_obj25:
0000A7EA                            	include "_maps\obj25.asm"
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA                            ; Sprite mappings - rings
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A7EE 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A7F2 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A7F6 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A7FA 01                         byte_9FA2:	dc.b 1
0000A7FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A800 01                         byte_9FA8:	dc.b 1
0000A801 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A806 01                         byte_9FAE:	dc.b 1
0000A807 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A80C 01                         byte_9FB4:	dc.b 1
0000A80D F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A812 01                         byte_9FBA:	dc.b 1
0000A813 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A818 01                         byte_9FC0:	dc.b 1
0000A819 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A81E 01                         byte_9FC6:	dc.b 1
0000A81F F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A824 01                         byte_9FCC:	dc.b 1
0000A825 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A82A                            		even
0000A82A                            		even
0000A82A                            
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            ; Sprite mappings - giant ring
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            Map_obj4B:
0000A82A                            	include "_maps\obj4B.asm"
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            ; Sprite mappings - giant ring
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A82E 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A832 0A                         byte_9FDA:	dc.b $A
0000A833 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A838 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A83D E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A842 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A847 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A84C F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A851 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A856 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A85B 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A860 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A865 08                         byte_A00D:	dc.b 8
0000A866 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A86B E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A870 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A875 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A87A F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A87F 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A884 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A889 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A88E 04                         byte_A036:	dc.b 4
0000A88F E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A894 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A899 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A89E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8A3 08                         byte_A04B:	dc.b 8
0000A8A4 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8A9 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A8AE E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A8B3 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A8B8 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A8BD 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A8C2 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A8C7 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A8CC                            		even
0000A8CC                            		even
0000A8CC                            
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC                            Map_obj7C:
0000A8CC                            	include "_maps\obj7C.asm"
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A8D0 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A8D4 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A8D8 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A8DC 02                         byte_A084:	dc.b 2
0000A8DD E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A8E2 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A8E7 04                         byte_A08F:	dc.b 4
0000A8E8 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A8ED E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A8F2 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A8F7 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A8FC 04                         byte_A0A4:	dc.b 4
0000A8FD E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A902 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A907 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A90C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A911 04                         byte_A0B9:	dc.b 4
0000A912 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A917 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A91C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A921 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A926 04                         byte_A0CE:	dc.b 4
0000A927 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A92C E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A931 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A936 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A93B 04                         byte_A0E3:	dc.b 4
0000A93C E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A941 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A946 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A94B 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A950 02                         byte_A0F8:	dc.b 2
0000A951 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A956 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A95B 04                         byte_A103:	dc.b 4
0000A95C E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A961 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A966 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A96B 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A970                            		even
0000A970                            		even
0000A970                            
0000A970                            ; ===========================================================================
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            ; Object 26 - monitors
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            
0000A970                            Obj26:					; XREF: Obj_Index
0000A970 7000                       		moveq	#0,d0
0000A972 1028 0024                  		move.b	$24(a0),d0
0000A976 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A97A 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A97E                            ; ===========================================================================
0000A97E 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A980 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A982 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A984 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A986 0000                       		dc.w Obj26_Display-Obj26_Index
0000A988                            ; ===========================================================================
0000A988                            
0000A988                            Obj26_Main:				; XREF: Obj26_Index
0000A988 5428 0024                  		addq.b	#2,$24(a0)
0000A98C 117C 000E 0016             		move.b	#$E,$16(a0)
0000A992 117C 000E 0017             		move.b	#$E,$17(a0)
0000A998 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9A0 317C 0680 0002             		move.w	#$680,2(a0)
0000A9A6 117C 0004 0001             		move.b	#4,1(a0)
0000A9AC 117C 0003 0018             		move.b	#3,$18(a0)
0000A9B2 117C 000F 0019             		move.b	#$F,$19(a0)
0000A9B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9BC 7000                       		moveq	#0,d0
0000A9BE 1028 0023                  		move.b	$23(a0),d0
0000A9C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A9C8 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A9CE 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A9D0 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A9D6 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A9DC 4E75                       		rts	
0000A9DE                            ; ===========================================================================
0000A9DE                            
0000A9DE                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A9DE 117C 0046 0020             		move.b	#$46,$20(a0)
0000A9E4 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A9EA                            
0000A9EA                            Obj26_Solid:				; XREF: Obj26_Index
0000A9EA 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A9EE 6700                       		beq.s	loc_A1EC	; if not, branch
0000A9F0 5500                       		subq.b	#2,d0
0000A9F2 6600                       		bne.s	Obj26_Fall
0000A9F4 7200                       		moveq	#0,d1
0000A9F6 1228 0019                  		move.b	$19(a0),d1
0000A9FA 0641 000B                  		addi.w	#$B,d1
0000A9FE 6100 D380                  		bsr.w	ExitPlatform
0000AA02 0829 0003 0022             		btst	#3,$22(a1)
0000AA08 6600 0000                  		bne.w	loc_A1BC
0000AA0C 4228 0025                  		clr.b	$25(a0)
0000AA10 6000 0000                  		bra.w	Obj26_Animate
0000AA14                            ; ===========================================================================
0000AA14                            
0000AA14                            loc_A1BC:				; XREF: Obj26_Solid
0000AA14 363C 0010                  		move.w	#$10,d3
0000AA18 3428 0008                  		move.w	8(a0),d2
0000AA1C 6100 D8C0                  		bsr.w	MvSonicOnPtfm
0000AA20 6000 0000                  		bra.w	Obj26_Animate
0000AA24                            ; ===========================================================================
0000AA24                            
0000AA24                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA24 6100 0000                  		bsr.w	ObjectFall
0000AA28 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA2E 4A41                       		tst.w	d1
0000AA30 6A00 0000                  		bpl.w	Obj26_Animate
0000AA34 D368 000C                  		add.w	d1,$C(a0)
0000AA38 4268 0012                  		clr.w	$12(a0)
0000AA3C 4228 0025                  		clr.b	$25(a0)
0000AA40 6000 0000                  		bra.w	Obj26_Animate
0000AA44                            ; ===========================================================================
0000AA44                            
0000AA44                            loc_A1EC:				; XREF: Obj26_Solid
0000AA44 323C 001A                  		move.w	#$1A,d1
0000AA48 343C 000F                  		move.w	#$F,d2
0000AA4C 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA50 6700 0000                  		beq.w	loc_A25C
0000AA54 4A69 0012                  		tst.w	$12(a1)
0000AA58 6B00                       		bmi.s	loc_A20A
0000AA5A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AA60 6700                       		beq.s	loc_A25C	; if yes, branch
0000AA62                            
0000AA62                            loc_A20A:
0000AA62 4A41                       		tst.w	d1
0000AA64 6A00                       		bpl.s	loc_A220
0000AA66 9769 000C                  		sub.w	d3,$C(a1)
0000AA6A 6100 D202                  		bsr.w	loc_74AE
0000AA6E 117C 0002 0025             		move.b	#2,$25(a0)
0000AA74 6000 0000                  		bra.w	Obj26_Animate
0000AA78                            ; ===========================================================================
0000AA78                            
0000AA78                            loc_A220:
0000AA78 4A40                       		tst.w	d0
0000AA7A 6700 0000                  		beq.w	loc_A246
0000AA7E 6B00                       		bmi.s	loc_A230
0000AA80 4A69 0010                  		tst.w	$10(a1)
0000AA84 6B00                       		bmi.s	loc_A246
0000AA86 6000                       		bra.s	loc_A236
0000AA88                            ; ===========================================================================
0000AA88                            
0000AA88                            loc_A230:
0000AA88 4A69 0010                  		tst.w	$10(a1)
0000AA8C 6A00                       		bpl.s	loc_A246
0000AA8E                            
0000AA8E                            loc_A236:
0000AA8E 9169 0008                  		sub.w	d0,8(a1)
0000AA92 337C 0000 0014             		move.w	#0,$14(a1)
0000AA98 337C 0000 0010             		move.w	#0,$10(a1)
0000AA9E                            
0000AA9E                            loc_A246:
0000AA9E 0829 0001 0022             		btst	#1,$22(a1)
0000AAA4 6600                       		bne.s	loc_A26A
0000AAA6 08E9 0005 0022             		bset	#5,$22(a1)
0000AAAC 08E8 0005 0022             		bset	#5,$22(a0)
0000AAB2 6000                       		bra.s	Obj26_Animate
0000AAB4                            ; ===========================================================================
0000AAB4                            
0000AAB4                            loc_A25C:
0000AAB4 0828 0005 0022             		btst	#5,$22(a0)
0000AABA 6700                       		beq.s	Obj26_Animate
0000AABC 337C 0001 001C             		move.w	#1,$1C(a1)
0000AAC2                            
0000AAC2                            loc_A26A:
0000AAC2 08A8 0005 0022             		bclr	#5,$22(a0)
0000AAC8 08A9 0005 0022             		bclr	#5,$22(a1)
0000AACE                            
0000AACE                            Obj26_Animate:				; XREF: Obj26_Index
0000AACE 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AAD4 6100 0000                  		bsr.w	AnimateSprite
0000AAD8                            
0000AAD8                            Obj26_Display:				; XREF: Obj26_Index
0000AAD8 6100 0000                  		bsr.w	DisplaySprite
0000AADC 3028 0008                  		move.w	8(a0),d0
0000AAE0 0240 FF80                  		andi.w	#$FF80,d0
0000AAE4 3238 F700                  		move.w	($FFFFF700).w,d1
0000AAE8 0441 0080                  		subi.w	#$80,d1
0000AAEC 0241 FF80                  		andi.w	#$FF80,d1
0000AAF0 9041                       		sub.w	d1,d0
0000AAF2 0C40 0280                  		cmpi.w	#$280,d0
0000AAF6 6200 0000                  		bhi.w	DeleteObject
0000AAFA 4E75                       		rts	
0000AAFC                            ; ===========================================================================
0000AAFC                            
0000AAFC                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AAFC 5428 0024                  		addq.b	#2,$24(a0)
0000AB00 117C 0000 0020             		move.b	#0,$20(a0)
0000AB06 6100 0000                  		bsr.w	SingleObjLoad
0000AB0A 6600                       		bne.s	Obj26_Explode
0000AB0C 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB10 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB16 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB1C 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB22 7400                       		moveq	#0,d2	; GMZ
0000AB24 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB26                            
0000AB26                            Obj26_Explode:
0000AB26 6100 0000                  		bsr.w	SingleObjLoad
0000AB2A 6600                       		bne.s	Obj26_SetBroken
0000AB2C 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB30 5429 0024                  		addq.b	#2,$24(a1)
0000AB34 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB38 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB44                            
0000AB44                            Obj26_NextExplosion:
0000AB44 5802                       		addq.b	#4,d2
0000AB46 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB4A                            
0000AB4A                            Obj26_SetBroken:
0000AB4A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB4E 7000                       		moveq	#0,d0
0000AB50 1028 0023                  		move.b	$23(a0),d0
0000AB54 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AB5A 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AB60 6000 0000                  		bra.w	DisplaySprite
0000AB64                            ; ===========================================================================
0000AB64                            ; ---------------------------------------------------------------------------
0000AB64                            ; Object 2E - contents of monitors
0000AB64                            ; ---------------------------------------------------------------------------
0000AB64                            
0000AB64                            Obj2E:					; XREF: Obj_Index
0000AB64 7000                       		moveq	#0,d0
0000AB66 1028 0024                  		move.b	$24(a0),d0
0000AB6A 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AB6E 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AB72 6000 0000                  		bra.w	DisplaySprite
0000AB76                            ; ===========================================================================
0000AB76 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AB78 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AB7A 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AB7C                            ; ===========================================================================
0000AB7C                            
0000AB7C                            Obj2E_Main:				; XREF: Obj2E_Index
0000AB7C 5428 0024                  		addq.b	#2,$24(a0)
0000AB80 317C 0680 0002             		move.w	#$680,2(a0)
0000AB86 117C 0024 0001             		move.b	#$24,1(a0)
0000AB8C 117C 0003 0018             		move.b	#3,$18(a0)
0000AB92 117C 0008 0019             		move.b	#8,$19(a0)
0000AB98 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AB9E 7000                       		moveq	#0,d0
0000ABA0 1028 001C                  		move.b	$1C(a0),d0
0000ABA4 5400                       		addq.b	#2,d0
0000ABA6 1140 001A                  		move.b	d0,$1A(a0)
0000ABAA 227C 0000 0000             		movea.l	#Map_obj26,a1
0000ABB0 D000                       		add.b	d0,d0
0000ABB2 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000ABB6 5249                       		addq.w	#1,a1
0000ABB8 2149 0004                  		move.l	a1,4(a0)
0000ABBC                            
0000ABBC                            Obj2E_Move:				; XREF: Obj2E_Index
0000ABBC 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000ABC0 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000ABC4 6100 0000                  		bsr.w	SpeedToPos
0000ABC8 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000ABCE 4E75                       		rts	
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000ABD0 5428 0024                  		addq.b	#2,$24(a0)
0000ABD4 317C 001D 001E             		move.w	#29,$1E(a0)
0000ABDA 1028 001C                  		move.b	$1C(a0),d0
0000ABDE 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000ABE2 6600                       		bne.s	Obj2E_ChkSonic
0000ABE4 4E75                       		rts			; Eggman monitor does nothing
0000ABE6                            ; ===========================================================================
0000ABE6                            
0000ABE6                            Obj2E_ChkSonic:
0000ABE6 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000ABEA 6600                       		bne.s	Obj2E_ChkShoes
0000ABEC                            
0000ABEC                            ExtraLife:
0000ABEC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000ABF0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000ABF4 303C 0088                  		move.w	#$88,d0
0000ABF8 4EF9 0000 15CC             		jmp	(PlaySound).l	; play extra life music
0000ABFE                            ; ===========================================================================
0000ABFE                            
0000ABFE                            Obj2E_ChkShoes:
0000ABFE 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC02 6600                       		bne.s	Obj2E_ChkShield
0000AC04 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC0A 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC10 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC16 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC1C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC22 303C 00E2                  		move.w	#$E2,d0
0000AC26 4EF9 0000 15CC             		jmp	(PlaySound).l	; Speed	up the music
0000AC2C                            ; ===========================================================================
0000AC2C                            
0000AC2C                            Obj2E_ChkShield:
0000AC2C 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC30 6600                       		bne.s	Obj2E_ChkInvinc
0000AC32 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC38 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC3E 303C 00AF                  		move.w	#$AF,d0
0000AC42 4EF9 0000 15CC             		jmp	(PlaySound).l	; play shield sound
0000AC48                            ; ===========================================================================
0000AC48                            
0000AC48                            Obj2E_ChkInvinc:
0000AC48 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AC4C 6600                       		bne.s	Obj2E_ChkRings
0000AC4E 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AC54 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AC5A 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AC60 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AC66 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AC6C 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AC72 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AC78 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AC7E 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AC84 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AC8A 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AC8E 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AC90 303C 0087                  		move.w	#$87,d0
0000AC94 4EF9 0000 15CC             		jmp	(PlaySound).l	; play invincibility music
0000AC9A                            ; ===========================================================================
0000AC9A                            
0000AC9A                            Obj2E_NoMusic:
0000AC9A 4E75                       		rts	
0000AC9C                            ; ===========================================================================
0000AC9C                            
0000AC9C                            Obj2E_ChkRings:
0000AC9C 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACA0 6600                       		bne.s	Obj2E_ChkS
0000ACA2 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACA8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ACAE 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000ACB4 6500                       		bcs.s	Obj2E_RingSound
0000ACB6 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000ACBC 6700 FF2E                  		beq.w	ExtraLife
0000ACC0 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000ACC6 6500                       		bcs.s	Obj2E_RingSound
0000ACC8 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000ACCE 6700 FF1C                  		beq.w	ExtraLife
0000ACD2                            
0000ACD2                            Obj2E_RingSound:
0000ACD2 303C 00B5                  		move.w	#$B5,d0
0000ACD6 4EF9 0000 15CC             		jmp	(PlaySound).l	; play ring sound
0000ACDC                            ; ===========================================================================
0000ACDC                            
0000ACDC                            Obj2E_ChkS:
0000ACDC 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000ACE0 6600                       		bne.s	Obj2E_ChkEnd
0000ACE2                            		; nop	
0000ACE2 7201                       		moveq	#1,d1
0000ACE4 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000ACE8                            
0000ACE8                            Obj2E_ChkEnd:
0000ACE8 4E75                       		rts			; 'S' and goggles monitors do nothing
0000ACEA                            ; ===========================================================================
0000ACEA                            
0000ACEA                            Obj2E_Delete:				; XREF: Obj2E_Index
0000ACEA 5368 001E                  		subq.w	#1,$1E(a0)
0000ACEE 6B00 0000                  		bmi.w	DeleteObject
0000ACF2 4E75                       		rts	
0000ACF4                            ; ---------------------------------------------------------------------------
0000ACF4                            ; Subroutine to	make the sides of a monitor solid
0000ACF4                            ; ---------------------------------------------------------------------------
0000ACF4                            
0000ACF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACF4                            
0000ACF4                            
0000ACF4                            Obj26_SolidSides:			; XREF: loc_A1EC
0000ACF4 43F8 D000                  		lea	($FFFFD000).w,a1
0000ACF8 3029 0008                  		move.w	8(a1),d0
0000ACFC 9068 0008                  		sub.w	8(a0),d0
0000AD00 D041                       		add.w	d1,d0
0000AD02 6B00                       		bmi.s	loc_A4E6
0000AD04 3601                       		move.w	d1,d3
0000AD06 D643                       		add.w	d3,d3
0000AD08 B043                       		cmp.w	d3,d0
0000AD0A 6200                       		bhi.s	loc_A4E6
0000AD0C 1629 0016                  		move.b	$16(a1),d3
0000AD10 4883                       		ext.w	d3
0000AD12 D443                       		add.w	d3,d2
0000AD14 3629 000C                  		move.w	$C(a1),d3
0000AD18 9668 000C                  		sub.w	$C(a0),d3
0000AD1C D642                       		add.w	d2,d3
0000AD1E 6B00                       		bmi.s	loc_A4E6
0000AD20 D442                       		add.w	d2,d2
0000AD22 B642                       		cmp.w	d2,d3
0000AD24 6400                       		bcc.s	loc_A4E6
0000AD26 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD2A 6B00                       		bmi.s	loc_A4E6
0000AD2C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD32 6400                       		bcc.s	loc_A4E6
0000AD34 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD38 6600                       		bne.s	loc_A4E6
0000AD3A B240                       		cmp.w	d0,d1
0000AD3C 6400                       		bcc.s	loc_A4DC
0000AD3E D241                       		add.w	d1,d1
0000AD40 9041                       		sub.w	d1,d0
0000AD42                            
0000AD42                            loc_A4DC:
0000AD42 0C43 0010                  		cmpi.w	#$10,d3
0000AD46 6500                       		bcs.s	loc_A4EA
0000AD48                            
0000AD48                            loc_A4E2:
0000AD48 7201                       		moveq	#1,d1
0000AD4A 4E75                       		rts	
0000AD4C                            ; ===========================================================================
0000AD4C                            
0000AD4C                            loc_A4E6:
0000AD4C 7200                       		moveq	#0,d1
0000AD4E 4E75                       		rts	
0000AD50                            ; ===========================================================================
0000AD50                            
0000AD50                            loc_A4EA:
0000AD50 7200                       		moveq	#0,d1
0000AD52 1228 0019                  		move.b	$19(a0),d1
0000AD56 5841                       		addq.w	#4,d1
0000AD58 3401                       		move.w	d1,d2
0000AD5A D442                       		add.w	d2,d2
0000AD5C D269 0008                  		add.w	8(a1),d1
0000AD60 9268 0008                  		sub.w	8(a0),d1
0000AD64 6BE2                       		bmi.s	loc_A4E2
0000AD66 B242                       		cmp.w	d2,d1
0000AD68 64DE                       		bcc.s	loc_A4E2
0000AD6A 72FF                       		moveq	#-1,d1
0000AD6C 4E75                       		rts	
0000AD6E                            ; End of function Obj26_SolidSides
0000AD6E                            
0000AD6E                            ; ===========================================================================
0000AD6E                            Ani_obj26:
0000AD6E                            	include "_anim\obj26.asm"
0000AD6E                            ; ---------------------------------------------------------------------------
0000AD6E                            ; Animation script - monitors
0000AD6E                            ; ---------------------------------------------------------------------------
0000AD6E 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AD74 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AD7A 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AD80 0000                       		dc.w byte_A582-Ani_obj26
0000AD82 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AD88 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AD94 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADA0 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADAC 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ADB8 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ADC4 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ADD0 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ADDC 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ADE8 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ADF0                            		even
0000ADF0                            		even
0000ADF0                            
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            ; Sprite mappings - monitors
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            Map_obj26:
0000ADF0                            	include "_maps\obj26.asm"
0000ADF0                            ; ================================================================================
0000ADF0                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ADF0                            ; ================================================================================
0000ADF0                            
0000ADF0                            DATAY1U343IF3L:
0000ADF0 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000ADF4 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000ADF8 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000ADFC 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE00 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE04 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE08 05                         DATAY1U343IF3L_0: dc.b $5
0000AE09 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE0E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE13 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE18 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE1D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE22 06                         DATAY1U343IF3L_1: dc.b $6
0000AE23 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE28 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE2D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE32 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE37 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE3C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE41 05                         DATAY1U343IF3L_2: dc.b $5
0000AE42 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE47 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE4C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE51 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE56 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE5B 05                         DATAY1U343IF3L_3: dc.b $5
0000AE5C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE61 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE66 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE6B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE70 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE75 06                         DATAY1U343IF3L_4: dc.b $6
0000AE76 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AE7B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE80 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE85 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE8A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE8F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE94 06                         DATAY1U343IF3L_5: dc.b $6
0000AE95 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AE9A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE9F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEA4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEA9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEAE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEB3 06                         DATAY1U343IF3L_6: dc.b $6
0000AEB4 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AEB9 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEBE 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEC3 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEC8 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AECD 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AED2 06                         DATAY1U343IF3L_7: dc.b $6
0000AED3 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AED8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEDD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEE2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEE7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEEC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEF1 06                         DATAY1U343IF3L_8: dc.b $6
0000AEF2 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AEF7 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEFC 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF01 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF06 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF0B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF10 06                         DATAY1U343IF3L_9: dc.b $6
0000AF11 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF16 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF1B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF20 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF25 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF2A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF2F 05                         DATAY1U343IF3L_A: dc.b $5
0000AF30 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF35 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF3A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF3F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF44 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF49 01                         DATAY1U343IF3L_B: dc.b $1
0000AF4A FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AF50 00                         	even
0000AF50 00                         	even
0000AF50                            
0000AF50                            ; ===========================================================================
0000AF50                            ; ---------------------------------------------------------------------------
0000AF50                            ; Object 0E - Sonic on the title screen
0000AF50                            ; ---------------------------------------------------------------------------
0000AF50                            
0000AF50                            Obj0E:					; XREF: Obj_Index
0000AF50 7000                       		moveq	#0,d0
0000AF52 1028 0024                  		move.b	$24(a0),d0
0000AF56 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AF5A 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AF5E                            ; ===========================================================================
0000AF5E 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AF60 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AF62 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AF64 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AF66                            ; ===========================================================================
0000AF66                            
0000AF66                            Obj0E_Main:				; XREF: Obj0E_Index
0000AF66 5428 0024                  		addq.b	#2,$24(a0)
0000AF6A 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AF70 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AF76 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AF7E 317C 2300 0002             		move.w	#$2300,2(a0)
0000AF84 117C 0001 0018             		move.b	#1,$18(a0)
0000AF8A 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AF90 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AF96 6100 0000                  		bsr.w	AnimateSprite
0000AF9A                            
0000AF9A                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AF9A 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AF9E 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFA0 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFA4 6000 0000                  		bra.w	DisplaySprite
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFA8 4E75                       		rts	
0000AFAA                            ; ===========================================================================
0000AFAA                            
0000AFAA                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFAA 5168 000A                  		subq.w	#8,$A(a0)
0000AFAE 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AFB4 6600                       		bne.s	Obj0E_Display
0000AFB6 5428 0024                  		addq.b	#2,$24(a0)
0000AFBA                            
0000AFBA                            Obj0E_Display:
0000AFBA 6000 0000                  		bra.w	DisplaySprite
0000AFBE                            ; ===========================================================================
0000AFBE 4E75                       		rts	
0000AFC0                            ; ===========================================================================
0000AFC0                            
0000AFC0                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AFC0 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFC6 6100 0000                  		bsr.w	AnimateSprite
0000AFCA 6000 0000                  		bra.w	DisplaySprite
0000AFCE                            ; ===========================================================================
0000AFCE 4E75                       		rts	
0000AFD0                            ; ===========================================================================
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0                            
0000AFD0                            Obj0F:					; XREF: Obj_Index
0000AFD0 7000                       		moveq	#0,d0
0000AFD2 1028 0024                  		move.b	$24(a0),d0
0000AFD6 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AFDA 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AFDE 6000 0000                  		bra.w	DisplaySprite
0000AFE2                            ; ===========================================================================
0000AFE2 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AFE4 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AFE6 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AFE8                            ; ===========================================================================
0000AFE8                            
0000AFE8                            Obj0F_Main:				; XREF: Obj0F_Index
0000AFE8 5428 0024                  		addq.b	#2,$24(a0)
0000AFEC 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AFF2 317C 0130 000A             		move.w	#$130,$A(a0)
0000AFF8 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B000 317C 0200 0002             		move.w	#$200,2(a0)
0000B006 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B00C 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B00E 5428 0024                  		addq.b	#2,$24(a0)
0000B012 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B018 6600                       		bne.s	locret_A6F8	; if not, branch
0000B01A 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B020 317C 0170 0008             		move.w	#$170,8(a0)
0000B026 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B02C                            
0000B02C                            locret_A6F8:				; XREF: Obj0F_Index
0000B02C 4E75                       		rts	
0000B02E                            ; ===========================================================================
0000B02E                            
0000B02E                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B02E 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B034 6000 0000                  		bra.w	AnimateSprite
0000B038                            ; ===========================================================================
0000B038                            Ani_obj0E:
0000B038                            	include "_anim\obj0E.asm"
0000B038                            ; ---------------------------------------------------------------------------
0000B038                            ; Animation script - Sonic on the title screen
0000B038                            ; ---------------------------------------------------------------------------
0000B038 0000                       		dc.w byte_A706-Ani_obj0E
0000B03A 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B046                            		even
0000B046                            		even
0000B046                            
0000B046                            Ani_obj0F:
0000B046                            	include "_anim\obj0F.asm"
0000B046                            ; ---------------------------------------------------------------------------
0000B046                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B046                            ; ---------------------------------------------------------------------------
0000B046 0000                       		dc.w byte_A714-Ani_obj0F
0000B048 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B04C                            		even
0000B04C                            		even
0000B04C                            
0000B04C                            ; ---------------------------------------------------------------------------
0000B04C                            ; Subroutine to	animate	a sprite using an animation script
0000B04C                            ; ---------------------------------------------------------------------------
0000B04C                            
0000B04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B04C                            
0000B04C                            
0000B04C                            AnimateSprite:
0000B04C 7000                       		moveq	#0,d0
0000B04E 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B052 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B056 6700                       		beq.s	Anim_Run	; if not, branch
0000B058 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B05C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B062 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B068                            
0000B068                            Anim_Run:
0000B068 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B06C 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B06E D040                       		add.w	d0,d0
0000B070 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B074 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B078 7200                       		moveq	#0,d1
0000B07A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B07E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B082 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B084                            
0000B084                            Anim_Next:
0000B084 1200                       		move.b	d0,d1
0000B086 0200 001F                  		andi.b	#$1F,d0
0000B08A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B08E 1028 0022                  		move.b	$22(a0),d0
0000B092 E719                       		rol.b	#3,d1
0000B094 B101                       		eor.b	d0,d1
0000B096 0201 0003                  		andi.b	#3,d1
0000B09A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0A0 8328 0001                  		or.b	d1,1(a0)
0000B0A4 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0A8                            
0000B0A8                            Anim_Wait:
0000B0A8 4E75                       		rts	
0000B0AA                            ; ===========================================================================
0000B0AA                            
0000B0AA                            Anim_End_FF:
0000B0AA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B0AC 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B0AE 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B0B4 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B0B8 60CA                       		bra.s	Anim_Next
0000B0BA                            ; ===========================================================================
0000B0BA                            
0000B0BA                            Anim_End_FE:
0000B0BA 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B0BC 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B0BE 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B0C2 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B0C6 9200                       		sub.b	d0,d1
0000B0C8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B0CC 60B6                       		bra.s	Anim_Next
0000B0CE                            ; ===========================================================================
0000B0CE                            
0000B0CE                            Anim_End_FD:
0000B0CE 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B0D0 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B0D2 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B0D8                            
0000B0D8                            Anim_End_FC:
0000B0D8 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B0DA 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B0DC 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B0E0                            
0000B0E0                            Anim_End_FB:
0000B0E0 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B0E2 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B0E4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0EA 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B0EE                            
0000B0EE                            Anim_End_FA:
0000B0EE 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B0F0 6600                       		bne.s	Anim_End	; if not, branch
0000B0F2 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B0F6                            
0000B0F6                            Anim_End:
0000B0F6 4E75                       		rts	
0000B0F8                            ; End of function AnimateSprite
0000B0F8                            
0000B0F8                            ; ===========================================================================
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            Map_obj0F:
0000B0F8                            	include "_maps\obj0F.asm"
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8 0000                       		dc.w byte_A7CD-Map_obj0F
0000B0FA 0000                       		dc.w byte_A7CC-Map_obj0F
0000B0FC 0000                       		dc.w byte_A7EB-Map_obj0F
0000B0FE 0000                       		dc.w byte_A882-Map_obj0F
0000B100 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B101 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B106 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B10B 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B110 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B115 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B11A 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B11F 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B120 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B125 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B12A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B12F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B134 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B139 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B13E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B143 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B148 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B14D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B152 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B157 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B15C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B161 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B166 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B16B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B170 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B175 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B17A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B17F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B184 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B189 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B18E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B193 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B198 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B19D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1AC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B6 01                         byte_A882:	dc.b 1			; "TM"
0000B1B7 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B1BC                            		even
0000B1BC                            		even
0000B1BC                            
0000B1BC                            ; ---------------------------------------------------------------------------
0000B1BC                            ; Sprite mappings - Sonic on the title screen
0000B1BC                            ; ---------------------------------------------------------------------------
0000B1BC                            Map_obj0E:
0000B1BC                            	include "_maps\obj0E.asm"
0000B1BC                            ; ================================================================================
0000B1BC                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B1BC                            ; ================================================================================
0000B1BC                            
0000B1BC                            DATAGKI0HYDQBXP:
0000B1BC 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B1C0 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B1C4 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B1C8 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B1CC 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B1CD 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B1D2 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B1D7 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B1DC 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B1E1 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B1E6 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B1EB 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B1F0 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B1F5 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B1F6 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B1FB 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B200 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B205 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B20A 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B20F 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B214 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B219 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B21E 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B223 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B228 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B22D 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B22E F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B233 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B238 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B23D 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B242 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B247 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B24C 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B251 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B256 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B25B 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B260 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B265 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B266 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B26B F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B270 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B275 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B27A 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B27F 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B284 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B289 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B28E 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B293 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B298 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B299 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B29E F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2A3 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2A8 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B2AD 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B2B2 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B2B7 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B2BC 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B2C1 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B2C6 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B2CB 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B2D0 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B2D5 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B2DA 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B2DF 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B2E4 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B2E9 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B2EA 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B2EF EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B2F4 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B2F9 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B2FE EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B303 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B308 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B30D EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B312 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B317 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B31C 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B321 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B322 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B327 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B32C 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B331 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B336 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B33B 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B340 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B345 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B34A 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B34F EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B354 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B359 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B35E EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B363 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B368 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B36D 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B36E EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B373 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B378 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B37D EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B382 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B387 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B38C EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B391 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B396 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B39B EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3A0 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3A5 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3AA EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B3AF 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B3B4 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B3BA 00                         	even
0000B3BA 00                         	even
0000B3BA                            
0000B3BA                            ; ===========================================================================
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            ; Object 2B - Chopper enemy (GHZ)
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            
0000B3BA                            Obj2B:					; XREF: Obj_Index
0000B3BA 7000                       		moveq	#0,d0
0000B3BC 1028 0024                  		move.b	$24(a0),d0
0000B3C0 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B3C4 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B3C8 6000 0000                  		bra.w	MarkObjGone
0000B3CC                            ; ===========================================================================
0000B3CC 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B3CE 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B3D0                            ; ===========================================================================
0000B3D0                            
0000B3D0                            Obj2B_Main:				; XREF: Obj2B_Index
0000B3D0 5428 0024                  		addq.b	#2,$24(a0)
0000B3D4 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B3DC 317C 047B 0002             		move.w	#$47B,2(a0)
0000B3E2 117C 0004 0001             		move.b	#4,1(a0)
0000B3E8 117C 0004 0018             		move.b	#4,$18(a0)
0000B3EE 117C 0009 0020             		move.b	#9,$20(a0)
0000B3F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000B3FA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B400 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B406                            
0000B406                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B406 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B40C 6100 FC3E                  		bsr.w	AnimateSprite
0000B410 6100 0000                  		bsr.w	SpeedToPos
0000B414 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B41A 3028 0030                  		move.w	$30(a0),d0
0000B41E B068 000C                  		cmp.w	$C(a0),d0
0000B422 6400                       		bcc.s	Obj2B_ChgAni
0000B424 3140 000C                  		move.w	d0,$C(a0)
0000B428 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B42E                            
0000B42E                            Obj2B_ChgAni:
0000B42E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B434 0440 00C0                  		subi.w	#$C0,d0
0000B438 B068 000C                  		cmp.w	$C(a0),d0
0000B43C 6400                       		bcc.s	locret_ABB6
0000B43E 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B444 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B448 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B44A 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B450                            
0000B450                            locret_ABB6:
0000B450 4E75                       		rts	
0000B452                            ; ===========================================================================
0000B452                            Ani_obj2B:
0000B452                            	include "_anim\obj2B.asm"
0000B452                            ; ---------------------------------------------------------------------------
0000B452                            ; Animation script - Chopper enemy
0000B452                            ; ---------------------------------------------------------------------------
0000B452 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B454 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B456 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B458 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B45C 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B460 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B464 00                         		even
0000B464 00                         		even
0000B464                            
0000B464                            ; ---------------------------------------------------------------------------
0000B464                            ; Sprite mappings - Chopper enemy (GHZ)
0000B464                            ; ---------------------------------------------------------------------------
0000B464                            Map_obj2B:
0000B464                            	include "_maps\obj2B.asm"
0000B464                            Map_1ff1:
0000B464 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B466 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B468 02                         Map_1ff1_4: 	dc.b $2
0000B469 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B46E 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B473 02                         Map_1ff1_F: 	dc.b $2
0000B474 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B479 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B47E                            	even
0000B47E                            	even
0000B47E                            
0000B47E                            ; ===========================================================================
0000B47E                            ; ---------------------------------------------------------------------------
0000B47E                            ; Object 2C - Jaws enemy (LZ)
0000B47E                            ; ---------------------------------------------------------------------------
0000B47E                            
0000B47E                            Obj2C:					; XREF: Obj_Index
0000B47E 7000                       		moveq	#0,d0
0000B480 1028 0024                  		move.b	$24(a0),d0
0000B484 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B488 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B48C                            ; ===========================================================================
0000B48C 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B48E 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B490                            ; ===========================================================================
0000B490                            
0000B490                            Obj2C_Main:				; XREF: Obj2C_Index
0000B490 5428 0024                  		addq.b	#2,$24(a0)
0000B494 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B49C 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4A2 0028 0004 0001             		ori.b	#4,1(a0)
0000B4A8 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4AE 117C 0004 0018             		move.b	#4,$18(a0)
0000B4B4 117C 0010 0019             		move.b	#$10,$19(a0)
0000B4BA 7000                       		moveq	#0,d0
0000B4BC 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B4C0 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B4C2 5340                       		subq.w	#1,d0
0000B4C4 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B4C8 3140 0032                  		move.w	d0,$32(a0)
0000B4CC 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B4D2 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B4D8 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B4DA 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B4DE                            
0000B4DE                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B4DE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B4E2 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B4E4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B4EA 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B4EE 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B4F4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B4FA                            
0000B4FA                            Obj2C_Animate:
0000B4FA 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B500 6100 FB4A                  		bsr.w	AnimateSprite
0000B504 6100 0000                  		bsr.w	SpeedToPos
0000B508 6000 0000                  		bra.w	MarkObjGone
0000B50C                            ; ===========================================================================
0000B50C                            Ani_obj2C:
0000B50C                            	include "_anim\obj2C.asm"
0000B50C                            ; ---------------------------------------------------------------------------
0000B50C                            ; Animation script - Jaws enemy
0000B50C                            ; ---------------------------------------------------------------------------
0000B50C 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B50E 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B514                            		even
0000B514                            		even
0000B514                            
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; Sprite mappings - Jaws enemy (LZ)
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            Map_obj2C:
0000B514                            	include "_maps\obj2C.asm"
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; Sprite mappings - Jaws enemy (LZ)
0000B514                            ; ---------------------------------------------------------------------------
0000B514 0000                       		dc.w byte_AC78-Map_obj2C
0000B516 0000                       		dc.w byte_AC83-Map_obj2C
0000B518 0000                       		dc.w byte_AC8E-Map_obj2C
0000B51A 0000                       		dc.w byte_AC99-Map_obj2C
0000B51C 02                         byte_AC78:	dc.b 2
0000B51D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B522 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B527 02                         byte_AC83:	dc.b 2
0000B528 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B52D F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B532 02                         byte_AC8E:	dc.b 2
0000B533 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B538 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B53D 02                         byte_AC99:	dc.b 2
0000B53E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B543 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B548                            		even
0000B548                            		even
0000B548                            
0000B548                            ; ===========================================================================
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            ; Object 2D - Burrobot enemy (LZ)
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            
0000B548                            Obj2D:					; XREF: Obj_Index
0000B548 7000                       		moveq	#0,d0
0000B54A 1028 0024                  		move.b	$24(a0),d0
0000B54E 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B552 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B556                            ; ===========================================================================
0000B556 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B558 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B55A                            ; ===========================================================================
0000B55A                            
0000B55A                            Obj2D_Main:				; XREF: Obj2D_Index
0000B55A 5428 0024                  		addq.b	#2,$24(a0)
0000B55E 117C 0013 0016             		move.b	#$13,$16(a0)
0000B564 117C 0008 0017             		move.b	#8,$17(a0)
0000B56A 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B572 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B578 0028 0004 0001             		ori.b	#4,1(a0)
0000B57E 117C 0004 0018             		move.b	#4,$18(a0)
0000B584 117C 0005 0020             		move.b	#5,$20(a0)
0000B58A 117C 000C 0019             		move.b	#$C,$19(a0)
0000B590 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B594 117C 0002 001C             		move.b	#2,$1C(a0)
0000B59A                            
0000B59A                            Obj2D_Action:				; XREF: Obj2D_Index
0000B59A 7000                       		moveq	#0,d0
0000B59C 1028 0025                  		move.b	$25(a0),d0
0000B5A0 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5A4 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5A8 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5AE 6100 FA9C                  		bsr.w	AnimateSprite
0000B5B2 6000 0000                  		bra.w	MarkObjGone
0000B5B6                            ; ===========================================================================
0000B5B6 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B5B8 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B5BA 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B5BC 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B5BE                            ; ===========================================================================
0000B5BE                            
0000B5BE                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B5BE 5368 0030                  		subq.w	#1,$30(a0)
0000B5C2 6A00                       		bpl.s	locret_AD42
0000B5C4 5428 0025                  		addq.b	#2,$25(a0)
0000B5C8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B5CE 317C 0080 0010             		move.w	#$80,$10(a0)
0000B5D4 117C 0001 001C             		move.b	#1,$1C(a0)
0000B5DA 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B5E0 6700                       		beq.s	locret_AD42
0000B5E2 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B5E6                            
0000B5E6                            locret_AD42:
0000B5E6 4E75                       		rts	
0000B5E8                            ; ===========================================================================
0000B5E8                            
0000B5E8                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B5E8 5368 0030                  		subq.w	#1,$30(a0)
0000B5EC 6B00                       		bmi.s	loc_AD84
0000B5EE 6100 0000                  		bsr.w	SpeedToPos
0000B5F2 0868 0000 0032             		bchg	#0,$32(a0)
0000B5F8 6600                       		bne.s	loc_AD78
0000B5FA 3628 0008                  		move.w	8(a0),d3
0000B5FE 0643 000C                  		addi.w	#$C,d3
0000B602 0828 0000 0022             		btst	#0,$22(a0)
0000B608 6600                       		bne.s	loc_AD6A
0000B60A 0443 0018                  		subi.w	#$18,d3
0000B60E                            
0000B60E                            loc_AD6A:
0000B60E 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B614 0C41 000C                  		cmpi.w	#$C,d1
0000B618 6C00                       		bge.s	loc_AD84
0000B61A 4E75                       		rts	
0000B61C                            ; ===========================================================================
0000B61C                            
0000B61C                            loc_AD78:				; XREF: Obj2D_Move
0000B61C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B622 D368 000C                  		add.w	d1,$C(a0)
0000B626 4E75                       		rts	
0000B628                            ; ===========================================================================
0000B628                            
0000B628                            loc_AD84:				; XREF: Obj2D_Move
0000B628 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B62E 6700                       		beq.s	loc_ADA4
0000B630 5528 0025                  		subq.b	#2,$25(a0)
0000B634 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B63A 317C 0000 0010             		move.w	#0,$10(a0)
0000B640 117C 0000 001C             		move.b	#0,$1C(a0)
0000B646 4E75                       		rts	
0000B648                            ; ===========================================================================
0000B648                            
0000B648                            loc_ADA4:
0000B648 5428 0025                  		addq.b	#2,$25(a0)
0000B64C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B652 117C 0002 001C             		move.b	#2,$1C(a0)
0000B658 4E75                       		rts	
0000B65A                            ; ===========================================================================
0000B65A                            
0000B65A                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B65A 6100 0000                  		bsr.w	SpeedToPos
0000B65E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B664 6B00                       		bmi.s	locret_ADF0
0000B666 117C 0003 001C             		move.b	#3,$1C(a0)
0000B66C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B672 4A41                       		tst.w	d1
0000B674 6A00                       		bpl.s	locret_ADF0
0000B676 D368 000C                  		add.w	d1,$C(a0)
0000B67A 317C 0000 0012             		move.w	#0,$12(a0)
0000B680 117C 0001 001C             		move.b	#1,$1C(a0)
0000B686 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B68C 5528 0025                  		subq.b	#2,$25(a0)
0000B690 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B694                            
0000B694                            locret_ADF0:
0000B694 4E75                       		rts	
0000B696                            ; ===========================================================================
0000B696                            
0000B696                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B696 343C 0060                  		move.w	#$60,d2
0000B69A 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B69E 6400                       		bcc.s	locret_AE20
0000B6A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6A4 9068 000C                  		sub.w	$C(a0),d0
0000B6A8 6400                       		bcc.s	locret_AE20
0000B6AA 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6AE 6500                       		bcs.s	locret_AE20
0000B6B0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B6B4 6600                       		bne.s	locret_AE20
0000B6B6 5528 0025                  		subq.b	#2,$25(a0)
0000B6BA 3141 0010                  		move.w	d1,$10(a0)
0000B6BE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6C4                            
0000B6C4                            locret_AE20:
0000B6C4 4E75                       		rts	
0000B6C6                            
0000B6C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6C6                            
0000B6C6                            
0000B6C6                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B6C6 323C 0080                  		move.w	#$80,d1
0000B6CA 08E8 0000 0022             		bset	#0,$22(a0)
0000B6D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000B6D4 9068 0008                  		sub.w	8(a0),d0
0000B6D8 6400                       		bcc.s	loc_AE40
0000B6DA 4440                       		neg.w	d0
0000B6DC 4441                       		neg.w	d1
0000B6DE 08A8 0000 0022             		bclr	#0,$22(a0)
0000B6E4                            
0000B6E4                            loc_AE40:
0000B6E4 B042                       		cmp.w	d2,d0
0000B6E6 4E75                       		rts	
0000B6E8                            ; End of function Obj2D_ChkSonic2
0000B6E8                            
0000B6E8                            ; ===========================================================================
0000B6E8                            Ani_obj2D:
0000B6E8                            	include "_anim\obj2D.asm"
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8                            ; Animation script - Burrobot enemy but craig
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B6EA 0000                       		dc.w byte_AE50-Ani_obj2D
0000B6EC 0000                       		dc.w byte_AE54-Ani_obj2D
0000B6EE 0000                       		dc.w byte_AE58-Ani_obj2D
0000B6F0 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B6F3 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B6F7 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B705 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B708                            		even
0000B708                            		even
0000B708                            
0000B708                            ; ---------------------------------------------------------------------------
0000B708                            ; Sprite mappings - Burrobot enemy (LZ)
0000B708                            ; ---------------------------------------------------------------------------
0000B708                            Map_obj2D:
0000B708                            	include "_maps\obj2D.asm"
0000B708                            Map_e3a3:
0000B708 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B70A 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B70C 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B70E 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B710 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B712 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B714 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B716 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B718 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B71A 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B71C 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B71E 02                         Map_e3a3_16: 	dc.b $2
0000B71F EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B724 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B729 02                         Map_e3a3_21: 	dc.b $2
0000B72A EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B72F 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B734 02                         Map_e3a3_2C: 	dc.b $2
0000B735 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B73A 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B73F 02                         Map_e3a3_37: 	dc.b $2
0000B740 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B745 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B74A 02                         Map_e3a3_42: 	dc.b $2
0000B74B EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B750 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B755 02                         Map_e3a3_4D: 	dc.b $2
0000B756 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B75B FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B760 02                         Map_e3a3_58: 	dc.b $2
0000B761 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B766 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B76B 02                         Map_e3a3_63: 	dc.b $2
0000B76C EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B771 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B776 02                         Map_e3a3_6E: 	dc.b $2
0000B777 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B77C FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B781 02                         Map_e3a3_79: 	dc.b $2
0000B782 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B787 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B78C 02                         Map_e3a3_84: 	dc.b $2
0000B78D EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B792 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B798 00                         	even
0000B798 00                         	even
0000B798                            
0000B798                            ; ===========================================================================
0000B798                            ; ---------------------------------------------------------------------------
0000B798                            ; Object 2F - large moving platforms (MZ)
0000B798                            ; ---------------------------------------------------------------------------
0000B798                            
0000B798                            Obj2F:					; XREF: Obj_Index
0000B798 7000                       		moveq	#0,d0
0000B79A 1028 0024                  		move.b	$24(a0),d0
0000B79E 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7A2 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7A6                            ; ===========================================================================
0000B7A6 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7A8 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7AA                            
0000B7AA 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B7AC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B7AE 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B7B0 0140                       		dc.b 1,	$40
0000B7B2 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B7B4 0220                       		dc.b 2,	$20
0000B7B6                            ; ===========================================================================
0000B7B6                            
0000B7B6                            Obj2F_Main:				; XREF: Obj2F_Index
0000B7B6 5428 0024                  		addq.b	#2,$24(a0)
0000B7BA 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B7C2 317C C000 0002             		move.w	#$C000,2(a0)
0000B7C8 117C 0004 0001             		move.b	#4,1(a0)
0000B7CE 117C 0005 0018             		move.b	#5,$18(a0)
0000B7D4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B7DA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B7E0 7000                       		moveq	#0,d0
0000B7E2 1028 0028                  		move.b	$28(a0),d0
0000B7E6 E448                       		lsr.w	#2,d0
0000B7E8 0240 001C                  		andi.w	#$1C,d0
0000B7EC 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B7F0 3019                       		move.w	(a1)+,d0
0000B7F2 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B7F6 214A 0030                  		move.l	a2,$30(a0)
0000B7FA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B7FE 1151 0019                  		move.b	(a1),$19(a0)
0000B802 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B808 117C 0040 0016             		move.b	#$40,$16(a0)
0000B80E 08E8 0004 0001             		bset	#4,1(a0)
0000B814                            
0000B814                            Obj2F_Action:				; XREF: Obj2F_Index
0000B814 6100 0000                  		bsr.w	Obj2F_Types
0000B818 4A28 0025                  		tst.b	$25(a0)
0000B81C 6700                       		beq.s	Obj2F_Solid
0000B81E 7200                       		moveq	#0,d1
0000B820 1228 0019                  		move.b	$19(a0),d1
0000B824 0641 000B                  		addi.w	#$B,d1
0000B828 6100 C556                  		bsr.w	ExitPlatform
0000B82C 0829 0003 0022             		btst	#3,$22(a1)
0000B832 6600 0000                  		bne.w	Obj2F_Slope
0000B836 4228 0025                  		clr.b	$25(a0)
0000B83A 6000                       		bra.s	Obj2F_Display
0000B83C                            ; ===========================================================================
0000B83C                            
0000B83C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B83C 7200                       		moveq	#0,d1
0000B83E 1228 0019                  		move.b	$19(a0),d1
0000B842 0641 000B                  		addi.w	#$B,d1
0000B846 2468 0030                  		movea.l	$30(a0),a2
0000B84A 3428 0008                  		move.w	8(a0),d2
0000B84E 6100 D520                  		bsr.w	SlopeObject2
0000B852 6000                       		bra.s	Obj2F_Display
0000B854                            ; ===========================================================================
0000B854                            
0000B854                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B854 7200                       		moveq	#0,d1
0000B856 1228 0019                  		move.b	$19(a0),d1
0000B85A 0641 000B                  		addi.w	#$B,d1
0000B85E 343C 0020                  		move.w	#$20,d2
0000B862 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B868 6600                       		bne.s	loc_AF8E
0000B86A 343C 0030                  		move.w	#$30,d2
0000B86E                            
0000B86E                            loc_AF8E:
0000B86E 2468 0030                  		movea.l	$30(a0),a2
0000B872 6100 0000                  		bsr.w	SolidObject2F
0000B876                            
0000B876                            Obj2F_Display:				; XREF: Obj2F_Action
0000B876 6100 0000                  		bsr.w	DisplaySprite
0000B87A 6000 0000                  		bra.w	Obj2F_ChkDel
0000B87E                            
0000B87E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B87E                            
0000B87E                            
0000B87E                            Obj2F_Types:				; XREF: Obj2F_Action
0000B87E 7000                       		moveq	#0,d0
0000B880 1028 0028                  		move.b	$28(a0),d0
0000B884 0240 0007                  		andi.w	#7,d0
0000B888 D040                       		add.w	d0,d0
0000B88A 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B88E 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B892                            ; End of function Obj2F_Types
0000B892                            
0000B892                            ; ===========================================================================
0000B892 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B894 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B896 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B898 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B89A 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B89C 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B89E                            ; ===========================================================================
0000B89E                            
0000B89E                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B89E 4E75                       		rts			; type 00 platform doesn't move
0000B8A0                            ; ===========================================================================
0000B8A0                            
0000B8A0                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8A0 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8A4 323C 0020                  		move.w	#$20,d1
0000B8A8 6000                       		bra.s	Obj2F_Move
0000B8AA                            ; ===========================================================================
0000B8AA                            
0000B8AA                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8AA 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B8AE 323C 0030                  		move.w	#$30,d1
0000B8B2 6000                       		bra.s	Obj2F_Move
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B8B4 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B8B8 323C 0040                  		move.w	#$40,d1
0000B8BC 6000                       		bra.s	Obj2F_Move
0000B8BE                            ; ===========================================================================
0000B8BE                            
0000B8BE                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B8BE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B8C2 323C 0060                  		move.w	#$60,d1
0000B8C6                            
0000B8C6                            Obj2F_Move:
0000B8C6 0828 0003 0028             		btst	#3,$28(a0)
0000B8CC 6700                       		beq.s	loc_AFF2
0000B8CE 4440                       		neg.w	d0
0000B8D0 D041                       		add.w	d1,d0
0000B8D2                            
0000B8D2                            loc_AFF2:
0000B8D2 3228 002C                  		move.w	$2C(a0),d1
0000B8D6 9240                       		sub.w	d0,d1
0000B8D8 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B8DC 4E75                       		rts	
0000B8DE                            ; ===========================================================================
0000B8DE                            
0000B8DE                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B8DE 1028 0034                  		move.b	$34(a0),d0
0000B8E2 4A28 0025                  		tst.b	$25(a0)
0000B8E6 6600                       		bne.s	loc_B010
0000B8E8 5500                       		subq.b	#2,d0
0000B8EA 6400                       		bcc.s	loc_B01C
0000B8EC 7000                       		moveq	#0,d0
0000B8EE 6000                       		bra.s	loc_B01C
0000B8F0                            ; ===========================================================================
0000B8F0                            
0000B8F0                            loc_B010:
0000B8F0 5800                       		addq.b	#4,d0
0000B8F2 0C00 0040                  		cmpi.b	#$40,d0
0000B8F6 6500                       		bcs.s	loc_B01C
0000B8F8 103C 0040                  		move.b	#$40,d0
0000B8FC                            
0000B8FC                            loc_B01C:
0000B8FC 1140 0034                  		move.b	d0,$34(a0)
0000B900 4EB9 0000 2D6C             		jsr	(CalcSine).l
0000B906 E848                       		lsr.w	#4,d0
0000B908 3200                       		move.w	d0,d1
0000B90A D068 002C                  		add.w	$2C(a0),d0
0000B90E 3140 000C                  		move.w	d0,$C(a0)
0000B912 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B918 6600                       		bne.s	loc_B07A
0000B91A 4A28 0035                  		tst.b	$35(a0)
0000B91E 6600                       		bne.s	loc_B07A
0000B920 117C 0001 0035             		move.b	#1,$35(a0)
0000B926 6100 0000                  		bsr.w	SingleObjLoad2
0000B92A 6600                       		bne.s	loc_B07A
0000B92C 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B930 3368 0008 0008             		move.w	8(a0),8(a1)
0000B936 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B93C 5069 002C                  		addq.w	#8,$2C(a1)
0000B940 5769 002C                  		subq.w	#3,$2C(a1)
0000B944 0469 0040 0008             		subi.w	#$40,8(a1)
0000B94A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B950 2348 0038                  		move.l	a0,$38(a1)
0000B954 2448                       		movea.l	a0,a2
0000B956 6100                       		bsr.s	sub_B09C
0000B958                            
0000B958                            loc_B07A:
0000B958 7400                       		moveq	#0,d2
0000B95A 45E8 0036                  		lea	$36(a0),a2
0000B95E 141A                       		move.b	(a2)+,d2
0000B960 5302                       		subq.b	#1,d2
0000B962 6500                       		bcs.s	locret_B09A
0000B964                            
0000B964                            loc_B086:
0000B964 7000                       		moveq	#0,d0
0000B966 101A                       		move.b	(a2)+,d0
0000B968 ED48                       		lsl.w	#6,d0
0000B96A 0640 D000                  		addi.w	#-$3000,d0
0000B96E 3240                       		movea.w	d0,a1
0000B970 3341 003C                  		move.w	d1,$3C(a1)
0000B974 51CA FFEE                  		dbf	d2,loc_B086
0000B978                            
0000B978                            locret_B09A:
0000B978 4E75                       		rts	
0000B97A                            
0000B97A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B97A                            
0000B97A                            
0000B97A                            sub_B09C:
0000B97A 45EA 0036                  		lea	$36(a2),a2
0000B97E 7000                       		moveq	#0,d0
0000B980 1012                       		move.b	(a2),d0
0000B982 5212                       		addq.b	#1,(a2)
0000B984 45F2 0001                  		lea	1(a2,d0.w),a2
0000B988 3009                       		move.w	a1,d0
0000B98A 0440 D000                  		subi.w	#-$3000,d0
0000B98E EC48                       		lsr.w	#6,d0
0000B990 0240 007F                  		andi.w	#$7F,d0
0000B994 1480                       		move.b	d0,(a2)
0000B996 4E75                       		rts	
0000B998                            ; End of function sub_B09C
0000B998                            
0000B998                            ; ===========================================================================
0000B998                            
0000B998                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B998 4A28 0035                  		tst.b	$35(a0)
0000B99C 6700                       		beq.s	loc_B0C6
0000B99E 4A28 0001                  		tst.b	1(a0)
0000B9A2 6A00                       		bpl.s	Obj2F_DelFlames
0000B9A4                            
0000B9A4                            loc_B0C6:
0000B9A4 3028 002A                  		move.w	$2A(a0),d0
0000B9A8 0240 FF80                  		andi.w	#$FF80,d0
0000B9AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9B0 0441 0080                  		subi.w	#$80,d1
0000B9B4 0241 FF80                  		andi.w	#$FF80,d1
0000B9B8 9041                       		sub.w	d1,d0
0000B9BA 0C40 0280                  		cmpi.w	#$280,d0
0000B9BE 6200 0000                  		bhi.w	DeleteObject
0000B9C2 4E75                       		rts	
0000B9C4                            ; ===========================================================================
0000B9C4                            
0000B9C4                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B9C4 7400                       		moveq	#0,d2
0000B9C6                            
0000B9C6                            loc_B0E8:
0000B9C6 45E8 0036                  		lea	$36(a0),a2
0000B9CA 1412                       		move.b	(a2),d2
0000B9CC 421A                       		clr.b	(a2)+
0000B9CE 5302                       		subq.b	#1,d2
0000B9D0 6500                       		bcs.s	locret_B116
0000B9D2                            
0000B9D2                            loc_B0F4:
0000B9D2 7000                       		moveq	#0,d0
0000B9D4 1012                       		move.b	(a2),d0
0000B9D6 421A                       		clr.b	(a2)+
0000B9D8 ED48                       		lsl.w	#6,d0
0000B9DA 0640 D000                  		addi.w	#-$3000,d0
0000B9DE 3240                       		movea.w	d0,a1
0000B9E0 6100 0000                  		bsr.w	DeleteObject2
0000B9E4 51CA FFEC                  		dbf	d2,loc_B0F4
0000B9E8 117C 0000 0035             		move.b	#0,$35(a0)
0000B9EE 117C 0000 0034             		move.b	#0,$34(a0)
0000B9F4                            
0000B9F4                            locret_B116:
0000B9F4 4E75                       		rts	
0000B9F6                            ; ===========================================================================
0000B9F6                            ; ---------------------------------------------------------------------------
0000B9F6                            ; Collision data for large moving platforms (MZ)
0000B9F6                            ; ---------------------------------------------------------------------------
0000B9F6                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA42                            		even
0000BA42                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BA6E                            		even
0000BA6E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BABA                            		even
0000BABA                            ; ===========================================================================
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BABA                            ; (appears when	you walk on sinking platforms)
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA                            
0000BABA                            Obj35:					; XREF: Obj_Index
0000BABA 7000                       		moveq	#0,d0
0000BABC 1028 0024                  		move.b	$24(a0),d0
0000BAC0 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BAC4 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BAC8                            ; ===========================================================================
0000BAC8 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BACA 0000                       		dc.w loc_B238-Obj35_Index
0000BACC 0000                       		dc.w Obj35_Move-Obj35_Index
0000BACE                            ; ===========================================================================
0000BACE                            
0000BACE                            Obj35_Main:				; XREF: Obj35_Index
0000BACE 5428 0024                  		addq.b	#2,$24(a0)
0000BAD2 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BADA 317C 0345 0002             		move.w	#$345,2(a0)
0000BAE0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BAE6 117C 0004 0001             		move.b	#4,1(a0)
0000BAEC 117C 0001 0018             		move.b	#1,$18(a0)
0000BAF2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BAF8 117C 0008 0019             		move.b	#8,$19(a0)
0000BAFE 303C 00C8                  		move.w	#$C8,d0
0000BB02 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB08 4A28 0028                  		tst.b	$28(a0)
0000BB0C 6700                       		beq.s	loc_B238
0000BB0E 5428 0024                  		addq.b	#2,$24(a0)
0000BB12 6000 0000                  		bra.w	Obj35_Move
0000BB16                            ; ===========================================================================
0000BB16                            
0000BB16                            loc_B238:				; XREF: Obj35_Index
0000BB16 2268 0030                  		movea.l	$30(a0),a1
0000BB1A 3228 0008                  		move.w	8(a0),d1
0000BB1E 9268 002A                  		sub.w	$2A(a0),d1
0000BB22 0641 000C                  		addi.w	#$C,d1
0000BB26 3001                       		move.w	d1,d0
0000BB28 E248                       		lsr.w	#1,d0
0000BB2A 1031 0000                  		move.b	(a1,d0.w),d0
0000BB2E 4440                       		neg.w	d0
0000BB30 D068 002C                  		add.w	$2C(a0),d0
0000BB34 3400                       		move.w	d0,d2
0000BB36 D068 003C                  		add.w	$3C(a0),d0
0000BB3A 3140 000C                  		move.w	d0,$C(a0)
0000BB3E 0C41 0084                  		cmpi.w	#$84,d1
0000BB42 6400                       		bcc.s	loc_B2B0
0000BB44 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB4C 0C41 0080                  		cmpi.w	#$80,d1
0000BB50 6400                       		bcc.s	loc_B2B0
0000BB52 2028 0008                  		move.l	8(a0),d0
0000BB56 0680 0008 0000             		addi.l	#$80000,d0
0000BB5C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BB62 6600                       		bne.s	loc_B2B0
0000BB64 6100 0000                  		bsr.w	SingleObjLoad2
0000BB68 6600                       		bne.s	loc_B2B0
0000BB6A 12BC 0035                  		move.b	#$35,0(a1)
0000BB6E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB74 3342 002C                  		move.w	d2,$2C(a1)
0000BB78 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BB7E 137C 0001 0028             		move.b	#1,$28(a1)
0000BB84 2468 0038                  		movea.l	$38(a0),a2
0000BB88 6100 FDF0                  		bsr.w	sub_B09C
0000BB8C                            
0000BB8C                            loc_B2B0:
0000BB8C 6000                       		bra.s	Obj35_Animate
0000BB8E                            ; ===========================================================================
0000BB8E                            
0000BB8E                            Obj35_Move:				; XREF: Obj35_Index
0000BB8E 3028 002C                  		move.w	$2C(a0),d0
0000BB92 D068 003C                  		add.w	$3C(a0),d0
0000BB96 3140 000C                  		move.w	d0,$C(a0)
0000BB9A                            
0000BB9A                            Obj35_Animate:				; XREF: loc_B238
0000BB9A 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBA0 6100 F4AA                  		bsr.w	AnimateSprite
0000BBA4 6000 0000                  		bra.w	DisplaySprite
0000BBA8                            ; ===========================================================================
0000BBA8                            Ani_obj35:
0000BBA8                            	include "_anim\obj35.asm"
0000BBA8                            ; ---------------------------------------------------------------------------
0000BBA8                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBA8                            ; ---------------------------------------------------------------------------
0000BBA8 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBAA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BBB0                            		even
0000BBB0                            		even
0000BBB0                            
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0                            ; Sprite mappings - large moving platforms (MZ)
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0                            Map_obj2F:
0000BBB0                            	include "_maps\obj2F.asm"
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0                            ; Sprite mappings - large moving platforms (MZ)
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0 0000                       		dc.w byte_B2DA-Map_obj2F
0000BBB2 0000                       		dc.w byte_B31C-Map_obj2F
0000BBB4 0000                       		dc.w byte_B34F-Map_obj2F
0000BBB6 0D                         byte_B2DA:	dc.b $D
0000BBB7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BBBC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BBC1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BBC6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BBCB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BBD0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BBD5 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BBDA D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BBDF F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BBE4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BBE9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BBEE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BBF3 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BBF8 0A                         byte_B31C:	dc.b $A
0000BBF9 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BBFE F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC03 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC08 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC0D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC12 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC17 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC1C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC21 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC26 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC2B 06                         byte_B34F:	dc.b 6
0000BC2C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC31 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC36 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC3B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC40 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC45 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC4A                            		even
0000BC4A                            		even
0000BC4A                            
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            Map_obj14:
0000BC4A                            	include "_maps\obj14.asm"
0000BC4A                            ; --------------------------------------------------------------------------------
0000BC4A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC4A                            ; --------------------------------------------------------------------------------
0000BC4A                            
0000BC4A                            SME_C6wT7:	
0000BC4A 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BC4E 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BC52 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BC56 01                         SME_C6wT7_C:	dc.b 1	
0000BC57 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC5C 01                         SME_C6wT7_12:	dc.b 1	
0000BC5D E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC62 02                         SME_C6wT7_18:	dc.b 2	
0000BC63 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BC68 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BC6D 01                         SME_C6wT7_23:	dc.b 1	
0000BC6E F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC73 01                         SME_C6wT7_29:	dc.b 1	
0000BC74 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC79 01                         SME_C6wT7_2F:	dc.b 1	
0000BC7A F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BC80 00                         		even
0000BC80 00                         		even
0000BC80                            
0000BC80                            ; ===========================================================================
0000BC80                            ; ---------------------------------------------------------------------------
0000BC80                            ; Object 30 - large green glassy blocks	(MZ)
0000BC80                            ; ---------------------------------------------------------------------------
0000BC80                            
0000BC80                            Obj30:					; XREF: Obj_Index
0000BC80 7000                       		moveq	#0,d0
0000BC82 1028 0024                  		move.b	$24(a0),d0
0000BC86 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BC8A 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BC8E 3028 0008                  		move.w	8(a0),d0
0000BC92 0240 FF80                  		andi.w	#$FF80,d0
0000BC96 3238 F700                  		move.w	($FFFFF700).w,d1
0000BC9A 0441 0080                  		subi.w	#$80,d1
0000BC9E 0241 FF80                  		andi.w	#$FF80,d1
0000BCA2 9041                       		sub.w	d1,d0
0000BCA4 0C40 0280                  		cmpi.w	#$280,d0
0000BCA8 6200 0000                  		bhi.w	Obj30_Delete
0000BCAC 6000 0000                  		bra.w	DisplaySprite
0000BCB0                            ; ===========================================================================
0000BCB0                            
0000BCB0                            Obj30_Delete:
0000BCB0 6000 0000                  		bra.w	DeleteObject
0000BCB4                            ; ===========================================================================
0000BCB4 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BCB6 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BCB8 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BCBA 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BCBC 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BCBE                            
0000BCBE 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BCC1 0400 01                    		dc.b 4,	0, 1
0000BCC4 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BCC7 0800 01                    		dc.b 8,	0, 1
0000BCCA                            ; ===========================================================================
0000BCCA                            
0000BCCA                            Obj30_Main:				; XREF: Obj30_Index
0000BCCA 45F9 0000 BCBE             		lea	(Obj30_Vars1).l,a2
0000BCD0 7201                       		moveq	#1,d1
0000BCD2 117C 0048 0016             		move.b	#$48,$16(a0)
0000BCD8 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BCDE 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BCE0 45F9 0000 BCC4             		lea	(Obj30_Vars2).l,a2
0000BCE6 7201                       		moveq	#1,d1
0000BCE8 117C 0038 0016             		move.b	#$38,$16(a0)
0000BCEE                            
0000BCEE                            loc_B40C:
0000BCEE 2248                       		movea.l	a0,a1
0000BCF0 6000                       		bra.s	Obj30_Load	; load main object
0000BCF2                            ; ===========================================================================
0000BCF2                            
0000BCF2                            Obj30_Loop:
0000BCF2 6100 0000                  		bsr.w	SingleObjLoad2
0000BCF6 6600                       		bne.s	loc_B480
0000BCF8                            
0000BCF8                            Obj30_Load:				; XREF: Obj30_Main
0000BCF8 135A 0024                  		move.b	(a2)+,$24(a1)
0000BCFC 12BC 0030                  		move.b	#$30,0(a1)
0000BD00 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD06 101A                       		move.b	(a2)+,d0
0000BD08 4880                       		ext.w	d0
0000BD0A D068 000C                  		add.w	$C(a0),d0
0000BD0E 3340 000C                  		move.w	d0,$C(a1)
0000BD12 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD1A 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD20 137C 0004 0001             		move.b	#4,1(a1)
0000BD26 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD2C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD32 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD38 137C 0004 0018             		move.b	#4,$18(a1)
0000BD3E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD42 2348 003C                  		move.l	a0,$3C(a1)
0000BD46 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD4A                            
0000BD4A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD50 137C 0003 0018             		move.b	#3,$18(a1)
0000BD56 5029 0028                  		addq.b	#8,$28(a1)
0000BD5A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BD60                            
0000BD60                            loc_B480:
0000BD60 317C 0090 0032             		move.w	#$90,$32(a0)
0000BD66 08E8 0004 0001             		bset	#4,1(a0)
0000BD6C                            
0000BD6C                            Obj30_Block012:				; XREF: Obj30_Index
0000BD6C 6100 0000                  		bsr.w	Obj30_Types
0000BD70 323C 002B                  		move.w	#$2B,d1
0000BD74 343C 0048                  		move.w	#$48,d2
0000BD78 363C 0049                  		move.w	#$49,d3
0000BD7C 3828 0008                  		move.w	8(a0),d4
0000BD80 6000 0000                  		bra.w	SolidObject
0000BD84                            ; ===========================================================================
0000BD84                            
0000BD84                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BD84 2268 003C                  		movea.l	$3C(a0),a1
0000BD88 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BD8E 6000 0000                  		bra.w	Obj30_Types
0000BD92                            ; ===========================================================================
0000BD92                            
0000BD92                            Obj30_Block34:				; XREF: Obj30_Index
0000BD92 6100 0000                  		bsr.w	Obj30_Types
0000BD96 323C 002B                  		move.w	#$2B,d1
0000BD9A 343C 0038                  		move.w	#$38,d2
0000BD9E 363C 0039                  		move.w	#$39,d3
0000BDA2 3828 0008                  		move.w	8(a0),d4
0000BDA6 6000 0000                  		bra.w	SolidObject
0000BDAA                            ; ===========================================================================
0000BDAA                            
0000BDAA                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDAA 2268 003C                  		movea.l	$3C(a0),a1
0000BDAE 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDB4 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BDBA 6000 0002                  		bra.w	*+4
0000BDBE                            
0000BDBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDBE                            
0000BDBE                            
0000BDBE                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BDBE 7000                       		moveq	#0,d0
0000BDC0 1028 0028                  		move.b	$28(a0),d0
0000BDC4 0240 0007                  		andi.w	#7,d0
0000BDC8 D040                       		add.w	d0,d0
0000BDCA 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BDCE 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BDD2                            ; End of function Obj30_Types
0000BDD2                            
0000BDD2                            ; ===========================================================================
0000BDD2 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BDD4 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BDD6 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BDD8 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BDDA 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BDDC                            ; ===========================================================================
0000BDDC                            
0000BDDC                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BDDC 4E75                       		rts	
0000BDDE                            ; ===========================================================================
0000BDDE                            
0000BDDE                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BDDE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDE2 323C 0040                  		move.w	#$40,d1
0000BDE6 6000                       		bra.s	loc_B514
0000BDE8                            ; ===========================================================================
0000BDE8                            
0000BDE8                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BDE8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDEC 323C 0040                  		move.w	#$40,d1
0000BDF0 4440                       		neg.w	d0
0000BDF2 D041                       		add.w	d1,d0
0000BDF4                            
0000BDF4                            loc_B514:				; XREF: Obj30_Type01
0000BDF4 0828 0003 0028             		btst	#3,$28(a0)
0000BDFA 6700                       		beq.s	loc_B526
0000BDFC 4440                       		neg.w	d0
0000BDFE D041                       		add.w	d1,d0
0000BE00 E208                       		lsr.b	#1,d0
0000BE02 0640 0020                  		addi.w	#$20,d0
0000BE06                            
0000BE06                            loc_B526:
0000BE06 6000 0000                  		bra.w	loc_B5EE
0000BE0A                            ; ===========================================================================
0000BE0A                            
0000BE0A                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE0A 0828 0003 0028             		btst	#3,$28(a0)
0000BE10 6700                       		beq.s	loc_B53E
0000BE12 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE16 0440 0010                  		subi.w	#$10,d0
0000BE1A 6000 0000                  		bra.w	loc_B5EE
0000BE1E                            ; ===========================================================================
0000BE1E                            
0000BE1E                            loc_B53E:
0000BE1E 0828 0003 0022             		btst	#3,$22(a0)
0000BE24 6600                       		bne.s	loc_B54E
0000BE26 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE2C 6000                       		bra.s	loc_B582
0000BE2E                            ; ===========================================================================
0000BE2E                            
0000BE2E                            loc_B54E:
0000BE2E 4A28 0034                  		tst.b	$34(a0)
0000BE32 6600                       		bne.s	loc_B582
0000BE34 117C 0001 0034             		move.b	#1,$34(a0)
0000BE3A 08E8 0000 0035             		bset	#0,$35(a0)
0000BE40 6700                       		beq.s	loc_B582
0000BE42 08E8 0007 0034             		bset	#7,$34(a0)
0000BE48 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE4E 117C 000A 0038             		move.b	#$A,$38(a0)
0000BE54 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BE5A 6600                       		bne.s	loc_B582
0000BE5C 317C 0040 0036             		move.w	#$40,$36(a0)
0000BE62                            
0000BE62                            loc_B582:
0000BE62 4A28 0034                  		tst.b	$34(a0)
0000BE66 6A00                       		bpl.s	loc_B5AA
0000BE68 4A28 0038                  		tst.b	$38(a0)
0000BE6C 6700                       		beq.s	loc_B594
0000BE6E 5328 0038                  		subq.b	#1,$38(a0)
0000BE72 6600                       		bne.s	loc_B5AA
0000BE74                            
0000BE74                            loc_B594:
0000BE74 4A68 0032                  		tst.w	$32(a0)
0000BE78 6700                       		beq.s	loc_B5A4
0000BE7A 5368 0032                  		subq.w	#1,$32(a0)
0000BE7E 5368 0036                  		subq.w	#1,$36(a0)
0000BE82 6600                       		bne.s	loc_B5AA
0000BE84                            
0000BE84                            loc_B5A4:
0000BE84 08A8 0007 0034             		bclr	#7,$34(a0)
0000BE8A                            
0000BE8A                            loc_B5AA:
0000BE8A 3028 0032                  		move.w	$32(a0),d0
0000BE8E 6000                       		bra.s	loc_B5EE
0000BE90                            ; ===========================================================================
0000BE90                            
0000BE90                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BE90 0828 0003 0028             		btst	#3,$28(a0)
0000BE96 6700                       		beq.s	Obj30_ChkSwitch
0000BE98 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE9C 0440 0010                  		subi.w	#$10,d0
0000BEA0 6000                       		bra.s	loc_B5EE
0000BEA2                            ; ===========================================================================
0000BEA2                            
0000BEA2                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEA2 4A28 0034                  		tst.b	$34(a0)
0000BEA6 6600                       		bne.s	loc_B5E0
0000BEA8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BEAC 7000                       		moveq	#0,d0
0000BEAE 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BEB2 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BEB4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BEB8 6700                       		beq.s	loc_B5EA	; if not, branch
0000BEBA 117C 0001 0034             		move.b	#1,$34(a0)
0000BEC0                            
0000BEC0                            loc_B5E0:
0000BEC0 4A68 0032                  		tst.w	$32(a0)
0000BEC4 6700                       		beq.s	loc_B5EA
0000BEC6 5568 0032                  		subq.w	#2,$32(a0)
0000BECA                            
0000BECA                            loc_B5EA:
0000BECA 3028 0032                  		move.w	$32(a0),d0
0000BECE                            
0000BECE                            loc_B5EE:
0000BECE 3228 0030                  		move.w	$30(a0),d1
0000BED2 9240                       		sub.w	d0,d1
0000BED4 3141 000C                  		move.w	d1,$C(a0)
0000BED8 4E75                       		rts	
0000BEDA                            ; ===========================================================================
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA                            Map_obj30:
0000BEDA                            	include "_maps\obj30.asm"
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA 0000                       		dc.w byte_B600-Map_obj30
0000BEDC 0000                       		dc.w byte_B63D-Map_obj30
0000BEDE 0000                       		dc.w byte_B648-Map_obj30
0000BEE0 0C                         byte_B600:	dc.b $C
0000BEE1 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BEE6 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BEEB C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BEF0 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BEF5 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BEFA E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BEFF 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF04 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF09 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF0E 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF13 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF18 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF1D 02                         byte_B63D:	dc.b 2
0000BF1E 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF23 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF28 0A                         byte_B648:	dc.b $A
0000BF29 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF2E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF33 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF38 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF3D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF42 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF47 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BF4C 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BF51 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BF56 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BF5C 00                         		even
0000BF5C 00                         		even
0000BF5C                            
0000BF5C                            ; ===========================================================================
0000BF5C                            ; ---------------------------------------------------------------------------
0000BF5C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BF5C                            ; ---------------------------------------------------------------------------
0000BF5C                            
0000BF5C                            Obj31:					; XREF: Obj_Index
0000BF5C 7000                       		moveq	#0,d0
0000BF5E 1028 0024                  		move.b	$24(a0),d0
0000BF62 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BF66 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BF6A                            ; ===========================================================================
0000BF6A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BF6C 0000                       		dc.w loc_B798-Obj31_Index
0000BF6E 0000                       		dc.w loc_B7FE-Obj31_Index
0000BF70 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BF72 0000                       		dc.w loc_B7E2-Obj31_Index
0000BF74                            
0000BF74 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BF76 0100                       		dc.b 1,	0
0000BF78                            
0000BF78 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BF7B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BF7E 08CC 03                    		dc.b 8,	$CC, 3
0000BF81 06F0 02                    		dc.b 6,	$F0, 2
0000BF84                            
0000BF84 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BF88 5000 7800                  		dc.w $5000, $7800
0000BF8C 3800 5800                  		dc.w $3800, $5800
0000BF90 B800                       		dc.w $B800
0000BF92                            ; ===========================================================================
0000BF92                            
0000BF92                            Obj31_Main:				; XREF: Obj31_Index
0000BF92 7000                       		moveq	#0,d0
0000BF94 1028 0028                  		move.b	$28(a0),d0
0000BF98 6A00                       		bpl.s	loc_B6CE
0000BF9A 0240 007F                  		andi.w	#$7F,d0
0000BF9E D040                       		add.w	d0,d0
0000BFA0 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFA4 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFA8 101A                       		move.b	(a2)+,d0
0000BFAA 1140 0028                  		move.b	d0,$28(a0)
0000BFAE                            
0000BFAE                            loc_B6CE:
0000BFAE 0200 000F                  		andi.b	#$F,d0
0000BFB2 D040                       		add.w	d0,d0
0000BFB4 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BFB8 4A40                       		tst.w	d0
0000BFBA 6600                       		bne.s	loc_B6E0
0000BFBC 3142 0032                  		move.w	d2,$32(a0)
0000BFC0                            
0000BFC0                            loc_B6E0:
0000BFC0 45F9 0000 BF78             		lea	(Obj31_Var).l,a2
0000BFC6 2248                       		movea.l	a0,a1
0000BFC8 7203                       		moveq	#3,d1
0000BFCA 6000                       		bra.s	Obj31_MakeStomper
0000BFCC                            ; ===========================================================================
0000BFCC                            
0000BFCC                            Obj31_Loop:
0000BFCC 6100 0000                  		bsr.w	SingleObjLoad2
0000BFD0 6600 0000                  		bne.w	Obj31_SetSize
0000BFD4                            
0000BFD4                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BFD4 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFD8 12BC 0031                  		move.b	#$31,0(a1)
0000BFDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BFE2 101A                       		move.b	(a2)+,d0
0000BFE4 4880                       		ext.w	d0
0000BFE6 D068 000C                  		add.w	$C(a0),d0
0000BFEA 3340 000C                  		move.w	d0,$C(a1)
0000BFEE 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BFF6 337C 0300 0002             		move.w	#$300,2(a1)
0000BFFC 137C 0004 0001             		move.b	#4,1(a1)
0000C002 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C008 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C00E 137C 0010 0019             		move.b	#$10,$19(a1)
0000C014 3342 0034                  		move.w	d2,$34(a1)
0000C018 137C 0004 0018             		move.b	#4,$18(a1)
0000C01E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C022 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C028 6600                       		bne.s	loc_B76A
0000C02A 5341                       		subq.w	#1,d1
0000C02C 1028 0028                  		move.b	$28(a0),d0
0000C030 0240 00F0                  		andi.w	#$F0,d0
0000C034 0C40 0020                  		cmpi.w	#$20,d0
0000C038 679A                       		beq.s	Obj31_MakeStomper
0000C03A 137C 0038 0019             		move.b	#$38,$19(a1)
0000C040 137C 0090 0020             		move.b	#$90,$20(a1)
0000C046 5241                       		addq.w	#1,d1
0000C048                            
0000C048                            loc_B76A:
0000C048 2348 003C                  		move.l	a0,$3C(a1)
0000C04C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C050                            
0000C050 137C 0003 0018             		move.b	#3,$18(a1)
0000C056                            
0000C056                            Obj31_SetSize:
0000C056 7000                       		moveq	#0,d0
0000C058 1028 0028                  		move.b	$28(a0),d0
0000C05C E648                       		lsr.w	#3,d0
0000C05E 0200 000E                  		andi.b	#$E,d0
0000C062 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C066 115A 0019                  		move.b	(a2)+,$19(a0)
0000C06A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C06E 6000                       		bra.s	loc_B798
0000C070                            ; ===========================================================================
0000C070 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C072 3009                       		dc.b $30, 9
0000C074 100A                       		dc.b $10, $A
0000C076                            ; ===========================================================================
0000C076                            
0000C076                            loc_B798:				; XREF: Obj31_Index
0000C076 6100 0000                  		bsr.w	Obj31_Types
0000C07A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C080 7200                       		moveq	#0,d1
0000C082 1228 0019                  		move.b	$19(a0),d1
0000C086 0641 000B                  		addi.w	#$B,d1
0000C08A 343C 000C                  		move.w	#$C,d2
0000C08E 363C 000D                  		move.w	#$D,d3
0000C092 3828 0008                  		move.w	8(a0),d4
0000C096 6100 0000                  		bsr.w	SolidObject
0000C09A 0828 0003 0022             		btst	#3,$22(a0)
0000C0A0 6700                       		beq.s	Obj31_Display
0000C0A2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0A8 6400                       		bcc.s	Obj31_Display
0000C0AA 2448                       		movea.l	a0,a2
0000C0AC 41F8 D000                  		lea	($FFFFD000).w,a0
0000C0B0 4EB9 0000 0000             		jsr	KillSonic
0000C0B6 204A                       		movea.l	a2,a0
0000C0B8                            
0000C0B8                            Obj31_Display:
0000C0B8 6100 0000                  		bsr.w	DisplaySprite
0000C0BC 6000 0000                  		bra.w	Obj31_ChkDel
0000C0C0                            ; ===========================================================================
0000C0C0                            
0000C0C0                            loc_B7E2:				; XREF: Obj31_Index
0000C0C0 117C 0080 0016             		move.b	#$80,$16(a0)
0000C0C6 08E8 0004 0001             		bset	#4,1(a0)
0000C0CC 2268 003C                  		movea.l	$3C(a0),a1
0000C0D0 1029 0032                  		move.b	$32(a1),d0
0000C0D4 EA08                       		lsr.b	#5,d0
0000C0D6 5600                       		addq.b	#3,d0
0000C0D8 1140 001A                  		move.b	d0,$1A(a0)
0000C0DC                            
0000C0DC                            loc_B7FE:				; XREF: Obj31_Index
0000C0DC 2268 003C                  		movea.l	$3C(a0),a1
0000C0E0 7000                       		moveq	#0,d0
0000C0E2 1029 0032                  		move.b	$32(a1),d0
0000C0E6 D068 0030                  		add.w	$30(a0),d0
0000C0EA 3140 000C                  		move.w	d0,$C(a0)
0000C0EE                            
0000C0EE                            Obj31_Display2:				; XREF: Obj31_Index
0000C0EE 6100 0000                  		bsr.w	DisplaySprite
0000C0F2                            
0000C0F2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C0F2 3028 0008                  		move.w	8(a0),d0
0000C0F6 0240 FF80                  		andi.w	#$FF80,d0
0000C0FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0FE 0441 0080                  		subi.w	#$80,d1
0000C102 0241 FF80                  		andi.w	#$FF80,d1
0000C106 9041                       		sub.w	d1,d0
0000C108 0C40 0280                  		cmpi.w	#$280,d0
0000C10C 6200 0000                  		bhi.w	DeleteObject
0000C110 4E75                       		rts	
0000C112                            ; ===========================================================================
0000C112                            
0000C112                            Obj31_Types:				; XREF: loc_B798
0000C112 1028 0028                  		move.b	$28(a0),d0
0000C116 0240 000F                  		andi.w	#$F,d0
0000C11A D040                       		add.w	d0,d0
0000C11C 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C120 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C124                            ; ===========================================================================
0000C124 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C126 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C128 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C12A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C12C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C12E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C130 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C132                            ; ===========================================================================
0000C132                            
0000C132                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C132 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C136 7000                       		moveq	#0,d0
0000C138 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C13C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C140 6700                       		beq.s	loc_B8A8	; if not, branch
0000C142 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C146 6A00                       		bpl.s	loc_B872
0000C148 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C14E 6700                       		beq.s	loc_B8A0
0000C150                            
0000C150                            loc_B872:
0000C150 4A68 0032                  		tst.w	$32(a0)
0000C154 6700                       		beq.s	loc_B8A0
0000C156 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C15A 0200 000F                  		andi.b	#$F,d0
0000C15E 6600                       		bne.s	loc_B892
0000C160 4A28 0001                  		tst.b	1(a0)
0000C164 6A00                       		bpl.s	loc_B892
0000C166 303C 00C7                  		move.w	#$C7,d0
0000C16A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C170                            
0000C170                            loc_B892:
0000C170 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C176 6400                       		bcc.s	Obj31_Restart
0000C178 317C 0000 0032             		move.w	#0,$32(a0)
0000C17E                            
0000C17E                            loc_B8A0:
0000C17E 317C 0000 0012             		move.w	#0,$12(a0)
0000C184 6000                       		bra.s	Obj31_Restart
0000C186                            ; ===========================================================================
0000C186                            
0000C186                            loc_B8A8:				; XREF: Obj31_Type00
0000C186 3228 0034                  		move.w	$34(a0),d1
0000C18A B268 0032                  		cmp.w	$32(a0),d1
0000C18E 6700                       		beq.s	Obj31_Restart
0000C190 3028 0012                  		move.w	$12(a0),d0
0000C194 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C19A D168 0032                  		add.w	d0,$32(a0)
0000C19E B268 0032                  		cmp.w	$32(a0),d1
0000C1A2 6200                       		bhi.s	Obj31_Restart
0000C1A4 3141 0032                  		move.w	d1,$32(a0)
0000C1A8 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C1AE 4A28 0001                  		tst.b	1(a0)
0000C1B2 6A00                       		bpl.s	Obj31_Restart
0000C1B4 303C 00BD                  		move.w	#$BD,d0
0000C1B8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C1BE                            
0000C1BE                            Obj31_Restart:
0000C1BE 7000                       		moveq	#0,d0
0000C1C0 1028 0032                  		move.b	$32(a0),d0
0000C1C4 D068 0030                  		add.w	$30(a0),d0
0000C1C8 3140 000C                  		move.w	d0,$C(a0)
0000C1CC 4E75                       		rts	
0000C1CE                            ; ===========================================================================
0000C1CE                            
0000C1CE                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C1CE 4A68 0036                  		tst.w	$36(a0)
0000C1D2 6700                       		beq.s	loc_B938
0000C1D4 4A68 0038                  		tst.w	$38(a0)
0000C1D8 6700                       		beq.s	loc_B902
0000C1DA 5368 0038                  		subq.w	#1,$38(a0)
0000C1DE 6000                       		bra.s	loc_B97C
0000C1E0                            ; ===========================================================================
0000C1E0                            
0000C1E0                            loc_B902:
0000C1E0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1E4 0200 000F                  		andi.b	#$F,d0
0000C1E8 6600                       		bne.s	loc_B91C
0000C1EA 4A28 0001                  		tst.b	1(a0)
0000C1EE 6A00                       		bpl.s	loc_B91C
0000C1F0 303C 00C7                  		move.w	#$C7,d0
0000C1F4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C1FA                            
0000C1FA                            loc_B91C:
0000C1FA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C200 6400                       		bcc.s	loc_B97C
0000C202 317C 0000 0032             		move.w	#0,$32(a0)
0000C208 317C 0000 0012             		move.w	#0,$12(a0)
0000C20E 317C 0000 0036             		move.w	#0,$36(a0)
0000C214 6000                       		bra.s	loc_B97C
0000C216                            ; ===========================================================================
0000C216                            
0000C216                            loc_B938:				; XREF: Obj31_Type01
0000C216 3228 0034                  		move.w	$34(a0),d1
0000C21A B268 0032                  		cmp.w	$32(a0),d1
0000C21E 6700                       		beq.s	loc_B97C
0000C220 3028 0012                  		move.w	$12(a0),d0
0000C224 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C22A D168 0032                  		add.w	d0,$32(a0)
0000C22E B268 0032                  		cmp.w	$32(a0),d1
0000C232 6200                       		bhi.s	loc_B97C
0000C234 3141 0032                  		move.w	d1,$32(a0)
0000C238 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C23E 317C 0001 0036             		move.w	#1,$36(a0)
0000C244 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C24A 4A28 0001                  		tst.b	1(a0)
0000C24E 6A00                       		bpl.s	loc_B97C
0000C250 303C 00BD                  		move.w	#$BD,d0
0000C254 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C25A                            
0000C25A                            loc_B97C:
0000C25A 6000 FF62                  		bra.w	Obj31_Restart
0000C25E                            ; ===========================================================================
0000C25E                            
0000C25E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C25E 3038 D008                  		move.w	($FFFFD008).w,d0
0000C262 9068 0008                  		sub.w	8(a0),d0
0000C266 6400                       		bcc.s	loc_B98C
0000C268 4440                       		neg.w	d0
0000C26A                            
0000C26A                            loc_B98C:
0000C26A 0C40 0090                  		cmpi.w	#$90,d0
0000C26E 6400                       		bcc.s	loc_B996
0000C270 5228 0028                  		addq.b	#1,$28(a0)
0000C274                            
0000C274                            loc_B996:
0000C274 6000 FF48                  		bra.w	Obj31_Restart
0000C278                            ; ===========================================================================
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            ; Object 45 - spiked metal block from beta version (MZ)
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            
0000C278                            Obj45:					; XREF: Obj_Index
0000C278 7000                       		moveq	#0,d0
0000C27A 1028 0024                  		move.b	$24(a0),d0
0000C27E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C282 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C286                            ; ===========================================================================
0000C286 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C288 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C28A 0000                       		dc.w loc_BA8E-Obj45_Index
0000C28C 0000                       		dc.w Obj45_Display-Obj45_Index
0000C28E 0000                       		dc.w loc_BA7A-Obj45_Index
0000C290                            
0000C290 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C293 04E4 01                    		dc.b	4, $E4,	  1
0000C296 0834 03                    		dc.b	8, $34,	  3
0000C299 0628 02                    		dc.b	6, $28,	  2
0000C29C                            
0000C29C 3800                       word_B9BE:	dc.w $3800
0000C29E A000                       		dc.w -$6000
0000C2A0 5000                       		dc.w $5000
0000C2A2                            ; ===========================================================================
0000C2A2                            
0000C2A2                            Obj45_Main:				; XREF: Obj45_Index
0000C2A2 7000                       		moveq	#0,d0
0000C2A4 1028 0028                  		move.b	$28(a0),d0
0000C2A8 D040                       		add.w	d0,d0
0000C2AA 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C2AE 45F9 0000 C290             		lea	(Obj45_Var).l,a2
0000C2B4 2248                       		movea.l	a0,a1
0000C2B6 7203                       		moveq	#3,d1
0000C2B8 6000                       		bra.s	Obj45_Load
0000C2BA                            ; ===========================================================================
0000C2BA                            
0000C2BA                            Obj45_Loop:
0000C2BA 6100 0000                  		bsr.w	SingleObjLoad2
0000C2BE 6600                       		bne.s	loc_BA52
0000C2C0                            
0000C2C0                            Obj45_Load:				; XREF: Obj45_Main
0000C2C0 135A 0024                  		move.b	(a2)+,$24(a1)
0000C2C4 12BC 0045                  		move.b	#$45,0(a1)
0000C2C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C2CE 101A                       		move.b	(a2)+,d0
0000C2D0 4880                       		ext.w	d0
0000C2D2 D068 0008                  		add.w	8(a0),d0
0000C2D6 3340 0008                  		move.w	d0,8(a1)
0000C2DA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C2E2 337C 0300 0002             		move.w	#$300,2(a1)
0000C2E8 137C 0004 0001             		move.b	#4,1(a1)
0000C2EE 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C2F4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C2FA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C300 137C 0020 0019             		move.b	#$20,$19(a1)
0000C306 3342 0034                  		move.w	d2,$34(a1)
0000C30A 137C 0004 0018             		move.b	#4,$18(a1)
0000C310 0C12 0001                  		cmpi.b	#1,(a2)
0000C314 6600                       		bne.s	loc_BA40
0000C316 137C 0091 0020             		move.b	#$91,$20(a1)
0000C31C                            
0000C31C                            loc_BA40:
0000C31C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C320 2348 003C                  		move.l	a0,$3C(a1)
0000C324 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C328                            
0000C328 137C 0003 0018             		move.b	#3,$18(a1)
0000C32E                            
0000C32E                            loc_BA52:
0000C32E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C334                            
0000C334                            Obj45_Solid:				; XREF: Obj45_Index
0000C334 3F28 0008                  		move.w	8(a0),-(sp)
0000C338 6100 0000                  		bsr.w	Obj45_Move
0000C33C 323C 0017                  		move.w	#$17,d1
0000C340 343C 0020                  		move.w	#$20,d2
0000C344 363C 0020                  		move.w	#$20,d3
0000C348 381F                       		move.w	(sp)+,d4
0000C34A 6100 0000                  		bsr.w	SolidObject
0000C34E 6100 0000                  		bsr.w	DisplaySprite
0000C352 6000 0000                  		bra.w	Obj45_ChkDel
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            loc_BA7A:				; XREF: Obj45_Index
0000C356 2268 003C                  		movea.l	$3C(a0),a1
0000C35A 1029 0032                  		move.b	$32(a1),d0
0000C35E 0600 0010                  		addi.b	#$10,d0
0000C362 EA08                       		lsr.b	#5,d0
0000C364 5600                       		addq.b	#3,d0
0000C366 1140 001A                  		move.b	d0,$1A(a0)
0000C36A                            
0000C36A                            loc_BA8E:				; XREF: Obj45_Index
0000C36A 2268 003C                  		movea.l	$3C(a0),a1
0000C36E 7000                       		moveq	#0,d0
0000C370 1029 0032                  		move.b	$32(a1),d0
0000C374 4440                       		neg.w	d0
0000C376 D068 0030                  		add.w	$30(a0),d0
0000C37A 3140 0008                  		move.w	d0,8(a0)
0000C37E                            
0000C37E                            Obj45_Display:				; XREF: Obj45_Index
0000C37E 6100 0000                  		bsr.w	DisplaySprite
0000C382                            
0000C382                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C382 3028 003A                  		move.w	$3A(a0),d0
0000C386 0240 FF80                  		andi.w	#$FF80,d0
0000C38A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C38E 0441 0080                  		subi.w	#$80,d1
0000C392 0241 FF80                  		andi.w	#$FF80,d1
0000C396 9041                       		sub.w	d1,d0
0000C398 0C40 0280                  		cmpi.w	#$280,d0
0000C39C 6200 0000                  		bhi.w	DeleteObject
0000C3A0 4E75                       		rts	
0000C3A2                            
0000C3A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3A2                            
0000C3A2                            
0000C3A2                            Obj45_Move:				; XREF: Obj45_Solid
0000C3A2 7000                       		moveq	#0,d0
0000C3A4 1028 0028                  		move.b	$28(a0),d0
0000C3A8 D040                       		add.w	d0,d0
0000C3AA 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C3AE 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C3B2                            ; End of function Obj45_Move
0000C3B2                            
0000C3B2                            ; ===========================================================================
0000C3B2 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C3B4 0000                       		dc.w loc_BADA-off_BAD6
0000C3B6                            ; ===========================================================================
0000C3B6                            
0000C3B6                            loc_BADA:				; XREF: off_BAD6
0000C3B6 4A68 0036                  		tst.w	$36(a0)
0000C3BA 6700                       		beq.s	loc_BB08
0000C3BC 4A68 0038                  		tst.w	$38(a0)
0000C3C0 6700                       		beq.s	loc_BAEC
0000C3C2 5368 0038                  		subq.w	#1,$38(a0)
0000C3C6 6000                       		bra.s	loc_BB3C
0000C3C8                            ; ===========================================================================
0000C3C8                            
0000C3C8                            loc_BAEC:
0000C3C8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3CE 6400                       		bcc.s	loc_BB3C
0000C3D0 317C 0000 0032             		move.w	#0,$32(a0)
0000C3D6 317C 0000 0010             		move.w	#0,$10(a0)
0000C3DC 317C 0000 0036             		move.w	#0,$36(a0)
0000C3E2 6000                       		bra.s	loc_BB3C
0000C3E4                            ; ===========================================================================
0000C3E4                            
0000C3E4                            loc_BB08:				; XREF: loc_BADA
0000C3E4 3228 0034                  		move.w	$34(a0),d1
0000C3E8 B268 0032                  		cmp.w	$32(a0),d1
0000C3EC 6700                       		beq.s	loc_BB3C
0000C3EE 3028 0010                  		move.w	$10(a0),d0
0000C3F2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C3F8 D168 0032                  		add.w	d0,$32(a0)
0000C3FC B268 0032                  		cmp.w	$32(a0),d1
0000C400 6200                       		bhi.s	loc_BB3C
0000C402 3141 0032                  		move.w	d1,$32(a0)
0000C406 317C 0000 0010             		move.w	#0,$10(a0)
0000C40C 317C 0001 0036             		move.w	#1,$36(a0)
0000C412 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C418                            
0000C418                            loc_BB3C:
0000C418 7000                       		moveq	#0,d0
0000C41A 1028 0032                  		move.b	$32(a0),d0
0000C41E 4440                       		neg.w	d0
0000C420 D068 0030                  		add.w	$30(a0),d0
0000C424 3140 0008                  		move.w	d0,8(a0)
0000C428 4E75                       		rts	
0000C42A                            ; ===========================================================================
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A                            Map_obj31:
0000C42A                            	include "_maps\obj31.asm"
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A 0000                       		dc.w byte_BB64-Map_obj31
0000C42C 0000                       		dc.w byte_BB7E-Map_obj31
0000C42E 0000                       		dc.w byte_BB98-Map_obj31
0000C430 0000                       		dc.w byte_BB9E-Map_obj31
0000C432 0000                       		dc.w byte_BBA9-Map_obj31
0000C434 0000                       		dc.w byte_BBBE-Map_obj31
0000C436 0000                       		dc.w byte_BBDD-Map_obj31
0000C438 0000                       		dc.w byte_BC06-Map_obj31
0000C43A 0000                       		dc.w byte_BC06-Map_obj31
0000C43C 0000                       		dc.w byte_BC39-Map_obj31
0000C43E 0000                       		dc.w byte_BC53-Map_obj31
0000C440 05                         byte_BB64:	dc.b 5
0000C441 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C446 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C44B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C450 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C455 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C45A 05                         byte_BB7E:	dc.b 5
0000C45B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C460 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C465 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C46A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C46F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C474 01                         byte_BB98:	dc.b 1
0000C475 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C47A 02                         byte_BB9E:	dc.b 2
0000C47B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C480 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C485 04                         byte_BBA9:	dc.b 4
0000C486 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C48B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C490 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C495 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C49A 06                         byte_BBBE:	dc.b 6
0000C49B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4A0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4A5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4AA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4AF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4B4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4B9 08                         byte_BBDD:	dc.b 8
0000C4BA A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4BF B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C4C4 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4C9 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4CE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4D3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4D8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4DD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4E2 0A                         byte_BC06:	dc.b $A
0000C4E3 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C4E8 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C4ED A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4F2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C4F7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4FC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C501 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C506 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C50B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C510 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C515 05                         byte_BC39:	dc.b 5
0000C516 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C51B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C520 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C525 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C52A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C52F 01                         byte_BC53:	dc.b 1
0000C530 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C536 00                         		even
0000C536 00                         		even
0000C536                            
0000C536                            ; ---------------------------------------------------------------------------
0000C536                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C536                            ; ---------------------------------------------------------------------------
0000C536                            Map_obj45:
0000C536                            	include "_maps\obj45.asm"
0000C536                            ; ---------------------------------------------------------------------------
0000C536                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C536                            ; ---------------------------------------------------------------------------
0000C536 0000                       		dc.w byte_BC6C-Map_obj45
0000C538 0000                       		dc.w byte_BC7C-Map_obj45
0000C53A 0000                       		dc.w byte_BC8C-Map_obj45
0000C53C 0000                       		dc.w byte_BC92-Map_obj45
0000C53E 0000                       		dc.w byte_BC9D-Map_obj45
0000C540 0000                       		dc.w byte_BCB2-Map_obj45
0000C542 0000                       		dc.w byte_BCD1-Map_obj45
0000C544 0000                       		dc.w byte_BCFA-Map_obj45
0000C546 0000                       		dc.w byte_BCFA-Map_obj45
0000C548 03                         byte_BC6C:	dc.b 3
0000C549 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C54E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C553 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C558 03                         byte_BC7C:	dc.b 3
0000C559 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C55E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C563 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C568 01                         byte_BC8C:	dc.b 1
0000C569 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C56E 02                         byte_BC92:	dc.b 2
0000C56F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C574 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C579 04                         byte_BC9D:	dc.b 4
0000C57A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C57F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C584 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C589 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C58E 06                         byte_BCB2:	dc.b 6
0000C58F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C594 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C599 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C59E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5A3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5A8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5AD 08                         byte_BCD1:	dc.b 8
0000C5AE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5B3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5B8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5BD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5C2 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5C7 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5CC F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5D1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5D6 08                         byte_BCFA:	dc.b 8
0000C5D7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5DC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5E1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5E6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5EB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5F0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5F5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5FA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5FF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C604 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C60A 00                         		even
0000C60A 00                         		even
0000C60A                            
0000C60A                            ; ===========================================================================
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A                            
0000C60A                            Obj32:					; XREF: Obj_Index
0000C60A 7000                       		moveq	#0,d0
0000C60C 1028 0024                  		move.b	$24(a0),d0
0000C610 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C614 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C618                            ; ===========================================================================
0000C618 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C61A 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C61C                            ; ===========================================================================
0000C61C                            
0000C61C                            Obj32_Main:				; XREF: Obj32_Index
0000C61C 5428 0024                  		addq.b	#2,$24(a0)
0000C620 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C628 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C62E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C634 6700                       		beq.s	loc_BD60
0000C636 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C63C                            
0000C63C                            loc_BD60:
0000C63C 117C 0004 0001             		move.b	#4,1(a0)
0000C642 117C 0010 0019             		move.b	#$10,$19(a0)
0000C648 117C 0004 0018             		move.b	#4,$18(a0)
0000C64E 5668 000C                  		addq.w	#3,$C(a0)
0000C652                            
0000C652                            Obj32_Pressed:				; XREF: Obj32_Index
0000C652 4A28 0001                  		tst.b	1(a0)
0000C656 6A00                       		bpl.s	Obj32_Display
0000C658 323C 001B                  		move.w	#$1B,d1
0000C65C 343C 0005                  		move.w	#5,d2
0000C660 363C 0005                  		move.w	#5,d3
0000C664 3828 0008                  		move.w	8(a0),d4
0000C668 6100 0000                  		bsr.w	SolidObject
0000C66C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C672 1028 0028                  		move.b	$28(a0),d0
0000C676 0240 000F                  		andi.w	#$F,d0
0000C67A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C67E 47F3 0000                  		lea	(a3,d0.w),a3
0000C682 7600                       		moveq	#0,d3
0000C684 0828 0006 0028             		btst	#6,$28(a0)
0000C68A 6700                       		beq.s	loc_BDB2
0000C68C 7607                       		moveq	#7,d3
0000C68E                            
0000C68E                            loc_BDB2:
0000C68E 4A28 0028                  		tst.b	$28(a0)
0000C692 6A00                       		bpl.s	loc_BDBE
0000C694 6100 0000                  		bsr.w	Obj32_MZBlock
0000C698 6600                       		bne.s	loc_BDC8
0000C69A                            
0000C69A                            loc_BDBE:
0000C69A 4A28 0025                  		tst.b	$25(a0)
0000C69E 6600                       		bne.s	loc_BDC8
0000C6A0 0793                       		bclr	d3,(a3)
0000C6A2 6000                       		bra.s	loc_BDDE
0000C6A4                            ; ===========================================================================
0000C6A4                            
0000C6A4                            loc_BDC8:
0000C6A4 4A13                       		tst.b	(a3)
0000C6A6 6600                       		bne.s	loc_BDD6
0000C6A8 303C 00CD                  		move.w	#$CD,d0
0000C6AC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play switch sound
0000C6B2                            
0000C6B2                            loc_BDD6:
0000C6B2 07D3                       		bset	d3,(a3)
0000C6B4 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C6BA                            
0000C6BA                            loc_BDDE:
0000C6BA 0828 0005 0028             		btst	#5,$28(a0)
0000C6C0 6700                       		beq.s	Obj32_Display
0000C6C2 5328 001E                  		subq.b	#1,$1E(a0)
0000C6C6 6A00                       		bpl.s	Obj32_Display
0000C6C8 117C 0007 001E             		move.b	#7,$1E(a0)
0000C6CE 0868 0001 001A             		bchg	#1,$1A(a0)
0000C6D4                            
0000C6D4                            Obj32_Display:
0000C6D4 6100 0000                  		bsr.w	DisplaySprite
0000C6D8 3028 0008                  		move.w	8(a0),d0
0000C6DC 0240 FF80                  		andi.w	#$FF80,d0
0000C6E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6E4 0441 0080                  		subi.w	#$80,d1
0000C6E8 0241 FF80                  		andi.w	#$FF80,d1
0000C6EC 9041                       		sub.w	d1,d0
0000C6EE 0C40 0280                  		cmpi.w	#$280,d0
0000C6F2 6200 0000                  		bhi.w	Obj32_Delete
0000C6F6 4E75                       		rts	
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            Obj32_Delete:
0000C6F8 6100 0000                  		bsr.w	DeleteObject
0000C6FC 4E75                       		rts	
0000C6FE                            
0000C6FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C6FE                            
0000C6FE                            
0000C6FE                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C6FE 3F03                       		move.w	d3,-(sp)
0000C700 3428 0008                  		move.w	8(a0),d2
0000C704 3628 000C                  		move.w	$C(a0),d3
0000C708 0442 0010                  		subi.w	#$10,d2
0000C70C 5143                       		subq.w	#8,d3
0000C70E 383C 0020                  		move.w	#$20,d4
0000C712 3A3C 0010                  		move.w	#$10,d5
0000C716 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C71A 3C3C 005F                  		move.w	#$5F,d6
0000C71E                            
0000C71E                            Obj32_MZLoop:
0000C71E 4A29 0001                  		tst.b	1(a1)
0000C722 6A00                       		bpl.s	loc_BE4E
0000C724 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C728 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C72A                            
0000C72A                            loc_BE4E:
0000C72A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C72E 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C732                            
0000C732 361F                       		move.w	(sp)+,d3
0000C734 7000                       		moveq	#0,d0
0000C736                            
0000C736                            locret_BE5A:
0000C736 4E75                       		rts	
0000C738                            ; ===========================================================================
0000C738 1010                       Obj32_MZData:	dc.b $10, $10
0000C73A                            ; ===========================================================================
0000C73A                            
0000C73A                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C73A 7001                       		moveq	#1,d0
0000C73C 0240 003F                  		andi.w	#$3F,d0
0000C740 D040                       		add.w	d0,d0
0000C742 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C746 121A                       		move.b	(a2)+,d1
0000C748 4881                       		ext.w	d1
0000C74A 3029 0008                  		move.w	8(a1),d0
0000C74E 9041                       		sub.w	d1,d0
0000C750 9042                       		sub.w	d2,d0
0000C752 6400                       		bcc.s	loc_BE80
0000C754 D241                       		add.w	d1,d1
0000C756 D041                       		add.w	d1,d0
0000C758 6500                       		bcs.s	loc_BE84
0000C75A 60CE                       		bra.s	loc_BE4E
0000C75C                            ; ===========================================================================
0000C75C                            
0000C75C                            loc_BE80:
0000C75C B044                       		cmp.w	d4,d0
0000C75E 62CA                       		bhi.s	loc_BE4E
0000C760                            
0000C760                            loc_BE84:
0000C760 121A                       		move.b	(a2)+,d1
0000C762 4881                       		ext.w	d1
0000C764 3029 000C                  		move.w	$C(a1),d0
0000C768 9041                       		sub.w	d1,d0
0000C76A 9043                       		sub.w	d3,d0
0000C76C 6400                       		bcc.s	loc_BE9A
0000C76E D241                       		add.w	d1,d1
0000C770 D041                       		add.w	d1,d0
0000C772 6500                       		bcs.s	loc_BE9E
0000C774 60B4                       		bra.s	loc_BE4E
0000C776                            ; ===========================================================================
0000C776                            
0000C776                            loc_BE9A:
0000C776 B045                       		cmp.w	d5,d0
0000C778 62B0                       		bhi.s	loc_BE4E
0000C77A                            
0000C77A                            loc_BE9E:
0000C77A 361F                       		move.w	(sp)+,d3
0000C77C 7001                       		moveq	#1,d0
0000C77E 4E75                       		rts	
0000C780                            ; End of function Obj32_MZBlock
0000C780                            
0000C780                            ; ===========================================================================
0000C780                            ; ---------------------------------------------------------------------------
0000C780                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C780                            ; ---------------------------------------------------------------------------
0000C780                            Map_obj32:
0000C780                            	include "_maps\obj32.asm"
0000C780                            ; ---------------------------------------------------------------------------
0000C780                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C780                            ; ---------------------------------------------------------------------------
0000C780 0000                       		dc.w byte_BEAC-Map_obj32
0000C782 0000                       		dc.w byte_BEB7-Map_obj32
0000C784 0000                       		dc.w byte_BEC2-Map_obj32
0000C786 0000                       		dc.w byte_BEB7-Map_obj32
0000C788 02                         byte_BEAC:	dc.b 2
0000C789 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C78E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C793 02                         byte_BEB7:	dc.b 2
0000C794 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C799 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C79E 02                         byte_BEC2:	dc.b 2
0000C79F F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7A4 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7A9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C7AE                            		even
0000C7AE                            		even
0000C7AE                            
0000C7AE                            ; ===========================================================================
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            ; Object 33 - pushable blocks (MZ, LZ)
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            
0000C7AE                            Obj33:					; XREF: Obj_Index
0000C7AE 7000                       		moveq	#0,d0
0000C7B0 1028 0024                  		move.b	$24(a0),d0
0000C7B4 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C7B8 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C7BC                            ; ===========================================================================
0000C7BC 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C7BE 0000                       		dc.w loc_BF6E-Obj33_Index
0000C7C0 0000                       		dc.w loc_C02C-Obj33_Index
0000C7C2                            
0000C7C2 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C7C4 4001                       		dc.b $40, 1
0000C7C6                            ; ===========================================================================
0000C7C6                            
0000C7C6                            Obj33_Main:				; XREF: Obj33_Index
0000C7C6 5428 0024                  		addq.b	#2,$24(a0)
0000C7CA 117C 000F 0016             		move.b	#$F,$16(a0)
0000C7D0 117C 000F 0017             		move.b	#$F,$17(a0)
0000C7D6 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C7DE 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C7E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C7EA 6600                       		bne.s	loc_BF16
0000C7EC 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C7F2                            
0000C7F2                            loc_BF16:
0000C7F2 117C 0004 0001             		move.b	#4,1(a0)
0000C7F8 117C 0003 0018             		move.b	#3,$18(a0)
0000C7FE 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C804 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C80A 7000                       		moveq	#0,d0
0000C80C 1028 0028                  		move.b	$28(a0),d0
0000C810 D040                       		add.w	d0,d0
0000C812 0240 000E                  		andi.w	#$E,d0
0000C816 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C81A 115A 0019                  		move.b	(a2)+,$19(a0)
0000C81E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C822 4A28 0028                  		tst.b	$28(a0)
0000C826 6700                       		beq.s	Obj33_ChkGone
0000C828 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C82E                            
0000C82E                            Obj33_ChkGone:
0000C82E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C832 7000                       		moveq	#0,d0
0000C834 1028 0023                  		move.b	$23(a0),d0
0000C838 6700                       		beq.s	loc_BF6E
0000C83A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C840 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C846 6600 0000                  		bne.w	DeleteObject
0000C84A                            
0000C84A                            loc_BF6E:				; XREF: Obj33_Index
0000C84A 4A28 0032                  		tst.b	$32(a0)
0000C84E 6600 0000                  		bne.w	loc_C046
0000C852 7200                       		moveq	#0,d1
0000C854 1228 0019                  		move.b	$19(a0),d1
0000C858 0641 000B                  		addi.w	#$B,d1
0000C85C 343C 0010                  		move.w	#$10,d2
0000C860 363C 0011                  		move.w	#$11,d3
0000C864 3828 0008                  		move.w	8(a0),d4
0000C868 6100 0000                  		bsr.w	loc_C186
0000C86C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C872 6600                       		bne.s	loc_BFC6	; if not, branch
0000C874 08A8 0007 0028             		bclr	#7,$28(a0)
0000C87A 3028 0008                  		move.w	8(a0),d0
0000C87E 0C40 0A20                  		cmpi.w	#$A20,d0
0000C882 6500                       		bcs.s	loc_BFC6
0000C884 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C888 6400                       		bcc.s	loc_BFC6
0000C88A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C88E 0440 001C                  		subi.w	#$1C,d0
0000C892 3140 000C                  		move.w	d0,$C(a0)
0000C896 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C89C 08E8 0007 0028             		bset	#7,$28(a0)
0000C8A2                            
0000C8A2                            loc_BFC6:
0000C8A2 3028 0008                  		move.w	8(a0),d0
0000C8A6 0240 FF80                  		andi.w	#$FF80,d0
0000C8AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8AE 0441 0080                  		subi.w	#$80,d1
0000C8B2 0241 FF80                  		andi.w	#$FF80,d1
0000C8B6 9041                       		sub.w	d1,d0
0000C8B8 0C40 0280                  		cmpi.w	#$280,d0
0000C8BC 6200                       		bhi.s	loc_BFE6
0000C8BE 6000 0000                  		bra.w	DisplaySprite
0000C8C2                            ; ===========================================================================
0000C8C2                            
0000C8C2                            loc_BFE6:
0000C8C2 3028 0034                  		move.w	$34(a0),d0
0000C8C6 0240 FF80                  		andi.w	#$FF80,d0
0000C8CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8CE 0441 0080                  		subi.w	#$80,d1
0000C8D2 0241 FF80                  		andi.w	#$FF80,d1
0000C8D6 9041                       		sub.w	d1,d0
0000C8D8 0C40 0280                  		cmpi.w	#$280,d0
0000C8DC 6200                       		bhi.s	loc_C016
0000C8DE 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C8E4 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C8EA 117C 0004 0024             		move.b	#4,$24(a0)
0000C8F0 6000                       		bra.s	loc_C02C
0000C8F2                            ; ===========================================================================
0000C8F2                            
0000C8F2                            loc_C016:
0000C8F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C8F6 7000                       		moveq	#0,d0
0000C8F8 1028 0023                  		move.b	$23(a0),d0
0000C8FC 6700                       		beq.s	loc_C028
0000C8FE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C904                            
0000C904                            loc_C028:
0000C904 6000 0000                  		bra.w	DeleteObject
0000C908                            ; ===========================================================================
0000C908                            
0000C908                            loc_C02C:				; XREF: Obj33_Index
0000C908 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C90C 6700                       		beq.s	locret_C044
0000C90E 117C 0002 0024             		move.b	#2,$24(a0)
0000C914 4228 0032                  		clr.b	$32(a0)
0000C918 4268 0010                  		clr.w	$10(a0)
0000C91C 4268 0012                  		clr.w	$12(a0)
0000C920                            
0000C920                            locret_C044:
0000C920 4E75                       		rts	
0000C922                            ; ===========================================================================
0000C922                            
0000C922                            loc_C046:				; XREF: loc_BF6E
0000C922 3F28 0008                  		move.w	8(a0),-(sp)
0000C926 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C92C 6400                       		bcc.s	loc_C056
0000C92E 6100 0000                  		bsr.w	SpeedToPos
0000C932                            
0000C932                            loc_C056:
0000C932 0828 0001 0022             		btst	#1,$22(a0)
0000C938 6700                       		beq.s	loc_C0A0
0000C93A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C940 4EB9 0000 0000             		jsr	ObjHitFloor
0000C946 4A41                       		tst.w	d1
0000C948 6A00 0000                  		bpl.w	loc_C09E
0000C94C D368 000C                  		add.w	d1,$C(a0)
0000C950 4268 0012                  		clr.w	$12(a0)
0000C954 08A8 0001 0022             		bclr	#1,$22(a0)
0000C95A 3011                       		move.w	(a1),d0
0000C95C 0240 03FF                  		andi.w	#$3FF,d0
0000C960 0C40 016A                  		cmpi.w	#$16A,d0
0000C964 6500                       		bcs.s	loc_C09E
0000C966 3028 0030                  		move.w	$30(a0),d0
0000C96A E640                       		asr.w	#3,d0
0000C96C 3140 0010                  		move.w	d0,$10(a0)
0000C970 117C 0001 0032             		move.b	#1,$32(a0)
0000C976 4268 000E                  		clr.w	$E(a0)
0000C97A                            
0000C97A                            loc_C09E:
0000C97A 6000                       		bra.s	loc_C0E6
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            loc_C0A0:
0000C97C 4A68 0010                  		tst.w	$10(a0)
0000C980 6700 0000                  		beq.w	loc_C0D6
0000C984 6B00                       		bmi.s	loc_C0BC
0000C986 7600                       		moveq	#0,d3
0000C988 1628 0019                  		move.b	$19(a0),d3
0000C98C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C992 4A41                       		tst.w	d1		; has block touched a wall?
0000C994 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C996 6000                       		bra.s	loc_C0E6
0000C998                            ; ===========================================================================
0000C998                            
0000C998                            loc_C0BC:
0000C998 7600                       		moveq	#0,d3
0000C99A 1628 0019                  		move.b	$19(a0),d3
0000C99E 4643                       		not.w	d3
0000C9A0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9A6 4A41                       		tst.w	d1		; has block touched a wall?
0000C9A8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9AA 6000                       		bra.s	loc_C0E6
0000C9AC                            ; ===========================================================================
0000C9AC                            
0000C9AC                            Obj33_StopPush:
0000C9AC 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C9B0 6000                       		bra.s	loc_C0E6
0000C9B2                            ; ===========================================================================
0000C9B2                            
0000C9B2                            loc_C0D6:
0000C9B2 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C9BA 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C9C0 6400                       		bcc.s	loc_C104
0000C9C2                            
0000C9C2                            loc_C0E6:
0000C9C2 7200                       		moveq	#0,d1
0000C9C4 1228 0019                  		move.b	$19(a0),d1
0000C9C8 0641 000B                  		addi.w	#$B,d1
0000C9CC 343C 0010                  		move.w	#$10,d2
0000C9D0 363C 0011                  		move.w	#$11,d3
0000C9D4 381F                       		move.w	(sp)+,d4
0000C9D6 6100 0000                  		bsr.w	loc_C186
0000C9DA 6100                       		bsr.s	Obj33_ChkLava
0000C9DC 6000 FEC4                  		bra.w	loc_BFC6
0000C9E0                            ; ===========================================================================
0000C9E0                            
0000C9E0                            loc_C104:
0000C9E0 381F                       		move.w	(sp)+,d4
0000C9E2 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9E6 08A9 0003 0022             		bclr	#3,$22(a1)
0000C9EC 08A8 0003 0022             		bclr	#3,$22(a0)
0000C9F2 6000 FECE                  		bra.w	loc_BFE6
0000C9F6                            ; ===========================================================================
0000C9F6                            
0000C9F6                            Obj33_ChkLava:
0000C9F6 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C9FC 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C9FE 343C FFE0                  		move.w	#-$20,d2
0000CA02 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA08 6700                       		beq.s	Obj33_LoadLava
0000CA0A 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA10 6700                       		beq.s	Obj33_LoadLava
0000CA12 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA18 6700                       		beq.s	Obj33_LoadLava
0000CA1A 4E75                       		rts	
0000CA1C                            ; ===========================================================================
0000CA1C                            
0000CA1C                            Obj33_ChkLava2:
0000CA1C 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA22 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA24 343C 0020                  		move.w	#$20,d2
0000CA28 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA2E 6700                       		beq.s	Obj33_LoadLava
0000CA30 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA36 6700                       		beq.s	Obj33_LoadLava
0000CA38                            
0000CA38                            Obj33_NoLava:
0000CA38 4E75                       		rts	
0000CA3A                            ; ===========================================================================
0000CA3A                            
0000CA3A                            Obj33_LoadLava:
0000CA3A 6100 0000                  		bsr.w	SingleObjLoad
0000CA3E 6600                       		bne.s	locret_C184
0000CA40 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA44 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA4A D569 0008                  		add.w	d2,8(a1)
0000CA4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA54 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CA5A 2348 003C                  		move.l	a0,$3C(a1)
0000CA5E                            
0000CA5E                            locret_C184:
0000CA5E 4E75                       		rts	
0000CA60                            ; ===========================================================================
0000CA60                            
0000CA60                            loc_C186:				; XREF: loc_BF6E
0000CA60 1028 0025                  		move.b	$25(a0),d0
0000CA64 6700 0000                  		beq.w	loc_C218
0000CA68 5500                       		subq.b	#2,d0
0000CA6A 6600                       		bne.s	loc_C1AA
0000CA6C 6100 B312                  		bsr.w	ExitPlatform
0000CA70 0829 0003 0022             		btst	#3,$22(a1)
0000CA76 6600                       		bne.s	loc_C1A4
0000CA78 4228 0025                  		clr.b	$25(a0)
0000CA7C 4E75                       		rts	
0000CA7E                            ; ===========================================================================
0000CA7E                            
0000CA7E                            loc_C1A4:
0000CA7E 3404                       		move.w	d4,d2
0000CA80 6000 B85C                  		bra.w	MvSonicOnPtfm
0000CA84                            ; ===========================================================================
0000CA84                            
0000CA84                            loc_C1AA:
0000CA84 5500                       		subq.b	#2,d0
0000CA86 6600                       		bne.s	loc_C1F2
0000CA88 6100 0000                  		bsr.w	SpeedToPos
0000CA8C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CA92 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA98 4A41                       		tst.w	d1
0000CA9A 6A00 0000                  		bpl.w	locret_C1F0
0000CA9E D368 000C                  		add.w	d1,$C(a0)
0000CAA2 4268 0012                  		clr.w	$12(a0)
0000CAA6 4228 0025                  		clr.b	$25(a0)
0000CAAA 3011                       		move.w	(a1),d0
0000CAAC 0240 03FF                  		andi.w	#$3FF,d0
0000CAB0 0C40 016A                  		cmpi.w	#$16A,d0
0000CAB4 6500                       		bcs.s	locret_C1F0
0000CAB6 3028 0030                  		move.w	$30(a0),d0
0000CABA E640                       		asr.w	#3,d0
0000CABC 3140 0010                  		move.w	d0,$10(a0)
0000CAC0 117C 0001 0032             		move.b	#1,$32(a0)
0000CAC6 4268 000E                  		clr.w	$E(a0)
0000CACA                            
0000CACA                            locret_C1F0:
0000CACA 4E75                       		rts	
0000CACC                            ; ===========================================================================
0000CACC                            
0000CACC                            loc_C1F2:
0000CACC 6100 0000                  		bsr.w	SpeedToPos
0000CAD0 3028 0008                  		move.w	8(a0),d0
0000CAD4 0240 000C                  		andi.w	#$C,d0
0000CAD8 6600 0000                  		bne.w	locret_C2E4
0000CADC 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CAE2 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CAE8 4268 0010                  		clr.w	$10(a0)
0000CAEC 5528 0025                  		subq.b	#2,$25(a0)
0000CAF0 4E75                       		rts	
0000CAF2                            ; ===========================================================================
0000CAF2                            
0000CAF2                            loc_C218:
0000CAF2 6100 0000                  		bsr.w	loc_FAC8
0000CAF6 4A44                       		tst.w	d4
0000CAF8 6700 0000                  		beq.w	locret_C2E4
0000CAFC 6B00 0000                  		bmi.w	locret_C2E4
0000CB00 4A28 0032                  		tst.b	$32(a0)
0000CB04 6700                       		beq.s	loc_C230
0000CB06 6000 0000                  		bra.w	locret_C2E4
0000CB0A                            ; ===========================================================================
0000CB0A                            
0000CB0A                            loc_C230:
0000CB0A 4A40                       		tst.w	d0
0000CB0C 6700 0000                  		beq.w	locret_C2E4
0000CB10 6B00                       		bmi.s	loc_C268
0000CB12 0829 0000 0022             		btst	#0,$22(a1)
0000CB18 6600 0000                  		bne.w	locret_C2E4
0000CB1C 3F00                       		move.w	d0,-(sp)
0000CB1E 7600                       		moveq	#0,d3
0000CB20 1628 0019                  		move.b	$19(a0),d3
0000CB24 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB2A 301F                       		move.w	(sp)+,d0
0000CB2C 4A41                       		tst.w	d1
0000CB2E 6B00 0000                  		bmi.w	locret_C2E4
0000CB32 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB3A 7001                       		moveq	#1,d0
0000CB3C 323C 0040                  		move.w	#$40,d1
0000CB40 6000                       		bra.s	loc_C294
0000CB42                            ; ===========================================================================
0000CB42                            
0000CB42                            loc_C268:
0000CB42 0829 0000 0022             		btst	#0,$22(a1)
0000CB48 6700                       		beq.s	locret_C2E4
0000CB4A 3F00                       		move.w	d0,-(sp)
0000CB4C 7600                       		moveq	#0,d3
0000CB4E 1628 0019                  		move.b	$19(a0),d3
0000CB52 4643                       		not.w	d3
0000CB54 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB5A 301F                       		move.w	(sp)+,d0
0000CB5C 4A41                       		tst.w	d1
0000CB5E 6B00                       		bmi.s	locret_C2E4
0000CB60 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CB68 70FF                       		moveq	#-1,d0
0000CB6A 323C FFC0                  		move.w	#-$40,d1
0000CB6E                            
0000CB6E                            loc_C294:
0000CB6E 43F8 D000                  		lea	($FFFFD000).w,a1
0000CB72 D169 0008                  		add.w	d0,8(a1)
0000CB76 3341 0014                  		move.w	d1,$14(a1)
0000CB7A 337C 0000 0010             		move.w	#0,$10(a1)
0000CB80 3F00                       		move.w	d0,-(sp)
0000CB82 303C 00A7                  		move.w	#$A7,d0
0000CB86 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CB8C 301F                       		move.w	(sp)+,d0
0000CB8E 4A28 0028                  		tst.b	$28(a0)
0000CB92 6B00                       		bmi.s	locret_C2E4
0000CB94 3F00                       		move.w	d0,-(sp)
0000CB96 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB9C 301F                       		move.w	(sp)+,d0
0000CB9E 0C41 0004                  		cmpi.w	#4,d1
0000CBA2 6F00                       		ble.s	loc_C2E0
0000CBA4 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBAA 4A40                       		tst.w	d0
0000CBAC 6A00                       		bpl.s	loc_C2D8
0000CBAE 4468 0010                  		neg.w	$10(a0)
0000CBB2                            
0000CBB2                            loc_C2D8:
0000CBB2 117C 0006 0025             		move.b	#6,$25(a0)
0000CBB8 6000                       		bra.s	locret_C2E4
0000CBBA                            ; ===========================================================================
0000CBBA                            
0000CBBA                            loc_C2E0:
0000CBBA D368 000C                  		add.w	d1,$C(a0)
0000CBBE                            
0000CBBE                            locret_C2E4:
0000CBBE 4E75                       		rts	
0000CBC0                            ; ===========================================================================
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            Map_obj33:
0000CBC0                            	include "_maps\obj33.asm"
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0 0000                       		dc.w byte_C2EA-Map_obj33
0000CBC2 0000                       		dc.w byte_C2F0-Map_obj33
0000CBC4 01                         byte_C2EA:	dc.b 1
0000CBC5 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CBCA 04                         byte_C2F0:	dc.b 4
0000CBCB F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CBD0 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CBD5 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CBDA F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CBE0 00                         		even
0000CBE0 00                         		even
0000CBE0                            
0000CBE0                            ; ===========================================================================
0000CBE0                            ; ---------------------------------------------------------------------------
0000CBE0                            ; Object 34 - zone title cards
0000CBE0                            ; ---------------------------------------------------------------------------
0000CBE0                            Obj34:					; XREF: Obj_Index
0000CBE0 7000                       		moveq	#0,d0
0000CBE2 1028 0024                  		move.b	$24(a0),d0
0000CBE6 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CBEA 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CBEE                            ; ===========================================================================
0000CBEE 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CBF0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CBF2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CBF4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CBF6                            ; ===========================================================================
0000CBF6                            
0000CBF6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CBF6 2248                       		movea.l	a0,a1
0000CBF8 7000                       		moveq	#0,d0
0000CBFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBFE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC04 6600                       		bne.s	Obj34_CheckFZ
0000CC06 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC08                            
0000CC08                            Obj34_CheckFZ:
0000CC08 3400                       		move.w	d0,d2
0000CC0A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC10 6600                       		bne.s	Obj34_LoadConfig
0000CC12 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC14 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC16                            
0000CC16                            Obj34_LoadConfig:
0000CC16 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC1C E948                       		lsl.w	#4,d0
0000CC1E D6C0                       		adda.w	d0,a3
0000CC20 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC26 7203                       		moveq	#3,d1
0000CC28                            
0000CC28                            Obj34_Loop:
0000CC28 12BC 0034                  		move.b	#$34,0(a1)
0000CC2C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC30 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC34 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC38 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC3C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC40 101A                       		move.b	(a2)+,d0
0000CC42 6600                       		bne.s	Obj34_ActNumber
0000CC44 1002                       		move.b	d2,d0
0000CC46                            
0000CC46                            Obj34_ActNumber:
0000CC46 0C00 0007                  		cmpi.b	#7,d0
0000CC4A 6600                       		bne.s	Obj34_MakeSprite
0000CC4C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC50 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CC56 6600                       		bne.s	Obj34_MakeSprite
0000CC58 5300                       		subq.b	#1,d0
0000CC5A                            
0000CC5A                            Obj34_MakeSprite:
0000CC5A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CC5E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CC66 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC6C 137C 0078 0019             		move.b	#$78,$19(a1)
0000CC72 137C 0000 0001             		move.b	#0,1(a1)
0000CC78 137C 0000 0018             		move.b	#0,$18(a1)
0000CC7E 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CC84 43E9 0040                  		lea	$40(a1),a1	; next object
0000CC88 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CC8C                            
0000CC8C                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CC8C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC8E 3028 0030                  		move.w	$30(a0),d0
0000CC92 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CC96 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CC98 6C00                       		bge.s	Obj34_Move
0000CC9A 4441                       		neg.w	d1
0000CC9C                            
0000CC9C                            Obj34_Move:
0000CC9C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCA0                            
0000CCA0                            loc_C3C8:
0000CCA0 3028 0008                  		move.w	8(a0),d0
0000CCA4 6B00                       		bmi.s	locret_C3D8
0000CCA6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCAA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CCAC 6000 0000                  		bra.w	DisplaySprite
0000CCB0                            ; ===========================================================================
0000CCB0                            
0000CCB0                            locret_C3D8:
0000CCB0 4E75                       		rts	
0000CCB2                            ; ===========================================================================
0000CCB2                            
0000CCB2                            Obj34_Wait:				; XREF: Obj34_Index
0000CCB2 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CCB6 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CCB8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CCBC 6000 0000                  		bra.w	DisplaySprite
0000CCC0                            ; ===========================================================================
0000CCC0                            
0000CCC0                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CCC0 4A28 0001                  		tst.b	1(a0)
0000CCC4 6A00                       		bpl.s	Obj34_ChangeArt
0000CCC6 7220                       		moveq	#$20,d1
0000CCC8 3028 0032                  		move.w	$32(a0),d0
0000CCCC B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CCD0 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CCD2 6C00                       		bge.s	Obj34_Move2
0000CCD4 4441                       		neg.w	d1
0000CCD6                            
0000CCD6                            Obj34_Move2:
0000CCD6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCDA 3028 0008                  		move.w	8(a0),d0
0000CCDE 6B00                       		bmi.s	locret_C412
0000CCE0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCE4 6400                       		bcc.s	locret_C412	; if yes, branch
0000CCE6 6000 0000                  		bra.w	DisplaySprite
0000CCEA                            ; ===========================================================================
0000CCEA                            
0000CCEA                            locret_C412:
0000CCEA 4E75                       		rts	
0000CCEC                            ; ===========================================================================
0000CCEC                            
0000CCEC                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CCEC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CCF2 6600                       		bne.s	Obj34_Delete
0000CCF4 7002                       		moveq	#2,d0
0000CCF6 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000CCFC 7000                       		moveq	#0,d0
0000CCFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD02 0640 0015                  		addi.w	#$15,d0
0000CD06 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns
0000CD0C                            
0000CD0C                            Obj34_Delete:
0000CD0C 6000 0000                  		bra.w	DeleteObject
0000CD10                            ; ===========================================================================
0000CD10 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD12 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD14 00E4                       		dc.w $E4
0000CD16 0206                       		dc.b 2,	6
0000CD18 00EA                       		dc.w $EA
0000CD1A 0207                       		dc.b 2,	7
0000CD1C 00E0                       		dc.w $E0
0000CD1E 020A                       		dc.b 2,	$A
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20                            ; Title	card configuration data
0000CD20                            ; Format:
0000CD20                            ; 4 bytes per item (YYYY XXXX)
0000CD20                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD20                            ; ---------------------------------------------------------------------------
0000CD20 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD30 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD40 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CD50 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CD60 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CD70 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CD80 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CD90 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDA0 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDB0                            ; ===========================================================================
0000CDB0                            ; ---------------------------------------------------------------------------
0000CDB0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CDB0                            ; ---------------------------------------------------------------------------
0000CDB0                            
0000CDB0                            Obj39:					; XREF: Obj_Index
0000CDB0 7000                       		moveq	#0,d0
0000CDB2 1028 0024                  		move.b	$24(a0),d0
0000CDB6 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CDBA 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CDBE                            ; ===========================================================================
0000CDBE 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CDC0 0000                       		dc.w loc_C50C-Obj39_Index
0000CDC2 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CDC4                            ; ===========================================================================
0000CDC4                            
0000CDC4                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CDC4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CDC8 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CDCA 4E75                       		rts	
0000CDCC                            ; ===========================================================================
0000CDCC                            
0000CDCC                            Obj39_Main:
0000CDCC 5428 0024                  		addq.b	#2,$24(a0)
0000CDD0 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CDD6 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CDDC 6700                       		beq.s	loc_C4EC	; if not, branch
0000CDDE 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CDE4                            
0000CDE4                            loc_C4EC:
0000CDE4 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CDEA 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CDF2 317C 855E 0002             		move.w	#$855E,2(a0)
0000CDF8 117C 0000 0001             		move.b	#0,1(a0)
0000CDFE 117C 0000 0018             		move.b	#0,$18(a0)
0000CE04                            
0000CE04                            loc_C50C:				; XREF: Obj39_Index
0000CE04 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE06 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE0C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE0E 6500                       		bcs.s	Obj39_Move
0000CE10 4441                       		neg.w	d1
0000CE12                            
0000CE12                            Obj39_Move:
0000CE12 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE16 6000 0000                  		bra.w	DisplaySprite
0000CE1A                            ; ===========================================================================
0000CE1A                            
0000CE1A                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE1A 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE20 5428 0024                  		addq.b	#2,$24(a0)
0000CE24 4E75                       		rts	
0000CE26                            ; ===========================================================================
0000CE26                            
0000CE26                            Obj39_Wait:				; XREF: Obj39_Index
0000CE26 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE2A 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE2E 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE30 0828 0000 001A             		btst	#0,$1A(a0)
0000CE36 6600                       		bne.s	Obj39_Display
0000CE38 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE3C 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE3E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE42 6000 0000                  		bra.w	DisplaySprite
0000CE46                            ; ===========================================================================
0000CE46                            
0000CE46                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE46 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CE4A 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CE4C 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CE52 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CE56 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CE58 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CE5E 6000                       		bra.s	Obj39_Display
0000CE60                            ; ===========================================================================
0000CE60                            
0000CE60                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CE60 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE66                            
0000CE66                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CE66 6000 0000                  		bra.w	DisplaySprite
0000CE6A                            ; ===========================================================================
0000CE6A                            ; ---------------------------------------------------------------------------
0000CE6A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CE6A                            ; ---------------------------------------------------------------------------
0000CE6A                            
0000CE6A                            Obj3A:					; XREF: Obj_Index
0000CE6A 7000                       		moveq	#0,d0
0000CE6C 1028 0024                  		move.b	$24(a0),d0
0000CE70 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CE74 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CE78                            ; ===========================================================================
0000CE78 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CE7A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CE7C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE7E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CE80 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE82 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CE84 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE86 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CE88 0000                       		dc.w loc_C766-Obj3A_Index
0000CE8A                            ; ===========================================================================
0000CE8A                            
0000CE8A                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CE8A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE8E 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CE90 4E75                       		rts	
0000CE92                            ; ===========================================================================
0000CE92                            
0000CE92                            Obj3A_Main:
0000CE92 2248                       		movea.l	a0,a1
0000CE94 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CE9A 7206                       		moveq	#6,d1
0000CE9C                            
0000CE9C                            Obj3A_Loop:
0000CE9C 12BC 003A                  		move.b	#$3A,0(a1)
0000CEA0 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CEA4 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CEA8 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEAC 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEB0 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEB4 101A                       		move.b	(a2)+,d0
0000CEB6 0C00 0006                  		cmpi.b	#6,d0
0000CEBA 6600                       		bne.s	loc_C5CA
0000CEBC D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CEC0                            
0000CEC0                            loc_C5CA:
0000CEC0 1340 001A                  		move.b	d0,$1A(a1)
0000CEC4 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CECC 337C 8580 0002             		move.w	#$8580,2(a1)
0000CED2 137C 0000 0001             		move.b	#0,1(a1)
0000CED8 43E9 0040                  		lea	$40(a1),a1
0000CEDC 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CEE0                            
0000CEE0                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CEE0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEE2 3028 0030                  		move.w	$30(a0),d0
0000CEE6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CEEA 6700                       		beq.s	loc_C61A	; if yes, branch
0000CEEC 6C00                       		bge.s	Obj3A_Move
0000CEEE 4441                       		neg.w	d1
0000CEF0                            
0000CEF0                            Obj3A_Move:
0000CEF0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEF4                            
0000CEF4                            loc_C5FE:				; XREF: loc_C61A
0000CEF4 3028 0008                  		move.w	8(a0),d0
0000CEF8 6B00                       		bmi.s	locret_C60E
0000CEFA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEFE 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF00 6000 0000                  		bra.w	DisplaySprite
0000CF04                            ; ===========================================================================
0000CF04                            
0000CF04                            locret_C60E:
0000CF04 4E75                       		rts	
0000CF06                            ; ===========================================================================
0000CF06                            
0000CF06                            loc_C610:				; XREF: loc_C61A
0000CF06 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF0C 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF10 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF16 67EE                       		beq.s	loc_C610
0000CF18 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF1E 66D4                       		bne.s	loc_C5FE
0000CF20 5428 0024                  		addq.b	#2,$24(a0)
0000CF24 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF2A                            
0000CF2A                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF2A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF2E 6600                       		bne.s	Obj3A_Display
0000CF30 5428 0024                  		addq.b	#2,$24(a0)
0000CF34                            
0000CF34                            Obj3A_Display:
0000CF34 6000 0000                  		bra.w	DisplaySprite
0000CF38                            ; ===========================================================================
0000CF38                            
0000CF38                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF38 6100 0000                  		bsr.w	DisplaySprite
0000CF3C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF42 7000                       		moveq	#0,d0
0000CF44 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF48 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CF4A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF4E 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CF54                            
0000CF54                            Obj3A_RingBonus:
0000CF54 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF58 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CF5A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF5E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF64                            
0000CF64                            Obj3A_ChkBonus:
0000CF64 4A40                       		tst.w	d0		; is there any bonus?
0000CF66 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CF68 303C 00C5                  		move.w	#$C5,d0
0000CF6C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF72 5428 0024                  		addq.b	#2,$24(a0)
0000CF76 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CF7C 6600                       		bne.s	Obj3A_SetDelay
0000CF7E 5828 0024                  		addq.b	#4,$24(a0)
0000CF82                            
0000CF82                            Obj3A_SetDelay:
0000CF82 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF88                            
0000CF88                            locret_C692:
0000CF88 4E75                       		rts	
0000CF8A                            ; ===========================================================================
0000CF8A                            
0000CF8A                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CF8A 4EB9 0000 0000             		jsr	AddPoints
0000CF90 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF94 0200 0003                  		andi.b	#3,d0
0000CF98 66EE                       		bne.s	locret_C692
0000CF9A 303C 00CD                  		move.w	#$CD,d0
0000CF9E 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFA4                            ; ===========================================================================
0000CFA4                            
0000CFA4                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CFA4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFA8 0240 0007                  		andi.w	#7,d0
0000CFAC E748                       		lsl.w	#3,d0
0000CFAE 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CFB2 0241 0003                  		andi.w	#3,d1
0000CFB6 D241                       		add.w	d1,d1
0000CFB8 D041                       		add.w	d1,d0
0000CFBA 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CFBE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CFC2 4A40                       		tst.w	d0
0000CFC4 6600                       		bne.s	Obj3A_ChkSS
0000CFC6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CFCC 6000                       		bra.s	Obj3A_Display2
0000CFCE                            ; ===========================================================================
0000CFCE                            
0000CFCE                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CFCE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CFD2 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CFD6 6700                       		beq.s	loc_C6EA	; if not, branch
0000CFD8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CFDE 6000                       		bra.s	Obj3A_Display2
0000CFE0                            ; ===========================================================================
0000CFE0                            
0000CFE0                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CFE0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CFE6                            
0000CFE6                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CFE6 6000 0000                  		bra.w	DisplaySprite
0000CFEA                            ; ===========================================================================
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA                            ; Level	order array
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D022                            		even
0000D022                            ; ===========================================================================
0000D022                            
0000D022                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D022 7220                       		moveq	#$20,d1		; set horizontal speed
0000D024 3028 0032                  		move.w	$32(a0),d0
0000D028 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D02C 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D02E 6C00                       		bge.s	Obj3A_Move2
0000D030 4441                       		neg.w	d1
0000D032                            
0000D032                            Obj3A_Move2:
0000D032 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D036 3028 0008                  		move.w	8(a0),d0
0000D03A 6B00                       		bmi.s	locret_C748
0000D03C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D040 6400                       		bcc.s	locret_C748	; if yes, branch
0000D042 6000 0000                  		bra.w	DisplaySprite
0000D046                            ; ===========================================================================
0000D046                            
0000D046                            locret_C748:
0000D046 4E75                       		rts	
0000D048                            ; ===========================================================================
0000D048                            
0000D048                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D048 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D04E 6600 0000                  		bne.w	DeleteObject
0000D052 5428 0024                  		addq.b	#2,$24(a0)
0000D056 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D05A 303C 008D                  		move.w	#$8D,d0
0000D05E 4EF9 0000 15CC             		jmp	(PlaySound).l	; play FZ music
0000D064                            ; ===========================================================================
0000D064                            
0000D064                            loc_C766:				; XREF: Obj3A_Index
0000D064 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D068 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D06E 6700 0000                  		beq.w	DeleteObject
0000D072 4E75                       		rts	
0000D074                            ; ===========================================================================
0000D074 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D07A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D07C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D082 0201                       		dc.b 2,	1
0000D084 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D08A 0206                       		dc.b 2,	6
0000D08C 0520 0120 00EC             		dc.w $520, $120, $EC
0000D092 0202                       		dc.b 2,	2
0000D094 0540 0120 00FC             		dc.w $540, $120, $FC
0000D09A 0203                       		dc.b 2,	3
0000D09C 0560 0120 010C             		dc.w $560, $120, $10C
0000D0A2 0204                       		dc.b 2,	4
0000D0A4 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D0AA 0205                       		dc.b 2,	5
0000D0AC                            ; ===========================================================================
0000D0AC                            ; ---------------------------------------------------------------------------
0000D0AC                            ; Object 7E - special stage results screen
0000D0AC                            ; ---------------------------------------------------------------------------
0000D0AC                            
0000D0AC                            Obj7E:					; XREF: Obj_Index
0000D0AC 7000                       		moveq	#0,d0
0000D0AE 1028 0024                  		move.b	$24(a0),d0
0000D0B2 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D0B6 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D0BA                            ; ===========================================================================
0000D0BA 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D0BC 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D0BE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0C0 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D0C2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0C4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0C6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0C8 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D0CA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0CC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0CE 0000                       		dc.w loc_C91A-Obj7E_Index
0000D0D0                            ; ===========================================================================
0000D0D0                            
0000D0D0                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D0D0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D0D4 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D0D6 4E75                       		rts	
0000D0D8                            ; ===========================================================================
0000D0D8                            
0000D0D8                            Obj7E_Main:
0000D0D8 2248                       		movea.l	a0,a1
0000D0DA 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D0E0 7203                       		moveq	#3,d1
0000D0E2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D0E8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D0EA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D0EC                            
0000D0EC                            Obj7E_Loop:
0000D0EC 12BC 007E                  		move.b	#$7E,0(a1)
0000D0F0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D0F4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D0F8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D0FC 135A 0024                  		move.b	(a2)+,$24(a1)
0000D100 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D104 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D10C 337C 8580 0002             		move.w	#$8580,2(a1)
0000D112 137C 0000 0001             		move.b	#0,1(a1)
0000D118 43E9 0040                  		lea	$40(a1),a1
0000D11C 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D120                            
0000D120 7007                       		moveq	#7,d0
0000D122 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D126 6700                       		beq.s	loc_C842
0000D128 7000                       		moveq	#0,d0
0000D12A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D12E 6600                       		bne.s	loc_C842	; if not, branch
0000D130 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D132 317C 0018 0008             		move.w	#$18,8(a0)
0000D138 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D13E                            
0000D13E                            loc_C842:
0000D13E 1140 001A                  		move.b	d0,$1A(a0)
0000D142                            
0000D142                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D142 7210                       		moveq	#$10,d1		; set horizontal speed
0000D144 3028 0030                  		move.w	$30(a0),d0
0000D148 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D14C 6700                       		beq.s	loc_C86C	; if yes, branch
0000D14E 6C00                       		bge.s	Obj7E_Move
0000D150 4441                       		neg.w	d1
0000D152                            
0000D152                            Obj7E_Move:
0000D152 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D156                            
0000D156                            loc_C85A:				; XREF: loc_C86C
0000D156 3028 0008                  		move.w	8(a0),d0
0000D15A 6B00                       		bmi.s	locret_C86A
0000D15C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D160 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D162 6000 0000                  		bra.w	DisplaySprite
0000D166                            ; ===========================================================================
0000D166                            
0000D166                            locret_C86A:
0000D166 4E75                       		rts	
0000D168                            ; ===========================================================================
0000D168                            
0000D168                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D168 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D16E 66E6                       		bne.s	loc_C85A
0000D170 5428 0024                  		addq.b	#2,$24(a0)
0000D174 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D17A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D180                            
0000D180                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D180 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D184 6600                       		bne.s	Obj7E_Display
0000D186 5428 0024                  		addq.b	#2,$24(a0)
0000D18A                            
0000D18A                            Obj7E_Display:
0000D18A 6000 0000                  		bra.w	DisplaySprite
0000D18E                            ; ===========================================================================
0000D18E                            
0000D18E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D18E 6100 0000                  		bsr.w	DisplaySprite
0000D192 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D198 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D19C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D19E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D1A4 700A                       		moveq	#10,d0		; add 10 to score
0000D1A6 4EB9 0000 0000             		jsr	AddPoints
0000D1AC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1B0 0200 0003                  		andi.b	#3,d0
0000D1B4 6600                       		bne.s	locret_C8EA
0000D1B6 303C 00CD                  		move.w	#$CD,d0
0000D1BA 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D1C0 303C 00C5                  		move.w	#$C5,d0
0000D1C4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D1CA 5428 0024                  		addq.b	#2,$24(a0)
0000D1CE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1D4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D1DA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D1DC 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D1E2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D1E6                            
0000D1E6                            locret_C8EA:
0000D1E6 4E75                       		rts	
0000D1E8                            ; ===========================================================================
0000D1E8                            
0000D1E8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D1E8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1EE 6000 0000                  		bra.w	DisplaySprite
0000D1F2                            ; ===========================================================================
0000D1F2                            
0000D1F2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D1F2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D1F8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D1FE 303C 00BF                  		move.w	#$BF,d0
0000D202 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play continues music
0000D208 5428 0024                  		addq.b	#2,$24(a0)
0000D20C 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D212 6000 0000                  		bra.w	DisplaySprite
0000D216                            ; ===========================================================================
0000D216                            
0000D216                            loc_C91A:				; XREF: Obj7E_Index
0000D216 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D21A 0200 000F                  		andi.b	#$F,d0
0000D21E 6600                       		bne.s	Obj7E_Display2
0000D220 0868 0000 001A             		bchg	#0,$1A(a0)
0000D226                            
0000D226                            Obj7E_Display2:
0000D226 6000 0000                  		bra.w	DisplaySprite
0000D22A                            ; ===========================================================================
0000D22A 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D230 0200                       		dc.b 2,	0		; rountine number, frame number
0000D232 0320 0120 0118             		dc.w $320, $120, $118
0000D238 0201                       		dc.b 2,	1
0000D23A 0360 0120 0128             		dc.w $360, $120, $128
0000D240 0202                       		dc.b 2,	2
0000D242 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D248 0203                       		dc.b 2,	3
0000D24A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D250 0206                       		dc.b 2,	6
0000D252                            ; ===========================================================================
0000D252                            ; ---------------------------------------------------------------------------
0000D252                            ; Object 7F - chaos emeralds from the special stage results screen
0000D252                            ; ---------------------------------------------------------------------------
0000D252                            
0000D252                            Obj7F:					; XREF: Obj_Index
0000D252 7000                       		moveq	#0,d0
0000D254 1028 0024                  		move.b	$24(a0),d0
0000D258 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D25C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D260                            ; ===========================================================================
0000D260 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D262 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D264                            
0000D264                            ; ---------------------------------------------------------------------------
0000D264                            ; X-axis positions for chaos emeralds
0000D264                            ; ---------------------------------------------------------------------------
0000D264 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D270                            ; ===========================================================================
0000D270                            
0000D270                            Obj7F_Main:				; XREF: Obj7F_Index
0000D270 2248                       		movea.l	a0,a1
0000D272 45F9 0000 D264             		lea	(Obj7F_PosData).l,a2
0000D278 7400                       		moveq	#0,d2
0000D27A 7200                       		moveq	#0,d1
0000D27C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D280 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D282 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D286                            
0000D286                            Obj7F_Loop:
0000D286 12BC 007F                  		move.b	#$7F,0(a1)
0000D28A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D28E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D294 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D298 1633 2000                  		move.b	(a3,d2.w),d3
0000D29C 1343 001A                  		move.b	d3,$1A(a1)
0000D2A0 1343 001C                  		move.b	d3,$1C(a1)
0000D2A4 5202                       		addq.b	#1,d2
0000D2A6 5429 0024                  		addq.b	#2,$24(a1)
0000D2AA 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D2B2 337C 8541 0002             		move.w	#$8541,2(a1)
0000D2B8 137C 0000 0001             		move.b	#0,1(a1)
0000D2BE 43E9 0040                  		lea	$40(a1),a1	; next object
0000D2C2 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D2C6                            
0000D2C6                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D2C6 1028 001A                  		move.b	$1A(a0),d0
0000D2CA 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D2D0 0C00 0006                  		cmpi.b	#6,d0
0000D2D4 6600                       		bne.s	Obj7F_Display
0000D2D6 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D2DC                            
0000D2DC                            Obj7F_Display:
0000D2DC 6000 0000                  		bra.w	DisplaySprite
0000D2E0                            ; ===========================================================================
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0                            ; Sprite mappings - zone title cards
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0                            Map_obj34:
0000D2E0                                    include "_maps\obj34.asm"
0000D2E0                            Map_c5df:
0000D2E0 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D2E2 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D2E4 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D2E6 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D2E8 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D2EA 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D2EC 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D2EE 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D2F0 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D2F2 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D2F4 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D2F6 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D2F8 0C                         Map_c5df_18: 	dc.b $C
0000D2F9 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D2FE F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D303 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D308 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D30D F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D312 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D317 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D31C F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D321 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D326 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D32B F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D330 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D335 16                         Map_c5df_55: 	dc.b $16
0000D336 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D33B F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D340 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D345 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D34A F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D34F F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D354 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D359 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D35E F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D363 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D368 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D36D F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D372 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D377 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D37C F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D381 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D386 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D38B F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D390 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D395 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D39A F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D39F F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D3A4 05                         Map_c5df_C4: 	dc.b $5
0000D3A5 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D3AA F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D3AF F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D3B4 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D3B9 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D3BE 11                         Map_c5df_DE: 	dc.b $11
0000D3BF F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D3C4 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D3C9 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D3CE F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D3D3 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D3D8 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D3DD F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D3E2 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D3E7 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D3EC F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D3F1 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D3F6 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D3FB F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D400 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D405 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D40A F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D40F F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D414 15                         Map_c5df_134: 	dc.b $15
0000D415 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D41A F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D41F F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D424 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D429 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D42E F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D433 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D438 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D43D F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D442 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D447 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D44C F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D451 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D456 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D45B F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D460 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D465 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D46A F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D46F F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D474 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D479 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D47E 07                         Map_c5df_19E: 	dc.b $7
0000D47F F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D484 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D489 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D48E F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D493 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D498 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D49D F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4A2 04                         Map_c5df_1C2: 	dc.b $4
0000D4A3 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4A8 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D4AD F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D4B2 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D4B7 02                         Map_c5df_1D7: 	dc.b $2
0000D4B8 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4BD F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D4C2 02                         Map_c5df_1E2: 	dc.b $2
0000D4C3 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4C8 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D4CD 02                         Map_c5df_1ED: 	dc.b $2
0000D4CE 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4D3 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D4D8 0D                         Map_c5df_1F8: 	dc.b $D
0000D4D9 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D4DE E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D4E3 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D4E8 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D4ED 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D4F2 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D4F7 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D4FC FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D501 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D506 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D50B FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D510 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D515 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D51A 05                         Map_c5df_23A: 	dc.b $5
0000D51B F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D520 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D525 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D52A F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D52F F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D534                            	even
0000D534                            	even
0000D534                            ; ---------------------------------------------------------------------------
0000D534                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D534                            ; ---------------------------------------------------------------------------
0000D534                            Map_obj39:
0000D534                            	include "_maps\obj39.asm"
0000D534                            ; ---------------------------------------------------------------------------
0000D534                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D534                            ; ---------------------------------------------------------------------------
0000D534 0000                       		dc.w byte_CBAC-Map_obj39
0000D536 0000                       		dc.w byte_CBB7-Map_obj39
0000D538 0000                       		dc.w byte_CBC2-Map_obj39
0000D53A 0000                       		dc.w byte_CBCD-Map_obj39
0000D53C 02                         byte_CBAC:	dc.b 2
0000D53D F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D542 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D547 02                         byte_CBB7:	dc.b 2
0000D548 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D54D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D552 02                         byte_CBC2:	dc.b 2
0000D553 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D558 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D55D 02                         byte_CBCD:	dc.b 2
0000D55E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D563 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D568                            		even
0000D568                            		even
0000D568                            
0000D568                            ; ---------------------------------------------------------------------------
0000D568                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D568                            ; ---------------------------------------------------------------------------
0000D568 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D56A 0000                       		dc.w byte_CC13-Map_obj3A
0000D56C 0000                       		dc.w byte_CC32-Map_obj3A
0000D56E 0000                       		dc.w byte_CC51-Map_obj3A
0000D570 0000                       		dc.w byte_CC75-Map_obj3A
0000D572                            		;dc.w byte_CB47-Map_obj3A
0000D572                            		;dc.w byte_CB26-Map_obj3A
0000D572                            		;dc.w byte_CB31-Map_obj3A
0000D572                            		;dc.w byte_CB3C-Map_obj3A
0000D572 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D573 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D578 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D57D F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D582 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D587 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D58C F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D591 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D596 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D59B F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D5A0 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D5A5 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D5AA F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D5AF F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D5B4 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D5B9 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D5BE 06                         byte_CC13:	dc.b 6			; PASSED
0000D5BF F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D5C4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D5C9 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D5CE F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D5D3 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D5D8 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D5DD 06                         byte_CC32:	dc.b 6			; SCORE
0000D5DE F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D5E3 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D5E8 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D5ED F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D5F2 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D5F7 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D5FC 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D5FD F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D602 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D607 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D60C F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D611 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D616 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D61B F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D620 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D621 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D626 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D62B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D630 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D635 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D63A F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D63F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D644                            		even
0000D644                            ; ---------------------------------------------------------------------------
0000D644                            ; Sprite mappings - special stage results screen
0000D644                            ; ---------------------------------------------------------------------------
0000D644 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D646 0000                       		dc.w byte_CCEE-Map_obj7E
0000D648 0000                       		dc.w byte_CD0D-Map_obj7E
0000D64A                            		;dc.w byte_CB47-Map_obj7E
0000D64A 0000                       		dc.w byte_CD31-Map_obj7E
0000D64C 0000                       		dc.w byte_CD46-Map_obj7E
0000D64E 0000                       		dc.w byte_CD5B-Map_obj7E
0000D650 0000                       		dc.w byte_CD6B-Map_obj7E
0000D652 0000                       		dc.w byte_CDA8-Map_obj7E
0000D654 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D655 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D65A F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D65F F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D664 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D669 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D66E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D673 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D678 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D67D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D682 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D687 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D68C F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D691 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D696 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D697 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D69C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D6A1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D6A6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D6AB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D6B0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D6B5 07                         byte_CD0D:	dc.b 7
0000D6B6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D6BB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D6C0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D6C5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D6CA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D6CF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D6D4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D6D9 04                         byte_CD31:	dc.b 4
0000D6DA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D6DF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D6E4 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D6E9 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D6EE 04                         byte_CD46:	dc.b 4
0000D6EF F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D6F4 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D6F9 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D6FE F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D703 03                         byte_CD5B:	dc.b 3
0000D704 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D709 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D70E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D713 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D714 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D719 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D71E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D723 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D728 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D72D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D732 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D737 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D73C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D741 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D746 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D74B F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D750 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D751 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D756 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D75B F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D760 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D765 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D76A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D76F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D774 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D779 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D77E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D783 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D788 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D78D F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D792 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D797 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D79C                            		even
0000D79C                            ; ---------------------------------------------------------------------------
0000D79C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D79C                            ; ---------------------------------------------------------------------------
0000D79C                            Map_obj7F:
0000D79C                            	include "_maps\obj7F.asm"
0000D79C                            ; ---------------------------------------------------------------------------
0000D79C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D79C                            ; ---------------------------------------------------------------------------
0000D79C 0000                       		dc.w byte_CE02-Map_obj7F
0000D79E 0000                       		dc.w byte_CE08-Map_obj7F
0000D7A0 0000                       		dc.w byte_CE0E-Map_obj7F
0000D7A2 0000                       		dc.w byte_CE14-Map_obj7F
0000D7A4 0000                       		dc.w byte_CE1A-Map_obj7F
0000D7A6 0000                       		dc.w byte_CE20-Map_obj7F
0000D7A8 0000                       		dc.w byte_CE26-Map_obj7F
0000D7AA 01                         byte_CE02:	dc.b 1
0000D7AB F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D7B0 01                         byte_CE08:	dc.b 1
0000D7B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D7B6 01                         byte_CE0E:	dc.b 1
0000D7B7 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D7BC 01                         byte_CE14:	dc.b 1
0000D7BD F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D7C2 01                         byte_CE1A:	dc.b 1
0000D7C3 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D7C8 01                         byte_CE20:	dc.b 1
0000D7C9 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D7CE 00                         byte_CE26:	dc.b 0			; Blank frame
0000D7D0 00                         		even
0000D7D0 00                         		even
0000D7D0                            
0000D7D0                            ; ===========================================================================
0000D7D0                            ; ---------------------------------------------------------------------------
0000D7D0                            ; Object 36 - spikes
0000D7D0                            ; ---------------------------------------------------------------------------
0000D7D0                            
0000D7D0                            Obj36:					; XREF: Obj_Index
0000D7D0 7000                       		moveq	#0,d0
0000D7D2 1028 0024                  		move.b	$24(a0),d0
0000D7D6 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D7DA 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D7DE                            ; ===========================================================================
0000D7DE 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D7E0 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D7E2                            
0000D7E2 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D7E4 0110                       		dc.b 1,	$10
0000D7E6 0204                       		dc.b 2,	4
0000D7E8 031C                       		dc.b 3,	$1C
0000D7EA 0440                       		dc.b 4,	$40
0000D7EC 0510                       		dc.b 5,	$10
0000D7EE                            ; ===========================================================================
0000D7EE                            
0000D7EE                            Obj36_Main:				; XREF: Obj36_Index
0000D7EE 5428 0024                  		addq.b	#2,$24(a0)
0000D7F2 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D7FA 317C 051B 0002             		move.w	#$51B,2(a0)
0000D800 0028 0004 0001             		ori.b	#4,1(a0)
0000D806 117C 0004 0018             		move.b	#4,$18(a0)
0000D80C 1028 0028                  		move.b	$28(a0),d0
0000D810 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D816 0240 00F0                  		andi.w	#$F0,d0
0000D81A 43F9 0000 D7E2             		lea	(Obj36_Var).l,a1
0000D820 E648                       		lsr.w	#3,d0
0000D822 D2C0                       		adda.w	d0,a1
0000D824 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D828 1159 0019                  		move.b	(a1)+,$19(a0)
0000D82C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D832 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D838                            
0000D838                            Obj36_Solid:				; XREF: Obj36_Index
0000D838 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D83C 343C 0004                  		move.w	#4,d2
0000D840 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D846 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D848 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D84E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D850 343C 0014                  		move.w	#$14,d2
0000D854                            
0000D854                            ; Spikes types $1x and $5x face	sideways
0000D854                            
0000D854                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D854 323C 001B                  		move.w	#$1B,d1
0000D858 3602                       		move.w	d2,d3
0000D85A 5243                       		addq.w	#1,d3
0000D85C 3828 0008                  		move.w	8(a0),d4
0000D860 6100 0000                  		bsr.w	SolidObject
0000D864 0828 0003 0022             		btst	#3,$22(a0)
0000D86A 6600                       		bne.s	Obj36_Display
0000D86C 0C44 0001                  		cmpi.w	#1,d4
0000D870 6700                       		beq.s	Obj36_Hurt
0000D872 6000                       		bra.s	Obj36_Display
0000D874                            ; ===========================================================================
0000D874                            
0000D874                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D874                            
0000D874                            Obj36_Upright:				; XREF: Obj36_Solid
0000D874 7200                       		moveq	#0,d1
0000D876 1228 0019                  		move.b	$19(a0),d1
0000D87A 0641 000B                  		addi.w	#$B,d1
0000D87E 343C 0010                  		move.w	#$10,d2
0000D882 363C 0011                  		move.w	#$11,d3
0000D886 3828 0008                  		move.w	8(a0),d4
0000D88A 6100 0000                  		bsr.w	SolidObject
0000D88E 0828 0003 0022             		btst	#3,$22(a0)
0000D894 6600                       		bne.s	Obj36_Hurt
0000D896 4A44                       		tst.w	d4
0000D898 6A00                       		bpl.s	Obj36_Display
0000D89A                            
0000D89A                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D89A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D89E 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D8A0 2F08                       		move.l	a0,-(sp)
0000D8A2 2448                       		movea.l	a0,a2
0000D8A4 41F8 D000                  		lea	($FFFFD000).w,a0
0000D8A8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D8AE 6400                       		bcc.s	loc_CF20
0000D8B0 2628 000C                  		move.l	$C(a0),d3
0000D8B4 3028 0012                  		move.w	$12(a0),d0
0000D8B8 48C0                       		ext.l	d0
0000D8BA E180                       		asl.l	#8,d0
0000D8BC 9680                       		sub.l	d0,d3
0000D8BE 2143 000C                  		move.l	d3,$C(a0)
0000D8C2 4EB9 0000 0000             		jsr	HurtSonic
0000D8C8                            
0000D8C8                            loc_CF20:
0000D8C8 205F                       		movea.l	(sp)+,a0
0000D8CA                            
0000D8CA                            Obj36_Display:
0000D8CA 6100 0000                  		bsr.w	DisplaySprite
0000D8CE 3028 0030                  		move.w	$30(a0),d0
0000D8D2 0240 FF80                  		andi.w	#$FF80,d0
0000D8D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8DA 0441 0080                  		subi.w	#$80,d1
0000D8DE 0241 FF80                  		andi.w	#$FF80,d1
0000D8E2 9041                       		sub.w	d1,d0
0000D8E4 0C40 0280                  		cmpi.w	#$280,d0
0000D8E8 6200 0000                  		bhi.w	DeleteObject
0000D8EC 4E75                       		rts	
0000D8EE                            ; ===========================================================================
0000D8EE                            
0000D8EE                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D8EE 7000                       		moveq	#0,d0
0000D8F0 1028 0028                  		move.b	$28(a0),d0
0000D8F4 D040                       		add.w	d0,d0
0000D8F6 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D8FA 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D8FE                            ; ===========================================================================
0000D8FE 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D900 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D902 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D904                            ; ===========================================================================
0000D904                            
0000D904                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D904 4E75                       		rts			; don't move the object
0000D906                            ; ===========================================================================
0000D906                            
0000D906                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D906 6100 0000                  		bsr.w	Obj36_Wait
0000D90A 7000                       		moveq	#0,d0
0000D90C 1028 0034                  		move.b	$34(a0),d0
0000D910 D068 0032                  		add.w	$32(a0),d0
0000D914 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D918 4E75                       		rts	
0000D91A                            ; ===========================================================================
0000D91A                            
0000D91A                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D91A 6100 0000                  		bsr.w	Obj36_Wait
0000D91E 7000                       		moveq	#0,d0
0000D920 1028 0034                  		move.b	$34(a0),d0
0000D924 D068 0030                  		add.w	$30(a0),d0
0000D928 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D92C 4E75                       		rts	
0000D92E                            ; ===========================================================================
0000D92E                            
0000D92E                            Obj36_Wait:
0000D92E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D932 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D934 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D938 6600                       		bne.s	locret_CFE6
0000D93A 4A28 0001                  		tst.b	1(a0)
0000D93E 6A00                       		bpl.s	locret_CFE6
0000D940 303C 00B6                  		move.w	#$B6,d0
0000D944 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D94A 6000                       		bra.s	locret_CFE6
0000D94C                            ; ===========================================================================
0000D94C                            
0000D94C                            loc_CFA4:
0000D94C 4A68 0036                  		tst.w	$36(a0)
0000D950 6700                       		beq.s	loc_CFC6
0000D952 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D958 6400                       		bcc.s	locret_CFE6
0000D95A 317C 0000 0034             		move.w	#0,$34(a0)
0000D960 317C 0000 0036             		move.w	#0,$36(a0)
0000D966 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D96C 6000                       		bra.s	locret_CFE6
0000D96E                            ; ===========================================================================
0000D96E                            
0000D96E                            loc_CFC6:
0000D96E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D974 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D97A 6500                       		bcs.s	locret_CFE6
0000D97C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D982 317C 0001 0036             		move.w	#1,$36(a0)
0000D988 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D98E                            
0000D98E                            locret_CFE6:
0000D98E 4E75                       		rts	
0000D990                            ; ===========================================================================
0000D990                            ; ---------------------------------------------------------------------------
0000D990                            ; Sprite mappings - spikes
0000D990                            ; ---------------------------------------------------------------------------
0000D990                            Map_obj36:
0000D990                            	include "_maps\obj36.asm"
0000D990                            Map_obj36_inner:
0000D990 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D992 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D994 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D996 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D998 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D99A 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D99C 03                         Map_obj36_inner_C: 	dc.b $3
0000D99D F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D9A2 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9A7 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D9AC 03                         Map_obj36_inner_1C: 	dc.b $3
0000D9AD EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D9B2 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D9B7 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D9BC 01                         Map_obj36_inner_2C: 	dc.b $1
0000D9BD F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9C2 03                         Map_obj36_inner_32: 	dc.b $3
0000D9C3 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D9C8 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9CD F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D9D2 06                         Map_obj36_inner_42: 	dc.b $6
0000D9D3 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D9D8 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D9DD F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D9E2 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D9E7 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D9EC F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D9F1 01                         Map_obj36_inner_61: 	dc.b $1
0000D9F2 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D9F8 00                         	even
0000D9F8 00                         	even
0000D9F8                            
0000D9F8                            ; ===========================================================================
0000D9F8                            ; ---------------------------------------------------------------------------
0000D9F8                            ; Object 3B - purple rock (GHZ)
0000D9F8                            ; ---------------------------------------------------------------------------
0000D9F8                            
0000D9F8                            Obj3B:					; XREF: Obj_Index
0000D9F8 7000                       		moveq	#0,d0
0000D9FA 1028 0024                  		move.b	$24(a0),d0
0000D9FE 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA02 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA06                            ; ===========================================================================
0000DA06 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA08 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA0A                            ; ===========================================================================
0000DA0A                            
0000DA0A                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA0A 5428 0024                  		addq.b	#2,$24(a0)
0000DA0E 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA16 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA1C 117C 0004 0001             		move.b	#4,1(a0)
0000DA22 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA28 117C 0004 0018             		move.b	#4,$18(a0)
0000DA2E                            
0000DA2E                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA2E 323C 001B                  		move.w	#$1B,d1
0000DA32 343C 0010                  		move.w	#$10,d2
0000DA36 363C 0010                  		move.w	#$10,d3
0000DA3A 3828 0008                  		move.w	8(a0),d4
0000DA3E 6100 0000                  		bsr.w	SolidObject
0000DA42 6100 0000                  		bsr.w	DisplaySprite
0000DA46 3028 0008                  		move.w	8(a0),d0
0000DA4A 0240 FF80                  		andi.w	#$FF80,d0
0000DA4E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA52 0441 0080                  		subi.w	#$80,d1
0000DA56 0241 FF80                  		andi.w	#$FF80,d1
0000DA5A 9041                       		sub.w	d1,d0
0000DA5C 0C40 0280                  		cmpi.w	#$280,d0
0000DA60 6200 0000                  		bhi.w	DeleteObject
0000DA64 4E75                       		rts	
0000DA66                            ; ===========================================================================
0000DA66                            ; ---------------------------------------------------------------------------
0000DA66                            ; Object 49 - waterfall	sound effect (GHZ)
0000DA66                            ; ---------------------------------------------------------------------------
0000DA66                            
0000DA66                            Obj49:					; XREF: Obj_Index
0000DA66 7000                       		moveq	#0,d0
0000DA68 1028 0024                  		move.b	$24(a0),d0
0000DA6C 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DA70 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DA74                            ; ===========================================================================
0000DA74 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DA76 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DA78                            ; ===========================================================================
0000DA78                            
0000DA78                            Obj49_Main:				; XREF: Obj49_Index
0000DA78 5428 0024                  		addq.b	#2,$24(a0)
0000DA7C 117C 0004 0001             		move.b	#4,1(a0)
0000DA82                            
0000DA82                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DA82 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DA86 0200 003F                  		andi.b	#$3F,d0
0000DA8A 6600                       		bne.s	Obj49_ChkDel
0000DA8C 303C 00D0                  		move.w	#$D0,d0
0000DA90 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DA96                            
0000DA96                            Obj49_ChkDel:
0000DA96 3028 0008                  		move.w	8(a0),d0
0000DA9A 0240 FF80                  		andi.w	#$FF80,d0
0000DA9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAA2 0441 0080                  		subi.w	#$80,d1
0000DAA6 0241 FF80                  		andi.w	#$FF80,d1
0000DAAA 9041                       		sub.w	d1,d0
0000DAAC 0C40 0280                  		cmpi.w	#$280,d0
0000DAB0 6200 0000                  		bhi.w	DeleteObject
0000DAB4 4E75                       		rts	
0000DAB6                            ; ===========================================================================
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            ; Sprite mappings - purple rock	(GHZ)
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            Map_obj3B:
0000DAB6                            	include "_maps\obj3B.asm"
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            ; Sprite mappings - purple rock	(GHZ)
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6 0000                       		dc.w byte_D110-Map_obj3B
0000DAB8 02                         byte_D110:	dc.b 2
0000DAB9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DABE F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DAC4 00                         		even
0000DAC4 00                         		even
0000DAC4                            
0000DAC4                            ; ===========================================================================
0000DAC4                            ; ---------------------------------------------------------------------------
0000DAC4                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DAC4                            ; ---------------------------------------------------------------------------
0000DAC4                            
0000DAC4                            Obj3C:					; XREF: Obj_Index
0000DAC4 7000                       		moveq	#0,d0
0000DAC6 1028 0024                  		move.b	$24(a0),d0
0000DACA 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DACE 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DAD2 6000 0000                  		bra.w	MarkObjGone
0000DAD6                            ; ===========================================================================
0000DAD6 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DAD8 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DADA 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DADC                            ; ===========================================================================
0000DADC                            
0000DADC                            Obj3C_Main:				; XREF: Obj3C_Index
0000DADC 5428 0024                  		addq.b	#2,$24(a0)
0000DAE0 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DAE8 317C 450F 0002             		move.w	#$450F,2(a0)
0000DAEE 117C 0004 0001             		move.b	#4,1(a0)
0000DAF4 117C 0010 0019             		move.b	#$10,$19(a0)
0000DAFA 117C 0004 0018             		move.b	#4,$18(a0)
0000DB00 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB06                            
0000DB06                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB06 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB0C 323C 001B                  		move.w	#$1B,d1
0000DB10 343C 0020                  		move.w	#$20,d2
0000DB14 363C 0020                  		move.w	#$20,d3
0000DB18 3828 0008                  		move.w	8(a0),d4
0000DB1C 6100 0000                  		bsr.w	SolidObject
0000DB20 0828 0005 0022             		btst	#5,$22(a0)
0000DB26 6600                       		bne.s	Obj3C_ChkRoll
0000DB28                            
0000DB28                            locret_D180:
0000DB28 4E75                       		rts	
0000DB2A                            ; ===========================================================================
0000DB2A                            
0000DB2A                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB2A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB30 66F6                       		bne.s	locret_D180	; if not, branch
0000DB32 3028 0030                  		move.w	$30(a0),d0
0000DB36 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB38 4440                       		neg.w	d0
0000DB3A                            
0000DB3A                            Obj3C_ChkSpeed:
0000DB3A 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DB3E 65E8                       		bcs.s	locret_D180	; if not, branch
0000DB40 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DB46 5869 0008                  		addq.w	#4,8(a1)
0000DB4A 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DB50 3028 0008                  		move.w	8(a0),d0
0000DB54 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DB58 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DB5A 5169 0008                  		subq.w	#8,8(a1)
0000DB5E 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DB64                            
0000DB64                            Obj3C_Smash:
0000DB64 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DB6A 08A8 0005 0022             		bclr	#5,$22(a0)
0000DB70 08A9 0005 0022             		bclr	#5,$22(a1)
0000DB76 7207                       		moveq	#7,d1		; load 8 fragments
0000DB78 343C 0070                  		move.w	#$70,d2
0000DB7C 6100                       		bsr.s	SmashObject
0000DB7E                            
0000DB7E                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DB7E 6100 0000                  		bsr.w	SpeedToPos
0000DB82 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DB88 6100 0000                  		bsr.w	DisplaySprite
0000DB8C 4A28 0001                  		tst.b	1(a0)
0000DB90 6A00 0000                  		bpl.w	DeleteObject
0000DB94 4E75                       		rts	
0000DB96                            
0000DB96                            ; ---------------------------------------------------------------------------
0000DB96                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DB96                            ; ---------------------------------------------------------------------------
0000DB96                            
0000DB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB96                            
0000DB96                            
0000DB96                            SmashObject:				; XREF: Obj3C_Smash
0000DB96 7000                       		moveq	#0,d0
0000DB98 1028 001A                  		move.b	$1A(a0),d0
0000DB9C D040                       		add.w	d0,d0
0000DB9E 2668 0004                  		movea.l	4(a0),a3
0000DBA2 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DBA6 524B                       		addq.w	#1,a3
0000DBA8 08E8 0005 0001             		bset	#5,1(a0)
0000DBAE 1810                       		move.b	0(a0),d4
0000DBB0 1A28 0001                  		move.b	1(a0),d5
0000DBB4 2248                       		movea.l	a0,a1
0000DBB6 6000                       		bra.s	Smash_LoadFrag
0000DBB8                            ; ===========================================================================
0000DBB8                            
0000DBB8                            Smash_Loop:
0000DBB8 6100 0000                  		bsr.w	SingleObjLoad
0000DBBC 6600                       		bne.s	Smash_PlaySnd
0000DBBE 5A4B                       		addq.w	#5,a3
0000DBC0                            
0000DBC0                            Smash_LoadFrag:				; XREF: SmashObject
0000DBC0 137C 0004 0024             		move.b	#4,$24(a1)
0000DBC6 1284                       		move.b	d4,0(a1)
0000DBC8 234B 0004                  		move.l	a3,4(a1)
0000DBCC 1345 0001                  		move.b	d5,1(a1)
0000DBD0 3368 0008 0008             		move.w	8(a0),8(a1)
0000DBD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DBDC 3368 0002 0002             		move.w	2(a0),2(a1)
0000DBE2 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DBE8 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DBEE 335C 0010                  		move.w	(a4)+,$10(a1)
0000DBF2 335C 0012                  		move.w	(a4)+,$12(a1)
0000DBF6 B3C8                       		cmpa.l	a0,a1
0000DBF8 6400                       		bcc.s	loc_D268
0000DBFA 2F08                       		move.l	a0,-(sp)
0000DBFC 2049                       		movea.l	a1,a0
0000DBFE 6100 0000                  		bsr.w	SpeedToPos
0000DC02 D568 0012                  		add.w	d2,$12(a0)
0000DC06 205F                       		movea.l	(sp)+,a0
0000DC08 6100 0000                  		bsr.w	DisplaySprite2
0000DC0C                            
0000DC0C                            loc_D268:
0000DC0C 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC10                            
0000DC10                            Smash_PlaySnd:
0000DC10 303C 00CB                  		move.w	#$CB,d0
0000DC14 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC1A                            ; End of function SmashObject
0000DC1A                            
0000DC1A                            ; ===========================================================================
0000DC1A                            ; Smashed block	fragment speeds
0000DC1A                            ;
0000DC1A 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC1E 0600 FF00                  		dc.w $600, $FF00
0000DC22 0600 0100                  		dc.w $600, $100
0000DC26 0400 0500                  		dc.w $400, $500
0000DC2A 0600 FA00                  		dc.w $600, $FA00
0000DC2E 0800 FE00                  		dc.w $800, $FE00
0000DC32 0800 0200                  		dc.w $800, $200
0000DC36 0600 0600                  		dc.w $600, $600
0000DC3A                            
0000DC3A FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DC3E F800 FE00                  		dc.w $F800, $FE00
0000DC42 F800 0200                  		dc.w $F800, $200
0000DC46 FA00 0600                  		dc.w $FA00, $600
0000DC4A FC00 FB00                  		dc.w $FC00, $FB00
0000DC4E FA00 FF00                  		dc.w $FA00, $FF00
0000DC52 FA00 0100                  		dc.w $FA00, $100
0000DC56 FC00 0500                  		dc.w $FC00, $500
0000DC5A                            ; ---------------------------------------------------------------------------
0000DC5A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC5A                            ; ---------------------------------------------------------------------------
0000DC5A                            Map_obj3C:
0000DC5A                            	include "_maps\obj3C.asm"
0000DC5A                            ; ---------------------------------------------------------------------------
0000DC5A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC5A                            ; ---------------------------------------------------------------------------
0000DC5A 0000                       		dc.w byte_D2BC-Map_obj3C
0000DC5C 0000                       		dc.w byte_D2E5-Map_obj3C
0000DC5E 0000                       		dc.w byte_D30E-Map_obj3C
0000DC60 08                         byte_D2BC:	dc.b 8
0000DC61 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DC66 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DC6B 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DC70 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DC75 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DC7A F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DC7F 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DC84 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DC89 08                         byte_D2E5:	dc.b 8
0000DC8A E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DC8F F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DC94 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DC99 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DC9E E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCA3 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCA8 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCAD 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCB2 08                         byte_D30E:	dc.b 8
0000DCB3 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCB8 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCBD 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCC2 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCC7 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DCCC F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DCD1 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DCD6 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DCDC 00                         		even
0000DCDC 00                         		even
0000DCDC                            
0000DCDC                            ; ---------------------------------------------------------------------------
0000DCDC                            ; Object code loading subroutine
0000DCDC                            ; ---------------------------------------------------------------------------
0000DCDC                            
0000DCDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCDC                            
0000DCDC                            
0000DCDC                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DCDC 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DCE0 7E7F                       		moveq	#$7F,d7
0000DCE2 7000                       		moveq	#0,d0
0000DCE4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DCEA 6400                       		bcc.s	loc_D362
0000DCEC                            
0000DCEC                            loc_D348:
0000DCEC 1010                       		move.b	(a0),d0		; load object number from RAM
0000DCEE 6700                       		beq.s	loc_D358
0000DCF0 D040                       		add.w	d0,d0
0000DCF2 D040                       		add.w	d0,d0
0000DCF4 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DCF8 4E91                       		jsr	(a1)		; run the object's code
0000DCFA 7000                       		moveq	#0,d0
0000DCFC                            
0000DCFC                            loc_D358:
0000DCFC 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD00 51CF FFEA                  		dbf	d7,loc_D348
0000DD04 4E75                       		rts	
0000DD06                            ; ===========================================================================
0000DD06                            
0000DD06                            loc_D362:
0000DD06 7E1F                       		moveq	#$1F,d7
0000DD08 61E2                       		bsr.s	loc_D348
0000DD0A 7E5F                       		moveq	#$5F,d7
0000DD0C                            
0000DD0C                            loc_D368:
0000DD0C 7000                       		moveq	#0,d0
0000DD0E 1010                       		move.b	(a0),d0
0000DD10 6700                       		beq.s	loc_D378
0000DD12 4A28 0001                  		tst.b	1(a0)
0000DD16 6A00                       		bpl.s	loc_D378
0000DD18 6100 0000                  		bsr.w	DisplaySprite
0000DD1C                            
0000DD1C                            loc_D378:
0000DD1C 41E8 0040                  		lea	$40(a0),a0
0000DD20                            
0000DD20                            loc_D37C:
0000DD20 51CF FFEA                  		dbf	d7,loc_D368
0000DD24 4E75                       		rts	
0000DD26                            ; End of function ObjectsLoad
0000DD26                            
0000DD26                            ; ===========================================================================
0000DD26                            ; ---------------------------------------------------------------------------
0000DD26                            ; Object pointers
0000DD26                            ; ---------------------------------------------------------------------------
0000DD26                            Obj_Index:
0000DD26                            	include "_inc\Object pointers.asm"
0000DD26                            ; ---------------------------------------------------------------------------
0000DD26                            ; Object pointers
0000DD26                            ; ---------------------------------------------------------------------------
0000DD26 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD36 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DD46 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DD56 0000 0000 0000 AF50 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DD66 0000 7AEC 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DD76 0000 8112 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DD86 0000 8960 0000 8A5A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DD96 0000 90A4 0000 9392 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DDA6 0000 0000 0000 A04C 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DDB6 0000 A384 0000 A970 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DDC6 0000 9CA8 0000 917A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DDD6 0000 B548 0000 AB64 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DDE6 0000 BF5C 0000 C60A 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DDF6 0000 BABA 0000 D7D0 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE06 0000 CDB0 0000 CE6A 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE16 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE26 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE36 0000 C278 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DE46 0000 DA66 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DE56 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DE66 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DE76 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DE86 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DE96 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DEA6 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DEB6 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DEC6 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DED6 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DEE6 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DEF6 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF06 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF16 0000 0000 0000 D0AC 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF26 0000 5598 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF36 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DF46 0000 5C52 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF46 0000 5C52 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF56                            
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56                            
0000DF56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF56                            
0000DF56                            
0000DF56                            ObjectFall:
0000DF56 2428 0008                  		move.l	8(a0),d2
0000DF5A 2628 000C                  		move.l	$C(a0),d3
0000DF5E 3028 0010                  		move.w	$10(a0),d0
0000DF62 48C0                       		ext.l	d0
0000DF64 E180                       		asl.l	#8,d0
0000DF66 D480                       		add.l	d0,d2
0000DF68 3028 0012                  		move.w	$12(a0),d0
0000DF6C 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DF72 48C0                       		ext.l	d0
0000DF74 E180                       		asl.l	#8,d0
0000DF76 D680                       		add.l	d0,d3
0000DF78 2142 0008                  		move.l	d2,8(a0)
0000DF7C 2143 000C                  		move.l	d3,$C(a0)
0000DF80 4E75                       		rts	
0000DF82                            ; End of function ObjectFall
0000DF82                            
0000DF82                            ; ---------------------------------------------------------------------------
0000DF82                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF82                            ; ---------------------------------------------------------------------------
0000DF82                            
0000DF82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF82                            
0000DF82                            
0000DF82                            ObjectFallNoJump:
0000DF82 2428 0008                  		move.l	8(a0),d2
0000DF86 2628 000C                  		move.l	$C(a0),d3
0000DF8A 3028 0010                  		move.w	$10(a0),d0
0000DF8E 48C0                       		ext.l	d0
0000DF90 E180                       		asl.l	#8,d0
0000DF92 D480                       		add.l	d0,d2
0000DF94                            ;		cmpi.b	#1,obID(a0)
0000DF94                            ;		beq.s	ObjectFallSonic
0000DF94 3028 000C                  		move.w	$C(a0),d0
0000DF98 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DF9C                            ;		ext.l	d0
0000DF9C                            ;		asl.l	#8,d0
0000DF9C                            ;		add.l	d0,d3
0000DF9C 2142 0008                  		move.l	d2,$8(a0)
0000DFA0                            ;		move.l	d3,obY(a0)
0000DFA0 4E75                       		rts	
0000DFA2                            
0000DFA2                            ; End of function ObjectFall
0000DFA2                            
0000DFA2                            JumpFallSonic:
0000DFA2 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DFA8                                    
0000DFA8 E180                               asl.l    #8,d0                ; Apply X speed
0000DFAA D1A8 0008                          add.l    d0,$8(a0)
0000DFAE                                    
0000DFAE 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DFB2 4A41                               tst.w    d1                ; Are we falling?
0000DFB4 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DFB6 4440                               neg.w    d0                ; Make Y movement go up
0000DFB8                                    
0000DFB8                            .SetYSpeed:
0000DFB8 48C0                               ext.l    d0                ; Apply Y speed
0000DFBA E180                               asl.l    #8,d0
0000DFBC D1A8 000C                          add.l    d0,$C(a0)
0000DFC0 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DFC6 4E75                               rts
0000DFC8                            
0000DFC8                            ; ---------------------------------------------------------------------------
0000DFC8                            ; Subroutine translating object	speed to update	object position
0000DFC8                            ; ---------------------------------------------------------------------------
0000DFC8                            
0000DFC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFC8                            
0000DFC8                            
0000DFC8                            SpeedToPos:
0000DFC8 2428 0008                  		move.l	8(a0),d2
0000DFCC 2628 000C                  		move.l	$C(a0),d3
0000DFD0 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DFD4 48C0                       		ext.l	d0
0000DFD6 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DFD8 D480                       		add.l	d0,d2		; add to x-axis	position
0000DFDA 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DFDE 48C0                       		ext.l	d0
0000DFE0 E180                       		asl.l	#8,d0		; multiply by $100
0000DFE2 D680                       		add.l	d0,d3		; add to y-axis	position
0000DFE4 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DFE8 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DFEC 4E75                       		rts	
0000DFEE                            ; End of function SpeedToPos
0000DFEE                            
0000DFEE                            ; ---------------------------------------------------------------------------
0000DFEE                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DFEE                            ; ---------------------------------------------------------------------------
0000DFEE                            
0000DFEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFEE                            
0000DFEE                            
0000DFEE                            DisplaySprite:
0000DFEE 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DFF2 3028 0018                  		move.w	$18(a0),d0
0000DFF6 E248                       		lsr.w	#1,d0
0000DFF8 0240 0380                  		andi.w	#$380,d0
0000DFFC D2C0                       		adda.w	d0,a1
0000DFFE 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E002 6400                       		bcc.s	locret_D620
0000E004 5451                       		addq.w	#2,(a1)
0000E006 D2D1                       		adda.w	(a1),a1
0000E008 3288                       		move.w	a0,(a1)
0000E00A                            
0000E00A                            locret_D620:
0000E00A 4E75                       		rts	
0000E00C                            ; End of function DisplaySprite
0000E00C                            
0000E00C                            ; ---------------------------------------------------------------------------
0000E00C                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E00C                            ; ---------------------------------------------------------------------------
0000E00C                            
0000E00C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E00C                            
0000E00C                            
0000E00C                            DisplaySprite2:
0000E00C 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E010 3029 0018                  		move.w	$18(a1),d0
0000E014 E248                       		lsr.w	#1,d0
0000E016 0240 0380                  		andi.w	#$380,d0
0000E01A D4C0                       		adda.w	d0,a2
0000E01C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E020 6400                       		bcc.s	locret_D63E
0000E022 5452                       		addq.w	#2,(a2)
0000E024 D4D2                       		adda.w	(a2),a2
0000E026 3489                       		move.w	a1,(a2)
0000E028                            
0000E028                            locret_D63E:
0000E028 4E75                       		rts	
0000E02A                            ; End of function DisplaySprite2
0000E02A                            
0000E02A                            ; ---------------------------------------------------------------------------
0000E02A                            ; Subroutine to	delete an object
0000E02A                            ; ---------------------------------------------------------------------------
0000E02A                            
0000E02A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E02A                            
0000E02A                            
0000E02A                            DeleteObject:
0000E02A 2248                       		movea.l	a0,a1
0000E02C                            
0000E02C                            DeleteObject2:
0000E02C 7200                       		moveq	#0,d1
0000E02E 700F                       		moveq	#$F,d0
0000E030                            
0000E030                            loc_D646:
0000E030 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E032 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E036 4E75                       		rts	
0000E038                            ; End of function DeleteObject
0000E038                            
0000E038                            ; ===========================================================================
0000E038 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E03C 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E040 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E044 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E048                            ; ---------------------------------------------------------------------------
0000E048                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E048                            ; ---------------------------------------------------------------------------
0000E048                            
0000E048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E048                            
0000E048                            
0000E048                            BuildSprites:				; XREF: TitleScreen; et al
0000E048 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E04C 7A00                       		moveq	#0,d5
0000E04E 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E052 7E07                       		moveq	#7,d7
0000E054                            
0000E054                            loc_D66A:
0000E054 4A54                       		tst.w	(a4)
0000E056 6700 0000                  		beq.w	loc_D72E
0000E05A 7C02                       		moveq	#2,d6
0000E05C                            
0000E05C                            loc_D672:
0000E05C 3074 6000                  		movea.w	(a4,d6.w),a0
0000E060 4A10                       		tst.b	(a0)
0000E062 6700 0000                  		beq.w	loc_D726
0000E066 08A8 0007 0001             		bclr	#7,1(a0)
0000E06C 1028 0001                  		move.b	1(a0),d0
0000E070 1800                       		move.b	d0,d4
0000E072 0240 000C                  		andi.w	#$C,d0
0000E076 6700                       		beq.s	loc_D6DE
0000E078 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E07C 7000                       		moveq	#0,d0
0000E07E 1028 0019                  		move.b	$19(a0),d0
0000E082 3628 0008                  		move.w	8(a0),d3
0000E086 9651                       		sub.w	(a1),d3
0000E088 3203                       		move.w	d3,d1
0000E08A D240                       		add.w	d0,d1
0000E08C 6B00 0000                  		bmi.w	loc_D726
0000E090 3203                       		move.w	d3,d1
0000E092 9240                       		sub.w	d0,d1
0000E094 0C41 0140                  		cmpi.w	#$140,d1
0000E098 6C00                       		bge.s	loc_D726
0000E09A 0643 0080                  		addi.w	#$80,d3
0000E09E 0804 0004                  		btst	#4,d4
0000E0A2 6700                       		beq.s	loc_D6E8
0000E0A4 7000                       		moveq	#0,d0
0000E0A6 1028 0016                  		move.b	$16(a0),d0
0000E0AA 3428 000C                  		move.w	$C(a0),d2
0000E0AE 9469 0004                  		sub.w	4(a1),d2
0000E0B2 3202                       		move.w	d2,d1
0000E0B4 D240                       		add.w	d0,d1
0000E0B6 6B00                       		bmi.s	loc_D726
0000E0B8 3202                       		move.w	d2,d1
0000E0BA 9240                       		sub.w	d0,d1
0000E0BC 0C41 00E0                  		cmpi.w	#$E0,d1
0000E0C0 6C00                       		bge.s	loc_D726
0000E0C2 0642 0080                  		addi.w	#$80,d2
0000E0C6 6000                       		bra.s	loc_D700
0000E0C8                            ; ===========================================================================
0000E0C8                            
0000E0C8                            loc_D6DE:
0000E0C8 3428 000A                  		move.w	$A(a0),d2
0000E0CC 3628 0008                  		move.w	8(a0),d3
0000E0D0 6000                       		bra.s	loc_D700
0000E0D2                            ; ===========================================================================
0000E0D2                            
0000E0D2                            loc_D6E8:
0000E0D2 3428 000C                  		move.w	$C(a0),d2
0000E0D6 9469 0004                  		sub.w	4(a1),d2
0000E0DA 0642 0080                  		addi.w	#$80,d2
0000E0DE 0C42 0060                  		cmpi.w	#$60,d2
0000E0E2 6500                       		bcs.s	loc_D726
0000E0E4 0C42 0180                  		cmpi.w	#$180,d2
0000E0E8 6400                       		bcc.s	loc_D726
0000E0EA                            
0000E0EA                            loc_D700:
0000E0EA 2268 0004                  		movea.l	4(a0),a1
0000E0EE 7200                       		moveq	#0,d1
0000E0F0 0804 0005                  		btst	#5,d4
0000E0F4 6600                       		bne.s	loc_D71C
0000E0F6 1228 001A                  		move.b	$1A(a0),d1
0000E0FA D201                       		add.b	d1,d1
0000E0FC D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E100 1219                       		move.b	(a1)+,d1
0000E102 5301                       		subq.b	#1,d1
0000E104 6B00                       		bmi.s	loc_D720
0000E106                            
0000E106                            loc_D71C:
0000E106 6100 0000                  		bsr.w	sub_D750
0000E10A                            
0000E10A                            loc_D720:
0000E10A 08E8 0007 0001             		bset	#7,1(a0)
0000E110                            
0000E110                            loc_D726:
0000E110 5446                       		addq.w	#2,d6
0000E112 5554                       		subq.w	#2,(a4)
0000E114 6600 FF46                  		bne.w	loc_D672
0000E118                            
0000E118                            loc_D72E:
0000E118 49EC 0080                  		lea	$80(a4),a4
0000E11C 51CF FF36                  		dbf	d7,loc_D66A
0000E120 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E124 0C05 0050                  		cmpi.b	#$50,d5
0000E128 6700                       		beq.s	loc_D748
0000E12A 24BC 0000 0000             		move.l	#0,(a2)
0000E130 4E75                       		rts	
0000E132                            ; ===========================================================================
0000E132                            
0000E132                            loc_D748:
0000E132 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E138 4E75                       		rts	
0000E13A                            ; End of function BuildSprites
0000E13A                            
0000E13A                            
0000E13A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E13A                            
0000E13A                            
0000E13A                            sub_D750:				; XREF: BuildSprites
0000E13A 3668 0002                  		movea.w	2(a0),a3
0000E13E 0804 0000                  		btst	#0,d4
0000E142 6600                       		bne.s	loc_D796
0000E144 0804 0001                  		btst	#1,d4
0000E148 6600 0000                  		bne.w	loc_D7E4
0000E14C                            ; End of function sub_D750
0000E14C                            
0000E14C                            
0000E14C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E14C                            
0000E14C                            
0000E14C                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E14C 0C05 0050                  		cmpi.b	#$50,d5
0000E150 6700                       		beq.s	locret_D794
0000E152 1019                       		move.b	(a1)+,d0
0000E154 4880                       		ext.w	d0
0000E156 D042                       		add.w	d2,d0
0000E158 34C0                       		move.w	d0,(a2)+
0000E15A 14D9                       		move.b	(a1)+,(a2)+
0000E15C 5205                       		addq.b	#1,d5
0000E15E 14C5                       		move.b	d5,(a2)+
0000E160 1019                       		move.b	(a1)+,d0
0000E162 E148                       		lsl.w	#8,d0
0000E164 1019                       		move.b	(a1)+,d0
0000E166 D04B                       		add.w	a3,d0
0000E168 34C0                       		move.w	d0,(a2)+
0000E16A 1019                       		move.b	(a1)+,d0
0000E16C 4880                       		ext.w	d0
0000E16E D043                       		add.w	d3,d0
0000E170 0240 01FF                  		andi.w	#$1FF,d0
0000E174 6600                       		bne.s	loc_D78E
0000E176 5240                       		addq.w	#1,d0
0000E178                            
0000E178                            loc_D78E:
0000E178 34C0                       		move.w	d0,(a2)+
0000E17A 51C9 FFD0                  		dbf	d1,sub_D762
0000E17E                            
0000E17E                            locret_D794:
0000E17E 4E75                       		rts	
0000E180                            ; End of function sub_D762
0000E180                            
0000E180                            ; ===========================================================================
0000E180                            
0000E180                            loc_D796:
0000E180 0804 0001                  		btst	#1,d4
0000E184 6600 0000                  		bne.w	loc_D82A
0000E188                            
0000E188                            loc_D79E:
0000E188 0C05 0050                  		cmpi.b	#$50,d5
0000E18C 6700                       		beq.s	locret_D7E2
0000E18E 1019                       		move.b	(a1)+,d0
0000E190 4880                       		ext.w	d0
0000E192 D042                       		add.w	d2,d0
0000E194 34C0                       		move.w	d0,(a2)+
0000E196 1819                       		move.b	(a1)+,d4
0000E198 14C4                       		move.b	d4,(a2)+
0000E19A 5205                       		addq.b	#1,d5
0000E19C 14C5                       		move.b	d5,(a2)+
0000E19E 1019                       		move.b	(a1)+,d0
0000E1A0 E148                       		lsl.w	#8,d0
0000E1A2 1019                       		move.b	(a1)+,d0
0000E1A4 D04B                       		add.w	a3,d0
0000E1A6 0A40 0800                  		eori.w	#$800,d0
0000E1AA 34C0                       		move.w	d0,(a2)+
0000E1AC 1019                       		move.b	(a1)+,d0
0000E1AE 4880                       		ext.w	d0
0000E1B0 4440                       		neg.w	d0
0000E1B2 D804                       		add.b	d4,d4
0000E1B4 0244 0018                  		andi.w	#$18,d4
0000E1B8 5044                       		addq.w	#8,d4
0000E1BA 9044                       		sub.w	d4,d0
0000E1BC D043                       		add.w	d3,d0
0000E1BE 0240 01FF                  		andi.w	#$1FF,d0
0000E1C2 6600                       		bne.s	loc_D7DC
0000E1C4 5240                       		addq.w	#1,d0
0000E1C6                            
0000E1C6                            loc_D7DC:
0000E1C6 34C0                       		move.w	d0,(a2)+
0000E1C8 51C9 FFBE                  		dbf	d1,loc_D79E
0000E1CC                            
0000E1CC                            locret_D7E2:
0000E1CC 4E75                       		rts	
0000E1CE                            ; ===========================================================================
0000E1CE                            
0000E1CE                            loc_D7E4:				; XREF: sub_D750
0000E1CE 0C05 0050                  		cmpi.b	#$50,d5
0000E1D2 6700                       		beq.s	locret_D828
0000E1D4 1019                       		move.b	(a1)+,d0
0000E1D6 1811                       		move.b	(a1),d4
0000E1D8 4880                       		ext.w	d0
0000E1DA 4440                       		neg.w	d0
0000E1DC E70C                       		lsl.b	#3,d4
0000E1DE 0244 0018                  		andi.w	#$18,d4
0000E1E2 5044                       		addq.w	#8,d4
0000E1E4 9044                       		sub.w	d4,d0
0000E1E6 D042                       		add.w	d2,d0
0000E1E8 34C0                       		move.w	d0,(a2)+
0000E1EA 14D9                       		move.b	(a1)+,(a2)+
0000E1EC 5205                       		addq.b	#1,d5
0000E1EE 14C5                       		move.b	d5,(a2)+
0000E1F0 1019                       		move.b	(a1)+,d0
0000E1F2 E148                       		lsl.w	#8,d0
0000E1F4 1019                       		move.b	(a1)+,d0
0000E1F6 D04B                       		add.w	a3,d0
0000E1F8 0A40 1000                  		eori.w	#$1000,d0
0000E1FC 34C0                       		move.w	d0,(a2)+
0000E1FE 1019                       		move.b	(a1)+,d0
0000E200 4880                       		ext.w	d0
0000E202 D043                       		add.w	d3,d0
0000E204 0240 01FF                  		andi.w	#$1FF,d0
0000E208 6600                       		bne.s	loc_D822
0000E20A 5240                       		addq.w	#1,d0
0000E20C                            
0000E20C                            loc_D822:
0000E20C 34C0                       		move.w	d0,(a2)+
0000E20E 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E212                            
0000E212                            locret_D828:
0000E212 4E75                       		rts	
0000E214                            ; ===========================================================================
0000E214                            
0000E214                            loc_D82A:
0000E214 0C05 0050                  		cmpi.b	#$50,d5
0000E218 6700                       		beq.s	locret_D87C
0000E21A 1019                       		move.b	(a1)+,d0
0000E21C 1811                       		move.b	(a1),d4
0000E21E 4880                       		ext.w	d0
0000E220 4440                       		neg.w	d0
0000E222 E70C                       		lsl.b	#3,d4
0000E224 0244 0018                  		andi.w	#$18,d4
0000E228 5044                       		addq.w	#8,d4
0000E22A 9044                       		sub.w	d4,d0
0000E22C D042                       		add.w	d2,d0
0000E22E 34C0                       		move.w	d0,(a2)+
0000E230 1819                       		move.b	(a1)+,d4
0000E232 14C4                       		move.b	d4,(a2)+
0000E234 5205                       		addq.b	#1,d5
0000E236 14C5                       		move.b	d5,(a2)+
0000E238 1019                       		move.b	(a1)+,d0
0000E23A E148                       		lsl.w	#8,d0
0000E23C 1019                       		move.b	(a1)+,d0
0000E23E D04B                       		add.w	a3,d0
0000E240 0A40 1800                  		eori.w	#$1800,d0
0000E244 34C0                       		move.w	d0,(a2)+
0000E246 1019                       		move.b	(a1)+,d0
0000E248 4880                       		ext.w	d0
0000E24A 4440                       		neg.w	d0
0000E24C D804                       		add.b	d4,d4
0000E24E 0244 0018                  		andi.w	#$18,d4
0000E252 5044                       		addq.w	#8,d4
0000E254 9044                       		sub.w	d4,d0
0000E256 D043                       		add.w	d3,d0
0000E258 0240 01FF                  		andi.w	#$1FF,d0
0000E25C 6600                       		bne.s	loc_D876
0000E25E 5240                       		addq.w	#1,d0
0000E260                            
0000E260                            loc_D876:
0000E260 34C0                       		move.w	d0,(a2)+
0000E262 51C9 FFB0                  		dbf	d1,loc_D82A
0000E266                            
0000E266                            locret_D87C:
0000E266 4E75                       		rts	
0000E268                            ; ---------------------------------------------------------------------------
0000E268                            ; Subroutine to	check if an object is on the screen
0000E268                            ; ---------------------------------------------------------------------------
0000E268                            
0000E268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E268                            
0000E268                            
0000E268                            ChkObjOnScreen:
0000E268 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E26C 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E270 6B00                       		bmi.s	NotOnScreen
0000E272 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E276 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E278                            
0000E278 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E27C 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E280 6B00                       		bmi.s	NotOnScreen
0000E282 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E286 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E288                            
0000E288 7000                       		moveq	#0,d0		; set flag to 0
0000E28A 4E75                       		rts	
0000E28C                            ; ===========================================================================
0000E28C                            
0000E28C                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E28C 7001                       		moveq	#1,d0		; set flag to 1
0000E28E 4E75                       		rts	
0000E290                            ; End of function ChkObjOnScreen
0000E290                            
0000E290                            
0000E290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E290                            
0000E290                            
0000E290                            ChkObjOnScreen2:
0000E290 7200                       		moveq	#0,d1
0000E292 1228 0019                  		move.b	$19(a0),d1
0000E296 3028 0008                  		move.w	8(a0),d0
0000E29A 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E29E D041                       		add.w	d1,d0
0000E2A0 6B00                       		bmi.s	NotOnScreen2
0000E2A2 D241                       		add.w	d1,d1
0000E2A4 9041                       		sub.w	d1,d0
0000E2A6 0C40 0140                  		cmpi.w	#320,d0
0000E2AA 6C00                       		bge.s	NotOnScreen2
0000E2AC                            
0000E2AC 3228 000C                  		move.w	$C(a0),d1
0000E2B0 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E2B4 6B00                       		bmi.s	NotOnScreen2
0000E2B6 0C41 00E0                  		cmpi.w	#224,d1
0000E2BA 6C00                       		bge.s	NotOnScreen2
0000E2BC                            
0000E2BC 7000                       		moveq	#0,d0
0000E2BE 4E75                       		rts	
0000E2C0                            ; ===========================================================================
0000E2C0                            
0000E2C0                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E2C0 7001                       		moveq	#1,d0
0000E2C2 4E75                       		rts	
0000E2C4                            ; End of function ChkObjOnScreen2
0000E2C4                            
0000E2C4                            ; ---------------------------------------------------------------------------
0000E2C4                            ; Subroutine to	load a level's objects
0000E2C4                            ; ---------------------------------------------------------------------------
0000E2C4                            
0000E2C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2C4                            
0000E2C4                            
0000E2C4                            ObjPosLoad:				; XREF: Level; et al
0000E2C4 7000                       		moveq	#0,d0
0000E2C6 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E2CA 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E2CE 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E2D2                            ; End of function ObjPosLoad
0000E2D2                            
0000E2D2                            ; ===========================================================================
0000E2D2 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E2D4 0000                       		dc.w OPL_Next-OPL_Index
0000E2D6                            ; ===========================================================================
0000E2D6                            
0000E2D6                            OPL_Main:				; XREF: OPL_Index
0000E2D6 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E2DA 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E2DE ED08                       		lsl.b	#6,d0
0000E2E0 E848                       		lsr.w	#4,d0
0000E2E2 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E2E8 2248                       		movea.l	a0,a1
0000E2EA D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E2EE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E2F2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E2F6 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E2FA 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E2FE 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E302 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E306 34FC 0101                  		move.w	#$101,(a2)+
0000E30A 303C 005E                  		move.w	#$5E,d0
0000E30E                            
0000E30E                            OPL_ClrList:
0000E30E 429A                       		clr.l	(a2)+
0000E310 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E314                            
0000E314 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E318 7400                       		moveq	#0,d2
0000E31A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E31E 0446 0080                  		subi.w	#$80,d6
0000E322 6400                       		bcc.s	loc_D93C
0000E324 7C00                       		moveq	#0,d6
0000E326                            
0000E326                            loc_D93C:
0000E326 0246 FF80                  		andi.w	#$FF80,d6
0000E32A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E32E                            
0000E32E                            loc_D944:
0000E32E BC50                       		cmp.w	(a0),d6
0000E330 6300                       		bls.s	loc_D956
0000E332 4A28 0004                  		tst.b	4(a0)
0000E336 6A00                       		bpl.s	loc_D952
0000E338 1412                       		move.b	(a2),d2
0000E33A 5212                       		addq.b	#1,(a2)
0000E33C                            
0000E33C                            loc_D952:
0000E33C 5C48                       		addq.w	#6,a0
0000E33E 60EE                       		bra.s	loc_D944
0000E340                            ; ===========================================================================
0000E340                            
0000E340                            loc_D956:
0000E340 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E344 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E348 0446 0080                  		subi.w	#$80,d6
0000E34C 6500                       		bcs.s	loc_D976
0000E34E                            
0000E34E                            loc_D964:
0000E34E BC50                       		cmp.w	(a0),d6
0000E350 6300                       		bls.s	loc_D976
0000E352 4A28 0004                  		tst.b	4(a0)
0000E356 6A00                       		bpl.s	loc_D972
0000E358 522A 0001                  		addq.b	#1,1(a2)
0000E35C                            
0000E35C                            loc_D972:
0000E35C 5C48                       		addq.w	#6,a0
0000E35E 60EE                       		bra.s	loc_D964
0000E360                            ; ===========================================================================
0000E360                            
0000E360                            loc_D976:
0000E360 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E364 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E36A                            
0000E36A                            OPL_Next:				; XREF: OPL_Index
0000E36A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E36E 7400                       		moveq	#0,d2
0000E370 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E374 0246 FF80                  		andi.w	#$FF80,d6
0000E378 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E37C 6700 0000                  		beq.w	locret_DA3A
0000E380 6C00                       		bge.s	loc_D9F6
0000E382 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E386 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E38A 0446 0080                  		subi.w	#$80,d6
0000E38E 6500                       		bcs.s	loc_D9D2
0000E390                            
0000E390                            loc_D9A6:
0000E390 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E394 6C00                       		bge.s	loc_D9D2
0000E396 5D48                       		subq.w	#6,a0
0000E398 4A28 0004                  		tst.b	4(a0)
0000E39C 6A00                       		bpl.s	loc_D9BC
0000E39E 532A 0001                  		subq.b	#1,1(a2)
0000E3A2 142A 0001                  		move.b	1(a2),d2
0000E3A6                            
0000E3A6                            loc_D9BC:
0000E3A6 6100 0000                  		bsr.w	loc_DA3C
0000E3AA 6600                       		bne.s	loc_D9C6
0000E3AC 5D48                       		subq.w	#6,a0
0000E3AE 60E0                       		bra.s	loc_D9A6
0000E3B0                            ; ===========================================================================
0000E3B0                            
0000E3B0                            loc_D9C6:
0000E3B0 4A28 0004                  		tst.b	4(a0)
0000E3B4 6A00                       		bpl.s	loc_D9D0
0000E3B6 522A 0001                  		addq.b	#1,1(a2)
0000E3BA                            
0000E3BA                            loc_D9D0:
0000E3BA 5C48                       		addq.w	#6,a0
0000E3BC                            
0000E3BC                            loc_D9D2:
0000E3BC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3C0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3C4 0646 0300                  		addi.w	#$300,d6
0000E3C8                            
0000E3C8                            loc_D9DE:
0000E3C8 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3CC 6E00                       		bgt.s	loc_D9F0
0000E3CE 4A28 FFFE                  		tst.b	-2(a0)
0000E3D2 6A00                       		bpl.s	loc_D9EC
0000E3D4 5312                       		subq.b	#1,(a2)
0000E3D6                            
0000E3D6                            loc_D9EC:
0000E3D6 5D48                       		subq.w	#6,a0
0000E3D8 60EE                       		bra.s	loc_D9DE
0000E3DA                            ; ===========================================================================
0000E3DA                            
0000E3DA                            loc_D9F0:
0000E3DA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3DE 4E75                       		rts	
0000E3E0                            ; ===========================================================================
0000E3E0                            
0000E3E0                            loc_D9F6:
0000E3E0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3E4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3E8 0646 0280                  		addi.w	#$280,d6
0000E3EC                            
0000E3EC                            loc_DA02:
0000E3EC BC50                       		cmp.w	(a0),d6
0000E3EE 6300                       		bls.s	loc_DA16
0000E3F0 4A28 0004                  		tst.b	4(a0)
0000E3F4 6A00                       		bpl.s	loc_DA10
0000E3F6 1412                       		move.b	(a2),d2
0000E3F8 5212                       		addq.b	#1,(a2)
0000E3FA                            
0000E3FA                            loc_DA10:
0000E3FA 6100 0000                  		bsr.w	loc_DA3C
0000E3FE 67EC                       		beq.s	loc_DA02
0000E400                            
0000E400                            loc_DA16:
0000E400 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E404 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E408 0446 0300                  		subi.w	#$300,d6
0000E40C 6500                       		bcs.s	loc_DA36
0000E40E                            
0000E40E                            loc_DA24:
0000E40E BC50                       		cmp.w	(a0),d6
0000E410 6300                       		bls.s	loc_DA36
0000E412 4A28 0004                  		tst.b	4(a0)
0000E416 6A00                       		bpl.s	loc_DA32
0000E418 522A 0001                  		addq.b	#1,1(a2)
0000E41C                            
0000E41C                            loc_DA32:
0000E41C 5C48                       		addq.w	#6,a0
0000E41E 60EE                       		bra.s	loc_DA24
0000E420                            ; ===========================================================================
0000E420                            
0000E420                            loc_DA36:
0000E420 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E424                            
0000E424                            locret_DA3A:
0000E424 4E75                       		rts	
0000E426                            ; ===========================================================================
0000E426                            
0000E426                            loc_DA3C:
0000E426 4A28 0004                  		tst.b	4(a0)
0000E42A 6A00                       		bpl.s	OPL_MakeItem
0000E42C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E432 6700                       		beq.s	OPL_MakeItem
0000E434 5C48                       		addq.w	#6,a0
0000E436 7000                       		moveq	#0,d0
0000E438 4E75                       		rts	
0000E43A                            ; ===========================================================================
0000E43A                            
0000E43A                            OPL_MakeItem:
0000E43A 6100 0000                  		bsr.w	SingleObjLoad
0000E43E 6600                       		bne.s	locret_DA8A
0000E440 3358 0008                  		move.w	(a0)+,8(a1)
0000E444 3018                       		move.w	(a0)+,d0
0000E446 3200                       		move.w	d0,d1
0000E448 0240 0FFF                  		andi.w	#$FFF,d0
0000E44C 3340 000C                  		move.w	d0,$C(a1)
0000E450 E559                       		rol.w	#2,d1
0000E452 0201 0003                  		andi.b	#3,d1
0000E456 1341 0001                  		move.b	d1,1(a1)
0000E45A 1341 0022                  		move.b	d1,$22(a1)
0000E45E 1018                       		move.b	(a0)+,d0
0000E460 6A00                       		bpl.s	loc_DA80
0000E462 0200 007F                  		andi.b	#$7F,d0
0000E466 1342 0023                  		move.b	d2,$23(a1)
0000E46A                            
0000E46A                            loc_DA80:
0000E46A 1280                       		move.b	d0,0(a1)
0000E46C 1358 0028                  		move.b	(a0)+,$28(a1)
0000E470 7000                       		moveq	#0,d0
0000E472                            
0000E472                            locret_DA8A:
0000E472 4E75                       		rts	
0000E474                            ; ---------------------------------------------------------------------------
0000E474                            ; Single object	loading	subroutine
0000E474                            ; ---------------------------------------------------------------------------
0000E474                            
0000E474                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E474                            
0000E474                            
0000E474                            SingleObjLoad:
0000E474 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E478 303C 005F                  		move.w	#$5F,d0
0000E47C                            
0000E47C                            loc_DA94:
0000E47C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E47E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E480 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E484 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E488                            
0000E488                            locret_DAA0:
0000E488 4E75                       		rts	
0000E48A                            ; End of function SingleObjLoad
0000E48A                            
0000E48A                            
0000E48A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E48A                            
0000E48A                            
0000E48A                            SingleObjLoad2:
0000E48A 2248                       		movea.l	a0,a1
0000E48C 303C F000                  		move.w	#-$1000,d0
0000E490 9048                       		sub.w	a0,d0
0000E492 EC48                       		lsr.w	#6,d0
0000E494 5340                       		subq.w	#1,d0
0000E496 6500                       		bcs.s	locret_DABC
0000E498                            
0000E498                            loc_DAB0:
0000E498 4A11                       		tst.b	(a1)
0000E49A 6700                       		beq.s	locret_DABC
0000E49C 43E9 0040                  		lea	$40(a1),a1
0000E4A0 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E4A4                            
0000E4A4                            locret_DABC:
0000E4A4 4E75                       		rts	
0000E4A6                            ; End of function SingleObjLoad2
0000E4A6                            
0000E4A6                            ; ===========================================================================
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6                            ; Object 41 - springs
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6                            
0000E4A6                            Obj41:					; XREF: Obj_Index
0000E4A6 7000                       		moveq	#0,d0
0000E4A8 1028 0024                  		move.b	$24(a0),d0
0000E4AC 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E4B0 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E4B4 6100 FB38                  		bsr.w	DisplaySprite
0000E4B8 3028 0008                  		move.w	8(a0),d0
0000E4BC 0240 FF80                  		andi.w	#$FF80,d0
0000E4C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4C4 0441 0080                  		subi.w	#$80,d1
0000E4C8 0241 FF80                  		andi.w	#$FF80,d1
0000E4CC 9041                       		sub.w	d1,d0
0000E4CE 0C40 0280                  		cmpi.w	#$280,d0
0000E4D2 6200 FB56                  		bhi.w	DeleteObject
0000E4D6 4E75                       		rts	
0000E4D8                            ; ===========================================================================
0000E4D8 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E4DA 0000                       		dc.w Obj41_Up-Obj41_Index
0000E4DC 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E4DE 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E4E0 0000                       		dc.w Obj41_LR-Obj41_Index
0000E4E2 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E4E4 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E4E6 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E4E8 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E4EA 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E4EC                            
0000E4EC F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E4EE F600                       		dc.w -$A00		; power	of yellow spring
0000E4F0                            ; ===========================================================================
0000E4F0                            
0000E4F0                            Obj41_Main:				; XREF: Obj41_Index
0000E4F0 5428 0024                  		addq.b	#2,$24(a0)
0000E4F4 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E4FC 317C 0523 0002             		move.w	#$523,2(a0)
0000E502 0028 0004 0001             		ori.b	#4,1(a0)
0000E508 117C 0010 0019             		move.b	#$10,$19(a0)
0000E50E 117C 0004 0018             		move.b	#4,$18(a0)
0000E514 1028 0028                  		move.b	$28(a0),d0
0000E518 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E51C 6700                       		beq.s	loc_DB54	; if not, branch
0000E51E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E524 117C 0001 001C             		move.b	#1,$1C(a0)
0000E52A 117C 0003 001A             		move.b	#3,$1A(a0)
0000E530 317C 0533 0002             		move.w	#$533,2(a0)
0000E536 117C 0008 0019             		move.b	#8,$19(a0)
0000E53C                            
0000E53C                            loc_DB54:
0000E53C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E540 6700                       		beq.s	loc_DB66	; if not, branch
0000E542 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E548 08E8 0001 0022             		bset	#1,$22(a0)
0000E54E                            
0000E54E                            loc_DB66:
0000E54E 0800 0001                  		btst	#1,d0
0000E552 6700                       		beq.s	loc_DB72
0000E554 08E8 0005 0002             		bset	#5,2(a0)
0000E55A                            
0000E55A                            loc_DB72:
0000E55A 0240 000F                  		andi.w	#$F,d0
0000E55E 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E564 4E75                       		rts	
0000E566                            ; ===========================================================================
0000E566                            
0000E566                            Obj41_Up:				; XREF: Obj41_Index
0000E566 323C 001B                  		move.w	#$1B,d1
0000E56A 343C 0008                  		move.w	#8,d2
0000E56E 363C 0010                  		move.w	#$10,d3
0000E572 3828 0008                  		move.w	8(a0),d4
0000E576 6100 0000                  		bsr.w	SolidObject
0000E57A 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E57E 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E580 4E75                       		rts	
0000E582                            ; ===========================================================================
0000E582                            
0000E582                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E582 5428 0024                  		addq.b	#2,$24(a0)
0000E586 5069 000C                  		addq.w	#8,$C(a1)
0000E58A 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E590 08E9 0001 0022             		bset	#1,$22(a1)
0000E596 08A9 0003 0022             		bclr	#3,$22(a1)
0000E59C 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E5A2 137C 0002 0024             		move.b	#2,$24(a1)
0000E5A8 08A8 0003 0022             		bclr	#3,$22(a0)
0000E5AE 4228 0025                  		clr.b	$25(a0)
0000E5B2 303C 00CC                  		move.w	#$CC,d0
0000E5B6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E5BC                            
0000E5BC                            Obj41_AniUp:				; XREF: Obj41_Index
0000E5BC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E5C2 6000 CA88                  		bra.w	AnimateSprite
0000E5C6                            ; ===========================================================================
0000E5C6                            
0000E5C6                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E5C6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E5CC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E5D0 4E75                       		rts	
0000E5D2                            ; ===========================================================================
0000E5D2                            
0000E5D2                            Obj41_LR:				; XREF: Obj41_Index
0000E5D2 323C 0013                  		move.w	#$13,d1
0000E5D6 343C 000E                  		move.w	#$E,d2
0000E5DA 363C 000F                  		move.w	#$F,d3
0000E5DE 3828 0008                  		move.w	8(a0),d4
0000E5E2 6100 0000                  		bsr.w	SolidObject
0000E5E6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E5EC 6600                       		bne.s	loc_DC0C
0000E5EE 117C 0008 0024             		move.b	#8,$24(a0)
0000E5F4                            
0000E5F4                            loc_DC0C:
0000E5F4 0828 0005 0022             		btst	#5,$22(a0)
0000E5FA 6600                       		bne.s	Obj41_BounceLR
0000E5FC 4E75                       		rts	
0000E5FE                            ; ===========================================================================
0000E5FE                            
0000E5FE                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E5FE 5428 0024                  		addq.b	#2,$24(a0)
0000E602 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E608 5069 0008                  		addq.w	#8,8(a1)
0000E60C 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E612 6600                       		bne.s	loc_DC36	; if yes, branch
0000E614 0469 0010 0008             		subi.w	#$10,8(a1)
0000E61A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E61E                            
0000E61E                            loc_DC36:
0000E61E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E624 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E62A 0869 0000 0022             		bchg	#0,$22(a1)
0000E630 0829 0002 0022             		btst	#2,$22(a1)
0000E636 6600                       		bne.s	loc_DC56
0000E638 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E63E                            
0000E63E                            loc_DC56:
0000E63E 08A8 0005 0022             		bclr	#5,$22(a0)
0000E644 08A9 0005 0022             		bclr	#5,$22(a1)
0000E64A 303C 00CC                  		move.w	#$CC,d0
0000E64E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E654                            
0000E654                            Obj41_AniLR:				; XREF: Obj41_Index
0000E654 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E65A 6000 C9F0                  		bra.w	AnimateSprite
0000E65E                            ; ===========================================================================
0000E65E                            
0000E65E                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E65E 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E664 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E668 4E75                       		rts	
0000E66A                            ; ===========================================================================
0000E66A                            
0000E66A                            Obj41_Dwn:				; XREF: Obj41_Index
0000E66A 323C 001B                  		move.w	#$1B,d1
0000E66E 343C 0008                  		move.w	#8,d2
0000E672 363C 0010                  		move.w	#$10,d3
0000E676 3828 0008                  		move.w	8(a0),d4
0000E67A 6100 0000                  		bsr.w	SolidObject
0000E67E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E684 6600                       		bne.s	loc_DCA4
0000E686 117C 000E 0024             		move.b	#$E,$24(a0)
0000E68C                            
0000E68C                            loc_DCA4:
0000E68C 4A28 0025                  		tst.b	$25(a0)
0000E690 6600                       		bne.s	locret_DCAE
0000E692 4A44                       		tst.w	d4
0000E694 6B00                       		bmi.s	Obj41_BounceDwn
0000E696                            
0000E696                            locret_DCAE:
0000E696 4E75                       		rts	
0000E698                            ; ===========================================================================
0000E698                            
0000E698                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E698 5428 0024                  		addq.b	#2,$24(a0)
0000E69C 5169 000C                  		subq.w	#8,$C(a1)
0000E6A0 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E6A6 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E6AA 08E9 0001 0022             		bset	#1,$22(a1)
0000E6B0 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6B6 137C 0002 0024             		move.b	#2,$24(a1)
0000E6BC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6C2 4228 0025                  		clr.b	$25(a0)
0000E6C6 303C 00CC                  		move.w	#$CC,d0
0000E6CA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6D0                            
0000E6D0                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E6D0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6D6 6000 C974                  		bra.w	AnimateSprite
0000E6DA                            ; ===========================================================================
0000E6DA                            
0000E6DA                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E6DA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6E0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E6E4 4E75                       		rts	
0000E6E6                            ; ===========================================================================
0000E6E6                            Ani_obj41:
0000E6E6                            	include "_anim\obj41.asm"
0000E6E6                            ; ---------------------------------------------------------------------------
0000E6E6                            ; Animation script - springs
0000E6E6                            ; ---------------------------------------------------------------------------
0000E6E6 0000                       		dc.w byte_DD02-Ani_obj41
0000E6E8 0000                       		dc.w byte_DD0E-Ani_obj41
0000E6EA 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E6F6 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E702                            		even
0000E702                            		even
0000E702                            
0000E702                            ; ---------------------------------------------------------------------------
0000E702                            ; Sprite mappings - springs
0000E702                            ; ---------------------------------------------------------------------------
0000E702                            Map_obj41:
0000E702                            	include "_maps\obj41.asm"
0000E702                            ; ---------------------------------------------------------------------------
0000E702                            ; Sprite mappings - springs
0000E702                            ; ---------------------------------------------------------------------------
0000E702 0000                       		dc.w byte_DD26-Map_obj41
0000E704 0000                       		dc.w byte_DD31-Map_obj41
0000E706 0000                       		dc.w byte_DD37-Map_obj41
0000E708 0000                       		dc.w byte_DD47-Map_obj41
0000E70A 0000                       		dc.w byte_DD4D-Map_obj41
0000E70C 0000                       		dc.w byte_DD53-Map_obj41
0000E70E 02                         byte_DD26:	dc.b 2
0000E70F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E714 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E719 01                         byte_DD31:	dc.b 1
0000E71A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E71F 03                         byte_DD37:	dc.b 3
0000E720 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E725 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E72A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E72F 01                         byte_DD47:	dc.b 1
0000E730 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E735 01                         byte_DD4D:	dc.b 1
0000E736 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E73B 04                         byte_DD53:	dc.b 4
0000E73C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E741 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E746 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E74B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E750                            		even
0000E750                            		even
0000E750                            
0000E750                            ; ===========================================================================
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            ; Object 42 - Newtron enemy (GHZ)
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            
0000E750                            Obj42:					; XREF: Obj_Index
0000E750 7000                       		moveq	#0,d0
0000E752 1028 0024                  		move.b	$24(a0),d0
0000E756 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E75A 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E75E                            ; ===========================================================================
0000E75E 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E760 0000                       		dc.w Obj42_Action-Obj42_Index
0000E762 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E764                            ; ===========================================================================
0000E764                            
0000E764                            Obj42_Main:				; XREF: Obj42_Index
0000E764 5428 0024                  		addq.b	#2,$24(a0)
0000E768 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E770 317C 049B 0002             		move.w	#$49B,2(a0)
0000E776 117C 0004 0001             		move.b	#4,1(a0)
0000E77C 117C 0004 0018             		move.b	#4,$18(a0)
0000E782 117C 0014 0019             		move.b	#$14,$19(a0)
0000E788 117C 0010 0016             		move.b	#$10,$16(a0)
0000E78E 117C 0008 0017             		move.b	#8,$17(a0)
0000E794                            
0000E794                            Obj42_Action:				; XREF: Obj42_Index
0000E794 7000                       		moveq	#0,d0
0000E796 1028 0025                  		move.b	$25(a0),d0
0000E79A 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E79E 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E7A2 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E7A8 6100 C8A2                  		bsr.w	AnimateSprite
0000E7AC 6000 0000                  		bra.w	MarkObjGone
0000E7B0                            ; ===========================================================================
0000E7B0 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E7B2 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E7B4 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E7B6 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E7B8 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E7BA                            ; ===========================================================================
0000E7BA                            
0000E7BA                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E7BA 08E8 0000 0022             		bset	#0,$22(a0)
0000E7C0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E7C4 9068 0008                  		sub.w	8(a0),d0
0000E7C8 6400                       		bcc.s	loc_DDEA
0000E7CA 4440                       		neg.w	d0
0000E7CC 08A8 0000 0022             		bclr	#0,$22(a0)
0000E7D2                            
0000E7D2                            loc_DDEA:
0000E7D2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E7D6 6400                       		bcc.s	locret_DE12	; if not, branch
0000E7D8 5428 0025                  		addq.b	#2,$25(a0)
0000E7DC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7E2 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E7E6 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E7E8 317C 249B 0002             		move.w	#$249B,2(a0)
0000E7EE 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E7F4 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E7FA                            
0000E7FA                            locret_DE12:
0000E7FA 4E75                       		rts	
0000E7FC                            ; ===========================================================================
0000E7FC                            
0000E7FC                            Obj42_Type00:				; XREF: Obj42_Index2
0000E7FC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E802 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E804 08E8 0000 0022             		bset	#0,$22(a0)
0000E80A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E80E 9068 0008                  		sub.w	8(a0),d0
0000E812 6400                       		bcc.s	locret_DE32
0000E814 08A8 0000 0022             		bclr	#0,$22(a0)
0000E81A                            
0000E81A                            locret_DE32:
0000E81A 4E75                       		rts	
0000E81C                            ; ===========================================================================
0000E81C                            
0000E81C                            Obj42_Fall:				; XREF: Obj42_Type00
0000E81C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E822 6600                       		bne.s	loc_DE42
0000E824 117C 000C 0020             		move.b	#$C,$20(a0)
0000E82A                            
0000E82A                            loc_DE42:
0000E82A 6100 F72A                  		bsr.w	ObjectFall
0000E82E 6100 0000                  		bsr.w	ObjHitFloor
0000E832 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E834 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E836 D368 000C                  		add.w	d1,$C(a0)
0000E83A 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E840 5428 0025                  		addq.b	#2,$25(a0)
0000E844 117C 0002 001C             		move.b	#2,$1C(a0)
0000E84A 0828 0005 0002             		btst	#5,2(a0)
0000E850 6700                       		beq.s	Obj42_Move
0000E852 5228 001C                  		addq.b	#1,$1C(a0)
0000E856                            
0000E856                            Obj42_Move:
0000E856 117C 000D 0020             		move.b	#$D,$20(a0)
0000E85C 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E862 0828 0000 0022             		btst	#0,$22(a0)
0000E868 6600                       		bne.s	locret_DE86
0000E86A 4468 0010                  		neg.w	$10(a0)
0000E86E                            
0000E86E                            locret_DE86:
0000E86E 4E75                       		rts	
0000E870                            ; ===========================================================================
0000E870                            
0000E870                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E870 6100 F756                  		bsr.w	SpeedToPos
0000E874 6100 0000                  		bsr.w	ObjHitFloor
0000E878 0C41 FFF8                  		cmpi.w	#-8,d1
0000E87C 6D00                       		blt.s	loc_DEA2
0000E87E 0C41 000C                  		cmpi.w	#$C,d1
0000E882 6C00                       		bge.s	loc_DEA2
0000E884 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E888 4E75                       		rts	
0000E88A                            ; ===========================================================================
0000E88A                            
0000E88A                            loc_DEA2:
0000E88A 5428 0025                  		addq.b	#2,$25(a0)
0000E88E 4E75                       		rts	
0000E890                            ; ===========================================================================
0000E890                            
0000E890                            Obj42_Speed:				; XREF: Obj42_Index2
0000E890 6100 F736                  		bsr.w	SpeedToPos
0000E894 4E75                       		rts	
0000E896                            ; ===========================================================================
0000E896                            
0000E896                            Obj42_Type01:				; XREF: Obj42_Index2
0000E896 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E89C 6600                       		bne.s	Obj42_FireMissile
0000E89E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E8A4                            
0000E8A4                            Obj42_FireMissile:
0000E8A4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E8AA 6600                       		bne.s	locret_DF14
0000E8AC 4A28 0032                  		tst.b	$32(a0)
0000E8B0 6600                       		bne.s	locret_DF14
0000E8B2 117C 0001 0032             		move.b	#1,$32(a0)
0000E8B8 6100 FBBA                  		bsr.w	SingleObjLoad
0000E8BC 6600                       		bne.s	locret_DF14
0000E8BE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E8C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8CE 5169 000C                  		subq.w	#8,$C(a1)
0000E8D2 337C 0200 0010             		move.w	#$200,$10(a1)
0000E8D8 303C 0014                  		move.w	#$14,d0
0000E8DC 0828 0000 0022             		btst	#0,$22(a0)
0000E8E2 6600                       		bne.s	loc_DF04
0000E8E4 4440                       		neg.w	d0
0000E8E6 4469 0010                  		neg.w	$10(a1)
0000E8EA                            
0000E8EA                            loc_DF04:
0000E8EA D169 0008                  		add.w	d0,8(a1)
0000E8EE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E8F4 137C 0001 0028             		move.b	#1,$28(a1)
0000E8FA                            
0000E8FA                            locret_DF14:
0000E8FA 4E75                       		rts	
0000E8FC                            ; ===========================================================================
0000E8FC                            
0000E8FC                            Obj42_Delete:				; XREF: Obj42_Index
0000E8FC 6000 F72C                  		bra.w	DeleteObject
0000E900                            ; ===========================================================================
0000E900                            Ani_obj42:
0000E900                            	include "_anim\obj42.asm"
0000E900                            ; ---------------------------------------------------------------------------
0000E900                            ; Animation script - Newtron enemy
0000E900                            ; ---------------------------------------------------------------------------
0000E900 0000                       		dc.w byte_DF24-Ani_obj42
0000E902 0000                       		dc.w byte_DF28-Ani_obj42
0000E904 0000                       		dc.w byte_DF30-Ani_obj42
0000E906 0000                       		dc.w byte_DF34-Ani_obj42
0000E908 0000                       		dc.w byte_DF38-Ani_obj42
0000E90A 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E90E 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E916 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E91A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E91E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E928                            		even
0000E928                            		even
0000E928                            
0000E928                            ; ---------------------------------------------------------------------------
0000E928                            ; Sprite mappings - Newtron enemy (GHZ)
0000E928                            ; ---------------------------------------------------------------------------
0000E928                            Map_obj42:
0000E928                            	include "_maps\obj42.asm"
0000E928                            ; ---------------------------------------------------------------------------
0000E928                            ; Sprite mappings - Newtron enemy (GHZ)
0000E928                            ; ---------------------------------------------------------------------------
0000E928 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E92C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E930 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E934 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E938 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E93C 0000                       		dc.w byte_DFF8-Map_obj42
0000E93E 03                         byte_DF58:	dc.b 3
0000E93F EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E944 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E949 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E94E 03                         byte_DF68:	dc.b 3
0000E94F EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E954 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E959 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E95E 03                         byte_DF78:	dc.b 3
0000E95F EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E964 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E969 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E96E 04                         byte_DF88:	dc.b 4
0000E96F EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E974 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E979 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E97E 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E983 03                         byte_DF9D:	dc.b 3
0000E984 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E989 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E98E 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E993 02                         byte_DFAD:	dc.b 2
0000E994 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E999 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E99E 03                         byte_DFB8:	dc.b 3
0000E99F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9A4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9A9 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E9AE 03                         byte_DFC8:	dc.b 3
0000E9AF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9B4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9B9 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E9BE 03                         byte_DFD8:	dc.b 3
0000E9BF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9C4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9C9 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E9CE 03                         byte_DFE8:	dc.b 3
0000E9CF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9D4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9D9 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E9DE 00                         byte_DFF8:	dc.b 0
0000E9E0 00                         		even
0000E9E0 00                         		even
0000E9E0                            
0000E9E0                            ; ===========================================================================
0000E9E0                            ; ---------------------------------------------------------------------------
0000E9E0                            ; Object 43 - Roller enemy (SYZ)
0000E9E0                            ; ---------------------------------------------------------------------------
0000E9E0                            
0000E9E0                            Obj43:					; XREF: Obj_Index
0000E9E0 7000                       		moveq	#0,d0
0000E9E2 1028 0024                  		move.b	$24(a0),d0
0000E9E6 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E9EA 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E9EE                            ; ===========================================================================
0000E9EE 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E9F0 0000                       		dc.w Obj43_Action-Obj43_Index
0000E9F2                            ; ===========================================================================
0000E9F2                            
0000E9F2                            Obj43_Main:				; XREF: Obj43_Index
0000E9F2 117C 000E 0016             		move.b	#$E,$16(a0)
0000E9F8 117C 0008 0017             		move.b	#8,$17(a0)
0000E9FE 6100 F556                  		bsr.w	ObjectFall
0000EA02 6100 0000                  		bsr.w	ObjHitFloor
0000EA06 4A41                       		tst.w	d1
0000EA08 6A00                       		bpl.s	locret_E052
0000EA0A D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA0E 317C 0000 0012             		move.w	#0,$12(a0)
0000EA14 5428 0024                  		addq.b	#2,$24(a0)
0000EA18 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA20 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA26 117C 0004 0001             		move.b	#4,1(a0)
0000EA2C 117C 0004 0018             		move.b	#4,$18(a0)
0000EA32 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA38                            
0000EA38                            locret_E052:
0000EA38 4E75                       		rts	
0000EA3A                            ; ===========================================================================
0000EA3A                            
0000EA3A                            Obj43_Action:				; XREF: Obj43_Index
0000EA3A 7000                       		moveq	#0,d0
0000EA3C 1028 0025                  		move.b	$25(a0),d0
0000EA40 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EA44 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EA48 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EA4E 6100 C5FC                  		bsr.w	AnimateSprite
0000EA52 3028 0008                  		move.w	8(a0),d0
0000EA56 0240 FF80                  		andi.w	#$FF80,d0
0000EA5A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA5E 0441 0080                  		subi.w	#$80,d1
0000EA62 0241 FF80                  		andi.w	#$FF80,d1
0000EA66 9041                       		sub.w	d1,d0
0000EA68 0C40 0280                  		cmpi.w	#$280,d0
0000EA6C 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EA70 6000 F57C                  		bra.w	DisplaySprite
0000EA74                            ; ===========================================================================
0000EA74                            
0000EA74                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EA74 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA78 7000                       		moveq	#0,d0
0000EA7A 1028 0023                  		move.b	$23(a0),d0
0000EA7E 6700                       		beq.s	Obj43_Delete
0000EA80 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EA86                            
0000EA86                            Obj43_Delete:
0000EA86 6000 F5A2                  		bra.w	DeleteObject
0000EA8A                            ; ===========================================================================
0000EA8A 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EA8C 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EA8E 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EA90 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EA92                            ; ===========================================================================
0000EA92                            
0000EA92                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EA92 3038 D008                  		move.w	($FFFFD008).w,d0
0000EA96 0440 0100                  		subi.w	#$100,d0
0000EA9A 6500                       		bcs.s	loc_E0D2
0000EA9C 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EAA0 6500                       		bcs.s	loc_E0D2
0000EAA2 5828 0025                  		addq.b	#4,$25(a0)
0000EAA6 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAAC 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EAB2 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EAB8                            
0000EAB8                            loc_E0D2:
0000EAB8 588F                       		addq.l	#4,sp
0000EABA 4E75                       		rts	
0000EABC                            ; ===========================================================================
0000EABC                            
0000EABC                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EABC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EAC2 6700                       		beq.s	loc_E0F8
0000EAC4 5368 0030                  		subq.w	#1,$30(a0)
0000EAC8 6A00                       		bpl.s	locret_E0F6
0000EACA 117C 0001 001C             		move.b	#1,$1C(a0)
0000EAD0 317C 0700 0010             		move.w	#$700,$10(a0)
0000EAD6 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EADC                            
0000EADC                            locret_E0F6:
0000EADC 4E75                       		rts	
0000EADE                            ; ===========================================================================
0000EADE                            
0000EADE                            loc_E0F8:
0000EADE 5428 0025                  		addq.b	#2,$25(a0)
0000EAE2 4E75                       		rts	
0000EAE4                            ; ===========================================================================
0000EAE4                            
0000EAE4                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EAE4 6100 0000                  		bsr.w	Obj43_Stop
0000EAE8 6100 F4DE                  		bsr.w	SpeedToPos
0000EAEC 6100 0000                  		bsr.w	ObjHitFloor
0000EAF0 0C41 FFF8                  		cmpi.w	#-8,d1
0000EAF4 6D00                       		blt.s	Obj43_Jump
0000EAF6 0C41 000C                  		cmpi.w	#$C,d1
0000EAFA 6C00                       		bge.s	Obj43_Jump
0000EAFC D368 000C                  		add.w	d1,$C(a0)
0000EB00 4E75                       		rts	
0000EB02                            ; ===========================================================================
0000EB02                            
0000EB02                            Obj43_Jump:
0000EB02 5428 0025                  		addq.b	#2,$25(a0)
0000EB06 08E8 0000 0032             		bset	#0,$32(a0)
0000EB0C 6700                       		beq.s	locret_E12E
0000EB0E 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB14                            
0000EB14                            locret_E12E:
0000EB14 4E75                       		rts	
0000EB16                            ; ===========================================================================
0000EB16                            
0000EB16                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB16 6100 F43E                  		bsr.w	ObjectFall
0000EB1A 4A68 0012                  		tst.w	$12(a0)
0000EB1E 6B00                       		bmi.s	locret_E150
0000EB20 6100 0000                  		bsr.w	ObjHitFloor
0000EB24 4A41                       		tst.w	d1
0000EB26 6A00                       		bpl.s	locret_E150
0000EB28 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB2C 5528 0025                  		subq.b	#2,$25(a0)
0000EB30 317C 0000 0012             		move.w	#0,$12(a0)
0000EB36                            
0000EB36                            locret_E150:
0000EB36 4E75                       		rts	
0000EB38                            
0000EB38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB38                            
0000EB38                            
0000EB38                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB38 4A28 0032                  		tst.b	$32(a0)
0000EB3C 6B00                       		bmi.s	locret_E188
0000EB3E 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB42 0440 0030                  		subi.w	#$30,d0
0000EB46 9068 0008                  		sub.w	8(a0),d0
0000EB4A 6400                       		bcc.s	locret_E188
0000EB4C 117C 0000 001C             		move.b	#0,$1C(a0)
0000EB52 117C 000E 0020             		move.b	#$E,$20(a0)
0000EB58 4268 0010                  		clr.w	$10(a0)
0000EB5C 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EB62 117C 0002 0025             		move.b	#2,$25(a0)
0000EB68 08E8 0007 0032             		bset	#7,$32(a0)
0000EB6E                            
0000EB6E                            locret_E188:
0000EB6E 4E75                       		rts	
0000EB70                            ; End of function Obj43_Stop
0000EB70                            
0000EB70                            ; ===========================================================================
0000EB70                            Ani_obj43:
0000EB70                            	include "_anim\obj43.asm"
0000EB70                            ; ---------------------------------------------------------------------------
0000EB70                            ; Animation script - Roller enemy
0000EB70                            ; ---------------------------------------------------------------------------
0000EB70 0000                       		dc.w byte_E190-Ani_obj43
0000EB72 0000                       		dc.w byte_E196-Ani_obj43
0000EB74 0000                       		dc.w byte_E19C-Ani_obj43
0000EB76 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EB7C 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EB82 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EB88 00                         		even
0000EB88 00                         		even
0000EB88                            
0000EB88                            ; ---------------------------------------------------------------------------
0000EB88                            ; Sprite mappings - Roller enemy (SYZ)
0000EB88                            ; ---------------------------------------------------------------------------
0000EB88                            Map_obj43:
0000EB88                            	include "_maps\obj43.asm"
0000EB88                            Map_61da:
0000EB88 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EB8A 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EB8C 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EB8E 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EB90 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EB92 02                         Map_61da_A: 	dc.b $2
0000EB93 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EB98 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EB9D 02                         Map_61da_15: 	dc.b $2
0000EB9E E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EBA3 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EBA8 01                         Map_61da_20: 	dc.b $1
0000EBA9 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EBAE 01                         Map_61da_26: 	dc.b $1
0000EBAF F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EBB4 01                         Map_61da_2C: 	dc.b $1
0000EBB5 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EBBA                            	even
0000EBBA                            	even
0000EBBA                            
0000EBBA                            ; ===========================================================================
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA                            ; Object 44 - walls (GHZ)
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA                            
0000EBBA                            Obj44:					; XREF: Obj_Index
0000EBBA 7000                       		moveq	#0,d0
0000EBBC 1028 0024                  		move.b	$24(a0),d0
0000EBC0 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EBC4 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EBC8                            ; ===========================================================================
0000EBC8 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EBCA 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EBCC 0000                       		dc.w Obj44_Display-Obj44_Index
0000EBCE                            ; ===========================================================================
0000EBCE                            
0000EBCE                            Obj44_Main:				; XREF: Obj44_Index
0000EBCE 5428 0024                  		addq.b	#2,$24(a0)
0000EBD2 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EBDA 317C 434C 0002             		move.w	#$434C,2(a0)
0000EBE0 0028 0004 0001             		ori.b	#4,1(a0)
0000EBE6 117C 0008 0019             		move.b	#8,$19(a0)
0000EBEC 117C 0006 0018             		move.b	#6,$18(a0)
0000EBF2 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EBF8 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EBFE 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC00 5428 0024                  		addq.b	#2,$24(a0)
0000EC04 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC06                            ; ===========================================================================
0000EC06                            
0000EC06                            Obj44_Solid:				; XREF: Obj44_Index
0000EC06 323C 0013                  		move.w	#$13,d1
0000EC0A 343C 0028                  		move.w	#$28,d2
0000EC0E 6100 A698                  		bsr.w	Obj44_SolidWall
0000EC12                            
0000EC12                            Obj44_Display:				; XREF: Obj44_Index
0000EC12 6100 F3DA                  		bsr.w	DisplaySprite
0000EC16 3028 0008                  		move.w	8(a0),d0
0000EC1A 0240 FF80                  		andi.w	#$FF80,d0
0000EC1E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC22 0441 0080                  		subi.w	#$80,d1
0000EC26 0241 FF80                  		andi.w	#$FF80,d1
0000EC2A 9041                       		sub.w	d1,d0
0000EC2C 0C40 0280                  		cmpi.w	#$280,d0
0000EC30 6200 F3F8                  		bhi.w	DeleteObject
0000EC34 4E75                       		rts	
0000EC36                            ; ===========================================================================
0000EC36                            ; ---------------------------------------------------------------------------
0000EC36                            ; Sprite mappings - walls (GHZ)
0000EC36                            ; ---------------------------------------------------------------------------
0000EC36                            Map_obj44:
0000EC36                            	include "_maps\obj44.asm"
0000EC36                            ; ---------------------------------------------------------------------------
0000EC36                            ; Sprite mappings - walls (GHZ)
0000EC36                            ; ---------------------------------------------------------------------------
0000EC36 0000                       		dc.w byte_E256-Map_obj44
0000EC38 0000                       		dc.w byte_E26B-Map_obj44
0000EC3A 0000                       		dc.w byte_E280-Map_obj44
0000EC3C 04                         byte_E256:	dc.b 4
0000EC3D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EC42 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC47 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC4C 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC51 04                         byte_E26B:	dc.b 4
0000EC52 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EC57 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC5C 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC61 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC66 04                         byte_E280:	dc.b 4
0000EC67 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EC6C F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EC71 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EC76 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EC7C 00                         		even
0000EC7C 00                         		even
0000EC7C                            
0000EC7C                            ; ===========================================================================
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            
0000EC7C                            Obj13:					; XREF: Obj_Index
0000EC7C 7000                       		moveq	#0,d0
0000EC7E 1028 0024                  		move.b	$24(a0),d0
0000EC82 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EC86 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EC8A 6000 0000                  		bra.w	Obj14_ChkDel
0000EC8E                            ; ===========================================================================
0000EC8E 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EC90 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92                            ;
0000EC92                            ; Lava ball production rates
0000EC92                            ;
0000EC92 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EC98                            ; ===========================================================================
0000EC98                            
0000EC98                            Obj13_Main:				; XREF: Obj13_Index
0000EC98 5428 0024                  		addq.b	#2,$24(a0)
0000EC9C 1028 0028                  		move.b	$28(a0),d0
0000ECA0 E848                       		lsr.w	#4,d0
0000ECA2 0240 000F                  		andi.w	#$F,d0
0000ECA6 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ECAC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ECB2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ECB8                            
0000ECB8                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ECB8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ECBC 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ECBE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ECC4 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ECC8 6600                       		bne.s	locret_E302
0000ECCA 6100 F7A8                  		bsr.w	SingleObjLoad
0000ECCE 6600                       		bne.s	locret_E302
0000ECD0 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ECD4 3368 0008 0008             		move.w	8(a0),8(a1)
0000ECDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ECE0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ECE6                            
0000ECE6                            locret_E302:
0000ECE6 4E75                       		rts	
0000ECE8                            ; ===========================================================================
0000ECE8                            ; ---------------------------------------------------------------------------
0000ECE8                            ; Object 14 - lava balls (MZ, SLZ)
0000ECE8                            ; ---------------------------------------------------------------------------
0000ECE8                            
0000ECE8                            Obj14:					; XREF: Obj_Index
0000ECE8 7000                       		moveq	#0,d0
0000ECEA 1028 0024                  		move.b	$24(a0),d0
0000ECEE 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ECF2 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ECF6 6000 F2F6                  		bra.w	DisplaySprite
0000ECFA                            ; ===========================================================================
0000ECFA 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ECFC 0000                       		dc.w Obj14_Action-Obj14_Index
0000ECFE 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED00                            
0000ED00 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED0A 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED12                            ; ===========================================================================
0000ED12                            
0000ED12                            Obj14_Main:				; XREF: Obj14_Index
0000ED12 5428 0024                  		addq.b	#2,$24(a0)
0000ED16 117C 0008 0016             		move.b	#8,$16(a0)
0000ED1C 117C 0008 0017             		move.b	#8,$17(a0)
0000ED22 217C 0000 BC4A 0004        		move.l	#Map_obj14,4(a0)
0000ED2A 317C 0345 0002             		move.w	#$345,2(a0)
0000ED30 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED36 6600                       		bne.s	loc_E35A
0000ED38 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000ED3E                            
0000ED3E                            loc_E35A:
0000ED3E 117C 0004 0001             		move.b	#4,1(a0)
0000ED44 117C 0003 0018             		move.b	#3,$18(a0)
0000ED4A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000ED50 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED56 4A28 0029                  		tst.b	$29(a0)
0000ED5A 6700                       		beq.s	Obj14_SetSpeed
0000ED5C 5428 0018                  		addq.b	#2,$18(a0)
0000ED60                            
0000ED60                            Obj14_SetSpeed:
0000ED60 7000                       		moveq	#0,d0
0000ED62 1028 0028                  		move.b	$28(a0),d0
0000ED66 D040                       		add.w	d0,d0
0000ED68 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000ED6E 117C 0008 0019             		move.b	#8,$19(a0)
0000ED74 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000ED7A 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000ED7C 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED82 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000ED88 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000ED8E 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000ED94                            
0000ED94                            Obj14_PlaySnd:
0000ED94 303C 00AE                  		move.w	#$AE,d0
0000ED98 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000ED9E                            
0000ED9E                            Obj14_Action:				; XREF: Obj14_Index
0000ED9E 7000                       		moveq	#0,d0
0000EDA0 1028 0028                  		move.b	$28(a0),d0
0000EDA4 D040                       		add.w	d0,d0
0000EDA6 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EDAA 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EDAE 6100 F218                  		bsr.w	SpeedToPos
0000EDB2 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EDB8 6100 C292                  		bsr.w	AnimateSprite
0000EDBC                            
0000EDBC                            Obj14_ChkDel:				; XREF: Obj13
0000EDBC 3028 0008                  		move.w	8(a0),d0
0000EDC0 0240 FF80                  		andi.w	#$FF80,d0
0000EDC4 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDC8 0441 0080                  		subi.w	#$80,d1
0000EDCC 0241 FF80                  		andi.w	#$FF80,d1
0000EDD0 9041                       		sub.w	d1,d0
0000EDD2 0C40 0280                  		cmpi.w	#$280,d0
0000EDD6 6200 F252                  		bhi.w	DeleteObject
0000EDDA 4E75                       		rts	
0000EDDC                            ; ===========================================================================
0000EDDC 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDE0 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDE4 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EDE8 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EDEC 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EDEE                            ; ===========================================================================
0000EDEE                            ; lavaball types 00-03 fly up and fall back down
0000EDEE                            
0000EDEE                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EDEE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EDF4 3028 0030                  		move.w	$30(a0),d0
0000EDF8 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EDFC 6400                       		bcc.s	loc_E41E	; if not, branch
0000EDFE 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE02                            
0000EE02                            loc_E41E:
0000EE02 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE08 4A68 0012                  		tst.w	$12(a0)
0000EE0C 6A00                       		bpl.s	locret_E430
0000EE0E 08E8 0001 0022             		bset	#1,$22(a0)
0000EE14                            
0000EE14                            locret_E430:
0000EE14 4E75                       		rts	
0000EE16                            ; ===========================================================================
0000EE16                            ; lavaball type	04 flies up until it hits the ceiling
0000EE16                            
0000EE16                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE16 08E8 0001 0022             		bset	#1,$22(a0)
0000EE1C 6100 0000                  		bsr.w	ObjHitCeiling
0000EE20 4A41                       		tst.w	d1
0000EE22 6A00                       		bpl.s	locret_E452
0000EE24 117C 0008 0028             		move.b	#8,$28(a0)
0000EE2A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE30 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE36                            
0000EE36                            locret_E452:
0000EE36 4E75                       		rts	
0000EE38                            ; ===========================================================================
0000EE38                            ; lavaball type	05 falls down until it hits the	floor
0000EE38                            
0000EE38                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE38 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE3E 6100 0000                  		bsr.w	ObjHitFloor
0000EE42 4A41                       		tst.w	d1
0000EE44 6A00                       		bpl.s	locret_E474
0000EE46 117C 0008 0028             		move.b	#8,$28(a0)
0000EE4C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE52 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EE58                            
0000EE58                            locret_E474:
0000EE58 4E75                       		rts	
0000EE5A                            ; ===========================================================================
0000EE5A                            ; lavaball types 06-07 move sideways
0000EE5A                            
0000EE5A                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EE5A 08E8 0000 0022             		bset	#0,$22(a0)
0000EE60 76F8                       		moveq	#-8,d3
0000EE62 6100 0000                  		bsr.w	ObjHitWallLeft
0000EE66 4A41                       		tst.w	d1
0000EE68 6A00                       		bpl.s	locret_E498
0000EE6A 117C 0008 0028             		move.b	#8,$28(a0)
0000EE70 117C 0003 001C             		move.b	#3,$1C(a0)
0000EE76 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EE7C                            
0000EE7C                            locret_E498:
0000EE7C 4E75                       		rts	
0000EE7E                            ; ===========================================================================
0000EE7E                            
0000EE7E                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EE7E 08A8 0000 0022             		bclr	#0,$22(a0)
0000EE84 7608                       		moveq	#8,d3
0000EE86 6100 0000                  		bsr.w	ObjHitWallRight
0000EE8A 4A41                       		tst.w	d1
0000EE8C 6A00                       		bpl.s	locret_E4BC
0000EE8E 117C 0008 0028             		move.b	#8,$28(a0)
0000EE94 117C 0003 001C             		move.b	#3,$1C(a0)
0000EE9A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEA0                            
0000EEA0                            locret_E4BC:
0000EEA0 4E75                       		rts	
0000EEA2                            ; ===========================================================================
0000EEA2                            
0000EEA2                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EEA2 4E75                       		rts	
0000EEA4                            ; ===========================================================================
0000EEA4                            
0000EEA4                            Obj14_Delete:				; XREF: Obj14_Index
0000EEA4 6000 F184                  		bra.w	DeleteObject
0000EEA8                            ; ===========================================================================
0000EEA8                            Ani_obj14:
0000EEA8                            	include "_anim\obj14.asm"
0000EEA8                            ; ---------------------------------------------------------------------------
0000EEA8                            ; Animation script - lava balls
0000EEA8                            ; ---------------------------------------------------------------------------
0000EEA8 0000                       		dc.w byte_E4CC-Ani_obj14
0000EEAA 0000                       		dc.w byte_E4D2-Ani_obj14
0000EEAC 0000                       		dc.w byte_E4D6-Ani_obj14
0000EEAE 0000                       		dc.w byte_E4DC-Ani_obj14
0000EEB0 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EEB6 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EEBA 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EEC0 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EEC4                            		even
0000EEC4                            		even
0000EEC4                            
0000EEC4                            ; ===========================================================================
0000EEC4                            ; ---------------------------------------------------------------------------
0000EEC4                            ; Object 6D - flame thrower (SBZ)
0000EEC4                            ; ---------------------------------------------------------------------------
0000EEC4                            
0000EEC4                            Obj6D:					; XREF: Obj_Index
0000EEC4 7000                       		moveq	#0,d0
0000EEC6 1028 0024                  		move.b	$24(a0),d0
0000EECA 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EECE 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EED2                            ; ===========================================================================
0000EED2 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EED4 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EED6                            ; ===========================================================================
0000EED6                            
0000EED6                            Obj6D_Main:				; XREF: Obj6D_Index
0000EED6 5428 0024                  		addq.b	#2,$24(a0)
0000EEDA 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EEE2 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EEE8 0028 0004 0001             		ori.b	#4,1(a0)
0000EEEE 117C 0001 0018             		move.b	#1,$18(a0)
0000EEF4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EEFA 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF00 1028 0028                  		move.b	$28(a0),d0
0000EF04 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF08 D040                       		add.w	d0,d0		; multiply by 2
0000EF0A 3140 0030                  		move.w	d0,$30(a0)
0000EF0E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF12 1028 0028                  		move.b	$28(a0),d0
0000EF16 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF1A EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF1C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF20 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF26 0828 0001 0022             		btst	#1,$22(a0)
0000EF2C 6700                       		beq.s	Obj6D_Action
0000EF2E 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF34 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF3A                            
0000EF3A                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF3A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EF3E 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EF40 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EF46 0868 0000 001C             		bchg	#0,$1C(a0)
0000EF4C 6700                       		beq.s	loc_E57A
0000EF4E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EF54 303C 00B3                  		move.w	#$B3,d0
0000EF58 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000EF5E                            
0000EF5E                            loc_E57A:
0000EF5E 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EF64 6100 C0E6                  		bsr.w	AnimateSprite
0000EF68 117C 0000 0020             		move.b	#0,$20(a0)
0000EF6E 1028 0036                  		move.b	$36(a0),d0
0000EF72 B028 001A                  		cmp.b	$1A(a0),d0
0000EF76 6600                       		bne.s	Obj6D_ChkDel
0000EF78 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EF7E                            
0000EF7E                            Obj6D_ChkDel:
0000EF7E 3028 0008                  		move.w	8(a0),d0
0000EF82 0240 FF80                  		andi.w	#$FF80,d0
0000EF86 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF8A 0441 0080                  		subi.w	#$80,d1
0000EF8E 0241 FF80                  		andi.w	#$FF80,d1
0000EF92 9041                       		sub.w	d1,d0
0000EF94 0C40 0280                  		cmpi.w	#$280,d0
0000EF98 6200 F090                  		bhi.w	DeleteObject
0000EF9C 6000 F050                  		bra.w	DisplaySprite
0000EFA0                            ; ===========================================================================
0000EFA0                            Ani_obj6D:
0000EFA0                            	include "_anim\obj6D.asm"
0000EFA0                            ; ---------------------------------------------------------------------------
0000EFA0                            ; Animation script - flamethrower (SBZ)
0000EFA0                            ; ---------------------------------------------------------------------------
0000EFA0 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EFA2 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EFA4 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EFA6 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EFA8 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EFB6 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EFC0 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EFCE 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EFD8                            		even
0000EFD8                            		even
0000EFD8                            
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            ; Sprite mappings - flame thrower (SBZ)
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            Map_obj6D:
0000EFD8                            	include "_maps\obj6D.asm"
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            ; Sprite mappings - flame thrower (SBZ)
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EFDC 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EFE0 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EFE4 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EFE8 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EFEC 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EFF0 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EFF4 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EFF8 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EFFC 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F000 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F004 01                         byte_E620:	dc.b 1
0000F005 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F00A 02                         byte_E626:	dc.b 2
0000F00B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F010 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F015 02                         byte_E631:	dc.b 2
0000F016 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F01B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F020 03                         byte_E63C:	dc.b 3
0000F021 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F026 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F02B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F030 03                         byte_E64C:	dc.b 3
0000F031 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F036 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F03B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F040 04                         byte_E65C:	dc.b 4
0000F041 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F046 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F04B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F050 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F055 04                         byte_E671:	dc.b 4
0000F056 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F05B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F060 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F065 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F06A 05                         byte_E686:	dc.b 5
0000F06B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F070 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F075 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F07A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F07F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F084 05                         byte_E6A0:	dc.b 5
0000F085 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F08A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F08F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F094 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F099 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F09E 06                         byte_E6BA:	dc.b 6
0000F09F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F0A4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F0A9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0AE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F0B3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0B8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0BD 06                         byte_E6D9:	dc.b 6
0000F0BE E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F0C3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0C8 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F0CD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0D2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0D7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0DC 01                         byte_E6F8:	dc.b 1
0000F0DD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0E2 02                         byte_E6FE:	dc.b 2
0000F0E3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0E8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0ED 02                         byte_E709:	dc.b 2
0000F0EE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0F3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0F8 03                         byte_E714:	dc.b 3
0000F0F9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0FE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F103 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F108 03                         byte_E724:	dc.b 3
0000F109 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F10E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F113 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F118 04                         byte_E734:	dc.b 4
0000F119 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F11E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F123 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F128 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F12D 04                         byte_E749:	dc.b 4
0000F12E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F133 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F138 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F13D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F142 05                         byte_E75E:	dc.b 5
0000F143 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F148 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F14D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F152 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F157 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F15C 05                         byte_E778:	dc.b 5
0000F15D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F162 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F167 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F16C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F171 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F176 06                         byte_E792:	dc.b 6
0000F177 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F17C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F181 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F186 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F18B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F190 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F195 06                         byte_E7B1:	dc.b 6
0000F196 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F19B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1A0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1A5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1AA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1AF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1B4                            		even
0000F1B4                            		even
0000F1B4                            
0000F1B4                            ; ===========================================================================
0000F1B4                            ; ---------------------------------------------------------------------------
0000F1B4                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F1B4                            ; ---------------------------------------------------------------------------
0000F1B4                            
0000F1B4                            Obj46:					; XREF: Obj_Index
0000F1B4 7000                       		moveq	#0,d0
0000F1B6 1028 0024                  		move.b	$24(a0),d0
0000F1BA 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F1BE 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F1C2                            ; ===========================================================================
0000F1C2 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F1C4 0000                       		dc.w Obj46_Action-Obj46_Index
0000F1C6                            ; ===========================================================================
0000F1C6                            
0000F1C6                            Obj46_Main:				; XREF: Obj46_Index
0000F1C6 5428 0024                  		addq.b	#2,$24(a0)
0000F1CA 117C 000F 0016             		move.b	#$F,$16(a0)
0000F1D0 117C 000F 0017             		move.b	#$F,$17(a0)
0000F1D6 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F1DE 317C 4000 0002             		move.w	#$4000,2(a0)
0000F1E4 117C 0004 0001             		move.b	#4,1(a0)
0000F1EA 117C 0003 0018             		move.b	#3,$18(a0)
0000F1F0 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1F6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F1FC 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F202                            
0000F202                            Obj46_Action:				; XREF: Obj46_Index
0000F202 4A28 0001                  		tst.b	1(a0)
0000F206 6A00                       		bpl.s	Obj46_ChkDel
0000F208 7000                       		moveq	#0,d0
0000F20A 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F20E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F212 D040                       		add.w	d0,d0
0000F214 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F218 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F21C 323C 001B                  		move.w	#$1B,d1
0000F220 343C 0010                  		move.w	#$10,d2
0000F224 363C 0011                  		move.w	#$11,d3
0000F228 3828 0008                  		move.w	8(a0),d4
0000F22C 6100 0000                  		bsr.w	SolidObject
0000F230                            
0000F230                            Obj46_ChkDel:
0000F230 6100 EDBC                  		bsr.w	DisplaySprite
0000F234 3028 0008                  		move.w	8(a0),d0
0000F238 0240 FF80                  		andi.w	#$FF80,d0
0000F23C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F240 0441 0080                  		subi.w	#$80,d1
0000F244 0241 FF80                  		andi.w	#$FF80,d1
0000F248 9041                       		sub.w	d1,d0
0000F24A 0C40 0280                  		cmpi.w	#$280,d0
0000F24E 6200 EDDA                  		bhi.w	DeleteObject
0000F252 4E75                       		rts	
0000F254                            ; ===========================================================================
0000F254 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F256 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F258 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F25A 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F25C 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F25E                            ; ===========================================================================
0000F25E                            
0000F25E                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F25E 4E75                       		rts	
0000F260                            ; ===========================================================================
0000F260                            
0000F260                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F260 3038 D008                  		move.w	($FFFFD008).w,d0
0000F264 9068 0008                  		sub.w	8(a0),d0
0000F268 6400                       		bcc.s	loc_E888
0000F26A 4440                       		neg.w	d0
0000F26C                            
0000F26C                            loc_E888:
0000F26C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F270 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F272 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F278                            
0000F278                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F278 7000                       		moveq	#0,d0
0000F27A 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F27E 0828 0003 0028             		btst	#3,$28(a0)
0000F284 6700                       		beq.s	loc_E8A8
0000F286 4440                       		neg.w	d0
0000F288 0640 0010                  		addi.w	#$10,d0
0000F28C                            
0000F28C                            loc_E8A8:
0000F28C 3228 0030                  		move.w	$30(a0),d1
0000F290 9240                       		sub.w	d0,d1
0000F292 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F296 4E75                       		rts	
0000F298                            ; ===========================================================================
0000F298                            
0000F298                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F298 6100 ED2E                  		bsr.w	SpeedToPos
0000F29C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F2A2 6100 0000                  		bsr.w	ObjHitFloor
0000F2A6 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F2A8 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F2AC D368 000C                  		add.w	d1,$C(a0)
0000F2B0 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F2B4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F2BA 117C 0004 0028             		move.b	#4,$28(a0)
0000F2C0 3011                       		move.w	(a1),d0
0000F2C2 0240 03FF                  		andi.w	#$3FF,d0
0000F2C6 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F2CA 6400                       		bcc.s	locret_E8EE
0000F2CC 117C 0000 0028             		move.b	#0,$28(a0)
0000F2D2                            
0000F2D2                            locret_E8EE:
0000F2D2 4E75                       		rts	
0000F2D4                            ; ===========================================================================
0000F2D4                            
0000F2D4                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F2D4 7000                       		moveq	#0,d0
0000F2D6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F2DA E648                       		lsr.w	#3,d0
0000F2DC 3228 0030                  		move.w	$30(a0),d1
0000F2E0 9240                       		sub.w	d0,d1
0000F2E2 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F2E6 4E75                       		rts	
0000F2E8                            ; ===========================================================================
0000F2E8                            ; ---------------------------------------------------------------------------
0000F2E8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2E8                            ; ---------------------------------------------------------------------------
0000F2E8                            Map_obj46:
0000F2E8                            	include "_maps\obj46.asm"
0000F2E8                            ; ---------------------------------------------------------------------------
0000F2E8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2E8                            ; ---------------------------------------------------------------------------
0000F2E8 0000                       		dc.w byte_E906-Map_obj46
0000F2EA 01                         byte_E906:	dc.b 1
0000F2EB F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F2F0                            		even
0000F2F0                            		even
0000F2F0                            
0000F2F0                            ; ===========================================================================
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            ; Object 12 - lamp (SYZ)
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            
0000F2F0                            Obj12:					; XREF: Obj_Index
0000F2F0 7000                       		moveq	#0,d0
0000F2F2 1028 0024                  		move.b	$24(a0),d0
0000F2F6 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F2FA 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F2FE                            ; ===========================================================================
0000F2FE 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F300 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F302                            ; ===========================================================================
0000F302                            
0000F302                            Obj12_Main:				; XREF: Obj12_Index
0000F302 5428 0024                  		addq.b	#2,$24(a0)
0000F306 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F30E 317C 0000 0002             		move.w	#0,2(a0)
0000F314 117C 0004 0001             		move.b	#4,1(a0)
0000F31A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F320 117C 0006 0018             		move.b	#6,$18(a0)
0000F326                            
0000F326                            Obj12_Animate:				; XREF: Obj12_Index
0000F326 5328 001E                  		subq.b	#1,$1E(a0)
0000F32A 6A00                       		bpl.s	Obj12_ChkDel
0000F32C 117C 0007 001E             		move.b	#7,$1E(a0)
0000F332 5228 001A                  		addq.b	#1,$1A(a0)
0000F336 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F33C 6500                       		bcs.s	Obj12_ChkDel
0000F33E 117C 0000 001A             		move.b	#0,$1A(a0)
0000F344                            
0000F344                            Obj12_ChkDel:
0000F344 3028 0008                  		move.w	8(a0),d0
0000F348 0240 FF80                  		andi.w	#$FF80,d0
0000F34C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F350 0441 0080                  		subi.w	#$80,d1
0000F354 0241 FF80                  		andi.w	#$FF80,d1
0000F358 9041                       		sub.w	d1,d0
0000F35A 0C40 0280                  		cmpi.w	#$280,d0
0000F35E 6200 ECCA                  		bhi.w	DeleteObject
0000F362 6000 EC8A                  		bra.w	DisplaySprite
0000F366                            ; ===========================================================================
0000F366                            ; ---------------------------------------------------------------------------
0000F366                            ; Sprite mappings - lamp (SYZ)
0000F366                            ; ---------------------------------------------------------------------------
0000F366                            Map_obj12:
0000F366                            	include "_maps\obj12.asm"
0000F366                            ; ---------------------------------------------------------------------------
0000F366                            ; Sprite mappings - lamp (SYZ)
0000F366                            ; ---------------------------------------------------------------------------
0000F366 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F36A 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F36E 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F372 02                         byte_E98E:	dc.b 2
0000F373 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F378 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F37D 02                         byte_E999:	dc.b 2
0000F37E F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F383 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F388 02                         byte_E9A4:	dc.b 2
0000F389 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F38E 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F393 02                         byte_E9AF:	dc.b 2
0000F394 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F399 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F39E 02                         byte_E9BA:	dc.b 2
0000F39F F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F3A4 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F3A9 02                         byte_E9C5:	dc.b 2
0000F3AA F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F3AF 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F3B4                            		even
0000F3B4                            		even
0000F3B4                            
0000F3B4                            ; ===========================================================================
0000F3B4                            ; ---------------------------------------------------------------------------
0000F3B4                            ; Object 47 - pinball bumper (SYZ)
0000F3B4                            ; ---------------------------------------------------------------------------
0000F3B4                            
0000F3B4                            Obj47:					; XREF: Obj_Index
0000F3B4 7000                       		moveq	#0,d0
0000F3B6 1028 0024                  		move.b	$24(a0),d0
0000F3BA 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F3BE 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F3C2                            ; ===========================================================================
0000F3C2 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F3C4 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F3C6                            ; ===========================================================================
0000F3C6                            
0000F3C6                            Obj47_Main:				; XREF: Obj47_Index
0000F3C6 5428 0024                  		addq.b	#2,$24(a0)
0000F3CA 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F3D2 317C 0380 0002             		move.w	#$380,2(a0)
0000F3D8 117C 0004 0001             		move.b	#4,1(a0)
0000F3DE 117C 0010 0019             		move.b	#$10,$19(a0)
0000F3E4 117C 0001 0018             		move.b	#1,$18(a0)
0000F3EA 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F3F0                            
0000F3F0                            Obj47_Hit:				; XREF: Obj47_Index
0000F3F0 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F3F4 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F3F8 4228 0021                  		clr.b	$21(a0)
0000F3FC 43F8 D000                  		lea	($FFFFD000).w,a1
0000F400 3228 0008                  		move.w	8(a0),d1
0000F404 3428 000C                  		move.w	$C(a0),d2
0000F408 9269 0008                  		sub.w	8(a1),d1
0000F40C 9469 000C                  		sub.w	$C(a1),d2
0000F410 4EB9 0000 303A             		jsr	(CalcAngle).l
0000F416 4EB9 0000 2D6C             		jsr	(CalcSine).l
0000F41C C3FC F900                  		muls.w	#-$700,d1
0000F420 E081                       		asr.l	#8,d1
0000F422 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F426 C1FC F900                  		muls.w	#-$700,d0
0000F42A E080                       		asr.l	#8,d0
0000F42C 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F430 08E9 0001 0022             		bset	#1,$22(a1)
0000F436 08A9 0004 0022             		bclr	#4,$22(a1)
0000F43C 08A9 0005 0022             		bclr	#5,$22(a1)
0000F442 4229 003C                  		clr.b	$3C(a1)
0000F446 117C 0001 001C             		move.b	#1,$1C(a0)
0000F44C 303C 00B4                  		move.w	#$B4,d0
0000F450 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F456 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F45A 7000                       		moveq	#0,d0
0000F45C 1028 0023                  		move.b	$23(a0),d0
0000F460 6700                       		beq.s	Obj47_Score
0000F462 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F468 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F46A 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F46E                            
0000F46E                            Obj47_Score:
0000F46E 7001                       		moveq	#1,d0
0000F470 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F476 6100 EFFC                  		bsr.w	SingleObjLoad
0000F47A 6600                       		bne.s	Obj47_Display
0000F47C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F480 3368 0008 0008             		move.w	8(a0),8(a1)
0000F486 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F48C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F492                            
0000F492                            Obj47_Display:
0000F492 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F498 6100 BBB2                  		bsr.w	AnimateSprite
0000F49C 3028 0008                  		move.w	8(a0),d0
0000F4A0 0240 FF80                  		andi.w	#$FF80,d0
0000F4A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4A8 0441 0080                  		subi.w	#$80,d1
0000F4AC 0241 FF80                  		andi.w	#$FF80,d1
0000F4B0 9041                       		sub.w	d1,d0
0000F4B2 0C40 0280                  		cmpi.w	#$280,d0
0000F4B6 6200                       		bhi.s	Obj47_ChkHit
0000F4B8 6000 EB34                  		bra.w	DisplaySprite
0000F4BC                            ; ===========================================================================
0000F4BC                            
0000F4BC                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F4BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4C0 7000                       		moveq	#0,d0
0000F4C2 1028 0023                  		move.b	$23(a0),d0
0000F4C6 6700                       		beq.s	Obj47_Delete
0000F4C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F4CE                            
0000F4CE                            Obj47_Delete:
0000F4CE 6000 EB5A                  		bra.w	DeleteObject
0000F4D2                            ; ===========================================================================
0000F4D2                            Ani_obj47:
0000F4D2                            	include "_anim\obj47.asm"
0000F4D2                            ; ---------------------------------------------------------------------------
0000F4D2                            ; Animation script - flamethrower (SBZ)
0000F4D2                            ; ---------------------------------------------------------------------------
0000F4D2 0000                       		dc.w byte_EAF4-Ani_obj47
0000F4D4 0000                       		dc.w byte_EAF8-Ani_obj47
0000F4D6 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F4DA 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F4E2                            		even
0000F4E2                            		even
0000F4E2                            
0000F4E2                            ; ---------------------------------------------------------------------------
0000F4E2                            ; Sprite mappings - pinball bumper (SYZ)
0000F4E2                            ; ---------------------------------------------------------------------------
0000F4E2                            Map_obj47:
0000F4E2                            	include "_maps\obj47.asm"
0000F4E2                            ; ---------------------------------------------------------------------------
0000F4E2                            ; Sprite mappings - pinball bumper (SYZ)
0000F4E2                            ; ---------------------------------------------------------------------------
0000F4E2 0000                       		dc.w byte_EB06-Map_obj47
0000F4E4 0000                       		dc.w byte_EB11-Map_obj47
0000F4E6 0000                       		dc.w byte_EB1C-Map_obj47
0000F4E8 02                         byte_EB06:	dc.b 2
0000F4E9 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F4EE F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F4F3 02                         byte_EB11:	dc.b 2
0000F4F4 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F4F9 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F4FE 02                         byte_EB1C:	dc.b 2
0000F4FF F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F504 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F50A 00                         		even
0000F50A 00                         		even
0000F50A                            
0000F50A                            ; ===========================================================================
0000F50A                            ; ---------------------------------------------------------------------------
0000F50A                            ; Object 0D - signpost at the end of a level
0000F50A                            ; ---------------------------------------------------------------------------
0000F50A                            
0000F50A                            Obj0D:					; XREF: Obj_Index
0000F50A 7000                       		moveq	#0,d0
0000F50C 1028 0024                  		move.b	$24(a0),d0
0000F510 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F514 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F518 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F51E 6100 BB2C                  		bsr.w	AnimateSprite
0000F522 6100 EACA                  		bsr.w	DisplaySprite
0000F526 3028 0008                  		move.w	8(a0),d0
0000F52A 0240 FF80                  		andi.w	#$FF80,d0
0000F52E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F532 0441 0080                  		subi.w	#$80,d1
0000F536 0241 FF80                  		andi.w	#$FF80,d1
0000F53A 9041                       		sub.w	d1,d0
0000F53C 0C40 0280                  		cmpi.w	#$280,d0
0000F540 6200 EAE8                  		bhi.w	DeleteObject
0000F544 4E75                       		rts	
0000F546                            ; ===========================================================================
0000F546 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F548 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F54A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F54C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F54E 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F550                            ; ===========================================================================
0000F550                            
0000F550                            Obj0D_Main:				; XREF: Obj0D_Index
0000F550 5428 0024                  		addq.b	#2,$24(a0)
0000F554 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F55C 317C 0680 0002             		move.w	#$680,2(a0)
0000F562 117C 0004 0001             		move.b	#4,1(a0)
0000F568 117C 0018 0019             		move.b	#$18,$19(a0)
0000F56E 117C 0004 0018             		move.b	#4,$18(a0)
0000F574                            
0000F574                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F574 3038 D008                  		move.w	($FFFFD008).w,d0
0000F578 9068 0008                  		sub.w	8(a0),d0
0000F57C 6500                       		bcs.s	locret_EBBA
0000F57E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F582 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F584 303C 00CF                  		move.w	#$CF,d0
0000F588 4EB9 0000 15CC             		jsr	(PlaySound).l	; play signpost	sound
0000F58E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F592 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F598 5428 0024                  		addq.b	#2,$24(a0)
0000F59C                            
0000F59C                            locret_EBBA:
0000F59C 4E75                       		rts	
0000F59E                            ; ===========================================================================
0000F59E                            
0000F59E                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F59E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F5A2 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F5A4 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F5AA 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F5AE 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F5B4 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F5B6 5428 0024                  		addq.b	#2,$24(a0)
0000F5BA                            
0000F5BA                            Obj0D_Sparkle:
0000F5BA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F5BE 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F5C0 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F5C6 7000                       		moveq	#0,d0
0000F5C8 1028 0034                  		move.b	$34(a0),d0
0000F5CC 5428 0034                  		addq.b	#2,$34(a0)
0000F5D0 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F5D6 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F5DA 6100 EE98                  		bsr.w	SingleObjLoad
0000F5DE 6600                       		bne.s	locret_EC42
0000F5E0 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F5E4 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F5EA 101A                       		move.b	(a2)+,d0
0000F5EC 4880                       		ext.w	d0
0000F5EE D068 0008                  		add.w	8(a0),d0
0000F5F2 3340 0008                  		move.w	d0,8(a1)
0000F5F6 101A                       		move.b	(a2)+,d0
0000F5F8 4880                       		ext.w	d0
0000F5FA D068 000C                  		add.w	$C(a0),d0
0000F5FE 3340 000C                  		move.w	d0,$C(a1)
0000F602 237C 0000 A7EA 0004        		move.l	#Map_obj25,4(a1)
0000F60A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F610 137C 0004 0001             		move.b	#4,1(a1)
0000F616 137C 0002 0018             		move.b	#2,$18(a1)
0000F61C 137C 0008 0019             		move.b	#8,$19(a1)
0000F622                            
0000F622                            locret_EC42:
0000F622 4E75                       		rts	
0000F624                            ; ===========================================================================
0000F624 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F626 0808                       		dc.b	8,   8
0000F628 F000                       		dc.b -$10,   0
0000F62A 18F8                       		dc.b  $18,  -8
0000F62C 00F8                       		dc.b	0,  -8
0000F62E 1000                       		dc.b  $10,   0
0000F630 E808                       		dc.b -$18,   8
0000F632 1810                       		dc.b  $18, $10
0000F634                            ; ===========================================================================
0000F634                            
0000F634                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F634 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F638 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F63C 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F642 6600                       		bne.s	loc_EC70
0000F644 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F64A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F650 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F652 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F658 6000                       		bra.s	loc_EC70
0000F65A                            
0000F65A                            Obj0D_MoveLeft:
0000F65A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F660                            
0000F660                            loc_EC70:
0000F660 4A38 D000                  		tst.b	($FFFFD000).w
0000F664 6700                       		beq.s	loc_EC86
0000F666 3038 D008                  		move.w	($FFFFD008).w,d0
0000F66A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F66E 0641 0128                  		addi.w	#$128,d1
0000F672 B041                       		cmp.w	d1,d0
0000F674 6500                       		bcs.s	locret_ECEE
0000F676                            
0000F676                            loc_EC86:
0000F676 5428 0024                  		addq.b	#2,$24(a0)
0000F67A                            
0000F67A                            ; ---------------------------------------------------------------------------
0000F67A                            ; Subroutine to	set up bonuses at the end of an	act
0000F67A                            ; ---------------------------------------------------------------------------
0000F67A                            
0000F67A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F67A                            
0000F67A                            
0000F67A                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F67A 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F67E 6600                       		bne.s	locret_ECEE
0000F680 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F686 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F68A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F68E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F694 7010                       		moveq	#$10,d0
0000F696 4EB9 0000 17E8             		jsr	(LoadPLC2).l	; load title card patterns
0000F69C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F6A2 7000                       		moveq	#0,d0
0000F6A4 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F6A8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F6AC 7200                       		moveq	#0,d1
0000F6AE 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F6B2 D041                       		add.w	d1,d0		; add up your time
0000F6B4 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F6B8 7214                       		moveq	#$14,d1
0000F6BA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F6BC 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F6BE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F6C0                            
0000F6C0                            loc_ECD0:
0000F6C0 D040                       		add.w	d0,d0
0000F6C2 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F6C8 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F6CC C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F6D0 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F6D4 303C 008E                  		move.w	#$8E,d0
0000F6D8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F6DE                            
0000F6DE                            locret_ECEE:
0000F6DE 4E75                       		rts	
0000F6E0                            ; End of function GotThroughAct
0000F6E0                            
0000F6E0                            ; ===========================================================================
0000F6E0 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F6F4 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F70A                            ; ===========================================================================
0000F70A                            
0000F70A                            locret_ED1A:				; XREF: Obj0D_Index
0000F70A 4E75                       		rts	
0000F70C                            ; ===========================================================================
0000F70C                            Ani_obj0D:
0000F70C                            	include "_anim\obj0D.asm"
0000F70C                            ; ---------------------------------------------------------------------------
0000F70C                            ; Animation script - signpost
0000F70C                            ; ---------------------------------------------------------------------------
0000F70C 0000                       		dc.w byte_ED24-Ani_obj0D
0000F70E 0000                       		dc.w byte_ED28-Ani_obj0D
0000F710 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F712 0000                       		dc.w byte_ED34-Ani_obj0D
0000F714 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F718 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F71E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F724 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F728 00                         		even
0000F728 00                         		even
0000F728                            
0000F728                            ; ---------------------------------------------------------------------------
0000F728                            ; Sprite mappings - signpost
0000F728                            ; ---------------------------------------------------------------------------
0000F728                            Map_obj0D:
0000F728                            	include "_maps\obj0D.asm"
0000F728                            ; ---------------------------------------------------------------------------
0000F728                            ; Sprite mappings - signpost
0000F728                            ; ---------------------------------------------------------------------------
0000F728 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F72C 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F730 0000                       		dc.w byte_ED73-Map_obj0D
0000F732 03                         byte_ED42:	dc.b 3
0000F733 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F738 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F73D 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F742 02                         byte_ED52:	dc.b 2
0000F743 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F748 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F74D 02                         byte_ED5D:	dc.b 2
0000F74E F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F753 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F758 02                         byte_ED68:	dc.b 2
0000F759 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F75E 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F763 03                         byte_ED73:	dc.b 3
0000F764 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F769 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F76E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F774 00                         		even
0000F774 00                         		even
0000F774                            
0000F774                            ; ===========================================================================
0000F774                            ; ---------------------------------------------------------------------------
0000F774                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F774                            ; ---------------------------------------------------------------------------
0000F774                            
0000F774                            Obj4C:					; XREF: Obj_Index
0000F774 7000                       		moveq	#0,d0
0000F776 1028 0024                  		move.b	$24(a0),d0
0000F77A 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F77E 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F782 6000 0000                  		bra.w	Obj4D_ChkDel
0000F786                            ; ===========================================================================
0000F786 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F788 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F78A 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F78C 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F78E 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F790 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F792                            ; ===========================================================================
0000F792                            
0000F792                            Obj4C_Main:				; XREF: Obj4C_Index
0000F792 5428 0024                  		addq.b	#2,$24(a0)
0000F796 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F79E 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F7A4 117C 0004 0001             		move.b	#4,1(a0)
0000F7AA 117C 0001 0018             		move.b	#1,$18(a0)
0000F7B0 117C 0038 0019             		move.b	#$38,$19(a0)
0000F7B6 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F7BC                            
0000F7BC                            loc_EDCC:				; XREF: Obj4C_Index
0000F7BC 5368 0032                  		subq.w	#1,$32(a0)
0000F7C0 6A00                       		bpl.s	locret_EDF0
0000F7C2 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F7C8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F7CC 3228 000C                  		move.w	$C(a0),d1
0000F7D0 B041                       		cmp.w	d1,d0
0000F7D2 6400                       		bcc.s	locret_EDF0
0000F7D4 0441 0170                  		subi.w	#$170,d1
0000F7D8 B041                       		cmp.w	d1,d0
0000F7DA 6500                       		bcs.s	locret_EDF0
0000F7DC 5428 0024                  		addq.b	#2,$24(a0)
0000F7E0                            
0000F7E0                            locret_EDF0:
0000F7E0 4E75                       		rts	
0000F7E2                            ; ===========================================================================
0000F7E2                            
0000F7E2                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F7E2 5428 0024                  		addq.b	#2,$24(a0)
0000F7E6 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F7EA 6600                       		bne.s	loc_EE18
0000F7EC 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F7F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F7F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F7FC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F802 2348 003C                  		move.l	a0,$3C(a1)
0000F806                            
0000F806                            loc_EE18:
0000F806 117C 0001 001C             		move.b	#1,$1C(a0)
0000F80C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F810 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F812 117C 0004 001C             		move.b	#4,$1C(a0)
0000F818 6000                       		bra.s	Obj4C_Display
0000F81A                            ; ===========================================================================
0000F81A                            
0000F81A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F81A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F81E 08E9 0001 0022             		bset	#1,$22(a1)
0000F824 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F82A 6000                       		bra.s	Obj4C_Display
0000F82C                            ; ===========================================================================
0000F82C                            
0000F82C                            loc_EE3E:				; XREF: Obj4C_Index
0000F82C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F830 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F832 5428 0024                  		addq.b	#2,$24(a0)
0000F836 4E75                       		rts	
0000F838                            ; ===========================================================================
0000F838                            
0000F838                            Obj4C_Display:				; XREF: Obj4C_Index
0000F838 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F83E 6100 B80C                  		bsr.w	AnimateSprite
0000F842 6100 E7AA                  		bsr.w	DisplaySprite
0000F846 4E75                       		rts	
0000F848                            ; ===========================================================================
0000F848                            
0000F848                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F848 117C 0000 001C             		move.b	#0,$1C(a0)
0000F84E 117C 0002 0024             		move.b	#2,$24(a0)
0000F854 4A28 0028                  		tst.b	$28(a0)
0000F858 6700 E7D0                  		beq.w	DeleteObject
0000F85C 4E75                       		rts	
0000F85E                            ; ===========================================================================
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            ; Object 4D - lava geyser / lavafall (MZ)
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            
0000F85E                            Obj4D:					; XREF: Obj_Index
0000F85E 7000                       		moveq	#0,d0
0000F860 1028 0024                  		move.b	$24(a0),d0
0000F864 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F868 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F86C 6000 E780                  		bra.w	DisplaySprite
0000F870                            ; ===========================================================================
0000F870 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F872 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F874 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F876 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F878                            
0000F878 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F87C                            ; ===========================================================================
0000F87C                            
0000F87C                            Obj4D_Main:				; XREF: Obj4D_Index
0000F87C 5428 0024                  		addq.b	#2,$24(a0)
0000F880 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F886 4A28 0028                  		tst.b	$28(a0)
0000F88A 6700                       		beq.s	loc_EEA4
0000F88C 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F892                            
0000F892                            loc_EEA4:
0000F892 7000                       		moveq	#0,d0
0000F894 1028 0028                  		move.b	$28(a0),d0
0000F898 D040                       		add.w	d0,d0
0000F89A 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F8A0 2248                       		movea.l	a0,a1
0000F8A2 7201                       		moveq	#1,d1
0000F8A4 6100                       		bsr.s	Obj4D_MakeLava
0000F8A6 6000                       		bra.s	loc_EF10
0000F8A8                            ; ===========================================================================
0000F8A8                            
0000F8A8                            Obj4D_Loop:
0000F8A8 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F8AC 6600                       		bne.s	loc_EF0A
0000F8AE                            
0000F8AE                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F8AE 12BC 004D                  		move.b	#$4D,0(a1)
0000F8B2 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F8BA 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F8C0 137C 0004 0001             		move.b	#4,1(a1)
0000F8C6 137C 0020 0019             		move.b	#$20,$19(a1)
0000F8CC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8D8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F8DE 137C 0001 0018             		move.b	#1,$18(a1)
0000F8E4 137C 0005 001C             		move.b	#5,$1C(a1)
0000F8EA 4A28 0028                  		tst.b	$28(a0)
0000F8EE 6700                       		beq.s	loc_EF0A
0000F8F0 137C 0002 001C             		move.b	#2,$1C(a1)
0000F8F6                            
0000F8F6                            loc_EF0A:
0000F8F6 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F8FA 4E75                       		rts	
0000F8FC                            ; ===========================================================================
0000F8FC                            
0000F8FC                            loc_EF10:				; XREF: Obj4D_Main
0000F8FC 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F902 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F908 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F90E 137C 0093 0020             		move.b	#$93,$20(a1)
0000F914 137C 0080 0016             		move.b	#$80,$16(a1)
0000F91A 08E9 0004 0001             		bset	#4,1(a1)
0000F920 5829 0024                  		addq.b	#4,$24(a1)
0000F924 2348 003C                  		move.l	a0,$3C(a1)
0000F928 4A28 0028                  		tst.b	$28(a0)
0000F92C 6700                       		beq.s	Obj4D_PlaySnd
0000F92E 7200                       		moveq	#0,d1
0000F930 6100 FF76                  		bsr.w	Obj4D_Loop
0000F934 5429 0024                  		addq.b	#2,$24(a1)
0000F938 08E9 0004 0002             		bset	#4,2(a1)
0000F93E 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F944 137C 0000 0018             		move.b	#0,$18(a1)
0000F94A 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F950 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F956 117C 0000 0028             		move.b	#0,$28(a0)
0000F95C                            
0000F95C                            Obj4D_PlaySnd:
0000F95C 303C 00C8                  		move.w	#$C8,d0
0000F960 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000F966                            
0000F966                            Obj4D_Action:				; XREF: Obj4D_Index
0000F966 7000                       		moveq	#0,d0
0000F968 1028 0028                  		move.b	$28(a0),d0
0000F96C D040                       		add.w	d0,d0
0000F96E 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F972 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F976 6100 E650                  		bsr.w	SpeedToPos
0000F97A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F980 6100 B6CA                  		bsr.w	AnimateSprite
0000F984                            
0000F984                            Obj4D_ChkDel:				; XREF: Obj4C
0000F984 3028 0008                  		move.w	8(a0),d0
0000F988 0240 FF80                  		andi.w	#$FF80,d0
0000F98C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F990 0441 0080                  		subi.w	#$80,d1
0000F994 0241 FF80                  		andi.w	#$FF80,d1
0000F998 9041                       		sub.w	d1,d0
0000F99A 0C40 0280                  		cmpi.w	#$280,d0
0000F99E 6200 E68A                  		bhi.w	DeleteObject
0000F9A2 4E75                       		rts	
0000F9A4                            ; ===========================================================================
0000F9A4 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F9A6 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F9A8                            ; ===========================================================================
0000F9A8                            
0000F9A8                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F9A8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9AE 3028 0030                  		move.w	$30(a0),d0
0000F9B2 B068 000C                  		cmp.w	$C(a0),d0
0000F9B6 6400                       		bcc.s	locret_EFDA
0000F9B8 5828 0024                  		addq.b	#4,$24(a0)
0000F9BC 2268 003C                  		movea.l	$3C(a0),a1
0000F9C0 137C 0003 001C             		move.b	#3,$1C(a1)
0000F9C6                            
0000F9C6                            locret_EFDA:
0000F9C6 4E75                       		rts	
0000F9C8                            ; ===========================================================================
0000F9C8                            
0000F9C8                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F9C8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9CE 3028 0030                  		move.w	$30(a0),d0
0000F9D2 B068 000C                  		cmp.w	$C(a0),d0
0000F9D6 6400                       		bcc.s	locret_EFFA
0000F9D8 5828 0024                  		addq.b	#4,$24(a0)
0000F9DC 2268 003C                  		movea.l	$3C(a0),a1
0000F9E0 137C 0001 001C             		move.b	#1,$1C(a1)
0000F9E6                            
0000F9E6                            locret_EFFA:
0000F9E6 4E75                       		rts	
0000F9E8                            ; ===========================================================================
0000F9E8                            
0000F9E8                            loc_EFFC:				; XREF: Obj4D_Index
0000F9E8 2268 003C                  		movea.l	$3C(a0),a1
0000F9EC 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F9F2 6700 0000                  		beq.w	Obj4D_Delete
0000F9F6 3029 000C                  		move.w	$C(a1),d0
0000F9FA 0640 0060                  		addi.w	#$60,d0
0000F9FE 3140 000C                  		move.w	d0,$C(a0)
0000FA02 9068 0030                  		sub.w	$30(a0),d0
0000FA06 4440                       		neg.w	d0
0000FA08 7208                       		moveq	#8,d1
0000FA0A 0C40 0040                  		cmpi.w	#$40,d0
0000FA0E 6C00                       		bge.s	loc_F026
0000FA10 720B                       		moveq	#$B,d1
0000FA12                            
0000FA12                            loc_F026:
0000FA12 0C40 0080                  		cmpi.w	#$80,d0
0000FA16 6F00                       		ble.s	loc_F02E
0000FA18 720E                       		moveq	#$E,d1
0000FA1A                            
0000FA1A                            loc_F02E:
0000FA1A 5328 001E                  		subq.b	#1,$1E(a0)
0000FA1E 6A00                       		bpl.s	loc_F04C
0000FA20 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA26 5228 001B                  		addq.b	#1,$1B(a0)
0000FA2A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA30 6500                       		bcs.s	loc_F04C
0000FA32 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA38                            
0000FA38                            loc_F04C:
0000FA38 1028 001B                  		move.b	$1B(a0),d0
0000FA3C D001                       		add.b	d1,d0
0000FA3E 1140 001A                  		move.b	d0,$1A(a0)
0000FA42 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FA46                            ; ===========================================================================
0000FA46                            
0000FA46                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FA46 6000 E5E2                  		bra.w	DeleteObject
0000FA4A                            ; ===========================================================================
0000FA4A                            ; ---------------------------------------------------------------------------
0000FA4A                            ; Object 4E - advancing	wall of	lava (MZ)
0000FA4A                            ; ---------------------------------------------------------------------------
0000FA4A                            
0000FA4A                            Obj4E:					; XREF: Obj_Index
0000FA4A 7000                       		moveq	#0,d0
0000FA4C 1028 0024                  		move.b	$24(a0),d0
0000FA50 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FA54 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FA58                            ; ===========================================================================
0000FA58 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FA5A 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FA5C 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FA5E 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FA60 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FA62                            ; ===========================================================================
0000FA62                            
0000FA62                            Obj4E_Main:				; XREF: Obj4E_Index
0000FA62 5828 0024                  		addq.b	#4,$24(a0)
0000FA66 2248                       		movea.l	a0,a1
0000FA68 7201                       		moveq	#1,d1
0000FA6A 6000                       		bra.s	Obj4E_Main2
0000FA6C                            ; ===========================================================================
0000FA6C                            
0000FA6C                            Obj4E_Loop:
0000FA6C 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FA70 6600                       		bne.s	loc_F0C8
0000FA72                            
0000FA72                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FA72 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FA76 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FA7E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FA84 137C 0004 0001             		move.b	#4,1(a1)
0000FA8A 137C 0050 0019             		move.b	#$50,$19(a1)
0000FA90 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA96 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA9C 137C 0001 0018             		move.b	#1,$18(a1)
0000FAA2 137C 0000 001C             		move.b	#0,$1C(a1)
0000FAA8 137C 0094 0020             		move.b	#$94,$20(a1)
0000FAAE 2348 003C                  		move.l	a0,$3C(a1)
0000FAB2                            
0000FAB2                            loc_F0C8:
0000FAB2 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FAB6                            
0000FAB6 5C29 0024                  		addq.b	#6,$24(a1)
0000FABA 137C 0004 001A             		move.b	#4,$1A(a1)
0000FAC0                            
0000FAC0                            Obj4E_Action:				; XREF: Obj4E_Index
0000FAC0 3038 D008                  		move.w	($FFFFD008).w,d0
0000FAC4 9068 0008                  		sub.w	8(a0),d0
0000FAC8 6400                       		bcc.s	Obj4E_ChkSonic
0000FACA 4440                       		neg.w	d0
0000FACC                            
0000FACC                            Obj4E_ChkSonic:
0000FACC 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FAD0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FAD2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FAD6 9068 000C                  		sub.w	$C(a0),d0
0000FADA 6400                       		bcc.s	loc_F0F4
0000FADC 4440                       		neg.w	d0
0000FADE                            
0000FADE                            loc_F0F4:
0000FADE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FAE2 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FAE4 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FAEA 6000                       		bra.s	Obj4E_Solid
0000FAEC                            ; ===========================================================================
0000FAEC                            
0000FAEC                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FAEC 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FAF0 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FAF2 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FAF8 5528 0024                  		subq.b	#2,$24(a0)
0000FAFC                            
0000FAFC                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FAFC 323C 002B                  		move.w	#$2B,d1
0000FB00 343C 0018                  		move.w	#$18,d2
0000FB04 3602                       		move.w	d2,d3
0000FB06 5243                       		addq.w	#1,d3
0000FB08 3828 0008                  		move.w	8(a0),d4
0000FB0C 1028 0024                  		move.b	$24(a0),d0
0000FB10 3F00                       		move.w	d0,-(sp)
0000FB12 6100 0000                  		bsr.w	SolidObject
0000FB16 301F                       		move.w	(sp)+,d0
0000FB18 1140 0024                  		move.b	d0,$24(a0)
0000FB1C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB22 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB24 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB28 4228 0036                  		clr.b	$36(a0)
0000FB2C                            
0000FB2C                            Obj4E_Animate:
0000FB2C 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB32 6100 B518                  		bsr.w	AnimateSprite
0000FB36 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FB3C 6400                       		bcc.s	Obj4E_ChkDel
0000FB3E 6100 E488                  		bsr.w	SpeedToPos
0000FB42                            
0000FB42                            Obj4E_ChkDel:
0000FB42 6100 E4AA                  		bsr.w	DisplaySprite
0000FB46 4A28 0036                  		tst.b	$36(a0)
0000FB4A 6600                       		bne.s	locret_F17E
0000FB4C 3028 0008                  		move.w	8(a0),d0
0000FB50 0240 FF80                  		andi.w	#$FF80,d0
0000FB54 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB58 0441 0080                  		subi.w	#$80,d1
0000FB5C 0241 FF80                  		andi.w	#$FF80,d1
0000FB60 9041                       		sub.w	d1,d0
0000FB62 0C40 0280                  		cmpi.w	#$280,d0
0000FB66 6200                       		bhi.s	Obj4E_ChkGone
0000FB68                            
0000FB68                            locret_F17E:
0000FB68 4E75                       		rts	
0000FB6A                            ; ===========================================================================
0000FB6A                            
0000FB6A                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FB6A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FB6E 7000                       		moveq	#0,d0
0000FB70 1028 0023                  		move.b	$23(a0),d0
0000FB74 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FB7A 117C 0008 0024             		move.b	#8,$24(a0)
0000FB80 4E75                       		rts	
0000FB82                            ; ===========================================================================
0000FB82                            
0000FB82                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FB82 2268 003C                  		movea.l	$3C(a0),a1
0000FB86 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FB8C 6700                       		beq.s	Obj4E_Delete
0000FB8E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FB94 0468 0080 0008             		subi.w	#$80,8(a0)
0000FB9A 6000 E452                  		bra.w	DisplaySprite
0000FB9E                            ; ===========================================================================
0000FB9E                            
0000FB9E                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FB9E 6000 E48A                  		bra.w	DeleteObject
0000FBA2                            ; ===========================================================================
0000FBA2                            ; ---------------------------------------------------------------------------
0000FBA2                            ; Object 54 - invisible	lava tag (MZ)
0000FBA2                            ; ---------------------------------------------------------------------------
0000FBA2                            
0000FBA2                            Obj54:					; XREF: Obj_Index
0000FBA2 7000                       		moveq	#0,d0
0000FBA4 1028 0024                  		move.b	$24(a0),d0
0000FBA8 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FBAC 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FBB0                            ; ===========================================================================
0000FBB0 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FBB2 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FBB4                            
0000FBB4 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FBB8                            ; ===========================================================================
0000FBB8                            
0000FBB8                            Obj54_Main:				; XREF: Obj54_Index
0000FBB8 5428 0024                  		addq.b	#2,$24(a0)
0000FBBC 7000                       		moveq	#0,d0
0000FBBE 1028 0028                  		move.b	$28(a0),d0
0000FBC2 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FBC8 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FBD0 117C 0084 0001             		move.b	#$84,1(a0)
0000FBD6                            
0000FBD6                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FBD6 3028 0008                  		move.w	8(a0),d0
0000FBDA 0240 FF80                  		andi.w	#$FF80,d0
0000FBDE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBE2 0441 0080                  		subi.w	#$80,d1
0000FBE6 0241 FF80                  		andi.w	#$FF80,d1
0000FBEA 9041                       		sub.w	d1,d0
0000FBEC 6B00 E43C                  		bmi.w	DeleteObject
0000FBF0 0C40 0280                  		cmpi.w	#$280,d0
0000FBF4 6200 E434                  		bhi.w	DeleteObject
0000FBF8 4E75                       		rts	
0000FBFA                            ; ===========================================================================
0000FBFA                            ; ---------------------------------------------------------------------------
0000FBFA                            ; Sprite mappings - invisible lava tag (MZ)
0000FBFA                            ; ---------------------------------------------------------------------------
0000FBFA                            Map_obj54:
0000FBFA                            	include "_maps\obj54.asm"
0000FBFA                            ; ---------------------------------------------------------------------------
0000FBFA                            ; Sprite mappings - invisible lava tag (MZ)
0000FBFA                            ; ---------------------------------------------------------------------------
0000FBFA 0000                       		dc.w byte_F212-Map_obj54
0000FBFC 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FBFE 00                         		even
0000FBFE 00                         		even
0000FBFE                            
0000FBFE                            Ani_obj4C:
0000FBFE                            	include "_anim\obj4C.asm"
0000FBFE                            ; ---------------------------------------------------------------------------
0000FBFE                            ; Animation script - geyser of lava (MZ)
0000FBFE                            ; ---------------------------------------------------------------------------
0000FBFE 0000                       		dc.w byte_F220-Ani_obj4C
0000FC00 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC02 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC04 0000                       		dc.w byte_F232-Ani_obj4C
0000FC06 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC08 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC0A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC14 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC18 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC1C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC24 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC28 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC2C                            		even
0000FC2C                            		even
0000FC2C                            
0000FC2C                            Ani_obj4E:
0000FC2C                            	include "_anim\obj4E.asm"
0000FC2C                            ; ---------------------------------------------------------------------------
0000FC2C                            ; Animation script - advancing wall of lava (MZ)
0000FC2C                            ; ---------------------------------------------------------------------------
0000FC2C 0000                       		dc.w byte_F244-Ani_obj4E
0000FC2E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC34                            		even
0000FC34                            		even
0000FC34                            
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34                            Map_obj4C:
0000FC34                            	include "_maps\obj4C.asm"
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC38 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FC3C 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FC40 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FC44 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FC48 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FC4C 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FC50 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FC54 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FC58 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FC5C 02                         byte_F272:	dc.b 2
0000FC5D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FC62 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FC67 02                         byte_F27D:	dc.b 2
0000FC68 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FC6D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FC72 04                         byte_F288:	dc.b 4
0000FC73 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FC78 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FC7D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FC82 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FC87 04                         byte_F29D:	dc.b 4
0000FC88 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FC8D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FC92 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FC97 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FC9C 06                         byte_F2B2:	dc.b 6
0000FC9D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCA2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCA7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCAC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCB1 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FCB6 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FCBB 06                         byte_F2D1:	dc.b 6
0000FCBC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCC1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCC6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCCB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCD0 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FCD5 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FCDA 02                         byte_F2F0:	dc.b 2
0000FCDB E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FCE0 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FCE5 02                         byte_F2FB:	dc.b 2
0000FCE6 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FCEB E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FCF0 0A                         byte_F306:	dc.b $A
0000FCF1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FCF6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FCFB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD00 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD05 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD0A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD0F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD14 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD19 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD1E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD23 0A                         byte_F339:	dc.b $A
0000FD24 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD29 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD2E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD33 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD38 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD3D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FD42 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FD47 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FD4C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FD51 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FD56 0A                         byte_F36C:	dc.b $A
0000FD57 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD5C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD61 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD66 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD6B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD70 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD75 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD7A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD7F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD84 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD89 06                         byte_F39F:	dc.b 6
0000FD8A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD8F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD94 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD99 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD9E D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FDA3 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FDA8 06                         byte_F3BE:	dc.b 6
0000FDA9 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FDAE 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FDB3 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FDB8 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FDBD D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FDC2 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FDC7 06                         byte_F3DD:	dc.b 6
0000FDC8 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDCD 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDD2 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDD7 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDDC D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDE1 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDE6 10                         byte_F3FC:	dc.b $10
0000FDE7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDEC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDF1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDF6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FDFB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE00 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE05 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE0A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE0F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE14 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE19 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE1E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE23 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE28 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE2D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE32 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE37 10                         byte_F44D:	dc.b $10
0000FE38 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE3D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE42 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE47 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE4C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE51 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE56 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE5B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE60 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE65 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE6A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FE6F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FE74 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FE79 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FE7E 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FE83 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FE88 10                         byte_F49E:	dc.b $10
0000FE89 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE8E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE93 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE98 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE9D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEA2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEA7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEAC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEB1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FEB6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FEBB 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FEC0 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FEC5 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FECA 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FECF 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FED4 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FED9 06                         byte_F4EF:	dc.b 6
0000FEDA E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FEDF E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FEE4 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FEE9 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FEEE D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FEF3 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FEF8 06                         byte_F50E:	dc.b 6
0000FEF9 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FEFE E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF03 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF08 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF0D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF12 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF17 00                         byte_F52D:	dc.b 0
0000FF18                            		even
0000FF18                            		even
0000FF18                            
0000FF18                            ; ---------------------------------------------------------------------------
0000FF18                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF18                            ; ---------------------------------------------------------------------------
0000FF18                            Map_obj4E:
0000FF18                            	include "_maps\obj4E.asm"
0000FF18                            ; ---------------------------------------------------------------------------
0000FF18                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF18                            ; ---------------------------------------------------------------------------
0000FF18 0000                       		dc.w byte_F538-Map_obj4E
0000FF1A 0000                       		dc.w byte_F566-Map_obj4E
0000FF1C 0000                       		dc.w byte_F594-Map_obj4E
0000FF1E 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF20 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF22 09                         byte_F538:	dc.b 9
0000FF23 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF28 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF2D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF32 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF37 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF3C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF41 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF46 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF4B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF50 09                         byte_F566:	dc.b 9
0000FF51 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FF56 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FF5B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF60 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF65 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF6A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF6F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF74 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF79 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF7E 09                         byte_F594:	dc.b 9
0000FF7F E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FF84 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF89 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF8E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF93 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF98 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF9D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFA2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFA7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFAC 09                         byte_F5C2:	dc.b 9
0000FFAD E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFB2 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FFB7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFBC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFC1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFC6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFCB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFD0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFD5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFDA 08                         byte_F5F0:	dc.b 8
0000FFDB E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FFE0 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFE5 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFEA 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFEF E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFF4 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFF9 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFFE 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010004 00                         		even
00010004 00                         		even
00010004                            
00010004                            ; ===========================================================================
00010004                            ; ---------------------------------------------------------------------------
00010004                            ; Object 40 - Moto Bug enemy (GHZ)
00010004                            ; ---------------------------------------------------------------------------
00010004                            
00010004                            Obj40:					; XREF: Obj_Index
00010004 7000                       		moveq	#0,d0
00010006 1028 0024                  		move.b	$24(a0),d0
0001000A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0001000E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010012                            ; ===========================================================================
00010012 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010014 0000                       		dc.w Obj40_Action-Obj40_Index
00010016 0000                       		dc.w Obj40_Animate-Obj40_Index
00010018 0000                       		dc.w Obj40_Delete-Obj40_Index
0001001A                            ; ===========================================================================
0001001A                            
0001001A                            Obj40_Main:				; XREF: Obj40_Index
0001001A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010022 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010028 117C 0004 0001             		move.b	#4,1(a0)
0001002E 117C 0004 0018             		move.b	#4,$18(a0)
00010034 117C 0014 0019             		move.b	#$14,$19(a0)
0001003A 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0001003E 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010040 117C 000E 0016             		move.b	#$E,$16(a0)
00010046 117C 0008 0017             		move.b	#8,$17(a0)
0001004C 117C 000C 0020             		move.b	#$C,$20(a0)
00010052 6100 DF02                  		bsr.w	ObjectFall
00010056 4EB9 0000 0000             		jsr	ObjHitFloor
0001005C 4A41                       		tst.w	d1
0001005E 6A00                       		bpl.s	locret_F68A
00010060 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010064 317C 0000 0012             		move.w	#0,$12(a0)
0001006A 5428 0024                  		addq.b	#2,$24(a0)
0001006E 0868 0000 0022             		bchg	#0,$22(a0)
00010074                            
00010074                            locret_F68A:
00010074 4E75                       		rts	
00010076                            ; ===========================================================================
00010076                            
00010076                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010076 5828 0024                  		addq.b	#4,$24(a0)
0001007A 6000 0000                  		bra.w	Obj40_Animate
0001007E                            ; ===========================================================================
0001007E                            
0001007E                            Obj40_Action:				; XREF: Obj40_Index
0001007E 7000                       		moveq	#0,d0
00010080 1028 0025                  		move.b	$25(a0),d0
00010084 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010088 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0001008C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010092 6100 AFB8                  		bsr.w	AnimateSprite
00010096                            
00010096                            ; ---------------------------------------------------------------------------
00010096                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010096                            ; ---------------------------------------------------------------------------
00010096                            
00010096                            MarkObjGone:
00010096 3028 0008                  		move.w	8(a0),d0
0001009A 0240 FF80                  		andi.w	#$FF80,d0
0001009E 3238 F700                  		move.w	($FFFFF700).w,d1
000100A2 0441 0080                  		subi.w	#$80,d1
000100A6 0241 FF80                  		andi.w	#$FF80,d1
000100AA 9041                       		sub.w	d1,d0
000100AC 0C40 0280                  		cmpi.w	#$280,d0
000100B0 6200 0000                  		bhi.w	Mark_ChkGone
000100B4 6000 DF38                  		bra.w	DisplaySprite
000100B8                            ; ===========================================================================
000100B8                            
000100B8                            Mark_ChkGone:
000100B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000100BC 7000                       		moveq	#0,d0
000100BE 1028 0023                  		move.b	$23(a0),d0
000100C2 6700                       		beq.s	Mark_Delete
000100C4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000100CA                            
000100CA                            Mark_Delete:
000100CA 6000 DF5E                  		bra.w	DeleteObject
000100CE                            
000100CE                            ; ===========================================================================
000100CE 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000100D0 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000100D2                            ; ===========================================================================
000100D2                            
000100D2                            Obj40_Move:				; XREF: Obj40_Index2
000100D2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000100D6 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000100D8 5428 0025                  		addq.b	#2,$25(a0)
000100DC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000100E2 117C 0001 001C             		move.b	#1,$1C(a0)
000100E8 0868 0000 0022             		bchg	#0,$22(a0)
000100EE 6600                       		bne.s	locret_F70A
000100F0 4468 0010                  		neg.w	$10(a0)		; change direction
000100F4                            
000100F4                            locret_F70A:
000100F4 4E75                       		rts	
000100F6                            ; ===========================================================================
000100F6                            
000100F6                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000100F6 6100 DED0                  		bsr.w	SpeedToPos
000100FA 4EB9 0000 0000             		jsr	ObjHitFloor
00010100 0C41 FFF8                  		cmpi.w	#-8,d1
00010104 6D00                       		blt.s	Obj40_Pause
00010106 0C41 000C                  		cmpi.w	#$C,d1
0001010A 6C00                       		bge.s	Obj40_Pause
0001010C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010110 5328 0033                  		subq.b	#1,$33(a0)
00010114 6A00                       		bpl.s	locret_F756
00010116 117C 000F 0033             		move.b	#$F,$33(a0)
0001011C 6100 E356                  		bsr.w	SingleObjLoad
00010120 6600                       		bne.s	locret_F756
00010122 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010126 3368 0008 0008             		move.w	8(a0),8(a1)
0001012C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010132 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010138 137C 0002 001C             		move.b	#2,$1C(a1)
0001013E                            
0001013E                            locret_F756:
0001013E 4E75                       		rts	
00010140                            ; ===========================================================================
00010140                            
00010140                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010140 5528 0025                  		subq.b	#2,$25(a0)
00010144 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001014A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010150 117C 0000 001C             		move.b	#0,$1C(a0)
00010156 4E75                       		rts	
00010158                            ; ===========================================================================
00010158                            
00010158                            Obj40_Animate:				; XREF: Obj40_Index
00010158 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001015E 6100 AEEC                  		bsr.w	AnimateSprite
00010162 6000 DE8A                  		bra.w	DisplaySprite
00010166                            ; ===========================================================================
00010166                            
00010166                            Obj40_Delete:				; XREF: Obj40_Index
00010166 6000 DEC2                  		bra.w	DeleteObject
0001016A                            ; ===========================================================================
0001016A                            Ani_obj40:
0001016A                            	include "_anim\obj40.asm"
0001016A                            ; ---------------------------------------------------------------------------
0001016A                            ; Animation script - Motobug enemy
0001016A                            ; ---------------------------------------------------------------------------
0001016A 0000                       		dc.w byte_F788-Ani_obj40
0001016C 0000                       		dc.w byte_F78C-Ani_obj40
0001016E 0000                       		dc.w byte_F792-Ani_obj40
00010170 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00010174 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001017A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010188                            		even
00010188                            		even
00010188                            
00010188                            ; ---------------------------------------------------------------------------
00010188                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010188                            ; ---------------------------------------------------------------------------
00010188                            Map_obj40:
00010188                            	include "_maps\obj40.asm"
00010188                            Map_cedc:
00010188 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0001018A 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0001018C 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0001018E 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
00010190 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
00010192 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
00010194 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
00010196 04                         Map_cedc_E: 	dc.b $4
00010197 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001019C 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000101A1 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101A6 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
000101AB 04                         Map_cedc_23: 	dc.b $4
000101AC F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
000101B1 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
000101B6 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
000101BB 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
000101C0 05                         Map_cedc_38: 	dc.b $5
000101C1 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101C6 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
000101CB F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101D0 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
000101D5 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
000101DA 01                         Map_cedc_52: 	dc.b $1
000101DB FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
000101E0 01                         Map_cedc_58: 	dc.b $1
000101E1 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
000101E6 01                         Map_cedc_5E: 	dc.b $1
000101E7 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
000101EC 00                         Map_cedc_64: 	dc.b $0
000101EE 00                         	even
000101EE 00                         	even
000101EE                            
000101EE                            ; ===========================================================================
000101EE                            ; ---------------------------------------------------------------------------
000101EE                            ; Object 4F - blank
000101EE                            ; ---------------------------------------------------------------------------
000101EE                            
000101EE                            Obj4F:					; XREF: Obj_Index
000101EE 4E75                       		rts	
000101F0                            
000101F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101F0                            
000101F0                            
000101F0                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000101F0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000101F4 D047                       		add.w	d7,d0
000101F6 0240 0003                  		andi.w	#3,d0
000101FA 6600                       		bne.s	loc_F836
000101FC 7600                       		moveq	#0,d3
000101FE 1628 0019                  		move.b	$19(a0),d3
00010202 4A68 0010                  		tst.w	$10(a0)
00010206 6B00                       		bmi.s	loc_F82C
00010208 6100 0000                  		bsr.w	ObjHitWallRight
0001020C 4A41                       		tst.w	d1
0001020E 6A00                       		bpl.s	loc_F836
00010210                            
00010210                            loc_F828:
00010210 7001                       		moveq	#1,d0
00010212 4E75                       		rts	
00010214                            ; ===========================================================================
00010214                            
00010214                            loc_F82C:
00010214 4643                       		not.w	d3
00010216 6100 0000                  		bsr.w	ObjHitWallLeft
0001021A 4A41                       		tst.w	d1
0001021C 6BF2                       		bmi.s	loc_F828
0001021E                            
0001021E                            loc_F836:
0001021E 7000                       		moveq	#0,d0
00010220 4E75                       		rts	
00010222                            ; End of function Obj50_ChkWall
00010222                            
00010222                            ; ===========================================================================
00010222                            ; ---------------------------------------------------------------------------
00010222                            ; Object 50 - Yadrin enemy (SYZ)
00010222                            ; ---------------------------------------------------------------------------
00010222                            
00010222                            Obj50:					; XREF: Obj_Index
00010222 7000                       		moveq	#0,d0
00010224 1028 0024                  		move.b	$24(a0),d0
00010228 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001022C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010230                            ; ===========================================================================
00010230 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010232 0000                       		dc.w Obj50_Action-Obj50_Index
00010234                            ; ===========================================================================
00010234                            
00010234                            Obj50_Main:				; XREF: Obj50_Index
00010234 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001023C 317C 247B 0002             		move.w	#$247B,2(a0)
00010242 117C 0004 0001             		move.b	#4,1(a0)
00010248 117C 0004 0018             		move.b	#4,$18(a0)
0001024E 117C 0014 0019             		move.b	#$14,$19(a0)
00010254 117C 0011 0016             		move.b	#$11,$16(a0)
0001025A 117C 0008 0017             		move.b	#8,$17(a0)
00010260 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010266 6100 DCEE                  		bsr.w	ObjectFall
0001026A 6100 0000                  		bsr.w	ObjHitFloor
0001026E 4A41                       		tst.w	d1
00010270 6A00                       		bpl.s	locret_F89E
00010272 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010276 317C 0000 0012             		move.w	#0,$12(a0)
0001027C 5428 0024                  		addq.b	#2,$24(a0)
00010280 0868 0000 0022             		bchg	#0,$22(a0)
00010286                            
00010286                            locret_F89E:
00010286 4E75                       		rts	
00010288                            ; ===========================================================================
00010288                            
00010288                            Obj50_Action:				; XREF: Obj50_Index
00010288 7000                       		moveq	#0,d0
0001028A 1028 0025                  		move.b	$25(a0),d0
0001028E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010292 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010296 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001029C 6100 ADAE                  		bsr.w	AnimateSprite
000102A0 6000 FDF4                  		bra.w	MarkObjGone
000102A4                            ; ===========================================================================
000102A4 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000102A6 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000102A8                            ; ===========================================================================
000102A8                            
000102A8                            Obj50_Move:				; XREF: Obj50_Index2
000102A8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000102AC 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000102AE 5428 0025                  		addq.b	#2,$25(a0)
000102B2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000102B8 117C 0001 001C             		move.b	#1,$1C(a0)
000102BE 0868 0000 0022             		bchg	#0,$22(a0)
000102C4 6600                       		bne.s	locret_F8E2
000102C6 4468 0010                  		neg.w	$10(a0)		; change direction
000102CA                            
000102CA                            locret_F8E2:
000102CA 4E75                       		rts	
000102CC                            ; ===========================================================================
000102CC                            
000102CC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000102CC 6100 DCFA                  		bsr.w	SpeedToPos
000102D0 6100 0000                  		bsr.w	ObjHitFloor
000102D4 0C41 FFF8                  		cmpi.w	#-8,d1
000102D8 6D00                       		blt.s	Obj50_Pause
000102DA 0C41 000C                  		cmpi.w	#$C,d1
000102DE 6C00                       		bge.s	Obj50_Pause
000102E0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000102E4 6100 FF0A                  		bsr.w	Obj50_ChkWall
000102E8 6600                       		bne.s	Obj50_Pause
000102EA 4E75                       		rts	
000102EC                            ; ===========================================================================
000102EC                            
000102EC                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000102EC 5528 0025                  		subq.b	#2,$25(a0)
000102F0 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000102F6 317C 0000 0010             		move.w	#0,$10(a0)
000102FC 117C 0000 001C             		move.b	#0,$1C(a0)
00010302 4E75                       		rts	
00010304                            ; ===========================================================================
00010304                            Ani_obj50:
00010304                            	include "_anim\obj50.asm"
00010304                            ; ---------------------------------------------------------------------------
00010304                            ; Animation script - Yadrin enemy
00010304                            ; ---------------------------------------------------------------------------
00010304 0000                       		dc.w byte_F920-Ani_obj50
00010306 0000                       		dc.w byte_F924-Ani_obj50
00010308 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001030C 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010316                            		even
00010316                            		even
00010316                            
00010316                            ; ---------------------------------------------------------------------------
00010316                            ; Sprite mappings - Yadrin enemy (SYZ)
00010316                            ; ---------------------------------------------------------------------------
00010316                            Map_obj50:
00010316                            	include "_maps\obj50.asm"
00010316                            Map_ff24:
00010316 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010318 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001031A 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0001031C 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
0001031E 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010320 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010322 05                         Map_ff24_C: 	dc.b $5
00010323 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010328 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001032D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010332 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010337 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001033C 05                         Map_ff24_26: 	dc.b $5
0001033D F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010342 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010347 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001034C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010351 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010356 05                         Map_ff24_40: 	dc.b $5
00010357 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001035C 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010361 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010366 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001036B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010370 05                         Map_ff24_5A: 	dc.b $5
00010371 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010376 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001037B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010380 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010385 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001038A 05                         Map_ff24_74: 	dc.b $5
0001038B F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010390 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010395 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001039A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001039F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103A4 05                         Map_ff24_8E: 	dc.b $5
000103A5 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103AA 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103AF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103B4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103B9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103BE                            	even
000103BE                            	even
000103BE                            
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000103BE                            ;
000103BE                            ; variables:
000103BE                            ; d1 = width
000103BE                            ; d2 = height /	2 (when	jumping)
000103BE                            ; d3 = height /	2 (when	walking)
000103BE                            ; d4 = x-axis position
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            
000103BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103BE                            
000103BE                            
000103BE                            SolidObject:
000103BE 4A28 0025                  		tst.b	$25(a0)
000103C2 6700 0000                  		beq.w	loc_FAC8
000103C6 3401                       		move.w	d1,d2
000103C8 D442                       		add.w	d2,d2
000103CA 43F8 D000                  		lea	($FFFFD000).w,a1
000103CE 0829 0001 0022             		btst	#1,$22(a1)
000103D4 6600                       		bne.s	loc_F9FE
000103D6 3029 0008                  		move.w	8(a1),d0
000103DA 9068 0008                  		sub.w	8(a0),d0
000103DE D041                       		add.w	d1,d0
000103E0 6B00                       		bmi.s	loc_F9FE
000103E2 B042                       		cmp.w	d2,d0
000103E4 6500                       		bcs.s	loc_FA12
000103E6                            
000103E6                            loc_F9FE:
000103E6 08A9 0003 0022             		bclr	#3,$22(a1)
000103EC 08A8 0003 0022             		bclr	#3,$22(a0)
000103F2 4228 0025                  		clr.b	$25(a0)
000103F6 7800                       		moveq	#0,d4
000103F8 4E75                       		rts	
000103FA                            ; ===========================================================================
000103FA                            
000103FA                            loc_FA12:
000103FA 3404                       		move.w	d4,d2
000103FC                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
000103FC 7800                       		moveq	#0,d4
000103FE 4E75                       		rts	
00010400                            ; ===========================================================================
00010400                            
00010400                            SolidObject71:				; XREF: Obj71_Solid
00010400 4A28 0025                  		tst.b	$25(a0)
00010404 6700 0000                  		beq.w	loc_FAD0
00010408 3401                       		move.w	d1,d2
0001040A D442                       		add.w	d2,d2
0001040C 43F8 D000                  		lea	($FFFFD000).w,a1
00010410 0829 0001 0022             		btst	#1,$22(a1)
00010416 6600                       		bne.s	loc_FA44
00010418 3029 0008                  		move.w	8(a1),d0
0001041C 9068 0008                  		sub.w	8(a0),d0
00010420 D041                       		add.w	d1,d0
00010422 6B00                       		bmi.s	loc_FA44
00010424 B042                       		cmp.w	d2,d0
00010426 6500                       		bcs.s	loc_FA58
00010428                            
00010428                            loc_FA44:
00010428 08A9 0003 0022             		bclr	#3,$22(a1)
0001042E 08A8 0003 0022             		bclr	#3,$22(a0)
00010434 4228 0025                  		clr.b	$25(a0)
00010438 7800                       		moveq	#0,d4
0001043A 4E75                       		rts	
0001043C                            ; ===========================================================================
0001043C                            
0001043C                            loc_FA58:
0001043C 3404                       		move.w	d4,d2
0001043E                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001043E 7800                       		moveq	#0,d4
00010440 4E75                       		rts	
00010442                            ; ===========================================================================
00010442                            
00010442                            SolidObject2F:				; XREF: Obj2F_Solid
00010442 43F8 D000                  		lea	($FFFFD000).w,a1
00010446 4A28 0001                  		tst.b	1(a0)
0001044A 6A00 0000                  		bpl.w	loc_FB92
0001044E 3029 0008                  		move.w	8(a1),d0
00010452 9068 0008                  		sub.w	8(a0),d0
00010456 D041                       		add.w	d1,d0
00010458 6B00 0000                  		bmi.w	loc_FB92
0001045C 3601                       		move.w	d1,d3
0001045E D643                       		add.w	d3,d3
00010460 B043                       		cmp.w	d3,d0
00010462 6200 0000                  		bhi.w	loc_FB92
00010466 3A00                       		move.w	d0,d5
00010468 0828 0000 0001             		btst	#0,1(a0)
0001046E 6700                       		beq.s	loc_FA94
00010470 4645                       		not.w	d5
00010472 DA43                       		add.w	d3,d5
00010474                            
00010474                            loc_FA94:
00010474 E24D                       		lsr.w	#1,d5
00010476 7600                       		moveq	#0,d3
00010478 1632 5000                  		move.b	(a2,d5.w),d3
0001047C 9612                       		sub.b	(a2),d3
0001047E 3A28 000C                  		move.w	$C(a0),d5
00010482 9A43                       		sub.w	d3,d5
00010484 1629 0016                  		move.b	$16(a1),d3
00010488 4883                       		ext.w	d3
0001048A D443                       		add.w	d3,d2
0001048C 3629 000C                  		move.w	$C(a1),d3
00010490 9645                       		sub.w	d5,d3
00010492 5843                       		addq.w	#4,d3
00010494 D642                       		add.w	d2,d3
00010496 6B00 0000                  		bmi.w	loc_FB92
0001049A 3802                       		move.w	d2,d4
0001049C D844                       		add.w	d4,d4
0001049E B644                       		cmp.w	d4,d3
000104A0 6400 0000                  		bcc.w	loc_FB92
000104A4 6000 0000                  		bra.w	loc_FB0E
000104A8                            ; ===========================================================================
000104A8                            
000104A8                            loc_FAC8:
000104A8 4A28 0001                  		tst.b	1(a0)
000104AC 6A00 0000                  		bpl.w	loc_FB92
000104B0                            
000104B0                            loc_FAD0:
000104B0 43F8 D000                  		lea	($FFFFD000).w,a1
000104B4 3029 0008                  		move.w	8(a1),d0
000104B8 9068 0008                  		sub.w	8(a0),d0
000104BC D041                       		add.w	d1,d0
000104BE 6B00 0000                  		bmi.w	loc_FB92
000104C2 3601                       		move.w	d1,d3
000104C4 D643                       		add.w	d3,d3
000104C6 B043                       		cmp.w	d3,d0
000104C8 6200 0000                  		bhi.w	loc_FB92
000104CC 1629 0016                  		move.b	$16(a1),d3
000104D0 4883                       		ext.w	d3
000104D2 D443                       		add.w	d3,d2
000104D4 3629 000C                  		move.w	$C(a1),d3
000104D8 9668 000C                  		sub.w	$C(a0),d3
000104DC 5843                       		addq.w	#4,d3
000104DE D642                       		add.w	d2,d3
000104E0 6B00 0000                  		bmi.w	loc_FB92
000104E4 3802                       		move.w	d2,d4
000104E6 D844                       		add.w	d4,d4
000104E8 B644                       		cmp.w	d4,d3
000104EA 6400 0000                  		bcc.w	loc_FB92
000104EE                            
000104EE                            loc_FB0E:
000104EE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000104F2 6B00 0000                  		bmi.w	loc_FB92
000104F6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000104FC 6400 0000                  		bcc.w	loc_FB92
00010500 4A78 FE08                  		tst.w	($FFFFFE08).w
00010504 6600 0000                  		bne.w	loc_FBAC
00010508 3A00                       		move.w	d0,d5
0001050A B240                       		cmp.w	d0,d1
0001050C 6400                       		bcc.s	loc_FB36
0001050E D241                       		add.w	d1,d1
00010510 9041                       		sub.w	d1,d0
00010512 3A00                       		move.w	d0,d5
00010514 4445                       		neg.w	d5
00010516                            
00010516                            loc_FB36:
00010516 3203                       		move.w	d3,d1
00010518 B443                       		cmp.w	d3,d2
0001051A 6400                       		bcc.s	loc_FB44
0001051C 5943                       		subq.w	#4,d3
0001051E 9644                       		sub.w	d4,d3
00010520 3203                       		move.w	d3,d1
00010522 4441                       		neg.w	d1
00010524                            
00010524                            loc_FB44:
00010524 BA41                       		cmp.w	d1,d5
00010526 6200 0000                  		bhi.w	loc_FBB0
0001052A 0C41 0004                  		cmpi.w	#4,d1
0001052E 6300                       		bls.s	loc_FB8C
00010530 4A40                       		tst.w	d0
00010532 6700                       		beq.s	loc_FB70
00010534 6B00                       		bmi.s	loc_FB5E
00010536 4A69 0010                  		tst.w	$10(a1)
0001053A 6B00                       		bmi.s	loc_FB70
0001053C 6000                       		bra.s	loc_FB64
0001053E                            ; ===========================================================================
0001053E                            
0001053E                            loc_FB5E:
0001053E 4A69 0010                  		tst.w	$10(a1)
00010542 6A00                       		bpl.s	loc_FB70
00010544                            
00010544                            loc_FB64:
00010544 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001054A 337C 0000 0010             		move.w	#0,$10(a1)
00010550                            
00010550                            loc_FB70:
00010550 9169 0008                  		sub.w	d0,8(a1)
00010554 0829 0001 0022             		btst	#1,$22(a1)
0001055A 6600                       		bne.s	loc_FB8C
0001055C 08E9 0005 0022             		bset	#5,$22(a1)
00010562 08E8 0005 0022             		bset	#5,$22(a0)
00010568 7801                       		moveq	#1,d4
0001056A 4E75                       		rts	
0001056C                            ; ===========================================================================
0001056C                            
0001056C                            loc_FB8C:
0001056C 6100                       		bsr.s	loc_FBA0
0001056E 7801                       		moveq	#1,d4
00010570 4E75                       		rts	
00010572                            ; ===========================================================================
00010572                            
00010572                            loc_FB92:
00010572 0828 0005 0022             		btst	#5,$22(a0)
00010578 6700                       		beq.s	loc_FBAC
0001057A 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010580                            
00010580                            loc_FBA0:
00010580 08A8 0005 0022             		bclr	#5,$22(a0)
00010586 08A9 0005 0022             		bclr	#5,$22(a1)
0001058C                            
0001058C                            loc_FBAC:
0001058C 7800                       		moveq	#0,d4
0001058E 4E75                       		rts	
00010590                            ; ===========================================================================
00010590                            
00010590                            loc_FBB0:
00010590 4A43                       		tst.w	d3
00010592 6B00                       		bmi.s	loc_FBBC
00010594 0C43 0010                  		cmpi.w	#$10,d3
00010598 6500                       		bcs.s	loc_FBEE
0001059A 60D6                       		bra.s	loc_FB92
0001059C                            ; ===========================================================================
0001059C                            
0001059C                            loc_FBBC:
0001059C 4A69 0012                  		tst.w	$12(a1)
000105A0 6700                       		beq.s	loc_FBD6
000105A2 6A00                       		bpl.s	loc_FBD2
000105A4 4A43                       		tst.w	d3
000105A6 6A00                       		bpl.s	loc_FBD2
000105A8 9769 000C                  		sub.w	d3,$C(a1)
000105AC 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000105B2                            
000105B2                            loc_FBD2:
000105B2 78FF                       		moveq	#-1,d4
000105B4 4E75                       		rts	
000105B6                            ; ===========================================================================
000105B6                            
000105B6                            loc_FBD6:
000105B6 0829 0001 0022             		btst	#1,$22(a1)
000105BC 66F4                       		bne.s	loc_FBD2
000105BE 2F08                       		move.l	a0,-(sp)
000105C0 2049                       		movea.l	a1,a0
000105C2 4EB9 0000 0000             		jsr	KillSonic
000105C8 205F                       		movea.l	(sp)+,a0
000105CA 78FF                       		moveq	#-1,d4
000105CC 4E75                       		rts	
000105CE                            ; ===========================================================================
000105CE                            
000105CE                            loc_FBEE:
000105CE 5943                       		subq.w	#4,d3
000105D0 7200                       		moveq	#0,d1
000105D2 1228 0019                  		move.b	$19(a0),d1
000105D6 3401                       		move.w	d1,d2
000105D8 D442                       		add.w	d2,d2
000105DA D269 0008                  		add.w	8(a1),d1
000105DE 9268 0008                  		sub.w	8(a0),d1
000105E2 6B00                       		bmi.s	loc_FC28
000105E4 B242                       		cmp.w	d2,d1
000105E6 6400                       		bcc.s	loc_FC28
000105E8 4A69 0012                  		tst.w	$12(a1)
000105EC 6B00                       		bmi.s	loc_FC28
000105EE 9769 000C                  		sub.w	d3,$C(a1)
000105F2 5369 000C                  		subq.w	#1,$C(a1)
000105F6 6100                       		bsr.s	sub_FC2C
000105F8 117C 0002 0025             		move.b	#2,$25(a0)
000105FE 08E8 0003 0022             		bset	#3,$22(a0)
00010604 78FF                       		moveq	#-1,d4
00010606 4E75                       		rts	
00010608                            ; ===========================================================================
00010608                            
00010608                            loc_FC28:
00010608 7800                       		moveq	#0,d4
0001060A 4E75                       		rts	
0001060C                            ; End of function SolidObject
0001060C                            
0001060C                            
0001060C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001060C                            
0001060C                            
0001060C                            sub_FC2C:				; XREF: SolidObject
0001060C 0829 0003 0022             		btst	#3,$22(a1)
00010612 6700                       		beq.s	loc_FC4E
00010614 7000                       		moveq	#0,d0
00010616 1029 003D                  		move.b	$3D(a1),d0
0001061A ED48                       		lsl.w	#6,d0
0001061C 0680 00FF D000             		addi.l	#$FFD000,d0
00010622 2440                       		movea.l	d0,a2
00010624 08AA 0003 0022             		bclr	#3,$22(a2)
0001062A 422A 0025                  		clr.b	$25(a2)
0001062E                            
0001062E                            loc_FC4E:
0001062E 3008                       		move.w	a0,d0
00010630 0440 D000                  		subi.w	#-$3000,d0
00010634 EC48                       		lsr.w	#6,d0
00010636 0240 007F                  		andi.w	#$7F,d0
0001063A 1340 003D                  		move.b	d0,$3D(a1)
0001063E 137C 0000 0026             		move.b	#0,$26(a1)
00010644 337C 0000 0012             		move.w	#0,$12(a1)
0001064A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010650 0829 0001 0022             		btst	#1,$22(a1)
00010656 6700                       		beq.s	loc_FC84
00010658 2F08                       		move.l	a0,-(sp)
0001065A 2049                       		movea.l	a1,a0
0001065C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010662 205F                       		movea.l	(sp)+,a0
00010664                            
00010664                            loc_FC84:
00010664 08E9 0003 0022             		bset	#3,$22(a1)
0001066A 08E8 0003 0022             		bset	#3,$22(a0)
00010670 4E75                       		rts	
00010672                            ; End of function sub_FC2C
00010672                            
00010672                            ; ===========================================================================
00010672                            ; ---------------------------------------------------------------------------
00010672                            ; Object 51 - smashable	green block (MZ)
00010672                            ; ---------------------------------------------------------------------------
00010672                            
00010672                            Obj51:					; XREF: Obj_Index
00010672 7000                       		moveq	#0,d0
00010674 1028 0024                  		move.b	$24(a0),d0
00010678 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001067C 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010680 6000 FA14                  		bra.w	MarkObjGone
00010684                            ; ===========================================================================
00010684 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010686 0000                       		dc.w Obj51_Solid-Obj51_Index
00010688 0000                       		dc.w Obj51_Display-Obj51_Index
0001068A                            ; ===========================================================================
0001068A                            
0001068A                            Obj51_Main:				; XREF: Obj51_Index
0001068A 5428 0024                  		addq.b	#2,$24(a0)
0001068E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010696 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001069C 117C 0004 0001             		move.b	#4,1(a0)
000106A2 117C 0010 0019             		move.b	#$10,$19(a0)
000106A8 117C 0004 0018             		move.b	#4,$18(a0)
000106AE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000106B4                            
000106B4                            Obj51_Solid:				; XREF: Obj51_Index
000106B4 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000106BA 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000106C0 323C 001B                  		move.w	#$1B,d1
000106C4 343C 0010                  		move.w	#$10,d2
000106C8 363C 0011                  		move.w	#$11,d3
000106CC 3828 0008                  		move.w	8(a0),d4
000106D0 6100 FCEC                  		bsr.w	SolidObject
000106D4 0828 0003 0022             		btst	#3,$22(a0)
000106DA 6600                       		bne.s	Obj51_Smash
000106DC                            
000106DC                            locret_FCFC:
000106DC 4E75                       		rts	
000106DE                            ; ===========================================================================
000106DE                            
000106DE                            Obj51_Smash:				; XREF: Obj51_Solid
000106DE 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000106E4 66F6                       		bne.s	locret_FCFC	; if not, branch
000106E6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000106EC 08E9 0002 0022             		bset	#2,$22(a1)
000106F2 137C 000E 0016             		move.b	#$E,$16(a1)
000106F8 137C 0007 0017             		move.b	#7,$17(a1)
000106FE 137C 0002 001C             		move.b	#2,$1C(a1)
00010704 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001070A 08E9 0001 0022             		bset	#1,$22(a1)
00010710 08A9 0003 0022             		bclr	#3,$22(a1)
00010716 137C 0002 0024             		move.b	#2,$24(a1)
0001071C 08A8 0003 0022             		bclr	#3,$22(a0)
00010722 4228 0025                  		clr.b	$25(a0)
00010726 117C 0001 001A             		move.b	#1,$1A(a0)
0001072C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010732 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010734 343C 0038                  		move.w	#$38,d2
00010738 6100 D45C                  		bsr.w	SmashObject
0001073C 6100 DD36                  		bsr.w	SingleObjLoad
00010740 6600                       		bne.s	Obj51_Display
00010742 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010746 3368 0008 0008             		move.w	8(a0),8(a1)
0001074C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010752 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010756 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001075A 0C42 0006                  		cmpi.w	#6,d2
0001075E 6500                       		bcs.s	Obj51_Bonus
00010760 7406                       		moveq	#6,d2
00010762                            
00010762                            Obj51_Bonus:
00010762 7000                       		moveq	#0,d0
00010764 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010768 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001076E 6500                       		bcs.s	loc_FD98	; if not, branch
00010770 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010774 740A                       		moveq	#10,d2
00010776                            
00010776                            loc_FD98:
00010776 4EB9 0000 0000             		jsr	AddPoints
0001077C E24A                       		lsr.w	#1,d2
0001077E 1342 001A                  		move.b	d2,$1A(a1)
00010782                            
00010782                            Obj51_Display:				; XREF: Obj51_Index
00010782 6100 D844                  		bsr.w	SpeedToPos
00010786 0668 0038 0012             		addi.w	#$38,$12(a0)
0001078C 6100 D860                  		bsr.w	DisplaySprite
00010790 4A28 0001                  		tst.b	1(a0)
00010794 6A00 D894                  		bpl.w	DeleteObject
00010798 4E75                       		rts	
0001079A                            ; ===========================================================================
0001079A FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001079E FF00 FF00                  		dc.w $FF00, $FF00
000107A2 0200 FE00                  		dc.w $200, $FE00
000107A6 0100 FF00                  		dc.w $100, $FF00
000107AA                            
000107AA 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000107B2                            ; ---------------------------------------------------------------------------
000107B2                            ; Sprite mappings - smashable green block (MZ)
000107B2                            ; ---------------------------------------------------------------------------
000107B2                            Map_obj51:
000107B2                            	include "_maps\obj51.asm"
000107B2                            ; ---------------------------------------------------------------------------
000107B2                            ; Sprite mappings - smashable green block (MZ)
000107B2                            ; ---------------------------------------------------------------------------
000107B2 0000                       		dc.w byte_FDD8-Map_obj51
000107B4 0000                       		dc.w byte_FDE3-Map_obj51
000107B6 02                         byte_FDD8:	dc.b 2
000107B7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000107BC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000107C1 04                         byte_FDE3:	dc.b 4
000107C2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000107C7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000107CC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000107D1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000107D6                            		even
000107D6                            		even
000107D6                            
000107D6                            ; ===========================================================================
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            
000107D6                            Obj52:					; XREF: Obj_Index
000107D6 7000                       		moveq	#0,d0
000107D8 1028 0024                  		move.b	$24(a0),d0
000107DC 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000107E0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000107E4                            ; ===========================================================================
000107E4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000107E6 0000                       		dc.w Obj52_Platform-Obj52_Index
000107E8 0000                       		dc.w Obj52_StandOn-Obj52_Index
000107EA                            
000107EA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000107EC 2001                       		dc.b $20, 1
000107EE 2002                       		dc.b $20, 2
000107F0 4003                       		dc.b $40, 3
000107F2 3004                       		dc.b $30, 4
000107F4                            ; ===========================================================================
000107F4                            
000107F4                            Obj52_Main:				; XREF: Obj52_Index
000107F4 5428 0024                  		addq.b	#2,$24(a0)
000107F8 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010800 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010806 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001080C 6600                       		bne.s	loc_FE44
0001080E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010816 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001081C 117C 0007 0016             		move.b	#7,$16(a0)
00010822                            
00010822                            loc_FE44:
00010822 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010828 6600                       		bne.s	loc_FE60
0001082A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010830 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010836 6700                       		beq.s	loc_FE60	; if yes, branch
00010838 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001083E                            
0001083E                            loc_FE60:
0001083E 117C 0004 0001             		move.b	#4,1(a0)
00010844 7000                       		moveq	#0,d0
00010846 1028 0028                  		move.b	$28(a0),d0
0001084A E648                       		lsr.w	#3,d0
0001084C 0240 001E                  		andi.w	#$1E,d0
00010850 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010854 115A 0019                  		move.b	(a2)+,$19(a0)
00010858 115A 001A                  		move.b	(a2)+,$1A(a0)
0001085C 117C 0004 0018             		move.b	#4,$18(a0)
00010862 3168 0008 0030             		move.w	8(a0),$30(a0)
00010868 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001086E 0228 000F 0028             		andi.b	#$F,$28(a0)
00010874                            
00010874                            Obj52_Platform:				; XREF: Obj52_Index
00010874 6100 0000                  		bsr.w	Obj52_Move
00010878 7200                       		moveq	#0,d1
0001087A 1228 0019                  		move.b	$19(a0),d1
0001087E 4EB9 0000 7C0C             		jsr	(PlatformObject).l
00010884 6000                       		bra.s	Obj52_ChkDel
00010886                            ; ===========================================================================
00010886                            
00010886                            Obj52_StandOn:				; XREF: Obj52_Index
00010886 7200                       		moveq	#0,d1
00010888 1228 0019                  		move.b	$19(a0),d1
0001088C 4EB9 0000 7D80             		jsr	(ExitPlatform).l
00010892 3F28 0008                  		move.w	8(a0),-(sp)
00010896 6100 0000                  		bsr.w	Obj52_Move
0001089A 341F                       		move.w	(sp)+,d2
0001089C 4EB9 0000 82EA             		jsr	(MvSonicOnPtfm2).l
000108A2                            
000108A2                            Obj52_ChkDel:				; XREF: Obj52_Platform
000108A2 3028 0030                  		move.w	$30(a0),d0
000108A6 0240 FF80                  		andi.w	#$FF80,d0
000108AA 3238 F700                  		move.w	($FFFFF700).w,d1
000108AE 0441 0080                  		subi.w	#$80,d1
000108B2 0241 FF80                  		andi.w	#$FF80,d1
000108B6 9041                       		sub.w	d1,d0
000108B8 0C40 0280                  		cmpi.w	#$280,d0
000108BC 6200 D76C                  		bhi.w	DeleteObject
000108C0 6000 D72C                  		bra.w	DisplaySprite
000108C4                            ; ===========================================================================
000108C4                            
000108C4                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000108C4 7000                       		moveq	#0,d0
000108C6 1028 0028                  		move.b	$28(a0),d0
000108CA 0240 000F                  		andi.w	#$F,d0
000108CE D040                       		add.w	d0,d0
000108D0 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000108D4 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000108D8                            ; ===========================================================================
000108D8 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000108DC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000108E0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000108E4 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000108E8 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000108EC 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000108EE                            ; ===========================================================================
000108EE                            
000108EE                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000108EE 4E75                       		rts	
000108F0                            ; ===========================================================================
000108F0                            
000108F0                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000108F0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000108F4 323C 0060                  		move.w	#$60,d1
000108F8 0828 0000 0022             		btst	#0,$22(a0)
000108FE 6700                       		beq.s	loc_FF26
00010900 4440                       		neg.w	d0
00010902 D041                       		add.w	d1,d0
00010904                            
00010904                            loc_FF26:
00010904 3228 0030                  		move.w	$30(a0),d1
00010908 9240                       		sub.w	d0,d1
0001090A 3141 0008                  		move.w	d1,8(a0)
0001090E 4E75                       		rts	
00010910                            ; ===========================================================================
00010910                            
00010910                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010910 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010916 6600                       		bne.s	Obj52_02_Wait
00010918 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001091C                            
0001091C                            Obj52_02_Wait:
0001091C 4E75                       		rts	
0001091E                            ; ===========================================================================
0001091E                            
0001091E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001091E 7600                       		moveq	#0,d3
00010920 1628 0019                  		move.b	$19(a0),d3
00010924 6100 0000                  		bsr.w	ObjHitWallRight
00010928 4A41                       		tst.w	d1		; has the platform hit a wall?
0001092A 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001092C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010930 3168 0008 0030             		move.w	8(a0),$30(a0)
00010936 4E75                       		rts	
00010938                            ; ===========================================================================
00010938                            
00010938                            Obj52_03_End:
00010938 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001093C 4E75                       		rts	
0001093E                            ; ===========================================================================
0001093E                            
0001093E                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001093E 7600                       		moveq	#0,d3
00010940 1628 0019                  		move.b	$19(a0),d3
00010944 6100 0000                  		bsr.w	ObjHitWallRight
00010948 4A41                       		tst.w	d1		; has the platform hit a wall?
0001094A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001094C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010950 3168 0008 0030             		move.w	8(a0),$30(a0)
00010956 4E75                       		rts	
00010958                            ; ===========================================================================
00010958                            
00010958                            Obj52_05_End:
00010958 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001095C 4E75                       		rts	
0001095E                            ; ===========================================================================
0001095E                            
0001095E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001095E 6100 D668                  		bsr.w	SpeedToPos
00010962 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010968 6100 0000                  		bsr.w	ObjHitFloor
0001096C 4A41                       		tst.w	d1		; has platform hit the floor?
0001096E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010972 D368 000C                  		add.w	d1,$C(a0)
00010976 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001097A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001097E                            
0001097E                            locret_FFA0:
0001097E 4E75                       		rts	
00010980                            ; ===========================================================================
00010980                            
00010980                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010980 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010984 6700                       		beq.s	Obj52_07_ChkDel
00010986 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001098A                            
0001098A                            Obj52_07_ChkDel:
0001098A 588F                       		addq.l	#4,sp
0001098C 3028 0030                  		move.w	$30(a0),d0
00010990 0240 FF80                  		andi.w	#$FF80,d0
00010994 3238 F700                  		move.w	($FFFFF700).w,d1
00010998 0441 0080                  		subi.w	#$80,d1
0001099C 0241 FF80                  		andi.w	#$FF80,d1
000109A0 9041                       		sub.w	d1,d0
000109A2 0C40 0280                  		cmpi.w	#$280,d0
000109A6 6200 D682                  		bhi.w	DeleteObject
000109AA 4E75                       		rts	
000109AC                            ; ===========================================================================
000109AC                            
000109AC                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000109AC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109B0 323C 0080                  		move.w	#$80,d1
000109B4 0828 0000 0022             		btst	#0,$22(a0)
000109BA 6700                       		beq.s	loc_FFE2
000109BC 4440                       		neg.w	d0
000109BE D041                       		add.w	d1,d0
000109C0                            
000109C0                            loc_FFE2:
000109C0 3228 0032                  		move.w	$32(a0),d1
000109C4 9240                       		sub.w	d0,d1
000109C6 3141 000C                  		move.w	d1,$C(a0)
000109CA 4E75                       		rts	
000109CC                            ; ===========================================================================
000109CC                            
000109CC                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000109CC 7600                       		moveq	#0,d3
000109CE 1628 0019                  		move.b	$19(a0),d3
000109D2 D643                       		add.w	d3,d3
000109D4 7208                       		moveq	#8,d1
000109D6 0828 0000 0022             		btst	#0,$22(a0)
000109DC 6700                       		beq.s	loc_10004
000109DE 4441                       		neg.w	d1
000109E0 4443                       		neg.w	d3
000109E2                            
000109E2                            loc_10004:
000109E2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000109E6 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000109E8 3028 0008                  		move.w	8(a0),d0
000109EC 9068 0030                  		sub.w	$30(a0),d0
000109F0 B043                       		cmp.w	d3,d0
000109F2 6700                       		beq.s	Obj52_0A_Wait
000109F4 D368 0008                  		add.w	d1,8(a0)	; move platform
000109F8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000109FE 4E75                       		rts	
00010A00                            ; ===========================================================================
00010A00                            
00010A00                            Obj52_0A_Wait:
00010A00 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A04 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A06 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A0C                            
00010A0C                            locret_1002E:
00010A0C 4E75                       		rts	
00010A0E                            ; ===========================================================================
00010A0E                            
00010A0E                            Obj52_0A_Back:
00010A0E 3028 0008                  		move.w	8(a0),d0
00010A12 9068 0030                  		sub.w	$30(a0),d0
00010A16 6700                       		beq.s	Obj52_0A_Reset
00010A18 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A1C 4E75                       		rts	
00010A1E                            ; ===========================================================================
00010A1E                            
00010A1E                            Obj52_0A_Reset:
00010A1E 4268 0036                  		clr.w	$36(a0)
00010A22 5328 0028                  		subq.b	#1,$28(a0)
00010A26 4E75                       		rts	
00010A28                            ; ===========================================================================
00010A28                            ; ---------------------------------------------------------------------------
00010A28                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A28                            ; ---------------------------------------------------------------------------
00010A28                            Map_obj52:
00010A28                            	include "_maps\obj52mz.asm"
00010A28                            ; ---------------------------------------------------------------------------
00010A28                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A28                            ; ---------------------------------------------------------------------------
00010A28 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A2C 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A30 0000                       		dc.w byte_1008F-Map_obj52
00010A32 01                         byte_10054:	dc.b 1
00010A33 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A38 02                         byte_1005A:	dc.b 2
00010A39 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010A3E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010A43 04                         byte_10065:	dc.b 4
00010A44 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010A49 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010A4E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010A53 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010A58 04                         byte_1007A:	dc.b 4
00010A59 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010A5E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010A63 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010A68 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010A6D 03                         byte_1008F:	dc.b 3
00010A6E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010A73 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A78 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010A7E 00                         		even
00010A7E 00                         		even
00010A7E                            
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E                            ; Sprite mappings - moving block (LZ)
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E                            Map_obj52a:
00010A7E                            	include "_maps\obj52lz.asm"
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E                            ; Sprite mappings - moving block (LZ)
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E 0000                       		dc.w byte_100A2-Map_obj52a
00010A80 01                         byte_100A2:	dc.b 1
00010A81 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010A86                            		even
00010A86                            		even
00010A86                            
00010A86                            ; ===========================================================================
00010A86                            ; ---------------------------------------------------------------------------
00010A86                            ; Object 55 - Basaran enemy (MZ)
00010A86                            ; ---------------------------------------------------------------------------
00010A86                            
00010A86                            Obj55:					; XREF: Obj_Index
00010A86 7000                       		moveq	#0,d0
00010A88 1028 0024                  		move.b	$24(a0),d0
00010A8C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010A90 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010A94                            ; ===========================================================================
00010A94 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010A96 0000                       		dc.w Obj55_Action-Obj55_Index
00010A98                            ; ===========================================================================
00010A98                            
00010A98                            Obj55_Main:				; XREF: Obj55_Index
00010A98 5428 0024                  		addq.b	#2,$24(a0)
00010A9C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010AA4 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010AAA 117C 0004 0001             		move.b	#4,1(a0)
00010AB0 117C 000C 0016             		move.b	#$C,$16(a0)
00010AB6 117C 0002 0018             		move.b	#2,$18(a0)
00010ABC 117C 000B 0020             		move.b	#$B,$20(a0)
00010AC2 117C 0010 0019             		move.b	#$10,$19(a0)
00010AC8                            
00010AC8                            Obj55_Action:				; XREF: Obj55_Index
00010AC8 7000                       		moveq	#0,d0
00010ACA 1028 0025                  		move.b	$25(a0),d0
00010ACE 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010AD2 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010AD6 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010ADC 6100 A56E                  		bsr.w	AnimateSprite
00010AE0 6000 F5B4                  		bra.w	MarkObjGone
00010AE4                            ; ===========================================================================
00010AE4 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010AE6 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010AE8 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010AEA 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010AEC                            ; ===========================================================================
00010AEC                            
00010AEC                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010AEC 343C 0080                  		move.w	#$80,d2
00010AF0 6100 0000                  		bsr.w	Obj55_ChkSonic
00010AF4 6400                       		bcc.s	Obj55_NoDrop
00010AF6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010AFA 3140 0036                  		move.w	d0,$36(a0)
00010AFE 9068 000C                  		sub.w	$C(a0),d0
00010B02 6500                       		bcs.s	Obj55_NoDrop
00010B04 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B08 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B0A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B0E 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B10 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B14 D007                       		add.b	d7,d0
00010B16 0200 0007                  		andi.b	#7,d0
00010B1A 6600                       		bne.s	Obj55_NoDrop
00010B1C 117C 0001 001C             		move.b	#1,$1C(a0)
00010B22 5428 0025                  		addq.b	#2,$25(a0)
00010B26                            
00010B26                            Obj55_NoDrop:
00010B26 4E75                       		rts	
00010B28                            ; ===========================================================================
00010B28                            
00010B28                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B28 6100 D49E                  		bsr.w	SpeedToPos
00010B2C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B32 343C 0080                  		move.w	#$80,d2
00010B36 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B3A 3028 0036                  		move.w	$36(a0),d0
00010B3E 9068 000C                  		sub.w	$C(a0),d0
00010B42 6500                       		bcs.s	Obj55_ChkDel
00010B44 0C40 0010                  		cmpi.w	#$10,d0
00010B48 6400                       		bcc.s	locret_10180
00010B4A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010B4E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010B54 117C 0002 001C             		move.b	#2,$1C(a0)
00010B5A 5428 0025                  		addq.b	#2,$25(a0)
00010B5E                            
00010B5E                            locret_10180:
00010B5E 4E75                       		rts	
00010B60                            ; ===========================================================================
00010B60                            
00010B60                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010B60 4A28 0001                  		tst.b	1(a0)
00010B64 6A00 D4C4                  		bpl.w	DeleteObject
00010B68 4E75                       		rts	
00010B6A                            ; ===========================================================================
00010B6A                            
00010B6A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010B6A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B6E 0200 000F                  		andi.b	#$F,d0
00010B72 6600                       		bne.s	loc_101A0
00010B74 303C 00C0                  		move.w	#$C0,d0
00010B78 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flapping sound
00010B7E                            
00010B7E                            loc_101A0:
00010B7E 6100 D448                  		bsr.w	SpeedToPos
00010B82 3038 D008                  		move.w	($FFFFD008).w,d0
00010B86 9068 0008                  		sub.w	8(a0),d0
00010B8A 6400                       		bcc.s	loc_101B0
00010B8C 4440                       		neg.w	d0
00010B8E                            
00010B8E                            loc_101B0:
00010B8E 0C40 0080                  		cmpi.w	#$80,d0
00010B92 6500                       		bcs.s	locret_101C6
00010B94 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B98 D007                       		add.b	d7,d0
00010B9A 0200 0007                  		andi.b	#7,d0
00010B9E 6600                       		bne.s	locret_101C6
00010BA0 5428 0025                  		addq.b	#2,$25(a0)
00010BA4                            
00010BA4                            locret_101C6:
00010BA4 4E75                       		rts	
00010BA6                            ; ===========================================================================
00010BA6                            
00010BA6                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010BA6 6100 D420                  		bsr.w	SpeedToPos
00010BAA 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010BB0 6100 0000                  		bsr.w	ObjHitCeiling
00010BB4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010BB6 6A00                       		bpl.s	locret_101F4	; if not, branch
00010BB8 9368 000C                  		sub.w	d1,$C(a0)
00010BBC 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010BC2 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010BC6 4268 0012                  		clr.w	$12(a0)
00010BCA 4228 001C                  		clr.b	$1C(a0)
00010BCE 4228 0025                  		clr.b	$25(a0)
00010BD2                            
00010BD2                            locret_101F4:
00010BD2 4E75                       		rts	
00010BD4                            ; ===========================================================================
00010BD4                            
00010BD4                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010BD4 323C 0100                  		move.w	#$100,d1
00010BD8 08E8 0000 0022             		bset	#0,$22(a0)
00010BDE 3038 D008                  		move.w	($FFFFD008).w,d0
00010BE2 9068 0008                  		sub.w	8(a0),d0
00010BE6 6400                       		bcc.s	loc_10214
00010BE8 4440                       		neg.w	d0
00010BEA 4441                       		neg.w	d1
00010BEC 08A8 0000 0022             		bclr	#0,$22(a0)
00010BF2                            
00010BF2                            loc_10214:
00010BF2 B042                       		cmp.w	d2,d0
00010BF4 4E75                       		rts	
00010BF6                            ; ===========================================================================
00010BF6 6100 D3D0                  		bsr.w	SpeedToPos
00010BFA 6100 D3F2                  		bsr.w	DisplaySprite
00010BFE 4A28 0001                  		tst.b	1(a0)
00010C02 6A00 D426                  		bpl.w	DeleteObject
00010C06 4E75                       		rts	
00010C08                            ; ===========================================================================
00010C08                            Ani_obj55:
00010C08                            	include "_anim\obj55.asm"
00010C08                            ; ---------------------------------------------------------------------------
00010C08                            ; Animation script - Basaran enemy
00010C08                            ; ---------------------------------------------------------------------------
00010C08 0000                       		dc.w byte_10230-Ani_obj55
00010C0A 0000                       		dc.w byte_10234-Ani_obj55
00010C0C 0000                       		dc.w byte_10238-Ani_obj55
00010C0E 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C12 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C16 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C1C                            		even
00010C1C                            		even
00010C1C                            
00010C1C                            ; ---------------------------------------------------------------------------
00010C1C                            ; Sprite mappings - Basaran enemy (MZ)
00010C1C                            ; ---------------------------------------------------------------------------
00010C1C                            Map_obj55:
00010C1C                            	include "_maps\obj55.asm"
00010C1C                            ; ---------------------------------------------------------------------------
00010C1C                            ; Sprite mappings - Basaran enemy (MZ)
00010C1C                            ; ---------------------------------------------------------------------------
00010C1C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C20 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C24 01                         byte_10246:	dc.b 1
00010C25 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C2A 03                         byte_1024C:	dc.b 3
00010C2B F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C30 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C35 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010C3A 04                         byte_1025C:	dc.b 4
00010C3B F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010C40 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010C45 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010C4A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010C4F 04                         byte_10271:	dc.b 4
00010C50 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010C55 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010C5A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010C5F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010C64                            		even
00010C64                            		even
00010C64                            
00010C64                            ; ===========================================================================
00010C64                            ; ---------------------------------------------------------------------------
00010C64                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010C64                            ; ---------------------------------------------------------------------------
00010C64                            
00010C64                            Obj56:					; XREF: Obj_Index
00010C64 7000                       		moveq	#0,d0
00010C66 1028 0024                  		move.b	$24(a0),d0
00010C6A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010C6E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010C72                            ; ===========================================================================
00010C72 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010C74 0000                       		dc.w Obj56_Action-Obj56_Index
00010C76                            
00010C76 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010C78 2020                       		dc.b  $20, $20
00010C7A 1020                       		dc.b  $10, $20
00010C7C 201A                       		dc.b  $20, $1A
00010C7E 1027                       		dc.b  $10, $27
00010C80 1010                       		dc.b  $10, $10
00010C82 0820                       		dc.b	8, $20
00010C84 4010                       		dc.b  $40, $10
00010C86                            ; ===========================================================================
00010C86                            
00010C86                            Obj56_Main:				; XREF: Obj56_Index
00010C86 5428 0024                  		addq.b	#2,$24(a0)
00010C8A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010C92 317C 4000 0002             		move.w	#$4000,2(a0)
00010C98 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010C9E 6600                       		bne.s	loc_102C8
00010CA0 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010CA6                            
00010CA6                            loc_102C8:
00010CA6 117C 0004 0001             		move.b	#4,1(a0)
00010CAC 117C 0003 0018             		move.b	#3,$18(a0)
00010CB2 7000                       		moveq	#0,d0
00010CB4 1028 0028                  		move.b	$28(a0),d0
00010CB8 E648                       		lsr.w	#3,d0
00010CBA 0240 000E                  		andi.w	#$E,d0
00010CBE 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010CC2 115A 0019                  		move.b	(a2)+,$19(a0)
00010CC6 1152 0016                  		move.b	(a2),$16(a0)
00010CCA E248                       		lsr.w	#1,d0
00010CCC 1140 001A                  		move.b	d0,$1A(a0)
00010CD0 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CD6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010CDC 7000                       		moveq	#0,d0
00010CDE 1012                       		move.b	(a2),d0
00010CE0 D040                       		add.w	d0,d0
00010CE2 3140 003A                  		move.w	d0,$3A(a0)
00010CE6 7000                       		moveq	#0,d0
00010CE8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CEE 6700                       		beq.s	loc_10332
00010CF0 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010CF4 0240 000F                  		andi.w	#$F,d0
00010CF8 5140                       		subq.w	#8,d0
00010CFA 6500                       		bcs.s	loc_10332
00010CFC E548                       		lsl.w	#2,d0
00010CFE 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D02 45F2 0000                  		lea	(a2,d0.w),a2
00010D06 4A52                       		tst.w	(a2)
00010D08 6A00                       		bpl.s	loc_10332
00010D0A 0868 0000 0022             		bchg	#0,$22(a0)
00010D10                            
00010D10                            loc_10332:
00010D10 1028 0028                  		move.b	$28(a0),d0
00010D14 6A00                       		bpl.s	Obj56_Action
00010D16 0200 000F                  		andi.b	#$F,d0
00010D1A 1140 003C                  		move.b	d0,$3C(a0)
00010D1E 117C 0005 0028             		move.b	#5,$28(a0)
00010D24 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D2A 6600                       		bne.s	Obj56_ChkGone
00010D2C 117C 000C 0028             		move.b	#$C,$28(a0)
00010D32 317C 0080 003A             		move.w	#$80,$3A(a0)
00010D38                            
00010D38                            Obj56_ChkGone:
00010D38 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D3C 7000                       		moveq	#0,d0
00010D3E 1028 0023                  		move.b	$23(a0),d0
00010D42 6700                       		beq.s	Obj56_Action
00010D44 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D4A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010D50 6700                       		beq.s	Obj56_Action
00010D52 5228 0028                  		addq.b	#1,$28(a0)
00010D56 4268 003A                  		clr.w	$3A(a0)
00010D5A                            
00010D5A                            Obj56_Action:				; XREF: Obj56_Index
00010D5A 3F28 0008                  		move.w	8(a0),-(sp)
00010D5E 7000                       		moveq	#0,d0
00010D60 1028 0028                  		move.b	$28(a0),d0	; get object type
00010D64 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010D68 D040                       		add.w	d0,d0
00010D6A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010D6E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010D72 381F                       		move.w	(sp)+,d4
00010D74 4A28 0001                  		tst.b	1(a0)
00010D78 6A00                       		bpl.s	Obj56_ChkDel
00010D7A 7200                       		moveq	#0,d1
00010D7C 1228 0019                  		move.b	$19(a0),d1
00010D80 0641 000B                  		addi.w	#$B,d1
00010D84 7400                       		moveq	#0,d2
00010D86 1428 0016                  		move.b	$16(a0),d2
00010D8A 3602                       		move.w	d2,d3
00010D8C 5243                       		addq.w	#1,d3
00010D8E 6100 F62E                  		bsr.w	SolidObject
00010D92                            
00010D92                            Obj56_ChkDel:
00010D92 3028 0034                  		move.w	$34(a0),d0
00010D96 0240 FF80                  		andi.w	#$FF80,d0
00010D9A 3238 F700                  		move.w	($FFFFF700).w,d1
00010D9E 0441 0080                  		subi.w	#$80,d1
00010DA2 0241 FF80                  		andi.w	#$FF80,d1
00010DA6 9041                       		sub.w	d1,d0
00010DA8 0C40 0280                  		cmpi.w	#$280,d0
00010DAC 6200 D27C                  		bhi.w	DeleteObject
00010DB0 6000 D23C                  		bra.w	DisplaySprite
00010DB4                            ; ===========================================================================
00010DB4 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010DB8 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010DBC 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010DC0 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010DC4 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010DC8 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010DCC 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010DD0                            ; ===========================================================================
00010DD0                            
00010DD0                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010DD0 4E75                       		rts	
00010DD2                            ; ===========================================================================
00010DD2                            
00010DD2                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010DD2 323C 0040                  		move.w	#$40,d1
00010DD6 7000                       		moveq	#0,d0
00010DD8 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010DDC 6000                       		bra.s	Obj56_Move_LR
00010DDE                            ; ===========================================================================
00010DDE                            
00010DDE                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010DDE 323C 0080                  		move.w	#$80,d1
00010DE2 7000                       		moveq	#0,d0
00010DE4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010DE8                            
00010DE8                            Obj56_Move_LR:
00010DE8 0828 0000 0022             		btst	#0,$22(a0)
00010DEE 6700                       		beq.s	loc_10416
00010DF0 4440                       		neg.w	d0
00010DF2 D041                       		add.w	d1,d0
00010DF4                            
00010DF4                            loc_10416:
00010DF4 3228 0034                  		move.w	$34(a0),d1
00010DF8 9240                       		sub.w	d0,d1
00010DFA 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010DFE 4E75                       		rts	
00010E00                            ; ===========================================================================
00010E00                            
00010E00                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E00 323C 0040                  		move.w	#$40,d1
00010E04 7000                       		moveq	#0,d0
00010E06 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E0A 6000                       		bra.s	Obj56_Move_UD
00010E0C                            ; ===========================================================================
00010E0C                            
00010E0C                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E0C 323C 0080                  		move.w	#$80,d1
00010E10 7000                       		moveq	#0,d0
00010E12 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E16                            
00010E16                            Obj56_Move_UD:
00010E16 0828 0000 0022             		btst	#0,$22(a0)
00010E1C 6700                       		beq.s	loc_10444
00010E1E 4440                       		neg.w	d0
00010E20 D041                       		add.w	d1,d0
00010E22                            
00010E22                            loc_10444:
00010E22 3228 0030                  		move.w	$30(a0),d1
00010E26 9240                       		sub.w	d0,d1
00010E28 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E2C 4E75                       		rts	
00010E2E                            ; ===========================================================================
00010E2E                            
00010E2E                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E2E 4A28 0038                  		tst.b	$38(a0)
00010E32 6600                       		bne.s	loc_104A4
00010E34 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E3A 6600                       		bne.s	loc_1047A	; if not, branch
00010E3C 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010E42 6600                       		bne.s	loc_1047A
00010E44 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E48 3038 D008                  		move.w	($FFFFD008).w,d0
00010E4C B068 0008                  		cmp.w	8(a0),d0
00010E50 6400                       		bcc.s	loc_1047A
00010E52 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010E58                            
00010E58                            loc_1047A:
00010E58 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E5C 7000                       		moveq	#0,d0
00010E5E 1028 003C                  		move.b	$3C(a0),d0
00010E62 0832 0000 0000             		btst	#0,(a2,d0.w)
00010E68 6700                       		beq.s	loc_104AE
00010E6A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E70 6600                       		bne.s	loc_1049E	; if not, branch
00010E72 0C00 0003                  		cmpi.b	#3,d0
00010E76 6600                       		bne.s	loc_1049E
00010E78 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E7C                            
00010E7C                            loc_1049E:
00010E7C 117C 0001 0038             		move.b	#1,$38(a0)
00010E82                            
00010E82                            loc_104A4:
00010E82 4A68 003A                  		tst.w	$3A(a0)
00010E86 6700                       		beq.s	loc_104C8
00010E88 5568 003A                  		subq.w	#2,$3A(a0)
00010E8C                            
00010E8C                            loc_104AE:
00010E8C 3028 003A                  		move.w	$3A(a0),d0
00010E90 0828 0000 0022             		btst	#0,$22(a0)
00010E96 6700                       		beq.s	loc_104BC
00010E98 4440                       		neg.w	d0
00010E9A                            
00010E9A                            loc_104BC:
00010E9A 3228 0030                  		move.w	$30(a0),d1
00010E9E D240                       		add.w	d0,d1
00010EA0 3141 000C                  		move.w	d1,$C(a0)
00010EA4 4E75                       		rts	
00010EA6                            ; ===========================================================================
00010EA6                            
00010EA6                            loc_104C8:
00010EA6 5228 0028                  		addq.b	#1,$28(a0)
00010EAA 4228 0038                  		clr.b	$38(a0)
00010EAE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010EB2 7000                       		moveq	#0,d0
00010EB4 1028 0023                  		move.b	$23(a0),d0
00010EB8 67D2                       		beq.s	loc_104AE
00010EBA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010EC0 60CA                       		bra.s	loc_104AE
00010EC2                            ; ===========================================================================
00010EC2                            
00010EC2                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010EC2 4A28 0038                  		tst.b	$38(a0)
00010EC6 6600                       		bne.s	loc_10500
00010EC8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010ECC 7000                       		moveq	#0,d0
00010ECE 1028 003C                  		move.b	$3C(a0),d0
00010ED2 4A32 0000                  		tst.b	(a2,d0.w)
00010ED6 6A00                       		bpl.s	loc_10512
00010ED8 117C 0001 0038             		move.b	#1,$38(a0)
00010EDE                            
00010EDE                            loc_10500:
00010EDE 7000                       		moveq	#0,d0
00010EE0 1028 0016                  		move.b	$16(a0),d0
00010EE4 D040                       		add.w	d0,d0
00010EE6 B068 003A                  		cmp.w	$3A(a0),d0
00010EEA 6700                       		beq.s	loc_1052C
00010EEC 5468 003A                  		addq.w	#2,$3A(a0)
00010EF0                            
00010EF0                            loc_10512:
00010EF0 3028 003A                  		move.w	$3A(a0),d0
00010EF4 0828 0000 0022             		btst	#0,$22(a0)
00010EFA 6700                       		beq.s	loc_10520
00010EFC 4440                       		neg.w	d0
00010EFE                            
00010EFE                            loc_10520:
00010EFE 3228 0030                  		move.w	$30(a0),d1
00010F02 D240                       		add.w	d0,d1
00010F04 3141 000C                  		move.w	d1,$C(a0)
00010F08 4E75                       		rts	
00010F0A                            ; ===========================================================================
00010F0A                            
00010F0A                            loc_1052C:
00010F0A 5328 0028                  		subq.b	#1,$28(a0)
00010F0E 4228 0038                  		clr.b	$38(a0)
00010F12 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F16 7000                       		moveq	#0,d0
00010F18 1028 0023                  		move.b	$23(a0),d0
00010F1C 67D2                       		beq.s	loc_10512
00010F1E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F24 60CA                       		bra.s	loc_10512
00010F26                            ; ===========================================================================
00010F26                            
00010F26                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F26 4A28 0038                  		tst.b	$38(a0)
00010F2A 6600                       		bne.s	loc_1055E
00010F2C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F30 6700                       		beq.s	locret_10578
00010F32 117C 0001 0038             		move.b	#1,$38(a0)
00010F38 4268 003A                  		clr.w	$3A(a0)
00010F3C                            
00010F3C                            loc_1055E:
00010F3C 5268 0008                  		addq.w	#1,8(a0)
00010F40 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F46 5268 003A                  		addq.w	#1,$3A(a0)
00010F4A 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010F50 6600                       		bne.s	locret_10578
00010F52 4228 0028                  		clr.b	$28(a0)
00010F56                            
00010F56                            locret_10578:
00010F56 4E75                       		rts	
00010F58                            ; ===========================================================================
00010F58                            
00010F58                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010F58 4A28 0038                  		tst.b	$38(a0)
00010F5C 6600                       		bne.s	loc_10598
00010F5E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F62 7000                       		moveq	#0,d0
00010F64 1028 003C                  		move.b	$3C(a0),d0
00010F68 0832 0000 0000             		btst	#0,(a2,d0.w)
00010F6E 6700                       		beq.s	loc_105A2
00010F70 117C 0001 0038             		move.b	#1,$38(a0)
00010F76                            
00010F76                            loc_10598:
00010F76 4A68 003A                  		tst.w	$3A(a0)
00010F7A 6700                       		beq.s	loc_105C0
00010F7C 5568 003A                  		subq.w	#2,$3A(a0)
00010F80                            
00010F80                            loc_105A2:
00010F80 3028 003A                  		move.w	$3A(a0),d0
00010F84 0828 0000 0022             		btst	#0,$22(a0)
00010F8A 6700                       		beq.s	loc_105B4
00010F8C 4440                       		neg.w	d0
00010F8E 0640 0080                  		addi.w	#$80,d0
00010F92                            
00010F92                            loc_105B4:
00010F92 3228 0034                  		move.w	$34(a0),d1
00010F96 D240                       		add.w	d0,d1
00010F98 3141 0008                  		move.w	d1,8(a0)
00010F9C 4E75                       		rts	
00010F9E                            ; ===========================================================================
00010F9E                            
00010F9E                            loc_105C0:
00010F9E 5228 0028                  		addq.b	#1,$28(a0)
00010FA2 4228 0038                  		clr.b	$38(a0)
00010FA6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FAA 7000                       		moveq	#0,d0
00010FAC 1028 0023                  		move.b	$23(a0),d0
00010FB0 67CE                       		beq.s	loc_105A2
00010FB2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FB8 60C6                       		bra.s	loc_105A2
00010FBA                            ; ===========================================================================
00010FBA                            
00010FBA                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010FBA 4A28 0038                  		tst.b	$38(a0)
00010FBE 6600                       		bne.s	loc_105F8
00010FC0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FC4 7000                       		moveq	#0,d0
00010FC6 1028 003C                  		move.b	$3C(a0),d0
00010FCA 4A32 0000                  		tst.b	(a2,d0.w)
00010FCE 6A00                       		bpl.s	loc_10606
00010FD0 117C 0001 0038             		move.b	#1,$38(a0)
00010FD6                            
00010FD6                            loc_105F8:
00010FD6 303C 0080                  		move.w	#$80,d0
00010FDA B068 003A                  		cmp.w	$3A(a0),d0
00010FDE 6700                       		beq.s	loc_10624
00010FE0 5468 003A                  		addq.w	#2,$3A(a0)
00010FE4                            
00010FE4                            loc_10606:
00010FE4 3028 003A                  		move.w	$3A(a0),d0
00010FE8 0828 0000 0022             		btst	#0,$22(a0)
00010FEE 6700                       		beq.s	loc_10618
00010FF0 4440                       		neg.w	d0
00010FF2 0640 0080                  		addi.w	#$80,d0
00010FF6                            
00010FF6                            loc_10618:
00010FF6 3228 0034                  		move.w	$34(a0),d1
00010FFA D240                       		add.w	d0,d1
00010FFC 3141 0008                  		move.w	d1,8(a0)
00011000 4E75                       		rts	
00011002                            ; ===========================================================================
00011002                            
00011002                            loc_10624:
00011002 5328 0028                  		subq.b	#1,$28(a0)
00011006 4228 0038                  		clr.b	$38(a0)
0001100A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001100E 7000                       		moveq	#0,d0
00011010 1028 0023                  		move.b	$23(a0),d0
00011014 67CE                       		beq.s	loc_10606
00011016 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001101C 60C6                       		bra.s	loc_10606
0001101E                            ; ===========================================================================
0001101E                            
0001101E                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001101E 323C 0010                  		move.w	#$10,d1
00011022 7000                       		moveq	#0,d0
00011024 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011028 E248                       		lsr.w	#1,d0
0001102A 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001102E 6000                       		bra.s	Obj56_Move_Sqr
00011030                            ; ===========================================================================
00011030                            
00011030                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011030 323C 0030                  		move.w	#$30,d1
00011034 7000                       		moveq	#0,d0
00011036 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001103A 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001103E 6000                       		bra.s	Obj56_Move_Sqr
00011040                            ; ===========================================================================
00011040                            
00011040                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011040 323C 0050                  		move.w	#$50,d1
00011044 7000                       		moveq	#0,d0
00011046 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001104A 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001104E 6000                       		bra.s	Obj56_Move_Sqr
00011050                            ; ===========================================================================
00011050                            
00011050                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011050 323C 0070                  		move.w	#$70,d1
00011054 7000                       		moveq	#0,d0
00011056 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001105A 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001105E                            
0001105E                            Obj56_Move_Sqr:
0001105E 4A43                       		tst.w	d3
00011060 6600                       		bne.s	loc_1068E
00011062 5228 0022                  		addq.b	#1,$22(a0)
00011066 0228 0003 0022             		andi.b	#3,$22(a0)
0001106C                            
0001106C                            loc_1068E:
0001106C 1428 0022                  		move.b	$22(a0),d2
00011070 0202 0003                  		andi.b	#3,d2
00011074 6600                       		bne.s	loc_106AE
00011076 9041                       		sub.w	d1,d0
00011078 D068 0034                  		add.w	$34(a0),d0
0001107C 3140 0008                  		move.w	d0,8(a0)
00011080 4441                       		neg.w	d1
00011082 D268 0030                  		add.w	$30(a0),d1
00011086 3141 000C                  		move.w	d1,$C(a0)
0001108A 4E75                       		rts	
0001108C                            ; ===========================================================================
0001108C                            
0001108C                            loc_106AE:
0001108C 5302                       		subq.b	#1,d2
0001108E 6600                       		bne.s	loc_106CC
00011090 5341                       		subq.w	#1,d1
00011092 9041                       		sub.w	d1,d0
00011094 4440                       		neg.w	d0
00011096 D068 0030                  		add.w	$30(a0),d0
0001109A 3140 000C                  		move.w	d0,$C(a0)
0001109E 5241                       		addq.w	#1,d1
000110A0 D268 0034                  		add.w	$34(a0),d1
000110A4 3141 0008                  		move.w	d1,8(a0)
000110A8 4E75                       		rts	
000110AA                            ; ===========================================================================
000110AA                            
000110AA                            loc_106CC:
000110AA 5302                       		subq.b	#1,d2
000110AC 6600                       		bne.s	loc_106EA
000110AE 5341                       		subq.w	#1,d1
000110B0 9041                       		sub.w	d1,d0
000110B2 4440                       		neg.w	d0
000110B4 D068 0034                  		add.w	$34(a0),d0
000110B8 3140 0008                  		move.w	d0,8(a0)
000110BC 5241                       		addq.w	#1,d1
000110BE D268 0030                  		add.w	$30(a0),d1
000110C2 3141 000C                  		move.w	d1,$C(a0)
000110C6 4E75                       		rts	
000110C8                            ; ===========================================================================
000110C8                            
000110C8                            loc_106EA:
000110C8 9041                       		sub.w	d1,d0
000110CA D068 0030                  		add.w	$30(a0),d0
000110CE 3140 000C                  		move.w	d0,$C(a0)
000110D2 4441                       		neg.w	d1
000110D4 D268 0034                  		add.w	$34(a0),d1
000110D8 3141 0008                  		move.w	d1,8(a0)
000110DC 4E75                       		rts	
000110DE                            ; ===========================================================================
000110DE                            ; ---------------------------------------------------------------------------
000110DE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110DE                            ; ---------------------------------------------------------------------------
000110DE                            Map_obj56:
000110DE                            	include "_maps\obj56.asm"
000110DE                            ; ---------------------------------------------------------------------------
000110DE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110DE                            ; ---------------------------------------------------------------------------
000110DE 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000110E2 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000110E6 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000110EA 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000110EE 01                         byte_10710:	dc.b 1
000110EF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000110F4 04                         byte_10716:	dc.b 4
000110F5 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000110FA E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000110FF 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011104 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011109 02                         byte_1072B:	dc.b 2
0001110A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001110F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011114 04                         byte_10736:	dc.b 4
00011115 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001111A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001111F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011124 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011129 03                         byte_1074B:	dc.b 3
0001112A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001112F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011134 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011139 01                         byte_1075B:	dc.b 1
0001113A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001113F 02                         byte_10761:	dc.b 2
00011140 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011145 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001114A 04                         byte_1076C:	dc.b 4
0001114B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00011150 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00011155 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001115A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00011160 00                         		even
00011160 00                         		even
00011160                            
00011160                            ; ===========================================================================
00011160                            ; ---------------------------------------------------------------------------
00011160                            ; Object 57 - spiked balls (SYZ, LZ)
00011160                            ; ---------------------------------------------------------------------------
00011160                            
00011160                            Obj57:					; XREF: Obj_Index
00011160 7000                       		moveq	#0,d0
00011162 1028 0024                  		move.b	$24(a0),d0
00011166 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001116A 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001116E                            ; ===========================================================================
0001116E 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00011170 0000                       		dc.w Obj57_Move-Obj57_Index
00011172 0000                       		dc.w Obj57_Display-Obj57_Index
00011174                            ; ===========================================================================
00011174                            
00011174                            Obj57_Main:				; XREF: Obj57_Index
00011174 5428 0024                  		addq.b	#2,$24(a0)
00011178 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00011180 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011186 117C 0004 0001             		move.b	#4,1(a0)
0001118C 117C 0004 0018             		move.b	#4,$18(a0)
00011192 117C 0008 0019             		move.b	#8,$19(a0)
00011198 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001119E 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111A4 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000111AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000111B0 6600                       		bne.s	loc_107E8
000111B2 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000111B8 317C 0310 0002             		move.w	#$310,2(a0)
000111BE 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000111C6                            
000111C6                            loc_107E8:
000111C6 1228 0028                  		move.b	$28(a0),d1	; get object type
000111CA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000111CE 4881                       		ext.w	d1
000111D0 E741                       		asl.w	#3,d1		; multiply by 8
000111D2 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000111D6 1028 0022                  		move.b	$22(a0),d0
000111DA E418                       		ror.b	#2,d0
000111DC 0200 00C0                  		andi.b	#-$40,d0
000111E0 1140 0026                  		move.b	d0,$26(a0)
000111E4 45E8 0029                  		lea	$29(a0),a2
000111E8 1228 0028                  		move.b	$28(a0),d1	; get object type
000111EC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000111F0 14FC 0000                  		move.b	#0,(a2)+
000111F4 3601                       		move.w	d1,d3
000111F6 E94B                       		lsl.w	#4,d3
000111F8 1143 003C                  		move.b	d3,$3C(a0)
000111FC 5341                       		subq.w	#1,d1		; set chain length (type-1)
000111FE 6500                       		bcs.s	loc_10894
00011200 0828 0003 0028             		btst	#3,$28(a0)
00011206 6700                       		beq.s	Obj57_MakeChain
00011208 5341                       		subq.w	#1,d1
0001120A 6500                       		bcs.s	loc_10894
0001120C                            
0001120C                            Obj57_MakeChain:
0001120C 6100 D266                  		bsr.w	SingleObjLoad
00011210 6600                       		bne.s	loc_10894
00011212 5228 0029                  		addq.b	#1,$29(a0)
00011216 3A09                       		move.w	a1,d5
00011218 0445 D000                  		subi.w	#-$3000,d5
0001121C EC4D                       		lsr.w	#6,d5
0001121E 0245 007F                  		andi.w	#$7F,d5
00011222 14C5                       		move.b	d5,(a2)+
00011224 137C 0004 0024             		move.b	#4,$24(a1)
0001122A 1290                       		move.b	0(a0),0(a1)
0001122C 2368 0004 0004             		move.l	4(a0),4(a1)
00011232 3368 0002 0002             		move.w	2(a0),2(a1)
00011238 1368 0001 0001             		move.b	1(a0),1(a1)
0001123E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011244 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001124A 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011250 0403 0010                  		subi.b	#$10,d3
00011254 1343 003C                  		move.b	d3,$3C(a1)
00011258 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001125E 6600                       		bne.s	loc_10890
00011260 4A03                       		tst.b	d3
00011262 6600                       		bne.s	loc_10890
00011264 137C 0002 001A             		move.b	#2,$1A(a1)
0001126A                            
0001126A                            loc_10890:
0001126A 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001126E                            
0001126E                            loc_10894:
0001126E 3A08                       		move.w	a0,d5
00011270 0445 D000                  		subi.w	#-$3000,d5
00011274 EC4D                       		lsr.w	#6,d5
00011276 0245 007F                  		andi.w	#$7F,d5
0001127A 14C5                       		move.b	d5,(a2)+
0001127C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011282 6600                       		bne.s	Obj57_Move
00011284 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001128A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011290                            
00011290                            Obj57_Move:				; XREF: Obj57_Index
00011290 6100 0000                  		bsr.w	Obj57_MoveSub
00011294 6000 0000                  		bra.w	Obj57_ChkDel
00011298                            ; ===========================================================================
00011298                            
00011298                            Obj57_MoveSub:				; XREF: Obj57_Move
00011298 3028 003E                  		move.w	$3E(a0),d0
0001129C D168 0026                  		add.w	d0,$26(a0)
000112A0 1028 0026                  		move.b	$26(a0),d0
000112A4 4EB9 0000 2D6C             		jsr	(CalcSine).l
000112AA 3428 0038                  		move.w	$38(a0),d2
000112AE 3628 003A                  		move.w	$3A(a0),d3
000112B2 45E8 0029                  		lea	$29(a0),a2
000112B6 7C00                       		moveq	#0,d6
000112B8 1C1A                       		move.b	(a2)+,d6
000112BA                            
000112BA                            Obj57_MoveLoop:
000112BA 7800                       		moveq	#0,d4
000112BC 181A                       		move.b	(a2)+,d4
000112BE ED4C                       		lsl.w	#6,d4
000112C0 0684 00FF D000             		addi.l	#$FFD000,d4
000112C6 2244                       		movea.l	d4,a1
000112C8 7800                       		moveq	#0,d4
000112CA 1829 003C                  		move.b	$3C(a1),d4
000112CE 2A04                       		move.l	d4,d5
000112D0 C9C0                       		muls.w	d0,d4
000112D2 E084                       		asr.l	#8,d4
000112D4 CBC1                       		muls.w	d1,d5
000112D6 E085                       		asr.l	#8,d5
000112D8 D842                       		add.w	d2,d4
000112DA DA43                       		add.w	d3,d5
000112DC 3344 000C                  		move.w	d4,$C(a1)
000112E0 3345 0008                  		move.w	d5,8(a1)
000112E4 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000112E8 4E75                       		rts	
000112EA                            ; ===========================================================================
000112EA                            
000112EA                            Obj57_ChkDel:				; XREF: Obj57_Move
000112EA 3028 003A                  		move.w	$3A(a0),d0
000112EE 0240 FF80                  		andi.w	#$FF80,d0
000112F2 3238 F700                  		move.w	($FFFFF700).w,d1
000112F6 0441 0080                  		subi.w	#$80,d1
000112FA 0241 FF80                  		andi.w	#$FF80,d1
000112FE 9041                       		sub.w	d1,d0
00011300 0C40 0280                  		cmpi.w	#$280,d0
00011304 6200 0000                  		bhi.w	Obj57_Delete
00011308 6000 CCE4                  		bra.w	DisplaySprite
0001130C                            ; ===========================================================================
0001130C                            
0001130C                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001130C 7400                       		moveq	#0,d2
0001130E 45E8 0029                  		lea	$29(a0),a2
00011312 141A                       		move.b	(a2)+,d2
00011314                            
00011314                            Obj57_DelLoop:
00011314 7000                       		moveq	#0,d0
00011316 101A                       		move.b	(a2)+,d0
00011318 ED48                       		lsl.w	#6,d0
0001131A 0680 00FF D000             		addi.l	#$FFD000,d0
00011320 2240                       		movea.l	d0,a1
00011322 6100 CD08                  		bsr.w	DeleteObject2
00011326 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001132A                            
0001132A 4E75                       		rts	
0001132C                            ; ===========================================================================
0001132C                            
0001132C                            Obj57_Display:				; XREF: Obj57_Index
0001132C 6000 CCC0                  		bra.w	DisplaySprite
00011330                            ; ===========================================================================
00011330                            ; ---------------------------------------------------------------------------
00011330                            ; Sprite mappings - chain of spiked balls (SYZ)
00011330                            ; ---------------------------------------------------------------------------
00011330                            Map_obj57:
00011330                            	include "_maps\obj57syz.asm"
00011330                            ; ---------------------------------------------------------------------------
00011330                            ; Sprite mappings - chain of spiked balls (SYZ)
00011330                            ; ---------------------------------------------------------------------------
00011330 0000                       		dc.w byte_10958-Map_obj57
00011332 01                         byte_10958:	dc.b 1
00011333 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011338                            		even
00011338                            		even
00011338                            
00011338                            ; ---------------------------------------------------------------------------
00011338                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011338                            ; ---------------------------------------------------------------------------
00011338                            Map_obj57a:
00011338                            	include "_maps\obj57lz.asm"
00011338                            ; ---------------------------------------------------------------------------
00011338                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011338                            ; ---------------------------------------------------------------------------
00011338 0000                       		dc.w byte_10964-Map_obj57a
0001133A 0000                       		dc.w byte_1096A-Map_obj57a
0001133C 0000                       		dc.w byte_10970-Map_obj57a
0001133E 01                         byte_10964:	dc.b 1
0001133F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011344 01                         byte_1096A:	dc.b 1
00011345 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001134A 01                         byte_10970:	dc.b 1
0001134B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011350                            		even
00011350                            		even
00011350                            
00011350                            ; ===========================================================================
00011350                            ; ---------------------------------------------------------------------------
00011350                            ; Object 58 - giant spiked balls (SYZ)
00011350                            ; ---------------------------------------------------------------------------
00011350                            
00011350                            Obj58:					; XREF: Obj_Index
00011350 7000                       		moveq	#0,d0
00011352 1028 0024                  		move.b	$24(a0),d0
00011356 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001135A 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001135E                            ; ===========================================================================
0001135E 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011360 0000                       		dc.w Obj58_Move-Obj58_Index
00011362                            ; ===========================================================================
00011362                            
00011362                            Obj58_Main:				; XREF: Obj58_Index
00011362 5428 0024                  		addq.b	#2,$24(a0)
00011366 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001136E 317C 0396 0002             		move.w	#$396,2(a0)
00011374 117C 0004 0001             		move.b	#4,1(a0)
0001137A 117C 0004 0018             		move.b	#4,$18(a0)
00011380 117C 0018 0019             		move.b	#$18,$19(a0)
00011386 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001138C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011392 117C 0086 0020             		move.b	#$86,$20(a0)
00011398 1228 0028                  		move.b	$28(a0),d1	; get object type
0001139C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000113A0 4881                       		ext.w	d1
000113A2 E741                       		asl.w	#3,d1		; multiply by 8
000113A4 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000113A8 1028 0022                  		move.b	$22(a0),d0
000113AC E418                       		ror.b	#2,d0
000113AE 0200 00C0                  		andi.b	#$C0,d0
000113B2 1140 0026                  		move.b	d0,$26(a0)
000113B6 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000113BC                            
000113BC                            Obj58_Move:				; XREF: Obj58_Index
000113BC 7000                       		moveq	#0,d0
000113BE 1028 0028                  		move.b	$28(a0),d0	; get object type
000113C2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000113C6 D040                       		add.w	d0,d0
000113C8 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000113CC 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000113D0 3028 003A                  		move.w	$3A(a0),d0
000113D4 0240 FF80                  		andi.w	#$FF80,d0
000113D8 3238 F700                  		move.w	($FFFFF700).w,d1
000113DC 0441 0080                  		subi.w	#$80,d1
000113E0 0241 FF80                  		andi.w	#$FF80,d1
000113E4 9041                       		sub.w	d1,d0
000113E6 0C40 0280                  		cmpi.w	#$280,d0
000113EA 6200 CC3E                  		bhi.w	DeleteObject
000113EE 6000 CBFE                  		bra.w	DisplaySprite
000113F2                            ; ===========================================================================
000113F2 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000113F4 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000113F6 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000113F8 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000113FA                            ; ===========================================================================
000113FA                            
000113FA                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000113FA 4E75                       		rts	
000113FC                            ; ===========================================================================
000113FC                            
000113FC                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000113FC 323C 0060                  		move.w	#$60,d1
00011400 7000                       		moveq	#0,d0
00011402 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011406 0828 0000 0022             		btst	#0,$22(a0)
0001140C 6700                       		beq.s	loc_10A38
0001140E 4440                       		neg.w	d0
00011410 D041                       		add.w	d1,d0
00011412                            
00011412                            loc_10A38:
00011412 3228 003A                  		move.w	$3A(a0),d1
00011416 9240                       		sub.w	d0,d1
00011418 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001141C 4E75                       		rts	
0001141E                            ; ===========================================================================
0001141E                            
0001141E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001141E 323C 0060                  		move.w	#$60,d1
00011422 7000                       		moveq	#0,d0
00011424 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011428 0828 0000 0022             		btst	#0,$22(a0)
0001142E 6700                       		beq.s	loc_10A5C
00011430 4440                       		neg.w	d0
00011432 0640 0080                  		addi.w	#$80,d0
00011436                            
00011436                            loc_10A5C:
00011436 3228 0038                  		move.w	$38(a0),d1
0001143A 9240                       		sub.w	d0,d1
0001143C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011440 4E75                       		rts	
00011442                            ; ===========================================================================
00011442                            
00011442                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011442 3028 003E                  		move.w	$3E(a0),d0
00011446 D168 0026                  		add.w	d0,$26(a0)
0001144A 1028 0026                  		move.b	$26(a0),d0
0001144E 4EB9 0000 2D6C             		jsr	(CalcSine).l
00011454 3428 0038                  		move.w	$38(a0),d2
00011458 3628 003A                  		move.w	$3A(a0),d3
0001145C 7800                       		moveq	#0,d4
0001145E 1828 003C                  		move.b	$3C(a0),d4
00011462 2A04                       		move.l	d4,d5
00011464 C9C0                       		muls.w	d0,d4
00011466 E084                       		asr.l	#8,d4
00011468 CBC1                       		muls.w	d1,d5
0001146A E085                       		asr.l	#8,d5
0001146C D842                       		add.w	d2,d4
0001146E DA43                       		add.w	d3,d5
00011470 3144 000C                  		move.w	d4,$C(a0)
00011474 3145 0008                  		move.w	d5,8(a0)
00011478 4E75                       		rts	
0001147A                            ; ===========================================================================
0001147A                            ; ---------------------------------------------------------------------------
0001147A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001147A                            ; ---------------------------------------------------------------------------
0001147A                            Map_obj15b:
0001147A                            	include "_maps\obj15sbz.asm"
0001147A                            ; ---------------------------------------------------------------------------
0001147A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001147A                            ; ---------------------------------------------------------------------------
0001147A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001147E 0000                       		dc.w byte_10AC6-Map_obj15b
00011480 05                         byte_10AA6:	dc.b 5
00011481 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011486 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001148B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011490 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011495 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001149A 01                         byte_10AC0:	dc.b 1
0001149B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000114A0 02                         byte_10AC6:	dc.b 2
000114A1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000114A6 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000114AC 00                         		even
000114AC 00                         		even
000114AC                            
000114AC                            ; ===========================================================================
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            
000114AC                            Obj59:					; XREF: Obj_Index
000114AC 7000                       		moveq	#0,d0
000114AE 1028 0024                  		move.b	$24(a0),d0
000114B2 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000114B6 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000114BA 3028 0032                  		move.w	$32(a0),d0
000114BE 0240 FF80                  		andi.w	#$FF80,d0
000114C2 3238 F700                  		move.w	($FFFFF700).w,d1
000114C6 0441 0080                  		subi.w	#$80,d1
000114CA 0241 FF80                  		andi.w	#$FF80,d1
000114CE 9041                       		sub.w	d1,d0
000114D0 0C40 0280                  		cmpi.w	#$280,d0
000114D4 6200 CB54                  		bhi.w	DeleteObject
000114D8 6000 CB14                  		bra.w	DisplaySprite
000114DC                            ; ===========================================================================
000114DC 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000114DE 0000                       		dc.w Obj59_Platform-Obj59_Index
000114E0 0000                       		dc.w Obj59_Action-Obj59_Index
000114E2 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000114E4                            
000114E4 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000114E6                            
000114E6 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000114E8 2001                       		dc.b $20, 1
000114EA 3401                       		dc.b $34, 1
000114EC 1003                       		dc.b $10, 3
000114EE 2003                       		dc.b $20, 3
000114F0 3403                       		dc.b $34, 3
000114F2 1401                       		dc.b $14, 1
000114F4 2401                       		dc.b $24, 1
000114F6 2C01                       		dc.b $2C, 1
000114F8 1403                       		dc.b $14, 3
000114FA 2403                       		dc.b $24, 3
000114FC 2C03                       		dc.b $2C, 3
000114FE 2005                       		dc.b $20, 5
00011500 2007                       		dc.b $20, 7
00011502 3009                       		dc.b $30, 9
00011504                            ; ===========================================================================
00011504                            
00011504                            Obj59_Main:				; XREF: Obj59_Index
00011504 5428 0024                  		addq.b	#2,$24(a0)
00011508 7000                       		moveq	#0,d0
0001150A 1028 0028                  		move.b	$28(a0),d0
0001150E 6A00                       		bpl.s	Obj59_Main2
00011510 5828 0024                  		addq.b	#4,$24(a0)
00011514 0240 007F                  		andi.w	#$7F,d0
00011518 C0FC 0006                  		mulu.w	#6,d0
0001151C 3140 003C                  		move.w	d0,$3C(a0)
00011520 3140 003E                  		move.w	d0,$3E(a0)
00011524 588F                       		addq.l	#4,sp
00011526 4E75                       		rts	
00011528                            ; ===========================================================================
00011528                            
00011528                            Obj59_Main2:
00011528 E648                       		lsr.w	#3,d0
0001152A 0240 001E                  		andi.w	#$1E,d0
0001152E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011532 115A 0019                  		move.b	(a2)+,$19(a0)
00011536 115A 001A                  		move.b	(a2)+,$1A(a0)
0001153A 7000                       		moveq	#0,d0
0001153C 1028 0028                  		move.b	$28(a0),d0
00011540 D040                       		add.w	d0,d0
00011542 0240 001E                  		andi.w	#$1E,d0
00011546 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001154A 101A                       		move.b	(a2)+,d0
0001154C E548                       		lsl.w	#2,d0
0001154E 3140 003C                  		move.w	d0,$3C(a0)
00011552 115A 0028                  		move.b	(a2)+,$28(a0)
00011556 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001155E 317C 4000 0002             		move.w	#$4000,2(a0)
00011564 117C 0004 0001             		move.b	#4,1(a0)
0001156A 117C 0004 0018             		move.b	#4,$18(a0)
00011570 3168 0008 0032             		move.w	8(a0),$32(a0)
00011576 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001157C                            
0001157C                            Obj59_Platform:				; XREF: Obj59_Index
0001157C 7200                       		moveq	#0,d1
0001157E 1228 0019                  		move.b	$19(a0),d1
00011582 4EB9 0000 7C0C             		jsr	(PlatformObject).l
00011588 6000 0000                  		bra.w	Obj59_Types
0001158C                            ; ===========================================================================
0001158C                            
0001158C                            Obj59_Action:				; XREF: Obj59_Index
0001158C 7200                       		moveq	#0,d1
0001158E 1228 0019                  		move.b	$19(a0),d1
00011592 4EB9 0000 7D80             		jsr	(ExitPlatform).l
00011598 3F28 0008                  		move.w	8(a0),-(sp)
0001159C 6100 0000                  		bsr.w	Obj59_Types
000115A0 341F                       		move.w	(sp)+,d2
000115A2 4A10                       		tst.b	0(a0)
000115A4 6700                       		beq.s	locret_10BD4
000115A6 4EF9 0000 82EA             		jmp	(MvSonicOnPtfm2).l
000115AC                            ; ===========================================================================
000115AC                            
000115AC                            locret_10BD4:
000115AC 4E75                       		rts	
000115AE                            ; ===========================================================================
000115AE                            
000115AE                            Obj59_Types:
000115AE 7000                       		moveq	#0,d0
000115B0 1028 0028                  		move.b	$28(a0),d0
000115B4 0240 000F                  		andi.w	#$F,d0
000115B8 D040                       		add.w	d0,d0
000115BA 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000115BE 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000115C2                            ; ===========================================================================
000115C2 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115C6 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115CA 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115CE 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115D2 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000115D6                            ; ===========================================================================
000115D6                            
000115D6                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000115D6 4E75                       		rts	
000115D8                            ; ===========================================================================
000115D8                            
000115D8                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000115D8 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000115DE 6600                       		bne.s	locret_10C0C
000115E0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000115E4                            
000115E4                            locret_10C0C:
000115E4 4E75                       		rts	
000115E6                            ; ===========================================================================
000115E6                            
000115E6                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000115E6 6100 0000                  		bsr.w	Obj59_Move
000115EA 3028 0034                  		move.w	$34(a0),d0
000115EE 4440                       		neg.w	d0
000115F0 D068 0030                  		add.w	$30(a0),d0
000115F4 3140 000C                  		move.w	d0,$C(a0)
000115F8 4E75                       		rts	
000115FA                            ; ===========================================================================
000115FA                            
000115FA                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000115FA 6100 0000                  		bsr.w	Obj59_Move
000115FE 3028 0034                  		move.w	$34(a0),d0
00011602 D068 0030                  		add.w	$30(a0),d0
00011606 3140 000C                  		move.w	d0,$C(a0)
0001160A 4E75                       		rts	
0001160C                            ; ===========================================================================
0001160C                            
0001160C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001160C 6100 0000                  		bsr.w	Obj59_Move
00011610 3028 0034                  		move.w	$34(a0),d0
00011614 E240                       		asr.w	#1,d0
00011616 4440                       		neg.w	d0
00011618 D068 0030                  		add.w	$30(a0),d0
0001161C 3140 000C                  		move.w	d0,$C(a0)
00011620 3028 0034                  		move.w	$34(a0),d0
00011624 D068 0032                  		add.w	$32(a0),d0
00011628 3140 0008                  		move.w	d0,8(a0)
0001162C 4E75                       		rts	
0001162E                            ; ===========================================================================
0001162E                            
0001162E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001162E 6100 0000                  		bsr.w	Obj59_Move
00011632 3028 0034                  		move.w	$34(a0),d0
00011636 E240                       		asr.w	#1,d0
00011638 D068 0030                  		add.w	$30(a0),d0
0001163C 3140 000C                  		move.w	d0,$C(a0)
00011640 3028 0034                  		move.w	$34(a0),d0
00011644 4440                       		neg.w	d0
00011646 D068 0032                  		add.w	$32(a0),d0
0001164A 3140 0008                  		move.w	d0,8(a0)
0001164E 4E75                       		rts	
00011650                            ; ===========================================================================
00011650                            
00011650                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011650 6100 0000                  		bsr.w	Obj59_Move
00011654 3028 0034                  		move.w	$34(a0),d0
00011658 4440                       		neg.w	d0
0001165A D068 0030                  		add.w	$30(a0),d0
0001165E 3140 000C                  		move.w	d0,$C(a0)
00011662 4A28 0028                  		tst.b	$28(a0)
00011666 6700 0000                  		beq.w	loc_10C94
0001166A 4E75                       		rts	
0001166C                            ; ===========================================================================
0001166C                            
0001166C                            loc_10C94:
0001166C 0828 0003 0022             		btst	#3,$22(a0)
00011672 6700                       		beq.s	Obj59_Delete
00011674 08E9 0001 0022             		bset	#1,$22(a1)
0001167A 08A9 0003 0022             		bclr	#3,$22(a1)
00011680 137C 0002 0024             		move.b	#2,$24(a1)
00011686                            
00011686                            Obj59_Delete:
00011686 6000 C9A2                  		bra.w	DeleteObject
0001168A                            
0001168A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001168A                            
0001168A                            
0001168A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001168A 3028 0038                  		move.w	$38(a0),d0
0001168E 4A28 003A                  		tst.b	$3A(a0)
00011692 6600                       		bne.s	loc_10CC8
00011694 0C40 0800                  		cmpi.w	#$800,d0
00011698 6400                       		bcc.s	loc_10CD0
0001169A 0640 0010                  		addi.w	#$10,d0
0001169E 6000                       		bra.s	loc_10CD0
000116A0                            ; ===========================================================================
000116A0                            
000116A0                            loc_10CC8:
000116A0 4A40                       		tst.w	d0
000116A2 6700                       		beq.s	loc_10CD0
000116A4 0440 0010                  		subi.w	#$10,d0
000116A8                            
000116A8                            loc_10CD0:
000116A8 3140 0038                  		move.w	d0,$38(a0)
000116AC 48C0                       		ext.l	d0
000116AE E180                       		asl.l	#8,d0
000116B0 D0A8 0034                  		add.l	$34(a0),d0
000116B4 2140 0034                  		move.l	d0,$34(a0)
000116B8 4840                       		swap	d0
000116BA 3428 003C                  		move.w	$3C(a0),d2
000116BE B042                       		cmp.w	d2,d0
000116C0 6300                       		bls.s	loc_10CF0
000116C2 117C 0001 003A             		move.b	#1,$3A(a0)
000116C8                            
000116C8                            loc_10CF0:
000116C8 D442                       		add.w	d2,d2
000116CA B042                       		cmp.w	d2,d0
000116CC 6600                       		bne.s	locret_10CFA
000116CE 4228 0028                  		clr.b	$28(a0)
000116D2                            
000116D2                            locret_10CFA:
000116D2 4E75                       		rts	
000116D4                            ; End of function Obj59_Move
000116D4                            
000116D4                            ; ===========================================================================
000116D4                            
000116D4                            Obj59_MakeMulti:			; XREF: Obj59_Index
000116D4 5368 003C                  		subq.w	#1,$3C(a0)
000116D8 6600                       		bne.s	Obj59_ChkDel
000116DA 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000116E0 6100 CD92                  		bsr.w	SingleObjLoad
000116E4 6600                       		bne.s	Obj59_ChkDel
000116E6 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000116EA 3368 0008 0008             		move.w	8(a0),8(a1)
000116F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000116F6 137C 000E 0028             		move.b	#$E,$28(a1)
000116FC                            
000116FC                            Obj59_ChkDel:
000116FC 588F                       		addq.l	#4,sp
000116FE 3028 0008                  		move.w	8(a0),d0
00011702 0240 FF80                  		andi.w	#$FF80,d0
00011706 3238 F700                  		move.w	($FFFFF700).w,d1
0001170A 0441 0080                  		subi.w	#$80,d1
0001170E 0241 FF80                  		andi.w	#$FF80,d1
00011712 9041                       		sub.w	d1,d0
00011714 0C40 0280                  		cmpi.w	#$280,d0
00011718 6200 C910                  		bhi.w	DeleteObject
0001171C 4E75                       		rts	
0001171E                            ; ===========================================================================
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            Map_obj59:
0001171E                            	include "_maps\obj59.asm"
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001171E                            ; ---------------------------------------------------------------------------
0001171E 0000                       		dc.w byte_10D4A-Map_obj59
00011720 03                         byte_10D4A:	dc.b 3
00011721 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011726 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001172B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011730                            		even
00011730                            		even
00011730                            
00011730                            ; ===========================================================================
00011730                            ; ---------------------------------------------------------------------------
00011730                            ; Object 5A - platforms	moving in circles (SLZ)
00011730                            ; ---------------------------------------------------------------------------
00011730                            
00011730                            Obj5A:					; XREF: Obj_Index
00011730 7000                       		moveq	#0,d0
00011732 1028 0024                  		move.b	$24(a0),d0
00011736 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001173A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001173E 3028 0032                  		move.w	$32(a0),d0
00011742 0240 FF80                  		andi.w	#$FF80,d0
00011746 3238 F700                  		move.w	($FFFFF700).w,d1
0001174A 0441 0080                  		subi.w	#$80,d1
0001174E 0241 FF80                  		andi.w	#$FF80,d1
00011752 9041                       		sub.w	d1,d0
00011754 0C40 0280                  		cmpi.w	#$280,d0
00011758 6200 C8D0                  		bhi.w	DeleteObject
0001175C 6000 C890                  		bra.w	DisplaySprite
00011760                            ; ===========================================================================
00011760 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011762 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011764 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011766                            ; ===========================================================================
00011766                            
00011766                            Obj5A_Main:				; XREF: Obj5A_Index
00011766 5428 0024                  		addq.b	#2,$24(a0)
0001176A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011772 317C 4000 0002             		move.w	#$4000,2(a0)
00011778 117C 0004 0001             		move.b	#4,1(a0)
0001177E 117C 0004 0018             		move.b	#4,$18(a0)
00011784 117C 0018 0019             		move.b	#$18,$19(a0)
0001178A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011790 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011796                            
00011796                            Obj5A_Platform:				; XREF: Obj5A_Index
00011796 7200                       		moveq	#0,d1
00011798 1228 0019                  		move.b	$19(a0),d1
0001179C 4EB9 0000 7C0C             		jsr	(PlatformObject).l
000117A2 6000 0000                  		bra.w	Obj5A_Types
000117A6                            ; ===========================================================================
000117A6                            
000117A6                            Obj5A_Action:				; XREF: Obj5A_Index
000117A6 7200                       		moveq	#0,d1
000117A8 1228 0019                  		move.b	$19(a0),d1
000117AC 4EB9 0000 7D80             		jsr	(ExitPlatform).l
000117B2 3F28 0008                  		move.w	8(a0),-(sp)
000117B6 6100 0000                  		bsr.w	Obj5A_Types
000117BA 341F                       		move.w	(sp)+,d2
000117BC 4EF9 0000 82EA             		jmp	(MvSonicOnPtfm2).l
000117C2                            ; ===========================================================================
000117C2                            
000117C2                            Obj5A_Types:
000117C2 7000                       		moveq	#0,d0
000117C4 1028 0028                  		move.b	$28(a0),d0
000117C8 0240 000C                  		andi.w	#$C,d0
000117CC E248                       		lsr.w	#1,d0
000117CE 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000117D2 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000117D6                            ; ===========================================================================
000117D6 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000117D8 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000117DA                            ; ===========================================================================
000117DA                            
000117DA                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000117DA 1238 FE80                  		move.b	($FFFFFE80).w,d1
000117DE 0401 0050                  		subi.b	#$50,d1
000117E2 4881                       		ext.w	d1
000117E4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000117E8 0402 0050                  		subi.b	#$50,d2
000117EC 4882                       		ext.w	d2
000117EE 0828 0000 0028             		btst	#0,$28(a0)
000117F4 6700                       		beq.s	loc_10E24
000117F6 4441                       		neg.w	d1
000117F8 4442                       		neg.w	d2
000117FA                            
000117FA                            loc_10E24:
000117FA 0828 0001 0028             		btst	#1,$28(a0)
00011800 6700                       		beq.s	loc_10E30
00011802 4441                       		neg.w	d1
00011804 C342                       		exg	d1,d2
00011806                            
00011806                            loc_10E30:
00011806 D268 0032                  		add.w	$32(a0),d1
0001180A 3141 0008                  		move.w	d1,8(a0)
0001180E D468 0030                  		add.w	$30(a0),d2
00011812 3142 000C                  		move.w	d2,$C(a0)
00011816 4E75                       		rts	
00011818                            ; ===========================================================================
00011818                            
00011818                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011818 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001181C 0401 0050                  		subi.b	#$50,d1
00011820 4881                       		ext.w	d1
00011822 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011826 0402 0050                  		subi.b	#$50,d2
0001182A 4882                       		ext.w	d2
0001182C 0828 0000 0028             		btst	#0,$28(a0)
00011832 6700                       		beq.s	loc_10E62
00011834 4441                       		neg.w	d1
00011836 4442                       		neg.w	d2
00011838                            
00011838                            loc_10E62:
00011838 0828 0001 0028             		btst	#1,$28(a0)
0001183E 6700                       		beq.s	loc_10E6E
00011840 4441                       		neg.w	d1
00011842 C342                       		exg	d1,d2
00011844                            
00011844                            loc_10E6E:
00011844 4441                       		neg.w	d1
00011846 D268 0032                  		add.w	$32(a0),d1
0001184A 3141 0008                  		move.w	d1,8(a0)
0001184E D468 0030                  		add.w	$30(a0),d2
00011852 3142 000C                  		move.w	d2,$C(a0)
00011856 4E75                       		rts	
00011858                            ; ===========================================================================
00011858                            ; ---------------------------------------------------------------------------
00011858                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011858                            ; ---------------------------------------------------------------------------
00011858                            Map_obj5A:
00011858                            	include "_maps\obj5A.asm"
00011858                            ; ---------------------------------------------------------------------------
00011858                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011858                            ; ---------------------------------------------------------------------------
00011858 0000                       		dc.w byte_10E84-Map_obj5A
0001185A 02                         byte_10E84:	dc.b 2
0001185B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011860 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011866 00                         		even
00011866 00                         		even
00011866                            
00011866                            ; ===========================================================================
00011866                            ; ---------------------------------------------------------------------------
00011866                            ; Object 5B - blocks that form a staircase (SLZ)
00011866                            ; ---------------------------------------------------------------------------
00011866                            
00011866                            Obj5B:					; XREF: Obj_Index
00011866 7000                       		moveq	#0,d0
00011868 1028 0024                  		move.b	$24(a0),d0
0001186C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011870 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011874 3028 0030                  		move.w	$30(a0),d0
00011878 0240 FF80                  		andi.w	#$FF80,d0
0001187C 3238 F700                  		move.w	($FFFFF700).w,d1
00011880 0441 0080                  		subi.w	#$80,d1
00011884 0241 FF80                  		andi.w	#$FF80,d1
00011888 9041                       		sub.w	d1,d0
0001188A 0C40 0280                  		cmpi.w	#$280,d0
0001188E 6200 C79A                  		bhi.w	DeleteObject
00011892 6000 C75A                  		bra.w	DisplaySprite
00011896                            ; ===========================================================================
00011896 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011898 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001189A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001189C                            ; ===========================================================================
0001189C                            
0001189C                            Obj5B_Main:				; XREF: Obj5B_Index
0001189C 5428 0024                  		addq.b	#2,$24(a0)
000118A0 7638                       		moveq	#$38,d3
000118A2 7801                       		moveq	#1,d4
000118A4 0828 0000 0022             		btst	#0,$22(a0)
000118AA 6700                       		beq.s	loc_10EDA
000118AC 763B                       		moveq	#$3B,d3
000118AE 78FF                       		moveq	#-1,d4
000118B0                            
000118B0                            loc_10EDA:
000118B0 3428 0008                  		move.w	8(a0),d2
000118B4 2248                       		movea.l	a0,a1
000118B6 7203                       		moveq	#3,d1
000118B8 6000                       		bra.s	Obj5B_MakeBlocks
000118BA                            ; ===========================================================================
000118BA                            
000118BA                            Obj5B_Loop:
000118BA 6100 CBCE                  		bsr.w	SingleObjLoad2
000118BE 6600 0000                  		bne.w	Obj5B_Move
000118C2 137C 0004 0024             		move.b	#4,$24(a1)
000118C8                            
000118C8                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000118C8 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000118CC 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000118D4 337C 4000 0002             		move.w	#$4000,2(a1)
000118DA 137C 0004 0001             		move.b	#4,1(a1)
000118E0 137C 0003 0018             		move.b	#3,$18(a1)
000118E6 137C 0010 0019             		move.b	#$10,$19(a1)
000118EC 1368 0028 0028             		move.b	$28(a0),$28(a1)
000118F2 3342 0008                  		move.w	d2,8(a1)
000118F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000118FC 3368 0008 0030             		move.w	8(a0),$30(a1)
00011902 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011908 0642 0020                  		addi.w	#$20,d2
0001190C 1343 0037                  		move.b	d3,$37(a1)
00011910 2348 003C                  		move.l	a0,$3C(a1)
00011914 D604                       		add.b	d4,d3
00011916 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001191A                            
0001191A                            Obj5B_Move:				; XREF: Obj5B_Index
0001191A 7000                       		moveq	#0,d0
0001191C 1028 0028                  		move.b	$28(a0),d0
00011920 0240 0007                  		andi.w	#7,d0
00011924 D040                       		add.w	d0,d0
00011926 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001192A 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001192E                            
0001192E                            Obj5B_Solid:				; XREF: Obj5B_Index
0001192E 2468 003C                  		movea.l	$3C(a0),a2
00011932 7000                       		moveq	#0,d0
00011934 1028 0037                  		move.b	$37(a0),d0
00011938 1032 0000                  		move.b	(a2,d0.w),d0
0001193C D068 0032                  		add.w	$32(a0),d0
00011940 3140 000C                  		move.w	d0,$C(a0)
00011944 7200                       		moveq	#0,d1
00011946 1228 0019                  		move.b	$19(a0),d1
0001194A 0641 000B                  		addi.w	#$B,d1
0001194E 343C 0010                  		move.w	#$10,d2
00011952 363C 0011                  		move.w	#$11,d3
00011956 3828 0008                  		move.w	8(a0),d4
0001195A 6100 EA62                  		bsr.w	SolidObject
0001195E 4A04                       		tst.b	d4
00011960 6A00                       		bpl.s	loc_10F92
00011962 1544 0036                  		move.b	d4,$36(a2)
00011966                            
00011966                            loc_10F92:
00011966 0828 0003 0022             		btst	#3,$22(a0)
0001196C 6700                       		beq.s	locret_10FA0
0001196E 157C 0001 0036             		move.b	#1,$36(a2)
00011974                            
00011974                            locret_10FA0:
00011974 4E75                       		rts	
00011976                            ; ===========================================================================
00011976 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011978 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001197A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001197C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001197E                            ; ===========================================================================
0001197E                            
0001197E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001197E 4A68 0034                  		tst.w	$34(a0)
00011982 6600                       		bne.s	loc_10FC0
00011984 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001198A 6600                       		bne.s	locret_10FBE
0001198C 317C 001E 0034             		move.w	#$1E,$34(a0)
00011992                            
00011992                            locret_10FBE:
00011992 4E75                       		rts	
00011994                            ; ===========================================================================
00011994                            
00011994                            loc_10FC0:
00011994 5368 0034                  		subq.w	#1,$34(a0)
00011998 66F8                       		bne.s	locret_10FBE
0001199A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001199E 4E75                       		rts	
000119A0                            ; ===========================================================================
000119A0                            
000119A0                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000119A0 4A68 0034                  		tst.w	$34(a0)
000119A4 6600                       		bne.s	loc_10FE0
000119A6 4A28 0036                  		tst.b	$36(a0)
000119AA 6A00                       		bpl.s	locret_10FDE
000119AC 317C 003C 0034             		move.w	#$3C,$34(a0)
000119B2                            
000119B2                            locret_10FDE:
000119B2 4E75                       		rts	
000119B4                            ; ===========================================================================
000119B4                            
000119B4                            loc_10FE0:
000119B4 5368 0034                  		subq.w	#1,$34(a0)
000119B8 6600                       		bne.s	loc_10FEC
000119BA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119BE 4E75                       		rts	
000119C0                            ; ===========================================================================
000119C0                            
000119C0                            loc_10FEC:
000119C0 43E8 0038                  		lea	$38(a0),a1
000119C4 3028 0034                  		move.w	$34(a0),d0
000119C8 E408                       		lsr.b	#2,d0
000119CA 0200 0001                  		andi.b	#1,d0
000119CE 12C0                       		move.b	d0,(a1)+
000119D0 0A00 0001                  		eori.b	#1,d0
000119D4 12C0                       		move.b	d0,(a1)+
000119D6 0A00 0001                  		eori.b	#1,d0
000119DA 12C0                       		move.b	d0,(a1)+
000119DC 0A00 0001                  		eori.b	#1,d0
000119E0 12C0                       		move.b	d0,(a1)+
000119E2 4E75                       		rts	
000119E4                            ; ===========================================================================
000119E4                            
000119E4                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000119E4 43E8 0038                  		lea	$38(a0),a1
000119E8 0C11 0080                  		cmpi.b	#$80,(a1)
000119EC 6700                       		beq.s	locret_11038
000119EE 5211                       		addq.b	#1,(a1)
000119F0 7200                       		moveq	#0,d1
000119F2 1219                       		move.b	(a1)+,d1
000119F4 4841                       		swap	d1
000119F6 E289                       		lsr.l	#1,d1
000119F8 2401                       		move.l	d1,d2
000119FA E289                       		lsr.l	#1,d1
000119FC 2601                       		move.l	d1,d3
000119FE D682                       		add.l	d2,d3
00011A00 4841                       		swap	d1
00011A02 4842                       		swap	d2
00011A04 4843                       		swap	d3
00011A06 12C3                       		move.b	d3,(a1)+
00011A08 12C2                       		move.b	d2,(a1)+
00011A0A 12C1                       		move.b	d1,(a1)+
00011A0C                            
00011A0C                            locret_11038:
00011A0C 4E75                       		rts	
00011A0E 4E75                       		rts	
00011A10                            ; ===========================================================================
00011A10                            ; ---------------------------------------------------------------------------
00011A10                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A10                            ; ---------------------------------------------------------------------------
00011A10                            Map_obj5B:
00011A10                            	include "_maps\obj5B.asm"
00011A10                            ; ---------------------------------------------------------------------------
00011A10                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A10                            ; ---------------------------------------------------------------------------
00011A10 0000                       		dc.w byte_1103E-Map_obj5B
00011A12 01                         byte_1103E:	dc.b 1
00011A13 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A18                            		even
00011A18                            		even
00011A18                            
00011A18                            ; ===========================================================================
00011A18                            ; ---------------------------------------------------------------------------
00011A18                            ; Object 5C - metal girders in foreground (SLZ)
00011A18                            ; ---------------------------------------------------------------------------
00011A18                            
00011A18                            Obj5C:					; XREF: Obj_Index
00011A18 7000                       		moveq	#0,d0
00011A1A 1028 0024                  		move.b	$24(a0),d0
00011A1E 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A22 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A26                            ; ===========================================================================
00011A26 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A28 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A2A                            ; ===========================================================================
00011A2A                            
00011A2A                            Obj5C_Main:				; XREF: Obj5C_Index
00011A2A 5428 0024                  		addq.b	#2,$24(a0)
00011A2E 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011A36 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011A3C 117C 0010 0019             		move.b	#$10,$19(a0)
00011A42                            
00011A42                            Obj5C_Display:				; XREF: Obj5C_Index
00011A42 2238 F700                  		move.l	($FFFFF700).w,d1
00011A46 D281                       		add.l	d1,d1
00011A48 4841                       		swap	d1
00011A4A 4441                       		neg.w	d1
00011A4C 3141 0008                  		move.w	d1,8(a0)
00011A50 2238 F704                  		move.l	($FFFFF704).w,d1
00011A54 D281                       		add.l	d1,d1
00011A56 4841                       		swap	d1
00011A58 0241 003F                  		andi.w	#$3F,d1
00011A5C 4441                       		neg.w	d1
00011A5E 0641 0100                  		addi.w	#$100,d1
00011A62 3141 000A                  		move.w	d1,$A(a0)
00011A66 6000 C586                  		bra.w	DisplaySprite
00011A6A                            ; ===========================================================================
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A                            Map_obj5C:
00011A6A                            	include "_maps\obj5C.asm"
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A 0000                       		dc.w byte_11098-Map_obj5C
00011A6C 09                         byte_11098:	dc.b 9
00011A6D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011A72 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011A77 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011A7C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011A81 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011A86 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011A8B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011A90 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011A95 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011A9A                            		even
00011A9A                            		even
00011A9A                            
00011A9A                            ; ===========================================================================
00011A9A                            ; ---------------------------------------------------------------------------
00011A9A                            ; Object 1B - water surface (LZ)
00011A9A                            ; ---------------------------------------------------------------------------
00011A9A                            
00011A9A                            Obj1B:					; XREF: Obj_Index
00011A9A 7000                       		moveq	#0,d0
00011A9C 1028 0024                  		move.b	$24(a0),d0
00011AA0 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011AA4 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011AA8                            ; ===========================================================================
00011AA8 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011AAA 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011AAC                            ; ===========================================================================
00011AAC                            
00011AAC                            Obj1B_Main:				; XREF: Obj1B_Index
00011AAC 5428 0024                  		addq.b	#2,$24(a0)
00011AB0 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011AB8 317C C300 0002             		move.w	#$C300,2(a0)
00011ABE 117C 0004 0001             		move.b	#4,1(a0)
00011AC4 117C 0080 0019             		move.b	#$80,$19(a0)
00011ACA 3168 0008 0030             		move.w	8(a0),$30(a0)
00011AD0                            
00011AD0                            Obj1B_Action:				; XREF: Obj1B_Index
00011AD0 3238 F700                  		move.w	($FFFFF700).w,d1
00011AD4 0241 FFE0                  		andi.w	#$FFE0,d1
00011AD8 D268 0030                  		add.w	$30(a0),d1
00011ADC 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011AE2 6700                       		beq.s	loc_11114
00011AE4 0641 0020                  		addi.w	#$20,d1
00011AE8                            
00011AE8                            loc_11114:
00011AE8 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011AEC 3238 F646                  		move.w	($FFFFF646).w,d1
00011AF0 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011AF4 4A28 0032                  		tst.b	$32(a0)
00011AF8 6600                       		bne.s	Obj1B_Animate
00011AFA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B00 6700                       		beq.s	loc_1114A	; if not, branch
00011B02 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B06 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B0C 6000                       		bra.s	Obj1B_Display
00011B0E                            ; ===========================================================================
00011B0E                            
00011B0E                            Obj1B_Animate:				; XREF: loc_11114
00011B0E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B12 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B14 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B1A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B1E                            
00011B1E                            loc_1114A:				; XREF: loc_11114
00011B1E 5328 001E                  		subq.b	#1,$1E(a0)
00011B22 6A00                       		bpl.s	Obj1B_Display
00011B24 117C 0007 001E             		move.b	#7,$1E(a0)
00011B2A 5228 001A                  		addq.b	#1,$1A(a0)
00011B2E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B34 6500                       		bcs.s	Obj1B_Display
00011B36 117C 0000 001A             		move.b	#0,$1A(a0)
00011B3C                            
00011B3C                            Obj1B_Display:
00011B3C 6000 C4B0                  		bra.w	DisplaySprite
00011B40                            ; ===========================================================================
00011B40                            ; ---------------------------------------------------------------------------
00011B40                            ; Sprite mappings - water surface (LZ)
00011B40                            ; ---------------------------------------------------------------------------
00011B40                            Map_obj1B:
00011B40                            	include "_maps\obj1B.asm"
00011B40                            ; ---------------------------------------------------------------------------
00011B40                            ; Sprite mappings - water surface (LZ)
00011B40                            ; ---------------------------------------------------------------------------
00011B40 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011B44 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011B48 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011B4C 03                         byte_11178:	dc.b 3
00011B4D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B52 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B57 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011B5C 03                         byte_11188:	dc.b 3
00011B5D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011B62 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011B67 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011B6C 03                         byte_11198:	dc.b 3
00011B6D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011B72 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011B77 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011B7C 06                         byte_111A8:	dc.b 6
00011B7D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B82 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011B87 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B8C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011B91 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011B96 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011B9B 06                         byte_111C7:	dc.b 6
00011B9C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BA1 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011BA6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BAB FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011BB0 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BB5 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011BBA 06                         byte_111E6:	dc.b 6
00011BBB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BC0 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011BC5 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BCA FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011BCF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BD4 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011BDA 00                         		even
00011BDA 00                         		even
00011BDA                            
00011BDA                            ; ===========================================================================
00011BDA                            ; ---------------------------------------------------------------------------
00011BDA                            ; Object 0B - pole that	breaks (LZ)
00011BDA                            ; ---------------------------------------------------------------------------
00011BDA                            
00011BDA                            Obj0B:					; XREF: Obj_Index
00011BDA 7000                       		moveq	#0,d0
00011BDC 1028 0024                  		move.b	$24(a0),d0
00011BE0 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011BE4 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011BE8                            ; ===========================================================================
00011BE8 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011BEA 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011BEC 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011BEE                            ; ===========================================================================
00011BEE                            
00011BEE                            Obj0B_Main:				; XREF: Obj0B_Index
00011BEE 5428 0024                  		addq.b	#2,$24(a0)
00011BF2 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011BFA 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C00 117C 0004 0001             		move.b	#4,1(a0)
00011C06 117C 0008 0019             		move.b	#8,$19(a0)
00011C0C 117C 0004 0018             		move.b	#4,$18(a0)
00011C12 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C18 7000                       		moveq	#0,d0
00011C1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C1E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C22 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C26                            
00011C26                            Obj0B_Action:				; XREF: Obj0B_Index
00011C26 4A28 0032                  		tst.b	$32(a0)
00011C2A 6700                       		beq.s	Obj0B_Grab
00011C2C 4A68 0030                  		tst.w	$30(a0)
00011C30 6700                       		beq.s	Obj0B_MoveUp
00011C32 5368 0030                  		subq.w	#1,$30(a0)
00011C36 6600                       		bne.s	Obj0B_MoveUp
00011C38 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011C3E 6000                       		bra.s	Obj0B_Release
00011C40                            ; ===========================================================================
00011C40                            
00011C40                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011C40 43F8 D000                  		lea	($FFFFD000).w,a1
00011C44 3028 000C                  		move.w	$C(a0),d0
00011C48 0440 0018                  		subi.w	#$18,d0
00011C4C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011C52 6700                       		beq.s	Obj0B_MoveDown
00011C54 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011C58 B069 000C                  		cmp.w	$C(a1),d0
00011C5C 6500                       		bcs.s	Obj0B_MoveDown
00011C5E 3340 000C                  		move.w	d0,$C(a1)
00011C62                            
00011C62                            Obj0B_MoveDown:
00011C62 0640 0024                  		addi.w	#$24,d0
00011C66 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011C6C 6700                       		beq.s	Obj0B_LetGo
00011C6E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011C72 B069 000C                  		cmp.w	$C(a1),d0
00011C76 6400                       		bcc.s	Obj0B_LetGo
00011C78 3340 000C                  		move.w	d0,$C(a1)
00011C7C                            
00011C7C                            Obj0B_LetGo:
00011C7C 1038 F603                  		move.b	($FFFFF603).w,d0
00011C80 0240 0070                  		andi.w	#$70,d0
00011C84 6700                       		beq.s	Obj0B_Display
00011C86                            
00011C86                            Obj0B_Release:				; XREF: Obj0B_Action
00011C86 4228 0020                  		clr.b	$20(a0)
00011C8A 5428 0024                  		addq.b	#2,$24(a0)
00011C8E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011C92 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011C96 4228 0032                  		clr.b	$32(a0)
00011C9A 6000                       		bra.s	Obj0B_Display
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            Obj0B_Grab:				; XREF: Obj0B_Action
00011C9C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011CA0 6700                       		beq.s	Obj0B_Display	; if not, branch
00011CA2 43F8 D000                  		lea	($FFFFD000).w,a1
00011CA6 3028 0008                  		move.w	8(a0),d0
00011CAA 0640 0014                  		addi.w	#$14,d0
00011CAE B069 0008                  		cmp.w	8(a1),d0
00011CB2 6400                       		bcc.s	Obj0B_Display
00011CB4 4228 0021                  		clr.b	$21(a0)
00011CB8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011CBE 6400                       		bcc.s	Obj0B_Display
00011CC0 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011CC4 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011CC8 3028 0008                  		move.w	8(a0),d0
00011CCC 0640 0014                  		addi.w	#$14,d0
00011CD0 3340 0008                  		move.w	d0,8(a1)
00011CD4 08A9 0000 0022             		bclr	#0,$22(a1)
00011CDA 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011CE0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011CE6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011CEC 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011CF2                            
00011CF2                            Obj0B_Display:				; XREF: Obj0B_Index
00011CF2 6000 E3A2                  		bra.w	MarkObjGone
00011CF6                            ; ===========================================================================
00011CF6                            ; ---------------------------------------------------------------------------
00011CF6                            ; Sprite mappings - pole that breaks (LZ)
00011CF6                            ; ---------------------------------------------------------------------------
00011CF6                            Map_obj0B:
00011CF6                            	include "_maps\obj0B.asm"
00011CF6                            ; ---------------------------------------------------------------------------
00011CF6                            ; Sprite mappings - pole that breaks (LZ)
00011CF6                            ; ---------------------------------------------------------------------------
00011CF6 0000                       		dc.w byte_11326-Map_obj0B
00011CF8 0000                       		dc.w byte_11331-Map_obj0B
00011CFA 02                         byte_11326:	dc.b 2			; normal pole
00011CFB E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D00 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D05 04                         byte_11331:	dc.b 4			; broken pole
00011D06 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D0B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D10 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D15 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D1A                            		even
00011D1A                            		even
00011D1A                            
00011D1A                            ; ===========================================================================
00011D1A                            ; ---------------------------------------------------------------------------
00011D1A                            ; Object 0C - flapping door (LZ)
00011D1A                            ; ---------------------------------------------------------------------------
00011D1A                            
00011D1A                            Obj0C:					; XREF: Obj_Index
00011D1A 7000                       		moveq	#0,d0
00011D1C 1028 0024                  		move.b	$24(a0),d0
00011D20 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D24 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D28                            ; ===========================================================================
00011D28 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D2A 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D2C                            ; ===========================================================================
00011D2C                            
00011D2C                            Obj0C_Main:				; XREF: Obj0C_Index
00011D2C 5428 0024                  		addq.b	#2,$24(a0)
00011D30 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011D38 317C 4328 0002             		move.w	#$4328,2(a0)
00011D3E 0028 0004 0001             		ori.b	#4,1(a0)
00011D44 117C 0028 0019             		move.b	#$28,$19(a0)
00011D4A 7000                       		moveq	#0,d0
00011D4C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D50 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D54 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011D58                            
00011D58                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011D58 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D5C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011D5E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011D64 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011D6A 4A28 0001                  		tst.b	1(a0)
00011D6E 6A00                       		bpl.s	Obj0C_Solid
00011D70 303C 00BB                  		move.w	#$BB,d0
00011D74 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00011D7A                            
00011D7A                            Obj0C_Solid:
00011D7A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011D80 6100 92CA                  		bsr.w	AnimateSprite
00011D84 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011D88 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011D8C 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011D8E 3038 D008                  		move.w	($FFFFD008).w,d0
00011D92 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011D96 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011D98 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011D9E 323C 0013                  		move.w	#$13,d1
00011DA2 343C 0020                  		move.w	#$20,d2
00011DA6 3602                       		move.w	d2,d3
00011DA8 5243                       		addq.w	#1,d3
00011DAA 3828 0008                  		move.w	8(a0),d4
00011DAE 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011DB2                            
00011DB2                            Obj0C_Display:
00011DB2 6000 E2E2                  		bra.w	MarkObjGone
00011DB6                            ; ===========================================================================
00011DB6                            Ani_obj0C:
00011DB6                            	include "_anim\obj0C.asm"
00011DB6                            ; ---------------------------------------------------------------------------
00011DB6                            ; Animation script - flapping door (LZ)
00011DB6                            ; ---------------------------------------------------------------------------
00011DB6 0000                       		dc.w byte_113E6-Ani_obj0C
00011DB8 0000                       		dc.w byte_113EC-Ani_obj0C
00011DBA 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011DC0 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011DC6                            		even
00011DC6                            		even
00011DC6                            
00011DC6                            ; ---------------------------------------------------------------------------
00011DC6                            ; Sprite mappings - flapping door (LZ)
00011DC6                            ; ---------------------------------------------------------------------------
00011DC6                            Map_obj0C:
00011DC6                            	include "_maps\obj0C.asm"
00011DC6                            ; ---------------------------------------------------------------------------
00011DC6                            ; Sprite mappings - flapping door (LZ)
00011DC6                            ; ---------------------------------------------------------------------------
00011DC6 0000                       		dc.w byte_113F8-Map_obj0C
00011DC8 0000                       		dc.w byte_11403-Map_obj0C
00011DCA 0000                       		dc.w byte_1140E-Map_obj0C
00011DCC 02                         byte_113F8:	dc.b 2
00011DCD E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011DD2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011DD7 02                         byte_11403:	dc.b 2
00011DD8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011DDD 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011DE2 02                         byte_1140E:	dc.b 2
00011DE3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011DE8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011DEE 00                         		even
00011DEE 00                         		even
00011DEE                            
00011DEE                            ; ===========================================================================
00011DEE                            ; ---------------------------------------------------------------------------
00011DEE                            ; Object 71 - invisible	solid blocks
00011DEE                            ; ---------------------------------------------------------------------------
00011DEE                            
00011DEE                            Obj71:					; XREF: Obj_Index
00011DEE 7000                       		moveq	#0,d0
00011DF0 1028 0024                  		move.b	$24(a0),d0
00011DF4 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011DF8 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011DFC                            ; ===========================================================================
00011DFC 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011DFE 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E00                            ; ===========================================================================
00011E00                            
00011E00                            Obj71_Main:				; XREF: Obj71_Index
00011E00 5428 0024                  		addq.b	#2,$24(a0)
00011E04 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E0C 317C 8680 0002             		move.w	#$8680,2(a0)
00011E12 0028 0004 0001             		ori.b	#4,1(a0)
00011E18 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E1C 1200                       		move.b	d0,d1
00011E1E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E22 0640 0010                  		addi.w	#$10,d0
00011E26 E248                       		lsr.w	#1,d0
00011E28 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E2C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E30 5241                       		addq.w	#1,d1
00011E32 E749                       		lsl.w	#3,d1
00011E34 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011E38                            
00011E38                            Obj71_Solid:				; XREF: Obj71_Index
00011E38 6100 C42E                  		bsr.w	ChkObjOnScreen
00011E3C 6600                       		bne.s	Obj71_ChkDel
00011E3E 7200                       		moveq	#0,d1
00011E40 1228 0019                  		move.b	$19(a0),d1
00011E44 0641 000B                  		addi.w	#$B,d1
00011E48 7400                       		moveq	#0,d2
00011E4A 1428 0016                  		move.b	$16(a0),d2
00011E4E 3602                       		move.w	d2,d3
00011E50 5243                       		addq.w	#1,d3
00011E52 3828 0008                  		move.w	8(a0),d4
00011E56 6100 E5A8                  		bsr.w	SolidObject71
00011E5A                            
00011E5A                            Obj71_ChkDel:
00011E5A 3028 0008                  		move.w	8(a0),d0
00011E5E 0240 FF80                  		andi.w	#$FF80,d0
00011E62 3238 F700                  		move.w	($FFFFF700).w,d1
00011E66 0441 0080                  		subi.w	#$80,d1
00011E6A 0241 FF80                  		andi.w	#$FF80,d1
00011E6E 9041                       		sub.w	d1,d0
00011E70 0C40 0280                  		cmpi.w	#$280,d0
00011E74 6200                       		bhi.s	Obj71_Delete
00011E76 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011E7A 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011E7C 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011E80                            ; ===========================================================================
00011E80                            
00011E80                            Obj71_NoDisplay:
00011E80 4E75                       		rts	
00011E82                            ; ===========================================================================
00011E82                            
00011E82                            Obj71_Delete:
00011E82 4EFA C1A6                  		jmp	DeleteObject
00011E86                            ; ===========================================================================
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            ; Sprite mappings - invisible solid blocks
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            Map_obj71:
00011E86                            	include "_maps\obj71.asm"
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            ; Sprite mappings - invisible solid blocks
00011E86                            ; ---------------------------------------------------------------------------
00011E86 0000                       		dc.w byte_114BC-Map_obj71
00011E88 0000                       		dc.w byte_114D1-Map_obj71
00011E8A 0000                       		dc.w byte_114E6-Map_obj71
00011E8C 04                         byte_114BC:	dc.b 4
00011E8D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011E92 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011E97 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011E9C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011EA1 04                         byte_114D1:	dc.b 4
00011EA2 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011EA7 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011EAC 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011EB1 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011EB6 04                         byte_114E6:	dc.b 4
00011EB7 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011EBC E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011EC1 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011EC6 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011ECC 00                         		even
00011ECC 00                         		even
00011ECC                            
00011ECC                            ; ===========================================================================
00011ECC                            ; ---------------------------------------------------------------------------
00011ECC                            ; Object 5D - fans (SLZ)
00011ECC                            ; ---------------------------------------------------------------------------
00011ECC                            
00011ECC                            Obj5D:					; XREF: Obj_Index
00011ECC 7000                       		moveq	#0,d0
00011ECE 1028 0024                  		move.b	$24(a0),d0
00011ED2 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011ED6 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011EDA                            ; ===========================================================================
00011EDA 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011EDC 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011EDE                            ; ===========================================================================
00011EDE                            
00011EDE                            Obj5D_Main:				; XREF: Obj5D_Index
00011EDE 5428 0024                  		addq.b	#2,$24(a0)
00011EE2 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011EEA 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011EF0 0028 0004 0001             		ori.b	#4,1(a0)
00011EF6 117C 0010 0019             		move.b	#$10,$19(a0)
00011EFC 117C 0004 0018             		move.b	#4,$18(a0)
00011F02                            
00011F02                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F02 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F08 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F0A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F0E 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F10 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F16 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F1C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F1E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F24                            
00011F24                            Obj5D_Blow:
00011F24 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F28 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F2C 43F8 D000                  		lea	($FFFFD000).w,a1
00011F30 3029 0008                  		move.w	8(a1),d0
00011F34 9068 0008                  		sub.w	8(a0),d0
00011F38 0828 0000 0022             		btst	#0,$22(a0)
00011F3E 6600                       		bne.s	Obj5D_ChkSonic
00011F40 4440                       		neg.w	d0
00011F42                            
00011F42                            Obj5D_ChkSonic:
00011F42 0640 0050                  		addi.w	#$50,d0
00011F46 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011F4A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011F4C 3229 000C                  		move.w	$C(a1),d1
00011F50 0641 0060                  		addi.w	#$60,d1
00011F54 9268 000C                  		sub.w	$C(a0),d1
00011F58 6500                       		bcs.s	Obj5D_Animate
00011F5A 0C41 0070                  		cmpi.w	#$70,d1
00011F5E 6400                       		bcc.s	Obj5D_Animate
00011F60 0440 0050                  		subi.w	#$50,d0
00011F64 6400                       		bcc.s	loc_1159A
00011F66 4640                       		not.w	d0
00011F68 D040                       		add.w	d0,d0
00011F6A                            
00011F6A                            loc_1159A:
00011F6A 0640 0060                  		addi.w	#$60,d0
00011F6E 0828 0000 0022             		btst	#0,$22(a0)
00011F74 6600                       		bne.s	loc_115A8
00011F76 4440                       		neg.w	d0
00011F78                            
00011F78                            loc_115A8:
00011F78 4400                       		neg.b	d0
00011F7A E840                       		asr.w	#4,d0
00011F7C 0828 0000 0028             		btst	#0,$28(a0)
00011F82 6700                       		beq.s	Obj5D_MoveSonic
00011F84 4440                       		neg.w	d0
00011F86                            
00011F86                            Obj5D_MoveSonic:
00011F86 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011F8A                            
00011F8A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011F8A 5328 001E                  		subq.b	#1,$1E(a0)
00011F8E 6A00                       		bpl.s	Obj5D_ChkDel
00011F90 117C 0000 001E             		move.b	#0,$1E(a0)
00011F96 5228 001B                  		addq.b	#1,$1B(a0)
00011F9A 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011FA0 6500                       		bcs.s	loc_115D8
00011FA2 117C 0000 001B             		move.b	#0,$1B(a0)
00011FA8                            
00011FA8                            loc_115D8:
00011FA8 7000                       		moveq	#0,d0
00011FAA 0828 0000 0028             		btst	#0,$28(a0)
00011FB0 6700                       		beq.s	loc_115E4
00011FB2 7002                       		moveq	#2,d0
00011FB4                            
00011FB4                            loc_115E4:
00011FB4 D028 001B                  		add.b	$1B(a0),d0
00011FB8 1140 001A                  		move.b	d0,$1A(a0)
00011FBC                            
00011FBC                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011FBC 6100 C030                  		bsr.w	DisplaySprite
00011FC0 3028 0008                  		move.w	8(a0),d0
00011FC4 0240 FF80                  		andi.w	#$FF80,d0
00011FC8 3238 F700                  		move.w	($FFFFF700).w,d1
00011FCC 0441 0080                  		subi.w	#$80,d1
00011FD0 0241 FF80                  		andi.w	#$FF80,d1
00011FD4 9041                       		sub.w	d1,d0
00011FD6 0C40 0280                  		cmpi.w	#$280,d0
00011FDA 6200 C04E                  		bhi.w	DeleteObject
00011FDE 4E75                       		rts	
00011FE0                            ; ===========================================================================
00011FE0                            ; ---------------------------------------------------------------------------
00011FE0                            ; Sprite mappings - fans (SLZ)
00011FE0                            ; ---------------------------------------------------------------------------
00011FE0                            Map_obj5D:
00011FE0                            	include "_maps\obj5D.asm"
00011FE0                            ; ---------------------------------------------------------------------------
00011FE0                            ; Sprite mappings - fans (SLZ)
00011FE0                            ; ---------------------------------------------------------------------------
00011FE0 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011FE4 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011FE8 0000                       		dc.w byte_1161A-Map_obj5D
00011FEA 02                         byte_1161A:	dc.b 2
00011FEB F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011FF0 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011FF5 02                         byte_11625:	dc.b 2
00011FF6 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011FFB 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012000 02                         byte_11630:	dc.b 2
00012001 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012006 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001200C 00                         		even
0001200C 00                         		even
0001200C                            
0001200C                            ; ===========================================================================
0001200C                            ; ---------------------------------------------------------------------------
0001200C                            ; Object 5E - seesaws (SLZ)
0001200C                            ; ---------------------------------------------------------------------------
0001200C                            
0001200C                            Obj5E:					; XREF: Obj_Index
0001200C 7000                       		moveq	#0,d0
0001200E 1028 0024                  		move.b	$24(a0),d0
00012012 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012016 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001201A 3028 0030                  		move.w	$30(a0),d0
0001201E 0240 FF80                  		andi.w	#$FF80,d0
00012022 3238 F700                  		move.w	($FFFFF700).w,d1
00012026 0441 0080                  		subi.w	#$80,d1
0001202A 0241 FF80                  		andi.w	#$FF80,d1
0001202E 9041                       		sub.w	d1,d0
00012030 6B00 BFF8                  		bmi.w	DeleteObject
00012034 0C40 0280                  		cmpi.w	#$280,d0
00012038 6200 BFF0                  		bhi.w	DeleteObject
0001203C 6000 BFB0                  		bra.w	DisplaySprite
00012040                            ; ===========================================================================
00012040 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012042 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012044 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012046 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012048 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001204A 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001204C                            ; ===========================================================================
0001204C                            
0001204C                            Obj5E_Main:				; XREF: Obj5E_Index
0001204C 5428 0024                  		addq.b	#2,$24(a0)
00012050 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012058 317C 0374 0002             		move.w	#$374,2(a0)
0001205E 0028 0004 0001             		ori.b	#4,1(a0)
00012064 117C 0004 0018             		move.b	#4,$18(a0)
0001206A 117C 0030 0019             		move.b	#$30,$19(a0)
00012070 3168 0008 0030             		move.w	8(a0),$30(a0)
00012076 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001207A 6600                       		bne.s	loc_116D2	; if not, branch
0001207C 6100 C40C                  		bsr.w	SingleObjLoad2
00012080 6600                       		bne.s	loc_116D2
00012082 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012086 5C29 0024                  		addq.b	#6,$24(a1)
0001208A 3368 0008 0008             		move.w	8(a0),8(a1)
00012090 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012096 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001209C 2348 003C                  		move.l	a0,$3C(a1)
000120A0                            
000120A0                            loc_116D2:
000120A0 0828 0000 0022             		btst	#0,$22(a0)
000120A6 6700                       		beq.s	loc_116E0
000120A8 117C 0002 001A             		move.b	#2,$1A(a0)
000120AE                            
000120AE                            loc_116E0:
000120AE 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000120B4                            
000120B4                            Obj5E_Slope:				; XREF: Obj5E_Index
000120B4 1228 003A                  		move.b	$3A(a0),d1
000120B8 6100 0000                  		bsr.w	loc_11766
000120BC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000120C2 0828 0000 001A             		btst	#0,$1A(a0)
000120C8 6700                       		beq.s	loc_11702
000120CA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000120D0                            
000120D0                            loc_11702:
000120D0 43F8 D000                  		lea	($FFFFD000).w,a1
000120D4 3169 0012 0038             		move.w	$12(a1),$38(a0)
000120DA 323C 0030                  		move.w	#$30,d1
000120DE 4EB9 0000 7CE0             		jsr	(SlopeObject).l
000120E4 4E75                       		rts	
000120E6                            ; ===========================================================================
000120E6                            
000120E6                            Obj5E_Slope2:				; XREF: Obj5E_Index
000120E6 6100 0000                  		bsr.w	loc_1174A
000120EA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000120F0 0828 0000 001A             		btst	#0,$1A(a0)
000120F6 6700                       		beq.s	loc_11730
000120F8 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000120FE                            
000120FE                            loc_11730:
000120FE 323C 0030                  		move.w	#$30,d1
00012102 4EB9 0000 7D80             		jsr	(ExitPlatform).l
00012108 323C 0030                  		move.w	#$30,d1
0001210C 3428 0008                  		move.w	8(a0),d2
00012110 4EB9 0000 8D70             		jsr	SlopeObject2
00012116 4E75                       		rts	
00012118                            ; ===========================================================================
00012118                            
00012118                            loc_1174A:				; XREF: Obj5E_Slope2
00012118 7202                       		moveq	#2,d1
0001211A 43F8 D000                  		lea	($FFFFD000).w,a1
0001211E 3028 0008                  		move.w	8(a0),d0
00012122 9069 0008                  		sub.w	8(a1),d0
00012126 6400                       		bcc.s	loc_1175E
00012128 4440                       		neg.w	d0
0001212A 7200                       		moveq	#0,d1
0001212C                            
0001212C                            loc_1175E:
0001212C 0C40 0008                  		cmpi.w	#8,d0
00012130 6400                       		bcc.s	loc_11766
00012132 7201                       		moveq	#1,d1
00012134                            
00012134                            loc_11766:
00012134 1028 001A                  		move.b	$1A(a0),d0
00012138 B001                       		cmp.b	d1,d0
0001213A 6700                       		beq.s	locret_11790
0001213C 6400                       		bcc.s	loc_11772
0001213E 5400                       		addq.b	#2,d0
00012140                            
00012140                            loc_11772:
00012140 5300                       		subq.b	#1,d0
00012142 1140 001A                  		move.b	d0,$1A(a0)
00012146 1141 003A                  		move.b	d1,$3A(a0)
0001214A 08A8 0000 0001             		bclr	#0,1(a0)
00012150 0828 0001 001A             		btst	#1,$1A(a0)
00012156 6700                       		beq.s	locret_11790
00012158 08E8 0000 0001             		bset	#0,1(a0)
0001215E                            
0001215E                            locret_11790:
0001215E 4E75                       		rts	
00012160                            ; ===========================================================================
00012160                            
00012160                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00012160 5428 0024                  		addq.b	#2,$24(a0)
00012164 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001216C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00012172 0028 0004 0001             		ori.b	#4,1(a0)
00012178 117C 0004 0018             		move.b	#4,$18(a0)
0001217E 117C 008B 0020             		move.b	#$8B,$20(a0)
00012184 117C 000C 0019             		move.b	#$C,$19(a0)
0001218A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012190 0668 0028 0008             		addi.w	#$28,8(a0)
00012196 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001219C 117C 0001 001A             		move.b	#1,$1A(a0)
000121A2 0828 0000 0022             		btst	#0,$22(a0)
000121A8 6700                       		beq.s	Obj5E_MoveSpike
000121AA 0468 0050 0008             		subi.w	#$50,8(a0)
000121B0 117C 0002 003A             		move.b	#2,$3A(a0)
000121B6                            
000121B6                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000121B6 2268 003C                  		movea.l	$3C(a0),a1
000121BA 7000                       		moveq	#0,d0
000121BC 1028 003A                  		move.b	$3A(a0),d0
000121C0 9029 003A                  		sub.b	$3A(a1),d0
000121C4 6700                       		beq.s	loc_1183E
000121C6 6400                       		bcc.s	loc_117FC
000121C8 4400                       		neg.b	d0
000121CA                            
000121CA                            loc_117FC:
000121CA 323C F7E8                  		move.w	#-$818,d1
000121CE 343C FEEC                  		move.w	#-$114,d2
000121D2 0C00 0001                  		cmpi.b	#1,d0
000121D6 6700                       		beq.s	loc_11822
000121D8 323C F510                  		move.w	#-$AF0,d1
000121DC 343C FF34                  		move.w	#-$CC,d2
000121E0 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000121E6 6D00                       		blt.s	loc_11822
000121E8 323C F200                  		move.w	#-$E00,d1
000121EC 343C FF60                  		move.w	#-$A0,d2
000121F0                            
000121F0                            loc_11822:
000121F0 3141 0012                  		move.w	d1,$12(a0)
000121F4 3142 0010                  		move.w	d2,$10(a0)
000121F8 3028 0008                  		move.w	8(a0),d0
000121FC 9068 0030                  		sub.w	$30(a0),d0
00012200 6400                       		bcc.s	loc_11838
00012202 4468 0010                  		neg.w	$10(a0)
00012206                            
00012206                            loc_11838:
00012206 5428 0024                  		addq.b	#2,$24(a0)
0001220A 6000                       		bra.s	Obj5E_SpikeFall
0001220C                            ; ===========================================================================
0001220C                            
0001220C                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001220C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012212 7000                       		moveq	#0,d0
00012214 1029 001A                  		move.b	$1A(a1),d0
00012218 343C 0028                  		move.w	#$28,d2
0001221C 3228 0008                  		move.w	8(a0),d1
00012220 9268 0030                  		sub.w	$30(a0),d1
00012224 6400                       		bcc.s	loc_1185C
00012226 4442                       		neg.w	d2
00012228 5440                       		addq.w	#2,d0
0001222A                            
0001222A                            loc_1185C:
0001222A D040                       		add.w	d0,d0
0001222C 3228 0034                  		move.w	$34(a0),d1
00012230 D272 0000                  		add.w	(a2,d0.w),d1
00012234 3141 000C                  		move.w	d1,$C(a0)
00012238 D468 0030                  		add.w	$30(a0),d2
0001223C 3142 0008                  		move.w	d2,8(a0)
00012240 4268 000E                  		clr.w	$E(a0)
00012244 4268 000A                  		clr.w	$A(a0)
00012248 4E75                       		rts	
0001224A                            ; ===========================================================================
0001224A                            
0001224A                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001224A 4A68 0012                  		tst.w	$12(a0)
0001224E 6A00                       		bpl.s	loc_1189A
00012250 6100 BD04                  		bsr.w	ObjectFall
00012254 3028 0034                  		move.w	$34(a0),d0
00012258 0440 002F                  		subi.w	#$2F,d0
0001225C B068 000C                  		cmp.w	$C(a0),d0
00012260 6E00                       		bgt.s	locret_11898
00012262 6100 BCF2                  		bsr.w	ObjectFall
00012266                            
00012266                            locret_11898:
00012266 4E75                       		rts	
00012268                            ; ===========================================================================
00012268                            
00012268                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012268 6100 BCEC                  		bsr.w	ObjectFall
0001226C 2268 003C                  		movea.l	$3C(a0),a1
00012270 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012276 7000                       		moveq	#0,d0
00012278 1029 001A                  		move.b	$1A(a1),d0
0001227C 3228 0008                  		move.w	8(a0),d1
00012280 9268 0030                  		sub.w	$30(a0),d1
00012284 6400                       		bcc.s	loc_118BA
00012286 5440                       		addq.w	#2,d0
00012288                            
00012288                            loc_118BA:
00012288 D040                       		add.w	d0,d0
0001228A 3228 0034                  		move.w	$34(a0),d1
0001228E D272 0000                  		add.w	(a2,d0.w),d1
00012292 B268 000C                  		cmp.w	$C(a0),d1
00012296 6E00                       		bgt.s	locret_11938
00012298 2268 003C                  		movea.l	$3C(a0),a1
0001229C 7202                       		moveq	#2,d1
0001229E 4A68 0010                  		tst.w	$10(a0)
000122A2 6B00                       		bmi.s	Obj5E_Spring
000122A4 7200                       		moveq	#0,d1
000122A6                            
000122A6                            Obj5E_Spring:
000122A6 1341 003A                  		move.b	d1,$3A(a1)
000122AA 1141 003A                  		move.b	d1,$3A(a0)
000122AE B229 001A                  		cmp.b	$1A(a1),d1
000122B2 6700                       		beq.s	loc_1192C
000122B4 08A9 0003 0022             		bclr	#3,$22(a1)
000122BA 6700                       		beq.s	loc_1192C
000122BC 4229 0025                  		clr.b	$25(a1)
000122C0 137C 0002 0024             		move.b	#2,$24(a1)
000122C6 45F8 D000                  		lea	($FFFFD000).w,a2
000122CA 3568 0012 0012             		move.w	$12(a0),$12(a2)
000122D0 446A 0012                  		neg.w	$12(a2)
000122D4 08EA 0001 0022             		bset	#1,$22(a2)
000122DA 08AA 0003 0022             		bclr	#3,$22(a2)
000122E0 422A 003C                  		clr.b	$3C(a2)
000122E4 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000122EA 157C 0002 0024             		move.b	#2,$24(a2)
000122F0 303C 00CC                  		move.w	#$CC,d0
000122F4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
000122FA                            
000122FA                            loc_1192C:
000122FA 4268 0010                  		clr.w	$10(a0)
000122FE 4268 0012                  		clr.w	$12(a0)
00012302 5528 0024                  		subq.b	#2,$24(a0)
00012306                            
00012306                            locret_11938:
00012306 4E75                       		rts	
00012308                            ; ===========================================================================
00012308 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012312                            
00012312                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012342                            		even
00012342                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012372                            		even
00012372                            ; ---------------------------------------------------------------------------
00012372                            ; Sprite mappings - seesaws (SLZ)
00012372                            ; ---------------------------------------------------------------------------
00012372                            Map_obj5E:
00012372                            	include "_maps\obj5E.asm"
00012372                            ; ---------------------------------------------------------------------------
00012372                            ; Sprite mappings - seesaws (SLZ)
00012372                            ; ---------------------------------------------------------------------------
00012372 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012376 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001237A 07                         byte_119AC:	dc.b 7
0001237B D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012380 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012385 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001238A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001238F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012394 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012399 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001239E 04                         byte_119D0:	dc.b 4
0001239F E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000123A4 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000123A9 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000123AE E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000123B4 00                         		even
000123B4 00                         		even
000123B4                            
000123B4                            ; ---------------------------------------------------------------------------
000123B4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123B4                            ; ---------------------------------------------------------------------------
000123B4                            Map_obj5Ea:
000123B4                            	include "_maps\obj5Eballs.asm"
000123B4                            ; ---------------------------------------------------------------------------
000123B4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123B4                            ; ---------------------------------------------------------------------------
000123B4 0000                       		dc.w byte_119EA-Map_obj5Ea
000123B6 0000                       		dc.w byte_119F0-Map_obj5Ea
000123B8 01                         byte_119EA:	dc.b 1
000123B9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000123BE 01                         byte_119F0:	dc.b 1
000123BF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000123C4                            		even
000123C4                            		even
000123C4                            
000123C4                            ; ===========================================================================
000123C4                            ; ---------------------------------------------------------------------------
000123C4                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000123C4                            ; ---------------------------------------------------------------------------
000123C4                            
000123C4                            Obj5F:					; XREF: Obj_Index
000123C4 7000                       		moveq	#0,d0
000123C6 1028 0024                  		move.b	$24(a0),d0
000123CA 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000123CE 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000123D2                            ; ===========================================================================
000123D2 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000123D4 0000                       		dc.w Obj5F_Action-Obj5F_Index
000123D6 0000                       		dc.w Obj5F_Display-Obj5F_Index
000123D8 0000                       		dc.w Obj5F_End-Obj5F_Index
000123DA                            ; ===========================================================================
000123DA                            
000123DA                            Obj5F_Main:				; XREF: Obj5F_Index
000123DA 5428 0024                  		addq.b	#2,$24(a0)
000123DE 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000123E6 317C 0400 0002             		move.w	#$400,2(a0)
000123EC 0028 0004 0001             		ori.b	#4,1(a0)
000123F2 117C 0003 0018             		move.b	#3,$18(a0)
000123F8 117C 000C 0019             		move.b	#$C,$19(a0)
000123FE 1028 0028                  		move.b	$28(a0),d0
00012402 6700                       		beq.s	loc_11A3C
00012404 1140 0024                  		move.b	d0,$24(a0)
00012408 4E75                       		rts	
0001240A                            ; ===========================================================================
0001240A                            
0001240A                            loc_11A3C:
0001240A 117C 009A 0020             		move.b	#$9A,$20(a0)
00012410 0868 0000 0022             		bchg	#0,$22(a0)
00012416                            
00012416                            Obj5F_Action:				; XREF: Obj5F_Index
00012416 7000                       		moveq	#0,d0
00012418 1028 0025                  		move.b	$25(a0),d0
0001241C 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012420 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012424 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001242A 6100 8C20                  		bsr.w	AnimateSprite
0001242E 6000 DC66                  		bra.w	MarkObjGone
00012432                            ; ===========================================================================
00012432 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012434 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012436 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012438                            ; ===========================================================================
00012438                            
00012438                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012438 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001243C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012440 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012442 5428 0025                  		addq.b	#2,$25(a0)
00012446 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001244C 317C 0010 0010             		move.w	#$10,$10(a0)
00012452 117C 0001 001C             		move.b	#1,$1C(a0)
00012458 0868 0000 0022             		bchg	#0,$22(a0)
0001245E 6700                       		beq.s	locret_11A96
00012460 4468 0010                  		neg.w	$10(a0)		; change direction
00012464                            
00012464                            locret_11A96:
00012464 4E75                       		rts	
00012466                            ; ===========================================================================
00012466                            
00012466                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012466 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001246A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001246E 6B00                       		bmi.s	loc_11AA8
00012470 6100 BB56                  		bsr.w	SpeedToPos
00012474 4E75                       		rts	
00012476                            ; ===========================================================================
00012476                            
00012476                            loc_11AA8:
00012476 5528 0025                  		subq.b	#2,$25(a0)
0001247A 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012480 4268 0010                  		clr.w	$10(a0)		; stop walking
00012484 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001248A 4E75                       		rts	
0001248C                            ; ===========================================================================
0001248C                            
0001248C                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001248C 5368 0030                  		subq.w	#1,$30(a0)
00012490 6A00                       		bpl.s	locret_11AD0
00012492 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012496 117C 0000 0024             		move.b	#0,$24(a0)
0001249C                            
0001249C                            locret_11AD0:
0001249C 4E75                       		rts	
0001249E                            ; ===========================================================================
0001249E                            
0001249E                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001249E 3038 D008                  		move.w	($FFFFD008).w,d0
000124A2 9068 0008                  		sub.w	8(a0),d0
000124A6 6400                       		bcc.s	loc_11ADE
000124A8 4440                       		neg.w	d0
000124AA                            
000124AA                            loc_11ADE:
000124AA 0C40 0060                  		cmpi.w	#$60,d0
000124AE 6400                       		bcc.s	locret_11B5E
000124B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000124B4 9068 000C                  		sub.w	$C(a0),d0
000124B8 6400                       		bcc.s	Obj5F_MakeFuse
000124BA 4440                       		neg.w	d0
000124BC                            
000124BC                            Obj5F_MakeFuse:
000124BC 0C40 0060                  		cmpi.w	#$60,d0
000124C0 6400                       		bcc.s	locret_11B5E
000124C2 4A78 FE08                  		tst.w	($FFFFFE08).w
000124C6 6600                       		bne.s	locret_11B5E
000124C8 117C 0004 0025             		move.b	#4,$25(a0)
000124CE 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000124D4 4268 0010                  		clr.w	$10(a0)
000124D8 117C 0002 001C             		move.b	#2,$1C(a0)
000124DE 6100 BFAA                  		bsr.w	SingleObjLoad2
000124E2 6600                       		bne.s	locret_11B5E
000124E4 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000124E8 3368 0008 0008             		move.w	8(a0),8(a1)
000124EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000124F4 3368 000C 0034             		move.w	$C(a0),$34(a1)
000124FA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012500 137C 0004 0028             		move.b	#4,$28(a1)
00012506 137C 0003 001C             		move.b	#3,$1C(a1)
0001250C 337C 0010 0012             		move.w	#$10,$12(a1)
00012512 0828 0001 0022             		btst	#1,$22(a0)
00012518 6700                       		beq.s	loc_11B54
0001251A 4469 0012                  		neg.w	$12(a1)
0001251E                            
0001251E                            loc_11B54:
0001251E 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012524 2348 003C                  		move.l	a0,$3C(a1)
00012528                            
00012528                            locret_11B5E:
00012528 4E75                       		rts	
0001252A                            ; ===========================================================================
0001252A                            
0001252A                            Obj5F_Display:				; XREF: Obj5F_Index
0001252A 6100                       		bsr.s	loc_11B70
0001252C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012532 6100 8B18                  		bsr.w	AnimateSprite
00012536 6000 DB5E                  		bra.w	MarkObjGone
0001253A                            ; ===========================================================================
0001253A                            
0001253A                            loc_11B70:
0001253A 5368 0030                  		subq.w	#1,$30(a0)
0001253E 6B00                       		bmi.s	loc_11B7C
00012540 6100 BA86                  		bsr.w	SpeedToPos
00012544 4E75                       		rts	
00012546                            ; ===========================================================================
00012546                            
00012546                            loc_11B7C:
00012546 4268 0030                  		clr.w	$30(a0)
0001254A 4228 0024                  		clr.b	$24(a0)
0001254E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012554 7203                       		moveq	#3,d1
00012556 2248                       		movea.l	a0,a1
00012558 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001255E 6000                       		bra.s	Obj5F_MakeShrap
00012560                            ; ===========================================================================
00012560                            
00012560                            Obj5F_Loop:
00012560 6100 BF28                  		bsr.w	SingleObjLoad2
00012564 6600                       		bne.s	loc_11BCE
00012566                            
00012566                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012566 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001256A 3368 0008 0008             		move.w	8(a0),8(a1)
00012570 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012576 137C 0006 0028             		move.b	#6,$28(a1)
0001257C 137C 0004 001C             		move.b	#4,$1C(a1)
00012582 335A 0010                  		move.w	(a2)+,$10(a1)
00012586 335A 0012                  		move.w	(a2)+,$12(a1)
0001258A 137C 0098 0020             		move.b	#$98,$20(a1)
00012590 08E9 0007 0001             		bset	#7,1(a1)
00012596                            
00012596                            loc_11BCE:
00012596 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001259A                            
0001259A 117C 0006 0024             		move.b	#6,$24(a0)
000125A0                            
000125A0                            Obj5F_End:				; XREF: Obj5F_Index
000125A0 6100 BA26                  		bsr.w	SpeedToPos
000125A4 0668 0018 0012             		addi.w	#$18,$12(a0)
000125AA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000125B0 6100 8A9A                  		bsr.w	AnimateSprite
000125B4 4A28 0001                  		tst.b	1(a0)
000125B8 6A00 BA70                  		bpl.w	DeleteObject
000125BC 6000 BA30                  		bra.w	DisplaySprite
000125C0                            ; ===========================================================================
000125C0 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000125D0                            
000125D0                            Ani_obj5F:
000125D0                            	include "_anim\obj5F.asm"
000125D0                            ; ---------------------------------------------------------------------------
000125D0                            ; Animation script - Bomb enemy
000125D0                            ; ---------------------------------------------------------------------------
000125D0 0000                       		dc.w byte_11C12-Ani_obj5F
000125D2 0000                       		dc.w byte_11C16-Ani_obj5F
000125D4 0000                       		dc.w byte_11C1C-Ani_obj5F
000125D6 0000                       		dc.w byte_11C20-Ani_obj5F
000125D8 0000                       		dc.w byte_11C24-Ani_obj5F
000125DA 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000125DE 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000125E4 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000125E8 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000125EC 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000125F0                            		even
000125F0                            		even
000125F0                            
000125F0                            ; ---------------------------------------------------------------------------
000125F0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000125F0                            ; ---------------------------------------------------------------------------
000125F0                            Map_obj5F:
000125F0                            	include "_maps\obj5F.asm"
000125F0                            ; ---------------------------------------------------------------------------
000125F0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000125F0                            ; ---------------------------------------------------------------------------
000125F0 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000125F4 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000125F8 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000125FC 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012600 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012604 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012608 03                         byte_11C40:	dc.b 3
00012609 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001260E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012613 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012618 03                         byte_11C50:	dc.b 3
00012619 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001261E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012623 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012628 03                         byte_11C60:	dc.b 3
00012629 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001262E 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012633 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012638 03                         byte_11C70:	dc.b 3
00012639 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001263E 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012643 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012648 03                         byte_11C80:	dc.b 3
00012649 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001264E 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012653 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012658 03                         byte_11C90:	dc.b 3
00012659 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001265E 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012663 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012668 02                         byte_11CA0:	dc.b 2
00012669 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001266E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012673 02                         byte_11CAB:	dc.b 2
00012674 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012679 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001267E 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001267F E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012684 01                         byte_11CBC:	dc.b 1			; fuse
00012685 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001268A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001268B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012690 01                         byte_11CC8:	dc.b 1			; fireball
00012691 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012696                            		even
00012696                            		even
00012696                            
00012696                            ; ===========================================================================
00012696                            ; ---------------------------------------------------------------------------
00012696                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012696                            ; ---------------------------------------------------------------------------
00012696                            
00012696                            Obj60:					; XREF: Obj_Index
00012696 7000                       		moveq	#0,d0
00012698 1028 0024                  		move.b	$24(a0),d0
0001269C 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000126A0 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000126A4                            ; ===========================================================================
000126A4 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000126A6 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000126A8 0000                       		dc.w Obj60_Display-Obj60_Index
000126AA 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000126AC 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000126AE                            ; ===========================================================================
000126AE                            
000126AE                            Obj60_Main:				; XREF: Obj60_Index
000126AE 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000126B6 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000126BC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000126C2 6700                       		beq.s	loc_11D02
000126C4 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000126CA                            
000126CA                            loc_11D02:
000126CA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000126D0 6600                       		bne.s	loc_11D10
000126D2 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000126D8                            
000126D8                            loc_11D10:
000126D8 0028 0004 0001             		ori.b	#4,1(a0)
000126DE 117C 0004 0018             		move.b	#4,$18(a0)
000126E4 117C 000B 0020             		move.b	#$B,$20(a0)
000126EA 117C 000C 0019             		move.b	#$C,$19(a0)
000126F0 7400                       		moveq	#0,d2
000126F2 45E8 0037                  		lea	$37(a0),a2
000126F6 264A                       		movea.l	a2,a3
000126F8 524A                       		addq.w	#1,a2
000126FA 7203                       		moveq	#3,d1
000126FC                            
000126FC                            Obj60_MakeOrbs:
000126FC 6100 BD8C                  		bsr.w	SingleObjLoad2
00012700 6600                       		bne.s	loc_11D90
00012702 5213                       		addq.b	#1,(a3)
00012704 3A09                       		move.w	a1,d5
00012706 0445 D000                  		subi.w	#-$3000,d5
0001270A EC4D                       		lsr.w	#6,d5
0001270C 0245 007F                  		andi.w	#$7F,d5
00012710 14C5                       		move.b	d5,(a2)+
00012712 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012714 137C 0006 0024             		move.b	#6,$24(a1)
0001271A 2368 0004 0004             		move.l	4(a0),4(a1)
00012720 3368 0002 0002             		move.w	2(a0),2(a1)
00012726 0029 0004 0001             		ori.b	#4,1(a1)
0001272C 137C 0004 0018             		move.b	#4,$18(a1)
00012732 137C 0008 0019             		move.b	#8,$19(a1)
00012738 137C 0003 001A             		move.b	#3,$1A(a1)
0001273E 137C 0098 0020             		move.b	#$98,$20(a1)
00012744 1342 0026                  		move.b	d2,$26(a1)
00012748 0602 0040                  		addi.b	#$40,d2
0001274C 2348 003C                  		move.l	a0,$3C(a1)
00012750 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012754                            
00012754                            loc_11D90:
00012754 7001                       		moveq	#1,d0
00012756 0828 0000 0022             		btst	#0,$22(a0)
0001275C 6700                       		beq.s	Obj60_Move
0001275E 4440                       		neg.w	d0
00012760                            
00012760                            Obj60_Move:
00012760 1140 0036                  		move.b	d0,$36(a0)
00012764 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001276A 5428 0024                  		addq.b	#2,$24(a0)
0001276E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012774 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001277A 6700                       		beq.s	locret_11DBC	; if not, branch
0001277C 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012780                            
00012780                            locret_11DBC:
00012780 4E75                       		rts	
00012782                            ; ===========================================================================
00012782                            
00012782                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012782 3038 D008                  		move.w	($FFFFD008).w,d0
00012786 9068 0008                  		sub.w	8(a0),d0
0001278A 6400                       		bcc.s	loc_11DCA
0001278C 4440                       		neg.w	d0
0001278E                            
0001278E                            loc_11DCA:
0001278E 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012792 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012794 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012798 9068 000C                  		sub.w	$C(a0),d0
0001279C 6400                       		bcc.s	loc_11DDC
0001279E 4440                       		neg.w	d0
000127A0                            
000127A0                            loc_11DDC:
000127A0 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000127A4 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127A6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000127AA 6600                       		bne.s	Obj60_Animate	; if yes, branch
000127AC 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000127B2                            
000127B2                            Obj60_Animate:
000127B2 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000127B8 6100 8892                  		bsr.w	AnimateSprite
000127BC 6000 0000                  		bra.w	Obj60_ChkDel
000127C0                            ; ===========================================================================
000127C0                            
000127C0                            Obj60_Display:				; XREF: Obj60_Index
000127C0 6100 B806                  		bsr.w	SpeedToPos
000127C4                            
000127C4                            Obj60_ChkDel:				; XREF: Obj60_Animate
000127C4 3028 0008                  		move.w	8(a0),d0
000127C8 0240 FF80                  		andi.w	#$FF80,d0
000127CC 3238 F700                  		move.w	($FFFFF700).w,d1
000127D0 0441 0080                  		subi.w	#$80,d1
000127D4 0241 FF80                  		andi.w	#$FF80,d1
000127D8 9041                       		sub.w	d1,d0
000127DA 0C40 0280                  		cmpi.w	#$280,d0
000127DE 6200 0000                  		bhi.w	Obj60_ChkGone
000127E2 6000 B80A                  		bra.w	DisplaySprite
000127E6                            ; ===========================================================================
000127E6                            
000127E6                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000127E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000127EA 7000                       		moveq	#0,d0
000127EC 1028 0023                  		move.b	$23(a0),d0
000127F0 6700                       		beq.s	loc_11E34
000127F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000127F8                            
000127F8                            loc_11E34:
000127F8 45E8 0037                  		lea	$37(a0),a2
000127FC 7400                       		moveq	#0,d2
000127FE 141A                       		move.b	(a2)+,d2
00012800 5342                       		subq.w	#1,d2
00012802 6500                       		bcs.s	Obj60_Delete
00012804                            
00012804                            loc_11E40:
00012804 7000                       		moveq	#0,d0
00012806 101A                       		move.b	(a2)+,d0
00012808 ED48                       		lsl.w	#6,d0
0001280A 0680 00FF D000             		addi.l	#$FFD000,d0
00012810 2240                       		movea.l	d0,a1
00012812 6100 B818                  		bsr.w	DeleteObject2
00012816 51CA FFEC                  		dbf	d2,loc_11E40
0001281A                            
0001281A                            Obj60_Delete:
0001281A 6000 B80E                  		bra.w	DeleteObject
0001281E                            ; ===========================================================================
0001281E                            
0001281E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001281E 2268 003C                  		movea.l	$3C(a0),a1
00012822 0C11 0060                  		cmpi.b	#$60,0(a1)
00012826 6600 B802                  		bne.w	DeleteObject
0001282A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012830 6600                       		bne.s	Obj60_Circle
00012832 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012838 6600                       		bne.s	Obj60_Circle
0001283A 5428 0024                  		addq.b	#2,$24(a0)
0001283E 5329 0037                  		subq.b	#1,$37(a1)
00012842 6600                       		bne.s	Obj60_FireOrb
00012844 5429 0024                  		addq.b	#2,$24(a1)
00012848                            
00012848                            Obj60_FireOrb:
00012848 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001284E 0829 0000 0022             		btst	#0,$22(a1)
00012854 6700                       		beq.s	Obj60_Display2
00012856 4468 0010                  		neg.w	$10(a0)
0001285A                            
0001285A                            Obj60_Display2:
0001285A 6000 B792                  		bra.w	DisplaySprite
0001285E                            ; ===========================================================================
0001285E                            
0001285E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001285E 1028 0026                  		move.b	$26(a0),d0
00012862 4EB9 0000 2D6C             		jsr	(CalcSine).l
00012868 E841                       		asr.w	#4,d1
0001286A D269 0008                  		add.w	8(a1),d1
0001286E 3141 0008                  		move.w	d1,8(a0)
00012872 E840                       		asr.w	#4,d0
00012874 D069 000C                  		add.w	$C(a1),d0
00012878 3140 000C                  		move.w	d0,$C(a0)
0001287C 1029 0036                  		move.b	$36(a1),d0
00012880 D128 0026                  		add.b	d0,$26(a0)
00012884 6000 B768                  		bra.w	DisplaySprite
00012888                            ; ===========================================================================
00012888                            
00012888                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012888 6100 B73E                  		bsr.w	SpeedToPos
0001288C 4A28 0001                  		tst.b	1(a0)
00012890 6A00 B798                  		bpl.w	DeleteObject
00012894 6000 B758                  		bra.w	DisplaySprite
00012898                            ; ===========================================================================
00012898                            Ani_obj60:
00012898                            	include "_anim\obj60.asm"
00012898                            ; ---------------------------------------------------------------------------
00012898                            ; Animation script - Orbinaut enemy
00012898                            ; ---------------------------------------------------------------------------
00012898 0000                       		dc.w byte_11EDA-Ani_obj60
0001289A 0000                       		dc.w byte_11EDE-Ani_obj60
0001289C 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000128A0 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000128A6                            		even
000128A6                            		even
000128A6                            
000128A6                            ; ---------------------------------------------------------------------------
000128A6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128A6                            ; ---------------------------------------------------------------------------
000128A6                            Map_obj60:
000128A6                            	include "_maps\obj60.asm"
000128A6                            ; ---------------------------------------------------------------------------
000128A6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128A6                            ; ---------------------------------------------------------------------------
000128A6 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000128AA 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000128AE 01                         byte_11EEC:	dc.b 1
000128AF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000128B4 01                         byte_11EF2:	dc.b 1
000128B5 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000128BA 01                         byte_11EF8:	dc.b 1
000128BB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000128C0 01                         byte_11EFE:	dc.b 1
000128C1 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000128C6                            		even
000128C6                            		even
000128C6                            
000128C6                            ; ===========================================================================
000128C6                            ; ---------------------------------------------------------------------------
000128C6                            ; Object 16 - harpoon (LZ)
000128C6                            ; ---------------------------------------------------------------------------
000128C6                            
000128C6                            Obj16:					; XREF: Obj_Index
000128C6 7000                       		moveq	#0,d0
000128C8 1028 0024                  		move.b	$24(a0),d0
000128CC 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000128D0 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000128D4                            ; ===========================================================================
000128D4 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000128D6 0000                       		dc.w Obj16_Move-Obj16_Index
000128D8 0000                       		dc.w Obj16_Wait-Obj16_Index
000128DA                            ; ===========================================================================
000128DA                            
000128DA                            Obj16_Main:				; XREF: Obj16_Index
000128DA 5428 0024                  		addq.b	#2,$24(a0)
000128DE 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000128E6 317C 03CC 0002             		move.w	#$3CC,2(a0)
000128EC 0028 0004 0001             		ori.b	#4,1(a0)
000128F2 117C 0004 0018             		move.b	#4,$18(a0)
000128F8 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000128FE 117C 0014 0019             		move.b	#$14,$19(a0)
00012904 317C 003C 0030             		move.w	#60,$30(a0)
0001290A                            
0001290A                            Obj16_Move:				; XREF: Obj16_Index
0001290A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012910 6100 873A                  		bsr.w	AnimateSprite
00012914 7000                       		moveq	#0,d0
00012916 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001291A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012920 6000 D774                  		bra.w	MarkObjGone
00012924                            ; ===========================================================================
00012924 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001292A                            ; ===========================================================================
0001292A                            
0001292A                            Obj16_Wait:				; XREF: Obj16_Index
0001292A 5368 0030                  		subq.w	#1,$30(a0)
0001292E 6A00                       		bpl.s	Obj16_ChkDel
00012930 317C 003C 0030             		move.w	#60,$30(a0)
00012936 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001293A 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012940                            
00012940                            Obj16_ChkDel:
00012940 6000 D754                  		bra.w	MarkObjGone
00012944                            ; ===========================================================================
00012944                            Ani_obj16:
00012944                            	include "_anim\obj16.asm"
00012944                            ; ---------------------------------------------------------------------------
00012944                            ; Animation script - harpoon (LZ)
00012944                            ; ---------------------------------------------------------------------------
00012944 0000                       		dc.w byte_11F8A-Ani_obj16
00012946 0000                       		dc.w byte_11F8E-Ani_obj16
00012948 0000                       		dc.w byte_11F92-Ani_obj16
0001294A 0000                       		dc.w byte_11F96-Ani_obj16
0001294C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012950 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012954 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012958 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001295C                            		even
0001295C                            		even
0001295C                            
0001295C                            ; ---------------------------------------------------------------------------
0001295C                            ; Sprite mappings - harpoon (LZ)
0001295C                            ; ---------------------------------------------------------------------------
0001295C                            Map_obj16:
0001295C                            	include "_maps\obj16.asm"
0001295C                            ; ---------------------------------------------------------------------------
0001295C                            ; Sprite mappings - harpoon (LZ)
0001295C                            ; ---------------------------------------------------------------------------
0001295C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012960 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012964 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012968 01                         byte_11FA6:	dc.b 1
00012969 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001296E 01                         byte_11FAC:	dc.b 1
0001296F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012974 02                         byte_11FB2:	dc.b 2
00012975 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001297A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001297F 01                         byte_11FBD:	dc.b 1
00012980 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012985 01                         byte_11FC3:	dc.b 1
00012986 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001298B 02                         byte_11FC9:	dc.b 2
0001298C D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012991 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012996                            		even
00012996                            		even
00012996                            
00012996                            ; ===========================================================================
00012996                            ; ---------------------------------------------------------------------------
00012996                            ; Object 61 - blocks (LZ)
00012996                            ; ---------------------------------------------------------------------------
00012996                            
00012996                            Obj61:					; XREF: Obj_Index
00012996 7000                       		moveq	#0,d0
00012998 1028 0024                  		move.b	$24(a0),d0
0001299C 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000129A0 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000129A4                            ; ===========================================================================
000129A4 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000129A6 0000                       		dc.w Obj61_Action-Obj61_Index
000129A8                            
000129A8 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000129AA 200C                       		dc.b $20, $C
000129AC 1010                       		dc.b $10, $10
000129AE 1010                       		dc.b $10, $10
000129B0                            ; ===========================================================================
000129B0                            
000129B0                            Obj61_Main:				; XREF: Obj61_Index
000129B0 5428 0024                  		addq.b	#2,$24(a0)
000129B4 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000129BC 317C 43E6 0002             		move.w	#$43E6,2(a0)
000129C2 117C 0004 0001             		move.b	#4,1(a0)
000129C8 117C 0003 0018             		move.b	#3,$18(a0)
000129CE 7000                       		moveq	#0,d0
000129D0 1028 0028                  		move.b	$28(a0),d0
000129D4 E648                       		lsr.w	#3,d0
000129D6 0240 000E                  		andi.w	#$E,d0
000129DA 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000129DE 115A 0019                  		move.b	(a2)+,$19(a0)
000129E2 1152 0016                  		move.b	(a2),$16(a0)
000129E6 E248                       		lsr.w	#1,d0
000129E8 1140 001A                  		move.b	d0,$1A(a0)
000129EC 3168 0008 0034             		move.w	8(a0),$34(a0)
000129F2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000129F8 1028 0028                  		move.b	$28(a0),d0
000129FC 0200 000F                  		andi.b	#$F,d0
00012A00 6700                       		beq.s	Obj61_Action
00012A02 0C00 0007                  		cmpi.b	#7,d0
00012A06 6700                       		beq.s	Obj61_Action
00012A08 117C 0001 0038             		move.b	#1,$38(a0)
00012A0E                            
00012A0E                            Obj61_Action:				; XREF: Obj61_Index
00012A0E 3F28 0008                  		move.w	8(a0),-(sp)
00012A12 7000                       		moveq	#0,d0
00012A14 1028 0028                  		move.b	$28(a0),d0
00012A18 0240 000F                  		andi.w	#$F,d0
00012A1C D040                       		add.w	d0,d0
00012A1E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A22 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A26 381F                       		move.w	(sp)+,d4
00012A28 4A28 0001                  		tst.b	1(a0)
00012A2C 6A00                       		bpl.s	Obj61_ChkDel
00012A2E 7200                       		moveq	#0,d1
00012A30 1228 0019                  		move.b	$19(a0),d1
00012A34 0641 000B                  		addi.w	#$B,d1
00012A38 7400                       		moveq	#0,d2
00012A3A 1428 0016                  		move.b	$16(a0),d2
00012A3E 3602                       		move.w	d2,d3
00012A40 5243                       		addq.w	#1,d3
00012A42 6100 D97A                  		bsr.w	SolidObject
00012A46 1144 003F                  		move.b	d4,$3F(a0)
00012A4A 6100 0000                  		bsr.w	loc_12180
00012A4E                            
00012A4E                            Obj61_ChkDel:
00012A4E 3028 0034                  		move.w	$34(a0),d0
00012A52 0240 FF80                  		andi.w	#$FF80,d0
00012A56 3238 F700                  		move.w	($FFFFF700).w,d1
00012A5A 0441 0080                  		subi.w	#$80,d1
00012A5E 0241 FF80                  		andi.w	#$FF80,d1
00012A62 9041                       		sub.w	d1,d0
00012A64 0C40 0280                  		cmpi.w	#$280,d0
00012A68 6200 B5C0                  		bhi.w	DeleteObject
00012A6C 6000 B580                  		bra.w	DisplaySprite
00012A70                            ; ===========================================================================
00012A70 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A74 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A78 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012A7C 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012A80                            ; ===========================================================================
00012A80                            
00012A80                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012A80 4E75                       		rts	
00012A82                            ; ===========================================================================
00012A82                            
00012A82                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012A82 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012A86 6600                       		bne.s	loc_120D6	; if yes, branch
00012A88 0828 0003 0022             		btst	#3,$22(a0)
00012A8E 6700                       		beq.s	locret_120D4
00012A90 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012A96                            
00012A96                            locret_120D4:
00012A96 4E75                       		rts	
00012A98                            ; ===========================================================================
00012A98                            
00012A98                            loc_120D6:
00012A98 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012A9C 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012A9E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AA2 4228 0038                  		clr.b	$38(a0)
00012AA6 4E75                       		rts	
00012AA8                            ; ===========================================================================
00012AA8                            
00012AA8                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012AA8 6100 B51E                  		bsr.w	SpeedToPos
00012AAC 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012AB0 6100 0000                  		bsr.w	ObjHitFloor
00012AB4 4A41                       		tst.w	d1
00012AB6 6A00 0000                  		bpl.w	locret_12106
00012ABA 5241                       		addq.w	#1,d1
00012ABC D368 000C                  		add.w	d1,$C(a0)
00012AC0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012AC4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012AC8                            
00012AC8                            locret_12106:
00012AC8 4E75                       		rts	
00012ACA                            ; ===========================================================================
00012ACA                            
00012ACA                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012ACA 6100 B4FC                  		bsr.w	SpeedToPos
00012ACE 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012AD2 6100 0000                  		bsr.w	ObjHitCeiling
00012AD6 4A41                       		tst.w	d1
00012AD8 6A00 0000                  		bpl.w	locret_12126
00012ADC 9368 000C                  		sub.w	d1,$C(a0)
00012AE0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012AE4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012AE8                            
00012AE8                            locret_12126:
00012AE8 4E75                       		rts	
00012AEA                            ; ===========================================================================
00012AEA                            
00012AEA                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012AEA 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012AF0 6600                       		bne.s	locret_12138	; if not, branch
00012AF2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012AF6 4228 0038                  		clr.b	$38(a0)
00012AFA                            
00012AFA                            locret_12138:
00012AFA 4E75                       		rts	
00012AFC                            ; ===========================================================================
00012AFC                            
00012AFC                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012AFC 3038 F646                  		move.w	($FFFFF646).w,d0
00012B00 9068 000C                  		sub.w	$C(a0),d0
00012B04 6700                       		beq.s	locret_1217E
00012B06 6400                       		bcc.s	loc_12162
00012B08 0C40 FFFE                  		cmpi.w	#-2,d0
00012B0C 6C00                       		bge.s	loc_1214E
00012B0E 70FE                       		moveq	#-2,d0
00012B10                            
00012B10                            loc_1214E:
00012B10 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B14 6100 0000                  		bsr.w	ObjHitCeiling
00012B18 4A41                       		tst.w	d1
00012B1A 6A00 0000                  		bpl.w	locret_12160
00012B1E 9368 000C                  		sub.w	d1,$C(a0)
00012B22                            
00012B22                            locret_12160:
00012B22 4E75                       		rts	
00012B24                            ; ===========================================================================
00012B24                            
00012B24                            loc_12162:				; XREF: Obj61_Type07
00012B24 0C40 0002                  		cmpi.w	#2,d0
00012B28 6F00                       		ble.s	loc_1216A
00012B2A 7002                       		moveq	#2,d0
00012B2C                            
00012B2C                            loc_1216A:
00012B2C D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B30 6100 0000                  		bsr.w	ObjHitFloor
00012B34 4A41                       		tst.w	d1
00012B36 6A00 0000                  		bpl.w	locret_1217E
00012B3A 5241                       		addq.w	#1,d1
00012B3C D368 000C                  		add.w	d1,$C(a0)
00012B40                            
00012B40                            locret_1217E:
00012B40 4E75                       		rts	
00012B42                            ; ===========================================================================
00012B42                            
00012B42                            loc_12180:				; XREF: Obj61_Action
00012B42 4A28 0038                  		tst.b	$38(a0)
00012B46 6700                       		beq.s	locret_121C0
00012B48 0828 0003 0022             		btst	#3,$22(a0)
00012B4E 6600                       		bne.s	loc_1219A
00012B50 4A28 003E                  		tst.b	$3E(a0)
00012B54 6700                       		beq.s	locret_121C0
00012B56 5928 003E                  		subq.b	#4,$3E(a0)
00012B5A 6000                       		bra.s	loc_121A6
00012B5C                            ; ===========================================================================
00012B5C                            
00012B5C                            loc_1219A:
00012B5C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012B62 6700                       		beq.s	locret_121C0
00012B64 5828 003E                  		addq.b	#4,$3E(a0)
00012B68                            
00012B68                            loc_121A6:
00012B68 1028 003E                  		move.b	$3E(a0),d0
00012B6C 4EB9 0000 2D6C             		jsr	(CalcSine).l
00012B72 323C 0400                  		move.w	#$400,d1
00012B76 C1C1                       		muls.w	d1,d0
00012B78 4840                       		swap	d0
00012B7A D068 0030                  		add.w	$30(a0),d0
00012B7E 3140 000C                  		move.w	d0,$C(a0)
00012B82                            
00012B82                            locret_121C0:
00012B82 4E75                       		rts	
00012B84                            ; ===========================================================================
00012B84                            ; ---------------------------------------------------------------------------
00012B84                            ; Sprite mappings - blocks (LZ)
00012B84                            ; ---------------------------------------------------------------------------
00012B84                            Map_obj61:
00012B84                            	include "_maps\obj61.asm"
00012B84                            ; ---------------------------------------------------------------------------
00012B84                            ; Sprite mappings - blocks (LZ)
00012B84                            ; ---------------------------------------------------------------------------
00012B84 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012B88 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012B8C 01                         byte_121CA:	dc.b 1
00012B8D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012B92 02                         byte_121D0:	dc.b 2
00012B93 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012B98 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012B9D 01                         byte_121DB:	dc.b 1
00012B9E F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012BA3 01                         byte_121E1:	dc.b 1
00012BA4 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012BAA 00                         		even
00012BAA 00                         		even
00012BAA                            
00012BAA                            ; ===========================================================================
00012BAA                            ; ---------------------------------------------------------------------------
00012BAA                            ; Object 62 - gargoyle head (LZ)
00012BAA                            ; ---------------------------------------------------------------------------
00012BAA                            
00012BAA                            Obj62:					; XREF: Obj_Index
00012BAA 7000                       		moveq	#0,d0
00012BAC 1028 0024                  		move.b	$24(a0),d0
00012BB0 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012BB4 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012BB8 6000 D4DC                  		bra.w	MarkObjGone
00012BBC                            ; ===========================================================================
00012BBC 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012BBE 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012BC0 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012BC2 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012BC4                            
00012BC4 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012BCC                            ; ===========================================================================
00012BCC                            
00012BCC                            Obj62_Main:				; XREF: Obj62_Index
00012BCC 5428 0024                  		addq.b	#2,$24(a0)
00012BD0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012BD8 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012BDE 0028 0004 0001             		ori.b	#4,1(a0)
00012BE4 117C 0003 0018             		move.b	#3,$18(a0)
00012BEA 117C 0010 0019             		move.b	#$10,$19(a0)
00012BF0 1028 0028                  		move.b	$28(a0),d0	; get object type
00012BF4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012BF8 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012BFE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C04 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C0A                            
00012C0A                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C0A 5328 001E                  		subq.b	#1,$1E(a0)
00012C0E 6600                       		bne.s	Obj62_NoFire
00012C10 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C16 6100 B650                  		bsr.w	ChkObjOnScreen
00012C1A 6600                       		bne.s	Obj62_NoFire
00012C1C 6100 B856                  		bsr.w	SingleObjLoad
00012C20 6600                       		bne.s	Obj62_NoFire
00012C22 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C26 5829 0024                  		addq.b	#4,$24(a1)
00012C2A 3368 0008 0008             		move.w	8(a0),8(a1)
00012C30 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C36 1368 0001 0001             		move.b	1(a0),1(a1)
00012C3C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C42                            
00012C42                            Obj62_NoFire:
00012C42 4E75                       		rts	
00012C44                            ; ===========================================================================
00012C44                            
00012C44                            Obj62_FireBall:				; XREF: Obj62_Index
00012C44 5428 0024                  		addq.b	#2,$24(a0)
00012C48 117C 0008 0016             		move.b	#8,$16(a0)
00012C4E 117C 0008 0017             		move.b	#8,$17(a0)
00012C54 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C5C 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012C62 0028 0004 0001             		ori.b	#4,1(a0)
00012C68 117C 0004 0018             		move.b	#4,$18(a0)
00012C6E 117C 0098 0020             		move.b	#$98,$20(a0)
00012C74 117C 0008 0019             		move.b	#8,$19(a0)
00012C7A 117C 0002 001A             		move.b	#2,$1A(a0)
00012C80 5068 000C                  		addq.w	#8,$C(a0)
00012C84 317C 0200 0010             		move.w	#$200,$10(a0)
00012C8A 0828 0000 0022             		btst	#0,$22(a0)
00012C90 6600                       		bne.s	Obj62_Sound
00012C92 4468 0010                  		neg.w	$10(a0)
00012C96                            
00012C96                            Obj62_Sound:
00012C96 303C 00AE                  		move.w	#$AE,d0
00012C9A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012CA0                            
00012CA0                            Obj62_AniFire:				; XREF: Obj62_Index
00012CA0 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012CA4 0200 0007                  		andi.b	#7,d0
00012CA8 6600                       		bne.s	Obj62_StopFire
00012CAA 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012CB0                            
00012CB0                            Obj62_StopFire:
00012CB0 6100 B316                  		bsr.w	SpeedToPos
00012CB4 0828 0000 0022             		btst	#0,$22(a0)
00012CBA 6600                       		bne.s	Obj62_StopFire2
00012CBC 76F8                       		moveq	#-8,d3
00012CBE 6100 0000                  		bsr.w	ObjHitWallLeft
00012CC2 4A41                       		tst.w	d1
00012CC4 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012CC8 4E75                       		rts	
00012CCA                            ; ===========================================================================
00012CCA                            
00012CCA                            Obj62_StopFire2:
00012CCA 7608                       		moveq	#8,d3
00012CCC 6100 0000                  		bsr.w	ObjHitWallRight
00012CD0 4A41                       		tst.w	d1
00012CD2 6B00 B356                  		bmi.w	DeleteObject
00012CD6 4E75                       		rts	
00012CD8                            ; ===========================================================================
00012CD8                            ; ---------------------------------------------------------------------------
00012CD8                            ; Sprite mappings - gargoyle head (LZ)
00012CD8                            ; ---------------------------------------------------------------------------
00012CD8                            Map_obj62:
00012CD8                            	include "_maps\obj62.asm"
00012CD8                            ; ---------------------------------------------------------------------------
00012CD8                            ; Sprite mappings - gargoyle head (LZ)
00012CD8                            ; ---------------------------------------------------------------------------
00012CD8 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012CDC 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012CE0 03                         byte_12320:	dc.b 3
00012CE1 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012CE6 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012CEB 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012CF0 01                         byte_12330:	dc.b 1
00012CF1 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012CF6 01                         byte_12336:	dc.b 1
00012CF7 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012CFC                            		even
00012CFC                            		even
00012CFC                            
00012CFC                            ; ===========================================================================
00012CFC                            ; ---------------------------------------------------------------------------
00012CFC                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012CFC                            ; ---------------------------------------------------------------------------
00012CFC                            
00012CFC                            Obj63:					; XREF: Obj_Index
00012CFC 7000                       		moveq	#0,d0
00012CFE 1028 0024                  		move.b	$24(a0),d0
00012D02 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D06 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D0A 3028 0030                  		move.w	$30(a0),d0
00012D0E 0240 FF80                  		andi.w	#$FF80,d0
00012D12 3238 F700                  		move.w	($FFFFF700).w,d1
00012D16 0441 0080                  		subi.w	#$80,d1
00012D1A 0241 FF80                  		andi.w	#$FF80,d1
00012D1E 9041                       		sub.w	d1,d0
00012D20 0C40 0280                  		cmpi.w	#$280,d0
00012D24 6200                       		bhi.s	loc_1236A
00012D26                            
00012D26                            Obj63_Display:				; XREF: loc_1236A
00012D26 6000 B2C6                  		bra.w	DisplaySprite
00012D2A                            ; ===========================================================================
00012D2A                            
00012D2A                            loc_1236A:				; XREF: Obj63
00012D2A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D30 6600                       		bne.s	loc_12378
00012D32 0C40 FF80                  		cmpi.w	#-$80,d0
00012D36 64EE                       		bcc.s	Obj63_Display
00012D38                            
00012D38                            loc_12378:
00012D38 1028 002F                  		move.b	$2F(a0),d0
00012D3C 6A00 B2EC                  		bpl.w	DeleteObject
00012D40 0240 007F                  		andi.w	#$7F,d0
00012D44 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012D48 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012D4E 6000 B2DA                  		bra.w	DeleteObject
00012D52                            ; ===========================================================================
00012D52 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012D54 0000                       		dc.w loc_124B2-Obj63_Index
00012D56 0000                       		dc.w loc_124C2-Obj63_Index
00012D58 0000                       		dc.w loc_124DE-Obj63_Index
00012D5A                            ; ===========================================================================
00012D5A                            
00012D5A                            Obj63_Main:				; XREF: Obj63_Index
00012D5A 1028 0028                  		move.b	$28(a0),d0
00012D5E 6B00 0000                  		bmi.w	loc_12460
00012D62 5428 0024                  		addq.b	#2,$24(a0)
00012D66 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012D6E 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012D74 0028 0004 0001             		ori.b	#4,1(a0)
00012D7A 117C 0010 0019             		move.b	#$10,$19(a0)
00012D80 117C 0004 0018             		move.b	#4,$18(a0)
00012D86 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012D8C 6600                       		bne.s	loc_123E2
00012D8E 5828 0024                  		addq.b	#4,$24(a0)
00012D92 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012D98 117C 0001 0018             		move.b	#1,$18(a0)
00012D9E 6000 0000                  		bra.w	loc_124DE
00012DA2                            ; ===========================================================================
00012DA2                            
00012DA2                            loc_123E2:
00012DA2 117C 0004 001A             		move.b	#4,$1A(a0)
00012DA8 7000                       		moveq	#0,d0
00012DAA 1028 0028                  		move.b	$28(a0),d0
00012DAE 3200                       		move.w	d0,d1
00012DB0 E648                       		lsr.w	#3,d0
00012DB2 0240 001E                  		andi.w	#$1E,d0
00012DB6 45FA 0000                  		lea	Obj63_Data(pc),a2
00012DBA D4F2 0000                  		adda.w	(a2,d0.w),a2
00012DBE 315A 0038                  		move.w	(a2)+,$38(a0)
00012DC2 315A 0030                  		move.w	(a2)+,$30(a0)
00012DC6 214A 003C                  		move.l	a2,$3C(a0)
00012DCA 0241 000F                  		andi.w	#$F,d1
00012DCE E549                       		lsl.w	#2,d1
00012DD0 1141 0038                  		move.b	d1,$38(a0)
00012DD4 117C 0004 003A             		move.b	#4,$3A(a0)
00012DDA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012DDE 6700                       		beq.s	loc_1244C
00012DE0 117C 0001 003B             		move.b	#1,$3B(a0)
00012DE6 4428 003A                  		neg.b	$3A(a0)
00012DEA 7200                       		moveq	#0,d1
00012DEC 1228 0038                  		move.b	$38(a0),d1
00012DF0 D228 003A                  		add.b	$3A(a0),d1
00012DF4 B228 0039                  		cmp.b	$39(a0),d1
00012DF8 6500                       		bcs.s	loc_12448
00012DFA 1001                       		move.b	d1,d0
00012DFC 7200                       		moveq	#0,d1
00012DFE 4A00                       		tst.b	d0
00012E00 6A00                       		bpl.s	loc_12448
00012E02 1228 0039                  		move.b	$39(a0),d1
00012E06 5901                       		subq.b	#4,d1
00012E08                            
00012E08                            loc_12448:
00012E08 1141 0038                  		move.b	d1,$38(a0)
00012E0C                            
00012E0C                            loc_1244C:
00012E0C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E12 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E18 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E1C 6000 0000                  		bra.w	loc_124B2
00012E20                            ; ===========================================================================
00012E20                            
00012E20                            loc_12460:				; XREF: Obj63_Main
00012E20 1140 002F                  		move.b	d0,$2F(a0)
00012E24 0240 007F                  		andi.w	#$7F,d0
00012E28 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E2C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E32 6600 B1F6                  		bne.w	DeleteObject
00012E36 D040                       		add.w	d0,d0
00012E38 0240 001E                  		andi.w	#$1E,d0
00012E3C 0640 0070                  		addi.w	#$70,d0
00012E40 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012E46 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E4A 321A                       		move.w	(a2)+,d1
00012E4C 2248                       		movea.l	a0,a1
00012E4E 6000                       		bra.s	Obj63_MakePtfms
00012E50                            ; ===========================================================================
00012E50                            
00012E50                            Obj63_Loop:
00012E50 6100 B622                  		bsr.w	SingleObjLoad
00012E54 6600                       		bne.s	loc_124AA
00012E56                            
00012E56                            Obj63_MakePtfms:			; XREF: loc_12460
00012E56 12BC 0063                  		move.b	#$63,0(a1)
00012E5A 335A 0008                  		move.w	(a2)+,8(a1)
00012E5E 335A 000C                  		move.w	(a2)+,$C(a1)
00012E62 301A                       		move.w	(a2)+,d0
00012E64 1340 0028                  		move.b	d0,$28(a1)
00012E68                            
00012E68                            loc_124AA:
00012E68 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012E6C                            
00012E6C 588F                       		addq.l	#4,sp
00012E6E 4E75                       		rts	
00012E70                            ; ===========================================================================
00012E70                            
00012E70                            loc_124B2:				; XREF: Obj63_Index
00012E70 7200                       		moveq	#0,d1
00012E72 1228 0019                  		move.b	$19(a0),d1
00012E76 4EB9 0000 7C0C             		jsr	(PlatformObject).l
00012E7C 6000 0000                  		bra.w	sub_12502
00012E80                            ; ===========================================================================
00012E80                            
00012E80                            loc_124C2:				; XREF: Obj63_Index
00012E80 7200                       		moveq	#0,d1
00012E82 1228 0019                  		move.b	$19(a0),d1
00012E86 4EB9 0000 7D80             		jsr	(ExitPlatform).l
00012E8C 3F28 0008                  		move.w	8(a0),-(sp)
00012E90 6100 0000                  		bsr.w	sub_12502
00012E94 341F                       		move.w	(sp)+,d2
00012E96 4EF9 0000 82EA             		jmp	(MvSonicOnPtfm2).l
00012E9C                            ; ===========================================================================
00012E9C                            
00012E9C                            loc_124DE:				; XREF: Obj63_Index
00012E9C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012EA0 0240 0003                  		andi.w	#3,d0
00012EA4 6600                       		bne.s	loc_124FC
00012EA6 7201                       		moveq	#1,d1
00012EA8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012EAC 6700                       		beq.s	loc_124F2
00012EAE 4401                       		neg.b	d1
00012EB0                            
00012EB0                            loc_124F2:
00012EB0 D328 001A                  		add.b	d1,$1A(a0)
00012EB4 0228 0003 001A             		andi.b	#3,$1A(a0)
00012EBA                            
00012EBA                            loc_124FC:
00012EBA 588F                       		addq.l	#4,sp
00012EBC 6000 D1D8                  		bra.w	MarkObjGone
00012EC0                            
00012EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EC0                            
00012EC0                            
00012EC0                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012EC0 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012EC4 6700                       		beq.s	loc_12520
00012EC6 4A28 003B                  		tst.b	$3B(a0)
00012ECA 6600                       		bne.s	loc_12520
00012ECC 117C 0001 003B             		move.b	#1,$3B(a0)
00012ED2 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012ED8 4428 003A                  		neg.b	$3A(a0)
00012EDC 6000                       		bra.s	loc_12534
00012EDE                            ; ===========================================================================
00012EDE                            
00012EDE                            loc_12520:
00012EDE 3028 0008                  		move.w	8(a0),d0
00012EE2 B068 0034                  		cmp.w	$34(a0),d0
00012EE6 6600                       		bne.s	loc_1256A
00012EE8 3028 000C                  		move.w	$C(a0),d0
00012EEC B068 0036                  		cmp.w	$36(a0),d0
00012EF0 6600                       		bne.s	loc_1256A
00012EF2                            
00012EF2                            loc_12534:
00012EF2 7200                       		moveq	#0,d1
00012EF4 1228 0038                  		move.b	$38(a0),d1
00012EF8 D228 003A                  		add.b	$3A(a0),d1
00012EFC B228 0039                  		cmp.b	$39(a0),d1
00012F00 6500                       		bcs.s	loc_12552
00012F02 1001                       		move.b	d1,d0
00012F04 7200                       		moveq	#0,d1
00012F06 4A00                       		tst.b	d0
00012F08 6A00                       		bpl.s	loc_12552
00012F0A 1228 0039                  		move.b	$39(a0),d1
00012F0E 5901                       		subq.b	#4,d1
00012F10                            
00012F10                            loc_12552:
00012F10 1141 0038                  		move.b	d1,$38(a0)
00012F14 2268 003C                  		movea.l	$3C(a0),a1
00012F18 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F1E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F24 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F28                            
00012F28                            loc_1256A:
00012F28 6100 B09E                  		bsr.w	SpeedToPos
00012F2C 4E75                       		rts	
00012F2E                            ; End of function sub_12502
00012F2E                            
00012F2E                            
00012F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F2E                            
00012F2E                            
00012F2E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F2E 7000                       		moveq	#0,d0
00012F30 343C FF00                  		move.w	#-$100,d2
00012F34 3028 0008                  		move.w	8(a0),d0
00012F38 9068 0034                  		sub.w	$34(a0),d0
00012F3C 6400                       		bcc.s	loc_12584
00012F3E 4440                       		neg.w	d0
00012F40 4442                       		neg.w	d2
00012F42                            
00012F42                            loc_12584:
00012F42 7200                       		moveq	#0,d1
00012F44 363C FF00                  		move.w	#-$100,d3
00012F48 3228 000C                  		move.w	$C(a0),d1
00012F4C 9268 0036                  		sub.w	$36(a0),d1
00012F50 6400                       		bcc.s	loc_12598
00012F52 4441                       		neg.w	d1
00012F54 4443                       		neg.w	d3
00012F56                            
00012F56                            loc_12598:
00012F56 B240                       		cmp.w	d0,d1
00012F58 6500                       		bcs.s	loc_125C2
00012F5A 3028 0008                  		move.w	8(a0),d0
00012F5E 9068 0034                  		sub.w	$34(a0),d0
00012F62 6700                       		beq.s	loc_125AE
00012F64 48C0                       		ext.l	d0
00012F66 E180                       		asl.l	#8,d0
00012F68 81C1                       		divs.w	d1,d0
00012F6A 4440                       		neg.w	d0
00012F6C                            
00012F6C                            loc_125AE:
00012F6C 3140 0010                  		move.w	d0,$10(a0)
00012F70 3143 0012                  		move.w	d3,$12(a0)
00012F74 4840                       		swap	d0
00012F76 3140 000A                  		move.w	d0,$A(a0)
00012F7A 4268 000E                  		clr.w	$E(a0)
00012F7E 4E75                       		rts	
00012F80                            ; ===========================================================================
00012F80                            
00012F80                            loc_125C2:				; XREF: Obj63_ChangeDir
00012F80 3228 000C                  		move.w	$C(a0),d1
00012F84 9268 0036                  		sub.w	$36(a0),d1
00012F88 6700                       		beq.s	loc_125D4
00012F8A 48C1                       		ext.l	d1
00012F8C E181                       		asl.l	#8,d1
00012F8E 83C0                       		divs.w	d0,d1
00012F90 4441                       		neg.w	d1
00012F92                            
00012F92                            loc_125D4:
00012F92 3141 0012                  		move.w	d1,$12(a0)
00012F96 3142 0010                  		move.w	d2,$10(a0)
00012F9A 4841                       		swap	d1
00012F9C 3141 000E                  		move.w	d1,$E(a0)
00012FA0 4268 000A                  		clr.w	$A(a0)
00012FA4 4E75                       		rts	
00012FA6                            ; End of function Obj63_ChangeDir
00012FA6                            
00012FA6                            ; ===========================================================================
00012FA6 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012FA8 0000                       		dc.w word_12610-Obj63_Data
00012FAA 0000                       		dc.w word_12628-Obj63_Data
00012FAC 0000                       		dc.w word_1263C-Obj63_Data
00012FAE 0000                       		dc.w word_12650-Obj63_Data
00012FB0 0000                       		dc.w word_12668-Obj63_Data
00012FB2 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012FC2 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012FCE 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012FDE 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012FE6 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012FFA 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001300E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013026 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001303A                            
0001303A                            ; ---------------------------------------------------------------------------
0001303A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001303A                            ; ---------------------------------------------------------------------------
0001303A                            Map_obj63:
0001303A                            	include "_maps\obj63.asm"
0001303A                            ; ---------------------------------------------------------------------------
0001303A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001303A                            ; ---------------------------------------------------------------------------
0001303A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001303E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013042 0000                       		dc.w byte_1269E-Map_obj63
00013044 01                         byte_12686:	dc.b 1
00013045 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001304A 01                         byte_1268C:	dc.b 1
0001304B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013050 01                         byte_12692:	dc.b 1
00013051 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013056 01                         byte_12698:	dc.b 1
00013057 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001305C 01                         byte_1269E:	dc.b 1
0001305D F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013062                            		even
00013062                            		even
00013062                            
00013062                            ; ===========================================================================
00013062                            ; ---------------------------------------------------------------------------
00013062                            ; Object 64 - bubbles (LZ)
00013062                            ; ---------------------------------------------------------------------------
00013062                            
00013062                            Obj64:					; XREF: Obj_Index
00013062 7000                       		moveq	#0,d0
00013064 1028 0024                  		move.b	$24(a0),d0
00013068 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001306C 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013070                            ; ===========================================================================
00013070 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00013072 0000                       		dc.w Obj64_Animate-Obj64_Index
00013074 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013076 0000                       		dc.w Obj64_Display2-Obj64_Index
00013078 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001307A 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001307C                            ; ===========================================================================
0001307C                            
0001307C                            Obj64_Main:				; XREF: Obj64_Index
0001307C 5428 0024                  		addq.b	#2,$24(a0)
00013080 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013088 317C 8348 0002             		move.w	#$8348,2(a0)
0001308E 117C 0084 0001             		move.b	#$84,1(a0)
00013094 117C 0010 0019             		move.b	#$10,$19(a0)
0001309A 117C 0001 0018             		move.b	#1,$18(a0)
000130A0 1028 0028                  		move.b	$28(a0),d0	; get object type
000130A4 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000130A6 5028 0024                  		addq.b	#8,$24(a0)
000130AA 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000130AE 1140 0032                  		move.b	d0,$32(a0)
000130B2 1140 0033                  		move.b	d0,$33(a0)
000130B6 117C 0006 001C             		move.b	#6,$1C(a0)
000130BC 6000 0000                  		bra.w	Obj64_BblMaker
000130C0                            ; ===========================================================================
000130C0                            
000130C0                            Obj64_Bubble:				; XREF: Obj64_Main
000130C0 1140 001C                  		move.b	d0,$1C(a0)
000130C4 3168 0008 0030             		move.w	8(a0),$30(a0)
000130CA 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000130D0 4EB9 0000 2D46             		jsr	(RandomNumber).l
000130D6 1140 0026                  		move.b	d0,$26(a0)
000130DA                            
000130DA                            Obj64_Animate:				; XREF: Obj64_Index
000130DA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130E0 4EB9 0000 B04C             		jsr	AnimateSprite
000130E6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000130EC 6600                       		bne.s	Obj64_ChkWater
000130EE 117C 0001 002E             		move.b	#1,$2E(a0)
000130F4                            
000130F4                            Obj64_ChkWater:				; XREF: Obj64_Index
000130F4 3038 F646                  		move.w	($FFFFF646).w,d0
000130F8 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000130FC 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000130FE                            
000130FE                            Obj64_Burst:				; XREF: Obj64_Wobble
000130FE 117C 0006 0024             		move.b	#6,$24(a0)
00013104 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013108 6000 0000                  		bra.w	Obj64_Display2
0001310C                            ; ===========================================================================
0001310C                            
0001310C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001310C 1028 0026                  		move.b	$26(a0),d0
00013110 5228 0026                  		addq.b	#1,$26(a0)
00013114 0240 007F                  		andi.w	#$7F,d0
00013118 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001311E 1031 0000                  		move.b	(a1,d0.w),d0
00013122 4880                       		ext.w	d0
00013124 D068 0030                  		add.w	$30(a0),d0
00013128 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001312C 4A28 002E                  		tst.b	$2E(a0)
00013130 6700                       		beq.s	Obj64_Display
00013132 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013136 6700                       		beq.s	Obj64_Display	; if not, branch
00013138                            
00013138 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001313C 303C 00AD                  		move.w	#$AD,d0
00013140 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013146 43F8 D000                  		lea	($FFFFD000).w,a1
0001314A 4269 0010                  		clr.w	$10(a1)
0001314E 4269 0012                  		clr.w	$12(a1)
00013152 4269 0014                  		clr.w	$14(a1)
00013156 137C 0015 001C             		move.b	#$15,$1C(a1)
0001315C 337C 0023 003E             		move.w	#$23,$3E(a1)
00013162 137C 0000 003C             		move.b	#0,$3C(a1)
00013168 08A9 0005 0022             		bclr	#5,$22(a1)
0001316E 08A9 0004 0022             		bclr	#4,$22(a1)
00013174 0829 0002 0022             		btst	#2,$22(a1)
0001317A 6700 FF82                  		beq.w	Obj64_Burst
0001317E 08A9 0002 0022             		bclr	#2,$22(a1)
00013184 137C 0013 0016             		move.b	#$13,$16(a1)
0001318A 137C 0009 0017             		move.b	#9,$17(a1)
00013190 5B69 000C                  		subq.w	#5,$C(a1)
00013194 6000 FF68                  		bra.w	Obj64_Burst
00013198                            ; ===========================================================================
00013198                            
00013198                            Obj64_Display:				; XREF: Obj64_Wobble
00013198 6100 AE2E                  		bsr.w	SpeedToPos
0001319C 4A28 0001                  		tst.b	1(a0)
000131A0 6A00                       		bpl.s	Obj64_Delete
000131A2 4EFA AE4A                  		jmp	DisplaySprite
000131A6                            ; ===========================================================================
000131A6                            
000131A6                            Obj64_Delete:
000131A6 4EFA AE82                  		jmp	DeleteObject
000131AA                            ; ===========================================================================
000131AA                            
000131AA                            Obj64_Display2:				; XREF: Obj64_Index
000131AA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000131B0 4EB9 0000 B04C             		jsr	AnimateSprite
000131B6 4A28 0001                  		tst.b	1(a0)
000131BA 6A00                       		bpl.s	Obj64_Delete2
000131BC 4EFA AE30                  		jmp	DisplaySprite
000131C0                            ; ===========================================================================
000131C0                            
000131C0                            Obj64_Delete2:
000131C0 4EFA AE68                  		jmp	DeleteObject
000131C4                            ; ===========================================================================
000131C4                            
000131C4                            Obj64_Delete3:				; XREF: Obj64_Index
000131C4 6000 AE64                  		bra.w	DeleteObject
000131C8                            ; ===========================================================================
000131C8                            
000131C8                            Obj64_BblMaker:				; XREF: Obj64_Index
000131C8 4A68 0036                  		tst.w	$36(a0)
000131CC 6600                       		bne.s	loc_12874
000131CE 3038 F646                  		move.w	($FFFFF646).w,d0
000131D2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000131D6 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000131DA 4A28 0001                  		tst.b	1(a0)
000131DE 6A00 0000                  		bpl.w	Obj64_ChkDel
000131E2 5368 0038                  		subq.w	#1,$38(a0)
000131E6 6A00 0000                  		bpl.w	loc_12914
000131EA 317C 0001 0036             		move.w	#1,$36(a0)
000131F0                            
000131F0                            loc_1283A:
000131F0 4EB9 0000 2D46             		jsr	(RandomNumber).l
000131F6 3200                       		move.w	d0,d1
000131F8 0240 0007                  		andi.w	#7,d0
000131FC 0C40 0006                  		cmpi.w	#6,d0
00013200 64EE                       		bcc.s	loc_1283A
00013202                            
00013202 1140 0034                  		move.b	d0,$34(a0)
00013206 0241 000C                  		andi.w	#$C,d1
0001320A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013210 D2C1                       		adda.w	d1,a1
00013212 2149 003C                  		move.l	a1,$3C(a0)
00013216 5328 0032                  		subq.b	#1,$32(a0)
0001321A 6A00                       		bpl.s	loc_12872
0001321C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013222 08E8 0007 0036             		bset	#7,$36(a0)
00013228                            
00013228                            loc_12872:
00013228 6000                       		bra.s	loc_1287C
0001322A                            ; ===========================================================================
0001322A                            
0001322A                            loc_12874:				; XREF: Obj64_BblMaker
0001322A 5368 0038                  		subq.w	#1,$38(a0)
0001322E 6A00 0000                  		bpl.w	loc_12914
00013232                            
00013232                            loc_1287C:
00013232 4EB9 0000 2D46             		jsr	(RandomNumber).l
00013238 0240 001F                  		andi.w	#$1F,d0
0001323C 3140 0038                  		move.w	d0,$38(a0)
00013240 6100 B232                  		bsr.w	SingleObjLoad
00013244 6600                       		bne.s	loc_128F8
00013246 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001324A 3368 0008 0008             		move.w	8(a0),8(a1)
00013250 4EB9 0000 2D46             		jsr	(RandomNumber).l
00013256 0240 000F                  		andi.w	#$F,d0
0001325A 5140                       		subq.w	#8,d0
0001325C D169 0008                  		add.w	d0,8(a1)
00013260 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013266 7000                       		moveq	#0,d0
00013268 1028 0034                  		move.b	$34(a0),d0
0001326C 2468 003C                  		movea.l	$3C(a0),a2
00013270 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013276 0828 0007 0036             		btst	#7,$36(a0)
0001327C 6700                       		beq.s	loc_128F8
0001327E 4EB9 0000 2D46             		jsr	(RandomNumber).l
00013284 0240 0003                  		andi.w	#3,d0
00013288 6600                       		bne.s	loc_128E4
0001328A 08E8 0006 0036             		bset	#6,$36(a0)
00013290 6600                       		bne.s	loc_128F8
00013292 137C 0002 0028             		move.b	#2,$28(a1)
00013298                            
00013298                            loc_128E4:
00013298 4A28 0034                  		tst.b	$34(a0)
0001329C 6600                       		bne.s	loc_128F8
0001329E 08E8 0006 0036             		bset	#6,$36(a0)
000132A4 6600                       		bne.s	loc_128F8
000132A6 137C 0002 0028             		move.b	#2,$28(a1)
000132AC                            
000132AC                            loc_128F8:
000132AC 5328 0034                  		subq.b	#1,$34(a0)
000132B0 6A00                       		bpl.s	loc_12914
000132B2 4EB9 0000 2D46             		jsr	(RandomNumber).l
000132B8 0240 007F                  		andi.w	#$7F,d0
000132BC 0640 0080                  		addi.w	#$80,d0
000132C0 D168 0038                  		add.w	d0,$38(a0)
000132C4 4268 0036                  		clr.w	$36(a0)
000132C8                            
000132C8                            loc_12914:
000132C8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000132CE 4EB9 0000 B04C             		jsr	AnimateSprite
000132D4                            
000132D4                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000132D4 3028 0008                  		move.w	8(a0),d0
000132D8 0240 FF80                  		andi.w	#$FF80,d0
000132DC 3238 F700                  		move.w	($FFFFF700).w,d1
000132E0 0441 0080                  		subi.w	#$80,d1
000132E4 0241 FF80                  		andi.w	#$FF80,d1
000132E8 9041                       		sub.w	d1,d0
000132EA 0C40 0280                  		cmpi.w	#$280,d0
000132EE 6200 AD3A                  		bhi.w	DeleteObject
000132F2 3038 F646                  		move.w	($FFFFF646).w,d0
000132F6 B068 000C                  		cmp.w	$C(a0),d0
000132FA 6500 ACF2                  		bcs.w	DisplaySprite
000132FE 4E75                       		rts	
00013300                            ; ===========================================================================
00013300                            ; bubble production sequence
00013300                            
00013300                            ; 0 = small bubble, 1 =	large bubble
00013300                            
00013300 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013312                            
00013312                            ; ===========================================================================
00013312                            
00013312                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013312 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013316 6B00                       		bmi.s	loc_12998
00013318 43F8 D000                  		lea	($FFFFD000).w,a1
0001331C 3029 0008                  		move.w	8(a1),d0
00013320 3228 0008                  		move.w	8(a0),d1
00013324 0441 0010                  		subi.w	#$10,d1
00013328 B240                       		cmp.w	d0,d1
0001332A 6400                       		bcc.s	loc_12998
0001332C 0641 0020                  		addi.w	#$20,d1
00013330 B240                       		cmp.w	d0,d1
00013332 6500                       		bcs.s	loc_12998
00013334 3029 000C                  		move.w	$C(a1),d0
00013338 3228 000C                  		move.w	$C(a0),d1
0001333C B240                       		cmp.w	d0,d1
0001333E 6400                       		bcc.s	loc_12998
00013340 0641 0010                  		addi.w	#$10,d1
00013344 B240                       		cmp.w	d0,d1
00013346 6500                       		bcs.s	loc_12998
00013348 7001                       		moveq	#1,d0
0001334A 4E75                       		rts	
0001334C                            ; ===========================================================================
0001334C                            
0001334C                            loc_12998:
0001334C 7000                       		moveq	#0,d0
0001334E 4E75                       		rts	
00013350                            ; ===========================================================================
00013350                            Ani_obj64:
00013350                            	include "_anim\obj64.asm"
00013350                            ; ---------------------------------------------------------------------------
00013350                            ; Animation script - bubbles (LZ)
00013350                            ; ---------------------------------------------------------------------------
00013350 0000                       		dc.w byte_129AA-Ani_obj64
00013352 0000                       		dc.w byte_129B0-Ani_obj64
00013354 0000                       		dc.w byte_129B6-Ani_obj64
00013356 0000                       		dc.w byte_129BE-Ani_obj64
00013358 0000                       		dc.w byte_129BE-Ani_obj64
0001335A 0000                       		dc.w byte_129C0-Ani_obj64
0001335C 0000                       		dc.w byte_129C6-Ani_obj64
0001335E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013364 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001336A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013372 04FC                       byte_129BE:	dc.b 4,	$FC
00013374 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001337A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013380 00                         		even
00013380 00                         		even
00013380                            
00013380                            ; ---------------------------------------------------------------------------
00013380                            ; Sprite mappings - bubbles (LZ)
00013380                            ; ---------------------------------------------------------------------------
00013380                            Map_obj64:
00013380                            	include "_maps\obj64.asm"
00013380                            ; ---------------------------------------------------------------------------
00013380                            ; Sprite mappings - bubbles (LZ)
00013380                            ; ---------------------------------------------------------------------------
00013380 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013384 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013388 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001338C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013390 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013394 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013398 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001339C 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000133A0 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000133A4 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000133A8 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000133AC 0000                       		dc.w byte_12A9C-Map_obj64
000133AE 01                         byte_129FA:	dc.b 1
000133AF FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000133B4 01                         byte_12A00:	dc.b 1
000133B5 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000133BA 01                         byte_12A06:	dc.b 1
000133BB FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000133C0 01                         byte_12A0C:	dc.b 1
000133C1 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000133C6 01                         byte_12A12:	dc.b 1
000133C7 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000133CC 01                         byte_12A18:	dc.b 1
000133CD F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000133D2 01                         byte_12A1E:	dc.b 1
000133D3 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000133D8 04                         byte_12A24:	dc.b 4
000133D9 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000133DE F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000133E3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000133E8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000133ED 04                         byte_12A39:	dc.b 4
000133EE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000133F3 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000133F8 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000133FD 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013402 01                         byte_12A4E:	dc.b 1
00013403 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013408 01                         byte_12A54:	dc.b 1
00013409 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001340E 01                         byte_12A5A:	dc.b 1
0001340F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013414 01                         byte_12A60:	dc.b 1
00013415 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001341A 01                         byte_12A66:	dc.b 1
0001341B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013420 01                         byte_12A6C:	dc.b 1
00013421 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013426 01                         byte_12A72:	dc.b 1
00013427 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001342C 01                         byte_12A78:	dc.b 1
0001342D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013432 01                         byte_12A7E:	dc.b 1
00013433 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013438 01                         byte_12A84:	dc.b 1
00013439 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001343E 01                         byte_12A8A:	dc.b 1
0001343F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013444 01                         byte_12A90:	dc.b 1
00013445 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001344A 01                         byte_12A96:	dc.b 1
0001344B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013450 00                         byte_12A9C:	dc.b 0
00013452 00                         		even
00013452 00                         		even
00013452                            
00013452                            ; ===========================================================================
00013452                            ; ---------------------------------------------------------------------------
00013452                            ; Object 65 - waterfalls (LZ)
00013452                            ; ---------------------------------------------------------------------------
00013452                            
00013452                            Obj65:					; XREF: Obj_Index
00013452 7000                       		moveq	#0,d0
00013454 1028 0024                  		move.b	$24(a0),d0
00013458 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001345C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013460                            ; ===========================================================================
00013460 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013462 0000                       		dc.w Obj65_Animate-Obj65_Index
00013464 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013466 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013468 0000                       		dc.w loc_12B36-Obj65_Index
0001346A                            ; ===========================================================================
0001346A                            
0001346A                            Obj65_Main:				; XREF: Obj65_Index
0001346A 5828 0024                  		addq.b	#4,$24(a0)
0001346E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013476 317C 4259 0002             		move.w	#$4259,2(a0)
0001347C 0028 0004 0001             		ori.b	#4,1(a0)
00013482 117C 0018 0019             		move.b	#$18,$19(a0)
00013488 117C 0001 0018             		move.b	#1,$18(a0)
0001348E 1028 0028                  		move.b	$28(a0),d0	; get object type
00013492 6A00                       		bpl.s	loc_12AE6
00013494 08E8 0007 0002             		bset	#7,2(a0)
0001349A                            
0001349A                            loc_12AE6:
0001349A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001349E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000134A2 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000134A6 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000134A8 4228 0018                  		clr.b	$18(a0)
000134AC 5528 0024                  		subq.b	#2,$24(a0)
000134B0 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000134B6 6700                       		beq.s	loc_12B0A	; if not, branch
000134B8 117C 0006 0024             		move.b	#6,$24(a0)
000134BE                            
000134BE                            loc_12B0A:
000134BE 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000134C4 6700                       		beq.s	Obj65_Animate	; if not, branch
000134C6 117C 0008 0024             		move.b	#8,$24(a0)
000134CC                            
000134CC                            Obj65_Animate:				; XREF: Obj65_Index
000134CC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000134D2 4EB9 0000 B04C             		jsr	AnimateSprite
000134D8                            
000134D8                            Obj65_ChkDel:				; XREF: Obj65_Index
000134D8 6000 CBBC                  		bra.w	MarkObjGone
000134DC                            ; ===========================================================================
000134DC                            
000134DC                            Obj65_FixHeight:			; XREF: Obj65_Index
000134DC 3038 F646                  		move.w	($FFFFF646).w,d0
000134E0 0440 0010                  		subi.w	#$10,d0
000134E4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000134E8 60E2                       		bra.s	Obj65_Animate
000134EA                            ; ===========================================================================
000134EA                            
000134EA                            loc_12B36:				; XREF: Obj65_Index
000134EA 08A8 0007 0002             		bclr	#7,2(a0)
000134F0 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000134F6 6600                       		bne.s	Obj65_Animate2
000134F8 08E8 0007 0002             		bset	#7,2(a0)
000134FE                            
000134FE                            Obj65_Animate2:
000134FE 60CC                       		bra.s	Obj65_Animate
00013500                            ; ===========================================================================
00013500                            Ani_obj65:
00013500                            	include "_anim\obj65.asm"
00013500                            ; ---------------------------------------------------------------------------
00013500                            ; Animation script - waterfall (LZ)
00013500                            ; ---------------------------------------------------------------------------
00013500 0000                       		dc.w byte_12B4E-Ani_obj65
00013502 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013508 00                         		even
00013508 00                         		even
00013508                            
00013508                            ; ---------------------------------------------------------------------------
00013508                            ; Sprite mappings - waterfalls (LZ)
00013508                            ; ---------------------------------------------------------------------------
00013508                            Map_obj65:
00013508                            	include "_maps\obj65.asm"
00013508                            ; ---------------------------------------------------------------------------
00013508                            ; Sprite mappings - waterfalls (LZ)
00013508                            ; ---------------------------------------------------------------------------
00013508 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001350C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013510 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013514 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013518 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001351C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013520 01                         byte_12B6C:	dc.b 1
00013521 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013526 02                         byte_12B72:	dc.b 2
00013527 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001352C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013531 02                         byte_12B7D:	dc.b 2
00013532 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013537 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001353C 01                         byte_12B88:	dc.b 1
0001353D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013542 02                         byte_12B8E:	dc.b 2
00013543 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013548 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001354D 01                         byte_12B99:	dc.b 1
0001354E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013553 01                         byte_12B9F:	dc.b 1
00013554 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013559 01                         byte_12BA5:	dc.b 1
0001355A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001355F 02                         byte_12BAB:	dc.b 2
00013560 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013565 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001356A 02                         byte_12BB6:	dc.b 2
0001356B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013570 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013575 02                         byte_12BC1:	dc.b 2
00013576 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001357B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013580 02                         byte_12BCC:	dc.b 2
00013581 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013586 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001358C 00                         		even
0001358C 00                         		even
0001358C                            
0001358C                            ; ===========================================================================
0001358C                            ; ---------------------------------------------------------------------------
0001358C                            ; Object 01 - Sonic
0001358C                            ; ---------------------------------------------------------------------------
0001358C                            
0001358C                            Obj01:					; XREF: Obj_Index
0001358C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013590 6700                       		beq.s	Obj01_Normal	; if not, branch
00013592 4EF9 0000 0000             		jmp	DebugMode
00013598                            ; ===========================================================================
00013598                            
00013598                            Obj01_Normal:
00013598 7000                       		moveq	#0,d0
0001359A 1028 0024                  		move.b	$24(a0),d0
0001359E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000135A2 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000135A6                            ; ===========================================================================
000135A6 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000135A8 0000                       		dc.w Obj01_Control-Obj01_Index
000135AA 0000                       		dc.w Obj01_Hurt-Obj01_Index
000135AC 0000                       		dc.w Obj01_Death-Obj01_Index
000135AE 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000135B0                            ; ===========================================================================
000135B0                            
000135B0                            Player_Maps:
000135B0 0000 0000                  	dc.l	Map_Sonic
000135B4 0000 0000                  	dc.l	Map_Sonic ; gronic
000135B8 0000 0000                  	dc.l	Map_Sonic ; anakama
000135BC 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
000135C0                            	; insert player mapping here
000135C0                            	
000135C0                            Obj01_Main:				; XREF: Obj01_Index
000135C0 5428 0024                  		addq.b	#2,$24(a0)
000135C4 117C 0013 0016             		move.b	#$13,$16(a0)
000135CA 117C 0009 0017             		move.b	#9,$17(a0)
000135D0                            		
000135D0 7000                       		moveq	#0,d0
000135D2 1038 FFE8                  		move.b	(v_character),d0
000135D6 E548                       		lsl.w	#2,d0
000135D8 43FA FFD6                  		lea 	Player_Maps(pc),a1
000135DC 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000135E2                            		
000135E2 317C 0780 0002             		move.w	#$780,2(a0)
000135E8 117C 0002 0018             		move.b	#2,$18(a0)
000135EE 117C 0018 0019             		move.b	#$18,$19(a0)
000135F4 117C 0004 0001             		move.b	#4,1(a0)
000135FA 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013600 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013606 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001360C                            
0001360C                            Obj01_Control:				; XREF: Obj01_Index
0001360C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013610 6700                       		beq.s	loc_12C58	; if not, branch
00013612 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013618 6700                       		beq.s	loc_12C58	; if not, branch
0001361A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013620 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013624 4E75                       		rts	
00013626                            ; ===========================================================================
00013626                            
00013626                            loc_12C58:
00013626 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001362A 6600                       		bne.s	loc_12C64	; if yes, branch
0001362C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013632                            
00013632                            loc_12C64:
00013632 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013638 6600                       		bne.s	loc_12C7E	; if yes, branch
0001363A 7000                       		moveq	#0,d0
0001363C 1028 0022                  		move.b	$22(a0),d0
00013640 0240 0006                  		andi.w	#6,d0
00013644 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013648 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001364C                            
0001364C                            loc_12C7E:
0001364C 6100                       		bsr.s	Sonic_Display
0001364E 6100 0000                  		bsr.w	Sonic_RecordPos
00013652 6100 0000                  		bsr.w	Sonic_Water
00013656 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001365C 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013662 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013666 6700                       		beq.s	loc_12CA6
00013668 4A28 001C                  		tst.b	$1C(a0)
0001366C 6600                       		bne.s	loc_12CA6
0001366E 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013674                            
00013674                            loc_12CA6:
00013674 6100 0000                  		bsr.w	Sonic_Animate
00013678 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001367C 6B00                       		bmi.s	loc_12CB6
0001367E 4EB9 0000 0000             		jsr	TouchResponse
00013684                            
00013684                            loc_12CB6:
00013684 6100 0000                  		bsr.w	Sonic_Loops
00013688 6100 0000                  		bsr.w	LoadSonicDynPLC
0001368C 4E75                       		rts	
0001368E                            ; ===========================================================================
0001368E 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013690 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013692 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013694 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013696                            ; ---------------------------------------------------------------------------
00013696                            ; Music	to play	after invincibility wears off
00013696                            ; ---------------------------------------------------------------------------
00013696                            ; ===========================================================================
00013696                            
00013696                            Sonic_Display:				; XREF: loc_12C7E
00013696 3028 0030                  		move.w	$30(a0),d0
0001369A 6700                       		beq.s	Obj01_Display
0001369C 5368 0030                  		subq.w	#1,$30(a0)
000136A0 E648                       		lsr.w	#3,d0
000136A2 6400                       		bcc.s	Obj01_ChkInvin
000136A4                            
000136A4                            Obj01_Display:
000136A4 4EBA A948                  		jsr	DisplaySprite
000136A8                            
000136A8                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000136A8                             
000136A8                            Obj01_ChkInvin:
000136A8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000136AC 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000136B0 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000136B4 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000136B8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000136BC 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000136C0 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000136C4 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000136C8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000136CE 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000136D2 7000                       		moveq	#0,d0
000136D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000136D8                             
000136D8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000136DE 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000136E0 43F9 0000 3D90             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000136E6 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000136E8                             
000136E8                            Obj01_GetBgm2:
000136E8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000136EE 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000136F0 43F9 0000 3D98             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000136F6 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000136F8                             
000136F8                            Obj01_GetBgm3:
000136F8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000136FE 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013700 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013706 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013708                             
00013708                            Obj01_GetBgm4:
00013708 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001370E 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013710 43F9 0000 3DA4             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013716                             
00013716                            Obj01_PlayMusic:
00013716 1031 0000                  		move.b	(a1,d0.w),d0
0001371A 4EB9 0000 15CC             		jsr	(PlaySound).l	; play normal music
00013720                             
00013720                            ; NineKode ends here.
00013720                            
00013720                            Obj01_RmvInvin:
00013720 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013726                            
00013726                            Obj01_ChkShoes:
00013726 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001372A 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001372C 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013730 6700                       		beq.s	Obj01_ExitChk
00013732 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013736 6600                       		bne.s	Obj01_ExitChk
00013738 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001373E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013744 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001374A 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013750 303C 00E3                  		move.w	#$E3,d0
00013754 4EF9 0000 15CC             		jmp	(PlaySound).l	; run music at normal speed
0001375A                            ; ===========================================================================
0001375A                            
0001375A                            Obj01_ExitChk:
0001375A 4E75                       		rts	
0001375C                            
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            
0001375C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001375C                            
0001375C                            
0001375C                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001375C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013760 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013764 43F1 0000                  		lea	(a1,d0.w),a1
00013768 32E8 0008                  		move.w	8(a0),(a1)+
0001376C 32E8 000C                  		move.w	$C(a0),(a1)+
00013770 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013774 4E75                       		rts	
00013776                            ; End of function Sonic_RecordPos
00013776                            
00013776                            ; ---------------------------------------------------------------------------
00013776                            ; Subroutine for Sonic when he's underwater
00013776                            ; ---------------------------------------------------------------------------
00013776                            
00013776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013776                            
00013776                            
00013776                            Sonic_Water:				; XREF: loc_12C7E
00013776 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001377C 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001377E                            
0001377E                            locret_12D80:
0001377E 4E75                       		rts	
00013780                            ; ===========================================================================
00013780                            
00013780                            Obj01_InWater:
00013780 3038 F646                  		move.w	($FFFFF646).w,d0
00013784 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013788 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001378A 08E8 0006 0022             		bset	#6,$22(a0)
00013790 66EC                       		bne.s	locret_12D80
00013792 6100 0000                  		bsr.w	ResumeMusic
00013796 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001379C 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000137A2 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000137A8 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000137AE 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000137B4 E0E8 0010                  		asr	$10(a0)
000137B8 E0E8 0012                  		asr	$12(a0)
000137BC E0E8 0012                  		asr	$12(a0)
000137C0 67BC                       		beq.s	locret_12D80
000137C2 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000137C8 303C 00AA                  		move.w	#$AA,d0
000137CC 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
000137D2                            ; ===========================================================================
000137D2                            
000137D2                            Obj01_OutWater:
000137D2 08A8 0006 0022             		bclr	#6,$22(a0)
000137D8 67A4                       		beq.s	locret_12D80
000137DA 6100 0000                  		bsr.w	ResumeMusic
000137DE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000137E4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000137EA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000137F0 E1E8 0012                  		asl	$12(a0)
000137F4 6700 FF88                  		beq.w	locret_12D80
000137F8 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000137FE 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013804 6E00                       		bgt.s	loc_12E0E
00013806 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001380C                            
0001380C                            loc_12E0E:
0001380C 303C 00AA                  		move.w	#$AA,d0
00013810 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
00013816                            ; End of function Sonic_Water
00013816                            
00013816                            ; ===========================================================================
00013816                            ; ---------------------------------------------------------------------------
00013816                            ; Modes	for controlling	Sonic
00013816                            ; ---------------------------------------------------------------------------
00013816                            
00013816                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013816 6100 0000                  		bsr.w	Sonic_Jump
0001381A 6100 0000                  		bsr.w	Sonic_SlopeResist
0001381E 6100 0000                  		bsr.w	Sonic_Move
00013822 6100 0000                  		bsr.w	Sonic_Roll
00013826 6100 0000                  		bsr.w	Sonic_LevelBound
0001382A 4EBA A79C                  		jsr	SpeedToPos
0001382E 6100 0000                  		bsr.w	Sonic_AnglePos
00013832 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013836 4E75                       		rts	
00013838                            ; ===========================================================================
00013838                            
00013838                            Obj01_MdJump:				; XREF: Obj01_Modes
00013838 6100 0000                  		bsr.w	Sonic_JumpHeight
0001383C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013840 6100 0000                  		bsr.w	Sonic_LevelBound
00013844 4EBA A710                  		jsr	ObjectFall
00013848 0828 0006 0022             		btst	#6,$22(a0)
0001384E 6700                       		beq.s	loc_12E5C
00013850 0468 0028 0012             		subi.w	#$28,$12(a0)
00013856                            
00013856                            loc_12E5C:
00013856 6100 0000                  		bsr.w	Sonic_JumpAngle
0001385A 6100 0000                  		bsr.w	Sonic_Floor
0001385E 4E75                       		rts	
00013860                            ; ===========================================================================
00013860                            
00013860                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013860 6100 0000                  		bsr.w	Sonic_Jump
00013864 6100 0000                  		bsr.w	Sonic_RollRepel
00013868 6100 0000                  		bsr.w	Sonic_RollSpeed
0001386C 6100 0000                  		bsr.w	Sonic_LevelBound
00013870 4EBA A756                  		jsr	SpeedToPos
00013874 6100 0000                  		bsr.w	Sonic_AnglePos
00013878 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001387C 4E75                       		rts	
0001387E                            ; ===========================================================================
0001387E                            
0001387E                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001387E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013882 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013886 6100 0000                  		bsr.w	Sonic_LevelBound
0001388A 6100 0000                  		bsr.w	Sonic_AirUnroll
0001388E 4EBA A6C6                  		jsr	ObjectFall
00013892 0828 0006 0022             		btst	#6,$22(a0)
00013898 6700                       		beq.s	loc_12EA6
0001389A 0468 0028 0012             		subi.w	#$28,$12(a0)
000138A0                            
000138A0                            loc_12EA6:
000138A0 6100 0000                  		bsr.w	Sonic_JumpAngle
000138A4 6100 0000                  		bsr.w	Sonic_Floor
000138A8 4E75                       		rts	
000138AA                            ; ---------------------------------------------------------------------------
000138AA                            ; Subroutine to	make Sonic walk/run
000138AA                            ; ---------------------------------------------------------------------------
000138AA                            
000138AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138AA                            
000138AA                            
000138AA                            Sonic_Move:				; XREF: Obj01_MdNormal
000138AA 3C38 F760                  		move.w	($FFFFF760).w,d6
000138AE 3A38 F762                  		move.w	($FFFFF762).w,d5
000138B2 3838 F764                  		move.w	($FFFFF764).w,d4
000138B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138BA 6600 0000                  		bne.w	loc_12FEE
000138BE 4A68 003E                  		tst.w	$3E(a0)
000138C2 6600 0000                  		bne.w	Obj01_ResetScr
000138C6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138CC 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000138CE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138D4 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000138D6 6100 0000                  		bsr.w	Sonic_MoveLeft
000138DA                            
000138DA                            Obj01_NotLeft:
000138DA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138E0 6700                       		beq.s	Obj01_NotRight	; if not, branch
000138E2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138E8 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000138EA 6100 0000                  		bsr.w	Sonic_MoveLeft
000138EE 6000                       		bra.s	Obj01_NotRight
000138F0                            
000138F0                            Obj01_MoveRight:
000138F0 6100 0000                  		bsr.w	Sonic_MoveRight
000138F4                            
000138F4                            Obj01_NotRight:
000138F4 1028 0026                  		move.b	$26(a0),d0
000138F8 0600 0020                  		addi.b	#$20,d0
000138FC 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013900 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013904 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013908 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001390C 08A8 0005 0022             		bclr	#5,$22(a0)
00013912 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013918 0828 0003 0022             		btst	#3,$22(a0)
0001391E 6700                       		beq.s	Sonic_Balance
00013920 7000                       		moveq	#0,d0
00013922 1028 003D                  		move.b	$3D(a0),d0
00013926 ED48                       		lsl.w	#6,d0
00013928 43F8 D000                  		lea	($FFFFD000).w,a1
0001392C 43F1 0000                  		lea	(a1,d0.w),a1
00013930 4A29 0022                  		tst.b	$22(a1)
00013934 6B00                       		bmi.s	Sonic_LookUp
00013936 7200                       		moveq	#0,d1
00013938 1229 0019                  		move.b	$19(a1),d1
0001393C 3401                       		move.w	d1,d2
0001393E D442                       		add.w	d2,d2
00013940 5942                       		subq.w	#4,d2
00013942 D268 0008                  		add.w	8(a0),d1
00013946 9269 0008                  		sub.w	8(a1),d1
0001394A 0C41 0004                  		cmpi.w	#4,d1
0001394E 6D00                       		blt.s	loc_12F6A
00013950 B242                       		cmp.w	d2,d1
00013952 6C00                       		bge.s	loc_12F5A
00013954 6000                       		bra.s	Sonic_LookUp
00013956                            ; ===========================================================================
00013956                            
00013956                            Sonic_Balance:
00013956 4EB9 0000 0000             		jsr	ObjHitFloor
0001395C 0C41 000C                  		cmpi.w	#$C,d1
00013960 6D00                       		blt.s	Sonic_LookUp
00013962 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013968 6600                       		bne.s	loc_12F62
0001396A                            
0001396A                            loc_12F5A:
0001396A 08A8 0000 0022             		bclr	#0,$22(a0)
00013970 6000                       		bra.s	loc_12F70
00013972                            ; ===========================================================================
00013972                            
00013972                            loc_12F62:
00013972 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013978 6600                       		bne.s	Sonic_LookUp
0001397A                            
0001397A                            loc_12F6A:
0001397A 08E8 0000 0022             		bset	#0,$22(a0)
00013980                            
00013980                            loc_12F70:
00013980 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013986 6000                       		bra.s	Obj01_ResetScr
00013988                            ; ===========================================================================
00013988                            
00013988                            Sonic_LookUp:
00013988 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001398E 6700                       		beq.s	Sonic_Duck	; if not, branch
00013990 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013996 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001399C 6700                       		beq.s	loc_12FC2
0001399E 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000139A2 6000                       		bra.s	loc_12FC2
000139A4                            ; ===========================================================================
000139A4                            
000139A4                            Sonic_Duck:
000139A4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000139AA 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000139AC 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000139B2 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000139B8 6700                       		beq.s	loc_12FC2
000139BA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000139BE 6000                       		bra.s	loc_12FC2
000139C0                            ; ===========================================================================
000139C0                            
000139C0                            Obj01_ResetScr:
000139C0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000139C6 6700                       		beq.s	loc_12FC2	; if yes, branch
000139C8 6400                       		bcc.s	loc_12FBE
000139CA 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000139CE                            
000139CE                            loc_12FBE:
000139CE 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000139D2                            
000139D2                            loc_12FC2:
000139D2 1038 F602                  		move.b	($FFFFF602).w,d0
000139D6 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000139DA 6600                       		bne.s	loc_12FEE	; if yes, branch
000139DC 3028 0014                  		move.w	$14(a0),d0
000139E0 6700                       		beq.s	loc_12FEE
000139E2 6B00                       		bmi.s	loc_12FE2
000139E4 9045                       		sub.w	d5,d0
000139E6 6400                       		bcc.s	loc_12FDC
000139E8 303C 0000                  		move.w	#0,d0
000139EC                            
000139EC                            loc_12FDC:
000139EC 3140 0014                  		move.w	d0,$14(a0)
000139F0 6000                       		bra.s	loc_12FEE
000139F2                            ; ===========================================================================
000139F2                            
000139F2                            loc_12FE2:
000139F2 D045                       		add.w	d5,d0
000139F4 6400                       		bcc.s	loc_12FEA
000139F6 303C 0000                  		move.w	#0,d0
000139FA                            
000139FA                            loc_12FEA:
000139FA 3140 0014                  		move.w	d0,$14(a0)
000139FE                            
000139FE                            loc_12FEE:
000139FE 1028 0026                  		move.b	$26(a0),d0
00013A02 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013A08 C3E8 0014                  		muls.w	$14(a0),d1
00013A0C E081                       		asr.l	#8,d1
00013A0E 3141 0010                  		move.w	d1,$10(a0)
00013A12 C1E8 0014                  		muls.w	$14(a0),d0
00013A16 E080                       		asr.l	#8,d0
00013A18 3140 0012                  		move.w	d0,$12(a0)
00013A1C                            
00013A1C                            loc_1300C:
00013A1C 1028 0026                  		move.b	$26(a0),d0
00013A20 0600 0040                  		addi.b	#$40,d0
00013A24 6B00                       		bmi.s	locret_1307C
00013A26 123C 0040                  		move.b	#$40,d1
00013A2A 4A68 0014                  		tst.w	$14(a0)
00013A2E 6700                       		beq.s	locret_1307C
00013A30 6B00                       		bmi.s	loc_13024
00013A32 4441                       		neg.w	d1
00013A34                            
00013A34                            loc_13024:
00013A34 1028 0026                  		move.b	$26(a0),d0
00013A38 D001                       		add.b	d1,d0
00013A3A 3F00                       		move.w	d0,-(sp)
00013A3C 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013A40 301F                       		move.w	(sp)+,d0
00013A42 4A41                       		tst.w	d1
00013A44 6A00                       		bpl.s	locret_1307C
00013A46 E141                       		asl.w	#8,d1
00013A48 0600 0020                  		addi.b	#$20,d0
00013A4C 0200 00C0                  		andi.b	#$C0,d0
00013A50 6700                       		beq.s	loc_13078
00013A52 0C00 0040                  		cmpi.b	#$40,d0
00013A56 6700                       		beq.s	loc_13066
00013A58 0C00 0080                  		cmpi.b	#$80,d0
00013A5C 6700                       		beq.s	loc_13060
00013A5E D368 0010                  		add.w	d1,$10(a0)
00013A62 08E8 0005 0022             		bset	#5,$22(a0)
00013A68 317C 0000 0014             		move.w	#0,$14(a0)
00013A6E 4E75                       		rts	
00013A70                            ; ===========================================================================
00013A70                            
00013A70                            loc_13060:
00013A70 9368 0012                  		sub.w	d1,$12(a0)
00013A74 4E75                       		rts	
00013A76                            ; ===========================================================================
00013A76                            
00013A76                            loc_13066:
00013A76 9368 0010                  		sub.w	d1,$10(a0)
00013A7A 08E8 0005 0022             		bset	#5,$22(a0)
00013A80 317C 0000 0014             		move.w	#0,$14(a0)
00013A86 4E75                       		rts	
00013A88                            ; ===========================================================================
00013A88                            
00013A88                            loc_13078:
00013A88 D368 0012                  		add.w	d1,$12(a0)
00013A8C                            
00013A8C                            locret_1307C:
00013A8C 4E75                       		rts	
00013A8E                            ; End of function Sonic_Move
00013A8E                            
00013A8E                            
00013A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A8E                            
00013A8E                            
00013A8E                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013A8E 3028 0014                  		move.w	$14(a0),d0
00013A92 6700                       		beq.s	loc_13086
00013A94 6A00                       		bpl.s	loc_130B2
00013A96                            
00013A96                            loc_13086:
00013A96 08E8 0000 0022             		bset	#0,$22(a0)
00013A9C 6600                       		bne.s	loc_1309A
00013A9E 08A8 0005 0022             		bclr	#5,$22(a0)
00013AA4 117C 0001 001D             		move.b	#1,$1D(a0)
00013AAA                            
00013AAA                            loc_1309A:
00013AAA 9045                       		sub.w	d5,d0
00013AAC 3206                       		move.w	d6,d1
00013AAE 4441                       		neg.w	d1
00013AB0 B041                       		cmp.w	d1,d0
00013AB2 6E00                       		bgt.s	loc_130A6
00013AB4 3001                       		move.w	d1,d0
00013AB6                            
00013AB6                            loc_130A6:
00013AB6 3140 0014                  		move.w	d0,$14(a0)
00013ABA 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013AC0 4E75                       		rts	
00013AC2                            ; ===========================================================================
00013AC2                            
00013AC2                            loc_130B2:				; XREF: Sonic_MoveLeft
00013AC2 9044                       		sub.w	d4,d0
00013AC4 6400                       		bcc.s	loc_130BA
00013AC6 303C FF80                  		move.w	#-$80,d0
00013ACA                            
00013ACA                            loc_130BA:
00013ACA 3140 0014                  		move.w	d0,$14(a0)
00013ACE 1028 0026                  		move.b	$26(a0),d0
00013AD2 0600 0020                  		addi.b	#$20,d0
00013AD6 0200 00C0                  		andi.b	#$C0,d0
00013ADA 6600                       		bne.s	locret_130E8
00013ADC 0C40 0400                  		cmpi.w	#$400,d0
00013AE0 6D00                       		blt.s	locret_130E8
00013AE2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013AE8 08A8 0000 0022             		bclr	#0,$22(a0)
00013AEE 303C 00A4                  		move.w	#$A4,d0
00013AF2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013AF8                            
00013AF8                            locret_130E8:
00013AF8 4E75                       		rts	
00013AFA                            ; End of function Sonic_MoveLeft
00013AFA                            
00013AFA                            
00013AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AFA                            
00013AFA                            
00013AFA                            Sonic_MoveRight:			; XREF: Sonic_Move
00013AFA 3028 0014                  		move.w	$14(a0),d0
00013AFE 6B00                       		bmi.s	loc_13118
00013B00 08A8 0000 0022             		bclr	#0,$22(a0)
00013B06 6700                       		beq.s	loc_13104
00013B08 08A8 0005 0022             		bclr	#5,$22(a0)
00013B0E 117C 0001 001D             		move.b	#1,$1D(a0)
00013B14                            
00013B14                            loc_13104:
00013B14 D045                       		add.w	d5,d0
00013B16 B046                       		cmp.w	d6,d0
00013B18 6D00                       		blt.s	loc_1310C
00013B1A 3006                       		move.w	d6,d0
00013B1C                            
00013B1C                            loc_1310C:
00013B1C 3140 0014                  		move.w	d0,$14(a0)
00013B20 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B26 4E75                       		rts	
00013B28                            ; ===========================================================================
00013B28                            
00013B28                            loc_13118:				; XREF: Sonic_MoveRight
00013B28 D044                       		add.w	d4,d0
00013B2A 6400                       		bcc.s	loc_13120
00013B2C 303C 0080                  		move.w	#$80,d0
00013B30                            
00013B30                            loc_13120:
00013B30 3140 0014                  		move.w	d0,$14(a0)
00013B34 1028 0026                  		move.b	$26(a0),d0
00013B38 0600 0020                  		addi.b	#$20,d0
00013B3C 0200 00C0                  		andi.b	#$C0,d0
00013B40 6600                       		bne.s	locret_1314E
00013B42 0C40 FC00                  		cmpi.w	#-$400,d0
00013B46 6E00                       		bgt.s	locret_1314E
00013B48 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B4E 08E8 0000 0022             		bset	#0,$22(a0)
00013B54 303C 00A4                  		move.w	#$A4,d0
00013B58 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B5E                            
00013B5E                            locret_1314E:
00013B5E 4E75                       		rts	
00013B60                            ; End of function Sonic_MoveRight
00013B60                            
00013B60                            ; ---------------------------------------------------------------------------
00013B60                            ; Subroutine to	change Sonic's speed as he rolls
00013B60                            ; ---------------------------------------------------------------------------
00013B60                            
00013B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B60                            
00013B60                            
00013B60                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013B60 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B64 E346                       		asl.w	#1,d6
00013B66 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B6A E245                       		asr.w	#1,d5
00013B6C 3838 F764                  		move.w	($FFFFF764).w,d4
00013B70 E444                       		asr.w	#2,d4
00013B72 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B76 6600 0000                  		bne.w	loc_131CC
00013B7A 4A68 003E                  		tst.w	$3E(a0)
00013B7E 6600                       		bne.s	loc_13188
00013B80 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B86 6700                       		beq.s	loc_1317C	; if not, branch
00013B88 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B8E 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013B90 6100 0000                  		bsr.w	Sonic_RollLeft
00013B94                            
00013B94                            loc_1317C:
00013B94 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B9A 6700                       		beq.s	loc_13188	; if not, branch
00013B9C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BA2 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013BA4 6100 0000                  		bsr.w	Sonic_RollLeft
00013BA8 6000                       		bra.s	loc_13188
00013BAA                            
00013BAA                            SonicRS_RollRight:
00013BAA 6100 0000                  		bsr.w	Sonic_RollRight
00013BAE                            
00013BAE                            loc_13188:
00013BAE 3028 0014                  		move.w	$14(a0),d0
00013BB2 6700                       		beq.s	loc_131AA
00013BB4 6B00                       		bmi.s	loc_1319E
00013BB6 9045                       		sub.w	d5,d0
00013BB8 6400                       		bcc.s	loc_13198
00013BBA 303C 0000                  		move.w	#0,d0
00013BBE                            
00013BBE                            loc_13198:
00013BBE 3140 0014                  		move.w	d0,$14(a0)
00013BC2 6000                       		bra.s	loc_131AA
00013BC4                            ; ===========================================================================
00013BC4                            
00013BC4                            loc_1319E:				; XREF: Sonic_RollSpeed
00013BC4 D045                       		add.w	d5,d0
00013BC6 6400                       		bcc.s	loc_131A6
00013BC8 303C 0000                  		move.w	#0,d0
00013BCC                            
00013BCC                            loc_131A6:
00013BCC 3140 0014                  		move.w	d0,$14(a0)
00013BD0                            
00013BD0                            loc_131AA:
00013BD0 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013BD4 6600                       		bne.s	loc_131CC	; if yes, branch
00013BD6 08A8 0002 0022             		bclr	#2,$22(a0)
00013BDC 117C 0013 0016             		move.b	#$13,$16(a0)
00013BE2 117C 0009 0017             		move.b	#9,$17(a0)
00013BE8 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013BEE 5B68 000C                  		subq.w	#5,$C(a0)
00013BF2                            
00013BF2                            loc_131CC:
00013BF2 1028 0026                  		move.b	$26(a0),d0
00013BF6 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013BFC C1E8 0014                  		muls.w	$14(a0),d0
00013C00 E080                       		asr.l	#8,d0
00013C02 3140 0012                  		move.w	d0,$12(a0)
00013C06 C3E8 0014                  		muls.w	$14(a0),d1
00013C0A E081                       		asr.l	#8,d1
00013C0C 0C41 1000                  		cmpi.w	#$1000,d1
00013C10 6F00                       		ble.s	loc_131F0
00013C12 323C 1000                  		move.w	#$1000,d1
00013C16                            
00013C16                            loc_131F0:
00013C16 0C41 F000                  		cmpi.w	#-$1000,d1
00013C1A 6C00                       		bge.s	loc_131FA
00013C1C 323C F000                  		move.w	#-$1000,d1
00013C20                            
00013C20                            loc_131FA:
00013C20 3141 0010                  		move.w	d1,$10(a0)
00013C24 6000 FDF6                  		bra.w	loc_1300C
00013C28                            ; End of function Sonic_RollSpeed
00013C28                            
00013C28                            
00013C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C28                            
00013C28                            
00013C28                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C28 3028 0014                  		move.w	$14(a0),d0
00013C2C 6700                       		beq.s	loc_1320A
00013C2E 6A00                       		bpl.s	loc_13218
00013C30                            
00013C30                            loc_1320A:
00013C30 08E8 0000 0022             		bset	#0,$22(a0)
00013C36 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C3C 4E75                       		rts	
00013C3E                            ; ===========================================================================
00013C3E                            
00013C3E                            loc_13218:
00013C3E 9044                       		sub.w	d4,d0
00013C40 6400                       		bcc.s	loc_13220
00013C42 303C FF80                  		move.w	#-$80,d0
00013C46                            
00013C46                            loc_13220:
00013C46 3140 0014                  		move.w	d0,$14(a0)
00013C4A 4E75                       		rts	
00013C4C                            ; End of function Sonic_RollLeft
00013C4C                            
00013C4C                            
00013C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C4C                            
00013C4C                            
00013C4C                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013C4C 3028 0014                  		move.w	$14(a0),d0
00013C50 6B00                       		bmi.s	loc_1323A
00013C52 08A8 0000 0022             		bclr	#0,$22(a0)
00013C58 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C5E 4E75                       		rts	
00013C60                            ; ===========================================================================
00013C60                            
00013C60                            loc_1323A:
00013C60 D044                       		add.w	d4,d0
00013C62 6400                       		bcc.s	loc_13242
00013C64 303C 0080                  		move.w	#$80,d0
00013C68                            
00013C68                            loc_13242:
00013C68 3140 0014                  		move.w	d0,$14(a0)
00013C6C 4E75                       		rts	
00013C6E                            ; End of function Sonic_RollRight
00013C6E                            
00013C6E                            Sonic_AirUnroll:
00013C6E                            		
00013C6E 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013C72 6600                       		bne.s	@timer
00013C74 1038 F605                  		move.b	($FFFFF605).w,d0
00013C78 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013C7C 6700                       		beq.s	@end	; if not, branch
00013C7E 08A8 0002 0022             		bclr	#2,$22(a0)
00013C84 117C 0013 0016             		move.b	#$13,$16(a0)
00013C8A 117C 0009 0017             		move.b	#9,$17(a0)
00013C90 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013C96 303C 00A5                  		move.w	#$A5,d0
00013C9A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play fart sound
00013CA0 2028 0010                  		move.l	$10(a0),d0
00013CA4 D080                       		add.l	d0,d0
00013CA6 2140 0010                  		move.l	d0,$10(a0)
00013CAA 5B68 000C                  		subq.w	#5,$C(a0)
00013CAE                            	@end:
00013CAE 4E75                       		rts
00013CB0                            	@timer:
00013CB0 5328 003A                  		subq.b	#1,$3A(a0)
00013CB4 4E75                       		rts
00013CB6                            
00013CB6                            ; ---------------------------------------------------------------------------
00013CB6                            ; Subroutine to	change Sonic's direction while jumping
00013CB6                            ; ---------------------------------------------------------------------------
00013CB6                            
00013CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CB6                            
00013CB6                            
00013CB6                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CB6 3C38 F760                  		move.w	($FFFFF760).w,d6
00013CBA 3A38 F762                  		move.w	($FFFFF762).w,d5
00013CBE E345                       		asl.w	#1,d5
00013CC0 0828 0004 0022             		btst	#4,$22(a0)
00013CC6 6600                       		bne.s	Obj01_ResetScr2
00013CC8 3028 0010                  		move.w	$10(a0),d0
00013CCC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013CD2 6700                       		beq.s	loc_13278	; if not, branch
00013CD4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013CDA 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013CDC 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013CE0 6E00                       		bgt.s	loc_13278
00013CE2 3001                       		move.w	d1,d0
00013CE4                            
00013CE4                            loc_13278:
00013CE4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013CEA 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013CEC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013CF2 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013CF4 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013CF8 6E00                       		bgt.s	Obj01_JumpMove
00013CFA 3001                       		move.w	d1,d0
00013CFC 6000                       		bra.s	Obj01_JumpMove
00013CFE                            
00013CFE                            SonicCJD_JumpLeft:
00013CFE 08E8 0000 0022             		bset	#0,$22(a0)
00013D04 9045                       		sub.w	d5,d0
00013D06 3206                       		move.w	d6,d1
00013D08 4441                       		neg.w	d1
00013D0A B041                       		cmp.w	d1,d0
00013D0C                            		; bgt.s	loc_13278
00013D0C                            		; move.w	d1,d0
00013D0C 4E75                       		rts
00013D0E                            
00013D0E                            SonicCJD_JumpRight:
00013D0E 08A8 0000 0022             		bclr	#0,$22(a0)
00013D14 D045                       		add.w	d5,d0
00013D16 B046                       		cmp.w	d6,d0
00013D18 6D00                       		blt.s	Obj01_JumpMove
00013D1A 3006                       		move.w	d6,d0
00013D1C                            
00013D1C                            Obj01_JumpMove:
00013D1C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D20                            
00013D20                            Obj01_ResetScr2:
00013D20 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D26 6700                       		beq.s	loc_132A4	; if yes, branch
00013D28 6400                       		bcc.s	loc_132A0
00013D2A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D2E                            
00013D2E                            loc_132A0:
00013D2E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D32                            
00013D32                            loc_132A4:
00013D32 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D38 6500                       		bcs.s	locret_132D2	; if yes, branch
00013D3A 3028 0010                  		move.w	$10(a0),d0
00013D3E 3200                       		move.w	d0,d1
00013D40 EA41                       		asr.w	#5,d1
00013D42 6700                       		beq.s	locret_132D2
00013D44 6B00                       		bmi.s	loc_132C6
00013D46 9041                       		sub.w	d1,d0
00013D48 6400                       		bcc.s	loc_132C0
00013D4A 303C 0000                  		move.w	#0,d0
00013D4E                            
00013D4E                            loc_132C0:
00013D4E 3140 0010                  		move.w	d0,$10(a0)
00013D52 4E75                       		rts	
00013D54                            ; ===========================================================================
00013D54                            
00013D54                            loc_132C6:
00013D54 9041                       		sub.w	d1,d0
00013D56 6500                       		bcs.s	loc_132CE
00013D58 303C 0000                  		move.w	#0,d0
00013D5C                            
00013D5C                            loc_132CE:
00013D5C 3140 0010                  		move.w	d0,$10(a0)
00013D60                            
00013D60                            locret_132D2:
00013D60 4E75                       		rts	
00013D62                            ; End of function Sonic_ChgJumpDir
00013D62                            
00013D62                            ; ===========================================================================
00013D62                            ; ---------------------------------------------------------------------------
00013D62                            ; Unused subroutine to squash Sonic
00013D62                            ; ---------------------------------------------------------------------------
00013D62 1028 0026                  		move.b	$26(a0),d0
00013D66 0600 0020                  		addi.b	#$20,d0
00013D6A 0200 00C0                  		andi.b	#$C0,d0
00013D6E 6600                       		bne.s	locret_13302
00013D70 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D74 4A41                       		tst.w	d1
00013D76 6A00                       		bpl.s	locret_13302
00013D78 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013D7E 317C 0000 0010             		move.w	#0,$10(a0)
00013D84 317C 0000 0012             		move.w	#0,$12(a0)
00013D8A 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013D90                            
00013D90                            locret_13302:
00013D90 4E75                       		rts	
00013D92                            ; ---------------------------------------------------------------------------
00013D92                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013D92                            ; ---------------------------------------------------------------------------
00013D92                            
00013D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D92                            
00013D92                            
00013D92                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013D92 2228 0008                  		move.l	8(a0),d1
00013D96 3028 0010                  		move.w	$10(a0),d0
00013D9A 48C0                       		ext.l	d0
00013D9C E180                       		asl.l	#8,d0
00013D9E D280                       		add.l	d0,d1
00013DA0 4841                       		swap	d1
00013DA2 3038 F728                  		move.w	($FFFFF728).w,d0
00013DA6 0640 0010                  		addi.w	#$10,d0
00013DAA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DAC 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013DAE 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013DB2 0640 0128                  		addi.w	#$128,d0
00013DB6 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013DBA 6600                       		bne.s	loc_13332
00013DBC 0640 0040                  		addi.w	#$40,d0
00013DC0                            
00013DC0                            loc_13332:
00013DC0 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DC2 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013DC4                            
00013DC4                            loc_13336:
00013DC4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013DC8 0640 00E0                  		addi.w	#$E0,d0
00013DCC B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013DD0 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013DD2 4E75                       		rts	
00013DD4                            ; ===========================================================================
00013DD4                            
00013DD4                            Boundary_Bottom:
00013DD4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013DDA 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013DDE 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013DE4 6500 0000                  		bcs.w	KillSonic
00013DE8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013DEC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013DF2 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013DF8 4E75                       		rts	
00013DFA                            ; ===========================================================================
00013DFA                            
00013DFA                            Boundary_Sides:
00013DFA 3140 0008                  		move.w	d0,8(a0)
00013DFE 317C 0000 000A             		move.w	#0,$A(a0)
00013E04 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E0A 317C 0000 0014             		move.w	#0,$14(a0)
00013E10 60B2                       		bra.s	loc_13336
00013E12                            ; End of function Sonic_LevelBound
00013E12                            
00013E12                            ; ---------------------------------------------------------------------------
00013E12                            ; Subroutine allowing Sonic to roll when he's moving
00013E12                            ; ---------------------------------------------------------------------------
00013E12                            
00013E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E12                            
00013E12                            
00013E12                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E12 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E16 6600                       		bne.s	Obj01_NoRoll
00013E18 3028 0014                  		move.w	$14(a0),d0
00013E1C 6A00                       		bpl.s	loc_13392
00013E1E 4440                       		neg.w	d0
00013E20                            
00013E20                            loc_13392:
00013E20 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E24 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E26 1038 F602                  		move.b	($FFFFF602).w,d0
00013E2A 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E2E 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E30 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E36 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E38                            
00013E38                            Obj01_NoRoll:
00013E38 4E75                       		rts	
00013E3A                            ; ===========================================================================
00013E3A                            
00013E3A                            Obj01_ChkRoll:
00013E3A 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013E40 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013E42 4E75                       		rts	
00013E44                            ; ===========================================================================
00013E44                            
00013E44                            Obj01_DoRoll:
00013E44 08E8 0002 0022             		bset	#2,$22(a0)
00013E4A 117C 000E 0016             		move.b	#$E,$16(a0)
00013E50 117C 0007 0017             		move.b	#7,$17(a0)
00013E56 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E5C 5A68 000C                  		addq.w	#5,$C(a0)
00013E60 303C 00BE                  		move.w	#$BE,d0
00013E64 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rolling sound
00013E6A 4A68 0014                  		tst.w	$14(a0)
00013E6E 6600                       		bne.s	locret_133E8
00013E70 317C 0200 0014             		move.w	#$200,$14(a0)
00013E76                            
00013E76                            locret_133E8:
00013E76 4E75                       		rts	
00013E78                            ; End of function Sonic_Roll
00013E78                            
00013E78                            ; ---------------------------------------------------------------------------
00013E78                            ; Subroutine allowing Sonic to jump
00013E78                            ; ---------------------------------------------------------------------------
00013E78                            
00013E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E78                            
00013E78                            
00013E78                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E78 1038 F603                  		move.b	($FFFFF603).w,d0
00013E7C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013E80 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013E84 7000                       		moveq	#0,d0
00013E86 1028 0026                  		move.b	$26(a0),d0
00013E8A 0600 0080                  		addi.b	#$80,d0
00013E8E 6100 0000                  		bsr.w	sub_14D48
00013E92 0C41 0006                  		cmpi.w	#6,d1
00013E96 6D00 0000                  		blt.w	locret_1348E
00013E9A 343C 0680                  		move.w	#$680,d2
00013E9E 0828 0006 0022             		btst	#6,$22(a0)
00013EA4 6700                       		beq.s	loc_1341C
00013EA6 343C 0380                  		move.w	#$380,d2
00013EAA                            
00013EAA                            loc_1341C:
00013EAA 7000                       		moveq	#0,d0
00013EAC 1028 0026                  		move.b	$26(a0),d0
00013EB0 0400 0040                  		subi.b	#$40,d0
00013EB4 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013EBA C3C2                       		muls.w	d2,d1
00013EBC E081                       		asr.l	#8,d1
00013EBE D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013EC2 C1C2                       		muls.w	d2,d0
00013EC4 E080                       		asr.l	#8,d0
00013EC6 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013ECA 08E8 0001 0022             		bset	#1,$22(a0)
00013ED0 08A8 0005 0022             		bclr	#5,$22(a0)
00013ED6 588F                       		addq.l	#4,sp
00013ED8 117C 0001 003C             		move.b	#1,$3C(a0)
00013EDE 4228 0038                  		clr.b	$38(a0)
00013EE2 303C 00A0                  		move.w	#$A0,d0
00013EE6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play jumping sound
00013EEC 117C 0013 0016             		move.b	#$13,$16(a0)
00013EF2 117C 0009 0017             		move.b	#9,$17(a0)
00013EF8 0828 0002 0022             		btst	#2,$22(a0)
00013EFE 6600                       		bne.s	loc_13490
00013F00 117C 000E 0016             		move.b	#$E,$16(a0)
00013F06 117C 0007 0017             		move.b	#7,$17(a0)
00013F0C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F12 08E8 0002 0022             		bset	#2,$22(a0)
00013F18 5A68 000C                  		addq.w	#5,$C(a0)
00013F1C 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F22                            
00013F22                            locret_1348E:
00013F22 4E75                       		rts	
00013F24                            ; ===========================================================================
00013F24                            
00013F24                            loc_13490:
00013F24 08E8 0004 0022             		bset	#4,$22(a0)
00013F2A 4E75                       		rts	
00013F2C                            ; End of function Sonic_Jump
00013F2C                            
00013F2C                            
00013F2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F2C                            
00013F2C                            
00013F2C                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F2C 4A28 003C                  		tst.b	$3C(a0)
00013F30 6700                       		beq.s	loc_134C4
00013F32 323C FC00                  		move.w	#-$400,d1
00013F36 0828 0006 0022             		btst	#6,$22(a0)
00013F3C 6700                       		beq.s	loc_134AE
00013F3E 323C FE00                  		move.w	#-$200,d1
00013F42                            
00013F42                            loc_134AE:
00013F42 B268 0012                  		cmp.w	$12(a0),d1
00013F46 6F00                       		ble.s	locret_134C2
00013F48 1038 F602                  		move.b	($FFFFF602).w,d0
00013F4C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013F50 6600                       		bne.s	locret_134C2	; if yes, branch
00013F52 3141 0012                  		move.w	d1,$12(a0)
00013F56                            
00013F56                            locret_134C2:
00013F56 4E75                       		rts	
00013F58                            ; ===========================================================================
00013F58                            
00013F58                            loc_134C4:
00013F58 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013F5E 6C00                       		bge.s	locret_134D2
00013F60 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013F66                            
00013F66                            locret_134D2:
00013F66 4E75                       		rts	
00013F68                            ; End of function Sonic_JumpHeight
00013F68                            
00013F68                            ; ---------------------------------------------------------------------------
00013F68                            ; Subroutine to	slow Sonic walking up a	slope
00013F68                            ; ---------------------------------------------------------------------------
00013F68                            
00013F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F68                            
00013F68                            
00013F68                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013F68 1028 0026                  		move.b	$26(a0),d0
00013F6C 0600 0060                  		addi.b	#$60,d0
00013F70 0C00 00C0                  		cmpi.b	#$C0,d0
00013F74 6400                       		bcc.s	locret_13508
00013F76 1028 0026                  		move.b	$26(a0),d0
00013F7A 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013F80 C1FC 0020                  		muls.w	#$20,d0
00013F84 E080                       		asr.l	#8,d0
00013F86 4A68 0014                  		tst.w	$14(a0)
00013F8A 6700                       		beq.s	locret_13508
00013F8C 6B00                       		bmi.s	loc_13504
00013F8E 4A40                       		tst.w	d0
00013F90 6700                       		beq.s	locret_13502
00013F92 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013F96                            
00013F96                            locret_13502:
00013F96 4E75                       		rts	
00013F98                            ; ===========================================================================
00013F98                            
00013F98                            loc_13504:
00013F98 D168 0014                  		add.w	d0,$14(a0)
00013F9C                            
00013F9C                            locret_13508:
00013F9C 4E75                       		rts	
00013F9E                            ; End of function Sonic_SlopeResist
00013F9E                            
00013F9E                            ; ---------------------------------------------------------------------------
00013F9E                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013F9E                            ; ---------------------------------------------------------------------------
00013F9E                            
00013F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F9E                            
00013F9E                            
00013F9E                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013F9E 1028 0026                  		move.b	$26(a0),d0
00013FA2 0600 0060                  		addi.b	#$60,d0
00013FA6 0C00 00C0                  		cmpi.b	#-$40,d0
00013FAA 6400                       		bcc.s	locret_13544
00013FAC 1028 0026                  		move.b	$26(a0),d0
00013FB0 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013FB6 C1FC 0050                  		muls.w	#$50,d0
00013FBA E080                       		asr.l	#8,d0
00013FBC 4A68 0014                  		tst.w	$14(a0)
00013FC0 6B00                       		bmi.s	loc_1353A
00013FC2 4A40                       		tst.w	d0
00013FC4 6A00                       		bpl.s	loc_13534
00013FC6 E480                       		asr.l	#2,d0
00013FC8                            
00013FC8                            loc_13534:
00013FC8 D168 0014                  		add.w	d0,$14(a0)
00013FCC 4E75                       		rts	
00013FCE                            ; ===========================================================================
00013FCE                            
00013FCE                            loc_1353A:
00013FCE 4A40                       		tst.w	d0
00013FD0 6B00                       		bmi.s	loc_13540
00013FD2 E480                       		asr.l	#2,d0
00013FD4                            
00013FD4                            loc_13540:
00013FD4 D168 0014                  		add.w	d0,$14(a0)
00013FD8                            
00013FD8                            locret_13544:
00013FD8 4E75                       		rts	
00013FDA                            ; End of function Sonic_RollRepel
00013FDA                            
00013FDA                            ; ---------------------------------------------------------------------------
00013FDA                            ; Subroutine to	push Sonic down	a slope
00013FDA                            ; ---------------------------------------------------------------------------
00013FDA                            
00013FDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FDA                            
00013FDA                            
00013FDA                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FDA 4E71                       		nop	
00013FDC 4A28 0038                  		tst.b	$38(a0)
00013FE0 6600                       		bne.s	locret_13580
00013FE2 4A68 003E                  		tst.w	$3E(a0)
00013FE6 6600                       		bne.s	loc_13582
00013FE8 1028 0026                  		move.b	$26(a0),d0
00013FEC 0600 0020                  		addi.b	#$20,d0
00013FF0 0200 00C0                  		andi.b	#$C0,d0
00013FF4 6700                       		beq.s	locret_13580
00013FF6 3028 0014                  		move.w	$14(a0),d0
00013FFA 6A00                       		bpl.s	loc_1356A
00013FFC 4440                       		neg.w	d0
00013FFE                            
00013FFE                            loc_1356A:
00013FFE 0C40 0280                  		cmpi.w	#$280,d0
00014002 6400                       		bcc.s	locret_13580
00014004 4268 0014                  		clr.w	$14(a0)
00014008 08E8 0001 0022             		bset	#1,$22(a0)
0001400E 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014014                            
00014014                            locret_13580:
00014014 4E75                       		rts	
00014016                            ; ===========================================================================
00014016                            
00014016                            loc_13582:
00014016 5368 003E                  		subq.w	#1,$3E(a0)
0001401A 4E75                       		rts	
0001401C                            ; End of function Sonic_SlopeRepel
0001401C                            
0001401C                            ; ---------------------------------------------------------------------------
0001401C                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001401C                            ; ---------------------------------------------------------------------------
0001401C                            
0001401C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001401C                            
0001401C                            
0001401C                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001401C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014020 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014022 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014024                            
00014024 5400                       		addq.b	#2,d0		; increase angle
00014026 6400                       		bcc.s	loc_13596
00014028 7000                       		moveq	#0,d0
0001402A                            
0001402A                            loc_13596:
0001402A 6000                       		bra.s	loc_1359E
0001402C                            ; ===========================================================================
0001402C                            
0001402C                            loc_13598:
0001402C 5500                       		subq.b	#2,d0		; decrease angle
0001402E 6400                       		bcc.s	loc_1359E
00014030 7000                       		moveq	#0,d0
00014032                            
00014032                            loc_1359E:
00014032 1140 0026                  		move.b	d0,$26(a0)
00014036                            
00014036                            locret_135A2:
00014036 4E75                       		rts	
00014038                            ; End of function Sonic_JumpAngle
00014038                            
00014038                            ; ---------------------------------------------------------------------------
00014038                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014038                            ; ---------------------------------------------------------------------------
00014038                            
00014038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014038                            
00014038                            
00014038                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014038 3228 0010                  		move.w	$10(a0),d1
0001403C 3428 0012                  		move.w	$12(a0),d2
00014040 4EB9 0000 303A             		jsr	(CalcAngle).l
00014046 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001404A 0400 0020                  		subi.b	#$20,d0
0001404E 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014052 0200 00C0                  		andi.b	#$C0,d0
00014056 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001405A 0C00 0040                  		cmpi.b	#$40,d0
0001405E 6700 0000                  		beq.w	loc_13680
00014062 0C00 0080                  		cmpi.b	#$80,d0
00014066 6700 0000                  		beq.w	loc_136E2
0001406A 0C00 00C0                  		cmpi.b	#-$40,d0
0001406E 6700 0000                  		beq.w	loc_1373E
00014072 6100 0000                  		bsr.w	Sonic_HitWall
00014076 4A41                       		tst.w	d1
00014078 6A00                       		bpl.s	loc_135F0
0001407A 9368 0008                  		sub.w	d1,8(a0)
0001407E 317C 0000 0010             		move.w	#0,$10(a0)
00014084                            
00014084                            loc_135F0:
00014084 6100 0000                  		bsr.w	sub_14EB4
00014088 4A41                       		tst.w	d1
0001408A 6A00                       		bpl.s	loc_13602
0001408C D368 0008                  		add.w	d1,8(a0)
00014090 317C 0000 0010             		move.w	#0,$10(a0)
00014096                            
00014096                            loc_13602:
00014096 6100 0000                  		bsr.w	Sonic_HitFloor
0001409A 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001409E 4A41                       		tst.w	d1
000140A0 6A00                       		bpl.s	locret_1367E
000140A2 1428 0012                  		move.b	$12(a0),d2
000140A6 5002                       		addq.b	#8,d2
000140A8 4402                       		neg.b	d2
000140AA B202                       		cmp.b	d2,d1
000140AC 6C00                       		bge.s	loc_1361E
000140AE B002                       		cmp.b	d2,d0
000140B0 6D00                       		blt.s	locret_1367E
000140B2                            
000140B2                            loc_1361E:
000140B2 D368 000C                  		add.w	d1,$C(a0)
000140B6 1143 0026                  		move.b	d3,$26(a0)
000140BA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000140BE 117C 0000 001C             		move.b	#0,$1C(a0)
000140C4 1003                       		move.b	d3,d0
000140C6 0600 0020                  		addi.b	#$20,d0
000140CA 0200 0040                  		andi.b	#$40,d0
000140CE 6600                       		bne.s	loc_1365C
000140D0 1003                       		move.b	d3,d0
000140D2 0600 0010                  		addi.b	#$10,d0
000140D6 0200 0020                  		andi.b	#$20,d0
000140DA 6700                       		beq.s	loc_1364E
000140DC E0E8 0012                  		asr	$12(a0)
000140E0 6000                       		bra.s	loc_13670
000140E2                            ; ===========================================================================
000140E2                            
000140E2                            loc_1364E:
000140E2 317C 0000 0012             		move.w	#0,$12(a0)
000140E8 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140EE 4E75                       		rts	
000140F0                            ; ===========================================================================
000140F0                            
000140F0                            loc_1365C:
000140F0 317C 0000 0010             		move.w	#0,$10(a0)
000140F6 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000140FC 6F00                       		ble.s	loc_13670
000140FE 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014104                            
00014104                            loc_13670:
00014104 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001410A 4A03                       		tst.b	d3
0001410C 6A00                       		bpl.s	locret_1367E
0001410E 4468 0014                  		neg.w	$14(a0)
00014112                            
00014112                            locret_1367E:
00014112 4E75                       		rts	
00014114                            ; ===========================================================================
00014114                            
00014114                            loc_13680:
00014114 6100 0000                  		bsr.w	Sonic_HitWall
00014118 4A41                       		tst.w	d1
0001411A 6A00                       		bpl.s	loc_1369A
0001411C 9368 0008                  		sub.w	d1,8(a0)
00014120 317C 0000 0010             		move.w	#0,$10(a0)
00014126 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001412C 4E75                       		rts	
0001412E                            ; ===========================================================================
0001412E                            
0001412E                            loc_1369A:
0001412E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014132 4A41                       		tst.w	d1
00014134 6A00                       		bpl.s	loc_136B4
00014136 9368 000C                  		sub.w	d1,$C(a0)
0001413A 4A68 0012                  		tst.w	$12(a0)
0001413E 6A00                       		bpl.s	locret_136B2
00014140 317C 0000 0012             		move.w	#0,$12(a0)
00014146                            
00014146                            locret_136B2:
00014146 4E75                       		rts	
00014148                            ; ===========================================================================
00014148                            
00014148                            loc_136B4:
00014148 4A68 0012                  		tst.w	$12(a0)
0001414C 6B00                       		bmi.s	locret_136E0
0001414E 6100 0000                  		bsr.w	Sonic_HitFloor
00014152 4A41                       		tst.w	d1
00014154 6A00                       		bpl.s	locret_136E0
00014156 D368 000C                  		add.w	d1,$C(a0)
0001415A 1143 0026                  		move.b	d3,$26(a0)
0001415E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014162 117C 0000 001C             		move.b	#0,$1C(a0)
00014168 317C 0000 0012             		move.w	#0,$12(a0)
0001416E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014174                            
00014174                            locret_136E0:
00014174 4E75                       		rts	
00014176                            ; ===========================================================================
00014176                            
00014176                            loc_136E2:
00014176 6100 0000                  		bsr.w	Sonic_HitWall
0001417A 4A41                       		tst.w	d1
0001417C 6A00                       		bpl.s	loc_136F4
0001417E 9368 0008                  		sub.w	d1,8(a0)
00014182 317C 0000 0010             		move.w	#0,$10(a0)
00014188                            
00014188                            loc_136F4:
00014188 6100 0000                  		bsr.w	sub_14EB4
0001418C 4A41                       		tst.w	d1
0001418E 6A00                       		bpl.s	loc_13706
00014190 D368 0008                  		add.w	d1,8(a0)
00014194 317C 0000 0010             		move.w	#0,$10(a0)
0001419A                            
0001419A                            loc_13706:
0001419A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001419E 4A41                       		tst.w	d1
000141A0 6A00                       		bpl.s	locret_1373C
000141A2 9368 000C                  		sub.w	d1,$C(a0)
000141A6 1003                       		move.b	d3,d0
000141A8 0600 0020                  		addi.b	#$20,d0
000141AC 0200 0040                  		andi.b	#$40,d0
000141B0 6600                       		bne.s	loc_13726
000141B2 317C 0000 0012             		move.w	#0,$12(a0)
000141B8 4E75                       		rts	
000141BA                            ; ===========================================================================
000141BA                            
000141BA                            loc_13726:
000141BA 1143 0026                  		move.b	d3,$26(a0)
000141BE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141C2 3168 0012 0014             		move.w	$12(a0),$14(a0)
000141C8 4A03                       		tst.b	d3
000141CA 6A00                       		bpl.s	locret_1373C
000141CC 4468 0014                  		neg.w	$14(a0)
000141D0                            
000141D0                            locret_1373C:
000141D0 4E75                       		rts	
000141D2                            ; ===========================================================================
000141D2                            
000141D2                            loc_1373E:
000141D2 6100 0000                  		bsr.w	sub_14EB4
000141D6 4A41                       		tst.w	d1
000141D8 6A00                       		bpl.s	loc_13758
000141DA D368 0008                  		add.w	d1,8(a0)
000141DE 317C 0000 0010             		move.w	#0,$10(a0)
000141E4 3168 0012 0014             		move.w	$12(a0),$14(a0)
000141EA 4E75                       		rts	
000141EC                            ; ===========================================================================
000141EC                            
000141EC                            loc_13758:
000141EC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141F0 4A41                       		tst.w	d1
000141F2 6A00                       		bpl.s	loc_13772
000141F4 9368 000C                  		sub.w	d1,$C(a0)
000141F8 4A68 0012                  		tst.w	$12(a0)
000141FC 6A00                       		bpl.s	locret_13770
000141FE 317C 0000 0012             		move.w	#0,$12(a0)
00014204                            
00014204                            locret_13770:
00014204 4E75                       		rts	
00014206                            ; ===========================================================================
00014206                            
00014206                            loc_13772:
00014206 4A68 0012                  		tst.w	$12(a0)
0001420A 6B00                       		bmi.s	locret_1379E
0001420C 6100 0000                  		bsr.w	Sonic_HitFloor
00014210 4A41                       		tst.w	d1
00014212 6A00                       		bpl.s	locret_1379E
00014214 D368 000C                  		add.w	d1,$C(a0)
00014218 1143 0026                  		move.b	d3,$26(a0)
0001421C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014220 117C 0000 001C             		move.b	#0,$1C(a0)
00014226 317C 0000 0012             		move.w	#0,$12(a0)
0001422C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014232                            
00014232                            locret_1379E:
00014232 4E75                       		rts	
00014234                            ; End of function Sonic_Floor
00014234                            
00014234                            ; ---------------------------------------------------------------------------
00014234                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014234                            ; ---------------------------------------------------------------------------
00014234                            
00014234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014234                            
00014234                            
00014234                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014234 0828 0004 0022             		btst	#4,$22(a0)
0001423A 6700                       		beq.s	loc_137AE
0001423C 4E71                       		nop	
0001423E 4E71                       		nop	
00014240 4E71                       		nop	
00014242                            
00014242                            loc_137AE:
00014242 08A8 0005 0022             		bclr	#5,$22(a0)
00014248 08A8 0001 0022             		bclr	#1,$22(a0)
0001424E 08A8 0004 0022             		bclr	#4,$22(a0)
00014254 0828 0002 0022             		btst	#2,$22(a0)
0001425A 6700                       		beq.s	loc_137E4
0001425C 08A8 0002 0022             		bclr	#2,$22(a0)
00014262 117C 0013 0016             		move.b	#$13,$16(a0)
00014268 117C 0009 0017             		move.b	#9,$17(a0)
0001426E 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014274 5B68 000C                  		subq.w	#5,$C(a0)
00014278                            
00014278                            loc_137E4:
00014278 117C 0000 003C             		move.b	#0,$3C(a0)
0001427E 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014284 4E75                       		rts	
00014286                            ; End of function Sonic_ResetOnFloor
00014286                            
00014286                            ; ===========================================================================
00014286                            ; ---------------------------------------------------------------------------
00014286                            ; Sonic	when he	gets hurt
00014286                            ; ---------------------------------------------------------------------------
00014286                            
00014286                            Obj01_Hurt:				; XREF: Obj01_Index
00014286 4EBA 9D40                  		jsr	SpeedToPos
0001428A 0668 0030 0012             		addi.w	#$30,$12(a0)
00014290 0828 0006 0022             		btst	#6,$22(a0)
00014296 6700                       		beq.s	loc_1380C
00014298 0468 0020 0012             		subi.w	#$20,$12(a0)
0001429E                            
0001429E                            loc_1380C:
0001429E 6100 0000                  		bsr.w	Sonic_HurtStop
000142A2 6100 FAEE                  		bsr.w	Sonic_LevelBound
000142A6 6100 F4B4                  		bsr.w	Sonic_RecordPos
000142AA 6100 0000                  		bsr.w	Sonic_Animate
000142AE 6100 0000                  		bsr.w	LoadSonicDynPLC
000142B2 4EFA 9D3A                  		jmp	DisplaySprite
000142B6                            
000142B6                            ; ---------------------------------------------------------------------------
000142B6                            ; Subroutine to	stop Sonic falling after he's been hurt
000142B6                            ; ---------------------------------------------------------------------------
000142B6                            
000142B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142B6                            
000142B6                            
000142B6                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000142B6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000142BA 0640 00E0                  		addi.w	#$E0,d0
000142BE B068 000C                  		cmp.w	$C(a0),d0
000142C2 6500 0000                  		bcs.w	KillSonic
000142C6 6100 FD70                  		bsr.w	Sonic_Floor
000142CA 0828 0001 0022             		btst	#1,$22(a0)
000142D0 6600                       		bne.s	locret_13860
000142D2 7000                       		moveq	#0,d0
000142D4 3140 0012                  		move.w	d0,$12(a0)
000142D8 3140 0010                  		move.w	d0,$10(a0)
000142DC 3140 0014                  		move.w	d0,$14(a0)
000142E0 117C 0000 001C             		move.b	#0,$1C(a0)
000142E6 5528 0024                  		subq.b	#2,$24(a0)
000142EA 317C 0078 0030             		move.w	#$78,$30(a0)
000142F0                            
000142F0                            locret_13860:
000142F0 4E75                       		rts	
000142F2                            ; End of function Sonic_HurtStop
000142F2                            
000142F2                            ; ===========================================================================
000142F2                            ; ---------------------------------------------------------------------------
000142F2                            ; Sonic	when he	dies
000142F2                            ; ---------------------------------------------------------------------------
000142F2                            
000142F2                            Obj01_Death:				; XREF: Obj01_Index
000142F2 6100 0000                  		bsr.w	GameOver
000142F6 4EBA 9C5E                  		jsr	ObjectFall
000142FA 6100 F460                  		bsr.w	Sonic_RecordPos
000142FE 6100 0000                  		bsr.w	Sonic_Animate
00014302 6100 0000                  		bsr.w	LoadSonicDynPLC
00014306 4EFA 9CE6                  		jmp	DisplaySprite
0001430A                            
0001430A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001430A                            
0001430A                            
0001430A                            GameOver:				; XREF: Obj01_Death
0001430A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001430E 0640 0100                  		addi.w	#$100,d0
00014312 B068 000C                  		cmp.w	$C(a0),d0
00014316 6400 0000                  		bcc.w	locret_13900
0001431A 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014320 5428 0024                  		addq.b	#2,$24(a0)
00014324 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014328 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001432C 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014330 6600                       		bne.s	loc_138D4
00014332 317C 0000 003A             		move.w	#0,$3A(a0)
00014338 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001433E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014344 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001434A 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001434E                            
0001434E                            loc_138C2:
0001434E 303C 008F                  		move.w	#$8F,d0
00014352 4EB9 0000 15CC             		jsr	(PlaySound).l	; play game over music
00014358 7003                       		moveq	#3,d0
0001435A 4EF9 0000 17B6             		jmp	(LoadPLC).l	; load game over patterns
00014360                            ; ===========================================================================
00014360                            
00014360                            loc_138D4:
00014360 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014366 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001436A 6700                       		beq.s	locret_13900	; if not, branch
0001436C 317C 0000 003A             		move.w	#0,$3A(a0)
00014372 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014378 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001437E 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014384 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001438A 60C2                       		bra.s	loc_138C2
0001438C                            ; ===========================================================================
0001438C                            
0001438C                            locret_13900:
0001438C 4E75                       		rts	
0001438E                            ; End of function GameOver
0001438E                            
0001438E                            ; ===========================================================================
0001438E                            ; ---------------------------------------------------------------------------
0001438E                            ; Sonic	when the level is restarted
0001438E                            ; ---------------------------------------------------------------------------
0001438E                            
0001438E                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001438E 4A68 003A                  		tst.w	$3A(a0)
00014392 6700                       		beq.s	locret_13914
00014394 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014398 6600                       		bne.s	locret_13914
0001439A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000143A0                            
000143A0                            locret_13914:
000143A0 4E75                       		rts	
000143A2                            
000143A2                            ; ---------------------------------------------------------------------------
000143A2                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000143A2                            ; ---------------------------------------------------------------------------
000143A2                            
000143A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143A2                            
000143A2                            
000143A2                            Sonic_Loops:				; XREF: Obj01_Control
000143A2                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000143A2                            ;		beq.s	loc_13926	; if yes, branch
000143A2                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
000143A2                            ;		bne.w	locret_139C2	; if not, branch
000143A2                            ;		this is commented out, please do more plane messups id love that
000143A2                            ;loc_13926:
000143A2 3028 000C                  		move.w	$C(a0),d0
000143A6 E248                       		lsr.w	#1,d0
000143A8 0240 0380                  		andi.w	#$380,d0
000143AC 1228 0008                  		move.b	8(a0),d1
000143B0 0241 007F                  		andi.w	#$7F,d1
000143B4 D041                       		add.w	d1,d0
000143B6 43F8 A400                  		lea	($FFFFA400).w,a1
000143BA 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000143BE B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000143C2 6700 FA76                  		beq.w	Obj01_ChkRoll
000143C6 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000143CA 6700 FA6E                  		beq.w	Obj01_ChkRoll
000143CE B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000143D2 6700                       		beq.s	loc_13976
000143D4 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000143D8 6700                       		beq.s	loc_13966
000143DA 08A8 0006 0001             		bclr	#6,1(a0)
000143E0 4E75                       		rts	
000143E2                            ; ===========================================================================
000143E2                            
000143E2                            loc_13966:
000143E2 0828 0001 0022             		btst	#1,$22(a0)
000143E8 6700                       		beq.s	loc_13976
000143EA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000143F0 4E75                       		rts	
000143F2                            ; ===========================================================================
000143F2                            
000143F2                            loc_13976:
000143F2 3428 0008                  		move.w	8(a0),d2
000143F6 0C02 002C                  		cmpi.b	#$2C,d2
000143FA 6400                       		bcc.s	loc_13988
000143FC 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014402 4E75                       		rts	
00014404                            ; ===========================================================================
00014404                            
00014404                            loc_13988:
00014404 0C02 00E0                  		cmpi.b	#-$20,d2
00014408 6500                       		bcs.s	loc_13996
0001440A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014410 4E75                       		rts	
00014412                            ; ===========================================================================
00014412                            
00014412                            loc_13996:
00014412 0828 0006 0001             		btst	#6,1(a0)
00014418 6600                       		bne.s	loc_139B2
0001441A 1228 0026                  		move.b	$26(a0),d1
0001441E 6700                       		beq.s	locret_139C2
00014420 0C01 0080                  		cmpi.b	#-$80,d1
00014424 6200                       		bhi.s	locret_139C2
00014426 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001442C 4E75                       		rts	
0001442E                            ; ===========================================================================
0001442E                            
0001442E                            loc_139B2:
0001442E 1228 0026                  		move.b	$26(a0),d1
00014432 0C01 0080                  		cmpi.b	#-$80,d1
00014436 6300                       		bls.s	locret_139C2
00014438 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001443E                            
0001443E                            locret_139C2:
0001443E 4E75                       		rts	
00014440                            ; End of function Sonic_Loops
00014440                            
00014440                            ; ---------------------------------------------------------------------------
00014440                            ; Subroutine to	animate	Sonic's sprites
00014440                            ; ---------------------------------------------------------------------------
00014440                            
00014440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014440                            
00014440                            Player_Anim:
00014440 0000 0000                  	dc.l	SonicAniData
00014444 0000 0000                  	dc.l	SonicAniData ; gronic
00014448 0000 0000                  	dc.l	SonicAniData ; anakama
0001444C 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
00014450                            
00014450                            	; Insert more animation data for other characters here
00014450                            	
00014450                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014450 7000                       			moveq	#0,d0
00014452 1038 FFE8                  		move.b	(v_character),d0
00014456 E548                       		lsl.w	#2,d0
00014458 43FA FFE6                  		lea 	Player_Anim(pc),a1
0001445C                            		
0001445C 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014460                            	
00014460 7000                       		moveq	#0,d0
00014462 1028 001C                  		move.b	$1C(a0),d0
00014466 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001446A 6700                       		beq.s	SAnim_Do	; if not, branch
0001446C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014470 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014476 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001447C                            
0001447C                            SAnim_Do:
0001447C D040                       		add.w	d0,d0
0001447E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014482 1011                       		move.b	(a1),d0
00014484 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014486 1228 0022                  		move.b	$22(a0),d1
0001448A 0201 0001                  		andi.b	#1,d1
0001448E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014494 8328 0001                  		or.b	d1,1(a0)
00014498 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001449C 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001449E 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000144A2                            
000144A2                            SAnim_Do2:
000144A2 7200                       		moveq	#0,d1
000144A4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000144A8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000144AC 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000144AE                            
000144AE                            SAnim_Next:
000144AE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000144B2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000144B6                            
000144B6                            SAnim_Delay:
000144B6 4E75                       		rts	
000144B8                            ; ===========================================================================
000144B8                            
000144B8                            SAnim_End_FF:
000144B8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000144BA 6600                       		bne.s	SAnim_End_FE	; if not, branch
000144BC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000144C2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000144C6 60E6                       		bra.s	SAnim_Next
000144C8                            ; ===========================================================================
000144C8                            
000144C8                            SAnim_End_FE:
000144C8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000144CA 6600                       		bne.s	SAnim_End_FD	; if not, branch
000144CC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000144D0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000144D4 9200                       		sub.b	d0,d1
000144D6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000144DA 60D2                       		bra.s	SAnim_Next
000144DC                            ; ===========================================================================
000144DC                            
000144DC                            SAnim_End_FD:
000144DC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000144DE 6600                       		bne.s	SAnim_End	; if not, branch
000144E0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000144E6                            
000144E6                            SAnim_End:
000144E6 4E75                       		rts	
000144E8                            ; ===========================================================================
000144E8                            
000144E8                            SAnim_WalkRun:				; XREF: SAnim_Do
000144E8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144EC 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000144EE 5200                       		addq.b	#1,d0		; is animation walking/running?
000144F0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000144F4 7200                       		moveq	#0,d1
000144F6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000144FA 1428 0022                  		move.b	$22(a0),d2
000144FE 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014502 6600                       		bne.s	loc_13A70	; if yes, branch
00014504 4600                       		not.b	d0		; reverse angle
00014506                            
00014506                            loc_13A70:
00014506 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001450A 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001450C 7203                       		moveq	#3,d1
0001450E                            
0001450E                            loc_13A78:
0001450E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014514 B302                       		eor.b	d1,d2
00014516 8528 0001                  		or.b	d2,1(a0)
0001451A 0828 0005 0022             		btst	#5,$22(a0)
00014520 6600 0000                  		bne.w	SAnim_Push
00014524 E808                       		lsr.b	#4,d0		; divide angle by $10
00014526 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001452A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001452E 6A00                       		bpl.s	loc_13A9C
00014530 4442                       		neg.w	d2
00014532                            
00014532                            loc_13A9C:
00014532 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014538 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001453C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001453E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014544 1200                       		move.b	d0,d1
00014546 E209                       		lsr.b	#1,d1
00014548 D001                       		add.b	d1,d0
0001454A                            
0001454A                            loc_13AB4:
0001454A D000                       		add.b	d0,d0
0001454C 1600                       		move.b	d0,d3
0001454E 4442                       		neg.w	d2
00014550 0642 0800                  		addi.w	#$800,d2
00014554 6A00                       		bpl.s	loc_13AC2
00014556 7400                       		moveq	#0,d2
00014558                            
00014558                            loc_13AC2:
00014558 E04A                       		lsr.w	#8,d2
0001455A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001455E 6100 FF42                  		bsr.w	SAnim_Do2
00014562 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014566 4E75                       		rts	
00014568                            ; ===========================================================================
00014568                            
00014568                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014568 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001456A 6600                       		bne.s	SAnim_Push	; if not, branch
0001456C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014570 6A00                       		bpl.s	loc_13ADE
00014572 4442                       		neg.w	d2
00014574                            
00014574                            loc_13ADE:
00014574 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001457A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001457E 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014580 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014586                            
00014586                            loc_13AF0:
00014586 4442                       		neg.w	d2
00014588 0642 0400                  		addi.w	#$400,d2
0001458C 6A00                       		bpl.s	loc_13AFA
0001458E 7400                       		moveq	#0,d2
00014590                            
00014590                            loc_13AFA:
00014590 E04A                       		lsr.w	#8,d2
00014592 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014596 1228 0022                  		move.b	$22(a0),d1
0001459A 0201 0001                  		andi.b	#1,d1
0001459E 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145A4 8328 0001                  		or.b	d1,1(a0)
000145A8 6000 FEF8                  		bra.w	SAnim_Do2
000145AC                            ; ===========================================================================
000145AC                            
000145AC                            SAnim_Push:				; XREF: SAnim_RollJump
000145AC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145B0 6B00                       		bmi.s	loc_13B1E
000145B2 4442                       		neg.w	d2
000145B4                            
000145B4                            loc_13B1E:
000145B4 0642 0800                  		addi.w	#$800,d2
000145B8 6A00                       		bpl.s	loc_13B26
000145BA 7400                       		moveq	#0,d2
000145BC                            
000145BC                            loc_13B26:
000145BC EC4A                       		lsr.w	#6,d2
000145BE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145C2 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000145C8 1228 0022                  		move.b	$22(a0),d1
000145CC 0201 0001                  		andi.b	#1,d1
000145D0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145D6 8328 0001                  		or.b	d1,1(a0)
000145DA 6000 FEC6                  		bra.w	SAnim_Do2
000145DE                            ; End of function Sonic_Animate
000145DE                            
000145DE                            ; ===========================================================================
000145DE                            SonicAniData:
000145DE                            	include "_anim\Sonic.asm"
000145DE                            ; ---------------------------------------------------------------------------
000145DE                            ; Animation script - Sonic
000145DE                            ; ---------------------------------------------------------------------------
000145DE 0000                       		dc.w SonAni_Walk-SonicAniData
000145E0 0000                       		dc.w SonAni_Run-SonicAniData
000145E2 0000                       		dc.w SonAni_Roll-SonicAniData
000145E4 0000                       		dc.w SonAni_Roll2-SonicAniData
000145E6 0000                       		dc.w SonAni_Push-SonicAniData
000145E8 0000                       		dc.w SonAni_Wait-SonicAniData
000145EA 0000                       		dc.w SonAni_Balance-SonicAniData
000145EC 0000                       		dc.w SonAni_LookUp-SonicAniData
000145EE 0000                       		dc.w SonAni_Duck-SonicAniData
000145F0 0000                       		dc.w SonAni_Warp1-SonicAniData
000145F2 0000                       		dc.w SonAni_Warp2-SonicAniData
000145F4 0000                       		dc.w SonAni_Warp3-SonicAniData
000145F6 0000                       		dc.w SonAni_Warp4-SonicAniData
000145F8 0000                       		dc.w SonAni_Stop-SonicAniData
000145FA 0000                       		dc.w SonAni_Float1-SonicAniData
000145FC 0000                       		dc.w SonAni_Float2-SonicAniData
000145FE 0000                       		dc.w SonAni_Spring-SonicAniData
00014600 0000                       		dc.w SonAni_LZHang-SonicAniData
00014602 0000                       		dc.w SonAni_Leap1-SonicAniData
00014604 0000                       		dc.w SonAni_Leap2-SonicAniData
00014606 0000                       		dc.w SonAni_Surf-SonicAniData
00014608 0000                       		dc.w SonAni_Bubble-SonicAniData
0001460A 0000                       		dc.w SonAni_Death1-SonicAniData
0001460C 0000                       		dc.w SonAni_Drown-SonicAniData
0001460E 0000                       		dc.w SonAni_Death2-SonicAniData
00014610 0000                       		dc.w SonAni_Shrink-SonicAniData
00014612 0000                       		dc.w SonAni_Hurt-SonicAniData
00014614 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014616 0000                       		dc.w SonAni_Blank-SonicAniData
00014618 0000                       		dc.w SonAni_Float3-SonicAniData
0001461A 0000                       		dc.w SonAni_Float4-SonicAniData
0001461C FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014626 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001462E FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014636 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001463E FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014646 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001465C 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014660 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014664 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014668 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001466C 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014670 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014674 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014678 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001467C 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014680 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014688 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001468C 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014690 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014696 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001469C 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000146A0 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000146A8 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000146AC 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000146B0 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000146B4 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000146BE 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000146C2 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000146C6 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000146CA 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000146D2 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000146D6                            		even
000146D6                            		even
000146D6                            
000146D6                            ; ---------------------------------------------------------------------------
000146D6                            ; Sonic	pattern	loading	subroutine
000146D6                            ; ---------------------------------------------------------------------------
000146D6                            
000146D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146D6                            Player_DPLC:
000146D6 0000 0000                  	dc.l	SonicDynPLC
000146DA 0000 0000                  	dc.l	SonicDynPLC ; gronic
000146DE 0000 0000                  	dc.l	SonicDynPLC ; anakama
000146E2 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
000146E6                            	; add pointers for player dplc here
000146E6                            Player_Art:
000146E6 0000 0000                  	dc.l	Art_Sonic
000146EA 0000 0000                  	dc.l	Art_Sonic ; gronic
000146EE 0000 0000                  	dc.l	Art_Sonic ; anakama
000146F2 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
000146F6                            	; add pointers for player art here
000146F6                            
000146F6                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000146F6 7000                       		moveq	#0,d0
000146F8 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000146FC B038 F766                  		cmp.b	($FFFFF766).w,d0
00014700 6700                       		beq.s	locret_13C96
00014702 11C0 F766                  		move.b	d0,($FFFFF766).w
00014706                            		
00014706 323C 0000                  		move.w	#0,d1
0001470A 1238 FFE8                  		move.b	(v_character),d1
0001470E E549                       		lsl.w	#2,d1
00014710 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014714                            
00014714 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014718                            		
00014718 D040                       		add.w	d0,d0
0001471A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001471E 7200                       		moveq	#0,d1
00014720 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014722 5301                       		subq.b	#1,d1
00014724 6B00                       		bmi.s	locret_13C96
00014726 47F8 C800                  		lea	($FFFFC800).w,a3
0001472A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014730                            
00014730                            SPLC_ReadEntry:
00014730 303C 0000                  		move.w	#0,d0
00014734 1038 FFE8                  		move.b	(v_character),d0
00014738 E548                       		lsl.w	#2,d0
0001473A 43FA FFAA                  		lea 	Player_Art(pc),a1
0001473E                            
0001473E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014742                            
00014742 7400                       		moveq	#0,d2
00014744 141A                       		move.b	(a2)+,d2
00014746 3002                       		move.w	d2,d0
00014748 E808                       		lsr.b	#4,d0
0001474A E14A                       		lsl.w	#8,d2
0001474C 141A                       		move.b	(a2)+,d2
0001474E EB4A                       		lsl.w	#5,d2
00014750 D3C2                       		adda.l	d2,a1
00014752                            
00014752                            SPLC_LoadTile:
00014752 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014756 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001475A 47EB 0020                  		lea	$20(a3),a3	; next tile
0001475E 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014762                            
00014762 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014766                            
00014766                            locret_13C96:
00014766 4E75                       		rts	
00014768                            ; End of function LoadSonicDynPLC
00014768                            
00014768                            ; ===========================================================================
00014768                            ; ---------------------------------------------------------------------------
00014768                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014768                            ; ---------------------------------------------------------------------------
00014768                            
00014768                            Obj0A:					; XREF: Obj_Index
00014768 7000                       		moveq	#0,d0
0001476A 1028 0024                  		move.b	$24(a0),d0
0001476E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014772 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014776                            ; ===========================================================================
00014776 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001477A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001477E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014782 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014786 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014788                            ; ===========================================================================
00014788                            
00014788                            Obj0A_Main:				; XREF: Obj0A_Index
00014788 5428 0024                  		addq.b	#2,$24(a0)
0001478C 217C 0001 3380 0004        		move.l	#Map_obj64,4(a0)
00014794 317C 8348 0002             		move.w	#$8348,2(a0)
0001479A 117C 0084 0001             		move.b	#$84,1(a0)
000147A0 117C 0010 0019             		move.b	#$10,$19(a0)
000147A6 117C 0001 0018             		move.b	#1,$18(a0)
000147AC 1028 0028                  		move.b	$28(a0),d0
000147B0 6A00                       		bpl.s	loc_13D00
000147B2 5028 0024                  		addq.b	#8,$24(a0)
000147B6 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000147BE 317C 0440 0002             		move.w	#$440,2(a0)
000147C4 0240 007F                  		andi.w	#$7F,d0
000147C8 1140 0033                  		move.b	d0,$33(a0)
000147CC 6000 0000                  		bra.w	Obj0A_Countdown
000147D0                            ; ===========================================================================
000147D0                            
000147D0                            loc_13D00:
000147D0 1140 001C                  		move.b	d0,$1C(a0)
000147D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000147DA 317C FF78 0012             		move.w	#-$88,$12(a0)
000147E0                            
000147E0                            Obj0A_Animate:				; XREF: Obj0A_Index
000147E0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000147E6 4EB9 0000 B04C             		jsr	AnimateSprite
000147EC                            
000147EC                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000147EC 3038 F646                  		move.w	($FFFFF646).w,d0
000147F0 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000147F4 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000147F6 117C 0006 0024             		move.b	#6,$24(a0)
000147FC 5E28 001C                  		addq.b	#7,$1C(a0)
00014800 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014806 6700                       		beq.s	Obj0A_Display
00014808 6000                       		bra.s	Obj0A_Display
0001480A                            ; ===========================================================================
0001480A                            
0001480A                            Obj0A_Wobble:
0001480A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001480E 6700                       		beq.s	loc_13D44
00014810 5868 0030                  		addq.w	#4,$30(a0)
00014814                            
00014814                            loc_13D44:
00014814 1028 0026                  		move.b	$26(a0),d0
00014818 5228 0026                  		addq.b	#1,$26(a0)
0001481C 0240 007F                  		andi.w	#$7F,d0
00014820 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014826 1031 0000                  		move.b	(a1,d0.w),d0
0001482A 4880                       		ext.w	d0
0001482C D068 0030                  		add.w	$30(a0),d0
00014830 3140 0008                  		move.w	d0,8(a0)
00014834 6100                       		bsr.s	Obj0A_ShowNumber
00014836 4EBA 9790                  		jsr	SpeedToPos
0001483A 4A28 0001                  		tst.b	1(a0)
0001483E 6A00                       		bpl.s	Obj0A_Delete
00014840 4EFA 97AC                  		jmp	DisplaySprite
00014844                            ; ===========================================================================
00014844                            
00014844                            Obj0A_Delete:
00014844 4EFA 97E4                  		jmp	DeleteObject
00014848                            ; ===========================================================================
00014848                            
00014848                            Obj0A_Display:				; XREF: Obj0A_Index
00014848 6100                       		bsr.s	Obj0A_ShowNumber
0001484A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014850 4EB9 0000 B04C             		jsr	AnimateSprite
00014856 4EFA 9796                  		jmp	DisplaySprite
0001485A                            ; ===========================================================================
0001485A                            
0001485A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001485A 4EFA 97CE                  		jmp	DeleteObject
0001485E                            ; ===========================================================================
0001485E                            
0001485E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001485E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014864 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014866 5368 0038                  		subq.w	#1,$38(a0)
0001486A 6600                       		bne.s	Obj0A_Display2
0001486C 117C 000E 0024             		move.b	#$E,$24(a0)
00014872 5E28 001C                  		addq.b	#7,$1C(a0)
00014876 60D0                       		bra.s	Obj0A_Display
00014878                            ; ===========================================================================
00014878                            
00014878                            Obj0A_Display2:
00014878 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001487E 4EB9 0000 B04C             		jsr	AnimateSprite
00014884 4A28 0001                  		tst.b	1(a0)
00014888 6A00                       		bpl.s	Obj0A_Delete3
0001488A 4EFA 9762                  		jmp	DisplaySprite
0001488E                            ; ===========================================================================
0001488E                            
0001488E                            Obj0A_Delete3:
0001488E 4EFA 979A                  		jmp	DeleteObject
00014892                            ; ===========================================================================
00014892                            
00014892                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014892 4A68 0038                  		tst.w	$38(a0)
00014896 6700                       		beq.s	locret_13E1A
00014898 5368 0038                  		subq.w	#1,$38(a0)
0001489C 6600                       		bne.s	locret_13E1A
0001489E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000148A4 6400                       		bcc.s	locret_13E1A
000148A6 317C 000F 0038             		move.w	#$F,$38(a0)
000148AC 4268 0012                  		clr.w	$12(a0)
000148B0 117C 0080 0001             		move.b	#$80,1(a0)
000148B6 3028 0008                  		move.w	8(a0),d0
000148BA 9078 F700                  		sub.w	($FFFFF700).w,d0
000148BE 0640 0080                  		addi.w	#$80,d0
000148C2 3140 0008                  		move.w	d0,8(a0)
000148C6 3028 000C                  		move.w	$C(a0),d0
000148CA 9078 F704                  		sub.w	($FFFFF704).w,d0
000148CE 0640 0080                  		addi.w	#$80,d0
000148D2 3140 000A                  		move.w	d0,$A(a0)
000148D6 117C 000C 0024             		move.b	#$C,$24(a0)
000148DC                            
000148DC                            locret_13E1A:
000148DC 4E75                       		rts	
000148DE                            ; ===========================================================================
000148DE                            Obj0A_WobbleData:
000148DE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000148EF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014900 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014911 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014921 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001492E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001493B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014948 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014955 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001495E                            ; ===========================================================================
0001495E                            
0001495E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001495E 4A68 002C                  		tst.w	$2C(a0)
00014962 6600 0000                  		bne.w	loc_13F86
00014966 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001496C 6400 0000                  		bcc.w	locret_1408C
00014970 0838 0006 D022             		btst	#6,($FFFFD022).w
00014976 6700 0000                  		beq.w	locret_1408C
0001497A 5368 0038                  		subq.w	#1,$38(a0)
0001497E 6A00 0000                  		bpl.w	loc_13FAC
00014982 317C 003B 0038             		move.w	#59,$38(a0)
00014988 317C 0001 0036             		move.w	#1,$36(a0)
0001498E 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014994 0240 0001                  		andi.w	#1,d0
00014998 1140 0034                  		move.b	d0,$34(a0)
0001499C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000149A0 0C40 0019                  		cmpi.w	#$19,d0
000149A4 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000149A6 0C40 0014                  		cmpi.w	#$14,d0
000149AA 6700                       		beq.s	Obj0A_WarnSound
000149AC 0C40 000F                  		cmpi.w	#$F,d0
000149B0 6700                       		beq.s	Obj0A_WarnSound
000149B2 0C40 000C                  		cmpi.w	#$C,d0
000149B6 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000149B8 6600                       		bne.s	loc_13F02
000149BA 303C 0092                  		move.w	#$92,d0
000149BE 4EB9 0000 15CC             		jsr	(PlaySound).l	; play countdown music
000149C4                            
000149C4                            loc_13F02:
000149C4 5328 0032                  		subq.b	#1,$32(a0)
000149C8 6A00                       		bpl.s	Obj0A_ReduceAir
000149CA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000149D0 08E8 0007 0036             		bset	#7,$36(a0)
000149D6 6000                       		bra.s	Obj0A_ReduceAir
000149D8                            ; ===========================================================================
000149D8                            
000149D8                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000149D8 303C 00C2                  		move.w	#$C2,d0
000149DC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000149E2                            
000149E2                            Obj0A_ReduceAir:
000149E2 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000149E6 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000149EA 6100 0000                  		bsr.w	ResumeMusic
000149EE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000149F4 303C 00B2                  		move.w	#$B2,d0
000149F8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play drowning sound
000149FE 117C 000A 0034             		move.b	#$A,$34(a0)
00014A04 317C 0001 0036             		move.w	#1,$36(a0)
00014A0A 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A10 2F08                       		move.l	a0,-(sp)
00014A12 41F8 D000                  		lea	($FFFFD000).w,a0
00014A16 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A1A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A20 08E8 0001 0022             		bset	#1,$22(a0)
00014A26 08E8 0007 0002             		bset	#7,2(a0)
00014A2C 317C 0000 0012             		move.w	#0,$12(a0)
00014A32 317C 0000 0010             		move.w	#0,$10(a0)
00014A38 317C 0000 0014             		move.w	#0,$14(a0)
00014A3E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014A44 205F                       		movea.l	(sp)+,a0
00014A46 4E75                       		rts	
00014A48                            ; ===========================================================================
00014A48                            
00014A48                            loc_13F86:
00014A48 5368 002C                  		subq.w	#1,$2C(a0)
00014A4C 6600                       		bne.s	loc_13F94
00014A4E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014A54 4E75                       		rts	
00014A56                            ; ===========================================================================
00014A56                            
00014A56                            loc_13F94:
00014A56 2F08                       		move.l	a0,-(sp)
00014A58 41F8 D000                  		lea	($FFFFD000).w,a0
00014A5C 4EBA 956A                  		jsr	SpeedToPos
00014A60 0668 0010 0012             		addi.w	#$10,$12(a0)
00014A66 205F                       		movea.l	(sp)+,a0
00014A68 6000                       		bra.s	loc_13FAC
00014A6A                            ; ===========================================================================
00014A6A                            
00014A6A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014A6A 6000                       		bra.s	Obj0A_MakeItem
00014A6C                            ; ===========================================================================
00014A6C                            
00014A6C                            loc_13FAC:
00014A6C 4A68 0036                  		tst.w	$36(a0)
00014A70 6700 0000                  		beq.w	locret_1408C
00014A74 5368 003A                  		subq.w	#1,$3A(a0)
00014A78 6A00 0000                  		bpl.w	locret_1408C
00014A7C                            
00014A7C                            Obj0A_MakeItem:
00014A7C 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014A82 0240 000F                  		andi.w	#$F,d0
00014A86 3140 003A                  		move.w	d0,$3A(a0)
00014A8A 4EBA 99E8                  		jsr	SingleObjLoad
00014A8E 6600 0000                  		bne.w	locret_1408C
00014A92 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014A96 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014A9C 7006                       		moveq	#6,d0
00014A9E 0838 0000 D022             		btst	#0,($FFFFD022).w
00014AA4 6700                       		beq.s	loc_13FF2
00014AA6 4440                       		neg.w	d0
00014AA8 137C 0040 0026             		move.b	#$40,$26(a1)
00014AAE                            
00014AAE                            loc_13FF2:
00014AAE D169 0008                  		add.w	d0,8(a1)
00014AB2 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014AB8 137C 0006 0028             		move.b	#6,$28(a1)
00014ABE 4A68 002C                  		tst.w	$2C(a0)
00014AC2 6700 0000                  		beq.w	loc_1403E
00014AC6 0268 0007 003A             		andi.w	#7,$3A(a0)
00014ACC 0668 0000 003A             		addi.w	#0,$3A(a0)
00014AD2 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014AD6 0440 000C                  		subi.w	#$C,d0
00014ADA 3340 000C                  		move.w	d0,$C(a1)
00014ADE 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014AE4 1340 0026                  		move.b	d0,$26(a1)
00014AE8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014AEC 0200 0003                  		andi.b	#3,d0
00014AF0 6600                       		bne.s	loc_14082
00014AF2 137C 000E 0028             		move.b	#$E,$28(a1)
00014AF8 6000                       		bra.s	loc_14082
00014AFA                            ; ===========================================================================
00014AFA                            
00014AFA                            loc_1403E:
00014AFA 0828 0007 0036             		btst	#7,$36(a0)
00014B00 6700                       		beq.s	loc_14082
00014B02 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B06 E24A                       		lsr.w	#1,d2
00014B08 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014B0E 0240 0003                  		andi.w	#3,d0
00014B12 6600                       		bne.s	loc_1406A
00014B14 08E8 0006 0036             		bset	#6,$36(a0)
00014B1A 6600                       		bne.s	loc_14082
00014B1C 1342 0028                  		move.b	d2,$28(a1)
00014B20 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B26                            
00014B26                            loc_1406A:
00014B26 4A28 0034                  		tst.b	$34(a0)
00014B2A 6600                       		bne.s	loc_14082
00014B2C 08E8 0006 0036             		bset	#6,$36(a0)
00014B32 6600                       		bne.s	loc_14082
00014B34 1342 0028                  		move.b	d2,$28(a1)
00014B38 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B3E                            
00014B3E                            loc_14082:
00014B3E 5328 0034                  		subq.b	#1,$34(a0)
00014B42 6A00                       		bpl.s	locret_1408C
00014B44 4268 0036                  		clr.w	$36(a0)
00014B48                            
00014B48                            locret_1408C:
00014B48 4E75                       		rts	
00014B4A                            
00014B4A                            ; ---------------------------------------------------------------------------
00014B4A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014B4A                            ; ---------------------------------------------------------------------------
00014B4A                            
00014B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B4A                            
00014B4A                            
00014B4A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014B4A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014B50                             
00014B50                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014B50                             
00014B50 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014B54                             
00014B54 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014B5A 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014B5C 43F9 0000 3D90             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014B62 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B64                             
00014B64                            Air_GetBgm2:
00014B64 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014B6A 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014B6C 43F9 0000 3D98             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014B72 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B74                             
00014B74                            Air_GetBgm3:
00014B74 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014B7A 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014B7C 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014B82 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B84                             
00014B84                            Air_GetBgm4:
00014B84 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014B8A 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014B8C 43F9 0000 3DA4             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014B92                             
00014B92                            Air_PlayMusic:
00014B92 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014B96                             
00014B96                            loc_140A6:
00014B96 4EB9 0000 15CC             		jsr	(PlaySound).l
00014B9C                             
00014B9C                            ; NineKode ends here
00014B9C                            
00014B9C                            loc_140AC:
00014B9C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014BA2 4238 D372                  		clr.b	($FFFFD372).w
00014BA6 4E75                       		rts	
00014BA8                            ; End of function ResumeMusic
00014BA8                            
00014BA8                            ; ===========================================================================
00014BA8                            Ani_obj0A:
00014BA8                            	include "_anim\obj0A.asm"
00014BA8                            ; ---------------------------------------------------------------------------
00014BA8                            ; Animation script - countdown numbers and bubbles (LZ)
00014BA8                            ; ---------------------------------------------------------------------------
00014BA8 0000                       		dc.w byte_140D6-Ani_obj0A
00014BAA 0000                       		dc.w byte_140E0-Ani_obj0A
00014BAC 0000                       		dc.w byte_140EA-Ani_obj0A
00014BAE 0000                       		dc.w byte_140F4-Ani_obj0A
00014BB0 0000                       		dc.w byte_140FE-Ani_obj0A
00014BB2 0000                       		dc.w byte_14108-Ani_obj0A
00014BB4 0000                       		dc.w byte_14112-Ani_obj0A
00014BB6 0000                       		dc.w byte_14118-Ani_obj0A
00014BB8 0000                       		dc.w byte_14120-Ani_obj0A
00014BBA 0000                       		dc.w byte_14128-Ani_obj0A
00014BBC 0000                       		dc.w byte_14130-Ani_obj0A
00014BBE 0000                       		dc.w byte_14138-Ani_obj0A
00014BC0 0000                       		dc.w byte_14140-Ani_obj0A
00014BC2 0000                       		dc.w byte_14148-Ani_obj0A
00014BC4 0000                       		dc.w byte_1414A-Ani_obj0A
00014BC6 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014BD0 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014BDA 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014BE4 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014BEE 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014BF8 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C02 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C08 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C10 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C18 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C20 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C28 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C30 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C38 0EFC                       byte_14148:	dc.b $E, $FC
00014C3A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014C40                            		even
00014C40                            		even
00014C40                            
00014C40                            ; ---------------------------------------------------------------------------
00014C40                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C40                            ; ---------------------------------------------------------------------------
00014C40                            Map_obj0A:
00014C40                            	include "_maps\obj0A.asm"
00014C40                            ; ---------------------------------------------------------------------------
00014C40                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C40                            ; ---------------------------------------------------------------------------
00014C40 0000                       		dc.w byte_14152-Map_obj0A
00014C42 01                         byte_14152:	dc.b 1
00014C43 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014C48                            		even
00014C48                            		even
00014C48                            
00014C48                            ; ===========================================================================
00014C48                            ; ---------------------------------------------------------------------------
00014C48                            ; Object 38 - shield and invincibility stars
00014C48                            ; ---------------------------------------------------------------------------
00014C48                            
00014C48                            Obj38:					; XREF: Obj_Index
00014C48 7000                       		moveq	#0,d0
00014C4A 1028 0024                  		move.b	$24(a0),d0
00014C4E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014C52 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014C56                            ; ===========================================================================
00014C56 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014C58 0000                       		dc.w Obj38_Shield-Obj38_Index
00014C5A 0000                       		dc.w Obj38_Stars-Obj38_Index
00014C5C                            ; ===========================================================================
00014C5C                            
00014C5C                            Obj38_Main:				; XREF: Obj38_Index
00014C5C 5428 0024                  		addq.b	#2,$24(a0)
00014C60 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014C68 117C 0004 0001             		move.b	#4,1(a0)
00014C6E 117C 0001 0018             		move.b	#1,$18(a0)
00014C74 117C 0010 0019             		move.b	#$10,$19(a0)
00014C7A 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014C7E 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014C80 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014C86 4E75                       		rts	
00014C88                            ; ===========================================================================
00014C88                            
00014C88                            Obj38_DoStars:
00014C88 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014C8C 317C 055C 0002             		move.w	#$55C,2(a0)
00014C92 4E75                       		rts	
00014C94                            ; ===========================================================================
00014C94                            
00014C94                            Obj38_Shield:				; XREF: Obj38_Index
00014C94 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014C98 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014C9A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014C9E 6700                       		beq.s	Obj38_Delete	; if not, branch
00014CA0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014CA6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014CAC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014CB2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014CB8 4EB9 0000 B04C             		jsr	AnimateSprite
00014CBE 4EFA 932E                  		jmp	DisplaySprite
00014CC2                            ; ===========================================================================
00014CC2                            
00014CC2                            Obj38_RmvShield:
00014CC2 4E75                       		rts	
00014CC4                            ; ===========================================================================
00014CC4                            
00014CC4                            Obj38_Delete:
00014CC4 4EFA 9364                  		jmp	DeleteObject
00014CC8                            ; ===========================================================================
00014CC8                            
00014CC8                            Obj38_Stars:				; XREF: Obj38_Index
00014CC8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CCC 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014CCE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014CD2 1228 001C                  		move.b	$1C(a0),d1
00014CD6 5301                       		subq.b	#1,d1
00014CD8 6000                       		bra.s	Obj38_StarTrail
00014CDA                            ; ===========================================================================
00014CDA E909                       		lsl.b	#4,d1
00014CDC 5801                       		addq.b	#4,d1
00014CDE 9001                       		sub.b	d1,d0
00014CE0 1228 0030                  		move.b	$30(a0),d1
00014CE4 9001                       		sub.b	d1,d0
00014CE6 5801                       		addq.b	#4,d1
00014CE8 0201 000F                  		andi.b	#$F,d1
00014CEC 1141 0030                  		move.b	d1,$30(a0)
00014CF0 6000                       		bra.s	Obj38_StarTrail2a
00014CF2                            ; ===========================================================================
00014CF2                            
00014CF2                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014CF2 E709                       		lsl.b	#3,d1
00014CF4 1401                       		move.b	d1,d2
00014CF6 D201                       		add.b	d1,d1
00014CF8 D202                       		add.b	d2,d1
00014CFA 5801                       		addq.b	#4,d1
00014CFC 9001                       		sub.b	d1,d0
00014CFE 1228 0030                  		move.b	$30(a0),d1
00014D02 9001                       		sub.b	d1,d0
00014D04 5801                       		addq.b	#4,d1
00014D06 0C01 0018                  		cmpi.b	#$18,d1
00014D0A 6500                       		bcs.s	Obj38_StarTrail2
00014D0C 7200                       		moveq	#0,d1
00014D0E                            
00014D0E                            Obj38_StarTrail2:
00014D0E 1141 0030                  		move.b	d1,$30(a0)
00014D12                            
00014D12                            Obj38_StarTrail2a:
00014D12 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D16 43F1 0000                  		lea	(a1,d0.w),a1
00014D1A 3159 0008                  		move.w	(a1)+,8(a0)
00014D1E 3159 000C                  		move.w	(a1)+,$C(a0)
00014D22 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D28 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D2E 4EB9 0000 B04C             		jsr	AnimateSprite
00014D34 4EFA 92B8                  		jmp	DisplaySprite
00014D38                            ; ===========================================================================
00014D38                            
00014D38                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D38 4EFA 92F0                  		jmp	DeleteObject
00014D3C                            ; ===========================================================================
00014D3C                            ; ---------------------------------------------------------------------------
00014D3C                            ; Object 4A - special stage entry from beta
00014D3C                            ; ---------------------------------------------------------------------------
00014D3C                            
00014D3C                            Obj4A:					; XREF: Obj_Index
00014D3C 7000                       		moveq	#0,d0
00014D3E 1028 0024                  		move.b	$24(a0),d0
00014D42 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014D46 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014D4A                            ; ===========================================================================
00014D4A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014D4C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014D4E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014D50                            ; ===========================================================================
00014D50                            
00014D50                            Obj4A_Main:				; XREF: Obj4A_Index
00014D50 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014D54 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014D56 4E75                       		rts	
00014D58                            ; ===========================================================================
00014D58                            
00014D58                            Obj4A_Main2:
00014D58 5428 0024                  		addq.b	#2,$24(a0)
00014D5C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014D64 117C 0004 0001             		move.b	#4,1(a0)
00014D6A 117C 0001 0018             		move.b	#1,$18(a0)
00014D70 117C 0038 0019             		move.b	#$38,$19(a0)
00014D76 317C 0541 0002             		move.w	#$541,2(a0)
00014D7C 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014D82                            
00014D82                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014D82 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014D88 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014D8E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D94 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014D9A 4EB9 0000 B04C             		jsr	AnimateSprite
00014DA0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014DA6 6600                       		bne.s	Obj4A_Display
00014DA8 4A38 D000                  		tst.b	($FFFFD000).w
00014DAC 6700                       		beq.s	Obj4A_Display
00014DAE 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014DB4 303C 00A8                  		move.w	#$A8,d0
00014DB8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014DBE                            
00014DBE                            Obj4A_Display:
00014DBE 4EFA 922E                  		jmp	DisplaySprite
00014DC2                            ; ===========================================================================
00014DC2                            
00014DC2                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014DC2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014DC6 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014DC8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014DCE 4EFA 925A                  		jmp	DeleteObject
00014DD2                            ; ===========================================================================
00014DD2                            
00014DD2                            Obj4A_Wait:
00014DD2 4E75                       		rts	
00014DD4                            ; ===========================================================================
00014DD4                            ; ---------------------------------------------------------------------------
00014DD4                            ; Object 08 - water splash (LZ)
00014DD4                            ; ---------------------------------------------------------------------------
00014DD4                            
00014DD4                            Obj08:					; XREF: Obj_Index
00014DD4 7000                       		moveq	#0,d0
00014DD6 1028 0024                  		move.b	$24(a0),d0
00014DDA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014DDE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014DE2                            ; ===========================================================================
00014DE2 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014DE4 0000                       		dc.w Obj08_Display-Obj08_Index
00014DE6 0000                       		dc.w Obj08_Delete-Obj08_Index
00014DE8                            ; ===========================================================================
00014DE8                            
00014DE8                            Obj08_Main:				; XREF: Obj08_Index
00014DE8 5428 0024                  		addq.b	#2,$24(a0)
00014DEC 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014DF4 0028 0004 0001             		ori.b	#4,1(a0)
00014DFA 117C 0001 0018             		move.b	#1,$18(a0)
00014E00 117C 0010 0019             		move.b	#$10,$19(a0)
00014E06 317C 4259 0002             		move.w	#$4259,2(a0)
00014E0C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E12                            
00014E12                            Obj08_Display:				; XREF: Obj08_Index
00014E12 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E18 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E1E 4EB9 0000 B04C             		jsr	AnimateSprite
00014E24 4EFA 91C8                  		jmp	DisplaySprite
00014E28                            ; ===========================================================================
00014E28                            
00014E28                            Obj08_Delete:				; XREF: Obj08_Index
00014E28 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014E2C                            ; ===========================================================================
00014E2C                            Ani_obj38:
00014E2C                            	include "_anim\obj38.asm"
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C                            ; Animation script - shield and invincibility stars
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C 0000                       		dc.w byte_14356-Ani_obj38
00014E2E 0000                       		dc.w byte_1435E-Ani_obj38
00014E30 0000                       		dc.w byte_14364-Ani_obj38
00014E32 0000                       		dc.w byte_1437E-Ani_obj38
00014E34 0000                       		dc.w byte_14398-Ani_obj38
00014E36 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014E3E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014E44 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014E55 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014E5E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014E6F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014E78 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014E89 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014E92                            		even
00014E92                            		even
00014E92                            
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; Sprite mappings - shield and invincibility stars
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            Map_obj38:
00014E92                            	include "_maps\obj38.asm"
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; Sprite mappings - shield and invincibility stars
00014E92                            ; ---------------------------------------------------------------------------
00014E92 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014E96 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014E9A 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014E9E 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014EA2 04                         byte_143C2:	dc.b 4
00014EA3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EA8 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EAD 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014EB2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014EB7 04                         byte_143D7:	dc.b 4
00014EB8 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014EBD E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014EC2 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014EC7 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014ECC 04                         byte_143EC:	dc.b 4
00014ECD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014ED2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014ED7 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014EDC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014EE1 04                         byte_14401:	dc.b 4
00014EE2 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EE7 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EEC 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014EF1 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014EF6 04                         byte_14416:	dc.b 4
00014EF7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014EFC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F01 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F06 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F0B 04                         byte_1442B:	dc.b 4
00014F0C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F11 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F16 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F1B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F20 04                         byte_14440:	dc.b 4
00014F21 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F26 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F2B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F30 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F36 00                         		even
00014F36 00                         		even
00014F36                            
00014F36                            Ani_obj4A:
00014F36                            	include "_anim\obj4A.asm"
00014F36                            ; ---------------------------------------------------------------------------
00014F36                            ; Animation script - special stage entry effect from beta
00014F36                            ; ---------------------------------------------------------------------------
00014F36 0000                       		dc.w byte_14458-Ani_obj4A
00014F38 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014F4C                            		even
00014F4C                            		even
00014F4C                            
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C                            ; Sprite mappings - special stage entry	from beta
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C                            Map_obj4A:
00014F4C                            	include "_maps\obj4A.asm"
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C                            ; Sprite mappings - special stage entry	from beta
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014F50 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014F54 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014F58 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014F5C 03                         byte_1447C:	dc.b 3
00014F5D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014F62 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014F67 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014F6C 03                         byte_1448C:	dc.b 3
00014F6D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014F72 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014F77 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014F7C 05                         byte_1449C:	dc.b 5
00014F7D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014F82 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014F87 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014F8C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014F91 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014F96 09                         byte_144B6:	dc.b 9
00014F97 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014F9C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014FA1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014FA6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014FAB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014FB0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014FB5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014FBA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014FBF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014FC4 12                         byte_144E4:	dc.b $12
00014FC5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014FCA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014FCF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014FD4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014FD9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014FDE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014FE3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014FE8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014FED 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014FF2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014FF7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014FFC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015001 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015006 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001500B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015010 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015015 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001501A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001501F 11                         byte_1453F:	dc.b $11
00015020 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015025 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001502A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001502F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015034 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015039 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001503E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015043 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015048 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001504D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015052 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015057 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001505C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015061 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015066 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001506B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015070 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015075 09                         byte_14595:	dc.b 9
00015076 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001507B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015080 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015085 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001508A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001508F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015094 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015099 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001509E 04                         		dc.b 4
0001509F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000150A4                            		even
000150A4                            		even
000150A4                            
000150A4                            Ani_obj08:
000150A4                            	include "_anim\obj08.asm"
000150A4                            ; ---------------------------------------------------------------------------
000150A4                            ; Animation script - water splash (LZ)
000150A4                            ; ---------------------------------------------------------------------------
000150A4 0000                       		dc.w byte_145C6-Ani_obj08
000150A6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000150AC                            		even
000150AC                            		even
000150AC                            
000150AC                            ; ---------------------------------------------------------------------------
000150AC                            ; Sprite mappings - water splash (LZ)
000150AC                            ; ---------------------------------------------------------------------------
000150AC                            Map_obj08:
000150AC                            	include "_maps\obj08.asm"
000150AC                            ; ---------------------------------------------------------------------------
000150AC                            ; Sprite mappings - water splash (LZ)
000150AC                            ; ---------------------------------------------------------------------------
000150AC 0000                       		dc.w byte_145D2-Map_obj08
000150AE 0000                       		dc.w byte_145DD-Map_obj08
000150B0 0000                       		dc.w byte_145E8-Map_obj08
000150B2 02                         byte_145D2:	dc.b 2
000150B3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000150B8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000150BD 02                         byte_145DD:	dc.b 2
000150BE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000150C3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000150C8 01                         byte_145E8:	dc.b 1
000150C9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000150CE                            		even
000150CE                            		even
000150CE                            
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            
000150CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150CE                            
000150CE                            
000150CE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000150CE 0828 0003 0022             		btst	#3,$22(a0)
000150D4 6700                       		beq.s	loc_14602
000150D6 7000                       		moveq	#0,d0
000150D8 11C0 F768                  		move.b	d0,($FFFFF768).w
000150DC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150E0 4E75                       		rts	
000150E2                            ; ===========================================================================
000150E2                            
000150E2                            loc_14602:
000150E2 7003                       		moveq	#3,d0
000150E4 11C0 F768                  		move.b	d0,($FFFFF768).w
000150E8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150EC 1028 0026                  		move.b	$26(a0),d0
000150F0 0600 0020                  		addi.b	#$20,d0
000150F4 6A00                       		bpl.s	loc_14624
000150F6 1028 0026                  		move.b	$26(a0),d0
000150FA 6A00                       		bpl.s	loc_1461E
000150FC 5300                       		subq.b	#1,d0
000150FE                            
000150FE                            loc_1461E:
000150FE 0600 0020                  		addi.b	#$20,d0
00015102 6000                       		bra.s	loc_14630
00015104                            ; ===========================================================================
00015104                            
00015104                            loc_14624:
00015104 1028 0026                  		move.b	$26(a0),d0
00015108 6A00                       		bpl.s	loc_1462C
0001510A 5200                       		addq.b	#1,d0
0001510C                            
0001510C                            loc_1462C:
0001510C 0600 001F                  		addi.b	#$1F,d0
00015110                            
00015110                            loc_14630:
00015110 0200 00C0                  		andi.b	#$C0,d0
00015114 0C00 0040                  		cmpi.b	#$40,d0
00015118 6700 0000                  		beq.w	Sonic_WalkVertL
0001511C 0C00 0080                  		cmpi.b	#$80,d0
00015120 6700 0000                  		beq.w	Sonic_WalkCeiling
00015124 0C00 00C0                  		cmpi.b	#$C0,d0
00015128 6700 0000                  		beq.w	Sonic_WalkVertR
0001512C 3428 000C                  		move.w	$C(a0),d2
00015130 3628 0008                  		move.w	8(a0),d3
00015134 7000                       		moveq	#0,d0
00015136 1028 0016                  		move.b	$16(a0),d0
0001513A 4880                       		ext.w	d0
0001513C D440                       		add.w	d0,d2
0001513E 1028 0017                  		move.b	$17(a0),d0
00015142 4880                       		ext.w	d0
00015144 D640                       		add.w	d0,d3
00015146 49F8 F768                  		lea	($FFFFF768).w,a4
0001514A 367C 0010                  		movea.w	#$10,a3
0001514E 3C3C 0000                  		move.w	#0,d6
00015152 7A0D                       		moveq	#$D,d5
00015154 6100 0000                  		bsr.w	FindFloor
00015158 3F01                       		move.w	d1,-(sp)
0001515A 3428 000C                  		move.w	$C(a0),d2
0001515E 3628 0008                  		move.w	8(a0),d3
00015162 7000                       		moveq	#0,d0
00015164 1028 0016                  		move.b	$16(a0),d0
00015168 4880                       		ext.w	d0
0001516A D440                       		add.w	d0,d2
0001516C 1028 0017                  		move.b	$17(a0),d0
00015170 4880                       		ext.w	d0
00015172 4440                       		neg.w	d0
00015174 D640                       		add.w	d0,d3
00015176 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001517A 367C 0010                  		movea.w	#$10,a3
0001517E 3C3C 0000                  		move.w	#0,d6
00015182 7A0D                       		moveq	#$D,d5
00015184 6100 0000                  		bsr.w	FindFloor
00015188 301F                       		move.w	(sp)+,d0
0001518A 6100 0000                  		bsr.w	Sonic_Angle
0001518E 4A41                       		tst.w	d1
00015190 6700                       		beq.s	locret_146BE
00015192 6A00                       		bpl.s	loc_146C0
00015194 0C41 FFF2                  		cmpi.w	#-$E,d1
00015198 6D00                       		blt.s	locret_146E6
0001519A D368 000C                  		add.w	d1,$C(a0)
0001519E                            
0001519E                            locret_146BE:
0001519E 4E75                       		rts	
000151A0                            ; ===========================================================================
000151A0                            
000151A0                            loc_146C0:
000151A0 0C41 000E                  		cmpi.w	#$E,d1
000151A4 6E00                       		bgt.s	loc_146CC
000151A6                            
000151A6                            loc_146C6:
000151A6 D368 000C                  		add.w	d1,$C(a0)
000151AA 4E75                       		rts	
000151AC                            ; ===========================================================================
000151AC                            
000151AC                            loc_146CC:
000151AC 4A28 0038                  		tst.b	$38(a0)
000151B0 66F4                       		bne.s	loc_146C6
000151B2 08E8 0001 0022             		bset	#1,$22(a0)
000151B8 08A8 0005 0022             		bclr	#5,$22(a0)
000151BE 117C 0001 001D             		move.b	#1,$1D(a0)
000151C4 4E75                       		rts	
000151C6                            ; ===========================================================================
000151C6                            
000151C6                            locret_146E6:
000151C6 4E75                       		rts	
000151C8                            ; End of function Sonic_AnglePos
000151C8                            
000151C8                            ; ===========================================================================
000151C8 2428 0008                  		move.l	8(a0),d2
000151CC 3028 0010                  		move.w	$10(a0),d0
000151D0 48C0                       		ext.l	d0
000151D2 E180                       		asl.l	#8,d0
000151D4 9480                       		sub.l	d0,d2
000151D6 2142 0008                  		move.l	d2,8(a0)
000151DA 303C 0038                  		move.w	#$38,d0
000151DE 48C0                       		ext.l	d0
000151E0 E180                       		asl.l	#8,d0
000151E2 9680                       		sub.l	d0,d3
000151E4 2143 000C                  		move.l	d3,$C(a0)
000151E8 4E75                       		rts	
000151EA                            ; ===========================================================================
000151EA                            
000151EA                            locret_1470A:
000151EA 4E75                       		rts	
000151EC                            ; ===========================================================================
000151EC 2628 000C                  		move.l	$C(a0),d3
000151F0 3028 0012                  		move.w	$12(a0),d0
000151F4 0440 0038                  		subi.w	#$38,d0
000151F8 3140 0012                  		move.w	d0,$12(a0)
000151FC 48C0                       		ext.l	d0
000151FE E180                       		asl.l	#8,d0
00015200 9680                       		sub.l	d0,d3
00015202 2143 000C                  		move.l	d3,$C(a0)
00015206 4E75                       		rts	
00015208 4E75                       		rts	
0001520A                            ; ===========================================================================
0001520A 2428 0008                  		move.l	8(a0),d2
0001520E 2628 000C                  		move.l	$C(a0),d3
00015212 3028 0010                  		move.w	$10(a0),d0
00015216 48C0                       		ext.l	d0
00015218 E180                       		asl.l	#8,d0
0001521A 9480                       		sub.l	d0,d2
0001521C 3028 0012                  		move.w	$12(a0),d0
00015220 48C0                       		ext.l	d0
00015222 E180                       		asl.l	#8,d0
00015224 9680                       		sub.l	d0,d3
00015226 2142 0008                  		move.l	d2,8(a0)
0001522A 2143 000C                  		move.l	d3,$C(a0)
0001522E 4E75                       		rts	
00015230                            
00015230                            ; ---------------------------------------------------------------------------
00015230                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015230                            ; ---------------------------------------------------------------------------
00015230                            
00015230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015230                            
00015230                            
00015230                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015230 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015234 B240                       		cmp.w	d0,d1
00015236 6F00                       		ble.s	loc_1475E
00015238 1438 F768                  		move.b	($FFFFF768).w,d2
0001523C 3200                       		move.w	d0,d1
0001523E                            
0001523E                            loc_1475E:
0001523E 0802 0000                  		btst	#0,d2
00015242 6600                       		bne.s	loc_1476A
00015244 1142 0026                  		move.b	d2,$26(a0)
00015248 4E75                       		rts	
0001524A                            ; ===========================================================================
0001524A                            
0001524A                            loc_1476A:
0001524A 1428 0026                  		move.b	$26(a0),d2
0001524E 0602 0020                  		addi.b	#$20,d2
00015252 0202 00C0                  		andi.b	#$C0,d2
00015256 1142 0026                  		move.b	d2,$26(a0)
0001525A 4E75                       		rts	
0001525C                            ; End of function Sonic_Angle
0001525C                            
0001525C                            ; ---------------------------------------------------------------------------
0001525C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001525C                            ; ---------------------------------------------------------------------------
0001525C                            
0001525C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001525C                            
0001525C                            
0001525C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001525C 3428 000C                  		move.w	$C(a0),d2
00015260 3628 0008                  		move.w	8(a0),d3
00015264 7000                       		moveq	#0,d0
00015266 1028 0017                  		move.b	$17(a0),d0
0001526A 4880                       		ext.w	d0
0001526C 4440                       		neg.w	d0
0001526E D440                       		add.w	d0,d2
00015270 1028 0016                  		move.b	$16(a0),d0
00015274 4880                       		ext.w	d0
00015276 D640                       		add.w	d0,d3
00015278 49F8 F768                  		lea	($FFFFF768).w,a4
0001527C 367C 0010                  		movea.w	#$10,a3
00015280 3C3C 0000                  		move.w	#0,d6
00015284 7A0D                       		moveq	#$D,d5
00015286 6100 0000                  		bsr.w	FindWall
0001528A 3F01                       		move.w	d1,-(sp)
0001528C 3428 000C                  		move.w	$C(a0),d2
00015290 3628 0008                  		move.w	8(a0),d3
00015294 7000                       		moveq	#0,d0
00015296 1028 0017                  		move.b	$17(a0),d0
0001529A 4880                       		ext.w	d0
0001529C D440                       		add.w	d0,d2
0001529E 1028 0016                  		move.b	$16(a0),d0
000152A2 4880                       		ext.w	d0
000152A4 D640                       		add.w	d0,d3
000152A6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000152AA 367C 0010                  		movea.w	#$10,a3
000152AE 3C3C 0000                  		move.w	#0,d6
000152B2 7A0D                       		moveq	#$D,d5
000152B4 6100 0000                  		bsr.w	FindWall
000152B8 301F                       		move.w	(sp)+,d0
000152BA 6100 FF74                  		bsr.w	Sonic_Angle
000152BE 4A41                       		tst.w	d1
000152C0 6700                       		beq.s	locret_147F0
000152C2 6A00                       		bpl.s	loc_147F2
000152C4 0C41 FFF2                  		cmpi.w	#-$E,d1
000152C8 6D00 FF20                  		blt.w	locret_1470A
000152CC D368 0008                  		add.w	d1,8(a0)
000152D0                            
000152D0                            locret_147F0:
000152D0 4E75                       		rts	
000152D2                            ; ===========================================================================
000152D2                            
000152D2                            loc_147F2:
000152D2 0C41 000E                  		cmpi.w	#$E,d1
000152D6 6E00                       		bgt.s	loc_147FE
000152D8                            
000152D8                            loc_147F8:
000152D8 D368 0008                  		add.w	d1,8(a0)
000152DC 4E75                       		rts	
000152DE                            ; ===========================================================================
000152DE                            
000152DE                            loc_147FE:
000152DE 4A28 0038                  		tst.b	$38(a0)
000152E2 66F4                       		bne.s	loc_147F8
000152E4 08E8 0001 0022             		bset	#1,$22(a0)
000152EA 08A8 0005 0022             		bclr	#5,$22(a0)
000152F0 117C 0001 001D             		move.b	#1,$1D(a0)
000152F6 4E75                       		rts	
000152F8                            ; End of function Sonic_WalkVertR
000152F8                            
000152F8                            ; ---------------------------------------------------------------------------
000152F8                            ; Subroutine allowing Sonic to walk upside-down
000152F8                            ; ---------------------------------------------------------------------------
000152F8                            
000152F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152F8                            
000152F8                            
000152F8                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000152F8 3428 000C                  		move.w	$C(a0),d2
000152FC 3628 0008                  		move.w	8(a0),d3
00015300 7000                       		moveq	#0,d0
00015302 1028 0016                  		move.b	$16(a0),d0
00015306 4880                       		ext.w	d0
00015308 9440                       		sub.w	d0,d2
0001530A 0A42 000F                  		eori.w	#$F,d2
0001530E 1028 0017                  		move.b	$17(a0),d0
00015312 4880                       		ext.w	d0
00015314 D640                       		add.w	d0,d3
00015316 49F8 F768                  		lea	($FFFFF768).w,a4
0001531A 367C FFF0                  		movea.w	#-$10,a3
0001531E 3C3C 1000                  		move.w	#$1000,d6
00015322 7A0D                       		moveq	#$D,d5
00015324 6100 0000                  		bsr.w	FindFloor
00015328 3F01                       		move.w	d1,-(sp)
0001532A 3428 000C                  		move.w	$C(a0),d2
0001532E 3628 0008                  		move.w	8(a0),d3
00015332 7000                       		moveq	#0,d0
00015334 1028 0016                  		move.b	$16(a0),d0
00015338 4880                       		ext.w	d0
0001533A 9440                       		sub.w	d0,d2
0001533C 0A42 000F                  		eori.w	#$F,d2
00015340 1028 0017                  		move.b	$17(a0),d0
00015344 4880                       		ext.w	d0
00015346 9640                       		sub.w	d0,d3
00015348 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001534C 367C FFF0                  		movea.w	#-$10,a3
00015350 3C3C 1000                  		move.w	#$1000,d6
00015354 7A0D                       		moveq	#$D,d5
00015356 6100 0000                  		bsr.w	FindFloor
0001535A 301F                       		move.w	(sp)+,d0
0001535C 6100 FED2                  		bsr.w	Sonic_Angle
00015360 4A41                       		tst.w	d1
00015362 6700                       		beq.s	locret_14892
00015364 6A00                       		bpl.s	loc_14894
00015366 0C41 FFF2                  		cmpi.w	#-$E,d1
0001536A 6D00 FE5A                  		blt.w	locret_146E6
0001536E 9368 000C                  		sub.w	d1,$C(a0)
00015372                            
00015372                            locret_14892:
00015372 4E75                       		rts	
00015374                            ; ===========================================================================
00015374                            
00015374                            loc_14894:
00015374 0C41 000E                  		cmpi.w	#$E,d1
00015378 6E00                       		bgt.s	loc_148A0
0001537A                            
0001537A                            loc_1489A:
0001537A 9368 000C                  		sub.w	d1,$C(a0)
0001537E 4E75                       		rts	
00015380                            ; ===========================================================================
00015380                            
00015380                            loc_148A0:
00015380 4A28 0038                  		tst.b	$38(a0)
00015384 66F4                       		bne.s	loc_1489A
00015386 08E8 0001 0022             		bset	#1,$22(a0)
0001538C 08A8 0005 0022             		bclr	#5,$22(a0)
00015392 117C 0001 001D             		move.b	#1,$1D(a0)
00015398 4E75                       		rts	
0001539A                            ; End of function Sonic_WalkCeiling
0001539A                            
0001539A                            ; ---------------------------------------------------------------------------
0001539A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001539A                            ; ---------------------------------------------------------------------------
0001539A                            
0001539A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001539A                            
0001539A                            
0001539A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001539A 3428 000C                  		move.w	$C(a0),d2
0001539E 3628 0008                  		move.w	8(a0),d3
000153A2 7000                       		moveq	#0,d0
000153A4 1028 0017                  		move.b	$17(a0),d0
000153A8 4880                       		ext.w	d0
000153AA 9440                       		sub.w	d0,d2
000153AC 1028 0016                  		move.b	$16(a0),d0
000153B0 4880                       		ext.w	d0
000153B2 9640                       		sub.w	d0,d3
000153B4 0A43 000F                  		eori.w	#$F,d3
000153B8 49F8 F768                  		lea	($FFFFF768).w,a4
000153BC 367C FFF0                  		movea.w	#-$10,a3
000153C0 3C3C 0800                  		move.w	#$800,d6
000153C4 7A0D                       		moveq	#$D,d5
000153C6 6100 0000                  		bsr.w	FindWall
000153CA 3F01                       		move.w	d1,-(sp)
000153CC 3428 000C                  		move.w	$C(a0),d2
000153D0 3628 0008                  		move.w	8(a0),d3
000153D4 7000                       		moveq	#0,d0
000153D6 1028 0017                  		move.b	$17(a0),d0
000153DA 4880                       		ext.w	d0
000153DC D440                       		add.w	d0,d2
000153DE 1028 0016                  		move.b	$16(a0),d0
000153E2 4880                       		ext.w	d0
000153E4 9640                       		sub.w	d0,d3
000153E6 0A43 000F                  		eori.w	#$F,d3
000153EA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153EE 367C FFF0                  		movea.w	#-$10,a3
000153F2 3C3C 0800                  		move.w	#$800,d6
000153F6 7A0D                       		moveq	#$D,d5
000153F8 6100 0000                  		bsr.w	FindWall
000153FC 301F                       		move.w	(sp)+,d0
000153FE 6100 FE30                  		bsr.w	Sonic_Angle
00015402 4A41                       		tst.w	d1
00015404 6700                       		beq.s	locret_14934
00015406 6A00                       		bpl.s	loc_14936
00015408 0C41 FFF2                  		cmpi.w	#-$E,d1
0001540C 6D00 FDDC                  		blt.w	locret_1470A
00015410 9368 0008                  		sub.w	d1,8(a0)
00015414                            
00015414                            locret_14934:
00015414 4E75                       		rts	
00015416                            ; ===========================================================================
00015416                            
00015416                            loc_14936:
00015416 0C41 000E                  		cmpi.w	#$E,d1
0001541A 6E00                       		bgt.s	loc_14942
0001541C                            
0001541C                            loc_1493C:
0001541C 9368 0008                  		sub.w	d1,8(a0)
00015420 4E75                       		rts	
00015422                            ; ===========================================================================
00015422                            
00015422                            loc_14942:
00015422 4A28 0038                  		tst.b	$38(a0)
00015426 66F4                       		bne.s	loc_1493C
00015428 08E8 0001 0022             		bset	#1,$22(a0)
0001542E 08A8 0005 0022             		bclr	#5,$22(a0)
00015434 117C 0001 001D             		move.b	#1,$1D(a0)
0001543A 4E75                       		rts	
0001543C                            ; End of function Sonic_WalkVertL
0001543C                            
0001543C                            ; ---------------------------------------------------------------------------
0001543C                            ; Subroutine to	find which tile	the object is standing on
0001543C                            ; ---------------------------------------------------------------------------
0001543C                            
0001543C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001543C                            
0001543C                            
0001543C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001543C 3002                       		move.w	d2,d0
0001543E E248                       		lsr.w	#1,d0
00015440 0240 0380                  		andi.w	#$380,d0
00015444 3203                       		move.w	d3,d1
00015446 E049                       		lsr.w	#8,d1
00015448 0241 007F                  		andi.w	#$7F,d1
0001544C D041                       		add.w	d1,d0
0001544E 72FF                       		moveq	#-1,d1
00015450 43F8 A400                  		lea	($FFFFA400).w,a1
00015454 1231 0000                  		move.b	(a1,d0.w),d1
00015458 6700                       		beq.s	loc_14996
0001545A 6B00                       		bmi.s	loc_1499A
0001545C 5301                       		subq.b	#1,d1
0001545E 4881                       		ext.w	d1
00015460 EE59                       		ror.w	#7,d1
00015462 3002                       		move.w	d2,d0
00015464 D040                       		add.w	d0,d0
00015466 0240 01E0                  		andi.w	#$1E0,d0
0001546A D240                       		add.w	d0,d1
0001546C 3003                       		move.w	d3,d0
0001546E E648                       		lsr.w	#3,d0
00015470 0240 001E                  		andi.w	#$1E,d0
00015474 D240                       		add.w	d0,d1
00015476                            
00015476                            loc_14996:
00015476 2241                       		movea.l	d1,a1
00015478 4E75                       		rts	
0001547A                            ; ===========================================================================
0001547A                            
0001547A                            loc_1499A:
0001547A 0241 007F                  		andi.w	#$7F,d1
0001547E 0828 0006 0001             		btst	#6,1(a0)
00015484 6700                       		beq.s	loc_149B2
00015486 5241                       		addq.w	#1,d1
00015488 0C41 0029                  		cmpi.w	#$29,d1
0001548C 6600                       		bne.s	loc_149B2
0001548E 323C 0051                  		move.w	#$51,d1
00015492                            
00015492                            loc_149B2:
00015492 5301                       		subq.b	#1,d1
00015494 EE59                       		ror.w	#7,d1
00015496 3002                       		move.w	d2,d0
00015498 D040                       		add.w	d0,d0
0001549A 0240 01E0                  		andi.w	#$1E0,d0
0001549E D240                       		add.w	d0,d1
000154A0 3003                       		move.w	d3,d0
000154A2 E648                       		lsr.w	#3,d0
000154A4 0240 001E                  		andi.w	#$1E,d0
000154A8 D240                       		add.w	d0,d1
000154AA 2241                       		movea.l	d1,a1
000154AC 4E75                       		rts	
000154AE                            ; End of function Floor_ChkTile
000154AE                            
000154AE                            
000154AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154AE                            
000154AE                            
000154AE                            FindFloor:				; XREF: Sonic_AnglePos; et al
000154AE 618C                       		bsr.s	Floor_ChkTile
000154B0 3011                       		move.w	(a1),d0
000154B2 3800                       		move.w	d0,d4
000154B4 0240 07FF                  		andi.w	#$7FF,d0
000154B8 6700                       		beq.s	loc_149DE
000154BA 0B04                       		btst	d5,d4
000154BC 6600                       		bne.s	loc_149EC
000154BE                            
000154BE                            loc_149DE:
000154BE D44B                       		add.w	a3,d2
000154C0 6100 0000                  		bsr.w	FindFloor2
000154C4 944B                       		sub.w	a3,d2
000154C6 0641 0010                  		addi.w	#$10,d1
000154CA 4E75                       		rts	
000154CC                            ; ===========================================================================
000154CC                            
000154CC                            loc_149EC:
000154CC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000154D0 1032 0000                  		move.b	(a2,d0.w),d0
000154D4 0240 00FF                  		andi.w	#$FF,d0
000154D8 67E4                       		beq.s	loc_149DE
000154DA 45F9 0000 0000             		lea	(AngleMap).l,a2
000154E0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154E4 E948                       		lsl.w	#4,d0
000154E6 3203                       		move.w	d3,d1
000154E8 0804 000B                  		btst	#$B,d4
000154EC 6700                       		beq.s	loc_14A12
000154EE 4641                       		not.w	d1
000154F0 4414                       		neg.b	(a4)
000154F2                            
000154F2                            loc_14A12:
000154F2 0804 000C                  		btst	#$C,d4
000154F6 6700                       		beq.s	loc_14A22
000154F8 0614 0040                  		addi.b	#$40,(a4)
000154FC 4414                       		neg.b	(a4)
000154FE 0414 0040                  		subi.b	#$40,(a4)
00015502                            
00015502                            loc_14A22:
00015502 0241 000F                  		andi.w	#$F,d1
00015506 D240                       		add.w	d0,d1
00015508 45F9 0000 0000             		lea	(CollArray1).l,a2
0001550E 1032 1000                  		move.b	(a2,d1.w),d0
00015512 4880                       		ext.w	d0
00015514 BD44                       		eor.w	d6,d4
00015516 0804 000C                  		btst	#$C,d4
0001551A 6700                       		beq.s	loc_14A3E
0001551C 4440                       		neg.w	d0
0001551E                            
0001551E                            loc_14A3E:
0001551E 4A40                       		tst.w	d0
00015520 679C                       		beq.s	loc_149DE
00015522 6B00                       		bmi.s	loc_14A5A
00015524 0C00 0010                  		cmpi.b	#$10,d0
00015528 6700                       		beq.s	loc_14A66
0001552A 3202                       		move.w	d2,d1
0001552C 0241 000F                  		andi.w	#$F,d1
00015530 D041                       		add.w	d1,d0
00015532 323C 000F                  		move.w	#$F,d1
00015536 9240                       		sub.w	d0,d1
00015538 4E75                       		rts	
0001553A                            ; ===========================================================================
0001553A                            
0001553A                            loc_14A5A:
0001553A 3202                       		move.w	d2,d1
0001553C 0241 000F                  		andi.w	#$F,d1
00015540 D041                       		add.w	d1,d0
00015542 6A00 FF7A                  		bpl.w	loc_149DE
00015546                            
00015546                            loc_14A66:
00015546 944B                       		sub.w	a3,d2
00015548 6100 0000                  		bsr.w	FindFloor2
0001554C D44B                       		add.w	a3,d2
0001554E 0441 0010                  		subi.w	#$10,d1
00015552 4E75                       		rts	
00015554                            ; End of function FindFloor
00015554                            
00015554                            
00015554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015554                            
00015554                            
00015554                            FindFloor2:				; XREF: FindFloor
00015554 6100 FEE6                  		bsr.w	Floor_ChkTile
00015558 3011                       		move.w	(a1),d0
0001555A 3800                       		move.w	d0,d4
0001555C 0240 07FF                  		andi.w	#$7FF,d0
00015560 6700                       		beq.s	loc_14A86
00015562 0B04                       		btst	d5,d4
00015564 6600                       		bne.s	loc_14A94
00015566                            
00015566                            loc_14A86:
00015566 323C 000F                  		move.w	#$F,d1
0001556A 3002                       		move.w	d2,d0
0001556C 0240 000F                  		andi.w	#$F,d0
00015570 9240                       		sub.w	d0,d1
00015572 4E75                       		rts	
00015574                            ; ===========================================================================
00015574                            
00015574                            loc_14A94:
00015574 2478 F796                  		movea.l	($FFFFF796).w,a2
00015578 1032 0000                  		move.b	(a2,d0.w),d0
0001557C 0240 00FF                  		andi.w	#$FF,d0
00015580 67E4                       		beq.s	loc_14A86
00015582 45F9 0000 0000             		lea	(AngleMap).l,a2
00015588 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001558C E948                       		lsl.w	#4,d0
0001558E 3203                       		move.w	d3,d1
00015590 0804 000B                  		btst	#$B,d4
00015594 6700                       		beq.s	loc_14ABA
00015596 4641                       		not.w	d1
00015598 4414                       		neg.b	(a4)
0001559A                            
0001559A                            loc_14ABA:
0001559A 0804 000C                  		btst	#$C,d4
0001559E 6700                       		beq.s	loc_14ACA
000155A0 0614 0040                  		addi.b	#$40,(a4)
000155A4 4414                       		neg.b	(a4)
000155A6 0414 0040                  		subi.b	#$40,(a4)
000155AA                            
000155AA                            loc_14ACA:
000155AA 0241 000F                  		andi.w	#$F,d1
000155AE D240                       		add.w	d0,d1
000155B0 45F9 0000 0000             		lea	(CollArray1).l,a2
000155B6 1032 1000                  		move.b	(a2,d1.w),d0
000155BA 4880                       		ext.w	d0
000155BC BD44                       		eor.w	d6,d4
000155BE 0804 000C                  		btst	#$C,d4
000155C2 6700                       		beq.s	loc_14AE6
000155C4 4440                       		neg.w	d0
000155C6                            
000155C6                            loc_14AE6:
000155C6 4A40                       		tst.w	d0
000155C8 679C                       		beq.s	loc_14A86
000155CA 6B00                       		bmi.s	loc_14AFC
000155CC 3202                       		move.w	d2,d1
000155CE 0241 000F                  		andi.w	#$F,d1
000155D2 D041                       		add.w	d1,d0
000155D4 323C 000F                  		move.w	#$F,d1
000155D8 9240                       		sub.w	d0,d1
000155DA 4E75                       		rts	
000155DC                            ; ===========================================================================
000155DC                            
000155DC                            loc_14AFC:
000155DC 3202                       		move.w	d2,d1
000155DE 0241 000F                  		andi.w	#$F,d1
000155E2 D041                       		add.w	d1,d0
000155E4 6A00 FF80                  		bpl.w	loc_14A86
000155E8 4641                       		not.w	d1
000155EA 4E75                       		rts	
000155EC                            ; End of function FindFloor2
000155EC                            
000155EC                            
000155EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155EC                            
000155EC                            
000155EC                            FindWall:				; XREF: Sonic_WalkVertR; et al
000155EC 6100 FE4E                  		bsr.w	Floor_ChkTile
000155F0 3011                       		move.w	(a1),d0
000155F2 3800                       		move.w	d0,d4
000155F4 0240 07FF                  		andi.w	#$7FF,d0
000155F8 6700                       		beq.s	loc_14B1E
000155FA 0B04                       		btst	d5,d4
000155FC 6600                       		bne.s	loc_14B2C
000155FE                            
000155FE                            loc_14B1E:
000155FE D64B                       		add.w	a3,d3
00015600 6100 0000                  		bsr.w	FindWall2
00015604 964B                       		sub.w	a3,d3
00015606 0641 0010                  		addi.w	#$10,d1
0001560A 4E75                       		rts	
0001560C                            ; ===========================================================================
0001560C                            
0001560C                            loc_14B2C:
0001560C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015610 1032 0000                  		move.b	(a2,d0.w),d0
00015614 0240 00FF                  		andi.w	#$FF,d0
00015618 67E4                       		beq.s	loc_14B1E
0001561A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015620 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015624 E948                       		lsl.w	#4,d0
00015626 3202                       		move.w	d2,d1
00015628 0804 000C                  		btst	#$C,d4
0001562C 6700                       		beq.s	loc_14B5A
0001562E 4641                       		not.w	d1
00015630 0614 0040                  		addi.b	#$40,(a4)
00015634 4414                       		neg.b	(a4)
00015636 0414 0040                  		subi.b	#$40,(a4)
0001563A                            
0001563A                            loc_14B5A:
0001563A 0804 000B                  		btst	#$B,d4
0001563E 6700                       		beq.s	loc_14B62
00015640 4414                       		neg.b	(a4)
00015642                            
00015642                            loc_14B62:
00015642 0241 000F                  		andi.w	#$F,d1
00015646 D240                       		add.w	d0,d1
00015648 45F9 0000 0000             		lea	(CollArray2).l,a2
0001564E 1032 1000                  		move.b	(a2,d1.w),d0
00015652 4880                       		ext.w	d0
00015654 BD44                       		eor.w	d6,d4
00015656 0804 000B                  		btst	#$B,d4
0001565A 6700                       		beq.s	loc_14B7E
0001565C 4440                       		neg.w	d0
0001565E                            
0001565E                            loc_14B7E:
0001565E 4A40                       		tst.w	d0
00015660 679C                       		beq.s	loc_14B1E
00015662 6B00                       		bmi.s	loc_14B9A
00015664 0C00 0010                  		cmpi.b	#$10,d0
00015668 6700                       		beq.s	loc_14BA6
0001566A 3203                       		move.w	d3,d1
0001566C 0241 000F                  		andi.w	#$F,d1
00015670 D041                       		add.w	d1,d0
00015672 323C 000F                  		move.w	#$F,d1
00015676 9240                       		sub.w	d0,d1
00015678 4E75                       		rts	
0001567A                            ; ===========================================================================
0001567A                            
0001567A                            loc_14B9A:
0001567A 3203                       		move.w	d3,d1
0001567C 0241 000F                  		andi.w	#$F,d1
00015680 D041                       		add.w	d1,d0
00015682 6A00 FF7A                  		bpl.w	loc_14B1E
00015686                            
00015686                            loc_14BA6:
00015686 964B                       		sub.w	a3,d3
00015688 6100 0000                  		bsr.w	FindWall2
0001568C D64B                       		add.w	a3,d3
0001568E 0441 0010                  		subi.w	#$10,d1
00015692 4E75                       		rts	
00015694                            ; End of function FindWall
00015694                            
00015694                            
00015694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015694                            
00015694                            
00015694                            FindWall2:				; XREF: FindWall
00015694 6100 FDA6                  		bsr.w	Floor_ChkTile
00015698 3011                       		move.w	(a1),d0
0001569A 3800                       		move.w	d0,d4
0001569C 0240 07FF                  		andi.w	#$7FF,d0
000156A0 6700                       		beq.s	loc_14BC6
000156A2 0B04                       		btst	d5,d4
000156A4 6600                       		bne.s	loc_14BD4
000156A6                            
000156A6                            loc_14BC6:
000156A6 323C 000F                  		move.w	#$F,d1
000156AA 3003                       		move.w	d3,d0
000156AC 0240 000F                  		andi.w	#$F,d0
000156B0 9240                       		sub.w	d0,d1
000156B2 4E75                       		rts	
000156B4                            ; ===========================================================================
000156B4                            
000156B4                            loc_14BD4:
000156B4 2478 F796                  		movea.l	($FFFFF796).w,a2
000156B8 1032 0000                  		move.b	(a2,d0.w),d0
000156BC 0240 00FF                  		andi.w	#$FF,d0
000156C0 67E4                       		beq.s	loc_14BC6
000156C2 45F9 0000 0000             		lea	(AngleMap).l,a2
000156C8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000156CC E948                       		lsl.w	#4,d0
000156CE 3202                       		move.w	d2,d1
000156D0 0804 000C                  		btst	#$C,d4
000156D4 6700                       		beq.s	loc_14C02
000156D6 4641                       		not.w	d1
000156D8 0614 0040                  		addi.b	#$40,(a4)
000156DC 4414                       		neg.b	(a4)
000156DE 0414 0040                  		subi.b	#$40,(a4)
000156E2                            
000156E2                            loc_14C02:
000156E2 0804 000B                  		btst	#$B,d4
000156E6 6700                       		beq.s	loc_14C0A
000156E8 4414                       		neg.b	(a4)
000156EA                            
000156EA                            loc_14C0A:
000156EA 0241 000F                  		andi.w	#$F,d1
000156EE D240                       		add.w	d0,d1
000156F0 45F9 0000 0000             		lea	(CollArray2).l,a2
000156F6 1032 1000                  		move.b	(a2,d1.w),d0
000156FA 4880                       		ext.w	d0
000156FC BD44                       		eor.w	d6,d4
000156FE 0804 000B                  		btst	#$B,d4
00015702 6700                       		beq.s	loc_14C26
00015704 4440                       		neg.w	d0
00015706                            
00015706                            loc_14C26:
00015706 4A40                       		tst.w	d0
00015708 679C                       		beq.s	loc_14BC6
0001570A 6B00                       		bmi.s	loc_14C3C
0001570C 3203                       		move.w	d3,d1
0001570E 0241 000F                  		andi.w	#$F,d1
00015712 D041                       		add.w	d1,d0
00015714 323C 000F                  		move.w	#$F,d1
00015718 9240                       		sub.w	d0,d1
0001571A 4E75                       		rts	
0001571C                            ; ===========================================================================
0001571C                            
0001571C                            loc_14C3C:
0001571C 3203                       		move.w	d3,d1
0001571E 0241 000F                  		andi.w	#$F,d1
00015722 D041                       		add.w	d1,d0
00015724 6A00 FF80                  		bpl.w	loc_14BC6
00015728 4641                       		not.w	d1
0001572A 4E75                       		rts	
0001572C                            ; End of function FindWall2
0001572C                            
0001572C                            ; ---------------------------------------------------------------------------
0001572C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001572C                            ; ---------------------------------------------------------------------------
0001572C                            
0001572C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001572C                            
0001572C                            
0001572C                            FloorLog_Unk:				; XREF: Level
0001572C 4E75                       		rts	
0001572E                            
0001572E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015734 45F9 0000 0000             		lea	(CollArray1).l,a2
0001573A 363C 00FF                  		move.w	#$FF,d3
0001573E                            
0001573E                            loc_14C5E:
0001573E 7A10                       		moveq	#$10,d5
00015740 343C 000F                  		move.w	#$F,d2
00015744                            
00015744                            loc_14C64:
00015744 7800                       		moveq	#0,d4
00015746 323C 000F                  		move.w	#$F,d1
0001574A                            
0001574A                            loc_14C6A:
0001574A 3019                       		move.w	(a1)+,d0
0001574C EAA8                       		lsr.l	d5,d0
0001574E D944                       		addx.w	d4,d4
00015750 51C9 FFF8                  		dbf	d1,loc_14C6A
00015754                            
00015754 34C4                       		move.w	d4,(a2)+
00015756 92FC 0020                  		suba.w	#$20,a1
0001575A 5345                       		subq.w	#1,d5
0001575C 51CA FFE6                  		dbf	d2,loc_14C64
00015760                            
00015760 D2FC 0020                  		adda.w	#$20,a1
00015764 51CB FFD8                  		dbf	d3,loc_14C5E
00015768                            
00015768 43F9 0000 0000             		lea	(CollArray1).l,a1
0001576E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015774 6100                       		bsr.s	FloorLog_Unk2
00015776 43F9 0000 0000             		lea	(CollArray1).l,a1
0001577C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015782                            
00015782                            ; End of function FloorLog_Unk
00015782                            
00015782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015782                            
00015782                            
00015782                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015782 363C 0FFF                  		move.w	#$FFF,d3
00015786                            
00015786                            loc_14CA6:
00015786 7400                       		moveq	#0,d2
00015788 323C 000F                  		move.w	#$F,d1
0001578C 3019                       		move.w	(a1)+,d0
0001578E 6700                       		beq.s	loc_14CD4
00015790 6B00                       		bmi.s	loc_14CBE
00015792                            
00015792                            loc_14CB2:
00015792 E248                       		lsr.w	#1,d0
00015794 6400                       		bcc.s	loc_14CB8
00015796 5202                       		addq.b	#1,d2
00015798                            
00015798                            loc_14CB8:
00015798 51C9 FFF8                  		dbf	d1,loc_14CB2
0001579C                            
0001579C 6000                       		bra.s	loc_14CD6
0001579E                            ; ===========================================================================
0001579E                            
0001579E                            loc_14CBE:
0001579E 0C40 FFFF                  		cmpi.w	#-1,d0
000157A2 6700                       		beq.s	loc_14CD0
000157A4                            
000157A4                            loc_14CC4:
000157A4 E348                       		lsl.w	#1,d0
000157A6 6400                       		bcc.s	loc_14CCA
000157A8 5302                       		subq.b	#1,d2
000157AA                            
000157AA                            loc_14CCA:
000157AA 51C9 FFF8                  		dbf	d1,loc_14CC4
000157AE                            
000157AE 6000                       		bra.s	loc_14CD6
000157B0                            ; ===========================================================================
000157B0                            
000157B0                            loc_14CD0:
000157B0 303C 0010                  		move.w	#$10,d0
000157B4                            
000157B4                            loc_14CD4:
000157B4 3400                       		move.w	d0,d2
000157B6                            
000157B6                            loc_14CD6:
000157B6 14C2                       		move.b	d2,(a2)+
000157B8 51CB FFCC                  		dbf	d3,loc_14CA6
000157BC                            
000157BC 4E75                       		rts	
000157BE                            
000157BE                            ; End of function FloorLog_Unk2
000157BE                            
000157BE                            
000157BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157BE                            
000157BE                            
000157BE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000157BE 2628 0008                  		move.l	8(a0),d3
000157C2 2428 000C                  		move.l	$C(a0),d2
000157C6 3228 0010                  		move.w	$10(a0),d1
000157CA 48C1                       		ext.l	d1
000157CC E181                       		asl.l	#8,d1
000157CE D681                       		add.l	d1,d3
000157D0 3228 0012                  		move.w	$12(a0),d1
000157D4 48C1                       		ext.l	d1
000157D6 E181                       		asl.l	#8,d1
000157D8 D481                       		add.l	d1,d2
000157DA 4842                       		swap	d2
000157DC 4843                       		swap	d3
000157DE 11C0 F768                  		move.b	d0,($FFFFF768).w
000157E2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000157E6 1200                       		move.b	d0,d1
000157E8 0600 0020                  		addi.b	#$20,d0
000157EC 6A00                       		bpl.s	loc_14D1A
000157EE 1001                       		move.b	d1,d0
000157F0 6A00                       		bpl.s	loc_14D14
000157F2 5300                       		subq.b	#1,d0
000157F4                            
000157F4                            loc_14D14:
000157F4 0600 0020                  		addi.b	#$20,d0
000157F8 6000                       		bra.s	loc_14D24
000157FA                            ; ===========================================================================
000157FA                            
000157FA                            loc_14D1A:
000157FA 1001                       		move.b	d1,d0
000157FC 6A00                       		bpl.s	loc_14D20
000157FE 5200                       		addq.b	#1,d0
00015800                            
00015800                            loc_14D20:
00015800 0600 001F                  		addi.b	#$1F,d0
00015804                            
00015804                            loc_14D24:
00015804 0200 00C0                  		andi.b	#$C0,d0
00015808 6700 0000                  		beq.w	loc_14DF0
0001580C 0C00 0080                  		cmpi.b	#$80,d0
00015810 6700 0000                  		beq.w	loc_14F7C
00015814 0201 0038                  		andi.b	#$38,d1
00015818 6600                       		bne.s	loc_14D3C
0001581A 5042                       		addq.w	#8,d2
0001581C                            
0001581C                            loc_14D3C:
0001581C 0C00 0040                  		cmpi.b	#$40,d0
00015820 6700 0000                  		beq.w	loc_1504A
00015824 6000 0000                  		bra.w	loc_14EBC
00015828                            
00015828                            ; End of function Sonic_WalkSpeed
00015828                            
00015828                            
00015828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015828                            
00015828                            
00015828                            sub_14D48:				; XREF: Sonic_Jump
00015828 11C0 F768                  		move.b	d0,($FFFFF768).w
0001582C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015830 0600 0020                  		addi.b	#$20,d0
00015834 0200 00C0                  		andi.b	#$C0,d0
00015838 0C00 0040                  		cmpi.b	#$40,d0
0001583C 6700 0000                  		beq.w	loc_14FD6
00015840 0C00 0080                  		cmpi.b	#$80,d0
00015844 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015848 0C00 00C0                  		cmpi.b	#$C0,d0
0001584C 6700 0000                  		beq.w	sub_14E50
00015850                            
00015850                            ; End of function sub_14D48
00015850                            
00015850                            ; ---------------------------------------------------------------------------
00015850                            ; Subroutine to	make Sonic land	on the floor after jumping
00015850                            ; ---------------------------------------------------------------------------
00015850                            
00015850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015850                            
00015850                            
00015850                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015850 3428 000C                  		move.w	$C(a0),d2
00015854 3628 0008                  		move.w	8(a0),d3
00015858 7000                       		moveq	#0,d0
0001585A 1028 0016                  		move.b	$16(a0),d0
0001585E 4880                       		ext.w	d0
00015860 D440                       		add.w	d0,d2
00015862 1028 0017                  		move.b	$17(a0),d0
00015866 4880                       		ext.w	d0
00015868 D640                       		add.w	d0,d3
0001586A 49F8 F768                  		lea	($FFFFF768).w,a4
0001586E 367C 0010                  		movea.w	#$10,a3
00015872 3C3C 0000                  		move.w	#0,d6
00015876 7A0D                       		moveq	#$D,d5
00015878 6100 FC34                  		bsr.w	FindFloor
0001587C 3F01                       		move.w	d1,-(sp)
0001587E 3428 000C                  		move.w	$C(a0),d2
00015882 3628 0008                  		move.w	8(a0),d3
00015886 7000                       		moveq	#0,d0
00015888 1028 0016                  		move.b	$16(a0),d0
0001588C 4880                       		ext.w	d0
0001588E D440                       		add.w	d0,d2
00015890 1028 0017                  		move.b	$17(a0),d0
00015894 4880                       		ext.w	d0
00015896 9640                       		sub.w	d0,d3
00015898 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001589C 367C 0010                  		movea.w	#$10,a3
000158A0 3C3C 0000                  		move.w	#0,d6
000158A4 7A0D                       		moveq	#$D,d5
000158A6 6100 FC06                  		bsr.w	FindFloor
000158AA 301F                       		move.w	(sp)+,d0
000158AC 143C 0000                  		move.b	#0,d2
000158B0                            
000158B0                            loc_14DD0:
000158B0 1638 F76A                  		move.b	($FFFFF76A).w,d3
000158B4 B240                       		cmp.w	d0,d1
000158B6 6F00                       		ble.s	loc_14DDE
000158B8 1638 F768                  		move.b	($FFFFF768).w,d3
000158BC C141                       		exg	d0,d1
000158BE                            
000158BE                            loc_14DDE:
000158BE 0803 0000                  		btst	#0,d3
000158C2 6700                       		beq.s	locret_14DE6
000158C4 1602                       		move.b	d2,d3
000158C6                            
000158C6                            locret_14DE6:
000158C6 4E75                       		rts	
000158C8                            
000158C8                            ; End of function Sonic_HitFloor
000158C8                            
000158C8                            ; ===========================================================================
000158C8 3428 000C                  		move.w	$C(a0),d2
000158CC 3628 0008                  		move.w	8(a0),d3
000158D0                            
000158D0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000158D0 0642 000A                  		addi.w	#$A,d2
000158D4 49F8 F768                  		lea	($FFFFF768).w,a4
000158D8 367C 0010                  		movea.w	#$10,a3
000158DC 3C3C 0000                  		move.w	#0,d6
000158E0 7A0E                       		moveq	#$E,d5
000158E2 6100 FBCA                  		bsr.w	FindFloor
000158E6 143C 0000                  		move.b	#0,d2
000158EA                            
000158EA                            loc_14E0A:				; XREF: sub_14EB4
000158EA 1638 F768                  		move.b	($FFFFF768).w,d3
000158EE 0803 0000                  		btst	#0,d3
000158F2 6700                       		beq.s	locret_14E16
000158F4 1602                       		move.b	d2,d3
000158F6                            
000158F6                            locret_14E16:
000158F6 4E75                       		rts	
000158F8                            
000158F8                            ; ---------------------------------------------------------------------------
000158F8                            ; Subroutine allowing objects to interact with the floor
000158F8                            ; ---------------------------------------------------------------------------
000158F8                            
000158F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158F8                            
000158F8                            
000158F8                            ObjHitFloor:
000158F8 3628 0008                  		move.w	8(a0),d3
000158FC                            
000158FC                            ; End of function ObjHitFloor
000158FC                            
000158FC                            
000158FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158FC                            
000158FC                            
000158FC                            ObjHitFloor2:
000158FC 3428 000C                  		move.w	$C(a0),d2
00015900 7000                       		moveq	#0,d0
00015902 1028 0016                  		move.b	$16(a0),d0
00015906 4880                       		ext.w	d0
00015908 D440                       		add.w	d0,d2
0001590A 49F8 F768                  		lea	($FFFFF768).w,a4
0001590E 18BC 0000                  		move.b	#0,(a4)
00015912 367C 0010                  		movea.w	#$10,a3
00015916 3C3C 0000                  		move.w	#0,d6
0001591A 7A0D                       		moveq	#$D,d5
0001591C 6100 FB90                  		bsr.w	FindFloor
00015920 1638 F768                  		move.b	($FFFFF768).w,d3
00015924 0803 0000                  		btst	#0,d3
00015928 6700                       		beq.s	locret_14E4E
0001592A 163C 0000                  		move.b	#0,d3
0001592E                            
0001592E                            locret_14E4E:
0001592E 4E75                       		rts	
00015930                            ; End of function ObjHitFloor2
00015930                            
00015930                            
00015930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015930                            
00015930                            
00015930                            sub_14E50:				; XREF: sub_14D48
00015930 3428 000C                  		move.w	$C(a0),d2
00015934 3628 0008                  		move.w	8(a0),d3
00015938 7000                       		moveq	#0,d0
0001593A 1028 0017                  		move.b	$17(a0),d0
0001593E 4880                       		ext.w	d0
00015940 9440                       		sub.w	d0,d2
00015942 1028 0016                  		move.b	$16(a0),d0
00015946 4880                       		ext.w	d0
00015948 D640                       		add.w	d0,d3
0001594A 49F8 F768                  		lea	($FFFFF768).w,a4
0001594E 367C 0010                  		movea.w	#$10,a3
00015952 3C3C 0000                  		move.w	#0,d6
00015956 7A0E                       		moveq	#$E,d5
00015958 6100 FC92                  		bsr.w	FindWall
0001595C 3F01                       		move.w	d1,-(sp)
0001595E 3428 000C                  		move.w	$C(a0),d2
00015962 3628 0008                  		move.w	8(a0),d3
00015966 7000                       		moveq	#0,d0
00015968 1028 0017                  		move.b	$17(a0),d0
0001596C 4880                       		ext.w	d0
0001596E D440                       		add.w	d0,d2
00015970 1028 0016                  		move.b	$16(a0),d0
00015974 4880                       		ext.w	d0
00015976 D640                       		add.w	d0,d3
00015978 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001597C 367C 0010                  		movea.w	#$10,a3
00015980 3C3C 0000                  		move.w	#0,d6
00015984 7A0E                       		moveq	#$E,d5
00015986 6100 FC64                  		bsr.w	FindWall
0001598A 301F                       		move.w	(sp)+,d0
0001598C 143C 00C0                  		move.b	#-$40,d2
00015990 6000 FF1E                  		bra.w	loc_14DD0
00015994                            
00015994                            ; End of function sub_14E50
00015994                            
00015994                            
00015994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015994                            
00015994                            
00015994                            sub_14EB4:				; XREF: Sonic_Floor
00015994 3428 000C                  		move.w	$C(a0),d2
00015998 3628 0008                  		move.w	8(a0),d3
0001599C                            
0001599C                            loc_14EBC:
0001599C 0643 000A                  		addi.w	#$A,d3
000159A0 49F8 F768                  		lea	($FFFFF768).w,a4
000159A4 367C 0010                  		movea.w	#$10,a3
000159A8 3C3C 0000                  		move.w	#0,d6
000159AC 7A0E                       		moveq	#$E,d5
000159AE 6100 FC3C                  		bsr.w	FindWall
000159B2 143C 00C0                  		move.b	#-$40,d2
000159B6 6000 FF32                  		bra.w	loc_14E0A
000159BA                            
000159BA                            ; End of function sub_14EB4
000159BA                            
000159BA                            ; ---------------------------------------------------------------------------
000159BA                            ; Subroutine to	detect when an object hits a wall to its right
000159BA                            ; ---------------------------------------------------------------------------
000159BA                            
000159BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159BA                            
000159BA                            
000159BA                            ObjHitWallRight:
000159BA D668 0008                  		add.w	8(a0),d3
000159BE 3428 000C                  		move.w	$C(a0),d2
000159C2 49F8 F768                  		lea	($FFFFF768).w,a4
000159C6 18BC 0000                  		move.b	#0,(a4)
000159CA 367C 0010                  		movea.w	#$10,a3
000159CE 3C3C 0000                  		move.w	#0,d6
000159D2 7A0E                       		moveq	#$E,d5
000159D4 6100 FC16                  		bsr.w	FindWall
000159D8 1638 F768                  		move.b	($FFFFF768).w,d3
000159DC 0803 0000                  		btst	#0,d3
000159E0 6700                       		beq.s	locret_14F06
000159E2 163C 00C0                  		move.b	#-$40,d3
000159E6                            
000159E6                            locret_14F06:
000159E6 4E75                       		rts	
000159E8                            
000159E8                            ; End of function ObjHitWallRight
000159E8                            
000159E8                            ; ---------------------------------------------------------------------------
000159E8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000159E8                            ; touches them
000159E8                            ; ---------------------------------------------------------------------------
000159E8                            
000159E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159E8                            
000159E8                            
000159E8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000159E8 3428 000C                  		move.w	$C(a0),d2
000159EC 3628 0008                  		move.w	8(a0),d3
000159F0 7000                       		moveq	#0,d0
000159F2 1028 0016                  		move.b	$16(a0),d0
000159F6 4880                       		ext.w	d0
000159F8 9440                       		sub.w	d0,d2
000159FA 0A42 000F                  		eori.w	#$F,d2
000159FE 1028 0017                  		move.b	$17(a0),d0
00015A02 4880                       		ext.w	d0
00015A04 D640                       		add.w	d0,d3
00015A06 49F8 F768                  		lea	($FFFFF768).w,a4
00015A0A 367C FFF0                  		movea.w	#-$10,a3
00015A0E 3C3C 1000                  		move.w	#$1000,d6
00015A12 7A0E                       		moveq	#$E,d5
00015A14 6100 FA98                  		bsr.w	FindFloor
00015A18 3F01                       		move.w	d1,-(sp)
00015A1A 3428 000C                  		move.w	$C(a0),d2
00015A1E 3628 0008                  		move.w	8(a0),d3
00015A22 7000                       		moveq	#0,d0
00015A24 1028 0016                  		move.b	$16(a0),d0
00015A28 4880                       		ext.w	d0
00015A2A 9440                       		sub.w	d0,d2
00015A2C 0A42 000F                  		eori.w	#$F,d2
00015A30 1028 0017                  		move.b	$17(a0),d0
00015A34 4880                       		ext.w	d0
00015A36 9640                       		sub.w	d0,d3
00015A38 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A3C 367C FFF0                  		movea.w	#-$10,a3
00015A40 3C3C 1000                  		move.w	#$1000,d6
00015A44 7A0E                       		moveq	#$E,d5
00015A46 6100 FA66                  		bsr.w	FindFloor
00015A4A 301F                       		move.w	(sp)+,d0
00015A4C 143C 0080                  		move.b	#-$80,d2
00015A50 6000 FE5E                  		bra.w	loc_14DD0
00015A54                            ; End of function Sonic_DontRunOnWalls
00015A54                            
00015A54                            ; ===========================================================================
00015A54 3428 000C                  		move.w	$C(a0),d2
00015A58 3628 0008                  		move.w	8(a0),d3
00015A5C                            
00015A5C                            loc_14F7C:
00015A5C 0442 000A                  		subi.w	#$A,d2
00015A60 0A42 000F                  		eori.w	#$F,d2
00015A64 49F8 F768                  		lea	($FFFFF768).w,a4
00015A68 367C FFF0                  		movea.w	#-$10,a3
00015A6C 3C3C 1000                  		move.w	#$1000,d6
00015A70 7A0E                       		moveq	#$E,d5
00015A72 6100 FA3A                  		bsr.w	FindFloor
00015A76 143C 0080                  		move.b	#-$80,d2
00015A7A 6000 FE6E                  		bra.w	loc_14E0A
00015A7E                            
00015A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A7E                            
00015A7E                            
00015A7E                            ObjHitCeiling:
00015A7E 3428 000C                  		move.w	$C(a0),d2
00015A82 3628 0008                  		move.w	8(a0),d3
00015A86 7000                       		moveq	#0,d0
00015A88 1028 0016                  		move.b	$16(a0),d0
00015A8C 4880                       		ext.w	d0
00015A8E 9440                       		sub.w	d0,d2
00015A90 0A42 000F                  		eori.w	#$F,d2
00015A94 49F8 F768                  		lea	($FFFFF768).w,a4
00015A98 367C FFF0                  		movea.w	#-$10,a3
00015A9C 3C3C 1000                  		move.w	#$1000,d6
00015AA0 7A0E                       		moveq	#$E,d5
00015AA2 6100 FA0A                  		bsr.w	FindFloor
00015AA6 1638 F768                  		move.b	($FFFFF768).w,d3
00015AAA 0803 0000                  		btst	#0,d3
00015AAE 6700                       		beq.s	locret_14FD4
00015AB0 163C 0080                  		move.b	#-$80,d3
00015AB4                            
00015AB4                            locret_14FD4:
00015AB4 4E75                       		rts	
00015AB6                            ; End of function ObjHitCeiling
00015AB6                            
00015AB6                            ; ===========================================================================
00015AB6                            
00015AB6                            loc_14FD6:				; XREF: sub_14D48
00015AB6 3428 000C                  		move.w	$C(a0),d2
00015ABA 3628 0008                  		move.w	8(a0),d3
00015ABE 7000                       		moveq	#0,d0
00015AC0 1028 0017                  		move.b	$17(a0),d0
00015AC4 4880                       		ext.w	d0
00015AC6 9440                       		sub.w	d0,d2
00015AC8 1028 0016                  		move.b	$16(a0),d0
00015ACC 4880                       		ext.w	d0
00015ACE 9640                       		sub.w	d0,d3
00015AD0 0A43 000F                  		eori.w	#$F,d3
00015AD4 49F8 F768                  		lea	($FFFFF768).w,a4
00015AD8 367C FFF0                  		movea.w	#-$10,a3
00015ADC 3C3C 0800                  		move.w	#$800,d6
00015AE0 7A0E                       		moveq	#$E,d5
00015AE2 6100 FB08                  		bsr.w	FindWall
00015AE6 3F01                       		move.w	d1,-(sp)
00015AE8 3428 000C                  		move.w	$C(a0),d2
00015AEC 3628 0008                  		move.w	8(a0),d3
00015AF0 7000                       		moveq	#0,d0
00015AF2 1028 0017                  		move.b	$17(a0),d0
00015AF6 4880                       		ext.w	d0
00015AF8 D440                       		add.w	d0,d2
00015AFA 1028 0016                  		move.b	$16(a0),d0
00015AFE 4880                       		ext.w	d0
00015B00 9640                       		sub.w	d0,d3
00015B02 0A43 000F                  		eori.w	#$F,d3
00015B06 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B0A 367C FFF0                  		movea.w	#-$10,a3
00015B0E 3C3C 0800                  		move.w	#$800,d6
00015B12 7A0E                       		moveq	#$E,d5
00015B14 6100 FAD6                  		bsr.w	FindWall
00015B18 301F                       		move.w	(sp)+,d0
00015B1A 143C 0040                  		move.b	#$40,d2
00015B1E 6000 FD90                  		bra.w	loc_14DD0
00015B22                            
00015B22                            ; ---------------------------------------------------------------------------
00015B22                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B22                            ; ---------------------------------------------------------------------------
00015B22                            
00015B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B22                            
00015B22                            
00015B22                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B22 3428 000C                  		move.w	$C(a0),d2
00015B26 3628 0008                  		move.w	8(a0),d3
00015B2A                            
00015B2A                            loc_1504A:
00015B2A 0443 000A                  		subi.w	#$A,d3
00015B2E 0A43 000F                  		eori.w	#$F,d3
00015B32 49F8 F768                  		lea	($FFFFF768).w,a4
00015B36 367C FFF0                  		movea.w	#-$10,a3
00015B3A 3C3C 0800                  		move.w	#$800,d6
00015B3E 7A0E                       		moveq	#$E,d5
00015B40 6100 FAAA                  		bsr.w	FindWall
00015B44 143C 0040                  		move.b	#$40,d2
00015B48 6000 FDA0                  		bra.w	loc_14E0A
00015B4C                            ; End of function Sonic_HitWall
00015B4C                            
00015B4C                            ; ---------------------------------------------------------------------------
00015B4C                            ; Subroutine to	detect when an object hits a wall to its left
00015B4C                            ; ---------------------------------------------------------------------------
00015B4C                            
00015B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B4C                            
00015B4C                            
00015B4C                            ObjHitWallLeft:
00015B4C D668 0008                  		add.w	8(a0),d3
00015B50 3428 000C                  		move.w	$C(a0),d2
00015B54 49F8 F768                  		lea	($FFFFF768).w,a4
00015B58 18BC 0000                  		move.b	#0,(a4)
00015B5C 367C FFF0                  		movea.w	#-$10,a3
00015B60 3C3C 0800                  		move.w	#$800,d6
00015B64 7A0E                       		moveq	#$E,d5
00015B66 6100 FA84                  		bsr.w	FindWall
00015B6A 1638 F768                  		move.b	($FFFFF768).w,d3
00015B6E 0803 0000                  		btst	#0,d3
00015B72 6700                       		beq.s	locret_15098
00015B74 163C 0040                  		move.b	#$40,d3
00015B78                            
00015B78                            locret_15098:
00015B78 4E75                       		rts	
00015B7A                            ; End of function ObjHitWallLeft
00015B7A                            
00015B7A                            ; ===========================================================================
00015B7A                            ; ---------------------------------------------------------------------------
00015B7A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015B7A                            ; ---------------------------------------------------------------------------
00015B7A                            
00015B7A                            Obj66:					; XREF: Obj_Index
00015B7A 7000                       		moveq	#0,d0
00015B7C 1028 0024                  		move.b	$24(a0),d0
00015B80 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015B84 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015B88                            ; ===========================================================================
00015B88 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015B8A 0000                       		dc.w Obj66_Action-Obj66_Index
00015B8C 0000                       		dc.w Obj66_Display-Obj66_Index
00015B8E 0000                       		dc.w Obj66_Release-Obj66_Index
00015B90                            ; ===========================================================================
00015B90                            
00015B90                            Obj66_Main:				; XREF: Obj66_Index
00015B90 5428 0024                  		addq.b	#2,$24(a0)
00015B94 323C 0001                  		move.w	#1,d1
00015B98 2248                       		movea.l	a0,a1
00015B9A 6000                       		bra.s	Obj66_MakeItem
00015B9C                            ; ===========================================================================
00015B9C                            
00015B9C                            Obj66_Loop:
00015B9C 6100 88D6                  		bsr.w	SingleObjLoad
00015BA0 6600                       		bne.s	loc_150FE
00015BA2 12BC 0066                  		move.b	#$66,0(a1)
00015BA6 5829 0024                  		addq.b	#4,$24(a1)
00015BAA 3368 0008 0008             		move.w	8(a0),8(a1)
00015BB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015BB6 137C 0003 0018             		move.b	#3,$18(a1)
00015BBC 137C 0010 001A             		move.b	#$10,$1A(a1)
00015BC2                            
00015BC2                            Obj66_MakeItem:				; XREF: Obj66_Main
00015BC2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015BCA 337C 4348 0002             		move.w	#$4348,2(a1)
00015BD0 0029 0004 0001             		ori.b	#4,1(a1)
00015BD6 137C 0038 0019             		move.b	#$38,$19(a1)
00015BDC                            
00015BDC                            loc_150FE:
00015BDC 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015BE0                            
00015BE0 117C 0030 0019             		move.b	#$30,$19(a0)
00015BE6 117C 0004 0018             		move.b	#4,$18(a0)
00015BEC 317C 003C 0030             		move.w	#$3C,$30(a0)
00015BF2 117C 0001 0034             		move.b	#1,$34(a0)
00015BF8 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015BFE                            
00015BFE                            Obj66_Action:				; XREF: Obj66_Index
00015BFE 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C02 4A28 0001                  		tst.b	1(a0)
00015C06 6A00 0000                  		bpl.w	Obj66_Display
00015C0A 323C 0030                  		move.w	#$30,d1
00015C0E 3401                       		move.w	d1,d2
00015C10 3602                       		move.w	d2,d3
00015C12 5243                       		addq.w	#1,d3
00015C14 3828 0008                  		move.w	8(a0),d4
00015C18 6100 A7A4                  		bsr.w	SolidObject
00015C1C 0828 0005 0022             		btst	#5,$22(a0)
00015C22 6700 0000                  		beq.w	Obj66_Display
00015C26 43F8 D000                  		lea	($FFFFD000).w,a1
00015C2A 720E                       		moveq	#$E,d1
00015C2C 3029 0008                  		move.w	8(a1),d0
00015C30 B068 0008                  		cmp.w	8(a0),d0
00015C34 6500                       		bcs.s	Obj66_GrabSonic
00015C36 7207                       		moveq	#7,d1
00015C38                            
00015C38                            Obj66_GrabSonic:
00015C38 B228 001A                  		cmp.b	$1A(a0),d1
00015C3C 6600                       		bne.s	Obj66_Display
00015C3E 1141 0032                  		move.b	d1,$32(a0)
00015C42 5828 0024                  		addq.b	#4,$24(a0)
00015C46 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015C4C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015C52 337C 0800 0014             		move.w	#$800,$14(a1)
00015C58 337C 0000 0010             		move.w	#0,$10(a1)
00015C5E 337C 0000 0012             		move.w	#0,$12(a1)
00015C64 08A8 0005 0022             		bclr	#5,$22(a0)
00015C6A 08A9 0005 0022             		bclr	#5,$22(a1)
00015C70 08E9 0001 0022             		bset	#1,$22(a1)
00015C76 3429 0008                  		move.w	8(a1),d2
00015C7A 3629 000C                  		move.w	$C(a1),d3
00015C7E 6100 0000                  		bsr.w	Obj66_ChgPos
00015C82 D569 0008                  		add.w	d2,8(a1)
00015C86 D769 000C                  		add.w	d3,$C(a1)
00015C8A E0E9 0008                  		asr	8(a1)
00015C8E E0E9 000C                  		asr	$C(a1)
00015C92                            
00015C92                            Obj66_Display:				; XREF: Obj66_Index
00015C92 6000 A402                  		bra.w	MarkObjGone
00015C96                            ; ===========================================================================
00015C96                            
00015C96                            Obj66_Release:				; XREF: Obj66_Index
00015C96 1028 001A                  		move.b	$1A(a0),d0
00015C9A 0C00 0004                  		cmpi.b	#4,d0
00015C9E 6700                       		beq.s	loc_151C8
00015CA0 0C00 0007                  		cmpi.b	#7,d0
00015CA4 6600                       		bne.s	loc_151F8
00015CA6                            
00015CA6                            loc_151C8:
00015CA6 B028 0032                  		cmp.b	$32(a0),d0
00015CAA 6700                       		beq.s	loc_151F8
00015CAC 43F8 D000                  		lea	($FFFFD000).w,a1
00015CB0 337C 0000 0010             		move.w	#0,$10(a1)
00015CB6 337C 0800 0012             		move.w	#$800,$12(a1)
00015CBC 0C00 0004                  		cmpi.b	#4,d0
00015CC0 6700                       		beq.s	loc_151F0
00015CC2 337C 0800 0010             		move.w	#$800,$10(a1)
00015CC8 337C 0800 0012             		move.w	#$800,$12(a1)
00015CCE                            
00015CCE                            loc_151F0:
00015CCE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015CD2 5928 0024                  		subq.b	#4,$24(a0)
00015CD6                            
00015CD6                            loc_151F8:
00015CD6 6100                       		bsr.s	Obj66_ChkSwitch
00015CD8 6100                       		bsr.s	Obj66_ChgPos
00015CDA 6000 A3BA                  		bra.w	MarkObjGone
00015CDE                            
00015CDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CDE                            
00015CDE                            
00015CDE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015CDE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015CE2 7000                       		moveq	#0,d0
00015CE4 1028 0038                  		move.b	$38(a0),d0
00015CE8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015CEE 6700                       		beq.s	loc_15224	; if not, branch
00015CF0 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015CF4 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015CF6 4428 0034                  		neg.b	$34(a0)
00015CFA 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D00 6000                       		bra.s	Obj66_Animate
00015D02                            ; ===========================================================================
00015D02                            
00015D02                            loc_15224:
00015D02 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D06                            
00015D06                            Obj66_Animate:
00015D06 5328 001E                  		subq.b	#1,$1E(a0)
00015D0A 6A00                       		bpl.s	locret_15246
00015D0C 117C 0007 001E             		move.b	#7,$1E(a0)
00015D12 1228 0034                  		move.b	$34(a0),d1
00015D16 1028 001A                  		move.b	$1A(a0),d0
00015D1A D001                       		add.b	d1,d0
00015D1C 0200 000F                  		andi.b	#$F,d0
00015D20 1140 001A                  		move.b	d0,$1A(a0)
00015D24                            
00015D24                            locret_15246:
00015D24 4E75                       		rts	
00015D26                            ; End of function Obj66_ChkSwitch
00015D26                            
00015D26                            
00015D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D26                            
00015D26                            
00015D26                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D26 43F8 D000                  		lea	($FFFFD000).w,a1
00015D2A 7000                       		moveq	#0,d0
00015D2C 1028 001A                  		move.b	$1A(a0),d0
00015D30 D040                       		add.w	d0,d0
00015D32 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D36 101A                       		move.b	(a2)+,d0
00015D38 4880                       		ext.w	d0
00015D3A D068 0008                  		add.w	8(a0),d0
00015D3E 3340 0008                  		move.w	d0,8(a1)
00015D42 101A                       		move.b	(a2)+,d0
00015D44 4880                       		ext.w	d0
00015D46 D068 000C                  		add.w	$C(a0),d0
00015D4A 3340 000C                  		move.w	d0,$C(a1)
00015D4E 4E75                       		rts	
00015D50                            ; End of function Obj66_ChgPos
00015D50                            
00015D50                            ; ===========================================================================
00015D50 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015D54 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015D58 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015D5C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015D60 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015D64 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015D68 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015D6C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015D70                            ; ---------------------------------------------------------------------------
00015D70                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D70                            ; ---------------------------------------------------------------------------
00015D70                            Map_obj66:
00015D70                            	include "_maps\obj66.asm"
00015D70                            ; ---------------------------------------------------------------------------
00015D70                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D70                            ; ---------------------------------------------------------------------------
00015D70 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015D74 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015D78 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015D7C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015D80 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015D84 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015D88 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015D8C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015D90 0000                       		dc.w byte_154A4-Map_obj66
00015D92 06                         byte_152B4:	dc.b 6
00015D93 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015D98 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015D9D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015DA2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015DA7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015DAC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015DB1 06                         byte_152D3:	dc.b 6
00015DB2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015DB7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015DBC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015DC1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015DC6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015DCB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015DD0 06                         byte_152F2:	dc.b 6
00015DD1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015DD6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015DDB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015DE0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015DE5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015DEA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015DEF 06                         byte_15311:	dc.b 6
00015DF0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015DF5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015DFA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015DFF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E04 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E09 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E0E 06                         byte_15330:	dc.b 6
00015E0F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E14 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E19 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E1E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E23 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E28 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E2D 06                         byte_1534F:	dc.b 6
00015E2E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E33 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E38 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015E3D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015E42 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015E47 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015E4C 06                         byte_1536E:	dc.b 6
00015E4D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015E52 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015E57 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015E5C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015E61 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015E66 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015E6B 06                         byte_1538D:	dc.b 6
00015E6C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015E71 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015E76 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015E7B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015E80 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015E85 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015E8A 06                         byte_153AC:	dc.b 6
00015E8B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015E90 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015E95 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015E9A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015E9F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015EA4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015EA9 06                         byte_153CB:	dc.b 6
00015EAA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015EAF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015EB4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015EB9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015EBE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015EC3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015EC8 06                         byte_153EA:	dc.b 6
00015EC9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015ECE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015ED3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015ED8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015EDD E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015EE2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015EE7 06                         byte_15409:	dc.b 6
00015EE8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015EED D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015EF2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015EF7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015EFC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F01 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F06 06                         byte_15428:	dc.b 6
00015F07 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F0C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F11 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F16 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F1B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F20 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F25 06                         byte_15447:	dc.b 6
00015F26 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F2B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F30 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F35 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F3A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015F3F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015F44 06                         byte_15466:	dc.b 6
00015F45 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015F4A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015F4F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015F54 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015F59 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015F5E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015F63 06                         byte_15485:	dc.b 6
00015F64 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015F69 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015F6E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015F73 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015F78 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015F7D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015F82 0C                         byte_154A4:	dc.b $C
00015F83 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015F88 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015F8D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015F92 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015F97 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015F9C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015FA1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015FA6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015FAB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015FB0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015FB5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015FBA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015FC0 00                         		even
00015FC0 00                         		even
00015FC0                            
00015FC0                            ; ===========================================================================
00015FC0                            ; ---------------------------------------------------------------------------
00015FC0                            ; Object 67 - disc that	you run	around (SBZ)
00015FC0                            ; ---------------------------------------------------------------------------
00015FC0                            
00015FC0                            Obj67:					; XREF: Obj_Index
00015FC0 7000                       		moveq	#0,d0
00015FC2 1028 0024                  		move.b	$24(a0),d0
00015FC6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015FCA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015FCE                            ; ===========================================================================
00015FCE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015FD0 0000                       		dc.w Obj67_Action-Obj67_Index
00015FD2                            ; ===========================================================================
00015FD2                            
00015FD2                            Obj67_Main:				; XREF: Obj67_Index
00015FD2 5428 0024                  		addq.b	#2,$24(a0)
00015FD6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015FDE 317C C344 0002             		move.w	#$C344,2(a0)
00015FE4 117C 0004 0001             		move.b	#4,1(a0)
00015FEA 117C 0004 0018             		move.b	#4,$18(a0)
00015FF0 117C 0008 0019             		move.b	#8,$19(a0)
00015FF6 3168 0008 0032             		move.w	8(a0),$32(a0)
00015FFC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016002 117C 0018 0034             		move.b	#$18,$34(a0)
00016008 117C 0048 0038             		move.b	#$48,$38(a0)
0001600E 1228 0028                  		move.b	$28(a0),d1	; get object type
00016012 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016016 6700                       		beq.s	loc_15546
00016018 117C 0010 0034             		move.b	#$10,$34(a0)
0001601E 117C 0038 0038             		move.b	#$38,$38(a0)
00016024                            
00016024                            loc_15546:
00016024 1228 0028                  		move.b	$28(a0),d1	; get object type
00016028 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001602C 4881                       		ext.w	d1
0001602E E741                       		asl.w	#3,d1
00016030 3141 0036                  		move.w	d1,$36(a0)
00016034 1028 0022                  		move.b	$22(a0),d0
00016038 E418                       		ror.b	#2,d0
0001603A 0200 00C0                  		andi.b	#-$40,d0
0001603E 1140 0026                  		move.b	d0,$26(a0)
00016042                            
00016042                            Obj67_Action:				; XREF: Obj67_Index
00016042 6100 0000                  		bsr.w	Obj67_MoveSonic
00016046 6100 0000                  		bsr.w	Obj67_MoveSpot
0001604A 6000 0000                  		bra.w	Obj67_ChkDel
0001604E                            ; ===========================================================================
0001604E                            
0001604E                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001604E 7400                       		moveq	#0,d2
00016050 1428 0038                  		move.b	$38(a0),d2
00016054 3602                       		move.w	d2,d3
00016056 D643                       		add.w	d3,d3
00016058 43F8 D000                  		lea	($FFFFD000).w,a1
0001605C 3029 0008                  		move.w	8(a1),d0
00016060 9068 0032                  		sub.w	$32(a0),d0
00016064 D042                       		add.w	d2,d0
00016066 B043                       		cmp.w	d3,d0
00016068 6400                       		bcc.s	loc_155A8
0001606A 3229 000C                  		move.w	$C(a1),d1
0001606E 9268 0030                  		sub.w	$30(a0),d1
00016072 D242                       		add.w	d2,d1
00016074 B243                       		cmp.w	d3,d1
00016076 6400                       		bcc.s	loc_155A8
00016078 0829 0001 0022             		btst	#1,$22(a1)
0001607E 6700                       		beq.s	loc_155B8
00016080 4228 003A                  		clr.b	$3A(a0)
00016084 4E75                       		rts	
00016086                            ; ===========================================================================
00016086                            
00016086                            loc_155A8:
00016086 4A28 003A                  		tst.b	$3A(a0)
0001608A 6700                       		beq.s	locret_155B6
0001608C 4229 0038                  		clr.b	$38(a1)
00016090 4228 003A                  		clr.b	$3A(a0)
00016094                            
00016094                            locret_155B6:
00016094 4E75                       		rts	
00016096                            ; ===========================================================================
00016096                            
00016096                            loc_155B8:
00016096 4A28 003A                  		tst.b	$3A(a0)
0001609A 6600                       		bne.s	loc_155E2
0001609C 117C 0001 003A             		move.b	#1,$3A(a0)
000160A2 0829 0002 0022             		btst	#2,$22(a1)
000160A8 6600                       		bne.s	loc_155D0
000160AA 4229 001C                  		clr.b	$1C(a1)
000160AE                            
000160AE                            loc_155D0:
000160AE 08A9 0005 0022             		bclr	#5,$22(a1)
000160B4 137C 0001 001D             		move.b	#1,$1D(a1)
000160BA 137C 0001 0038             		move.b	#1,$38(a1)
000160C0                            
000160C0                            loc_155E2:
000160C0 3029 0014                  		move.w	$14(a1),d0
000160C4 4A68 0036                  		tst.w	$36(a0)
000160C8 6A00                       		bpl.s	loc_15608
000160CA 0C40 FC00                  		cmpi.w	#-$400,d0
000160CE 6F00                       		ble.s	loc_155FA
000160D0 337C FC00 0014             		move.w	#-$400,$14(a1)
000160D6 4E75                       		rts	
000160D8                            ; ===========================================================================
000160D8                            
000160D8                            loc_155FA:
000160D8 0C40 F100                  		cmpi.w	#-$F00,d0
000160DC 6C00                       		bge.s	locret_15606
000160DE 337C F100 0014             		move.w	#-$F00,$14(a1)
000160E4                            
000160E4                            locret_15606:
000160E4 4E75                       		rts	
000160E6                            ; ===========================================================================
000160E6                            
000160E6                            loc_15608:
000160E6 0C40 0400                  		cmpi.w	#$400,d0
000160EA 6C00                       		bge.s	loc_15616
000160EC 337C 0400 0014             		move.w	#$400,$14(a1)
000160F2 4E75                       		rts	
000160F4                            ; ===========================================================================
000160F4                            
000160F4                            loc_15616:
000160F4 0C40 0F00                  		cmpi.w	#$F00,d0
000160F8 6F00                       		ble.s	locret_15622
000160FA 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016100                            
00016100                            locret_15622:
00016100 4E75                       		rts	
00016102                            ; ===========================================================================
00016102                            
00016102                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016102 3028 0036                  		move.w	$36(a0),d0
00016106 D168 0026                  		add.w	d0,$26(a0)
0001610A 1028 0026                  		move.b	$26(a0),d0
0001610E 4EB9 0000 2D6C             		jsr	(CalcSine).l
00016114 3428 0030                  		move.w	$30(a0),d2
00016118 3628 0032                  		move.w	$32(a0),d3
0001611C 7800                       		moveq	#0,d4
0001611E 1828 0034                  		move.b	$34(a0),d4
00016122 E14C                       		lsl.w	#8,d4
00016124 2A04                       		move.l	d4,d5
00016126 C9C0                       		muls.w	d0,d4
00016128 4844                       		swap	d4
0001612A CBC1                       		muls.w	d1,d5
0001612C 4845                       		swap	d5
0001612E D842                       		add.w	d2,d4
00016130 DA43                       		add.w	d3,d5
00016132 3144 000C                  		move.w	d4,$C(a0)
00016136 3145 0008                  		move.w	d5,8(a0)
0001613A 4E75                       		rts	
0001613C                            ; ===========================================================================
0001613C                            
0001613C                            Obj67_ChkDel:				; XREF: Obj67_Action
0001613C 3028 0032                  		move.w	$32(a0),d0
00016140 0240 FF80                  		andi.w	#-$80,d0
00016144 3238 F700                  		move.w	($FFFFF700).w,d1
00016148 0441 0080                  		subi.w	#$80,d1
0001614C 0241 FF80                  		andi.w	#-$80,d1
00016150 9041                       		sub.w	d1,d0
00016152 0C40 0280                  		cmpi.w	#$280,d0
00016156 6200                       		bhi.s	Obj67_Delete
00016158 4EF9 0000 DFEE             		jmp	DisplaySprite
0001615E                            ; ===========================================================================
0001615E                            
0001615E                            Obj67_Delete:
0001615E 4EF9 0000 E02A             		jmp	DeleteObject
00016164                            ; ===========================================================================
00016164                            ; ---------------------------------------------------------------------------
00016164                            ; Sprite mappings - disc that you run around (SBZ)
00016164                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016164                            ; part of the level tiles.)
00016164                            ; ---------------------------------------------------------------------------
00016164                            Map_obj67:
00016164                            	include "_maps\obj67.asm"
00016164                            ; ---------------------------------------------------------------------------
00016164                            ; Sprite mappings - disc that you run around (SBZ)
00016164                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016164                            ; part of the level tiles.)
00016164                            ; ---------------------------------------------------------------------------
00016164 0000                       		dc.w byte_15688-Map_obj67
00016166 01                         byte_15688:	dc.b 1
00016167 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001616C                            		even
0001616C                            		even
0001616C                            
0001616C                            ; ===========================================================================
0001616C                            ; ---------------------------------------------------------------------------
0001616C                            ; Object 68 - conveyor belts (SBZ)
0001616C                            ; ---------------------------------------------------------------------------
0001616C                            
0001616C                            Obj68:					; XREF: Obj_Index
0001616C 7000                       		moveq	#0,d0
0001616E 1028 0024                  		move.b	$24(a0),d0
00016172 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016176 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
0001617A                            ; ===========================================================================
0001617A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001617C 0000                       		dc.w Obj68_Action-Obj68_Index
0001617E                            ; ===========================================================================
0001617E                            
0001617E                            Obj68_Main:				; XREF: Obj68_Index
0001617E 5428 0024                  		addq.b	#2,$24(a0)
00016182 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016188 1228 0028                  		move.b	$28(a0),d1	; get object type
0001618C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016190 6700                       		beq.s	loc_156BA	; if zero, branch
00016192 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016198                            
00016198                            loc_156BA:
00016198 1228 0028                  		move.b	$28(a0),d1	; get object type
0001619C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000161A0 4881                       		ext.w	d1
000161A2 E841                       		asr.w	#4,d1
000161A4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000161A8                            
000161A8                            Obj68_Action:				; XREF: Obj68_Index
000161A8 6100                       		bsr.s	Obj68_MoveSonic
000161AA 3028 0008                  		move.w	8(a0),d0
000161AE 0240 FF80                  		andi.w	#$FF80,d0
000161B2 3238 F700                  		move.w	($FFFFF700).w,d1
000161B6 0441 0080                  		subi.w	#$80,d1
000161BA 0241 FF80                  		andi.w	#$FF80,d1
000161BE 9041                       		sub.w	d1,d0
000161C0 0C40 0280                  		cmpi.w	#$280,d0
000161C4 6200                       		bhi.s	Obj68_Delete
000161C6 4E75                       		rts	
000161C8                            ; ===========================================================================
000161C8                            
000161C8                            Obj68_Delete:
000161C8 4EF9 0000 E02A             		jmp	DeleteObject
000161CE                            ; ===========================================================================
000161CE                            
000161CE                            Obj68_MoveSonic:			; XREF: Obj68_Action
000161CE 7400                       		moveq	#0,d2
000161D0 1428 0038                  		move.b	$38(a0),d2
000161D4 3602                       		move.w	d2,d3
000161D6 D643                       		add.w	d3,d3
000161D8 43F8 D000                  		lea	($FFFFD000).w,a1
000161DC 3029 0008                  		move.w	8(a1),d0
000161E0 9068 0008                  		sub.w	8(a0),d0
000161E4 D042                       		add.w	d2,d0
000161E6 B043                       		cmp.w	d3,d0
000161E8 6400                       		bcc.s	locret_1572E
000161EA 3229 000C                  		move.w	$C(a1),d1
000161EE 9268 000C                  		sub.w	$C(a0),d1
000161F2 0641 0030                  		addi.w	#$30,d1
000161F6 0C41 0030                  		cmpi.w	#$30,d1
000161FA 6400                       		bcc.s	locret_1572E
000161FC 0829 0001 0022             		btst	#1,$22(a1)
00016202 6600                       		bne.s	locret_1572E
00016204 3028 0036                  		move.w	$36(a0),d0
00016208 D169 0008                  		add.w	d0,8(a1)
0001620C                            
0001620C                            locret_1572E:
0001620C 4E75                       		rts	
0001620E                            
0001620E                            ; ===========================================================================
0001620E                            ; ---------------------------------------------------------------------------
0001620E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001620E                            ; ---------------------------------------------------------------------------
0001620E                            
0001620E                            Obj69:					; XREF: Obj_Index
0001620E 7000                       		moveq	#0,d0
00016210 1028 0024                  		move.b	$24(a0),d0
00016214 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016218 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001621C                            ; ===========================================================================
0001621C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001621E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016220 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016222                            ; ===========================================================================
00016222                            
00016222                            Obj69_Main:				; XREF: Obj69_Index
00016222 5428 0024                  		addq.b	#2,$24(a0)
00016226 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001622E 317C 4492 0002             		move.w	#$4492,2(a0)
00016234 0028 0004 0001             		ori.b	#4,1(a0)
0001623A 117C 0080 0019             		move.b	#$80,$19(a0)
00016240 7000                       		moveq	#0,d0
00016242 1028 0028                  		move.b	$28(a0),d0
00016246 0240 000F                  		andi.w	#$F,d0
0001624A C0FC 003C                  		mulu.w	#$3C,d0
0001624E 3140 0032                  		move.w	d0,$32(a0)
00016252 4A28 0028                  		tst.b	$28(a0)
00016256 6A00                       		bpl.s	Obj69_Trapdoor
00016258 5428 0024                  		addq.b	#2,$24(a0)
0001625C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016264 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001626A 117C 0010 0019             		move.b	#$10,$19(a0)
00016270 117C 0002 001C             		move.b	#2,$1C(a0)
00016276 7000                       		moveq	#0,d0
00016278 1028 0028                  		move.b	$28(a0),d0	; get object type
0001627C 3200                       		move.w	d0,d1
0001627E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016282 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016286 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001628A 3140 0032                  		move.w	d0,$32(a0)
0001628E 0241 0070                  		andi.w	#$70,d1
00016292 0641 0010                  		addi.w	#$10,d1
00016296 E549                       		lsl.w	#2,d1
00016298 5341                       		subq.w	#1,d1
0001629A 3141 0036                  		move.w	d1,$36(a0)
0001629E 6000                       		bra.s	Obj69_Spinner
000162A0                            ; ===========================================================================
000162A0                            
000162A0                            Obj69_Trapdoor:				; XREF: Obj69_Index
000162A0 5368 0030                  		subq.w	#1,$30(a0)
000162A4 6A00                       		bpl.s	Obj69_Animate
000162A6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000162AC 0868 0000 001C             		bchg	#0,$1C(a0)
000162B2 4A28 0001                  		tst.b	1(a0)
000162B6 6A00                       		bpl.s	Obj69_Animate
000162B8 303C 00BB                  		move.w	#$BB,d0
000162BC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
000162C2                            
000162C2                            Obj69_Animate:
000162C2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000162C8 4EB9 0000 B04C             		jsr	AnimateSprite
000162CE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000162D2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000162D4 323C 004B                  		move.w	#$4B,d1
000162D8 343C 000C                  		move.w	#$C,d2
000162DC 3602                       		move.w	d2,d3
000162DE 5243                       		addq.w	#1,d3
000162E0 3828 0008                  		move.w	8(a0),d4
000162E4 6100 A0D8                  		bsr.w	SolidObject
000162E8 6000 9DAC                  		bra.w	MarkObjGone
000162EC                            ; ===========================================================================
000162EC                            
000162EC                            Obj69_NotSolid:
000162EC 0828 0003 0022             		btst	#3,$22(a0)
000162F2 6700                       		beq.s	Obj69_Display
000162F4 43F8 D000                  		lea	($FFFFD000).w,a1
000162F8 08A9 0003 0022             		bclr	#3,$22(a1)
000162FE 08A8 0003 0022             		bclr	#3,$22(a0)
00016304 4228 0025                  		clr.b	$25(a0)
00016308                            
00016308                            Obj69_Display:
00016308 6000 9D8C                  		bra.w	MarkObjGone
0001630C                            ; ===========================================================================
0001630C                            
0001630C                            Obj69_Spinner:				; XREF: Obj69_Index
0001630C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016310 C068 0036                  		and.w	$36(a0),d0
00016314 6600                       		bne.s	Obj69_Delay
00016316 117C 0001 0034             		move.b	#1,$34(a0)
0001631C                            
0001631C                            Obj69_Delay:
0001631C 4A28 0034                  		tst.b	$34(a0)
00016320 6700                       		beq.s	Obj69_Animate2
00016322 5368 0030                  		subq.w	#1,$30(a0)
00016326 6A00                       		bpl.s	Obj69_Animate2
00016328 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001632E 4228 0034                  		clr.b	$34(a0)
00016332 0868 0000 001C             		bchg	#0,$1C(a0)
00016338                            
00016338                            Obj69_Animate2:
00016338 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001633E 4EB9 0000 B04C             		jsr	AnimateSprite
00016344 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016348 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001634A 323C 001B                  		move.w	#$1B,d1
0001634E 343C 0007                  		move.w	#7,d2
00016352 3602                       		move.w	d2,d3
00016354 5243                       		addq.w	#1,d3
00016356 3828 0008                  		move.w	8(a0),d4
0001635A 6100 A062                  		bsr.w	SolidObject
0001635E 6000 9D36                  		bra.w	MarkObjGone
00016362                            ; ===========================================================================
00016362                            
00016362                            Obj69_NotSolid2:
00016362 0828 0003 0022             		btst	#3,$22(a0)
00016368 6700                       		beq.s	Obj69_Display2
0001636A 43F8 D000                  		lea	($FFFFD000).w,a1
0001636E 08A9 0003 0022             		bclr	#3,$22(a1)
00016374 08A8 0003 0022             		bclr	#3,$22(a0)
0001637A 4228 0025                  		clr.b	$25(a0)
0001637E                            
0001637E                            Obj69_Display2:
0001637E 6000 9D16                  		bra.w	MarkObjGone
00016382                            ; ===========================================================================
00016382                            Ani_obj69:
00016382                            	include "_anim\obj69.asm"
00016382                            ; ---------------------------------------------------------------------------
00016382                            ; Animation script - trapdoor (SBZ)
00016382                            ; ---------------------------------------------------------------------------
00016382 0000                       		dc.w byte_158AC-Ani_obj69
00016384 0000                       		dc.w byte_158B2-Ani_obj69
00016386 0000                       		dc.w byte_158B8-Ani_obj69
00016388 0000                       		dc.w byte_158CC-Ani_obj69
0001638A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016390 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016396 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163A3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163AA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163B7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163BE                            		even
000163BE                            		even
000163BE                            
000163BE                            ; ---------------------------------------------------------------------------
000163BE                            ; Sprite mappings - trapdoor (SBZ)
000163BE                            ; ---------------------------------------------------------------------------
000163BE                            Map_obj69:
000163BE                            	include "_maps\obj69.asm"
000163BE                            ; ---------------------------------------------------------------------------
000163BE                            ; Sprite mappings - trapdoor (SBZ)
000163BE                            ; ---------------------------------------------------------------------------
000163BE 0000                       		dc.w byte_158E6-Map_obj69
000163C0 0000                       		dc.w byte_158FB-Map_obj69
000163C2 0000                       		dc.w byte_15924-Map_obj69
000163C4 04                         byte_158E6:	dc.b 4
000163C5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000163CA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000163CF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000163D4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000163D9 08                         byte_158FB:	dc.b 8
000163DA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000163DF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000163E4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000163E9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000163EE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000163F3 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000163F8 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000163FD 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016402 04                         byte_15924:	dc.b 4
00016403 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016408 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001640D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016412 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016418 00                         		even
00016418 00                         		even
00016418                            
00016418                            ; ---------------------------------------------------------------------------
00016418                            ; Sprite mappings - spinning platforms (SBZ)
00016418                            ; ---------------------------------------------------------------------------
00016418                            Map_obj69a:
00016418                            	include "_maps\obj69a.asm"
00016418                            ; ---------------------------------------------------------------------------
00016418                            ; Sprite mappings - spinning platforms (SBZ)
00016418                            ; ---------------------------------------------------------------------------
00016418 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001641C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016420 0000                       		dc.w byte_15970-Map_obj69a
00016422 02                         byte_15944:	dc.b 2
00016423 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016428 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001642D 02                         byte_1594F:	dc.b 2
0001642E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016433 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016438 02                         byte_1595A:	dc.b 2
00016439 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001643E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016443 02                         byte_15965:	dc.b 2
00016444 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016449 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001644E 02                         byte_15970:	dc.b 2
0001644F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016454 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001645A 00                         		even
0001645A 00                         		even
0001645A                            
0001645A                            ; ===========================================================================
0001645A                            ; ---------------------------------------------------------------------------
0001645A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001645A                            ; ---------------------------------------------------------------------------
0001645A                            
0001645A                            Obj6A:					; XREF: Obj_Index
0001645A 7000                       		moveq	#0,d0
0001645C 1028 0024                  		move.b	$24(a0),d0
00016460 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016464 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016468                            ; ===========================================================================
00016468 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001646A 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001646C                            ; ===========================================================================
0001646C                            
0001646C                            Obj6A_Main:				; XREF: Obj6A_Index
0001646C 5428 0024                  		addq.b	#2,$24(a0)
00016470 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016478 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001647E 117C 0004 0001             		move.b	#4,1(a0)
00016484 117C 0004 0018             		move.b	#4,$18(a0)
0001648A 117C 0020 0019             		move.b	#$20,$19(a0)
00016490 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016496 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001649C 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000164A2 6400                       		bcc.s	Obj6A_Action
000164A4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164AA                            
000164AA                            Obj6A_Action:				; XREF: Obj6A_Index
000164AA 7000                       		moveq	#0,d0
000164AC 1028 0028                  		move.b	$28(a0),d0
000164B0 0240 0007                  		andi.w	#7,d0
000164B4 D040                       		add.w	d0,d0
000164B6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000164BA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000164BE 3028 003A                  		move.w	$3A(a0),d0
000164C2 0240 FF80                  		andi.w	#$FF80,d0
000164C6 3238 F700                  		move.w	($FFFFF700).w,d1
000164CA 0441 0080                  		subi.w	#$80,d1
000164CE 0241 FF80                  		andi.w	#$FF80,d1
000164D2 9041                       		sub.w	d1,d0
000164D4 0C40 0280                  		cmpi.w	#$280,d0
000164D8 6200                       		bhi.s	Obj6A_Delete
000164DA 4EF9 0000 DFEE             		jmp	DisplaySprite
000164E0                            ; ===========================================================================
000164E0                            
000164E0                            Obj6A_Delete:
000164E0 4EF9 0000 E02A             		jmp	DeleteObject
000164E6                            ; ===========================================================================
000164E6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000164EA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000164EE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000164F0                            ; ===========================================================================
000164F0                            
000164F0                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000164F0 4E75                       		rts	
000164F2                            ; ===========================================================================
000164F2                            
000164F2                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000164F2 323C 0060                  		move.w	#$60,d1
000164F6 7000                       		moveq	#0,d0
000164F8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000164FC 0828 0000 0022             		btst	#0,$22(a0)
00016502 6700                       		beq.s	Obj6A_Animate01
00016504 4440                       		neg.w	d0
00016506 D041                       		add.w	d1,d0
00016508                            
00016508                            Obj6A_Animate01:
00016508 3228 003A                  		move.w	$3A(a0),d1
0001650C 9240                       		sub.w	d0,d1
0001650E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016512 5328 001E                  		subq.b	#1,$1E(a0)
00016516 6A00                       		bpl.s	loc_15A46
00016518 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001651E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016524                            
00016524                            loc_15A46:
00016524 4A28 0001                  		tst.b	1(a0)
00016528 6A00                       		bpl.s	locret_15A60
0001652A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001652E 0240 000F                  		andi.w	#$F,d0
00016532 6600                       		bne.s	locret_15A60
00016534 303C 00B0                  		move.w	#$B0,d0
00016538 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
0001653E                            
0001653E                            locret_15A60:
0001653E 4E75                       		rts	
00016540                            ; ===========================================================================
00016540                            
00016540                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016540 323C 0030                  		move.w	#$30,d1
00016544 7000                       		moveq	#0,d0
00016546 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001654A 0828 0000 0022             		btst	#0,$22(a0)
00016550 6700                       		beq.s	Obj6A_Animate02
00016552 4440                       		neg.w	d0
00016554 0640 0080                  		addi.w	#$80,d0
00016558                            
00016558                            Obj6A_Animate02:
00016558 3228 0038                  		move.w	$38(a0),d1
0001655C 9240                       		sub.w	d0,d1
0001655E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016562 5328 001E                  		subq.b	#1,$1E(a0)
00016566 6A00                       		bpl.s	loc_15A96
00016568 117C 0002 001E             		move.b	#2,$1E(a0)
0001656E 0868 0000 001A             		bchg	#0,$1A(a0)
00016574                            
00016574                            loc_15A96:
00016574 4A28 0001                  		tst.b	1(a0)
00016578 6A00                       		bpl.s	locret_15AB0
0001657A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001657E 0C00 0018                  		cmpi.b	#$18,d0
00016582 6600                       		bne.s	locret_15AB0
00016584 303C 00B0                  		move.w	#$B0,d0
00016588 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
0001658E                            
0001658E                            locret_15AB0:
0001658E 4E75                       		rts	
00016590                            ; ===========================================================================
00016590                            
00016590                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016590 4A28 003D                  		tst.b	$3D(a0)
00016594 6600                       		bne.s	Obj6A_Animate03
00016596 3038 D008                  		move.w	($FFFFD008).w,d0
0001659A 0440 00C0                  		subi.w	#$C0,d0
0001659E 6500                       		bcs.s	loc_15B02
000165A0 9068 0008                  		sub.w	8(a0),d0
000165A4 6500                       		bcs.s	loc_15B02
000165A6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000165AA 0440 0080                  		subi.w	#$80,d0
000165AE B068 000C                  		cmp.w	$C(a0),d0
000165B2 6400                       		bcc.s	locret_15B04
000165B4 0640 0100                  		addi.w	#$100,d0
000165B8 B068 000C                  		cmp.w	$C(a0),d0
000165BC 6500                       		bcs.s	locret_15B04
000165BE 117C 0001 003D             		move.b	#1,$3D(a0)
000165C4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000165CA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000165D0 117C 0002 001A             		move.b	#2,$1A(a0)
000165D6 303C 00B0                  		move.w	#$B0,d0
000165DA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000165E0                            
000165E0                            loc_15B02:
000165E0 588F                       		addq.l	#4,sp
000165E2                            
000165E2                            locret_15B04:
000165E2 4E75                       		rts	
000165E4                            ; ===========================================================================
000165E4                            
000165E4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000165E4 4EB9 0000 DFC8             		jsr	SpeedToPos
000165EA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000165F0 5328 001E                  		subq.b	#1,$1E(a0)
000165F4 6A00                       		bpl.s	locret_15B24
000165F6 117C 0002 001E             		move.b	#2,$1E(a0)
000165FC 0868 0000 001A             		bchg	#0,$1A(a0)
00016602                            
00016602                            locret_15B24:
00016602 4E75                       		rts	
00016604                            ; ===========================================================================
00016604                            
00016604                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016604 4A28 003D                  		tst.b	$3D(a0)
00016608 6600                       		bne.s	Obj6A_Animate04
0001660A 3038 D008                  		move.w	($FFFFD008).w,d0
0001660E 0640 00E0                  		addi.w	#$E0,d0
00016612 9068 0008                  		sub.w	8(a0),d0
00016616 6400                       		bcc.s	loc_15B74
00016618 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001661C 0440 0080                  		subi.w	#$80,d0
00016620 B068 000C                  		cmp.w	$C(a0),d0
00016624 6400                       		bcc.s	locret_15B76
00016626 0640 0100                  		addi.w	#$100,d0
0001662A B068 000C                  		cmp.w	$C(a0),d0
0001662E 6500                       		bcs.s	locret_15B76
00016630 117C 0001 003D             		move.b	#1,$3D(a0)
00016636 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001663C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016642 117C 0002 001A             		move.b	#2,$1A(a0)
00016648 303C 00B0                  		move.w	#$B0,d0
0001664C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016652                            
00016652                            loc_15B74:
00016652 588F                       		addq.l	#4,sp
00016654                            
00016654                            locret_15B76:
00016654 4E75                       		rts	
00016656                            ; ===========================================================================
00016656                            
00016656                            Obj6A_Animate04:
00016656 4EB9 0000 DFC8             		jsr	SpeedToPos
0001665C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016662 5328 001E                  		subq.b	#1,$1E(a0)
00016666 6A00                       		bpl.s	locret_15B96
00016668 117C 0002 001E             		move.b	#2,$1E(a0)
0001666E 0868 0000 001A             		bchg	#0,$1A(a0)
00016674                            
00016674                            locret_15B96:
00016674 4E75                       		rts	
00016676                            ; ===========================================================================
00016676                            ; ---------------------------------------------------------------------------
00016676                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016676                            ; ---------------------------------------------------------------------------
00016676                            Map_obj6A:
00016676                            	include "_maps\obj6A.asm"
00016676                            ; ---------------------------------------------------------------------------
00016676                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016676                            ; ---------------------------------------------------------------------------
00016676 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001667A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001667E 07                         byte_15BA0:	dc.b 7
0001667F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016684 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016689 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001668E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016693 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016698 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001669D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166A2 07                         byte_15BC4:	dc.b 7
000166A3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166A8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166AD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166B2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166B7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166BC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000166C1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000166C6 04                         byte_15BE8:	dc.b 4
000166C7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166CC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166D1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166D6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166DB 04                         byte_15BFD:	dc.b 4
000166DC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166E1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166E6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000166EB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000166F0                            		even
000166F0                            		even
000166F0                            
000166F0                            ; ===========================================================================
000166F0                            ; ---------------------------------------------------------------------------
000166F0                            ; Object 6B - stomper (SBZ)
000166F0                            ; ---------------------------------------------------------------------------
000166F0                            
000166F0                            Obj6B:					; XREF: Obj_Index
000166F0 7000                       		moveq	#0,d0
000166F2 1028 0024                  		move.b	$24(a0),d0
000166F6 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000166FA 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000166FE                            ; ===========================================================================
000166FE 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016700 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016702                            
00016702 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016706 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001670A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001670E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016712 8040 0005                  		dc.b  $80, $40,	  0,   5
00016716                            ; ===========================================================================
00016716                            
00016716                            Obj6B_Main:				; XREF: Obj6B_Index
00016716 5428 0024                  		addq.b	#2,$24(a0)
0001671A 7000                       		moveq	#0,d0
0001671C 1028 0028                  		move.b	$28(a0),d0
00016720 E448                       		lsr.w	#2,d0
00016722 0240 001C                  		andi.w	#$1C,d0
00016726 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001672A 115B 0019                  		move.b	(a3)+,$19(a0)
0001672E 115B 0016                  		move.b	(a3)+,$16(a0)
00016732 E448                       		lsr.w	#2,d0
00016734 1140 001A                  		move.b	d0,$1A(a0)
00016738 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016740 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016746 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001674C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001674E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016754 6700                       		beq.s	Obj6B_SBZ3
00016756                            
00016756                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016756 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001675A 7000                       		moveq	#0,d0
0001675C 1028 0023                  		move.b	$23(a0),d0
00016760 6700                       		beq.s	Obj6B_Delete
00016762 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016768                            
00016768                            Obj6B_Delete:
00016768 4EF9 0000 E02A             		jmp	DeleteObject
0001676E                            ; ===========================================================================
0001676E                            
0001676E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001676E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016774 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001677A 6600                       		bne.s	Obj6B_SBZ12
0001677C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016780 7000                       		moveq	#0,d0
00016782 1028 0023                  		move.b	$23(a0),d0
00016786 6700                       		beq.s	Obj6B_SBZ12
00016788 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001678E 6700                       		beq.s	Obj6B_SBZ12
00016790 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016794 60C0                       		bra.s	Obj6B_ChkGone
00016796                            ; ===========================================================================
00016796                            
00016796                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016796 0028 0004 0001             		ori.b	#4,1(a0)
0001679C 117C 0004 0018             		move.b	#4,$18(a0)
000167A2 3168 0008 0034             		move.w	8(a0),$34(a0)
000167A8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000167AE 7000                       		moveq	#0,d0
000167B0 101B                       		move.b	(a3)+,d0
000167B2 3140 003C                  		move.w	d0,$3C(a0)
000167B6 7000                       		moveq	#0,d0
000167B8 1028 0028                  		move.b	$28(a0),d0
000167BC 6A00                       		bpl.s	Obj6B_Action
000167BE 0200 000F                  		andi.b	#$F,d0
000167C2 1140 003E                  		move.b	d0,$3E(a0)
000167C6 1153 0028                  		move.b	(a3),$28(a0)
000167CA 0C13 0005                  		cmpi.b	#5,(a3)
000167CE 6600                       		bne.s	Obj6B_ChkGone2
000167D0 08E8 0004 0001             		bset	#4,1(a0)
000167D6                            
000167D6                            Obj6B_ChkGone2:
000167D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167DA 7000                       		moveq	#0,d0
000167DC 1028 0023                  		move.b	$23(a0),d0
000167E0 6700                       		beq.s	Obj6B_Action
000167E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167E8                            
000167E8                            Obj6B_Action:				; XREF: Obj6B_Index
000167E8 3F28 0008                  		move.w	8(a0),-(sp)
000167EC 7000                       		moveq	#0,d0
000167EE 1028 0028                  		move.b	$28(a0),d0
000167F2 0240 000F                  		andi.w	#$F,d0
000167F6 D040                       		add.w	d0,d0
000167F8 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000167FC 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016800 381F                       		move.w	(sp)+,d4
00016802 4A28 0001                  		tst.b	1(a0)
00016806 6A00                       		bpl.s	Obj6B_ChkDel
00016808 7200                       		moveq	#0,d1
0001680A 1228 0019                  		move.b	$19(a0),d1
0001680E 0641 000B                  		addi.w	#$B,d1
00016812 7400                       		moveq	#0,d2
00016814 1428 0016                  		move.b	$16(a0),d2
00016818 3602                       		move.w	d2,d3
0001681A 5243                       		addq.w	#1,d3
0001681C 6100 9BA0                  		bsr.w	SolidObject
00016820                            
00016820                            Obj6B_ChkDel:
00016820 3028 0034                  		move.w	$34(a0),d0
00016824 0240 FF80                  		andi.w	#$FF80,d0
00016828 3238 F700                  		move.w	($FFFFF700).w,d1
0001682C 0441 0080                  		subi.w	#$80,d1
00016830 0241 FF80                  		andi.w	#$FF80,d1
00016834 9041                       		sub.w	d1,d0
00016836 0C40 0280                  		cmpi.w	#$280,d0
0001683A 6200                       		bhi.s	loc_15D64
0001683C 4EF9 0000 DFEE             		jmp	DisplaySprite
00016842                            ; ===========================================================================
00016842                            
00016842                            loc_15D64:
00016842 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016848 6600                       		bne.s	Obj6B_Delete2
0001684A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001684E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016852 7000                       		moveq	#0,d0
00016854 1028 0023                  		move.b	$23(a0),d0
00016858 6700                       		beq.s	Obj6B_Delete2
0001685A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016860                            
00016860                            Obj6B_Delete2:
00016860 4EF9 0000 E02A             		jmp	DeleteObject
00016866                            ; ===========================================================================
00016866 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001686A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001686E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016872                            ; ===========================================================================
00016872                            
00016872                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016872 4E75                       		rts	
00016874                            ; ===========================================================================
00016874                            
00016874                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016874 4A28 0038                  		tst.b	$38(a0)
00016878 6600                       		bne.s	loc_15DB4
0001687A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001687E 7000                       		moveq	#0,d0
00016880 1028 003E                  		move.b	$3E(a0),d0
00016884 0832 0000 0000             		btst	#0,(a2,d0.w)
0001688A 6700                       		beq.s	loc_15DC2
0001688C 117C 0001 0038             		move.b	#1,$38(a0)
00016892                            
00016892                            loc_15DB4:
00016892 3028 003C                  		move.w	$3C(a0),d0
00016896 B068 003A                  		cmp.w	$3A(a0),d0
0001689A 6700                       		beq.s	loc_15DE0
0001689C 5468 003A                  		addq.w	#2,$3A(a0)
000168A0                            
000168A0                            loc_15DC2:
000168A0 3028 003A                  		move.w	$3A(a0),d0
000168A4 0828 0000 0022             		btst	#0,$22(a0)
000168AA 6700                       		beq.s	loc_15DD4
000168AC 4440                       		neg.w	d0
000168AE 0640 0080                  		addi.w	#$80,d0
000168B2                            
000168B2                            loc_15DD4:
000168B2 3228 0034                  		move.w	$34(a0),d1
000168B6 9240                       		sub.w	d0,d1
000168B8 3141 0008                  		move.w	d1,8(a0)
000168BC 4E75                       		rts	
000168BE                            ; ===========================================================================
000168BE                            
000168BE                            loc_15DE0:
000168BE 5228 0028                  		addq.b	#1,$28(a0)
000168C2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000168C8 4228 0038                  		clr.b	$38(a0)
000168CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168D0 7000                       		moveq	#0,d0
000168D2 1028 0023                  		move.b	$23(a0),d0
000168D6 67C8                       		beq.s	loc_15DC2
000168D8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000168DE 60C0                       		bra.s	loc_15DC2
000168E0                            ; ===========================================================================
000168E0                            
000168E0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000168E0 4A28 0038                  		tst.b	$38(a0)
000168E4 6600                       		bne.s	loc_15E14
000168E6 5368 0036                  		subq.w	#1,$36(a0)
000168EA 6600                       		bne.s	loc_15E1E
000168EC 117C 0001 0038             		move.b	#1,$38(a0)
000168F2                            
000168F2                            loc_15E14:
000168F2 4A68 003A                  		tst.w	$3A(a0)
000168F6 6700                       		beq.s	loc_15E3C
000168F8 5568 003A                  		subq.w	#2,$3A(a0)
000168FC                            
000168FC                            loc_15E1E:
000168FC 3028 003A                  		move.w	$3A(a0),d0
00016900 0828 0000 0022             		btst	#0,$22(a0)
00016906 6700                       		beq.s	loc_15E30
00016908 4440                       		neg.w	d0
0001690A 0640 0080                  		addi.w	#$80,d0
0001690E                            
0001690E                            loc_15E30:
0001690E 3228 0034                  		move.w	$34(a0),d1
00016912 9240                       		sub.w	d0,d1
00016914 3141 0008                  		move.w	d1,8(a0)
00016918 4E75                       		rts	
0001691A                            ; ===========================================================================
0001691A                            
0001691A                            loc_15E3C:
0001691A 5328 0028                  		subq.b	#1,$28(a0)
0001691E 4228 0038                  		clr.b	$38(a0)
00016922 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016926 7000                       		moveq	#0,d0
00016928 1028 0023                  		move.b	$23(a0),d0
0001692C 67CE                       		beq.s	loc_15E1E
0001692E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016934 60C6                       		bra.s	loc_15E1E
00016936                            ; ===========================================================================
00016936                            
00016936                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016936 4A28 0038                  		tst.b	$38(a0)
0001693A 6600                       		bne.s	loc_15E7C
0001693C 4A68 003A                  		tst.w	$3A(a0)
00016940 6700                       		beq.s	loc_15E6A
00016942 5368 003A                  		subq.w	#1,$3A(a0)
00016946 6000                       		bra.s	loc_15E8E
00016948                            ; ===========================================================================
00016948                            
00016948                            loc_15E6A:
00016948 5368 0036                  		subq.w	#1,$36(a0)
0001694C 6A00                       		bpl.s	loc_15E8E
0001694E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016954 117C 0001 0038             		move.b	#1,$38(a0)
0001695A                            
0001695A                            loc_15E7C:
0001695A 5068 003A                  		addq.w	#8,$3A(a0)
0001695E 3028 003A                  		move.w	$3A(a0),d0
00016962 B068 003C                  		cmp.w	$3C(a0),d0
00016966 6600                       		bne.s	loc_15E8E
00016968 4228 0038                  		clr.b	$38(a0)
0001696C                            
0001696C                            loc_15E8E:
0001696C 3028 003A                  		move.w	$3A(a0),d0
00016970 0828 0000 0022             		btst	#0,$22(a0)
00016976 6700                       		beq.s	loc_15EA0
00016978 4440                       		neg.w	d0
0001697A 0640 0038                  		addi.w	#$38,d0
0001697E                            
0001697E                            loc_15EA0:
0001697E 3228 0030                  		move.w	$30(a0),d1
00016982 D240                       		add.w	d0,d1
00016984 3141 000C                  		move.w	d1,$C(a0)
00016988 4E75                       		rts	
0001698A                            ; ===========================================================================
0001698A                            
0001698A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001698A 4A28 0038                  		tst.b	$38(a0)
0001698E 6600                       		bne.s	loc_15ED0
00016990 4A68 003A                  		tst.w	$3A(a0)
00016994 6700                       		beq.s	loc_15EBE
00016996 5168 003A                  		subq.w	#8,$3A(a0)
0001699A 6000                       		bra.s	loc_15EF0
0001699C                            ; ===========================================================================
0001699C                            
0001699C                            loc_15EBE:
0001699C 5368 0036                  		subq.w	#1,$36(a0)
000169A0 6A00                       		bpl.s	loc_15EF0
000169A2 317C 003C 0036             		move.w	#$3C,$36(a0)
000169A8 117C 0001 0038             		move.b	#1,$38(a0)
000169AE                            
000169AE                            loc_15ED0:
000169AE 3028 003A                  		move.w	$3A(a0),d0
000169B2 B068 003C                  		cmp.w	$3C(a0),d0
000169B6 6700                       		beq.s	loc_15EE0
000169B8 5068 003A                  		addq.w	#8,$3A(a0)
000169BC 6000                       		bra.s	loc_15EF0
000169BE                            ; ===========================================================================
000169BE                            
000169BE                            loc_15EE0:
000169BE 5368 0036                  		subq.w	#1,$36(a0)
000169C2 6A00                       		bpl.s	loc_15EF0
000169C4 317C 003C 0036             		move.w	#$3C,$36(a0)
000169CA 4228 0038                  		clr.b	$38(a0)
000169CE                            
000169CE                            loc_15EF0:
000169CE 3028 003A                  		move.w	$3A(a0),d0
000169D2 0828 0000 0022             		btst	#0,$22(a0)
000169D8 6700                       		beq.s	loc_15F02
000169DA 4440                       		neg.w	d0
000169DC 0640 0038                  		addi.w	#$38,d0
000169E0                            
000169E0                            loc_15F02:
000169E0 3228 0030                  		move.w	$30(a0),d1
000169E4 D240                       		add.w	d0,d1
000169E6 3141 000C                  		move.w	d1,$C(a0)
000169EA 4E75                       		rts	
000169EC                            ; ===========================================================================
000169EC                            
000169EC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000169EC 4A28 0038                  		tst.b	$38(a0)
000169F0 6600                       		bne.s	loc_15F3E
000169F2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000169F6 7000                       		moveq	#0,d0
000169F8 1028 003E                  		move.b	$3E(a0),d0
000169FC 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A02 6700                       		beq.s	locret_15F5C
00016A04 117C 0001 0038             		move.b	#1,$38(a0)
00016A0A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A0E 7000                       		moveq	#0,d0
00016A10 1028 0023                  		move.b	$23(a0),d0
00016A14 6700                       		beq.s	loc_15F3E
00016A16 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A1C                            
00016A1C                            loc_15F3E:
00016A1C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A24 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A2C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A32 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A38 6700                       		beq.s	loc_15F5E
00016A3A                            
00016A3A                            locret_15F5C:
00016A3A 4E75                       		rts	
00016A3C                            ; ===========================================================================
00016A3C                            
00016A3C                            loc_15F5E:
00016A3C 4228 0028                  		clr.b	$28(a0)
00016A40 4228 0038                  		clr.b	$38(a0)
00016A44 4E75                       		rts	
00016A46                            ; ===========================================================================
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            Map_obj6B:
00016A46                            	include "_maps\obj6B.asm"
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A46                            ; ---------------------------------------------------------------------------
00016A46 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016A4A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016A4E 0000                       		dc.w byte_15FB0-Map_obj6B
00016A50 04                         byte_15F72:	dc.b 4
00016A51 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016A56 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016A5B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016A60 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016A65 08                         byte_15F87:	dc.b 8
00016A66 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016A6B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016A70 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016A75 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016A7A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016A7F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016A84 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016A89 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016A8E 0E                         byte_15FB0:	dc.b $E
00016A8F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016A94 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016A99 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016A9E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016AA3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016AA8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016AAD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016AB2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016AB7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016ABC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016AC1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016AC6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016ACB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016AD0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016AD6 00                         		even
00016AD6 00                         		even
00016AD6                            
00016AD6                            ; ===========================================================================
00016AD6                            ; ---------------------------------------------------------------------------
00016AD6                            ; Object 6C - vanishing	platforms (SBZ)
00016AD6                            ; ---------------------------------------------------------------------------
00016AD6                            
00016AD6                            Obj6C:					; XREF: Obj_Index
00016AD6 7000                       		moveq	#0,d0
00016AD8 1028 0024                  		move.b	$24(a0),d0
00016ADC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016AE0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016AE4                            ; ===========================================================================
00016AE4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016AE6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016AE8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016AEA 0000                       		dc.w loc_16068-Obj6C_Index
00016AEC                            ; ===========================================================================
00016AEC                            
00016AEC                            Obj6C_Main:				; XREF: Obj6C_Index
00016AEC 5C28 0024                  		addq.b	#6,$24(a0)
00016AF0 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016AF8 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016AFE 0028 0004 0001             		ori.b	#4,1(a0)
00016B04 117C 0010 0019             		move.b	#$10,$19(a0)
00016B0A 117C 0004 0018             		move.b	#4,$18(a0)
00016B10 7000                       		moveq	#0,d0
00016B12 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B16 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B1A 5240                       		addq.w	#1,d0		; add 1
00016B1C EF48                       		lsl.w	#7,d0		; multiply by $80
00016B1E 3200                       		move.w	d0,d1
00016B20 5340                       		subq.w	#1,d0
00016B22 3140 0030                  		move.w	d0,$30(a0)
00016B26 3140 0032                  		move.w	d0,$32(a0)
00016B2A 7000                       		moveq	#0,d0
00016B2C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B30 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B34 0641 0080                  		addi.w	#$80,d1
00016B38 C0C1                       		mulu.w	d1,d0
00016B3A E088                       		lsr.l	#8,d0
00016B3C 3140 0036                  		move.w	d0,$36(a0)
00016B40 5341                       		subq.w	#1,d1
00016B42 3141 0038                  		move.w	d1,$38(a0)
00016B46                            
00016B46                            loc_16068:				; XREF: Obj6C_Index
00016B46 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B4A 9068 0036                  		sub.w	$36(a0),d0
00016B4E C068 0038                  		and.w	$38(a0),d0
00016B52 6600                       		bne.s	Obj6C_Animate
00016B54 5928 0024                  		subq.b	#4,$24(a0)
00016B58 6000                       		bra.s	Obj6C_Vanish
00016B5A                            ; ===========================================================================
00016B5A                            
00016B5A                            Obj6C_Animate:
00016B5A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016B60 4EB9 0000 B04C             		jsr	AnimateSprite
00016B66 6000 952E                  		bra.w	MarkObjGone
00016B6A                            ; ===========================================================================
00016B6A                            
00016B6A                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016B6A 5368 0030                  		subq.w	#1,$30(a0)
00016B6E 6A00                       		bpl.s	loc_160AA
00016B70 317C 007F 0030             		move.w	#127,$30(a0)
00016B76 4A28 001C                  		tst.b	$1C(a0)
00016B7A 6700                       		beq.s	loc_160A4
00016B7C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016B82                            
00016B82                            loc_160A4:
00016B82 0868 0000 001C             		bchg	#0,$1C(a0)
00016B88                            
00016B88                            loc_160AA:
00016B88 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016B8E 4EB9 0000 B04C             		jsr	AnimateSprite
00016B94 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016B9A 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016B9C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016BA2 6600                       		bne.s	loc_160D6
00016BA4 7200                       		moveq	#0,d1
00016BA6 1228 0019                  		move.b	$19(a0),d1
00016BAA 4EB9 0000 7C0C             		jsr	(PlatformObject).l
00016BB0 6000 94E4                  		bra.w	MarkObjGone
00016BB4                            ; ===========================================================================
00016BB4                            
00016BB4                            loc_160D6:
00016BB4 7200                       		moveq	#0,d1
00016BB6 1228 0019                  		move.b	$19(a0),d1
00016BBA 4EB9 0000 7D80             		jsr	(ExitPlatform).l
00016BC0 3428 0008                  		move.w	8(a0),d2
00016BC4 4EB9 0000 82EA             		jsr	(MvSonicOnPtfm2).l
00016BCA 6000 94CA                  		bra.w	MarkObjGone
00016BCE                            ; ===========================================================================
00016BCE                            
00016BCE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016BCE 0828 0003 0022             		btst	#3,$22(a0)
00016BD4 6700                       		beq.s	Obj6C_Display
00016BD6 43F8 D000                  		lea	($FFFFD000).w,a1
00016BDA 08A9 0003 0022             		bclr	#3,$22(a1)
00016BE0 08A8 0003 0022             		bclr	#3,$22(a0)
00016BE6 117C 0002 0024             		move.b	#2,$24(a0)
00016BEC 4228 0025                  		clr.b	$25(a0)
00016BF0                            
00016BF0                            Obj6C_Display:
00016BF0 6000 94A4                  		bra.w	MarkObjGone
00016BF4                            ; ===========================================================================
00016BF4                            Ani_obj6C:
00016BF4                            	include "_anim\obj6C.asm"
00016BF4                            ; ---------------------------------------------------------------------------
00016BF4                            ; Animation script - vanishing platforms (SBZ)
00016BF4                            ; ---------------------------------------------------------------------------
00016BF4 0000                       		dc.w byte_1611A-Ani_obj6C
00016BF6 0000                       		dc.w byte_16122-Ani_obj6C
00016BF8 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C00 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C08                            		even
00016C08                            		even
00016C08                            
00016C08                            ; ---------------------------------------------------------------------------
00016C08                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C08                            ; ---------------------------------------------------------------------------
00016C08                            Map_obj6C:
00016C08                            	include "_maps\obj6C.asm"
00016C08                            ; ---------------------------------------------------------------------------
00016C08                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C08                            ; ---------------------------------------------------------------------------
00016C08 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C0C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C10 01                         byte_16132:	dc.b 1
00016C11 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C16 01                         byte_16138:	dc.b 1
00016C17 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C1C 01                         byte_1613E:	dc.b 1
00016C1D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C22 00                         byte_16144:	dc.b 0
00016C24 00                         		even
00016C24 00                         		even
00016C24                            
00016C24                            ; ===========================================================================
00016C24                            ; ---------------------------------------------------------------------------
00016C24                            ; Object 6E - electrocution orbs (SBZ)
00016C24                            ; ---------------------------------------------------------------------------
00016C24                            
00016C24                            Obj6E:					; XREF: Obj_Index
00016C24 7000                       		moveq	#0,d0
00016C26 1028 0024                  		move.b	$24(a0),d0
00016C2A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C2E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C32                            ; ===========================================================================
00016C32 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C34 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C36                            ; ===========================================================================
00016C36                            
00016C36                            Obj6E_Main:				; XREF: Obj6E_Index
00016C36 5428 0024                  		addq.b	#2,$24(a0)
00016C3A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016C42 317C 047E 0002             		move.w	#$47E,2(a0)
00016C48 0028 0004 0001             		ori.b	#4,1(a0)
00016C4E 117C 0028 0019             		move.b	#$28,$19(a0)
00016C54 7000                       		moveq	#0,d0
00016C56 1028 0028                  		move.b	$28(a0),d0	; read object type
00016C5A E948                       		lsl.w	#4,d0		; multiply by $10
00016C5C 5340                       		subq.w	#1,d0
00016C5E 3140 0034                  		move.w	d0,$34(a0)
00016C62                            
00016C62                            Obj6E_Shock:				; XREF: Obj6E_Index
00016C62 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016C66 C068 0034                  		and.w	$34(a0),d0
00016C6A 6600                       		bne.s	Obj6E_Animate
00016C6C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016C72 4A28 0001                  		tst.b	1(a0)
00016C76 6A00                       		bpl.s	Obj6E_Animate
00016C78 303C 00B1                  		move.w	#$B1,d0
00016C7C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play electricity sound
00016C82                            
00016C82                            Obj6E_Animate:
00016C82 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016C88 4EB9 0000 B04C             		jsr	AnimateSprite
00016C8E 117C 0000 0020             		move.b	#0,$20(a0)
00016C94 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016C9A 6600                       		bne.s	Obj6E_Display	; if not, branch
00016C9C 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016CA2                            
00016CA2                            Obj6E_Display:
00016CA2 6000 93F2                  		bra.w	MarkObjGone
00016CA6                            ; ===========================================================================
00016CA6                            Ani_obj6E:
00016CA6                            	include "_anim\obj6E.asm"
00016CA6                            ; ---------------------------------------------------------------------------
00016CA6                            ; Animation script - electrocution orbs (SBZ)
00016CA6                            ; ---------------------------------------------------------------------------
00016CA6 0000                       		dc.w byte_161CC-Ani_obj6E
00016CA8 0000                       		dc.w byte_161D0-Ani_obj6E
00016CAA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016CAE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016CBE                            		even
00016CBE                            		even
00016CBE                            
00016CBE                            ; ---------------------------------------------------------------------------
00016CBE                            ; Sprite mappings - electrocution orbs (SBZ)
00016CBE                            ; ---------------------------------------------------------------------------
00016CBE                            Map_obj6E:
00016CBE                            	include "_maps\obj6E.asm"
00016CBE                            Map_26ed:
00016CBE 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016CC0 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016CC2 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016CC4 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016CC6 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016CC8 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016CCA 01                         Map_26ed_C: 	dc.b $1
00016CCB 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016CD0 02                         Map_26ed_12: 	dc.b $2
00016CD1 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CD6 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CDB 06                         Map_26ed_1D: 	dc.b $6
00016CDC F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CE1 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CE6 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016CEB F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016CF0 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016CF5 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016CFA 08                         Map_26ed_3C: 	dc.b $8
00016CFB F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D00 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D05 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D0A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D0F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D14 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D19 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D1E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D23 06                         Map_26ed_65: 	dc.b $6
00016D24 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D29 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D2E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D33 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D38 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D3D F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D42 04                         Map_26ed_84: 	dc.b $4
00016D43 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D48 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D4D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D52 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D58 00                         	even
00016D58 00                         	even
00016D58                            
00016D58                            ; ===========================================================================
00016D58                            ; ---------------------------------------------------------------------------
00016D58                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016D58                            ; ---------------------------------------------------------------------------
00016D58                            
00016D58                            Obj6F:					; XREF: Obj_Index
00016D58 7000                       		moveq	#0,d0
00016D5A 1028 0024                  		move.b	$24(a0),d0
00016D5E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016D62 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016D66 3028 0030                  		move.w	$30(a0),d0
00016D6A 0240 FF80                  		andi.w	#$FF80,d0
00016D6E 3238 F700                  		move.w	($FFFFF700).w,d1
00016D72 0441 0080                  		subi.w	#$80,d1
00016D76 0241 FF80                  		andi.w	#$FF80,d1
00016D7A 9041                       		sub.w	d1,d0
00016D7C 0C40 0280                  		cmpi.w	#$280,d0
00016D80 6200                       		bhi.s	loc_1629A
00016D82                            
00016D82                            Obj6F_Display:
00016D82 4EF9 0000 DFEE             		jmp	DisplaySprite
00016D88                            ; ===========================================================================
00016D88                            
00016D88                            loc_1629A:
00016D88 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016D8E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016D90 0C40 FF80                  		cmpi.w	#-$80,d0
00016D94 64EC                       		bcc.s	Obj6F_Display
00016D96                            
00016D96                            Obj6F_Act1or2:
00016D96 1028 002F                  		move.b	$2F(a0),d0
00016D9A 6A00                       		bpl.s	Obj6F_Delete
00016D9C 0240 007F                  		andi.w	#$7F,d0
00016DA0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016DA4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016DAA                            
00016DAA                            Obj6F_Delete:
00016DAA 4EF9 0000 E02A             		jmp	DeleteObject
00016DB0                            ; ===========================================================================
00016DB0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016DB2 0000                       		dc.w loc_163D8-Obj6F_Index
00016DB4                            ; ===========================================================================
00016DB4                            
00016DB4                            Obj6F_Main:				; XREF: Obj6F_Index
00016DB4 1028 0028                  		move.b	$28(a0),d0
00016DB8 6B00 0000                  		bmi.w	loc_16380
00016DBC 5428 0024                  		addq.b	#2,$24(a0)
00016DC0 217C 0001 6418 0004        		move.l	#Map_obj69a,4(a0)
00016DC8 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016DCE 117C 0010 0019             		move.b	#$10,$19(a0)
00016DD4 0028 0004 0001             		ori.b	#4,1(a0)
00016DDA 117C 0004 0018             		move.b	#4,$18(a0)
00016DE0 7000                       		moveq	#0,d0
00016DE2 1028 0028                  		move.b	$28(a0),d0
00016DE6 3200                       		move.w	d0,d1
00016DE8 E648                       		lsr.w	#3,d0
00016DEA 0240 001E                  		andi.w	#$1E,d0
00016DEE 45FA 0000                  		lea	off_164A6(pc),a2
00016DF2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016DF6 315A 0038                  		move.w	(a2)+,$38(a0)
00016DFA 315A 0030                  		move.w	(a2)+,$30(a0)
00016DFE 214A 003C                  		move.l	a2,$3C(a0)
00016E02 0241 000F                  		andi.w	#$F,d1
00016E06 E549                       		lsl.w	#2,d1
00016E08 1141 0038                  		move.b	d1,$38(a0)
00016E0C 117C 0004 003A             		move.b	#4,$3A(a0)
00016E12 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E16 6700                       		beq.s	loc_16356
00016E18 117C 0001 003B             		move.b	#1,$3B(a0)
00016E1E 4428 003A                  		neg.b	$3A(a0)
00016E22 7200                       		moveq	#0,d1
00016E24 1228 0038                  		move.b	$38(a0),d1
00016E28 D228 003A                  		add.b	$3A(a0),d1
00016E2C B228 0039                  		cmp.b	$39(a0),d1
00016E30 6500                       		bcs.s	loc_16352
00016E32 1001                       		move.b	d1,d0
00016E34 7200                       		moveq	#0,d1
00016E36 4A00                       		tst.b	d0
00016E38 6A00                       		bpl.s	loc_16352
00016E3A 1228 0039                  		move.b	$39(a0),d1
00016E3E 5901                       		subq.b	#4,d1
00016E40                            
00016E40                            loc_16352:
00016E40 1141 0038                  		move.b	d1,$38(a0)
00016E44                            
00016E44                            loc_16356:
00016E44 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016E4A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016E50 4A41                       		tst.w	d1
00016E52 6600                       		bne.s	loc_1636C
00016E54 117C 0001 001C             		move.b	#1,$1C(a0)
00016E5A                            
00016E5A                            loc_1636C:
00016E5A 0C41 0008                  		cmpi.w	#8,d1
00016E5E 6600                       		bne.s	loc_16378
00016E60 117C 0000 001C             		move.b	#0,$1C(a0)
00016E66                            
00016E66                            loc_16378:
00016E66 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016E6A 6000 0000                  		bra.w	loc_163D8
00016E6E                            ; ===========================================================================
00016E6E                            
00016E6E                            loc_16380:				; XREF: Obj6F_Main
00016E6E 1140 002F                  		move.b	d0,$2F(a0)
00016E72 0240 007F                  		andi.w	#$7F,d0
00016E76 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016E7A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016E80 6700                       		beq.s	loc_1639A
00016E82 4EF9 0000 E02A             		jmp	DeleteObject
00016E88                            ; ===========================================================================
00016E88                            
00016E88                            loc_1639A:
00016E88 D040                       		add.w	d0,d0
00016E8A 0240 001E                  		andi.w	#$1E,d0
00016E8E 0640 0080                  		addi.w	#$80,d0
00016E92 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016E98 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E9C 321A                       		move.w	(a2)+,d1
00016E9E 2248                       		movea.l	a0,a1
00016EA0 6000                       		bra.s	Obj6F_LoadPform
00016EA2                            ; ===========================================================================
00016EA2                            
00016EA2                            Obj6F_Loop:
00016EA2 4EB9 0000 E474             		jsr	SingleObjLoad
00016EA8 6600                       		bne.s	loc_163D0
00016EAA                            
00016EAA                            Obj6F_LoadPform:			; XREF: loc_1639A
00016EAA 12BC 006F                  		move.b	#$6F,0(a1)
00016EAE 335A 0008                  		move.w	(a2)+,8(a1)
00016EB2 335A 000C                  		move.w	(a2)+,$C(a1)
00016EB6 301A                       		move.w	(a2)+,d0
00016EB8 1340 0028                  		move.b	d0,$28(a1)
00016EBC                            
00016EBC                            loc_163D0:
00016EBC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016EC0                            
00016EC0 588F                       		addq.l	#4,sp
00016EC2 4E75                       		rts	
00016EC4                            ; ===========================================================================
00016EC4                            
00016EC4                            loc_163D8:				; XREF: Obj6F_Index
00016EC4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016ECA 4EB9 0000 B04C             		jsr	AnimateSprite
00016ED0 4A28 001A                  		tst.b	$1A(a0)
00016ED4 6600                       		bne.s	loc_16404
00016ED6 3F28 0008                  		move.w	8(a0),-(sp)
00016EDA 6100 0000                  		bsr.w	loc_16424
00016EDE 323C 001B                  		move.w	#$1B,d1
00016EE2 343C 0007                  		move.w	#7,d2
00016EE6 3602                       		move.w	d2,d3
00016EE8 5243                       		addq.w	#1,d3
00016EEA 381F                       		move.w	(sp)+,d4
00016EEC 6000 94D0                  		bra.w	SolidObject
00016EF0                            ; ===========================================================================
00016EF0                            
00016EF0                            loc_16404:
00016EF0 0828 0003 0022             		btst	#3,$22(a0)
00016EF6 6700                       		beq.s	loc_16420
00016EF8 43F8 D000                  		lea	($FFFFD000).w,a1
00016EFC 08A9 0003 0022             		bclr	#3,$22(a1)
00016F02 08A8 0003 0022             		bclr	#3,$22(a0)
00016F08 4228 0025                  		clr.b	$25(a0)
00016F0C                            
00016F0C                            loc_16420:
00016F0C 6000 0002                  		bra.w	*+4
00016F10                            
00016F10                            loc_16424:
00016F10 3028 0008                  		move.w	8(a0),d0
00016F14 B068 0034                  		cmp.w	$34(a0),d0
00016F18 6600                       		bne.s	loc_16484
00016F1A 3028 000C                  		move.w	$C(a0),d0
00016F1E B068 0036                  		cmp.w	$36(a0),d0
00016F22 6600                       		bne.s	loc_16484
00016F24 7200                       		moveq	#0,d1
00016F26 1228 0038                  		move.b	$38(a0),d1
00016F2A D228 003A                  		add.b	$3A(a0),d1
00016F2E B228 0039                  		cmp.b	$39(a0),d1
00016F32 6500                       		bcs.s	loc_16456
00016F34 1001                       		move.b	d1,d0
00016F36 7200                       		moveq	#0,d1
00016F38 4A00                       		tst.b	d0
00016F3A 6A00                       		bpl.s	loc_16456
00016F3C 1228 0039                  		move.b	$39(a0),d1
00016F40 5901                       		subq.b	#4,d1
00016F42                            
00016F42                            loc_16456:
00016F42 1141 0038                  		move.b	d1,$38(a0)
00016F46 2268 003C                  		movea.l	$3C(a0),a1
00016F4A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016F50 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016F56 4A41                       		tst.w	d1
00016F58 6600                       		bne.s	loc_16474
00016F5A 117C 0001 001C             		move.b	#1,$1C(a0)
00016F60                            
00016F60                            loc_16474:
00016F60 0C41 0008                  		cmpi.w	#8,d1
00016F64 6600                       		bne.s	loc_16480
00016F66 117C 0000 001C             		move.b	#0,$1C(a0)
00016F6C                            
00016F6C                            loc_16480:
00016F6C 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016F70                            
00016F70                            loc_16484:
00016F70 4EF9 0000 DFC8             		jmp	SpeedToPos
00016F76                            ; ===========================================================================
00016F76                            Ani_obj6F:
00016F76                            	include "_anim\obj6F.asm"
00016F76                            ; ---------------------------------------------------------------------------
00016F76                            ; Animation script - platform on conveyor belt (SBZ)
00016F76                            ; ---------------------------------------------------------------------------
00016F76 0000                       		dc.w byte_1648E-Ani_obj6F
00016F78 0000                       		dc.w byte_164A2-Ani_obj6F
00016F7A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016F87 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016F8E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016F92 00                         		even
00016F92 00                         		even
00016F92                            
00016F92 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016F98 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016F9E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016FB2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016FC6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016FDA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016FEE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017002 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017016                            ; ===========================================================================
00017016                            ; ---------------------------------------------------------------------------
00017016                            ; Object 70 - large girder block (SBZ)
00017016                            ; ---------------------------------------------------------------------------
00017016                            
00017016                            Obj70:					; XREF: Obj_Index
00017016 7000                       		moveq	#0,d0
00017018 1028 0024                  		move.b	$24(a0),d0
0001701C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017020 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017024                            ; ===========================================================================
00017024 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017026 0000                       		dc.w Obj70_Action-Obj70_Index
00017028                            ; ===========================================================================
00017028                            
00017028                            Obj70_Main:				; XREF: Obj70_Index
00017028 5428 0024                  		addq.b	#2,$24(a0)
0001702C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017034 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001703A 0028 0004 0001             		ori.b	#4,1(a0)
00017040 117C 0004 0018             		move.b	#4,$18(a0)
00017046 117C 0060 0019             		move.b	#$60,$19(a0)
0001704C 117C 0018 0016             		move.b	#$18,$16(a0)
00017052 3168 0008 0032             		move.w	8(a0),$32(a0)
00017058 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001705E 6100 0000                  		bsr.w	Obj70_Move2
00017062                            
00017062                            Obj70_Action:				; XREF: Obj70_Index
00017062 3F28 0008                  		move.w	8(a0),-(sp)
00017066 4A68 003A                  		tst.w	$3A(a0)
0001706A 6700                       		beq.s	Obj70_Move
0001706C 5368 003A                  		subq.w	#1,$3A(a0)
00017070 6600                       		bne.s	Obj70_Solid
00017072                            
00017072                            Obj70_Move:
00017072 4EB9 0000 DFC8             		jsr	SpeedToPos
00017078 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001707C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001707E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017082                            
00017082                            Obj70_Solid:
00017082 381F                       		move.w	(sp)+,d4
00017084 4A28 0001                  		tst.b	1(a0)
00017088 6A00                       		bpl.s	Obj70_ChkDel
0001708A 7200                       		moveq	#0,d1
0001708C 1228 0019                  		move.b	$19(a0),d1
00017090 0641 000B                  		addi.w	#$B,d1
00017094 7400                       		moveq	#0,d2
00017096 1428 0016                  		move.b	$16(a0),d2
0001709A 3602                       		move.w	d2,d3
0001709C 5243                       		addq.w	#1,d3
0001709E 6100 931E                  		bsr.w	SolidObject
000170A2                            
000170A2                            Obj70_ChkDel:
000170A2 3028 0032                  		move.w	$32(a0),d0
000170A6 0240 FF80                  		andi.w	#$FF80,d0
000170AA 3238 F700                  		move.w	($FFFFF700).w,d1
000170AE 0441 0080                  		subi.w	#$80,d1
000170B2 0241 FF80                  		andi.w	#$FF80,d1
000170B6 9041                       		sub.w	d1,d0
000170B8 0C40 0280                  		cmpi.w	#$280,d0
000170BC 6200                       		bhi.s	Obj70_Delete
000170BE 4EF9 0000 DFEE             		jmp	DisplaySprite
000170C4                            ; ===========================================================================
000170C4                            
000170C4                            Obj70_Delete:
000170C4 4EF9 0000 E02A             		jmp	DeleteObject
000170CA                            ; ===========================================================================
000170CA                            
000170CA                            Obj70_Move2:				; XREF: Obj70_Main
000170CA 1028 0038                  		move.b	$38(a0),d0
000170CE 0240 0018                  		andi.w	#$18,d0
000170D2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000170D8 43F1 0000                  		lea	(a1,d0.w),a1
000170DC 3159 0010                  		move.w	(a1)+,$10(a0)
000170E0 3159 0012                  		move.w	(a1)+,$12(a0)
000170E4 3159 0034                  		move.w	(a1)+,$34(a0)
000170E8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000170EC 317C 0007 003A             		move.w	#7,$3A(a0)
000170F2 4E75                       		rts	
000170F4                            ; ===========================================================================
000170F4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000170FC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017104 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001710C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017114                            ; ---------------------------------------------------------------------------
00017114                            ; Sprite mappings - large girder block (SBZ)
00017114                            ; ---------------------------------------------------------------------------
00017114                            Map_obj70:
00017114                            	include "_maps\obj70.asm"
00017114                            ; ---------------------------------------------------------------------------
00017114                            ; Sprite mappings - large girder block (SBZ)
00017114                            ; ---------------------------------------------------------------------------
00017114 0000                       		dc.w byte_1662A-Map_obj70
00017116 0C                         byte_1662A:	dc.b $C
00017117 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001711C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017121 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017126 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001712B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017130 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017135 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001713A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001713F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017144 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00017149 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001714E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00017154 00                         		even
00017154 00                         		even
00017154                            
00017154                            ; ===========================================================================
00017154                            ; ---------------------------------------------------------------------------
00017154                            ; Object 72 - teleporter (SBZ)
00017154                            ; ---------------------------------------------------------------------------
00017154                            
00017154                            Obj72:					; XREF: Obj_Index
00017154 7000                       		moveq	#0,d0
00017156 1028 0024                  		move.b	$24(a0),d0
0001715A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001715E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00017162 3028 0008                  		move.w	8(a0),d0
00017166 0240 FF80                  		andi.w	#$FF80,d0
0001716A 3238 F700                  		move.w	($FFFFF700).w,d1
0001716E 0441 0080                  		subi.w	#$80,d1
00017172 0241 FF80                  		andi.w	#$FF80,d1
00017176 9041                       		sub.w	d1,d0
00017178 0C40 0280                  		cmpi.w	#$280,d0
0001717C 6200                       		bhi.s	Obj72_Delete
0001717E 4E75                       		rts	
00017180                            ; ===========================================================================
00017180                            
00017180                            Obj72_Delete:
00017180 4EF9 0000 E02A             		jmp	DeleteObject
00017186                            ; ===========================================================================
00017186 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017188 0000                       		dc.w loc_166C8-Obj72_Index
0001718A 0000                       		dc.w loc_1675E-Obj72_Index
0001718C 0000                       		dc.w loc_16798-Obj72_Index
0001718E                            ; ===========================================================================
0001718E                            
0001718E                            Obj72_Main:				; XREF: Obj72_Index
0001718E 5428 0024                  		addq.b	#2,$24(a0)
00017192 1028 0028                  		move.b	$28(a0),d0
00017196 D040                       		add.w	d0,d0
00017198 0240 001E                  		andi.w	#$1E,d0
0001719C 45FA 0000                  		lea	Obj72_Data(pc),a2
000171A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000171A4 315A 003A                  		move.w	(a2)+,$3A(a0)
000171A8 214A 003C                  		move.l	a2,$3C(a0)
000171AC 315A 0036                  		move.w	(a2)+,$36(a0)
000171B0 315A 0038                  		move.w	(a2)+,$38(a0)
000171B4                            
000171B4                            loc_166C8:				; XREF: Obj72_Index
000171B4 43F8 D000                  		lea	($FFFFD000).w,a1
000171B8 3029 0008                  		move.w	8(a1),d0
000171BC 9068 0008                  		sub.w	8(a0),d0
000171C0 0828 0000 0022             		btst	#0,$22(a0)
000171C6 6700                       		beq.s	loc_166E0
000171C8 0640 000F                  		addi.w	#$F,d0
000171CC                            
000171CC                            loc_166E0:
000171CC 0C40 0010                  		cmpi.w	#$10,d0
000171D0 6400                       		bcc.s	locret_1675C
000171D2 3229 000C                  		move.w	$C(a1),d1
000171D6 9268 000C                  		sub.w	$C(a0),d1
000171DA 0641 0020                  		addi.w	#$20,d1
000171DE 0C41 0040                  		cmpi.w	#$40,d1
000171E2 6400                       		bcc.s	locret_1675C
000171E4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000171E8 6600                       		bne.s	locret_1675C
000171EA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000171F0 6600                       		bne.s	loc_1670E
000171F2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000171F8 6500                       		bcs.s	locret_1675C
000171FA                            
000171FA                            loc_1670E:
000171FA 5428 0024                  		addq.b	#2,$24(a0)
000171FE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017204 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001720A 337C 0800 0014             		move.w	#$800,$14(a1)
00017210 337C 0000 0010             		move.w	#0,$10(a1)
00017216 337C 0000 0012             		move.w	#0,$12(a1)
0001721C 08A8 0005 0022             		bclr	#5,$22(a0)
00017222 08A9 0005 0022             		bclr	#5,$22(a1)
00017228 08E9 0001 0022             		bset	#1,$22(a1)
0001722E 3368 0008 0008             		move.w	8(a0),8(a1)
00017234 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001723A 4228 0032                  		clr.b	$32(a0)
0001723E 303C 00BE                  		move.w	#$BE,d0
00017242 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017248                            
00017248                            locret_1675C:
00017248 4E75                       		rts	
0001724A                            ; ===========================================================================
0001724A                            
0001724A                            loc_1675E:				; XREF: Obj72_Index
0001724A 43F8 D000                  		lea	($FFFFD000).w,a1
0001724E 1028 0032                  		move.b	$32(a0),d0
00017252 5428 0032                  		addq.b	#2,$32(a0)
00017256 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001725C EA40                       		asr.w	#5,d0
0001725E 3428 000C                  		move.w	$C(a0),d2
00017262 9440                       		sub.w	d0,d2
00017264 3342 000C                  		move.w	d2,$C(a1)
00017268 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001726E 6600                       		bne.s	locret_16796
00017270 6100 0000                  		bsr.w	sub_1681C
00017274 5428 0024                  		addq.b	#2,$24(a0)
00017278 303C 00BC                  		move.w	#$BC,d0
0001727C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play teleport sound
00017282                            
00017282                            locret_16796:
00017282 4E75                       		rts	
00017284                            ; ===========================================================================
00017284                            
00017284                            loc_16798:				; XREF: Obj72_Index
00017284 588F                       		addq.l	#4,sp
00017286 43F8 D000                  		lea	($FFFFD000).w,a1
0001728A 5328 002E                  		subq.b	#1,$2E(a0)
0001728E 6A00                       		bpl.s	loc_167DA
00017290 3368 0036 0008             		move.w	$36(a0),8(a1)
00017296 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001729C 7200                       		moveq	#0,d1
0001729E 1228 003A                  		move.b	$3A(a0),d1
000172A2 5801                       		addq.b	#4,d1
000172A4 B228 003B                  		cmp.b	$3B(a0),d1
000172A8 6500                       		bcs.s	loc_167C2
000172AA 7200                       		moveq	#0,d1
000172AC 6000                       		bra.s	loc_16800
000172AE                            ; ===========================================================================
000172AE                            
000172AE                            loc_167C2:
000172AE 1141 003A                  		move.b	d1,$3A(a0)
000172B2 2468 003C                  		movea.l	$3C(a0),a2
000172B6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000172BC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000172C2 6000 0000                  		bra.w	sub_1681C
000172C6                            ; ===========================================================================
000172C6                            
000172C6                            loc_167DA:
000172C6 2429 0008                  		move.l	8(a1),d2
000172CA 2629 000C                  		move.l	$C(a1),d3
000172CE 3029 0010                  		move.w	$10(a1),d0
000172D2 48C0                       		ext.l	d0
000172D4 E180                       		asl.l	#8,d0
000172D6 D480                       		add.l	d0,d2
000172D8 3029 0012                  		move.w	$12(a1),d0
000172DC 48C0                       		ext.l	d0
000172DE E180                       		asl.l	#8,d0
000172E0 D680                       		add.l	d0,d3
000172E2 2342 0008                  		move.l	d2,8(a1)
000172E6 2343 000C                  		move.l	d3,$C(a1)
000172EA 4E75                       		rts	
000172EC                            ; ===========================================================================
000172EC                            
000172EC                            loc_16800:
000172EC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000172F2 4228 0024                  		clr.b	$24(a0)
000172F6 4238 F7C8                  		clr.b	($FFFFF7C8).w
000172FA 337C 0000 0010             		move.w	#0,$10(a1)
00017300 337C 0200 0012             		move.w	#$200,$12(a1)
00017306 4E75                       		rts	
00017308                            
00017308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017308                            
00017308                            
00017308                            sub_1681C:
00017308 7000                       		moveq	#0,d0
0001730A 343C 1000                  		move.w	#$1000,d2
0001730E 3028 0036                  		move.w	$36(a0),d0
00017312 9069 0008                  		sub.w	8(a1),d0
00017316 6C00                       		bge.s	loc_16830
00017318 4440                       		neg.w	d0
0001731A 4442                       		neg.w	d2
0001731C                            
0001731C                            loc_16830:
0001731C 7200                       		moveq	#0,d1
0001731E 363C 1000                  		move.w	#$1000,d3
00017322 3228 0038                  		move.w	$38(a0),d1
00017326 9269 000C                  		sub.w	$C(a1),d1
0001732A 6C00                       		bge.s	loc_16844
0001732C 4441                       		neg.w	d1
0001732E 4443                       		neg.w	d3
00017330                            
00017330                            loc_16844:
00017330 B240                       		cmp.w	d0,d1
00017332 6500                       		bcs.s	loc_1687A
00017334 7200                       		moveq	#0,d1
00017336 3228 0038                  		move.w	$38(a0),d1
0001733A 9269 000C                  		sub.w	$C(a1),d1
0001733E 4841                       		swap	d1
00017340 83C3                       		divs.w	d3,d1
00017342 7000                       		moveq	#0,d0
00017344 3028 0036                  		move.w	$36(a0),d0
00017348 9069 0008                  		sub.w	8(a1),d0
0001734C 6700                       		beq.s	loc_16866
0001734E 4840                       		swap	d0
00017350 81C1                       		divs.w	d1,d0
00017352                            
00017352                            loc_16866:
00017352 3340 0010                  		move.w	d0,$10(a1)
00017356 3343 0012                  		move.w	d3,$12(a1)
0001735A 4A41                       		tst.w	d1
0001735C 6A00                       		bpl.s	loc_16874
0001735E 4441                       		neg.w	d1
00017360                            
00017360                            loc_16874:
00017360 3141 002E                  		move.w	d1,$2E(a0)
00017364 4E75                       		rts	
00017366                            ; ===========================================================================
00017366                            
00017366                            loc_1687A:
00017366 7000                       		moveq	#0,d0
00017368 3028 0036                  		move.w	$36(a0),d0
0001736C 9069 0008                  		sub.w	8(a1),d0
00017370 4840                       		swap	d0
00017372 81C2                       		divs.w	d2,d0
00017374 7200                       		moveq	#0,d1
00017376 3228 0038                  		move.w	$38(a0),d1
0001737A 9269 000C                  		sub.w	$C(a1),d1
0001737E 6700                       		beq.s	loc_16898
00017380 4841                       		swap	d1
00017382 83C0                       		divs.w	d0,d1
00017384                            
00017384                            loc_16898:
00017384 3341 0012                  		move.w	d1,$12(a1)
00017388 3342 0010                  		move.w	d2,$10(a1)
0001738C 4A40                       		tst.w	d0
0001738E 6A00                       		bpl.s	loc_168A6
00017390 4440                       		neg.w	d0
00017392                            
00017392                            loc_168A6:
00017392 3140 002E                  		move.w	d0,$2E(a0)
00017396 4E75                       		rts	
00017398                            ; End of function sub_1681C
00017398                            
00017398                            ; ===========================================================================
00017398 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001739E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000173A4 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000173A8 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000173AE 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000173B4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000173BA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000173C0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000173C6 0884 0298 0894             		dc.w $884, $298, $894
000173CC 0270 0894 0190             		dc.w $270, $894, $190
000173D2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000173D8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000173DE 1184 0498 1158             		dc.w $1184, $498, $1158
000173E4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000173EA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000173F0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000173F6 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000173FC 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017402 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017408 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001740E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017414 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001741A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017420                            ; ===========================================================================
00017420                            ; ---------------------------------------------------------------------------
00017420                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017420                            ; ---------------------------------------------------------------------------
00017420                            
00017420                            Obj78:					; XREF: Obj_Index
00017420 7000                       		moveq	#0,d0
00017422 1028 0024                  		move.b	$24(a0),d0
00017426 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001742A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001742E                            ; ===========================================================================
0001742E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017430 0000                       		dc.w Obj78_Action-Obj78_Index
00017432 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017434 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017436 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017438 0000                       		dc.w Obj78_Delete-Obj78_Index
0001743A 0000                       		dc.w loc_16CC0-Obj78_Index
0001743C                            ; ===========================================================================
0001743C                            
0001743C                            locret_16950:
0001743C 4E75                       		rts	
0001743E                            ; ===========================================================================
0001743E                            
0001743E                            Obj78_Main:				; XREF: Obj78_Index
0001743E 117C 0007 0016             		move.b	#7,$16(a0)
00017444 117C 0008 0017             		move.b	#8,$17(a0)
0001744A 4EB9 0000 DF56             		jsr	ObjectFall
00017450 4EBA E4A6                  		jsr	ObjHitFloor
00017454 4A41                       		tst.w	d1
00017456 6AE4                       		bpl.s	locret_16950
00017458 D368 000C                  		add.w	d1,$C(a0)
0001745C 4268 0012                  		clr.w	$12(a0)
00017460 5428 0024                  		addq.b	#2,$24(a0)
00017464 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001746C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017472 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017478 6700                       		beq.s	loc_16996
0001747A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017480                            
00017480                            loc_16996:
00017480 0228 0003 0001             		andi.b	#3,1(a0)
00017486 0028 0004 0001             		ori.b	#4,1(a0)
0001748C 1168 0001 0022             		move.b	1(a0),$22(a0)
00017492 117C 0004 0018             		move.b	#4,$18(a0)
00017498 117C 0008 0019             		move.b	#8,$19(a0)
0001749E 117C 000B 0020             		move.b	#$B,$20(a0)
000174A4 3428 0008                  		move.w	8(a0),d2
000174A8 7A0C                       		moveq	#$C,d5
000174AA 0828 0000 0022             		btst	#0,$22(a0)
000174B0 6700                       		beq.s	loc_169CA
000174B2 4445                       		neg.w	d5
000174B4                            
000174B4                            loc_169CA:
000174B4 1C3C 0004                  		move.b	#4,d6
000174B8 7600                       		moveq	#0,d3
000174BA 7804                       		moveq	#4,d4
000174BC 2448                       		movea.l	a0,a2
000174BE 7202                       		moveq	#2,d1
000174C0                            
000174C0                            Obj78_LoadBody:
000174C0 4EB9 0000 E48A             		jsr	SingleObjLoad2
000174C6 6600                       		bne.s	Obj78_QuitLoad
000174C8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000174CC 1346 0024                  		move.b	d6,$24(a1)
000174D0 5406                       		addq.b	#2,d6
000174D2 2368 0004 0004             		move.l	4(a0),4(a1)
000174D8 3368 0002 0002             		move.w	2(a0),2(a1)
000174DE 137C 0005 0018             		move.b	#5,$18(a1)
000174E4 137C 0008 0019             		move.b	#8,$19(a1)
000174EA 137C 00CB 0020             		move.b	#$CB,$20(a1)
000174F0 D445                       		add.w	d5,d2
000174F2 3342 0008                  		move.w	d2,8(a1)
000174F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000174FC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017502 1368 0022 0001             		move.b	$22(a0),1(a1)
00017508 137C 0008 001A             		move.b	#8,$1A(a1)
0001750E 234A 003C                  		move.l	a2,$3C(a1)
00017512 1344 003C                  		move.b	d4,$3C(a1)
00017516 5804                       		addq.b	#4,d4
00017518 2449                       		movea.l	a1,a2
0001751A                            
0001751A                            Obj78_QuitLoad:
0001751A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001751E                            
0001751E 117C 0007 002A             		move.b	#7,$2A(a0)
00017524 4228 003C                  		clr.b	$3C(a0)
00017528                            
00017528                            Obj78_Action:				; XREF: Obj78_Index
00017528 4A28 0022                  		tst.b	$22(a0)
0001752C 6B00 0000                  		bmi.w	loc_16C96
00017530 7000                       		moveq	#0,d0
00017532 1028 0025                  		move.b	$25(a0),d0
00017536 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001753A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001753E 1228 002B                  		move.b	$2B(a0),d1
00017542 6A00                       		bpl.s	Obj78_Display
00017544 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001754A 1028 0026                  		move.b	$26(a0),d0
0001754E 0240 007F                  		andi.w	#$7F,d0
00017552 5828 0026                  		addq.b	#4,$26(a0)
00017556 1031 0000                  		move.b	(a1,d0.w),d0
0001755A 6A00                       		bpl.s	Obj78_AniHead
0001755C 08A8 0007 002B             		bclr	#7,$2B(a0)
00017562 6000                       		bra.s	Obj78_Display
00017564                            ; ===========================================================================
00017564                            
00017564                            Obj78_AniHead:
00017564 0201 0010                  		andi.b	#$10,d1
00017568 D001                       		add.b	d1,d0
0001756A 1140 001A                  		move.b	d0,$1A(a0)
0001756E                            
0001756E                            Obj78_Display:
0001756E 3028 0008                  		move.w	8(a0),d0
00017572 0240 FF80                  		andi.w	#$FF80,d0
00017576 3238 F700                  		move.w	($FFFFF700).w,d1
0001757A 0441 0080                  		subi.w	#$80,d1
0001757E 0241 FF80                  		andi.w	#$FF80,d1
00017582 9041                       		sub.w	d1,d0
00017584 0C40 0280                  		cmpi.w	#$280,d0
00017588 6200 0000                  		bhi.w	Obj78_ChkGone
0001758C 4EF9 0000 DFEE             		jmp	DisplaySprite
00017592                            ; ===========================================================================
00017592                            
00017592                            Obj78_ChkGone:
00017592 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017596 7000                       		moveq	#0,d0
00017598 1028 0023                  		move.b	$23(a0),d0
0001759C 6700                       		beq.s	loc_16ABC
0001759E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175A4                            
000175A4                            loc_16ABC:
000175A4 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000175AA 4E75                       		rts	
000175AC                            ; ===========================================================================
000175AC                            
000175AC                            Obj78_Delete:				; XREF: Obj78_Index
000175AC 4EF9 0000 E02A             		jmp	DeleteObject
000175B2                            ; ===========================================================================
000175B2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000175B4 0000                       		dc.w loc_16B02-Obj78_Index2
000175B6                            ; ===========================================================================
000175B6                            
000175B6                            Obj78_Move:				; XREF: Obj78_Index2
000175B6 5328 002A                  		subq.b	#1,$2A(a0)
000175BA 6B00                       		bmi.s	Obj78_Move2
000175BC 4E75                       		rts	
000175BE                            ; ===========================================================================
000175BE                            
000175BE                            Obj78_Move2:
000175BE 5428 0025                  		addq.b	#2,$25(a0)
000175C2 117C 0010 002A             		move.b	#$10,$2A(a0)
000175C8 317C FF40 0010             		move.w	#-$C0,$10(a0)
000175CE 317C 0040 0014             		move.w	#$40,$14(a0)
000175D4 0868 0004 002B             		bchg	#4,$2B(a0)
000175DA 6600                       		bne.s	loc_16AFC
000175DC 4268 0010                  		clr.w	$10(a0)
000175E0 4468 0014                  		neg.w	$14(a0)
000175E4                            
000175E4                            loc_16AFC:
000175E4 08E8 0007 002B             		bset	#7,$2B(a0)
000175EA                            
000175EA                            loc_16B02:				; XREF: Obj78_Index2
000175EA 5328 002A                  		subq.b	#1,$2A(a0)
000175EE 6B00                       		bmi.s	loc_16B5E
000175F0 2F28 0008                  		move.l	8(a0),-(sp)
000175F4 2428 0008                  		move.l	8(a0),d2
000175F8 3028 0010                  		move.w	$10(a0),d0
000175FC 0828 0000 0022             		btst	#0,$22(a0)
00017602 6700                       		beq.s	loc_16B1E
00017604 4440                       		neg.w	d0
00017606                            
00017606                            loc_16B1E:
00017606 48C0                       		ext.l	d0
00017608 E180                       		asl.l	#8,d0
0001760A D480                       		add.l	d0,d2
0001760C 2142 0008                  		move.l	d2,8(a0)
00017610 4EBA E2E6                  		jsr	ObjHitFloor
00017614 241F                       		move.l	(sp)+,d2
00017616 0C41 FFF8                  		cmpi.w	#-8,d1
0001761A 6D00                       		blt.s	loc_16B70
0001761C 0C41 000C                  		cmpi.w	#$C,d1
00017620 6C00                       		bge.s	loc_16B70
00017622 D368 000C                  		add.w	d1,$C(a0)
00017626 4842                       		swap	d2
00017628 B468 0008                  		cmp.w	8(a0),d2
0001762C 6700                       		beq.s	locret_16B5C
0001762E 7000                       		moveq	#0,d0
00017630 1028 003C                  		move.b	$3C(a0),d0
00017634 5228 003C                  		addq.b	#1,$3C(a0)
00017638 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001763E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017642                            
00017642                            locret_16B5C:
00017642 4E75                       		rts	
00017644                            ; ===========================================================================
00017644                            
00017644                            loc_16B5E:
00017644 5528 0025                  		subq.b	#2,$25(a0)
00017648 117C 0007 002A             		move.b	#7,$2A(a0)
0001764E 317C 0000 0010             		move.w	#0,$10(a0)
00017654 4E75                       		rts	
00017656                            ; ===========================================================================
00017656                            
00017656                            loc_16B70:
00017656 2142 0008                  		move.l	d2,8(a0)
0001765A 0868 0000 0022             		bchg	#0,$22(a0)
00017660 1168 0022 0001             		move.b	$22(a0),1(a0)
00017666 7000                       		moveq	#0,d0
00017668 1028 003C                  		move.b	$3C(a0),d0
0001766C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017672 5228 003C                  		addq.b	#1,$3C(a0)
00017676 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001767C 4E75                       		rts	
0001767E                            ; ===========================================================================
0001767E                            
0001767E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001767E 2268 003C                  		movea.l	$3C(a0),a1
00017682 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017688 6A00                       		bpl.s	Obj78_BodySeg1
0001768A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017690 1028 0026                  		move.b	$26(a0),d0
00017694 0240 007F                  		andi.w	#$7F,d0
00017698 5828 0026                  		addq.b	#4,$26(a0)
0001769C 4A31 0004                  		tst.b	4(a1,d0.w)
000176A0 6A00                       		bpl.s	Obj78_AniBody
000176A2 5828 0026                  		addq.b	#4,$26(a0)
000176A6                            
000176A6                            Obj78_AniBody:
000176A6 1031 0000                  		move.b	(a1,d0.w),d0
000176AA 5000                       		addq.b	#8,d0
000176AC 1140 001A                  		move.b	d0,$1A(a0)
000176B0                            
000176B0                            Obj78_BodySeg1:				; XREF: Obj78_Index
000176B0 2268 003C                  		movea.l	$3C(a0),a1
000176B4 4A28 0022                  		tst.b	$22(a0)
000176B8 6B00 0000                  		bmi.w	loc_16C90
000176BC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176C2 1169 0025 0025             		move.b	$25(a1),$25(a0)
000176C8 6700 0000                  		beq.w	loc_16C64
000176CC 3169 0014 0014             		move.w	$14(a1),$14(a0)
000176D2 3029 0010                  		move.w	$10(a1),d0
000176D6 D069 0014                  		add.w	$14(a1),d0
000176DA 3140 0010                  		move.w	d0,$10(a0)
000176DE 2428 0008                  		move.l	8(a0),d2
000176E2 2602                       		move.l	d2,d3
000176E4 3028 0010                  		move.w	$10(a0),d0
000176E8 0828 0000 0022             		btst	#0,$22(a0)
000176EE 6700                       		beq.s	loc_16C0C
000176F0 4440                       		neg.w	d0
000176F2                            
000176F2                            loc_16C0C:
000176F2 48C0                       		ext.l	d0
000176F4 E180                       		asl.l	#8,d0
000176F6 D480                       		add.l	d0,d2
000176F8 2142 0008                  		move.l	d2,8(a0)
000176FC 4843                       		swap	d3
000176FE B668 0008                  		cmp.w	8(a0),d3
00017702 6700                       		beq.s	loc_16C64
00017704 7000                       		moveq	#0,d0
00017706 1028 003C                  		move.b	$3C(a0),d0
0001770A 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001770E 0C01 0080                  		cmpi.b	#-$80,d1
00017712 6600                       		bne.s	loc_16C50
00017714 4843                       		swap	d3
00017716 2143 0008                  		move.l	d3,8(a0)
0001771A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001771E 0868 0000 0022             		bchg	#0,$22(a0)
00017724 1168 0022 0001             		move.b	$22(a0),1(a0)
0001772A 5228 003C                  		addq.b	#1,$3C(a0)
0001772E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017734 6000                       		bra.s	loc_16C64
00017736                            ; ===========================================================================
00017736                            
00017736                            loc_16C50:
00017736 4881                       		ext.w	d1
00017738 D368 000C                  		add.w	d1,$C(a0)
0001773C 5228 003C                  		addq.b	#1,$3C(a0)
00017740 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017746 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001774A                            
0001774A                            loc_16C64:
0001774A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017750 6700                       		beq.s	loc_16C90
00017752 0C11 0027                  		cmpi.b	#$27,0(a1)
00017756 6700                       		beq.s	loc_16C7C
00017758 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001775E 6600                       		bne.s	loc_16C82
00017760                            
00017760                            loc_16C7C:
00017760 117C 000A 0024             		move.b	#$A,$24(a0)
00017766                            
00017766                            loc_16C82:
00017766 4EF9 0000 DFEE             		jmp	DisplaySprite
0001776C                            
0001776C                            ; ===========================================================================
0001776C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017774                            ; ===========================================================================
00017774                            
00017774                            loc_16C90:
00017774 08E9 0007 0022             		bset	#7,$22(a1)
0001777A                            
0001777A                            loc_16C96:
0001777A 7000                       		moveq	#0,d0
0001777C 1028 0024                  		move.b	$24(a0),d0
00017780 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017784 0828 0000 0022             		btst	#0,$22(a0)
0001778A 6700                       		beq.s	loc_16CAA
0001778C 4440                       		neg.w	d0
0001778E                            
0001778E                            loc_16CAA:
0001778E 3140 0010                  		move.w	d0,$10(a0)
00017792 317C FC00 0012             		move.w	#-$400,$12(a0)
00017798 117C 000C 0024             		move.b	#$C,$24(a0)
0001779E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000177A4                            
000177A4                            loc_16CC0:				; XREF: Obj78_Index
000177A4 4EB9 0000 DF56             		jsr	ObjectFall
000177AA 4A68 0012                  		tst.w	$12(a0)
000177AE 6B00                       		bmi.s	loc_16CE0
000177B0 4EBA E146                  		jsr	ObjHitFloor
000177B4 4A41                       		tst.w	d1
000177B6 6A00                       		bpl.s	loc_16CE0
000177B8 D368 000C                  		add.w	d1,$C(a0)
000177BC 317C FC00 0012             		move.w	#-$400,$12(a0)
000177C2                            
000177C2                            loc_16CE0:
000177C2 4A28 0001                  		tst.b	1(a0)
000177C6 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000177CA 4EF9 0000 DFEE             		jmp	DisplaySprite
000177D0                            ; ===========================================================================
000177D0                            Ani_obj78:
000177D0                            	include "_anim\obj78.asm"
000177D0                            ; ---------------------------------------------------------------------------
000177D0                            ; Animation script - Caterkiller enemy (uses non-standard format)
000177D0                            ; ---------------------------------------------------------------------------
000177D0 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000177E0 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000177F0 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017800 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017810 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017820 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017830 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017840 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017850                            	even
00017850                            	even
00017850                            
00017850                            ; ---------------------------------------------------------------------------
00017850                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017850                            ; ---------------------------------------------------------------------------
00017850                            Map_obj78:
00017850                            	include "_maps\obj78.asm"
00017850                            ; ---------------------------------------------------------------------------
00017850                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017850                            ; ---------------------------------------------------------------------------
00017850 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017854 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017858 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001785C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017860 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017864 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017868 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001786C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017870 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017874 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017878 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001787C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017880 01                         byte_16D9E:	dc.b 1
00017881 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017886 01                         byte_16DA4:	dc.b 1
00017887 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001788C 01                         byte_16DAA:	dc.b 1
0001788D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017892 01                         byte_16DB0:	dc.b 1
00017893 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017898 01                         byte_16DB6:	dc.b 1
00017899 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001789E 01                         byte_16DBC:	dc.b 1
0001789F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000178A4 01                         byte_16DC2:	dc.b 1
000178A5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000178AA 01                         byte_16DC8:	dc.b 1
000178AB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000178B0 01                         byte_16DCE:	dc.b 1
000178B1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000178B6 01                         byte_16DD4:	dc.b 1
000178B7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000178BC 01                         byte_16DDA:	dc.b 1
000178BD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000178C2 01                         byte_16DE0:	dc.b 1
000178C3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000178C8 01                         byte_16DE6:	dc.b 1
000178C9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000178CE 01                         byte_16DEC:	dc.b 1
000178CF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000178D4 01                         byte_16DF2:	dc.b 1
000178D5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000178DA 01                         byte_16DF8:	dc.b 1
000178DB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000178E0 01                         byte_16DFE:	dc.b 1
000178E1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000178E6 01                         byte_16E04:	dc.b 1
000178E7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000178EC 01                         byte_16E0A:	dc.b 1
000178ED F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000178F2 01                         byte_16E10:	dc.b 1
000178F3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000178F8 01                         byte_16E16:	dc.b 1
000178F9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000178FE 01                         byte_16E1C:	dc.b 1
000178FF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017904 01                         byte_16E22:	dc.b 1
00017905 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001790A 01                         byte_16E28:	dc.b 1
0001790B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017910                            		even
00017910                            		even
00017910                            
00017910                            ; ===========================================================================
00017910                            ; ---------------------------------------------------------------------------
00017910                            ; Object 79 - lamppost
00017910                            ; ---------------------------------------------------------------------------
00017910                            
00017910                            Obj79:					; XREF: Obj_Index
00017910 7000                       		moveq	#0,d0
00017912 1028 0024                  		move.b	$24(a0),d0
00017916 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001791A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001791E 4EFA 8776                  		jmp	MarkObjGone
00017922                            ; ===========================================================================
00017922 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017924 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017926 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017928 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001792A                            ; ===========================================================================
0001792A                            
0001792A                            Obj79_Main:				; XREF: Obj79_Index
0001792A 5428 0024                  		addq.b	#2,$24(a0)
0001792E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017936 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001793C 117C 0004 0001             		move.b	#4,1(a0)
00017942 117C 0008 0019             		move.b	#8,$19(a0)
00017948 117C 0005 0018             		move.b	#5,$18(a0)
0001794E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017952 7000                       		moveq	#0,d0
00017954 1028 0023                  		move.b	$23(a0),d0
00017958 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001795E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017964 6600                       		bne.s	Obj79_RedLamp
00017966 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001796A 0201 007F                  		andi.b	#$7F,d1
0001796E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017972 0202 007F                  		andi.b	#$7F,d2
00017976 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017978 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001797A                            
0001797A                            Obj79_RedLamp:
0001797A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017980 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017986 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001798C 4E75                       		rts	
0001798E                            ; ===========================================================================
0001798E                            
0001798E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001798E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017992 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017996 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001799A 6B00 0000                  		bmi.w	locret_16F90
0001799E 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179A2 0201 007F                  		andi.b	#$7F,d1
000179A6 1428 0028                  		move.b	$28(a0),d2
000179AA 0202 007F                  		andi.b	#$7F,d2
000179AE B202                       		cmp.b	d2,d1
000179B0 6500                       		bcs.s	Obj79_HitLamp
000179B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179B6 7000                       		moveq	#0,d0
000179B8 1028 0023                  		move.b	$23(a0),d0
000179BC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179C2 117C 0004 0024             		move.b	#4,$24(a0)
000179C8 117C 0003 001A             		move.b	#3,$1A(a0)
000179CE 6000 0000                  		bra.w	locret_16F90
000179D2                            ; ===========================================================================
000179D2                            
000179D2                            Obj79_HitLamp:
000179D2 3038 D008                  		move.w	($FFFFD008).w,d0
000179D6 9068 0008                  		sub.w	8(a0),d0
000179DA 5040                       		addq.w	#8,d0
000179DC 0C40 0010                  		cmpi.w	#$10,d0
000179E0 6400 0000                  		bcc.w	locret_16F90
000179E4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000179E8 9068 000C                  		sub.w	$C(a0),d0
000179EC 0640 0040                  		addi.w	#$40,d0
000179F0 0C40 0068                  		cmpi.w	#$68,d0
000179F4 6400                       		bcc.s	locret_16F90
000179F6 303C 00A1                  		move.w	#$A1,d0
000179FA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A00 5428 0024                  		addq.b	#2,$24(a0)
00017A04 4EB9 0000 E474             		jsr	SingleObjLoad
00017A0A 6600                       		bne.s	loc_16F76
00017A0C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A10 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A16 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A1C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A22 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A28 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A30 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A36 137C 0004 0001             		move.b	#4,1(a1)
00017A3C 137C 0008 0019             		move.b	#8,$19(a1)
00017A42 137C 0004 0018             		move.b	#4,$18(a1)
00017A48 137C 0002 001A             		move.b	#2,$1A(a1)
00017A4E 337C 0020 0036             		move.w	#$20,$36(a1)
00017A54                            
00017A54                            loc_16F76:
00017A54 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017A5A 6100 0000                  		bsr.w	Obj79_StoreInfo
00017A5E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A62 7000                       		moveq	#0,d0
00017A64 1028 0023                  		move.b	$23(a0),d0
00017A68 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A6E                            
00017A6E                            locret_16F90:
00017A6E 4E75                       		rts	
00017A70                            ; ===========================================================================
00017A70                            
00017A70                            Obj79_AfterHit:				; XREF: Obj79_Index
00017A70 4E75                       		rts	
00017A72                            ; ===========================================================================
00017A72                            
00017A72                            Obj79_Twirl:				; XREF: Obj79_Index
00017A72 5368 0036                  		subq.w	#1,$36(a0)
00017A76 6A00                       		bpl.s	loc_16FA0
00017A78 117C 0004 0024             		move.b	#4,$24(a0)
00017A7E                            
00017A7E                            loc_16FA0:
00017A7E 1028 0026                  		move.b	$26(a0),d0
00017A82 0428 0010 0026             		subi.b	#$10,$26(a0)
00017A88 0400 0040                  		subi.b	#$40,d0
00017A8C 4EB9 0000 2D6C             		jsr	(CalcSine).l
00017A92 C3FC 0C00                  		muls.w	#$C00,d1
00017A96 4841                       		swap	d1
00017A98 D268 0030                  		add.w	$30(a0),d1
00017A9C 3141 0008                  		move.w	d1,8(a0)
00017AA0 C1FC 0C00                  		muls.w	#$C00,d0
00017AA4 4840                       		swap	d0
00017AA6 D068 0032                  		add.w	$32(a0),d0
00017AAA 3140 000C                  		move.w	d0,$C(a0)
00017AAE 4E75                       		rts	
00017AB0                            ; ===========================================================================
00017AB0                            ; ---------------------------------------------------------------------------
00017AB0                            ; Subroutine to	store information when you hit a lamppost
00017AB0                            ; ---------------------------------------------------------------------------
00017AB0                            
00017AB0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017AB0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017AB6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017ABC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017AC2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017AC8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017ACE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017AD4 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017ADA 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017AE0 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017AE6 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017AEC 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017AF2 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017AF8 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017AFE 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B04 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B0A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B10 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B16 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B1C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B22 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B28 4E75                       		rts	
00017B2A                            
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A                            
00017B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B2A                            
00017B2A                            
00017B2A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B2A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B30 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B36 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B3C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B42 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017B48 4278 FE20                  		clr.w	($FFFFFE20).w
00017B4C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017B50 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017B56 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017B5C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017B60 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017B66 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017B6C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017B72 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017B78 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017B7E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017B84 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017B8A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017B90 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017B96 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017B9C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BA2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017BA8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017BAE 6600                       		bne.s	loc_170E4
00017BB0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017BB6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BBC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017BC2                            
00017BC2                            loc_170E4:
00017BC2 4A38 FE30                  		tst.b	($FFFFFE30).w
00017BC6 6A00                       		bpl.s	locret_170F6
00017BC8 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017BCC 0440 00A0                  		subi.w	#$A0,d0
00017BD0 31C0 F728                  		move.w	d0,($FFFFF728).w
00017BD4                            
00017BD4                            locret_170F6:
00017BD4 4E75                       		rts	
00017BD6                            ; End of function Obj79_LoadInfo
00017BD6                            
00017BD6                            ; ===========================================================================
00017BD6                            ; ---------------------------------------------------------------------------
00017BD6                            ; Sprite mappings - lamppost
00017BD6                            ; ---------------------------------------------------------------------------
00017BD6                            Map_obj79:
00017BD6                            	include "_maps\obj79.asm"
00017BD6                            ; ---------------------------------------------------------------------------
00017BD6                            ; Sprite mappings - lamppost
00017BD6                            ; ---------------------------------------------------------------------------
00017BD6 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017BDA 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017BDE 06                         byte_17100:	dc.b 6
00017BDF E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017BE4 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017BE9 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017BEE F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017BF3 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017BF8 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017BFD 04                         byte_1711F:	dc.b 4
00017BFE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C03 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C08 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C0D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C12 02                         byte_17134:	dc.b 2
00017C13 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C18 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C1D 06                         byte_1713F:	dc.b 6
00017C1E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C23 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C28 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C2D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C32 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C37 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C3C                            		even
00017C3C                            		even
00017C3C                            
00017C3C                            ; ===========================================================================
00017C3C                            ; ---------------------------------------------------------------------------
00017C3C                            ; Object 7D - hidden points at the end of a level
00017C3C                            ; ---------------------------------------------------------------------------
00017C3C                            
00017C3C                            Obj7D:					; XREF: Obj_Index
00017C3C 7000                       		moveq	#0,d0
00017C3E 1028 0024                  		move.b	$24(a0),d0
00017C42 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017C46 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017C4A                            ; ===========================================================================
00017C4A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017C4C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017C4E                            ; ===========================================================================
00017C4E                            
00017C4E                            Obj7D_Main:				; XREF: Obj7D_Index
00017C4E 7410                       		moveq	#$10,d2
00017C50 3602                       		move.w	d2,d3
00017C52 D643                       		add.w	d3,d3
00017C54 43F8 D000                  		lea	($FFFFD000).w,a1
00017C58 3029 0008                  		move.w	8(a1),d0
00017C5C 9068 0008                  		sub.w	8(a0),d0
00017C60 D042                       		add.w	d2,d0
00017C62 B043                       		cmp.w	d3,d0
00017C64 6400                       		bcc.s	Obj7D_ChkDel
00017C66 3229 000C                  		move.w	$C(a1),d1
00017C6A 9268 000C                  		sub.w	$C(a0),d1
00017C6E D242                       		add.w	d2,d1
00017C70 B243                       		cmp.w	d3,d1
00017C72 6400                       		bcc.s	Obj7D_ChkDel
00017C74 4A78 FE08                  		tst.w	($FFFFFE08).w
00017C78 6600                       		bne.s	Obj7D_ChkDel
00017C7A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017C7E 6600                       		bne.s	Obj7D_ChkDel
00017C80 5428 0024                  		addq.b	#2,$24(a0)
00017C84 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017C8C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017C92 0028 0004 0001             		ori.b	#4,1(a0)
00017C98 117C 0000 0018             		move.b	#0,$18(a0)
00017C9E 117C 0010 0019             		move.b	#$10,$19(a0)
00017CA4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017CAA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017CB0 303C 00C9                  		move.w	#$C9,d0
00017CB4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bonus sound
00017CBA 7000                       		moveq	#0,d0
00017CBC 1028 0028                  		move.b	$28(a0),d0
00017CC0 D040                       		add.w	d0,d0
00017CC2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017CC6 4EB9 0000 0000             		jsr	AddPoints
00017CCC                            
00017CCC                            Obj7D_ChkDel:
00017CCC 3028 0008                  		move.w	8(a0),d0
00017CD0 0240 FF80                  		andi.w	#$FF80,d0
00017CD4 3238 F700                  		move.w	($FFFFF700).w,d1
00017CD8 0441 0080                  		subi.w	#$80,d1
00017CDC 0241 FF80                  		andi.w	#$FF80,d1
00017CE0 9041                       		sub.w	d1,d0
00017CE2 0C40 0280                  		cmpi.w	#$280,d0
00017CE6 6200                       		bhi.s	Obj7D_Delete
00017CE8 4E75                       		rts	
00017CEA                            ; ===========================================================================
00017CEA                            
00017CEA                            Obj7D_Delete:
00017CEA 4EF9 0000 E02A             		jmp	DeleteObject
00017CF0                            ; ===========================================================================
00017CF0 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017CF2 03E8                       		dc.w 1000
00017CF4 0064                       		dc.w 100
00017CF6 0001                       		dc.w 1
00017CF8                            ; ===========================================================================
00017CF8                            
00017CF8                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017CF8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017CFC 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017CFE 3028 0008                  		move.w	8(a0),d0
00017D02 0240 FF80                  		andi.w	#-$80,d0
00017D06 3238 F700                  		move.w	($FFFFF700).w,d1
00017D0A 0441 0080                  		subi.w	#$80,d1
00017D0E 0241 FF80                  		andi.w	#-$80,d1
00017D12 9041                       		sub.w	d1,d0
00017D14 0C40 0280                  		cmpi.w	#$280,d0
00017D18 6200                       		bhi.s	Obj7D_Delete2
00017D1A 4EF9 0000 DFEE             		jmp	DisplaySprite
00017D20                            ; ===========================================================================
00017D20                            
00017D20                            Obj7D_Delete2:
00017D20 4EF9 0000 E02A             		jmp	DeleteObject
00017D26                            ; ===========================================================================
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            ; Sprite mappings - hidden points at the end of	a level
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            Map_obj7D:
00017D26                            	include "_maps\obj7D.asm"
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            ; Sprite mappings - hidden points at the end of	a level
00017D26                            ; ---------------------------------------------------------------------------
00017D26 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D2A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D2E 00                         byte_17250:	dc.b 0
00017D2F 01                         byte_17251:	dc.b 1
00017D30 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D35 01                         byte_17257:	dc.b 1
00017D36 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D3B 01                         byte_1725D:	dc.b 1
00017D3C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D42 00                         		even
00017D42 00                         		even
00017D42                            
00017D42                            ; ===========================================================================
00017D42                            ; ---------------------------------------------------------------------------
00017D42                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D42                            ; ---------------------------------------------------------------------------
00017D42                            
00017D42                            Obj8A:					; XREF: Obj_Index
00017D42 7000                       		moveq	#0,d0
00017D44 1028 0024                  		move.b	$24(a0),d0
00017D48 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017D4C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017D50                            ; ===========================================================================
00017D50 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017D52 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017D54                            ; ===========================================================================
00017D54                            
00017D54                            Obj8A_Main:				; XREF: Obj8A_Index
00017D54 5428 0024                  		addq.b	#2,$24(a0)
00017D58 317C 0120 0008             		move.w	#$120,8(a0)
00017D5E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017D64 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017D6C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017D72 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017D76 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017D7A 117C 0000 0001             		move.b	#0,1(a0)
00017D80 117C 0000 0018             		move.b	#0,$18(a0)
00017D86 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017D8C 6600                       		bne.s	Obj8A_Display	; if not, branch
00017D8E 317C 00A6 0002             		move.w	#$A6,2(a0)
00017D94 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017D9A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017D9E 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DA0 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017DA6 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DA8 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017DAE 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017DB4 4EF9 0000 E02A             		jmp	DeleteObject
00017DBA                            ; ===========================================================================
00017DBA                            
00017DBA                            Obj8A_Display:				; XREF: Obj8A_Index
00017DBA 4EF9 0000 DFEE             		jmp	DisplaySprite
00017DC0                            ; ===========================================================================
00017DC0                            ; ---------------------------------------------------------------------------
00017DC0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017DC0                            ; ---------------------------------------------------------------------------
00017DC0                            Map_obj8A:
00017DC0                            	include "_maps\obj8A.asm"
00017DC0                            Map_ca8f:
00017DC0 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017DC2 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017DC4 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017DC6 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017DC8 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017DCA 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017DCC 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017DCE 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017DD0 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017DD2 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017DD4 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017DD6 08                         Map_ca8f_16: 	dc.b $8
00017DD7 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017DDC E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017DE1 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017DE6 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017DEB B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017DF0 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017DF5 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017DFA B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017DFF 10                         Map_ca8f_3F: 	dc.b $10
00017E00 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E05 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E0A D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E0F D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E14 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E19 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E1E D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E23 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E28 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E2D 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E32 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E37 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017E3C 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017E41 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017E46 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017E4B 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017E50 0A                         Map_ca8f_90: 	dc.b $A
00017E51 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017E56 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017E5B D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017E60 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017E65 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017E6A D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017E6F D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017E74 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017E79 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017E7E 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017E83 18                         Map_ca8f_C3: 	dc.b $18
00017E84 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017E89 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017E8E D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017E93 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017E98 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017E9D D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017EA2 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017EA7 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017EAC D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017EB1 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017EB6 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017EBB D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017EC0 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017EC5 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017ECA D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017ECF 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017ED4 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017ED9 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017EDE 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017EE3 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017EE8 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017EED 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017EF2 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017EF7 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017EFC 14                         Map_ca8f_13C: 	dc.b $14
00017EFD D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F02 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F07 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F0C D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F11 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F16 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F1B 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F20 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F25 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F2A 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F2F 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F34 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F39 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017F3E 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017F43 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017F48 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017F4D 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017F52 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017F57 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017F5C 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017F61 1A                         Map_ca8f_1A1: 	dc.b $1A
00017F62 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017F67 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017F6C D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017F71 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017F76 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017F7B D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017F80 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017F85 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017F8A D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017F8F D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017F94 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017F99 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017F9E 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017FA3 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017FA8 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017FAD 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017FB2 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017FB7 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017FBC 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017FC1 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017FC6 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017FCB 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017FD0 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017FD5 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017FDA 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017FDF 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017FE4 17                         Map_ca8f_224: 	dc.b $17
00017FE5 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017FEA D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017FEF D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017FF4 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017FF9 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017FFE D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018003 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018008 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
0001800D D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018012 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018017 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
0001801C D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018021 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018026 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
0001802B 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00018030 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018035 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
0001803A 0005 0004 14               	dc.b $0, $5, $0, $4, $14
0001803F 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00018044 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00018049 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
0001804E 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00018053 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00018058 1F                         Map_ca8f_298: 	dc.b $1F
00018059 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
0001805E D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00018063 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00018068 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
0001806D D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00018072 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018077 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
0001807C D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00018081 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00018086 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
0001808B D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00018090 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00018095 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
0001809A 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
0001809F 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000180A4 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000180A9 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000180AE 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
000180B3 0009 0008 00               	dc.b $0, $9, $0, $8, $0
000180B8 0001 0046 14               	dc.b $0, $1, $0, $46, $14
000180BD 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
000180C2 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
000180C7 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
000180CC 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
000180D1 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
000180D6 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
000180DB 0001 0046 74               	dc.b $0, $1, $0, $46, $74
000180E0 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
000180E5 2005 0004 08               	dc.b $20, $5, $0, $4, $8
000180EA 2005 0012 18               	dc.b $20, $5, $0, $12, $18
000180EF 2005 0004 28               	dc.b $20, $5, $0, $4, $28
000180F4 0F                         Map_ca8f_334: 	dc.b $F
000180F5 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
000180FA F805 0022 90               	dc.b $F8, $5, $0, $22, $90
000180FF F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018104 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018109 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
0001810E F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018113 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018118 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
0001811D F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018122 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018127 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0001812C F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00018131 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018136 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
0001813B F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00018140 08                         Map_ca8f_380: 	dc.b $8
00018141 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00018146 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
0001814B 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00018150 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00018155 3005 0000 08               	dc.b $30, $5, $0, $0, $8
0001815A 3005 0004 18               	dc.b $30, $5, $0, $4, $18
0001815F 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00018164 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00018169 20                         Map_ca8f_3A9: 	dc.b $20
0001816A ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
0001816F ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00018174 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00018179 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
0001817E ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00018183 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018188 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
0001818D FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00018192 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018197 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
0001819C FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000181A1 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
000181A6 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
000181AB 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
000181B0 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
000181B5 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
000181BA 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
000181BF 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
000181C4 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
000181C9 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
000181CE 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
000181D3 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
000181D8 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
000181DD 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
000181E2 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
000181E7 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
000181EC 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
000181F1 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
000181F6 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
000181FB 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018200 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018205 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001820A                            	even
0001820A                            	even
0001820A                            
0001820A                            ; ===========================================================================
0001820A                            ; ---------------------------------------------------------------------------
0001820A                            ; Object 3D - matthew boss - modified by GK89
0001820A                            ; ---------------------------------------------------------------------------
0001820A                            
0001820A                            Obj3D:					; XREF: Obj_Index
0001820A 7000                       		moveq	#0,d0
0001820C 1028 0024                  		move.b	$24(a0),d0
00018210 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018214 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018218                            ; ===========================================================================
00018218 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001821A 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001821C 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001821E 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018220                            
00018220 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018222 0401                       		dc.b 4,	1
00018224 0607                       		dc.b 6,	7
00018226                            ; ===========================================================================
00018226                            
00018226                            Obj3D_Main:				; XREF: Obj3D_Index
00018226 45F9 0001 8220             		lea	(Obj3D_ObjData).l,a2
0001822C 2248                       		movea.l	a0,a1
0001822E 7202                       		moveq	#2,d1
00018230 6000                       		bra.s	Obj3D_LoadBoss
00018232                            ; ===========================================================================
00018232                            
00018232                            Obj3D_Loop:
00018232 4EB9 0000 E48A             		jsr	SingleObjLoad2
00018238 6600                       		bne.s	loc_17772
0001823A                            
0001823A                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001823A 135A 0024                  		move.b	(a2)+,$24(a1)
0001823E 12BC 003D                  		move.b	#$3D,0(a1)
00018242 3368 0008 0008             		move.w	8(a0),8(a1)
00018248 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001824E 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018256 337C 0400 0002             		move.w	#$400,2(a1)
0001825C 137C 0004 0001             		move.b	#4,1(a1)
00018262 137C 0020 0019             		move.b	#$20,$19(a1)
00018268 137C 0003 0018             		move.b	#3,$18(a1)
0001826E 135A 001C                  		move.b	(a2)+,$1C(a1)
00018272 2348 0034                  		move.l	a0,$34(a1)
00018276 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001827A                            
0001827A                            loc_17772:
0001827A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018280 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018286 117C 000F 0020             		move.b	#$F,$20(a0)
0001828C 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018292                            
00018292                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018292 7000                       		moveq	#0,d0
00018294 1028 0025                  		move.b	$25(a0),d0
00018298 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001829C 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000182A0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182A6 4EB9 0000 B04C             		jsr	AnimateSprite
000182AC 1028 0022                  		move.b	$22(a0),d0
000182B0 0200 0003                  		andi.b	#3,d0
000182B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182BA 8128 0001                  		or.b	d0,1(a0)
000182BE 4EF9 0000 DFEE             		jmp	DisplaySprite
000182C4                            ; ===========================================================================
000182C4 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000182C6 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000182C8 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000182CA 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000182CC 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000182CE 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000182D0 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000182D2                            ; ===========================================================================
000182D2                            
000182D2                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000182D2 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000182D8 6100 0000                  		bsr.w	BossMove
000182DC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000182E2 6600                       		bne.s	loc_177E6
000182E4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000182EA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000182EE                            
000182EE                            loc_177E6:
000182EE 1028 003F                  		move.b	$3F(a0),d0
000182F2 4EB9 0000 2D6C             		jsr	(CalcSine).l
000182F8 EC40                       		asr.w	#6,d0
000182FA D068 0038                  		add.w	$38(a0),d0
000182FE 3140 000C                  		move.w	d0,$C(a0)
00018302 3168 0030 0008             		move.w	$30(a0),8(a0)
00018308 5428 003F                  		addq.b	#2,$3F(a0)
0001830C 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018312 6400                       		bcc.s	locret_1784A
00018314 4A28 0022                  		tst.b	$22(a0)
00018318 6B00                       		bmi.s	loc_1784C
0001831A 4A28 0020                  		tst.b	$20(a0)
0001831E 6600                       		bne.s	locret_1784A
00018320 4A28 003E                  		tst.b	$3E(a0)
00018324 6600                       		bne.s	Obj3D_ShipFlash
00018326 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001832C 303C 00AC                  		move.w	#$AC,d0
00018330 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018336                            
00018336                            Obj3D_ShipFlash:
00018336 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001833A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001833C 4A51                       		tst.w	(a1)
0001833E 6600                       		bne.s	loc_1783C
00018340 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018344                            
00018344                            loc_1783C:
00018344 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018346 5328 003E                  		subq.b	#1,$3E(a0)
0001834A 6600                       		bne.s	locret_1784A
0001834C 117C 000F 0020             		move.b	#$F,$20(a0)
00018352                            
00018352                            locret_1784A:
00018352 4E75                       		rts	
00018354                            ; ===========================================================================
00018354                            
00018354                            loc_1784C:				; XREF: loc_177E6
00018354 7064                       		moveq	#100,d0
00018356 6100 0000                  		bsr.w	AddPoints
0001835A 117C 0008 0025             		move.b	#8,$25(a0)
00018360 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018366 4E75                       		rts	
00018368                            
00018368                            ; ---------------------------------------------------------------------------
00018368                            ; Defeated boss	subroutine
00018368                            ; ---------------------------------------------------------------------------
00018368                            
00018368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018368                            
00018368                            
00018368                            BossDefeated:
00018368 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001836C 0200 0007                  		andi.b	#7,d0
00018370 6600                       		bne.s	locret_178A2
00018372 4EB9 0000 E474             		jsr	SingleObjLoad
00018378 6600                       		bne.s	locret_178A2
0001837A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001837E 3368 0008 0008             		move.w	8(a0),8(a1)
00018384 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001838A 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018390 3200                       		move.w	d0,d1
00018392 7200                       		moveq	#0,d1
00018394 1200                       		move.b	d0,d1
00018396 E409                       		lsr.b	#2,d1
00018398 0441 0020                  		subi.w	#$20,d1
0001839C D369 0008                  		add.w	d1,8(a1)
000183A0 E048                       		lsr.w	#8,d0
000183A2 E608                       		lsr.b	#3,d0
000183A4 D169 000C                  		add.w	d0,$C(a1)
000183A8                            
000183A8                            locret_178A2:
000183A8 4E75                       		rts	
000183AA                            ; End of function BossDefeated
000183AA                            
000183AA                            ; ---------------------------------------------------------------------------
000183AA                            ; Subroutine to	move a boss
000183AA                            ; ---------------------------------------------------------------------------
000183AA                            
000183AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183AA                            
000183AA                            
000183AA                            BossMove:
000183AA 2428 0030                  		move.l	$30(a0),d2
000183AE 2628 0038                  		move.l	$38(a0),d3
000183B2 3028 0010                  		move.w	$10(a0),d0
000183B6 48C0                       		ext.l	d0
000183B8 E180                       		asl.l	#8,d0
000183BA D480                       		add.l	d0,d2
000183BC 3028 0012                  		move.w	$12(a0),d0
000183C0 48C0                       		ext.l	d0
000183C2 E180                       		asl.l	#8,d0
000183C4 D680                       		add.l	d0,d3
000183C6 2142 0030                  		move.l	d2,$30(a0)
000183CA 2143 0038                  		move.l	d3,$38(a0)
000183CE 4E75                       		rts	
000183D0                            ; End of function BossMove
000183D0                            
000183D0                            ; ===========================================================================
000183D0                            
000183D0                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000183D0 6100 FFD8                  		bsr.w	BossMove
000183D4 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000183DA 6600                       		bne.s	loc_17916
000183DC 317C 0000 0010             		move.w	#0,$10(a0)
000183E2 317C 0000 0012             		move.w	#0,$12(a0)
000183E8 5428 0025                  		addq.b	#2,$25(a0)
000183EC 4EB9 0000 E48A             		jsr	SingleObjLoad2
000183F2 6600                       		bne.s	loc_17910
000183F4 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000183F8 3368 0030 0008             		move.w	$30(a0),8(a1)
000183FE 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018404 2348 0034                  		move.l	a0,$34(a1)
00018408                            
00018408                            loc_17910:
00018408 317C 0077 003C             		move.w	#$77,$3C(a0)
0001840E                            
0001840E                            loc_17916:
0001840E 6000 FEDE                  		bra.w	loc_177E6
00018412                            ; ===========================================================================
00018412                            
00018412                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018412 5368 003C                  		subq.w	#1,$3C(a0)
00018416 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001841C 5428 0025                  		addq.b	#2,$25(a0)
00018420 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018426 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001842A 9068 0008                  		sub.w	8(a0),d0		 
0001842E 6A00                       		bpl.s	Obj3D_left			 
00018430 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018436 6000                       		bra.s	Obj3D_right		 
00018438 08A8 0005 0022             		bclr	#5,$22(a0)
0001843E 4EB9 0000 0000              		jsr     loc_17950
00018444 4E75                       		rts
00018446                            ; ===========================================================================
00018446                            
00018446                            Obj3D_right:
00018446 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001844C 4E75                       		Rts
0001844E                            
0001844E                            Obj3D_left:
0001844E 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018454 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001845A 6600                       		bne.s	RTSboss  	; if not, branch
0001845C 0868 0000 0022              		bchg	#0,$22(a0)
00018462                            
00018462                            RTSboss:	    
00018462 4E75                       		rts
00018464                             ; ===========================================================================
00018464                            
00018464                            Obj3D_UpStuff:
00018464 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018468 9068 000C                  		sub.w	$C(a0),d0		 
0001846C 6A00                       		bpl.s	Obj3D_down			 
0001846E 6000                        		bra.s	Obj3D_up		 
00018470 08A8 0005 0022             		bclr	#5,$22(a0)
00018476                             
00018476                            Obj3D_up:		
00018476 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001847C 4E75                        	    rts
0001847E                            
0001847E                            Obj3D_down:
0001847E 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018484                            
00018484                            loc_17950:
00018484 6000 FE68                  		bra.w	loc_177E6
00018488                            ; ===========================================================================
00018488                            
00018488                            loc_17954:				; XREF: Obj3D_ShipIndex
00018488 5368 003C                  		subq.w	#1,$3C(a0)
0001848C 6B00                       		bmi.s	loc_17960
0001848E 6100 FF1A                  		bsr.w	BossMove
00018492 6000                       		bra.s	loc_17976
00018494                            ; ===========================================================================
00018494                            
00018494                            loc_17960:
00018494 0868 0000 0022             		bchg	#0,$22(a0)
0001849A 317C 003F 003C             		move.w	#$3F,$3C(a0)
000184A0 5528 0025                  		subq.b	#2,$25(a0)
000184A4 317C 0000 0010             		move.w	#0,$10(a0)
000184AA                            
000184AA                            loc_17976:
000184AA 6000 FE42                  		bra.w	loc_177E6
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            loc_1797A:				; XREF: Obj3D_ShipIndex
000184AE 5368 003C                  		subq.w	#1,$3C(a0)
000184B2 6B00                       		bmi.s	loc_17984
000184B4 6000 FEB2                  		bra.w	BossDefeated
000184B8                            ; ===========================================================================
000184B8                            
000184B8                            loc_17984:
000184B8 08E8 0000 0022             		bset	#0,$22(a0)
000184BE 08A8 0007 0022             		bclr	#7,$22(a0)
000184C4 4268 0010                  		clr.w	$10(a0)
000184C8 5428 0025                  		addq.b	#2,$25(a0)
000184CC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000184D2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000184D6 6600                       		bne.s	locret_179AA
000184D8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000184DE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000184E4 6000 FE82                  		bra.w	BossDefeated
000184E8                            
000184E8                            locret_179AA:
000184E8 4E75                       		rts	
000184EA                            ; ===========================================================================
000184EA                            
000184EA                            loc_179AC:				; XREF: Obj3D_ShipIndex
000184EA 4EB9 0000 DF56             		jsr ObjectFall		
000184F0 5268 003C                  		addq.w	#1,$3C(a0)
000184F4 6700                       		beq.s	loc_179BC
000184F6 6A00                       		bpl.s	loc_179C2
000184F8 6000                       		bra.s	loc_179EE
000184FA                            ; ===========================================================================
000184FA                            
000184FA                            loc_179BC:
000184FA 4268 0012                  		clr.w	$12(a0)
000184FE 6000                       		bra.s	loc_179EE
00018500                            ; ===========================================================================
00018500                            
00018500                            loc_179C2:
00018500 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018506 6500                       		bcs.s	loc_179DA
00018508 6700                       		beq.s	loc_179E0
0001850A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018510 6500                       		bcs.s	loc_179EE
00018512 5428 0025                  		addq.b	#2,$25(a0)
00018516 6000                       		bra.s	loc_179EE
00018518                            ; ===========================================================================
00018518                            
00018518                            loc_179DA:
00018518 5168 0012                  		subq.w	#8,$12(a0)
0001851C 6000                       		bra.s	loc_179EE
0001851E 6000 FE48                  		bra.w	BossDefeated
00018522                            ; ===========================================================================
00018522                            
00018522                            loc_179E0:
00018522 4268 0012                  		clr.w	$12(a0)
00018526 303C 0081                  		move.w	#$81,d0
0001852A 4EB9 0000 15CC             		jsr	(PlaySound).l	; play GHZ music
00018530                            
00018530                            loc_179EE:
00018530 6100 FE78                  		bsr.w	BossMove
00018534 6000 FDB8                  		bra.w	loc_177E6
00018538                            ; ===========================================================================
00018538                            
00018538                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018538 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001853E 6700                       		beq.s	loc_17A10
00018540 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018544 6000                       		bra.s	loc_17A16
00018546                            ; ===========================================================================
00018546                            
00018546                            loc_17A10:
00018546 4A28 0001                  		tst.b	1(a0)
0001854A 6A00                       		bpl.s	Obj3D_ShipDel
0001854C                            
0001854C                            loc_17A16:
0001854C 6100 FE5C                  		bsr.w	BossMove
00018550 6000 FD9C                  		bra.w	loc_177E6
00018554                            ; ===========================================================================
00018554                            
00018554                            Obj3D_ShipDel:
00018554 4EF9 0000 E02A             		jmp	DeleteObject
0001855A                            ; ===========================================================================
0001855A                            
0001855A                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001855A 7000                       		moveq	#0,d0
0001855C 7201                       		moveq	#1,d1
0001855E 2268 0034                  		movea.l	$34(a0),a1
00018562 1029 0025                  		move.b	$25(a1),d0
00018566 5900                       		subq.b	#4,d0
00018568 6600                       		bne.s	loc_17A3E
0001856A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018570 6600                       		bne.s	loc_17A46
00018572 7204                       		moveq	#4,d1
00018574                            
00018574                            loc_17A3E:
00018574 5D00                       		subq.b	#6,d0
00018576 6B00                       		bmi.s	loc_17A46
00018578 720A                       		moveq	#$A,d1
0001857A 6000                       		bra.s	loc_17A5A
0001857C                            ; ===========================================================================
0001857C                            
0001857C                            loc_17A46:
0001857C 4A29 0020                  		tst.b	$20(a1)
00018580 6600                       		bne.s	loc_17A50
00018582 7205                       		moveq	#5,d1
00018584 6000                       		bra.s	loc_17A5A
00018586                            ; ===========================================================================
00018586                            
00018586                            loc_17A50:
00018586 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001858C 6500                       		bcs.s	loc_17A5A
0001858E 7204                       		moveq	#4,d1
00018590                            
00018590                            loc_17A5A:
00018590 1141 001C                  		move.b	d1,$1C(a0)
00018594 5500                       		subq.b	#2,d0
00018596 6600                       		bne.s	Obj3D_FaceDisp
00018598 117C 0006 001C             		move.b	#6,$1C(a0)
0001859E 4A28 0001                  		tst.b	1(a0)
000185A2 6A00                       		bpl.s	Obj3D_FaceDel
000185A4                            
000185A4                            Obj3D_FaceDisp:
000185A4 6000                       		bra.s	Obj3D_Display
000185A6                            ; ===========================================================================
000185A6                            
000185A6                            Obj3D_FaceDel:
000185A6 4EF9 0000 E02A             		jmp	DeleteObject
000185AC                            ; ===========================================================================
000185AC                            
000185AC                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000185AC 117C 0007 001C             		move.b	#7,$1C(a0)
000185B2 2268 0034                  		movea.l	$34(a0),a1
000185B6 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000185BC 6600                       		bne.s	loc_17A96
000185BE 117C 000B 001C             		move.b	#$B,$1C(a0)
000185C4 4A28 0001                  		tst.b	1(a0)
000185C8 6A00                       		bpl.s	Obj3D_FlameDel
000185CA 6000                       		bra.s	Obj3D_FlameDisp
000185CC                            ; ===========================================================================
000185CC                            
000185CC                            loc_17A96:
000185CC 3029 0010                  		move.w	$10(a1),d0
000185D0 6700                       		beq.s	Obj3D_FlameDisp
000185D2 117C 0008 001C             		move.b	#8,$1C(a0)
000185D8                            
000185D8                            Obj3D_FlameDisp:
000185D8 6000                       		bra.s	Obj3D_Display
000185DA                            ; ===========================================================================
000185DA                            
000185DA                            Obj3D_FlameDel:
000185DA 4EF9 0000 E02A             		jmp	DeleteObject
000185E0                            ; ===========================================================================
000185E0                            
000185E0                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000185E0 2268 0034                  		movea.l	$34(a0),a1
000185E4 3169 0008 0008             		move.w	8(a1),8(a0)
000185EA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000185F0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000185F6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000185FC 4EB9 0000 B04C             		jsr	AnimateSprite
00018602 1028 0022                  		move.b	$22(a0),d0
00018606 0200 0003                  		andi.b	#3,d0
0001860A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018610 8128 0001                  		or.b	d0,1(a0)
00018614 4EF9 0000 DFEE             		jmp	DisplaySprite
0001861A                            ; ===========================================================================
0001861A                            ; ---------------------------------------------------------------------------
0001861A                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001861A                            ; ---------------------------------------------------------------------------
0001861A                            
0001861A                            Obj48:					; XREF: Obj_Index
0001861A 7000                       		moveq	#0,d0
0001861C 1028 0024                  		move.b	$24(a0),d0
00018620 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018624 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018628                            ; ===========================================================================
00018628 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001862A 0000                       		dc.w Obj48_Base-Obj48_Index
0001862C 0000                       		dc.w Obj48_Display2-Obj48_Index
0001862E 0000                       		dc.w loc_17C68-Obj48_Index
00018630 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018632                            ; ===========================================================================
00018632                            
00018632                            Obj48_Main:				; XREF: Obj48_Index
00018632 5428 0024                  		addq.b	#2,$24(a0)
00018636 317C 4080 0026             		move.w	#$4080,$26(a0)
0001863C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018642 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001864A 317C 046C 0002             		move.w	#$46C,2(a0)
00018650 45E8 0028                  		lea	$28(a0),a2
00018654 14FC 0000                  		move.b	#0,(a2)+
00018658 7205                       		moveq	#5,d1
0001865A 2248                       		movea.l	a0,a1
0001865C 6000                       		bra.s	loc_17B60
0001865E                            ; ===========================================================================
0001865E                            
0001865E                            Obj48_MakeLinks:
0001865E 4EB9 0000 E48A             		jsr	SingleObjLoad2
00018664 6600                       		bne.s	Obj48_MakeBall
00018666 3368 0008 0008             		move.w	8(a0),8(a1)
0001866C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018672 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018676 137C 0006 0024             		move.b	#6,$24(a1)
0001867C 237C 0000 8404 0004        		move.l	#Map_obj15,4(a1)
00018684 337C 0380 0002             		move.w	#$380,2(a1)
0001868A 137C 0001 001A             		move.b	#1,$1A(a1)
00018690 5228 0028                  		addq.b	#1,$28(a0)
00018694                            
00018694                            loc_17B60:				; XREF: Obj48_Main
00018694 3A09                       		move.w	a1,d5
00018696 0445 D000                  		subi.w	#$D000,d5
0001869A EC4D                       		lsr.w	#6,d5
0001869C 0245 007F                  		andi.w	#$7F,d5
000186A0 14C5                       		move.b	d5,(a2)+
000186A2 137C 0004 0001             		move.b	#4,1(a1)
000186A8 137C 0008 0019             		move.b	#8,$19(a1)
000186AE 137C 0006 0018             		move.b	#6,$18(a1)
000186B4 2368 0034 0034             		move.l	$34(a0),$34(a1)
000186BA 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000186BE                            
000186BE                            Obj48_MakeBall:
000186BE 137C 0008 0024             		move.b	#8,$24(a1)
000186C4 237C 0000 89F4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000186CC 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000186D2 137C 0001 001A             		move.b	#1,$1A(a1)
000186D8 137C 0005 0018             		move.b	#5,$18(a1)
000186DE 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000186E4 4E75                       		rts	
000186E6                            ; ===========================================================================
000186E6                            
000186E6 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000186EC                            
000186EC                            ; ===========================================================================
000186EC                            
000186EC                            Obj48_Base:				; XREF: Obj48_Index
000186EC 47F9 0001 86E6             		lea	(Obj48_PosData).l,a3
000186F2 45E8 0028                  		lea	$28(a0),a2
000186F6 7C00                       		moveq	#0,d6
000186F8 1C1A                       		move.b	(a2)+,d6
000186FA                            
000186FA                            loc_17BC6:
000186FA 7800                       		moveq	#0,d4
000186FC 181A                       		move.b	(a2)+,d4
000186FE ED4C                       		lsl.w	#6,d4
00018700 0684 00FF D000             		addi.l	#$FFD000,d4
00018706 2244                       		movea.l	d4,a1
00018708 101B                       		move.b	(a3)+,d0
0001870A B029 003C                  		cmp.b	$3C(a1),d0
0001870E 6700                       		beq.s	loc_17BE0
00018710 5229 003C                  		addq.b	#1,$3C(a1)
00018714                            
00018714                            loc_17BE0:
00018714 51CE FFE4                  		dbf	d6,loc_17BC6
00018718                            
00018718 B029 003C                  		cmp.b	$3C(a1),d0
0001871C 6600                       		bne.s	loc_17BFA
0001871E 2268 0034                  		movea.l	$34(a0),a1
00018722 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018728 6600                       		bne.s	loc_17BFA
0001872A 5428 0024                  		addq.b	#2,$24(a0)
0001872E                            
0001872E                            loc_17BFA:
0001872E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018734 6700                       		beq.s	Obj48_Display
00018736 5268 0032                  		addq.w	#1,$32(a0)
0001873A                            
0001873A                            Obj48_Display:
0001873A 6100 0000                  		bsr.w	sub_17C2A
0001873E 1028 0026                  		move.b	$26(a0),d0
00018742 4EB9 0000 8376             		jsr	(Obj15_Move2).l
00018748 4EF9 0000 DFEE             		jmp	DisplaySprite
0001874E                            ; ===========================================================================
0001874E                            
0001874E                            Obj48_Display2:				; XREF: Obj48_Index
0001874E 6100 0000                  		bsr.w	sub_17C2A
00018752 4EB9 0000 8336             		jsr	(Obj48_Move).l
00018758 4EF9 0000 DFEE             		jmp	DisplaySprite
0001875E                            
0001875E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001875E                            
0001875E                            
0001875E                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001875E 2268 0034                  		movea.l	$34(a0),a1
00018762 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018768 6400                       		bcc.s	loc_17C3C
0001876A 0868 0000 001A             		bchg	#0,$1A(a0)
00018770                            
00018770                            loc_17C3C:
00018770 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018776 3029 000C                  		move.w	$C(a1),d0
0001877A D068 0032                  		add.w	$32(a0),d0
0001877E 3140 0038                  		move.w	d0,$38(a0)
00018782 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018788 4A29 0022                  		tst.b	$22(a1)
0001878C 6A00                       		bpl.s	locret_17C66
0001878E 10BC 003F                  		move.b	#$3F,0(a0)
00018792 117C 0000 0024             		move.b	#0,$24(a0)
00018798                            
00018798                            locret_17C66:
00018798 4E75                       		rts	
0001879A                            ; End of function sub_17C2A
0001879A                            
0001879A                            ; ===========================================================================
0001879A                            
0001879A                            loc_17C68:				; XREF: Obj48_Index
0001879A 2268 0034                  		movea.l	$34(a0),a1
0001879E 4A29 0022                  		tst.b	$22(a1)
000187A2 6A00                       		bpl.s	Obj48_Display3
000187A4 10BC 003F                  		move.b	#$3F,0(a0)
000187A8 117C 0000 0024             		move.b	#0,$24(a0)
000187AE                            
000187AE                            Obj48_Display3:
000187AE 4EF9 0000 DFEE             		jmp	DisplaySprite
000187B4                            ; ===========================================================================
000187B4                            
000187B4                            Obj48_ChkVanish:			; XREF: Obj48_Index
000187B4 7000                       		moveq	#0,d0
000187B6 4A28 001A                  		tst.b	$1A(a0)
000187BA 6600                       		bne.s	Obj48_Vanish
000187BC 5200                       		addq.b	#1,d0
000187BE                            
000187BE                            Obj48_Vanish:
000187BE 1140 001A                  		move.b	d0,$1A(a0)
000187C2 2268 0034                  		movea.l	$34(a0),a1
000187C6 4A29 0022                  		tst.b	$22(a1)
000187CA 6A00                       		bpl.s	Obj48_Display4
000187CC 117C 0000 0020             		move.b	#0,$20(a0)
000187D2 6100 FB94                  		bsr.w	BossDefeated
000187D6 5328 003C                  		subq.b	#1,$3C(a0)
000187DA 6A00                       		bpl.s	Obj48_Display4
000187DC 10BC 003F                  		move.b	#$3F,(a0)
000187E0 117C 0000 0024             		move.b	#0,$24(a0)
000187E6                            
000187E6                            Obj48_Display4:
000187E6 4EF9 0000 DFEE             		jmp	DisplaySprite
000187EC                            ; ===========================================================================
000187EC                            Ani_Eggman:
000187EC                            	include "_anim\Eggman.asm"
000187EC                            ; ---------------------------------------------------------------------------
000187EC                            ; Animation script - Eggman (bosses)
000187EC                            ; ---------------------------------------------------------------------------
000187EC 0000                       		dc.w byte_17CD4-Ani_Eggman
000187EE 0000                       		dc.w byte_17CD8-Ani_Eggman
000187F0 0000                       		dc.w byte_17CDC-Ani_Eggman
000187F2 0000                       		dc.w byte_17CE0-Ani_Eggman
000187F4 0000                       		dc.w byte_17CE4-Ani_Eggman
000187F6 0000                       		dc.w byte_17CE8-Ani_Eggman
000187F8 0000                       		dc.w byte_17CEC-Ani_Eggman
000187FA 0000                       		dc.w byte_17CF0-Ani_Eggman
000187FC 0000                       		dc.w byte_17CF4-Ani_Eggman
000187FE 0000                       		dc.w byte_17CF8-Ani_Eggman
00018800 0000                       		dc.w byte_17CFC-Ani_Eggman
00018802 0000                       		dc.w byte_17D00-Ani_Eggman
00018804 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018808 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001880C 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018810 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018814 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018818 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001881C 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018820 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018824 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018828 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001882C 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018830 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001883C                            		even
0001883C                            		even
0001883C                            Ani_TetoB:
0001883C                            	include "_anim\TetoB.asm"
0001883C                            ; ---------------------------------------------------------------------------
0001883C                            ; Animation script - Eggman (bosses)
0001883C                            ; ---------------------------------------------------------------------------
0001883C 0000                       		dc.w spin-Ani_TetoB
0001883E 0000                       		dc.w static-Ani_TetoB
00018840 0000                       		dc.w static2-Ani_TetoB
00018842 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018849 0500 FF                    static:	dc.b 5,	0, $FF
0001884C 0501 FF                    static2:	dc.b 5,	1, $FF
00018850 00                         		even
00018850 00                         		even
00018850                            ; ---------------------------------------------------------------------------
00018850                            ; Sprite mappings - Eggman (boss levels)
00018850                            ; ---------------------------------------------------------------------------
00018850                            Map_Eggman:
00018850                            	include "_maps\Eggman.asm"
00018850                            Map_dc7e:
00018850 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018852 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018854 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018856 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018858 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001885A 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001885C 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001885E 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018860 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018862 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018864 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018866 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018868 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001886A 06                         Map_dc7e_1A: 	dc.b $6
0001886B EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018870 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018875 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001887A FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001887F 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018884 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018889 02                         Map_dc7e_39: 	dc.b $2
0001888A E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001888F EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018894 02                         Map_dc7e_44: 	dc.b $2
00018895 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001889A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001889F 03                         Map_dc7e_4F: 	dc.b $3
000188A0 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000188A5 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000188AA EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000188AF 03                         Map_dc7e_5F: 	dc.b $3
000188B0 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000188B5 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000188BA EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000188BF 03                         Map_dc7e_6F: 	dc.b $3
000188C0 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188C5 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000188CA EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000188CF 03                         Map_dc7e_7F: 	dc.b $3
000188D0 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000188D5 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188DA EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188DF 04                         Map_dc7e_8F: 	dc.b $4
000188E0 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000188E5 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188EA EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000188EF EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000188F4 01                         Map_dc7e_A4: 	dc.b $1
000188F5 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000188FA 01                         Map_dc7e_AA: 	dc.b $1
000188FB 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018900 00                         Map_dc7e_B0: 	dc.b $0
00018901 02                         Map_dc7e_B1: 	dc.b $2
00018902 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018907 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001890C 02                         Map_dc7e_BC: 	dc.b $2
0001890D F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018912 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018918 00                         	even
00018918 00                         	even
00018918                            
00018918                            ; ---------------------------------------------------------------------------
00018918                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018918                            ; ---------------------------------------------------------------------------
00018918                            Map_BossItems:
00018918                            	include "_maps\Boss items.asm"
00018918                            ; ---------------------------------------------------------------------------
00018918                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018918                            ; ---------------------------------------------------------------------------
00018918 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001891C 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018920 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018924 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018928 01                         byte_17DE4:	dc.b 1
00018929 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001892E 02                         byte_17DEA:	dc.b 2
0001892F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018934 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018939 00                         		dc.b 0
0001893A 01                         byte_17DF6:	dc.b 1
0001893B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018940 01                         byte_17DFC:	dc.b 1
00018941 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018946 01                         byte_17E02:	dc.b 1
00018947 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001894C 04                         byte_17E08:	dc.b 4
0001894D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018952 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018957 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001895C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018961 00                         		dc.b 0
00018962 02                         byte_17E1E:	dc.b 2
00018963 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018968 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001896D 00                         		dc.b 0
0001896E 02                         byte_17E2A:	dc.b 2
0001896F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018974 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001897A 00                         		even
0001897A 00                         		even
0001897A                            
0001897A                            ; ===========================================================================
0001897A                            ; ---------------------------------------------------------------------------
0001897A                            ; Object 77 - Fatass teto boss fight in LZ -STDH
0001897A                            ; ---------------------------------------------------------------------------
0001897A                            
0001897A                            
0001897A                            obj77:					; XREF: Obj_Index
0001897A 7000                       		moveq	#0,d0
0001897C 1028 0024                  		move.b	$24(a0),d0
00018980 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018984 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018988                            ; ===========================================================================
00018988 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
0001898A 0000                       		dc.w obj77_ShipMain-obj77_Index
0001898C 0000                       		dc.w obj77_FaceMain-obj77_Index
0001898E 0000                       		dc.w obj77_FlameMain-obj77_Index
00018990                            
00018990 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018992 0401                       		dc.b 4,	1
00018994 0607                       		dc.b 6,	7
00018996                            ; ===========================================================================
00018996                            
00018996                            obj77_Main:				; XREF: obj77_Index
00018996 45F9 0001 8990             		lea	(obj77_ObjData).l,a2
0001899C 2248                       		movea.l	a0,a1
0001899E 7202                       		moveq	#2,d1
000189A0 6000                       		bra.s	obj77_LoadBoss
000189A2                            ; ===========================================================================
000189A2                            
000189A2                            obj77_Loop:
000189A2 4EB9 0000 E48A             		jsr	SingleObjLoad2
000189A8 6600                       		bne.s	loc2_17772
000189AA                            
000189AA                            obj77_LoadBoss:				; XREF: obj77_Main
000189AA 135A 0024                  		move.b	(a2)+,$24(a1)
000189AE 12BC 0077                  		move.b	#$77,0(a1)
000189B2 3368 0008 0008             		move.w	8(a0),8(a1)
000189B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189BE 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000189C6 337C 0400 0002             		move.w	#$400,2(a1)
000189CC 137C 0004 0001             		move.b	#4,1(a1)
000189D2 137C 0020 0019             		move.b	#$20,$19(a1)
000189D8 137C 0003 0018             		move.b	#3,$18(a1)
000189DE 135A 001C                  		move.b	(a2)+,$1C(a1)
000189E2 2348 0034                  		move.l	a0,$34(a1)
000189E6 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000189EA                            
000189EA                            loc2_17772:
000189EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000189F0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000189F6 117C 000F 0020             		move.b	#$F,$20(a0)
000189FC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A02                            
00018A02                            obj77_ShipMain:				; XREF: obj77_Index
00018A02 7000                       		moveq	#0,d0
00018A04 1028 0025                  		move.b	$25(a0),d0
00018A08 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018A0C 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018A10 43F9 0001 883C             		lea	(Ani_TetoB).l,a1
00018A16 4EB9 0000 B04C             		jsr	AnimateSprite
00018A1C 1028 0022                  		move.b	$22(a0),d0
00018A20 0200 0003                  		andi.b	#3,d0
00018A24 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A2A 8128 0001                  		or.b	d0,1(a0)
00018A2E 4EF9 0000 DFEE             		jmp	DisplaySprite
00018A34                            ; ===========================================================================
00018A34 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018A36 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018A38 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018A3A 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018A3C 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018A3E 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018A40 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018A42 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018A44                            ; ===========================================================================
00018A44                            
00018A44                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018A44                            	;	move.w	#$100,$12(a0)	; move ship down
00018A44 6100 F964                  		bsr.w	BossMove
00018A48 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018A4E 6600                       		bne.s	loc2_177E6
00018A50 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018A56 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018A5A                            
00018A5A                            loc2_177E6:
00018A5A                            ;		move.b	$3F(a0),d0
00018A5A                            ;		jsr	(CalcSine).l
00018A5A EC40                       		asr.w	#6,d0
00018A5C D068 0038                  		add.w	$38(a0),d0
00018A60 3140 000C                  		move.w	d0,$C(a0)
00018A64 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A6A 5428 003F                  		addq.b	#2,$3F(a0)
00018A6E 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018A74 6400                       		bcc.s	locret_1784A2
00018A76 4A28 0022                  		tst.b	$22(a0)
00018A7A 6B00                       		bmi.s	loc2_1784C
00018A7C 4A28 0020                  		tst.b	$20(a0)
00018A80 6600                       		bne.s	locret_1784A2
00018A82 4A28 003E                  		tst.b	$3E(a0)
00018A86 6600                       		bne.s	obj77_ShipFlash
00018A88 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018A8E 303C 00AC                  		move.w	#$AC,d0
00018A92 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018A98                            
00018A98                            obj77_ShipFlash:
00018A98 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018A9C 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018A9E 4A51                       		tst.w	(a1)
00018AA0 6600                       		bne.s	loc2_1783C
00018AA2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018AA6                            
00018AA6                            loc2_1783C:
00018AA6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018AA8 5328 003E                  		subq.b	#1,$3E(a0)
00018AAC 6600                       		bne.s	locret_1784A2
00018AAE 117C 000F 0020             		move.b	#$F,$20(a0)
00018AB4                            
00018AB4                            locret_1784A2:
00018AB4 4E75                       		rts	
00018AB6                            ; ===========================================================================
00018AB6                            
00018AB6                            loc2_1784C:				; XREF: loc2_177E6
00018AB6 7064                       		moveq	#100,d0
00018AB8 6100 0000                  		bsr.w	AddPoints
00018ABC 117C 000A 0025             		move.b	#$A,$25(a0)
00018AC2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018AC8 4E75                       		rts	
00018ACA                            ; ===========================================================================
00018ACA                            
00018ACA                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018ACA 317C FF00 0010             		move.w	#-$100,$10(a0)
00018AD0 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018AD6 6100 F8D2                  		bsr.w	BossMove
00018ADA 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018AE0 6600                       		bne.s	loc2_17916
00018AE2 317C 0000 0010             		move.w	#0,$10(a0)
00018AE8 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018AEE 317C 0000 0012             		move.w	#0,$12(a0)
00018AF4 5428 0025                  		addq.b	#2,$25(a0)
00018AF8                            
00018AF8                            loc2_17910:
00018AF8 317C 0077 003C             		move.w	#$77,$3C(a0)
00018AFE                            
00018AFE                            loc2_17916:
00018AFE 6000 FF5A                  		bra.w	loc2_177E6
00018B02                            ; ===========================================================================
00018B02                            
00018B02                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018B02 6100 F8A6                  		bsr.w	BossMove
00018B06 5368 003C                  		subq.w	#1,$3C(a0)
00018B0A 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018B0C 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018B12 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018B18 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018B1E 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018B24 6600                       		bne.s	loc2_17950 ; if not branch
00018B26                            
00018B26                            fatass_attack:
00018B26 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018B2C 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018B32 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018B38 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018B3A 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B3E 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B44                            
00018B44                            loc2_17950:
00018B44 6000 FF14                  		bra.w	loc2_177E6
00018B48                            ; ===========================================================================
00018B48                            
00018B48                            loc2_17954:				; XREF: obj77_ShipIndex
00018B48 6100 F860                  		bsr.w	BossMove
00018B4C 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018B52                            		; i suck at programming
00018B52 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018B58 6600                       		bne.s	loc2_17976    ; if not blah blah
00018B5A 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B60 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B64 303C 00B9                  		move.w	#$B9,d0
00018B68 4EB9 0000 15CC             		jsr	(PlaySound).l	; play the earthquake sound
00018B6E                            
00018B6E                            Peartobombs:	
00018B6E 4EB9 0000 E48A                		jsr	SingleObjLoad2
00018B74 6600                       		bne.s	secondone
00018B76 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018B7A 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018B80 337C 0670 000C             		move.w	#$670,$C(a1)
00018B86                            secondone:		
00018B86 4EB9 0000 E48A                		jsr	SingleObjLoad2
00018B8C 6600                       		bne.s	loc2_17976		
00018B8E 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018B92 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018B98 337C 0670 000C             		move.w	#$670,$C(a1)
00018B9E                            lastone:
00018B9E 4EB9 0000 E48A                		jsr	SingleObjLoad2
00018BA4 6600                       		bne.s	loc2_17976		
00018BA6 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018BAA 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018BB0 337C 0670 000C             		move.w	#$670,$C(a1)
00018BB6                            		
00018BB6                            loc2_17976:
00018BB6 6000 FEA2                  		bra.w	loc2_177E6
00018BBA                            		
00018BBA                            ; ===========================================================================
00018BBA                            Fatassruns:
00018BBA 6100 F7EE                   		bsr.w	BossMove
00018BBE 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018BC4 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018BCA 6600                       		bne.s	processstuff ; is not go here
00018BCC 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018BD2 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018BD8 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018BDC 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018BE2 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018BE8                            		
00018BE8                            		
00018BE8                            processstuff:
00018BE8 6000 FE70                  		bra.w	loc2_177E6
00018BEC                            ; ===========================================================================
00018BEC                            
00018BEC                            loc2_1797A:				; XREF: obj77_ShipIndex
00018BEC 5368 003C                  		subq.w	#1,$3C(a0)
00018BF0 6B00                       		bmi.s	loc2_17984
00018BF2 6000 F774                  		bra.w	BossDefeated
00018BF6                            ; ===========================================================================
00018BF6                            
00018BF6                            loc2_17984:
00018BF6 08E8 0000 0022             		bset	#0,$22(a0)
00018BFC 08A8 0007 0022             		bclr	#7,$22(a0)
00018C02 4268 0010                  		clr.w	$10(a0)
00018C06 5428 0025                  		addq.b	#2,$25(a0)
00018C0A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C10 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C14 6600                       		bne.s	locret_179AA2
00018C16 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C1C                            
00018C1C                            locret_179AA2:
00018C1C 4E75                       		rts	
00018C1E                            ; ===========================================================================
00018C1E                            
00018C1E                            loc2_179AC:				; XREF: obj77_ShipIndex
00018C1E 5268 003C                  		addq.w	#1,$3C(a0)
00018C22 6700                       		beq.s	loc2_179BC
00018C24 6A00                       		bpl.s	loc2_179C2
00018C26 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C2C 6000                       		bra.s	loc2_179EE
00018C2E                            ; ===========================================================================
00018C2E                            
00018C2E                            loc2_179BC:
00018C2E 4268 0012                  		clr.w	$12(a0)
00018C32 6000                       		bra.s	loc2_179EE
00018C34                            ; ===========================================================================
00018C34                            
00018C34                            loc2_179C2:
00018C34 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C3A 6500                       		bcs.s	loc2_179DA
00018C3C 6700                       		beq.s	loc2_179E0
00018C3E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C44 6500                       		bcs.s	loc2_179EE
00018C46 5428 0025                  		addq.b	#2,$25(a0)
00018C4A 6000                       		bra.s	loc2_179EE
00018C4C                            ; ===========================================================================
00018C4C                            
00018C4C                            loc2_179DA:
00018C4C 5168 0012                  		subq.w	#8,$12(a0)
00018C50 6000                       		bra.s	loc2_179EE
00018C52                            ; ===========================================================================
00018C52                            
00018C52                            loc2_179E0:
00018C52 4268 0012                  		clr.w	$12(a0)
00018C56 303C 0097                  		move.w	#$97,d0
00018C5A 4EB9 0000 15CC             		jsr	(PlaySound).l	; play lz3 music
00018C60                            
00018C60                            loc2_179EE:
00018C60 6100 F748                  		bsr.w	BossMove
00018C64 6000 FDF4                  		bra.w	loc2_177E6
00018C68                            ; ===========================================================================
00018C68                            
00018C68                            loc2_179F6:				; XREF: obj77_ShipIndex
00018C68 317C 0400 0010             		move.w	#$400,$10(a0)
00018C6E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018C74 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018C7A 6700                       		beq.s	loc2_17A10
00018C7C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018C80 6000                       		bra.s	loc2_17A16
00018C82                            ; ===========================================================================
00018C82                            
00018C82                            loc2_17A10:
00018C82 4A28 0001                  		tst.b	1(a0)
00018C86 6A00                       		bpl.s	obj77_ShipDel
00018C88                            
00018C88                            loc2_17A16:
00018C88 6100 F720                  		bsr.w	BossMove
00018C8C 6000 FDCC                  		bra.w	loc2_177E6
00018C90                            ; ===========================================================================
00018C90                            
00018C90                            obj77_ShipDel:
00018C90 4EF9 0000 E02A             		jmp	DeleteObject
00018C96                            ; ===========================================================================
00018C96                            
00018C96                            obj77_FaceMain:				; XREF: obj77_Index
00018C96 4E75                       		rts
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            obj77_FlameMain:			; XREF: obj77_Index
00018C98 4E75                       		rts
00018C9A                            ; ===========================================================================
00018C9A                            
00018C9A                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018C9A 43F9 0001 883C             		lea	(Ani_TetoB).l,a1
00018CA0 4EB9 0000 B04C             		jsr	AnimateSprite
00018CA6 4EF9 0000 DFEE             		jmp	DisplaySprite
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            ; Sprite mappings - Fatass teto boss
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            Map_TetoBoss:
00018CAC                            	include "_maps\tetoboss.asm"
00018CAC                            Map_f09a:
00018CAC 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018CAE 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018CB0 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018CB2 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018CB4 03                         Map_f09a_8: 	dc.b $3
00018CB5 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018CBA 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018CBF DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018CC4 06                         Map_f09a_18: 	dc.b $6
00018CC5 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018CCA 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018CCF E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018CD4 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018CD9 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018CDE 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018CE3 03                         Map_f09a_37: 	dc.b $3
00018CE4 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018CE9 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018CEE DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018CF3 06                         Map_f09a_47: 	dc.b $6
00018CF4 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018CF9 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018CFE E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018D03 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018D08 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018D0D 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018D12                            	even
00018D12                            	even
00018D12                            ; ===========================================================================
00018D12                            ; ---------------------------------------------------------------------------
00018D12                            ; Object 73 - Eggman (MZ)
00018D12                            ; ---------------------------------------------------------------------------
00018D12                            
00018D12                            Obj73:					; XREF: Obj_Index
00018D12 7000                       		moveq	#0,d0
00018D14 1028 0024                  		move.b	$24(a0),d0
00018D18 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018D1C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018D20                            ; ===========================================================================
00018D20 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018D22 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018D24 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018D26 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018D28 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018D2A                            
00018D2A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D2D 0401 04                    		dc.b 4,	1, 4
00018D30 0607 04                    		dc.b 6,	7, 4
00018D33 0800 03                    		dc.b 8,	0, 3
00018D36                            ; ===========================================================================
00018D36                            
00018D36                            Obj73_Main:				; XREF: Obj73_Index
00018D36 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D3C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D42 117C 000F 0020             		move.b	#$F,$20(a0)
00018D48 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D4E 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018D52 2248                       		movea.l	a0,a1
00018D54 7203                       		moveq	#3,d1
00018D56 6000                       		bra.s	Obj73_LoadBoss
00018D58                            ; ===========================================================================
00018D58                            
00018D58                            Obj73_Loop:
00018D58 4EB9 0000 E48A             		jsr	SingleObjLoad2
00018D5E 6600                       		bne.s	Obj73_ShipMain
00018D60 12BC 0073                  		move.b	#$73,0(a1)
00018D64 3368 0008 0008             		move.w	8(a0),8(a1)
00018D6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018D70                            
00018D70                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018D70 08A8 0000 0022             		bclr	#0,$22(a0)
00018D76 4229 0025                  		clr.b	$25(a1)
00018D7A 135A 0024                  		move.b	(a2)+,$24(a1)
00018D7E 135A 001C                  		move.b	(a2)+,$1C(a1)
00018D82 135A 0018                  		move.b	(a2)+,$18(a1)
00018D86 237C 0001 8850 0004        		move.l	#Map_Eggman,4(a1)
00018D8E 337C 0400 0002             		move.w	#$400,2(a1)
00018D94 137C 0004 0001             		move.b	#4,1(a1)
00018D9A 137C 0020 0019             		move.b	#$20,$19(a1)
00018DA0 2348 0034                  		move.l	a0,$34(a1)
00018DA4 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018DA8                            
00018DA8                            Obj73_ShipMain:
00018DA8 7000                       		moveq	#0,d0
00018DAA 1028 0025                  		move.b	$25(a0),d0
00018DAE 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018DB2 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018DB6 43F9 0001 87EC             		lea	(Ani_Eggman).l,a1
00018DBC 4EB9 0000 B04C             		jsr	AnimateSprite
00018DC2 7003                       		moveq	#3,d0
00018DC4 C028 0022                  		and.b	$22(a0),d0
00018DC8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018DCE 8128 0001                  		or.b	d0,1(a0)
00018DD2 4EF9 0000 DFEE             		jmp	DisplaySprite
00018DD8                            ; ===========================================================================
00018DD8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018DDA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018DDC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018DDE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018DE0 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018DE2                            ; ===========================================================================
00018DE2                            
00018DE2                            loc_18302:				; XREF: Obj73_ShipIndex
00018DE2 1028 003F                  		move.b	$3F(a0),d0
00018DE6 5428 003F                  		addq.b	#2,$3F(a0)
00018DEA 4EB9 0000 2D6C             		jsr	(CalcSine).l
00018DF0 E440                       		asr.w	#2,d0
00018DF2 3140 0012                  		move.w	d0,$12(a0)
00018DF6 317C FF00 0010             		move.w	#-$100,$10(a0)
00018DFC 6100 F5AC                  		bsr.w	BossMove
00018E00 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E06 6600                       		bne.s	loc_18334
00018E08 5428 0025                  		addq.b	#2,$25(a0)
00018E0C 4228 0028                  		clr.b	$28(a0)
00018E10 42A8 0010                  		clr.l	$10(a0)
00018E14                            
00018E14                            loc_18334:
00018E14 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018E1A 1140 0034                  		move.b	d0,$34(a0)
00018E1E                            
00018E1E                            loc_1833E:
00018E1E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E24 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E2A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018E30 6400                       		bcc.s	locret_18390
00018E32 4A28 0022                  		tst.b	$22(a0)
00018E36 6B00                       		bmi.s	loc_18392
00018E38 4A28 0020                  		tst.b	$20(a0)
00018E3C 6600                       		bne.s	locret_18390
00018E3E 4A28 003E                  		tst.b	$3E(a0)
00018E42 6600                       		bne.s	loc_18374
00018E44 117C 0028 003E             		move.b	#$28,$3E(a0)
00018E4A 303C 00AC                  		move.w	#$AC,d0
00018E4E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018E54                            
00018E54                            loc_18374:
00018E54 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018E58 7000                       		moveq	#0,d0
00018E5A 4A51                       		tst.w	(a1)
00018E5C 6600                       		bne.s	loc_18382
00018E5E 303C 0EEE                  		move.w	#$EEE,d0
00018E62                            
00018E62                            loc_18382:
00018E62 3280                       		move.w	d0,(a1)
00018E64 5328 003E                  		subq.b	#1,$3E(a0)
00018E68 6600                       		bne.s	locret_18390
00018E6A 117C 000F 0020             		move.b	#$F,$20(a0)
00018E70                            
00018E70                            locret_18390:
00018E70 4E75                       		rts	
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            loc_18392:				; XREF: loc_1833E
00018E72 7064                       		moveq	#100,d0
00018E74 6100 0000                  		bsr.w	AddPoints
00018E78 117C 0004 0025             		move.b	#4,$25(a0)
00018E7E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018E84 4268 0010                  		clr.w	$10(a0)
00018E88 4E75                       		rts	
00018E8A                            ; ===========================================================================
00018E8A                            
00018E8A                            loc_183AA:				; XREF: Obj73_ShipIndex
00018E8A 7000                       		moveq	#0,d0
00018E8C 1028 0028                  		move.b	$28(a0),d0
00018E90 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018E94 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018E98 0228 0006 0028             		andi.b	#6,$28(a0)
00018E9E 6000 FF7E                  		bra.w	loc_1833E
00018EA2                            ; ===========================================================================
00018EA2 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018EA4 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EA6 0000                       		dc.w loc_183CA-off_183C2
00018EA8 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EAA                            ; ===========================================================================
00018EAA                            
00018EAA                            loc_183CA:				; XREF: off_183C2
00018EAA 4A68 0010                  		tst.w	$10(a0)
00018EAE 6600                       		bne.s	loc_183FE
00018EB0 7040                       		moveq	#$40,d0
00018EB2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018EB8 6700                       		beq.s	loc_183E6
00018EBA 6500                       		bcs.s	loc_183DE
00018EBC 4440                       		neg.w	d0
00018EBE                            
00018EBE                            loc_183DE:
00018EBE 3140 0012                  		move.w	d0,$12(a0)
00018EC2 6000 F4E6                  		bra.w	BossMove
00018EC6                            ; ===========================================================================
00018EC6                            
00018EC6                            loc_183E6:
00018EC6 317C 0200 0010             		move.w	#$200,$10(a0)
00018ECC 317C 0100 0012             		move.w	#$100,$12(a0)
00018ED2 0828 0000 0022             		btst	#0,$22(a0)
00018ED8 6600                       		bne.s	loc_183FE
00018EDA 4468 0010                  		neg.w	$10(a0)
00018EDE                            
00018EDE                            loc_183FE:
00018EDE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018EE4 6400                       		bcc.s	Obj73_MakeLava
00018EE6 6100 F4C2                  		bsr.w	BossMove
00018EEA 5968 0012                  		subq.w	#4,$12(a0)
00018EEE                            
00018EEE                            Obj73_MakeLava:
00018EEE 5328 0034                  		subq.b	#1,$34(a0)
00018EF2 6400                       		bcc.s	loc_1845C
00018EF4 4EB9 0000 E474             		jsr	SingleObjLoad
00018EFA 6600                       		bne.s	loc_1844A
00018EFC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018F00 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018F06 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018F0C 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018F12 80FC 0050                  		divu.w	#$50,d0
00018F16 4840                       		swap	d0
00018F18 0640 1878                  		addi.w	#$1878,d0
00018F1C 3340 0008                  		move.w	d0,8(a1)
00018F20 EE09                       		lsr.b	#7,d1
00018F22 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018F28                            
00018F28                            loc_1844A:
00018F28 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018F2E 0200 001F                  		andi.b	#$1F,d0
00018F32 0600 0040                  		addi.b	#$40,d0
00018F36 1140 0034                  		move.b	d0,$34(a0)
00018F3A                            
00018F3A                            loc_1845C:
00018F3A 0828 0000 0022             		btst	#0,$22(a0)
00018F40 6700                       		beq.s	loc_18474
00018F42 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018F48 6D00                       		blt.s	locret_1849C
00018F4A 317C 1910 0030             		move.w	#$1910,$30(a0)
00018F50 6000                       		bra.s	loc_18482
00018F52                            ; ===========================================================================
00018F52                            
00018F52                            loc_18474:
00018F52 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018F58 6E00                       		bgt.s	locret_1849C
00018F5A 317C 1830 0030             		move.w	#$1830,$30(a0)
00018F60                            
00018F60                            loc_18482:
00018F60 4268 0010                  		clr.w	$10(a0)
00018F64 317C FE80 0012             		move.w	#-$180,$12(a0)
00018F6A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018F70 6400                       		bcc.s	loc_18498
00018F72 4468 0012                  		neg.w	$12(a0)
00018F76                            
00018F76                            loc_18498:
00018F76 5428 0028                  		addq.b	#2,$28(a0)
00018F7A                            
00018F7A                            locret_1849C:
00018F7A 4E75                       		rts	
00018F7C                            ; ===========================================================================
00018F7C                            
00018F7C                            Obj73_MakeLava2:			; XREF: off_183C2
00018F7C 6100 F42C                  		bsr.w	BossMove
00018F80 3028 0038                  		move.w	$38(a0),d0
00018F84 0440 022C                  		subi.w	#$22C,d0
00018F88 6E00                       		bgt.s	locret_184F4
00018F8A 303C 022C                  		move.w	#$22C,d0
00018F8E 4A68 0012                  		tst.w	$12(a0)
00018F92 6700                       		beq.s	loc_184EA
00018F94 4268 0012                  		clr.w	$12(a0)
00018F98 317C 0050 003C             		move.w	#$50,$3C(a0)
00018F9E 0868 0000 0022             		bchg	#0,$22(a0)
00018FA4 4EB9 0000 E474             		jsr	SingleObjLoad
00018FAA 6600                       		bne.s	loc_184EA
00018FAC 3368 0030 0008             		move.w	$30(a0),8(a1)
00018FB2 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018FB8 0669 0018 000C             		addi.w	#$18,$C(a1)
00018FBE 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018FC2 137C 0001 0028             		move.b	#1,$28(a1)
00018FC8                            
00018FC8                            loc_184EA:
00018FC8 5368 003C                  		subq.w	#1,$3C(a0)
00018FCC 6600                       		bne.s	locret_184F4
00018FCE 5428 0028                  		addq.b	#2,$28(a0)
00018FD2                            
00018FD2                            locret_184F4:
00018FD2 4E75                       		rts	
00018FD4                            ; ===========================================================================
00018FD4                            
00018FD4                            loc_184F6:				; XREF: Obj73_ShipIndex
00018FD4 5368 003C                  		subq.w	#1,$3C(a0)
00018FD8 6B00                       		bmi.s	loc_18500
00018FDA 6000 F38C                  		bra.w	BossDefeated
00018FDE                            ; ===========================================================================
00018FDE                            
00018FDE                            loc_18500:
00018FDE 08E8 0000 0022             		bset	#0,$22(a0)
00018FE4 08A8 0007 0022             		bclr	#7,$22(a0)
00018FEA 4268 0010                  		clr.w	$10(a0)
00018FEE 5428 0025                  		addq.b	#2,$25(a0)
00018FF2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018FF8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018FFC 6600                       		bne.s	locret_1852A
00018FFE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019004 4268 0012                  		clr.w	$12(a0)
00019008                            
00019008                            locret_1852A:
00019008 4E75                       		rts	
0001900A                            ; ===========================================================================
0001900A                            
0001900A                            loc_1852C:				; XREF: Obj73_ShipIndex
0001900A 5268 003C                  		addq.w	#1,$3C(a0)
0001900E 6700                       		beq.s	loc_18544
00019010 6A00                       		bpl.s	loc_1854E
00019012 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019018 6400                       		bcc.s	loc_18544
0001901A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019020 6000                       		bra.s	loc_1857A
00019022                            ; ===========================================================================
00019022                            
00019022                            loc_18544:
00019022 4268 0012                  		clr.w	$12(a0)
00019026 4268 003C                  		clr.w	$3C(a0)
0001902A 6000                       		bra.s	loc_1857A
0001902C                            ; ===========================================================================
0001902C                            
0001902C                            loc_1854E:
0001902C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019032 6500                       		bcs.s	loc_18566
00019034 6700                       		beq.s	loc_1856C
00019036 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001903C 6500                       		bcs.s	loc_1857A
0001903E 5428 0025                  		addq.b	#2,$25(a0)
00019042 6000                       		bra.s	loc_1857A
00019044                            ; ===========================================================================
00019044                            
00019044                            loc_18566:
00019044 5168 0012                  		subq.w	#8,$12(a0)
00019048 6000                       		bra.s	loc_1857A
0001904A                            ; ===========================================================================
0001904A                            
0001904A                            loc_1856C:
0001904A 4268 0012                  		clr.w	$12(a0)
0001904E 303C 0083                  		move.w	#$83,d0
00019052 4EB9 0000 15CC             		jsr	(PlaySound).l	; play MZ music
00019058                            
00019058                            loc_1857A:
00019058 6100 F350                  		bsr.w	BossMove
0001905C 6000 FDC0                  		bra.w	loc_1833E
00019060                            ; ===========================================================================
00019060                            
00019060                            loc_18582:				; XREF: Obj73_ShipIndex
00019060 317C 0500 0010             		move.w	#$500,$10(a0)
00019066 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001906C 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019072 6400                       		bcc.s	loc_1859C
00019074 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019078 6000                       		bra.s	loc_185A2
0001907A                            ; ===========================================================================
0001907A                            
0001907A                            loc_1859C:
0001907A 4A28 0001                  		tst.b	1(a0)
0001907E 6A00                       		bpl.s	Obj73_ShipDel
00019080                            
00019080                            loc_185A2:
00019080 6100 F328                  		bsr.w	BossMove
00019084 6000 FD98                  		bra.w	loc_1833E
00019088                            ; ===========================================================================
00019088                            
00019088                            Obj73_ShipDel:
00019088 4EF9 0000 E02A             		jmp	DeleteObject
0001908E                            ; ===========================================================================
0001908E                            
0001908E                            Obj73_FaceMain:				; XREF: Obj73_Index
0001908E 7000                       		moveq	#0,d0
00019090 7201                       		moveq	#1,d1
00019092 2268 0034                  		movea.l	$34(a0),a1
00019096 1029 0025                  		move.b	$25(a1),d0
0001909A 5540                       		subq.w	#2,d0
0001909C 6600                       		bne.s	loc_185D2
0001909E 0829 0001 0028             		btst	#1,$28(a1)
000190A4 6700                       		beq.s	loc_185DA
000190A6 4A69 0012                  		tst.w	$12(a1)
000190AA 6600                       		bne.s	loc_185DA
000190AC 7204                       		moveq	#4,d1
000190AE 6000                       		bra.s	loc_185EE
000190B0                            ; ===========================================================================
000190B0                            
000190B0                            loc_185D2:
000190B0 5500                       		subq.b	#2,d0
000190B2 6B00                       		bmi.s	loc_185DA
000190B4 720A                       		moveq	#$A,d1
000190B6 6000                       		bra.s	loc_185EE
000190B8                            ; ===========================================================================
000190B8                            
000190B8                            loc_185DA:
000190B8 4A29 0020                  		tst.b	$20(a1)
000190BC 6600                       		bne.s	loc_185E4
000190BE 7205                       		moveq	#5,d1
000190C0 6000                       		bra.s	loc_185EE
000190C2                            ; ===========================================================================
000190C2                            
000190C2                            loc_185E4:
000190C2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000190C8 6500                       		bcs.s	loc_185EE
000190CA 7204                       		moveq	#4,d1
000190CC                            
000190CC                            loc_185EE:
000190CC 1141 001C                  		move.b	d1,$1C(a0)
000190D0 5900                       		subq.b	#4,d0
000190D2 6600                       		bne.s	loc_18602
000190D4 117C 0006 001C             		move.b	#6,$1C(a0)
000190DA 4A28 0001                  		tst.b	1(a0)
000190DE 6A00                       		bpl.s	Obj73_FaceDel
000190E0                            
000190E0                            loc_18602:
000190E0 6000                       		bra.s	Obj73_Display
000190E2                            ; ===========================================================================
000190E2                            
000190E2                            Obj73_FaceDel:
000190E2 4EF9 0000 E02A             		jmp	DeleteObject
000190E8                            ; ===========================================================================
000190E8                            
000190E8                            Obj73_FlameMain:			; XREF: Obj73_Index
000190E8 117C 0007 001C             		move.b	#7,$1C(a0)
000190EE 2268 0034                  		movea.l	$34(a0),a1
000190F2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000190F8 6D00                       		blt.s	loc_1862A
000190FA 117C 000B 001C             		move.b	#$B,$1C(a0)
00019100 4A28 0001                  		tst.b	1(a0)
00019104 6A00                       		bpl.s	Obj73_FlameDel
00019106 6000                       		bra.s	loc_18636
00019108                            ; ===========================================================================
00019108                            
00019108                            loc_1862A:
00019108 4A69 0010                  		tst.w	$10(a1)
0001910C 6700                       		beq.s	loc_18636
0001910E 117C 0008 001C             		move.b	#8,$1C(a0)
00019114                            
00019114                            loc_18636:
00019114 6000                       		bra.s	Obj73_Display
00019116                            ; ===========================================================================
00019116                            
00019116                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019116 4EF9 0000 E02A             		jmp	DeleteObject
0001911C                            ; ===========================================================================
0001911C                            
0001911C                            Obj73_Display:
0001911C 43F9 0001 87EC             		lea	(Ani_Eggman).l,a1
00019122 4EB9 0000 B04C             		jsr	AnimateSprite
00019128                            
00019128                            loc_1864A:
00019128 2268 0034                  		movea.l	$34(a0),a1
0001912C 3169 0008 0008             		move.w	8(a1),8(a0)
00019132 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019138 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001913E 7003                       		moveq	#3,d0
00019140 C028 0022                  		and.b	$22(a0),d0
00019144 0228 00FC 0001             		andi.b	#-4,1(a0)
0001914A 8128 0001                  		or.b	d0,1(a0)
0001914E 4EF9 0000 DFEE             		jmp	DisplaySprite
00019154                            ; ===========================================================================
00019154                            
00019154                            Obj73_TubeMain:				; XREF: Obj73_Index
00019154 2268 0034                  		movea.l	$34(a0),a1
00019158 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001915E 6600                       		bne.s	loc_18688
00019160 4A28 0001                  		tst.b	1(a0)
00019164 6A00                       		bpl.s	Obj73_TubeDel
00019166                            
00019166                            loc_18688:
00019166 217C 0001 8918 0004        		move.l	#Map_BossItems,4(a0)
0001916E 317C 246C 0002             		move.w	#$246C,2(a0)
00019174 117C 0004 001A             		move.b	#4,$1A(a0)
0001917A 60AC                       		bra.s	loc_1864A
0001917C                            ; ===========================================================================
0001917C                            
0001917C                            Obj73_TubeDel:
0001917C 4EF9 0000 E02A             		jmp	DeleteObject
00019182                            ; ===========================================================================
00019182                            ; ---------------------------------------------------------------------------
00019182                            ; Object 74 - lava that	Eggman drops (MZ)
00019182                            ; ---------------------------------------------------------------------------
00019182                            
00019182                            Obj74:					; XREF: Obj_Index
00019182 7000                       		moveq	#0,d0
00019184 1028 0024                  		move.b	$24(a0),d0
00019188 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001918C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019190 4EF9 0000 DFEE             		jmp	DisplaySprite
00019196                            ; ===========================================================================
00019196 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00019198 0000                       		dc.w Obj74_Action-Obj74_Index
0001919A 0000                       		dc.w loc_18886-Obj74_Index
0001919C 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001919E                            ; ===========================================================================
0001919E                            
0001919E                            Obj74_Main:				; XREF: Obj74_Index
0001919E 117C 0008 0016             		move.b	#8,$16(a0)
000191A4 117C 0008 0017             		move.b	#8,$17(a0)
000191AA 217C 0000 BC4A 0004        		move.l	#Map_obj14,4(a0)
000191B2 317C 0345 0002             		move.w	#$345,2(a0)
000191B8 117C 0004 0001             		move.b	#4,1(a0)
000191BE 117C 0005 0018             		move.b	#5,$18(a0)
000191C4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191CA 117C 0008 0019             		move.b	#8,$19(a0)
000191D0 5428 0024                  		addq.b	#2,$24(a0)
000191D4 4A28 0028                  		tst.b	$28(a0)
000191D8 6600                       		bne.s	loc_1870A
000191DA 117C 008B 0020             		move.b	#$8B,$20(a0)
000191E0 5428 0024                  		addq.b	#2,$24(a0)
000191E4 6000 0000                  		bra.w	loc_18886
000191E8                            ; ===========================================================================
000191E8                            
000191E8                            loc_1870A:
000191E8 117C 001E 0029             		move.b	#$1E,$29(a0)
000191EE 303C 00AE                  		move.w	#$AE,d0
000191F2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava sound
000191F8                            
000191F8                            Obj74_Action:				; XREF: Obj74_Index
000191F8 7000                       		moveq	#0,d0
000191FA 1028 0025                  		move.b	$25(a0),d0
000191FE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019202 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019206 4EB9 0000 DFC8             		jsr	SpeedToPos
0001920C 43F9 0000 EEA8             		lea	(Ani_obj14).l,a1
00019212 4EB9 0000 B04C             		jsr	AnimateSprite
00019218 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001921E 6200                       		bhi.s	Obj74_Delete
00019220 4E75                       		rts	
00019222                            ; ===========================================================================
00019222                            
00019222                            Obj74_Delete:
00019222 4EF9 0000 E02A             		jmp	DeleteObject
00019228                            ; ===========================================================================
00019228 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001922A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001922C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001922E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019230                            ; ===========================================================================
00019230                            
00019230                            Obj74_Drop:				; XREF: Obj74_Index2
00019230 08E8 0001 0022             		bset	#1,$22(a0)
00019236 5328 0029                  		subq.b	#1,$29(a0)
0001923A 6A00                       		bpl.s	locret_18780
0001923C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019242 4228 0028                  		clr.b	$28(a0)
00019246 0668 0018 0012             		addi.w	#$18,$12(a0)
0001924C 08A8 0001 0022             		bclr	#1,$22(a0)
00019252 6100 C6A4                  		bsr.w	ObjHitFloor
00019256 4A41                       		tst.w	d1
00019258 6A00                       		bpl.s	locret_18780
0001925A 5428 0025                  		addq.b	#2,$25(a0)
0001925E                            
0001925E                            locret_18780:
0001925E 4E75                       		rts	
00019260                            ; ===========================================================================
00019260                            
00019260                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019260 5568 000C                  		subq.w	#2,$C(a0)
00019264 08E8 0007 0002             		bset	#7,2(a0)
0001926A 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019270 4268 0012                  		clr.w	$12(a0)
00019274 3168 0008 0030             		move.w	8(a0),$30(a0)
0001927A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019280 117C 0003 0029             		move.b	#3,$29(a0)
00019286 4EB9 0000 E48A             		jsr	SingleObjLoad2
0001928C 6600                       		bne.s	loc_187CA
0001928E 47D1                       		lea	(a1),a3
00019290 45D0                       		lea	(a0),a2
00019292 7003                       		moveq	#3,d0
00019294                            
00019294                            Obj74_Loop:
00019294 26DA                       		move.l	(a2)+,(a3)+
00019296 26DA                       		move.l	(a2)+,(a3)+
00019298 26DA                       		move.l	(a2)+,(a3)+
0001929A 26DA                       		move.l	(a2)+,(a3)+
0001929C 51C8 FFF6                  		dbf	d0,Obj74_Loop
000192A0                            
000192A0 4469 0010                  		neg.w	$10(a1)
000192A4 5429 0025                  		addq.b	#2,$25(a1)
000192A8                            
000192A8                            loc_187CA:
000192A8 5428 0025                  		addq.b	#2,$25(a0)
000192AC 4E75                       		rts	
000192AE                            
000192AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000192AE                            
000192AE                            
000192AE                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000192AE 4EB9 0000 E48A             		jsr	SingleObjLoad2
000192B4 6600                       		bne.s	locret_187EE
000192B6 3368 0008 0008             		move.w	8(a0),8(a1)
000192BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192C2 12BC 0074                  		move.b	#$74,(a1)
000192C6 337C 0067 0028             		move.w	#$67,$28(a1)
000192CC                            
000192CC                            locret_187EE:
000192CC 4E75                       		rts	
000192CE                            ; End of function Obj74_Duplicate2
000192CE                            
000192CE                            ; ===========================================================================
000192CE                            
000192CE                            Obj74_Duplicate:			; XREF: Obj74_Index2
000192CE 6100 C628                  		bsr.w	ObjHitFloor
000192D2 4A41                       		tst.w	d1
000192D4 6A00                       		bpl.s	loc_18826
000192D6 3028 0008                  		move.w	8(a0),d0
000192DA 0C40 1940                  		cmpi.w	#$1940,d0
000192DE 6E00                       		bgt.s	loc_1882C
000192E0 3228 0030                  		move.w	$30(a0),d1
000192E4 B240                       		cmp.w	d0,d1
000192E6 6700                       		beq.s	loc_1881E
000192E8 0240 0010                  		andi.w	#$10,d0
000192EC 0241 0010                  		andi.w	#$10,d1
000192F0 B240                       		cmp.w	d0,d1
000192F2 6700                       		beq.s	loc_1881E
000192F4 61B8                       		bsr.s	Obj74_Duplicate2
000192F6 3168 0008 0032             		move.w	8(a0),$32(a0)
000192FC                            
000192FC                            loc_1881E:
000192FC 3168 0008 0030             		move.w	8(a0),$30(a0)
00019302 4E75                       		rts	
00019304                            ; ===========================================================================
00019304                            
00019304                            loc_18826:
00019304 5428 0025                  		addq.b	#2,$25(a0)
00019308 4E75                       		rts	
0001930A                            ; ===========================================================================
0001930A                            
0001930A                            loc_1882C:
0001930A 5428 0024                  		addq.b	#2,$24(a0)
0001930E 4E75                       		rts	
00019310                            ; ===========================================================================
00019310                            
00019310                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019310 08A8 0001 0022             		bclr	#1,$22(a0)
00019316 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001931C 3028 0008                  		move.w	8(a0),d0
00019320 9068 0032                  		sub.w	$32(a0),d0
00019324 6A00                       		bpl.s	loc_1884A
00019326 4440                       		neg.w	d0
00019328                            
00019328                            loc_1884A:
00019328 0C40 0012                  		cmpi.w	#$12,d0
0001932C 6600                       		bne.s	loc_18856
0001932E 08A8 0007 0002             		bclr	#7,2(a0)
00019334                            
00019334                            loc_18856:
00019334 6100 C5C2                  		bsr.w	ObjHitFloor
00019338 4A41                       		tst.w	d1
0001933A 6A00                       		bpl.s	locret_1887E
0001933C 5328 0029                  		subq.b	#1,$29(a0)
00019340 6700                       		beq.s	Obj74_Delete2
00019342 4268 0012                  		clr.w	$12(a0)
00019346 3168 0032 0008             		move.w	$32(a0),8(a0)
0001934C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019352 08E8 0007 0002             		bset	#7,2(a0)
00019358 5528 0025                  		subq.b	#2,$25(a0)
0001935C                            
0001935C                            locret_1887E:
0001935C 4E75                       		rts	
0001935E                            ; ===========================================================================
0001935E                            
0001935E                            Obj74_Delete2:
0001935E 4EF9 0000 E02A             		jmp	DeleteObject
00019364                            ; ===========================================================================
00019364                            
00019364                            loc_18886:				; XREF: Obj74_Index
00019364 08E8 0007 0002             		bset	#7,2(a0)
0001936A 5328 0029                  		subq.b	#1,$29(a0)
0001936E 6600                       		bne.s	Obj74_Animate
00019370 117C 0001 001C             		move.b	#1,$1C(a0)
00019376 5968 000C                  		subq.w	#4,$C(a0)
0001937A 4228 0020                  		clr.b	$20(a0)
0001937E                            
0001937E                            Obj74_Animate:
0001937E 43F9 0000 EEA8             		lea	(Ani_obj14).l,a1
00019384 4EF9 0000 B04C             		jmp	AnimateSprite
0001938A                            ; ===========================================================================
0001938A                            
0001938A                            Obj74_Delete3:				; XREF: Obj74_Index
0001938A 4EF9 0000 E02A             		jmp	DeleteObject
00019390                            ; ===========================================================================
00019390                            
00019390                            Obj7A_Delete:
00019390 4EF9 0000 E02A             		jmp	DeleteObject
00019396                            ; ===========================================================================
00019396                            ; ---------------------------------------------------------------------------
00019396                            ; Object 7A - Eggman (SLZ)
00019396                            ; ---------------------------------------------------------------------------
00019396                            
00019396                            Obj7A:					; XREF: Obj_Index
00019396 7000                       		moveq	#0,d0
00019398 1028 0024                  		move.b	$24(a0),d0
0001939C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000193A0 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000193A4                            ; ===========================================================================
000193A4 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000193A6 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000193A8 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000193AA 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000193AC 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000193AE                            
000193AE 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000193B1 0401 04                    		dc.b 4,	1, 4
000193B4 0607 04                    		dc.b 6,	7, 4
000193B7 0800 03                    		dc.b 8,	0, 3
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            Obj7A_Main:				; XREF: Obj7A_Index
000193BA 317C 2188 0008             		move.w	#$2188,8(a0)
000193C0 317C 0228 000C             		move.w	#$228,$C(a0)
000193C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000193CC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000193D2 117C 000F 0020             		move.b	#$F,$20(a0)
000193D8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000193DE 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000193E2 2248                       		movea.l	a0,a1
000193E4 7203                       		moveq	#3,d1
000193E6 6000                       		bra.s	Obj7A_LoadBoss
000193E8                            ; ===========================================================================
000193E8                            
000193E8                            Obj7A_Loop:
000193E8 4EB9 0000 E48A             		jsr	SingleObjLoad2
000193EE 6600                       		bne.s	loc_1895C
000193F0 12BC 007A                  		move.b	#$7A,0(a1)
000193F4 3368 0008 0008             		move.w	8(a0),8(a1)
000193FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019400                            
00019400                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019400 08A8 0000 0022             		bclr	#0,$22(a0)
00019406 4229 0025                  		clr.b	$25(a1)
0001940A 135A 0024                  		move.b	(a2)+,$24(a1)
0001940E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019412 135A 0018                  		move.b	(a2)+,$18(a1)
00019416 237C 0001 8850 0004        		move.l	#Map_Eggman,4(a1)
0001941E 337C 0400 0002             		move.w	#$400,2(a1)
00019424 137C 0004 0001             		move.b	#4,1(a1)
0001942A 137C 0020 0019             		move.b	#$20,$19(a1)
00019430 2348 0034                  		move.l	a0,$34(a1)
00019434 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019438                            
00019438                            loc_1895C:
00019438 43F8 D040                  		lea	($FFFFD040).w,a1
0001943C 45E8 002A                  		lea	$2A(a0),a2
00019440 705E                       		moveq	#$5E,d0
00019442 723E                       		moveq	#$3E,d1
00019444                            
00019444                            loc_18968:
00019444 B011                       		cmp.b	(a1),d0
00019446 6600                       		bne.s	loc_18974
00019448 4A29 0028                  		tst.b	$28(a1)
0001944C 6700                       		beq.s	loc_18974
0001944E 34C9                       		move.w	a1,(a2)+
00019450                            
00019450                            loc_18974:
00019450 D2FC 0040                  		adda.w	#$40,a1
00019454 51C9 FFEE                  		dbf	d1,loc_18968
00019458                            
00019458                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019458 7000                       		moveq	#0,d0
0001945A 1028 0025                  		move.b	$25(a0),d0
0001945E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019462 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019466 43F9 0001 87EC             		lea	(Ani_Eggman).l,a1
0001946C 4EB9 0000 B04C             		jsr	AnimateSprite
00019472 7003                       		moveq	#3,d0
00019474 C028 0022                  		and.b	$22(a0),d0
00019478 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001947E 8128 0001                  		or.b	d0,1(a0)
00019482 4EF9 0000 DFEE             		jmp	DisplaySprite
00019488                            ; ===========================================================================
00019488 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001948A 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001948C 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001948E 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019490 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019492 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019494                            ; ===========================================================================
00019494                            
00019494                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019494 317C FF00 0010             		move.w	#-$100,$10(a0)
0001949A 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000194A0 6400                       		bcc.s	loc_189CA
000194A2 5428 0025                  		addq.b	#2,$25(a0)
000194A6                            
000194A6                            loc_189CA:
000194A6 6100 EF02                  		bsr.w	BossMove
000194AA 1028 003F                  		move.b	$3F(a0),d0
000194AE 5428 003F                  		addq.b	#2,$3F(a0)
000194B2 4EB9 0000 2D6C             		jsr	(CalcSine).l
000194B8 EC40                       		asr.w	#6,d0
000194BA D068 0038                  		add.w	$38(a0),d0
000194BE 3140 000C                  		move.w	d0,$C(a0)
000194C2 3168 0030 0008             		move.w	$30(a0),8(a0)
000194C8 6000                       		bra.s	loc_189FE
000194CA                            ; ===========================================================================
000194CA                            
000194CA                            loc_189EE:
000194CA 6100 EEDE                  		bsr.w	BossMove
000194CE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000194D4 3168 0030 0008             		move.w	$30(a0),8(a0)
000194DA                            
000194DA                            loc_189FE:
000194DA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000194E0 6400                       		bcc.s	locret_18A44
000194E2 4A28 0022                  		tst.b	$22(a0)
000194E6 6B00                       		bmi.s	loc_18A46
000194E8 4A28 0020                  		tst.b	$20(a0)
000194EC 6600                       		bne.s	locret_18A44
000194EE 4A28 003E                  		tst.b	$3E(a0)
000194F2 6600                       		bne.s	loc_18A28
000194F4 117C 0020 003E             		move.b	#$20,$3E(a0)
000194FA 303C 00AC                  		move.w	#$AC,d0
000194FE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019504                            
00019504                            loc_18A28:
00019504 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019508 7000                       		moveq	#0,d0
0001950A 4A51                       		tst.w	(a1)
0001950C 6600                       		bne.s	loc_18A36
0001950E 303C 0EEE                  		move.w	#$EEE,d0
00019512                            
00019512                            loc_18A36:
00019512 3280                       		move.w	d0,(a1)
00019514 5328 003E                  		subq.b	#1,$3E(a0)
00019518 6600                       		bne.s	locret_18A44
0001951A 117C 000F 0020             		move.b	#$F,$20(a0)
00019520                            
00019520                            locret_18A44:
00019520 4E75                       		rts	
00019522                            ; ===========================================================================
00019522                            
00019522                            loc_18A46:
00019522 7064                       		moveq	#100,d0
00019524 6100 0000                  		bsr.w	AddPoints
00019528 117C 0006 0025             		move.b	#6,$25(a0)
0001952E 117C 0078 003C             		move.b	#$78,$3C(a0)
00019534 4268 0010                  		clr.w	$10(a0)
00019538 4E75                       		rts	
0001953A                            ; ===========================================================================
0001953A                            
0001953A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001953A 3028 0030                  		move.w	$30(a0),d0
0001953E 317C 0200 0010             		move.w	#$200,$10(a0)
00019544 0828 0000 0022             		btst	#0,$22(a0)
0001954A 6600                       		bne.s	loc_18A7C
0001954C 4468 0010                  		neg.w	$10(a0)
00019550 0C40 2008                  		cmpi.w	#$2008,d0
00019554 6E00                       		bgt.s	loc_18A88
00019556 6000                       		bra.s	loc_18A82
00019558                            ; ===========================================================================
00019558                            
00019558                            loc_18A7C:
00019558 0C40 2138                  		cmpi.w	#$2138,d0
0001955C 6D00                       		blt.s	loc_18A88
0001955E                            
0001955E                            loc_18A82:
0001955E 0868 0000 0022             		bchg	#0,$22(a0)
00019564                            
00019564                            loc_18A88:
00019564 3028 0008                  		move.w	8(a0),d0
00019568 72FF                       		moveq	#-1,d1
0001956A 7402                       		moveq	#2,d2
0001956C 45E8 002A                  		lea	$2A(a0),a2
00019570 7828                       		moveq	#$28,d4
00019572 4A68 0010                  		tst.w	$10(a0)
00019576 6A00                       		bpl.s	loc_18A9E
00019578 4444                       		neg.w	d4
0001957A                            
0001957A                            loc_18A9E:
0001957A 321A                       		move.w	(a2)+,d1
0001957C 2641                       		movea.l	d1,a3
0001957E 082B 0003 0022             		btst	#3,$22(a3)
00019584 6600                       		bne.s	loc_18AB4
00019586 362B 0008                  		move.w	8(a3),d3
0001958A D644                       		add.w	d4,d3
0001958C 9640                       		sub.w	d0,d3
0001958E 6700                       		beq.s	loc_18AC0
00019590                            
00019590                            loc_18AB4:
00019590 51CA FFE8                  		dbf	d2,loc_18A9E
00019594                            
00019594 1142 0028                  		move.b	d2,$28(a0)
00019598 6000 FF0C                  		bra.w	loc_189CA
0001959C                            ; ===========================================================================
0001959C                            
0001959C                            loc_18AC0:
0001959C 1142 0028                  		move.b	d2,$28(a0)
000195A0 5428 0025                  		addq.b	#2,$25(a0)
000195A4 117C 0028 003C             		move.b	#$28,$3C(a0)
000195AA 6000 FEFA                  		bra.w	loc_189CA
000195AE                            ; ===========================================================================
000195AE                            
000195AE                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000195AE 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000195B4 6600                       		bne.s	loc_18B36
000195B6 70FF                       		moveq	#-1,d0
000195B8 1028 0028                  		move.b	$28(a0),d0
000195BC 4880                       		ext.w	d0
000195BE 6B00                       		bmi.s	loc_18B40
000195C0 5540                       		subq.w	#2,d0
000195C2 4440                       		neg.w	d0
000195C4 D040                       		add.w	d0,d0
000195C6 43E8 002A                  		lea	$2A(a0),a1
000195CA 3031 0000                  		move.w	(a1,d0.w),d0
000195CE 2440                       		movea.l	d0,a2
000195D0 43F8 D040                  		lea	($FFFFD040).w,a1
000195D4 723E                       		moveq	#$3E,d1
000195D6                            
000195D6                            loc_18AFA:
000195D6 B0A9 003C                  		cmp.l	$3C(a1),d0
000195DA 6700                       		beq.s	loc_18B40
000195DC D2FC 0040                  		adda.w	#$40,a1
000195E0 51C9 FFF4                  		dbf	d1,loc_18AFA
000195E4                            
000195E4 2F08                       		move.l	a0,-(sp)
000195E6 41D2                       		lea	(a2),a0
000195E8 4EB9 0000 E48A             		jsr	SingleObjLoad2
000195EE 205F                       		movea.l	(sp)+,a0
000195F0 6600                       		bne.s	loc_18B40
000195F2 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000195F6 3368 0008 0008             		move.w	8(a0),8(a1)
000195FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019602 0669 0020 000C             		addi.w	#$20,$C(a1)
00019608 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001960E 234A 003C                  		move.l	a2,$3C(a1)
00019612                            
00019612                            loc_18B36:
00019612 5328 003C                  		subq.b	#1,$3C(a0)
00019616 6700                       		beq.s	loc_18B40
00019618 6000 FEC0                  		bra.w	loc_189FE
0001961C                            ; ===========================================================================
0001961C                            
0001961C                            loc_18B40:
0001961C 5528 0025                  		subq.b	#2,$25(a0)
00019620 6000 FE84                  		bra.w	loc_189CA
00019624                            ; ===========================================================================
00019624                            
00019624                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019624 5328 003C                  		subq.b	#1,$3C(a0)
00019628 6B00                       		bmi.s	loc_18B52
0001962A 6000 ED3C                  		bra.w	BossDefeated
0001962E                            ; ===========================================================================
0001962E                            
0001962E                            loc_18B52:
0001962E 5428 0025                  		addq.b	#2,$25(a0)
00019632 4268 0012                  		clr.w	$12(a0)
00019636 08E8 0000 0022             		bset	#0,$22(a0)
0001963C 08A8 0007 0022             		bclr	#7,$22(a0)
00019642 4268 0010                  		clr.w	$10(a0)
00019646 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001964C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019650 6600                       		bne.s	loc_18B7C
00019652 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019658                            
00019658                            loc_18B7C:
00019658 6000 FE80                  		bra.w	loc_189FE
0001965C                            ; ===========================================================================
0001965C                            
0001965C                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001965C 5228 003C                  		addq.b	#1,$3C(a0)
00019660 6700                       		beq.s	loc_18B90
00019662 6A00                       		bpl.s	loc_18B96
00019664 0668 0018 0012             		addi.w	#$18,$12(a0)
0001966A 6000                       		bra.s	loc_18BC2
0001966C                            ; ===========================================================================
0001966C                            
0001966C                            loc_18B90:
0001966C 4268 0012                  		clr.w	$12(a0)
00019670 6000                       		bra.s	loc_18BC2
00019672                            ; ===========================================================================
00019672                            
00019672                            loc_18B96:
00019672 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019678 6500                       		bcs.s	loc_18BAE
0001967A 6700                       		beq.s	loc_18BB4
0001967C 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019682 6500                       		bcs.s	loc_18BC2
00019684 5428 0025                  		addq.b	#2,$25(a0)
00019688 6000                       		bra.s	loc_18BC2
0001968A                            ; ===========================================================================
0001968A                            
0001968A                            loc_18BAE:
0001968A 5168 0012                  		subq.w	#8,$12(a0)
0001968E 6000                       		bra.s	loc_18BC2
00019690                            ; ===========================================================================
00019690                            
00019690                            loc_18BB4:
00019690 4268 0012                  		clr.w	$12(a0)
00019694 303C 0084                  		move.w	#$84,d0
00019698 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SLZ music
0001969E                            
0001969E                            loc_18BC2:
0001969E 6000 FE2A                  		bra.w	loc_189EE
000196A2                            ; ===========================================================================
000196A2                            
000196A2                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000196A2 317C 0400 0010             		move.w	#$400,$10(a0)
000196A8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196AE 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000196B4 6400                       		bcc.s	loc_18BE0
000196B6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000196BA 6000                       		bra.s	loc_18BE8
000196BC                            ; ===========================================================================
000196BC                            
000196BC                            loc_18BE0:
000196BC 4A28 0001                  		tst.b	1(a0)
000196C0 6A00 FCCE                  		bpl.w	Obj7A_Delete
000196C4                            
000196C4                            loc_18BE8:
000196C4 6100 ECE4                  		bsr.w	BossMove
000196C8 6000 FDDC                  		bra.w	loc_189CA
000196CC                            ; ===========================================================================
000196CC                            
000196CC                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000196CC 7000                       		moveq	#0,d0
000196CE 7201                       		moveq	#1,d1
000196D0 2268 0034                  		movea.l	$34(a0),a1
000196D4 1029 0025                  		move.b	$25(a1),d0
000196D8 0C00 0006                  		cmpi.b	#6,d0
000196DC 6B00                       		bmi.s	loc_18C06
000196DE 720A                       		moveq	#$A,d1
000196E0 6000                       		bra.s	loc_18C1A
000196E2                            ; ===========================================================================
000196E2                            
000196E2                            loc_18C06:
000196E2 4A29 0020                  		tst.b	$20(a1)
000196E6 6600                       		bne.s	loc_18C10
000196E8 7205                       		moveq	#5,d1
000196EA 6000                       		bra.s	loc_18C1A
000196EC                            ; ===========================================================================
000196EC                            
000196EC                            loc_18C10:
000196EC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000196F2 6500                       		bcs.s	loc_18C1A
000196F4 7204                       		moveq	#4,d1
000196F6                            
000196F6                            loc_18C1A:
000196F6 1141 001C                  		move.b	d1,$1C(a0)
000196FA 0C00 000A                  		cmpi.b	#$A,d0
000196FE 6600                       		bne.s	loc_18C32
00019700 117C 0006 001C             		move.b	#6,$1C(a0)
00019706 4A28 0001                  		tst.b	1(a0)
0001970A 6A00 FC84                  		bpl.w	Obj7A_Delete
0001970E                            
0001970E                            loc_18C32:
0001970E 6000                       		bra.s	loc_18C6C
00019710                            ; ===========================================================================
00019710                            
00019710                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019710 117C 0008 001C             		move.b	#8,$1C(a0)
00019716 2268 0034                  		movea.l	$34(a0),a1
0001971A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019720 6600                       		bne.s	loc_18C56
00019722 4A28 0001                  		tst.b	1(a0)
00019726 6A00 FC68                  		bpl.w	Obj7A_Delete
0001972A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019730 6000                       		bra.s	loc_18C6C
00019732                            ; ===========================================================================
00019732                            
00019732                            loc_18C56:
00019732 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019738 6E00                       		bgt.s	loc_18C6C
0001973A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019740 6D00                       		blt.s	loc_18C6C
00019742 117C 0007 001C             		move.b	#7,$1C(a0)
00019748                            
00019748                            loc_18C6C:
00019748 43F9 0001 87EC             		lea	(Ani_Eggman).l,a1
0001974E 4EB9 0000 B04C             		jsr	AnimateSprite
00019754                            
00019754                            loc_18C78:
00019754 2268 0034                  		movea.l	$34(a0),a1
00019758 3169 0008 0008             		move.w	8(a1),8(a0)
0001975E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019764 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001976A 7003                       		moveq	#3,d0
0001976C C028 0022                  		and.b	$22(a0),d0
00019770 0228 00FC 0001             		andi.b	#-4,1(a0)
00019776 8128 0001                  		or.b	d0,1(a0)
0001977A 4EF9 0000 DFEE             		jmp	DisplaySprite
00019780                            ; ===========================================================================
00019780                            
00019780                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019780 2268 0034                  		movea.l	$34(a0),a1
00019784 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001978A 6600                       		bne.s	loc_18CB8
0001978C 4A28 0001                  		tst.b	1(a0)
00019790 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019794                            
00019794                            loc_18CB8:
00019794 217C 0001 8918 0004        		move.l	#Map_BossItems,4(a0)
0001979C 317C 246C 0002             		move.w	#$246C,2(a0)
000197A2 117C 0003 001A             		move.b	#3,$1A(a0)
000197A8 60AA                       		bra.s	loc_18C78
000197AA                            ; ===========================================================================
000197AA                            ; ---------------------------------------------------------------------------
000197AA                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000197AA                            ; ---------------------------------------------------------------------------
000197AA                            
000197AA                            Obj7B:					; XREF: Obj_Index
000197AA 7000                       		moveq	#0,d0
000197AC 1028 0024                  		move.b	$24(a0),d0
000197B0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000197B4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000197B8 3028 0030                  		move.w	$30(a0),d0
000197BC 0240 FF80                  		andi.w	#$FF80,d0
000197C0 3238 F700                  		move.w	($FFFFF700).w,d1
000197C4 0441 0080                  		subi.w	#$80,d1
000197C8 0241 FF80                  		andi.w	#$FF80,d1
000197CC 9041                       		sub.w	d1,d0
000197CE 6B00 FBC0                  		bmi.w	Obj7A_Delete
000197D2 0C40 0280                  		cmpi.w	#$280,d0
000197D6 6200 FBB8                  		bhi.w	Obj7A_Delete
000197DA 4EF9 0000 DFEE             		jmp	DisplaySprite
000197E0                            ; ===========================================================================
000197E0 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000197E2 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000197E4 0000                       		dc.w loc_18DC6-Obj7B_Index
000197E6 0000                       		dc.w loc_18EAA-Obj7B_Index
000197E8 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000197EA 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000197EC                            ; ===========================================================================
000197EC                            
000197EC                            Obj7B_Main:				; XREF: Obj7B_Index
000197EC 217C 0001 23B4 0004        		move.l	#Map_obj5Ea,4(a0)
000197F4 317C 0518 0002             		move.w	#$518,2(a0)
000197FA 117C 0001 001A             		move.b	#1,$1A(a0)
00019800 0028 0004 0001             		ori.b	#4,1(a0)
00019806 117C 0004 0018             		move.b	#4,$18(a0)
0001980C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019812 117C 000C 0019             		move.b	#$C,$19(a0)
00019818 2268 003C                  		movea.l	$3C(a0),a1
0001981C 3169 0008 0030             		move.w	8(a1),$30(a0)
00019822 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019828 08E8 0000 0022             		bset	#0,$22(a0)
0001982E 3028 0008                  		move.w	8(a0),d0
00019832 B069 0008                  		cmp.w	8(a1),d0
00019836 6E00                       		bgt.s	loc_18D68
00019838 08A8 0000 0022             		bclr	#0,$22(a0)
0001983E 117C 0002 003A             		move.b	#2,$3A(a0)
00019844                            
00019844                            loc_18D68:
00019844 5428 0024                  		addq.b	#2,$24(a0)
00019848                            
00019848                            Obj7B_Fall:				; XREF: Obj7B_Index
00019848 4EB9 0000 DF56             		jsr	ObjectFall
0001984E 2268 003C                  		movea.l	$3C(a0),a1
00019852 45F9 0000 0000             		lea	(word_19018).l,a2
00019858 7000                       		moveq	#0,d0
0001985A 1029 001A                  		move.b	$1A(a1),d0
0001985E 3228 0008                  		move.w	8(a0),d1
00019862 9268 0030                  		sub.w	$30(a0),d1
00019866 6400                       		bcc.s	loc_18D8E
00019868 5440                       		addq.w	#2,d0
0001986A                            
0001986A                            loc_18D8E:
0001986A D040                       		add.w	d0,d0
0001986C 3228 0034                  		move.w	$34(a0),d1
00019870 D272 0000                  		add.w	(a2,d0.w),d1
00019874 B268 000C                  		cmp.w	$C(a0),d1
00019878 6E00                       		bgt.s	locret_18DC4
0001987A 2268 003C                  		movea.l	$3C(a0),a1
0001987E 7202                       		moveq	#2,d1
00019880 0828 0000 0022             		btst	#0,$22(a0)
00019886 6700                       		beq.s	loc_18DAE
00019888 7200                       		moveq	#0,d1
0001988A                            
0001988A                            loc_18DAE:
0001988A 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019890 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019896 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001989C 6000 0000                  		bra.w	loc_18FA2
000198A0                            ; ===========================================================================
000198A0                            
000198A0                            locret_18DC4:
000198A0 4E75                       		rts	
000198A2                            ; ===========================================================================
000198A2                            
000198A2                            loc_18DC6:				; XREF: Obj7B_Index
000198A2 2268 003C                  		movea.l	$3C(a0),a1
000198A6 7000                       		moveq	#0,d0
000198A8 1028 003A                  		move.b	$3A(a0),d0
000198AC 9029 003A                  		sub.b	$3A(a1),d0
000198B0 6700                       		beq.s	loc_18E2A
000198B2 6400                       		bcc.s	loc_18DDA
000198B4 4400                       		neg.b	d0
000198B6                            
000198B6                            loc_18DDA:
000198B6 323C F7E8                  		move.w	#-$818,d1
000198BA 343C FEEC                  		move.w	#-$114,d2
000198BE 0C00 0001                  		cmpi.b	#1,d0
000198C2 6700                       		beq.s	loc_18E00
000198C4 323C F6A0                  		move.w	#-$960,d1
000198C8 343C FF0C                  		move.w	#-$F4,d2
000198CC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000198D2 6D00                       		blt.s	loc_18E00
000198D4 323C F5E0                  		move.w	#-$A20,d1
000198D8 343C FF80                  		move.w	#-$80,d2
000198DC                            
000198DC                            loc_18E00:
000198DC 3141 0012                  		move.w	d1,$12(a0)
000198E0 3142 0010                  		move.w	d2,$10(a0)
000198E4 3028 0008                  		move.w	8(a0),d0
000198E8 9068 0030                  		sub.w	$30(a0),d0
000198EC 6400                       		bcc.s	loc_18E16
000198EE 4468 0010                  		neg.w	$10(a0)
000198F2                            
000198F2                            loc_18E16:
000198F2 117C 0001 001A             		move.b	#1,$1A(a0)
000198F8 317C 0020 0028             		move.w	#$20,$28(a0)
000198FE 5428 0024                  		addq.b	#2,$24(a0)
00019902 6000 0000                  		bra.w	loc_18EAA
00019906                            ; ===========================================================================
00019906                            
00019906                            loc_18E2A:				; XREF: loc_18DC6
00019906 45F9 0000 0000             		lea	(word_19018).l,a2
0001990C 7000                       		moveq	#0,d0
0001990E 1029 001A                  		move.b	$1A(a1),d0
00019912 343C 0028                  		move.w	#$28,d2
00019916 3228 0008                  		move.w	8(a0),d1
0001991A 9268 0030                  		sub.w	$30(a0),d1
0001991E 6400                       		bcc.s	loc_18E48
00019920 4442                       		neg.w	d2
00019922 5440                       		addq.w	#2,d0
00019924                            
00019924                            loc_18E48:
00019924 D040                       		add.w	d0,d0
00019926 3228 0034                  		move.w	$34(a0),d1
0001992A D272 0000                  		add.w	(a2,d0.w),d1
0001992E 3141 000C                  		move.w	d1,$C(a0)
00019932 D468 0030                  		add.w	$30(a0),d2
00019936 3142 0008                  		move.w	d2,8(a0)
0001993A 4268 000E                  		clr.w	$E(a0)
0001993E 4268 000A                  		clr.w	$A(a0)
00019942 5368 0028                  		subq.w	#1,$28(a0)
00019946 6600                       		bne.s	loc_18E7A
00019948 317C 0020 0028             		move.w	#$20,$28(a0)
0001994E 117C 0008 0024             		move.b	#8,$24(a0)
00019954 4E75                       		rts	
00019956                            ; ===========================================================================
00019956                            
00019956                            loc_18E7A:
00019956 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001995C 6600                       		bne.s	loc_18E88
0001995E 117C 0005 001F             		move.b	#5,$1F(a0)
00019964                            
00019964                            loc_18E88:
00019964 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001996A 6600                       		bne.s	loc_18E96
0001996C 117C 0002 001F             		move.b	#2,$1F(a0)
00019972                            
00019972                            loc_18E96:
00019972 5328 001E                  		subq.b	#1,$1E(a0)
00019976 6E00                       		bgt.s	locret_18EA8
00019978 0868 0000 001A             		bchg	#0,$1A(a0)
0001997E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019984                            
00019984                            locret_18EA8:
00019984 4E75                       		rts	
00019986                            ; ===========================================================================
00019986                            
00019986                            loc_18EAA:				; XREF: Obj7B_Index
00019986 43F8 D040                  		lea	($FFFFD040).w,a1
0001998A 707A                       		moveq	#$7A,d0
0001998C 7240                       		moveq	#$40,d1
0001998E 743E                       		moveq	#$3E,d2
00019990                            
00019990                            loc_18EB4:
00019990 B011                       		cmp.b	(a1),d0
00019992 6700                       		beq.s	loc_18EC0
00019994 D2C1                       		adda.w	d1,a1
00019996 51CA FFF8                  		dbf	d2,loc_18EB4
0001999A                            
0001999A 6000                       		bra.s	loc_18F38
0001999C                            ; ===========================================================================
0001999C                            
0001999C                            loc_18EC0:
0001999C 3029 0008                  		move.w	8(a1),d0
000199A0 3229 000C                  		move.w	$C(a1),d1
000199A4 3428 0008                  		move.w	8(a0),d2
000199A8 3628 000C                  		move.w	$C(a0),d3
000199AC 45FA 0000                  		lea	byte_19022(pc),a2
000199B0 47FA 0000                  		lea	byte_19026(pc),a3
000199B4 181A                       		move.b	(a2)+,d4
000199B6 4884                       		ext.w	d4
000199B8 D044                       		add.w	d4,d0
000199BA 181B                       		move.b	(a3)+,d4
000199BC 4884                       		ext.w	d4
000199BE D444                       		add.w	d4,d2
000199C0 B440                       		cmp.w	d0,d2
000199C2 6500                       		bcs.s	loc_18F38
000199C4 181A                       		move.b	(a2)+,d4
000199C6 4884                       		ext.w	d4
000199C8 D044                       		add.w	d4,d0
000199CA 181B                       		move.b	(a3)+,d4
000199CC 4884                       		ext.w	d4
000199CE D444                       		add.w	d4,d2
000199D0 B042                       		cmp.w	d2,d0
000199D2 6500                       		bcs.s	loc_18F38
000199D4 181A                       		move.b	(a2)+,d4
000199D6 4884                       		ext.w	d4
000199D8 D244                       		add.w	d4,d1
000199DA 181B                       		move.b	(a3)+,d4
000199DC 4884                       		ext.w	d4
000199DE D644                       		add.w	d4,d3
000199E0 B641                       		cmp.w	d1,d3
000199E2 6500                       		bcs.s	loc_18F38
000199E4 181A                       		move.b	(a2)+,d4
000199E6 4884                       		ext.w	d4
000199E8 D244                       		add.w	d4,d1
000199EA 181B                       		move.b	(a3)+,d4
000199EC 4884                       		ext.w	d4
000199EE D644                       		add.w	d4,d3
000199F0 B243                       		cmp.w	d3,d1
000199F2 6500                       		bcs.s	loc_18F38
000199F4 5428 0024                  		addq.b	#2,$24(a0)
000199F8 4268 0028                  		clr.w	$28(a0)
000199FC 4229 0020                  		clr.b	$20(a1)
00019A00 5329 0021                  		subq.b	#1,$21(a1)
00019A04 6600                       		bne.s	loc_18F38
00019A06 08E9 0007 0022             		bset	#7,$22(a1)
00019A0C 4268 0010                  		clr.w	$10(a0)
00019A10 4268 0012                  		clr.w	$12(a0)
00019A14                            
00019A14                            loc_18F38:
00019A14 4A68 0012                  		tst.w	$12(a0)
00019A18 6A00                       		bpl.s	loc_18F5C
00019A1A 4EB9 0000 DF56             		jsr	ObjectFall
00019A20 3028 0034                  		move.w	$34(a0),d0
00019A24 0440 002F                  		subi.w	#$2F,d0
00019A28 B068 000C                  		cmp.w	$C(a0),d0
00019A2C 6E00                       		bgt.s	loc_18F58
00019A2E 4EB9 0000 DF56             		jsr	ObjectFall
00019A34                            
00019A34                            loc_18F58:
00019A34 6000 FF20                  		bra.w	loc_18E7A
00019A38                            ; ===========================================================================
00019A38                            
00019A38                            loc_18F5C:
00019A38 4EB9 0000 DF56             		jsr	ObjectFall
00019A3E 2268 003C                  		movea.l	$3C(a0),a1
00019A42 45F9 0000 0000             		lea	(word_19018).l,a2
00019A48 7000                       		moveq	#0,d0
00019A4A 1029 001A                  		move.b	$1A(a1),d0
00019A4E 3228 0008                  		move.w	8(a0),d1
00019A52 9268 0030                  		sub.w	$30(a0),d1
00019A56 6400                       		bcc.s	loc_18F7E
00019A58 5440                       		addq.w	#2,d0
00019A5A                            
00019A5A                            loc_18F7E:
00019A5A D040                       		add.w	d0,d0
00019A5C 3228 0034                  		move.w	$34(a0),d1
00019A60 D272 0000                  		add.w	(a2,d0.w),d1
00019A64 B268 000C                  		cmp.w	$C(a0),d1
00019A68 6ECA                       		bgt.s	loc_18F58
00019A6A 2268 003C                  		movea.l	$3C(a0),a1
00019A6E 7202                       		moveq	#2,d1
00019A70 4A68 0010                  		tst.w	$10(a0)
00019A74 6B00                       		bmi.s	loc_18F9C
00019A76 7200                       		moveq	#0,d1
00019A78                            
00019A78                            loc_18F9C:
00019A78 317C 0000 0028             		move.w	#0,$28(a0)
00019A7E                            
00019A7E                            loc_18FA2:
00019A7E 1341 003A                  		move.b	d1,$3A(a1)
00019A82 1141 003A                  		move.b	d1,$3A(a0)
00019A86 B229 001A                  		cmp.b	$1A(a1),d1
00019A8A 6700                       		beq.s	loc_19008
00019A8C 08A9 0003 0022             		bclr	#3,$22(a1)
00019A92 6700                       		beq.s	loc_19008
00019A94 4229 0025                  		clr.b	$25(a1)
00019A98 137C 0002 0024             		move.b	#2,$24(a1)
00019A9E 45F8 D000                  		lea	($FFFFD000).w,a2
00019AA2 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019AA8 446A 0012                  		neg.w	$12(a2)
00019AAC 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019AB2 6600                       		bne.s	loc_18FDC
00019AB4 E0EA 0012                  		asr	$12(a2)
00019AB8                            
00019AB8                            loc_18FDC:
00019AB8 08EA 0001 0022             		bset	#1,$22(a2)
00019ABE 08AA 0003 0022             		bclr	#3,$22(a2)
00019AC4 422A 003C                  		clr.b	$3C(a2)
00019AC8 2F08                       		move.l	a0,-(sp)
00019ACA 41D2                       		lea	(a2),a0
00019ACC 4EBA A36C                  		jsr	Obj01_ChkRoll
00019AD0 205F                       		movea.l	(sp)+,a0
00019AD2 157C 0002 0024             		move.b	#2,$24(a2)
00019AD8 303C 00CC                  		move.w	#$CC,d0
00019ADC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019AE2                            
00019AE2                            loc_19008:
00019AE2 4268 0010                  		clr.w	$10(a0)
00019AE6 4268 0012                  		clr.w	$12(a0)
00019AEA 5428 0024                  		addq.b	#2,$24(a0)
00019AEE 6000 FE66                  		bra.w	loc_18E7A
00019AF2                            ; ===========================================================================
00019AF2 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019AFC                            		even
00019AFC E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019B00                            		even
00019B00 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019B04                            		even
00019B04                            ; ===========================================================================
00019B04                            
00019B04                            Obj7B_Explode:				; XREF: Obj7B_Index
00019B04 10BC 003F                  		move.b	#$3F,(a0)
00019B08 4228 0024                  		clr.b	$24(a0)
00019B0C 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019B12 6700                       		beq.s	Obj7B_MakeFrag
00019B14 4E75                       		rts	
00019B16                            ; ===========================================================================
00019B16                            
00019B16                            Obj7B_MakeFrag:
00019B16 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019B1C 7203                       		moveq	#3,d1
00019B1E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019B22                            
00019B22                            Obj7B_Loop:
00019B22 4EB9 0000 E474             		jsr	SingleObjLoad
00019B28 6600                       		bne.s	loc_1909A
00019B2A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019B2E 137C 000A 0024             		move.b	#$A,$24(a1)
00019B34 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019B3C 137C 0003 0018             		move.b	#3,$18(a1)
00019B42 337C 0518 0002             		move.w	#$518,2(a1)
00019B48 3368 0008 0008             		move.w	8(a0),8(a1)
00019B4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B54 335A 0010                  		move.w	(a2)+,$10(a1)
00019B58 335A 0012                  		move.w	(a2)+,$12(a1)
00019B5C 137C 0098 0020             		move.b	#$98,$20(a1)
00019B62 0029 0004 0001             		ori.b	#4,1(a1)
00019B68 08E9 0007 0001             		bset	#7,1(a1)
00019B6E 137C 000C 0019             		move.b	#$C,$19(a1)
00019B74                            
00019B74                            loc_1909A:
00019B74 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019B78                            
00019B78 4E75                       		rts	
00019B7A                            ; ===========================================================================
00019B7A FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019B7E FF60 FDC0                  		dc.w $FF60, $FDC0
00019B82 0100 FCC0                  		dc.w $100, $FCC0
00019B86 00A0 FDC0                  		dc.w $A0, $FDC0
00019B8A                            ; ===========================================================================
00019B8A                            
00019B8A                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019B8A 4EB9 0000 DFC8             		jsr	SpeedToPos
00019B90 3168 0008 0030             		move.w	8(a0),$30(a0)
00019B96 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019B9C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BA2 7004                       		moveq	#4,d0
00019BA4 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019BA8 E448                       		lsr.w	#2,d0
00019BAA 1140 001A                  		move.b	d0,$1A(a0)
00019BAE 4A28 0001                  		tst.b	1(a0)
00019BB2 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019BB6 4E75                       		rts	
00019BB8                            ; ===========================================================================
00019BB8                            ; ---------------------------------------------------------------------------
00019BB8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BB8                            ; ---------------------------------------------------------------------------
00019BB8                            Map_obj7B:
00019BB8                            	include "_maps\obj7B.asm"
00019BB8                            ; ---------------------------------------------------------------------------
00019BB8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BB8                            ; ---------------------------------------------------------------------------
00019BB8 0000                       		dc.w byte_190E2-Map_obj7B
00019BBA 0000                       		dc.w byte_190E8-Map_obj7B
00019BBC 01                         byte_190E2:	dc.b 1
00019BBD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019BC2 01                         byte_190E8:	dc.b 1
00019BC3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019BC8                            		even
00019BC8                            		even
00019BC8                            
00019BC8                            ; ===========================================================================
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8                            ; Object 75 - Eggman (SYZ)
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8                            
00019BC8                            Obj75:					; XREF: Obj_Index
00019BC8 7000                       		moveq	#0,d0
00019BCA 1028 0024                  		move.b	$24(a0),d0
00019BCE 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019BD2 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019BD6                            ; ===========================================================================
00019BD6 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019BD8 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019BDA 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019BDC 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019BDE 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019BE0                            
00019BE0 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019BE3 0401 05                    		dc.b 4,	1, 5
00019BE6 0607 05                    		dc.b 6,	7, 5
00019BE9 0800 05                    		dc.b 8,	0, 5
00019BEC                            ; ===========================================================================
00019BEC                            
00019BEC                            Obj75_Main:				; XREF: Obj75_Index
00019BEC 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019BF2 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019BF8 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BFE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C04 117C 000F 0020             		move.b	#$F,$20(a0)
00019C0A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C10 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019C14 2248                       		movea.l	a0,a1
00019C16 7203                       		moveq	#3,d1
00019C18 6000                       		bra.s	Obj75_LoadBoss
00019C1A                            ; ===========================================================================
00019C1A                            
00019C1A                            Obj75_Loop:
00019C1A 4EB9 0000 E48A             		jsr	SingleObjLoad2
00019C20 6600                       		bne.s	Obj75_ShipMain
00019C22 12BC 0075                  		move.b	#$75,(a1)
00019C26 3368 0008 0008             		move.w	8(a0),8(a1)
00019C2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C32                            
00019C32                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019C32 08A8 0000 0022             		bclr	#0,$22(a0)
00019C38 4229 0025                  		clr.b	$25(a1)
00019C3C 135A 0024                  		move.b	(a2)+,$24(a1)
00019C40 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C44 135A 0018                  		move.b	(a2)+,$18(a1)
00019C48 237C 0001 8850 0004        		move.l	#Map_Eggman,4(a1)
00019C50 337C 0400 0002             		move.w	#$400,2(a1)
00019C56 137C 0004 0001             		move.b	#4,1(a1)
00019C5C 137C 0020 0019             		move.b	#$20,$19(a1)
00019C62 2348 0034                  		move.l	a0,$34(a1)
00019C66 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019C6A                            
00019C6A                            Obj75_ShipMain:				; XREF: Obj75_Index
00019C6A 7000                       		moveq	#0,d0
00019C6C 1028 0025                  		move.b	$25(a0),d0
00019C70 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019C74 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019C78 43F9 0001 87EC             		lea	(Ani_Eggman).l,a1
00019C7E 4EB9 0000 B04C             		jsr	AnimateSprite
00019C84 7003                       		moveq	#3,d0
00019C86 C028 0022                  		and.b	$22(a0),d0
00019C8A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C90 8128 0001                  		or.b	d0,1(a0)
00019C94 4EF9 0000 DFEE             		jmp	DisplaySprite
00019C9A                            ; ===========================================================================
00019C9A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019C9E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019CA2 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019CA6                            ; ===========================================================================
00019CA6                            
00019CA6                            loc_191CC:				; XREF: Obj75_ShipIndex
00019CA6 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CAC 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019CB2 6400                       		bcc.s	loc_191DE
00019CB4 5428 0025                  		addq.b	#2,$25(a0)
00019CB8                            
00019CB8                            loc_191DE:
00019CB8 1028 003F                  		move.b	$3F(a0),d0
00019CBC 5428 003F                  		addq.b	#2,$3F(a0)
00019CC0 4EB9 0000 2D6C             		jsr	(CalcSine).l
00019CC6 E440                       		asr.w	#2,d0
00019CC8 3140 0012                  		move.w	d0,$12(a0)
00019CCC                            
00019CCC                            loc_191F2:
00019CCC 6100 E6DC                  		bsr.w	BossMove
00019CD0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CD6 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CDC                            
00019CDC                            loc_19202:
00019CDC 3028 0008                  		move.w	8(a0),d0
00019CE0 0440 2C00                  		subi.w	#$2C00,d0
00019CE4 EA48                       		lsr.w	#5,d0
00019CE6 1140 0034                  		move.b	d0,$34(a0)
00019CEA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019CF0 6400                       		bcc.s	locret_19256
00019CF2 4A28 0022                  		tst.b	$22(a0)
00019CF6 6B00                       		bmi.s	loc_19258
00019CF8 4A28 0020                  		tst.b	$20(a0)
00019CFC 6600                       		bne.s	locret_19256
00019CFE 4A28 003E                  		tst.b	$3E(a0)
00019D02 6600                       		bne.s	loc_1923A
00019D04 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D0A 303C 00AC                  		move.w	#$AC,d0
00019D0E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D14                            
00019D14                            loc_1923A:
00019D14 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D18 7000                       		moveq	#0,d0
00019D1A 4A51                       		tst.w	(a1)
00019D1C 6600                       		bne.s	loc_19248
00019D1E 303C 0EEE                  		move.w	#$EEE,d0
00019D22                            
00019D22                            loc_19248:
00019D22 3280                       		move.w	d0,(a1)
00019D24 5328 003E                  		subq.b	#1,$3E(a0)
00019D28 6600                       		bne.s	locret_19256
00019D2A 117C 000F 0020             		move.b	#$F,$20(a0)
00019D30                            
00019D30                            locret_19256:
00019D30 4E75                       		rts	
00019D32                            ; ===========================================================================
00019D32                            
00019D32                            loc_19258:				; XREF: loc_19202
00019D32 7064                       		moveq	#100,d0
00019D34 6100 0000                  		bsr.w	AddPoints
00019D38 117C 0006 0025             		move.b	#6,$25(a0)
00019D3E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D44 4268 0010                  		clr.w	$10(a0)
00019D48 4E75                       		rts	
00019D4A                            ; ===========================================================================
00019D4A                            
00019D4A                            loc_19270:				; XREF: Obj75_ShipIndex
00019D4A 3028 0030                  		move.w	$30(a0),d0
00019D4E 317C 0140 0010             		move.w	#$140,$10(a0)
00019D54 0828 0000 0022             		btst	#0,$22(a0)
00019D5A 6600                       		bne.s	loc_1928E
00019D5C 4468 0010                  		neg.w	$10(a0)
00019D60 0C40 2C08                  		cmpi.w	#$2C08,d0
00019D64 6E00                       		bgt.s	loc_1929E
00019D66 6000                       		bra.s	loc_19294
00019D68                            ; ===========================================================================
00019D68                            
00019D68                            loc_1928E:
00019D68 0C40 2D38                  		cmpi.w	#$2D38,d0
00019D6C 6D00                       		blt.s	loc_1929E
00019D6E                            
00019D6E                            loc_19294:
00019D6E 0868 0000 0022             		bchg	#0,$22(a0)
00019D74 4228 003D                  		clr.b	$3D(a0)
00019D78                            
00019D78                            loc_1929E:
00019D78 0440 2C10                  		subi.w	#$2C10,d0
00019D7C 0240 001F                  		andi.w	#$1F,d0
00019D80 0440 001F                  		subi.w	#$1F,d0
00019D84 6A00                       		bpl.s	loc_192AE
00019D86 4440                       		neg.w	d0
00019D88                            
00019D88                            loc_192AE:
00019D88 5340                       		subq.w	#1,d0
00019D8A 6E00                       		bgt.s	loc_192E8
00019D8C 4A28 003D                  		tst.b	$3D(a0)
00019D90 6600                       		bne.s	loc_192E8
00019D92 3238 D008                  		move.w	($FFFFD008).w,d1
00019D96 0441 2C00                  		subi.w	#$2C00,d1
00019D9A EA41                       		asr.w	#5,d1
00019D9C B228 0034                  		cmp.b	$34(a0),d1
00019DA0 6600                       		bne.s	loc_192E8
00019DA2 7000                       		moveq	#0,d0
00019DA4 1028 0034                  		move.b	$34(a0),d0
00019DA8 EB40                       		asl.w	#5,d0
00019DAA 0640 2C10                  		addi.w	#$2C10,d0
00019DAE 3140 0030                  		move.w	d0,$30(a0)
00019DB2 6100 0000                  		bsr.w	Obj75_FindBlocks
00019DB6 5428 0025                  		addq.b	#2,$25(a0)
00019DBA 4268 0028                  		clr.w	$28(a0)
00019DBE 4268 0010                  		clr.w	$10(a0)
00019DC2                            
00019DC2                            loc_192E8:
00019DC2 6000 FEF4                  		bra.w	loc_191DE
00019DC6                            ; ===========================================================================
00019DC6                            
00019DC6                            loc_192EC:				; XREF: Obj75_ShipIndex
00019DC6 7000                       		moveq	#0,d0
00019DC8 1028 0028                  		move.b	$28(a0),d0
00019DCC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019DD0 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019DD4                            ; ===========================================================================
00019DD4 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019DD6 0000                       		dc.w loc_19348-off_192FA
00019DD8 0000                       		dc.w loc_1938E-off_192FA
00019DDA 0000                       		dc.w loc_193D0-off_192FA
00019DDC                            ; ===========================================================================
00019DDC                            
00019DDC                            loc_19302:				; XREF: off_192FA
00019DDC 317C 0180 0012             		move.w	#$180,$12(a0)
00019DE2 3028 0038                  		move.w	$38(a0),d0
00019DE6 0C40 0556                  		cmpi.w	#$556,d0
00019DEA 6500                       		bcs.s	loc_19344
00019DEC 317C 0556 0038             		move.w	#$556,$38(a0)
00019DF2 4268 003C                  		clr.w	$3C(a0)
00019DF6 70FF                       		moveq	#-1,d0
00019DF8 3028 0036                  		move.w	$36(a0),d0
00019DFC 6700                       		beq.s	loc_1933C
00019DFE 2240                       		movea.l	d0,a1
00019E00 137C 00FF 0029             		move.b	#-1,$29(a1)
00019E06 117C 00FF 0029             		move.b	#-1,$29(a0)
00019E0C 2348 0034                  		move.l	a0,$34(a1)
00019E10 317C 0032 003C             		move.w	#$32,$3C(a0)
00019E16                            
00019E16                            loc_1933C:
00019E16 4268 0012                  		clr.w	$12(a0)
00019E1A 5428 0028                  		addq.b	#2,$28(a0)
00019E1E                            
00019E1E                            loc_19344:
00019E1E 6000 FEAC                  		bra.w	loc_191F2
00019E22                            ; ===========================================================================
00019E22                            
00019E22                            loc_19348:				; XREF: off_192FA
00019E22 5368 003C                  		subq.w	#1,$3C(a0)
00019E26 6A00                       		bpl.s	loc_19366
00019E28 5428 0028                  		addq.b	#2,$28(a0)
00019E2C 317C F800 0012             		move.w	#-$800,$12(a0)
00019E32 4A68 0036                  		tst.w	$36(a0)
00019E36 6600                       		bne.s	loc_19362
00019E38 E0E8 0012                  		asr	$12(a0)
00019E3C                            
00019E3C                            loc_19362:
00019E3C 7000                       		moveq	#0,d0
00019E3E 6000                       		bra.s	loc_1937C
00019E40                            ; ===========================================================================
00019E40                            
00019E40                            loc_19366:
00019E40 7000                       		moveq	#0,d0
00019E42 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019E48 6E00                       		bgt.s	loc_1937C
00019E4A 7002                       		moveq	#2,d0
00019E4C 0828 0001 003D             		btst	#1,$3D(a0)
00019E52 6700                       		beq.s	loc_1937C
00019E54 4440                       		neg.w	d0
00019E56                            
00019E56                            loc_1937C:
00019E56 D068 0038                  		add.w	$38(a0),d0
00019E5A 3140 000C                  		move.w	d0,$C(a0)
00019E5E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019E64 6000 FE76                  		bra.w	loc_19202
00019E68                            ; ===========================================================================
00019E68                            
00019E68                            loc_1938E:				; XREF: off_192FA
00019E68 303C 04DA                  		move.w	#$4DA,d0
00019E6C 4A68 0036                  		tst.w	$36(a0)
00019E70 6700                       		beq.s	loc_1939C
00019E72 0440 0018                  		subi.w	#$18,d0
00019E76                            
00019E76                            loc_1939C:
00019E76 B068 0038                  		cmp.w	$38(a0),d0
00019E7A 6D00                       		blt.s	loc_193BE
00019E7C 317C 0008 003C             		move.w	#8,$3C(a0)
00019E82 4A68 0036                  		tst.w	$36(a0)
00019E86 6700                       		beq.s	loc_193B4
00019E88 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019E8E                            
00019E8E                            loc_193B4:
00019E8E 5428 0028                  		addq.b	#2,$28(a0)
00019E92 4268 0012                  		clr.w	$12(a0)
00019E96 6000                       		bra.s	loc_193CC
00019E98                            ; ===========================================================================
00019E98                            
00019E98                            loc_193BE:
00019E98 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019E9E 6C00                       		bge.s	loc_193CC
00019EA0 0668 000C 0012             		addi.w	#$C,$12(a0)
00019EA6                            
00019EA6                            loc_193CC:
00019EA6 6000 FE24                  		bra.w	loc_191F2
00019EAA                            ; ===========================================================================
00019EAA                            
00019EAA                            loc_193D0:				; XREF: off_192FA
00019EAA 5368 003C                  		subq.w	#1,$3C(a0)
00019EAE 6E00                       		bgt.s	loc_19406
00019EB0 6B00                       		bmi.s	loc_193EE
00019EB2 70FF                       		moveq	#-1,d0
00019EB4 3028 0036                  		move.w	$36(a0),d0
00019EB8 6700                       		beq.s	loc_193E8
00019EBA 2240                       		movea.l	d0,a1
00019EBC 137C 000A 0029             		move.b	#$A,$29(a1)
00019EC2                            
00019EC2                            loc_193E8:
00019EC2 4268 0036                  		clr.w	$36(a0)
00019EC6 6000                       		bra.s	loc_19406
00019EC8                            ; ===========================================================================
00019EC8                            
00019EC8                            loc_193EE:
00019EC8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019ECE 6600                       		bne.s	loc_19406
00019ED0 4228 0029                  		clr.b	$29(a0)
00019ED4 5528 0025                  		subq.b	#2,$25(a0)
00019ED8 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019EDE 6000                       		bra.s	loc_19446
00019EE0                            ; ===========================================================================
00019EE0                            
00019EE0                            loc_19406:
00019EE0 7001                       		moveq	#1,d0
00019EE2 4A68 0036                  		tst.w	$36(a0)
00019EE6 6700                       		beq.s	loc_19410
00019EE8 7002                       		moveq	#2,d0
00019EEA                            
00019EEA                            loc_19410:
00019EEA 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019EF0 6700                       		beq.s	loc_19424
00019EF2 6D00                       		blt.s	loc_1941C
00019EF4 4440                       		neg.w	d0
00019EF6                            
00019EF6                            loc_1941C:
00019EF6 4A68 0036                  		tst.w	$36(a0)
00019EFA D168 0038                  		add.w	d0,$38(a0)
00019EFE                            
00019EFE                            loc_19424:
00019EFE 7000                       		moveq	#0,d0
00019F00 4A68 0036                  		tst.w	$36(a0)
00019F04 6700                       		beq.s	loc_19438
00019F06 7002                       		moveq	#2,d0
00019F08 0828 0000 003D             		btst	#0,$3D(a0)
00019F0E 6700                       		beq.s	loc_19438
00019F10 4440                       		neg.w	d0
00019F12                            
00019F12                            loc_19438:
00019F12 D068 0038                  		add.w	$38(a0),d0
00019F16 3140 000C                  		move.w	d0,$C(a0)
00019F1A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F20                            
00019F20                            loc_19446:
00019F20 6000 FDBA                  		bra.w	loc_19202
00019F24                            
00019F24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F24                            
00019F24                            
00019F24                            Obj75_FindBlocks:			; XREF: loc_192AE
00019F24 4268 0036                  		clr.w	$36(a0)
00019F28 43F8 D040                  		lea	($FFFFD040).w,a1
00019F2C 703E                       		moveq	#$3E,d0
00019F2E 7276                       		moveq	#$76,d1
00019F30 1428 0034                  		move.b	$34(a0),d2
00019F34                            
00019F34                            Obj75_FindLoop:
00019F34 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019F36 6600                       		bne.s	loc_1946A	; if not, branch
00019F38 B429 0028                  		cmp.b	$28(a1),d2
00019F3C 6600                       		bne.s	loc_1946A
00019F3E 3149 0036                  		move.w	a1,$36(a0)
00019F42 6000                       		bra.s	locret_19472
00019F44                            ; ===========================================================================
00019F44                            
00019F44                            loc_1946A:
00019F44 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019F48 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019F4C                            
00019F4C                            locret_19472:
00019F4C 4E75                       		rts	
00019F4E                            ; End of function Obj75_FindBlocks
00019F4E                            
00019F4E                            ; ===========================================================================
00019F4E                            
00019F4E                            loc_19474:				; XREF: Obj75_ShipIndex
00019F4E 5368 003C                  		subq.w	#1,$3C(a0)
00019F52 6B00                       		bmi.s	loc_1947E
00019F54 6000 E412                  		bra.w	BossDefeated
00019F58                            ; ===========================================================================
00019F58                            
00019F58                            loc_1947E:
00019F58 5428 0025                  		addq.b	#2,$25(a0)
00019F5C 4268 0012                  		clr.w	$12(a0)
00019F60 08E8 0000 0022             		bset	#0,$22(a0)
00019F66 08A8 0007 0022             		bclr	#7,$22(a0)
00019F6C 4268 0010                  		clr.w	$10(a0)
00019F70 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019F76 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019F7A 6600                       		bne.s	loc_194A8
00019F7C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019F82                            
00019F82                            loc_194A8:
00019F82 6000 FD58                  		bra.w	loc_19202
00019F86                            ; ===========================================================================
00019F86                            
00019F86                            loc_194AC:				; XREF: Obj75_ShipIndex
00019F86 5268 003C                  		addq.w	#1,$3C(a0)
00019F8A 6700                       		beq.s	loc_194BC
00019F8C 6A00                       		bpl.s	loc_194C2
00019F8E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019F94 6000                       		bra.s	loc_194EE
00019F96                            ; ===========================================================================
00019F96                            
00019F96                            loc_194BC:
00019F96 4268 0012                  		clr.w	$12(a0)
00019F9A 6000                       		bra.s	loc_194EE
00019F9C                            ; ===========================================================================
00019F9C                            
00019F9C                            loc_194C2:
00019F9C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019FA2 6500                       		bcs.s	loc_194DA
00019FA4 6700                       		beq.s	loc_194E0
00019FA6 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019FAC 6500                       		bcs.s	loc_194EE
00019FAE 5428 0025                  		addq.b	#2,$25(a0)
00019FB2 6000                       		bra.s	loc_194EE
00019FB4                            ; ===========================================================================
00019FB4                            
00019FB4                            loc_194DA:
00019FB4 5168 0012                  		subq.w	#8,$12(a0)
00019FB8 6000                       		bra.s	loc_194EE
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            loc_194E0:
00019FBA 4268 0012                  		clr.w	$12(a0)
00019FBE 303C 0085                  		move.w	#$85,d0
00019FC2 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SYZ music
00019FC8                            
00019FC8                            loc_194EE:
00019FC8 6000 FD02                  		bra.w	loc_191F2
00019FCC                            ; ===========================================================================
00019FCC                            
00019FCC                            loc_194F2:				; XREF: Obj75_ShipIndex
00019FCC 317C 0400 0010             		move.w	#$400,$10(a0)
00019FD2 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019FD8 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019FDE 6400                       		bcc.s	loc_1950C
00019FE0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019FE4 6000                       		bra.s	loc_19512
00019FE6                            ; ===========================================================================
00019FE6                            
00019FE6                            loc_1950C:
00019FE6 4A28 0001                  		tst.b	1(a0)
00019FEA 6A00                       		bpl.s	Obj75_ShipDelete
00019FEC                            
00019FEC                            loc_19512:
00019FEC 6100 E3BC                  		bsr.w	BossMove
00019FF0 6000 FCC6                  		bra.w	loc_191DE
00019FF4                            ; ===========================================================================
00019FF4                            
00019FF4                            Obj75_ShipDelete:
00019FF4 4EF9 0000 E02A             		jmp	DeleteObject
00019FFA                            ; ===========================================================================
00019FFA                            
00019FFA                            Obj75_FaceMain:				; XREF: Obj75_Index
00019FFA 7201                       		moveq	#1,d1
00019FFC 2268 0034                  		movea.l	$34(a0),a1
0001A000 7000                       		moveq	#0,d0
0001A002 1029 0025                  		move.b	$25(a1),d0
0001A006 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A00A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A00E 1141 001C                  		move.b	d1,$1C(a0)
0001A012 1010                       		move.b	(a0),d0
0001A014 B011                       		cmp.b	(a1),d0
0001A016 6600                       		bne.s	Obj75_FaceDelete
0001A018 6000                       		bra.s	loc_195BE
0001A01A                            ; ===========================================================================
0001A01A                            
0001A01A                            Obj75_FaceDelete:
0001A01A 4EF9 0000 E02A             		jmp	DeleteObject
0001A020                            ; ===========================================================================
0001A020 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A024 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A028 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A02C                            ; ===========================================================================
0001A02C                            
0001A02C                            loc_19552:				; XREF: off_19546
0001A02C 720A                       		moveq	#$A,d1
0001A02E 4E75                       		rts	
0001A030                            ; ===========================================================================
0001A030                            
0001A030                            loc_19556:				; XREF: off_19546
0001A030 7206                       		moveq	#6,d1
0001A032 4E75                       		rts	
0001A034                            ; ===========================================================================
0001A034                            
0001A034                            loc_1955A:				; XREF: off_19546
0001A034 7000                       		moveq	#0,d0
0001A036 1029 0028                  		move.b	$28(a1),d0
0001A03A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A03E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A042                            ; ===========================================================================
0001A042 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A046 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A04A                            ; ===========================================================================
0001A04A                            
0001A04A                            loc_19570:				; XREF: off_19568
0001A04A 6000                       		bra.s	loc_19574
0001A04C                            ; ===========================================================================
0001A04C                            
0001A04C                            loc_19572:				; XREF: off_19568
0001A04C 7206                       		moveq	#6,d1
0001A04E                            
0001A04E                            loc_19574:				; XREF: off_19546
0001A04E 4A29 0020                  		tst.b	$20(a1)
0001A052 6600                       		bne.s	loc_1957E
0001A054 7205                       		moveq	#5,d1
0001A056 4E75                       		rts	
0001A058                            ; ===========================================================================
0001A058                            
0001A058                            loc_1957E:
0001A058 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A05E 6500                       		bcs.s	locret_19588
0001A060 7204                       		moveq	#4,d1
0001A062                            
0001A062                            locret_19588:
0001A062 4E75                       		rts	
0001A064                            ; ===========================================================================
0001A064                            
0001A064                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A064 117C 0007 001C             		move.b	#7,$1C(a0)
0001A06A 2268 0034                  		movea.l	$34(a0),a1
0001A06E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A074 6600                       		bne.s	loc_195AA
0001A076 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A07C 4A28 0001                  		tst.b	1(a0)
0001A080 6A00                       		bpl.s	Obj75_FlameDelete
0001A082 6000                       		bra.s	loc_195B6
0001A084                            ; ===========================================================================
0001A084                            
0001A084                            loc_195AA:
0001A084 4A69 0010                  		tst.w	$10(a1)
0001A088 6700                       		beq.s	loc_195B6
0001A08A 117C 0008 001C             		move.b	#8,$1C(a0)
0001A090                            
0001A090                            loc_195B6:
0001A090 6000                       		bra.s	loc_195BE
0001A092                            ; ===========================================================================
0001A092                            
0001A092                            Obj75_FlameDelete:
0001A092 4EF9 0000 E02A             		jmp	DeleteObject
0001A098                            ; ===========================================================================
0001A098                            
0001A098                            loc_195BE:
0001A098 43F9 0001 87EC             		lea	(Ani_Eggman).l,a1
0001A09E 4EB9 0000 B04C             		jsr	AnimateSprite
0001A0A4 2268 0034                  		movea.l	$34(a0),a1
0001A0A8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0AE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A0B4                            
0001A0B4                            loc_195DA:
0001A0B4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A0BA 7003                       		moveq	#3,d0
0001A0BC C028 0022                  		and.b	$22(a0),d0
0001A0C0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A0C6 8128 0001                  		or.b	d0,1(a0)
0001A0CA 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A0D0                            ; ===========================================================================
0001A0D0                            
0001A0D0                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A0D0 217C 0001 8918 0004        		move.l	#Map_BossItems,4(a0)
0001A0D8 317C 246C 0002             		move.w	#$246C,2(a0)
0001A0DE 117C 0005 001A             		move.b	#5,$1A(a0)
0001A0E4 2268 0034                  		movea.l	$34(a0),a1
0001A0E8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A0EE 6600                       		bne.s	loc_1961C
0001A0F0 4A28 0001                  		tst.b	1(a0)
0001A0F4 6A00                       		bpl.s	Obj75_SpikeDelete
0001A0F6                            
0001A0F6                            loc_1961C:
0001A0F6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A102 3028 003C                  		move.w	$3C(a0),d0
0001A106 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A10C 6600                       		bne.s	loc_19652
0001A10E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A114 6700                       		beq.s	loc_1964C
0001A116 4A29 0028                  		tst.b	$28(a1)
0001A11A 6600                       		bne.s	loc_19658
0001A11C 0C40 0094                  		cmpi.w	#$94,d0
0001A120 6C00                       		bge.s	loc_19658
0001A122 5E40                       		addq.w	#7,d0
0001A124 6000                       		bra.s	loc_19658
0001A126                            ; ===========================================================================
0001A126                            
0001A126                            loc_1964C:
0001A126 4A69 003C                  		tst.w	$3C(a1)
0001A12A 6A00                       		bpl.s	loc_19658
0001A12C                            
0001A12C                            loc_19652:
0001A12C 4A40                       		tst.w	d0
0001A12E 6F00                       		ble.s	loc_19658
0001A130 5B40                       		subq.w	#5,d0
0001A132                            
0001A132                            loc_19658:
0001A132 3140 003C                  		move.w	d0,$3C(a0)
0001A136 E440                       		asr.w	#2,d0
0001A138 D168 000C                  		add.w	d0,$C(a0)
0001A13C 117C 0008 0019             		move.b	#8,$19(a0)
0001A142 117C 000C 0016             		move.b	#$C,$16(a0)
0001A148 4228 0020                  		clr.b	$20(a0)
0001A14C 2268 0034                  		movea.l	$34(a0),a1
0001A150 4A29 0020                  		tst.b	$20(a1)
0001A154 6700                       		beq.s	loc_19688
0001A156 4A29 0029                  		tst.b	$29(a1)
0001A15A 6600                       		bne.s	loc_19688
0001A15C 117C 0084 0020             		move.b	#$84,$20(a0)
0001A162                            
0001A162                            loc_19688:
0001A162 6000 FF50                  		bra.w	loc_195DA
0001A166                            ; ===========================================================================
0001A166                            
0001A166                            Obj75_SpikeDelete:
0001A166 4EF9 0000 E02A             		jmp	DeleteObject
0001A16C                            ; ===========================================================================
0001A16C                            ; ---------------------------------------------------------------------------
0001A16C                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A16C                            ; ---------------------------------------------------------------------------
0001A16C                            
0001A16C                            Obj76:					; XREF: Obj_Index
0001A16C 7000                       		moveq	#0,d0
0001A16E 1028 0024                  		move.b	$24(a0),d0
0001A172 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A176 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A17A                            ; ===========================================================================
0001A17A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A17C 0000                       		dc.w Obj76_Action-Obj76_Index
0001A17E 0000                       		dc.w loc_19762-Obj76_Index
0001A180                            ; ===========================================================================
0001A180                            
0001A180                            Obj76_Main:				; XREF: Obj76_Index
0001A180 7800                       		moveq	#0,d4
0001A182 3A3C 2C10                  		move.w	#$2C10,d5
0001A186 7C09                       		moveq	#9,d6
0001A188 43D0                       		lea	(a0),a1
0001A18A 6000                       		bra.s	Obj76_MakeBlock
0001A18C                            ; ===========================================================================
0001A18C                            
0001A18C                            Obj76_Loop:
0001A18C 4EB9 0000 E474             		jsr	SingleObjLoad
0001A192 6600                       		bne.s	Obj76_ExitLoop
0001A194                            
0001A194                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A194 12BC 0076                  		move.b	#$76,(a1)
0001A198 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A1A0 337C 4000 0002             		move.w	#$4000,2(a1)
0001A1A6 137C 0004 0001             		move.b	#4,1(a1)
0001A1AC 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1B2 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1B8 137C 0003 0018             		move.b	#3,$18(a1)
0001A1BE 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A1C2 337C 0582 000C             		move.w	#$582,$C(a1)
0001A1C8 3344 0028                  		move.w	d4,$28(a1)
0001A1CC 0644 0101                  		addi.w	#$101,d4
0001A1D0 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A1D4 5429 0024                  		addq.b	#2,$24(a1)
0001A1D8 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A1DC                            
0001A1DC                            Obj76_ExitLoop:
0001A1DC 4E75                       		rts	
0001A1DE                            ; ===========================================================================
0001A1DE                            
0001A1DE                            Obj76_Action:				; XREF: Obj76_Index
0001A1DE 1028 0029                  		move.b	$29(a0),d0
0001A1E2 B028 0028                  		cmp.b	$28(a0),d0
0001A1E6 6700                       		beq.s	Obj76_Solid
0001A1E8 4A00                       		tst.b	d0
0001A1EA 6B00                       		bmi.s	loc_19718
0001A1EC                            
0001A1EC                            loc_19712:
0001A1EC 6100 0000                  		bsr.w	Obj76_Break
0001A1F0 6000                       		bra.s	Obj76_Display
0001A1F2                            ; ===========================================================================
0001A1F2                            
0001A1F2                            loc_19718:
0001A1F2 2268 0034                  		movea.l	$34(a0),a1
0001A1F6 4A29 0021                  		tst.b	$21(a1)
0001A1FA 67F0                       		beq.s	loc_19712
0001A1FC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A202 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A208 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A20E B2C8                       		cmpa.w	a0,a1
0001A210 6500                       		bcs.s	Obj76_Display
0001A212 3029 0012                  		move.w	$12(a1),d0
0001A216 48C0                       		ext.l	d0
0001A218 E080                       		asr.l	#8,d0
0001A21A D168 000C                  		add.w	d0,$C(a0)
0001A21E 6000                       		bra.s	Obj76_Display
0001A220                            ; ===========================================================================
0001A220                            
0001A220                            Obj76_Solid:				; XREF: Obj76_Action
0001A220 323C 001B                  		move.w	#$1B,d1
0001A224 343C 0010                  		move.w	#$10,d2
0001A228 363C 0011                  		move.w	#$11,d3
0001A22C 3828 0008                  		move.w	8(a0),d4
0001A230 4EB9 0001 03BE             		jsr	SolidObject
0001A236                            
0001A236                            Obj76_Display:				; XREF: Obj76_Action
0001A236 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A23C                            ; ===========================================================================
0001A23C                            
0001A23C                            loc_19762:				; XREF: Obj76_Index
0001A23C 4A28 0001                  		tst.b	1(a0)
0001A240 6A00                       		bpl.s	Obj76_Delete
0001A242 4EB9 0000 DF56             		jsr	ObjectFall
0001A248 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A24E                            ; ===========================================================================
0001A24E                            
0001A24E                            Obj76_Delete:
0001A24E 4EF9 0000 E02A             		jmp	DeleteObject
0001A254                            
0001A254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A254                            
0001A254                            
0001A254                            Obj76_Break:				; XREF: Obj76_Action
0001A254 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A258 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A25C 7801                       		moveq	#1,d4
0001A25E 7203                       		moveq	#3,d1
0001A260 7438                       		moveq	#$38,d2
0001A262 5428 0024                  		addq.b	#2,$24(a0)
0001A266 117C 0008 0019             		move.b	#8,$19(a0)
0001A26C 117C 0008 0016             		move.b	#8,$16(a0)
0001A272 43D0                       		lea	(a0),a1
0001A274 6000                       		bra.s	Obj76_MakeFrag
0001A276                            ; ===========================================================================
0001A276                            
0001A276                            Obj76_LoopFrag:
0001A276 4EB9 0000 E48A             		jsr	SingleObjLoad2
0001A27C 6600                       		bne.s	loc_197D4
0001A27E                            
0001A27E                            Obj76_MakeFrag:
0001A27E 45D0                       		lea	(a0),a2
0001A280 47D1                       		lea	(a1),a3
0001A282 7603                       		moveq	#3,d3
0001A284                            
0001A284                            loc_197AA:
0001A284 26DA                       		move.l	(a2)+,(a3)+
0001A286 26DA                       		move.l	(a2)+,(a3)+
0001A288 26DA                       		move.l	(a2)+,(a3)+
0001A28A 26DA                       		move.l	(a2)+,(a3)+
0001A28C 51CB FFF6                  		dbf	d3,loc_197AA
0001A290                            
0001A290 335C 0010                  		move.w	(a4)+,$10(a1)
0001A294 335C 0012                  		move.w	(a4)+,$12(a1)
0001A298 361D                       		move.w	(a5)+,d3
0001A29A D769 0008                  		add.w	d3,8(a1)
0001A29E 361D                       		move.w	(a5)+,d3
0001A2A0 D769 000C                  		add.w	d3,$C(a1)
0001A2A4 1344 001A                  		move.b	d4,$1A(a1)
0001A2A8 5244                       		addq.w	#1,d4
0001A2AA 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A2AE                            
0001A2AE                            loc_197D4:
0001A2AE 303C 00CB                  		move.w	#$CB,d0
0001A2B2 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A2B8                            ; End of function Obj76_Break
0001A2B8                            
0001A2B8                            ; ===========================================================================
0001A2B8 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A2BC 0180 FE00                  		dc.w $180, $FE00
0001A2C0 FF00 FF00                  		dc.w $FF00, $FF00
0001A2C4 0100 FF00                  		dc.w $100, $FF00
0001A2C8 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A2CC 0010 0000                  		dc.w $10, 0
0001A2D0 0000 0010                  		dc.w 0,	$10
0001A2D4 0010 0010                  		dc.w $10, $10
0001A2D8                            ; ---------------------------------------------------------------------------
0001A2D8                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A2D8                            ; ---------------------------------------------------------------------------
0001A2D8                            Map_obj76:
0001A2D8                            	include "_maps\obj76.asm"
0001A2D8                            ; ---------------------------------------------------------------------------
0001A2D8                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A2D8                            ; ---------------------------------------------------------------------------
0001A2D8 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A2DC 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A2E0 0000                       		dc.w byte_19826-Map_obj76
0001A2E2 02                         byte_19808:	dc.b 2
0001A2E3 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A2E8 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A2ED 00                         		dc.b 0
0001A2EE 01                         byte_19814:	dc.b 1
0001A2EF F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A2F4 01                         byte_1981A:	dc.b 1
0001A2F5 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A2FA 01                         byte_19820:	dc.b 1
0001A2FB F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A300 01                         byte_19826:	dc.b 1
0001A301 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A306                            		even
0001A306                            		even
0001A306                            
0001A306                            ; ===========================================================================
0001A306                            
0001A306                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A306 4EF9 0000 E02A             		jmp	DeleteObject
0001A30C                            ; ===========================================================================
0001A30C                            ; ---------------------------------------------------------------------------
0001A30C                            ; Object 82 - Eggman (SBZ2)
0001A30C                            ; ---------------------------------------------------------------------------
0001A30C                            
0001A30C                            Obj82:					; XREF: Obj_Index
0001A30C 7000                       		moveq	#0,d0
0001A30E 1028 0024                  		move.b	$24(a0),d0
0001A312 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A316 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A31A                            ; ===========================================================================
0001A31A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A31C 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A31E 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A320                            
0001A320 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A323 0400 03                    		dc.b 4,	0, 3
0001A326                            ; ===========================================================================
0001A326                            
0001A326                            Obj82_Main:				; XREF: Obj82_Index
0001A326 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A32A 317C 2160 0008             		move.w	#$2160,8(a0)
0001A330 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A336 117C 000F 0020             		move.b	#$F,$20(a0)
0001A33C 117C 0010 0021             		move.b	#$10,$21(a0)
0001A342 08A8 0000 0022             		bclr	#0,$22(a0)
0001A348 4228 0025                  		clr.b	$25(a0)
0001A34C 115A 0024                  		move.b	(a2)+,$24(a0)
0001A350 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A354 115A 0018                  		move.b	(a2)+,$18(a0)
0001A358 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A360 317C 0400 0002             		move.w	#$400,2(a0)
0001A366 117C 0004 0001             		move.b	#4,1(a0)
0001A36C 08E8 0007 0001             		bset	#7,1(a0)
0001A372 117C 0020 0019             		move.b	#$20,$19(a0)
0001A378 4EB9 0000 E48A             		jsr	SingleObjLoad2
0001A37E 6600                       		bne.s	Obj82_Eggman
0001A380 2348 0034                  		move.l	a0,$34(a1)
0001A384 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A388 337C 2130 0008             		move.w	#$2130,8(a1)
0001A38E 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A394 4228 0025                  		clr.b	$25(a0)
0001A398 135A 0024                  		move.b	(a2)+,$24(a1)
0001A39C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3A0 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3A4 237C 0000 C780 0004        		move.l	#Map_obj32,4(a1)
0001A3AC 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A3B2 137C 0004 0001             		move.b	#4,1(a1)
0001A3B8 08E9 0007 0001             		bset	#7,1(a1)
0001A3BE 137C 0010 0019             		move.b	#$10,$19(a1)
0001A3C4 137C 0000 001A             		move.b	#0,$1A(a1)
0001A3CA                            
0001A3CA                            Obj82_Eggman:				; XREF: Obj82_Index
0001A3CA 7000                       		moveq	#0,d0
0001A3CC 1028 0025                  		move.b	$25(a0),d0
0001A3D0 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A3D4 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A3D8 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A3DC 4EB9 0000 B04C             		jsr	AnimateSprite
0001A3E2 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A3E8                            ; ===========================================================================
0001A3E8 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A3EA 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A3EC 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A3EE 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A3F0                            ; ===========================================================================
0001A3F0                            
0001A3F0                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A3F0 3028 0008                  		move.w	8(a0),d0
0001A3F4 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A3F8 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A3FC 6400                       		bcc.s	loc_19934	; if not, branch
0001A3FE 5428 0025                  		addq.b	#2,$25(a0)
0001A402 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A408 117C 0001 001C             		move.b	#1,$1C(a0)
0001A40E                            
0001A40E                            loc_19934:				; XREF: Obj82_EggIndex
0001A40E 4EF9 0000 DFC8             		jmp	SpeedToPos
0001A414                            ; ===========================================================================
0001A414                            
0001A414                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A414 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A418 6600                       		bne.s	loc_19954	; if time remains, branch
0001A41A 5428 0025                  		addq.b	#2,$25(a0)
0001A41E 117C 0002 001C             		move.b	#2,$1C(a0)
0001A424 5868 000C                  		addq.w	#4,$C(a0)
0001A428 317C 000F 003C             		move.w	#15,$3C(a0)
0001A42E                            
0001A42E                            loc_19954:
0001A42E 60DE                       		bra.s	loc_19934
0001A430                            ; ===========================================================================
0001A430                            
0001A430                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A430 5368 003C                  		subq.w	#1,$3C(a0)
0001A434 6E00                       		bgt.s	loc_199D0
0001A436 6600                       		bne.s	loc_1996A
0001A438 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A43E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A444                            
0001A444                            loc_1996A:
0001A444 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A44A 6E00                       		bgt.s	loc_19976
0001A44C 4268 0010                  		clr.w	$10(a0)
0001A450                            
0001A450                            loc_19976:
0001A450 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A456 4A68 0012                  		tst.w	$12(a0)
0001A45A 6B00                       		bmi.s	Obj82_FindBlocks
0001A45C 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A462 6500                       		bcs.s	Obj82_FindBlocks
0001A464 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A46A 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A470 6500                       		bcs.s	Obj82_FindBlocks
0001A472 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A478 4268 0012                  		clr.w	$12(a0)
0001A47C                            
0001A47C                            Obj82_FindBlocks:
0001A47C 3028 0010                  		move.w	$10(a0),d0
0001A480 8068 0012                  		or.w	$12(a0),d0
0001A484 6600                       		bne.s	loc_199D0
0001A486 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A48A 703E                       		moveq	#$3E,d0
0001A48C 7240                       		moveq	#$40,d1
0001A48E                            
0001A48E                            Obj82_FindLoop:	
0001A48E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A490 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A494 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A498                            
0001A498 6600                       		bne.s	loc_199D0
0001A49A 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A4A0 5428 0025                  		addq.b	#2,$25(a0)
0001A4A4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4AA                            
0001A4AA                            loc_199D0:
0001A4AA 6000 FF62                  		bra.w	loc_19934
0001A4AE                            ; ===========================================================================
0001A4AE                            
0001A4AE                            Obj82_Switch:				; XREF: Obj82_Index
0001A4AE 7000                       		moveq	#0,d0
0001A4B0 1028 0025                  		move.b	$25(a0),d0
0001A4B4 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A4B8 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A4BC                            ; ===========================================================================
0001A4BC 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A4BE 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A4C0                            ; ===========================================================================
0001A4C0                            
0001A4C0                            loc_199E6:				; XREF: Obj82_SwIndex
0001A4C0 2268 0034                  		movea.l	$34(a0),a1
0001A4C4 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A4CA 6600                       		bne.s	Obj82_SwDisplay
0001A4CC 117C 0001 001A             		move.b	#1,$1A(a0)
0001A4D2 5428 0025                  		addq.b	#2,$25(a0)
0001A4D6                            
0001A4D6                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A4D6 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A4DC                            ; ===========================================================================
0001A4DC                            Ani_obj82:
0001A4DC                            	include "_anim\obj82.asm"
0001A4DC                            ; ---------------------------------------------------------------------------
0001A4DC                            ; Animation script - Eggman (SBZ2)
0001A4DC                            ; ---------------------------------------------------------------------------
0001A4DC 0000                       		dc.w byte_19A10-Ani_obj82
0001A4DE 0000                       		dc.w byte_19A14-Ani_obj82
0001A4E0 0000                       		dc.w byte_19A18-Ani_obj82
0001A4E2 0000                       		dc.w byte_19A20-Ani_obj82
0001A4E4 0000                       		dc.w byte_19A24-Ani_obj82
0001A4E6 0000                       		dc.w byte_19A2A-Ani_obj82
0001A4E8 0000                       		dc.w byte_19A30-Ani_obj82
0001A4EA 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A4EE 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A4F2 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A4FA 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A4FE 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A504 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A50A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A50E                            		even
0001A50E                            		even
0001A50E                            
0001A50E                            ; ---------------------------------------------------------------------------
0001A50E                            ; Sprite mappings - Eggman (SBZ2)
0001A50E                            ; ---------------------------------------------------------------------------
0001A50E                            Map_obj82:
0001A50E                            	include "_maps\obj82.asm"
0001A50E                            ; ================================================================================
0001A50E                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A50E                            ; ================================================================================
0001A50E                            
0001A50E                            DATAA16Z12RYSAF:
0001A50E 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A512 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A516 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A51A 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A51E 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A522 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A524 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A525 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A52A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A52F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A534 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A535 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A53A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A53F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A544 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A549 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A54A E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A54F E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A554 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A559 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A55E 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A55F E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A564 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A569 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A56E 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A56F E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A574 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A579 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A57E E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A583 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A584 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A589 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A58E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A593 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A598 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A599 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A59E E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5A3 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A5A8 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A5AD F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A5B2 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A5B7 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A5BC 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A5BD 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A5C2 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A5C7 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A5CC F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A5D1 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A5D2 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A5D7 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A5DC 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A5E1 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A5E6 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A5EB 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A5EC E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5F1 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5F6 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A5FB 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A600 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A605 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A60A 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A60F 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A614 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A615 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A61A F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A61F EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A624                            	even
0001A624                            	even
0001A624                            
0001A624                            ; ===========================================================================
0001A624                            ; ---------------------------------------------------------------------------
0001A624                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A624                            ; ---------------------------------------------------------------------------
0001A624                            
0001A624                            Obj83:					; XREF: Obj_Index
0001A624 7000                       		moveq	#0,d0
0001A626 1028 0024                  		move.b	$24(a0),d0
0001A62A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A62E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A632                            ; ===========================================================================
0001A632 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A634 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A636 0000                       		dc.w loc_19C36-Obj83_Index
0001A638 0000                       		dc.w loc_19C62-Obj83_Index
0001A63A 0000                       		dc.w loc_19C72-Obj83_Index
0001A63C 0000                       		dc.w loc_19C80-Obj83_Index
0001A63E                            ; ===========================================================================
0001A63E                            
0001A63E                            Obj83_Main:				; XREF: Obj83_Index
0001A63E 317C 2080 0008             		move.w	#$2080,8(a0)
0001A644 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A64A 117C 0080 0019             		move.b	#$80,$19(a0)
0001A650 117C 0010 0016             		move.b	#$10,$16(a0)
0001A656 117C 0004 0001             		move.b	#4,1(a0)
0001A65C 08E8 0007 0001             		bset	#7,1(a0)
0001A662 7800                       		moveq	#0,d4
0001A664 3A3C 2010                  		move.w	#$2010,d5
0001A668 7C07                       		moveq	#7,d6
0001A66A 45E8 0030                  		lea	$30(a0),a2
0001A66E                            
0001A66E                            Obj83_MakeBlock:
0001A66E 4EB9 0000 E474             		jsr	SingleObjLoad
0001A674 6600                       		bne.s	Obj83_ExitMake
0001A676 34C9                       		move.w	a1,(a2)+
0001A678 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A67C 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A684 337C 4518 0002             		move.w	#$4518,2(a1)
0001A68A 137C 0004 0001             		move.b	#4,1(a1)
0001A690 137C 0010 0019             		move.b	#$10,$19(a1)
0001A696 137C 0010 0016             		move.b	#$10,$16(a1)
0001A69C 137C 0003 0018             		move.b	#3,$18(a1)
0001A6A2 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A6A6 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A6AC 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A6B0 137C 0008 0024             		move.b	#8,$24(a1)
0001A6B6 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A6BA                            
0001A6BA                            Obj83_ExitMake:
0001A6BA 5428 0024                  		addq.b	#2,$24(a0)
0001A6BE 4E75                       		rts	
0001A6C0                            ; ===========================================================================
0001A6C0                            
0001A6C0                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A6C0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A6C6 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A6C8 4228 001A                  		clr.b	$1A(a0)
0001A6CC 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A6D0                            
0001A6D0                            Obj83_Solid:
0001A6D0 7000                       		moveq	#0,d0
0001A6D2 1028 001A                  		move.b	$1A(a0),d0
0001A6D6 4400                       		neg.b	d0
0001A6D8 4880                       		ext.w	d0
0001A6DA 5040                       		addq.w	#8,d0
0001A6DC E940                       		asl.w	#4,d0
0001A6DE 383C 2100                  		move.w	#$2100,d4
0001A6E2 9840                       		sub.w	d0,d4
0001A6E4 1140 0019                  		move.b	d0,$19(a0)
0001A6E8 3144 0008                  		move.w	d4,8(a0)
0001A6EC 720B                       		moveq	#$B,d1
0001A6EE D240                       		add.w	d0,d1
0001A6F0 7410                       		moveq	#$10,d2
0001A6F2 7611                       		moveq	#$11,d3
0001A6F4 4EF9 0001 03BE             		jmp	SolidObject
0001A6FA                            ; ===========================================================================
0001A6FA                            
0001A6FA                            loc_19C36:				; XREF: Obj83_Index
0001A6FA 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A700 6400                       		bcc.s	Obj83_Solid2
0001A702 70FF                       		moveq	#-1,d0
0001A704 1028 001A                  		move.b	$1A(a0),d0
0001A708 4880                       		ext.w	d0
0001A70A D040                       		add.w	d0,d0
0001A70C 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A710 2240                       		movea.l	d0,a1
0001A712 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A718 5228 001A                  		addq.b	#1,$1A(a0)
0001A71C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A722 6700                       		beq.s	loc_19C62
0001A724                            
0001A724                            Obj83_Solid2:
0001A724 60AA                       		bra.s	Obj83_Solid
0001A726                            ; ===========================================================================
0001A726                            
0001A726                            loc_19C62:				; XREF: Obj83_Index
0001A726 08A8 0003 0022             		bclr	#3,$22(a0)
0001A72C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A732 6000 FBD2                  		bra.w	loc_1982C
0001A736                            ; ===========================================================================
0001A736                            
0001A736                            loc_19C72:				; XREF: Obj83_Index
0001A736 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A73C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A73E 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A744                            ; ===========================================================================
0001A744                            
0001A744                            loc_19C80:				; XREF: Obj83_Index
0001A744 4A28 0001                  		tst.b	1(a0)
0001A748 6A00 FBBC                  		bpl.w	loc_1982C
0001A74C 4EB9 0000 DF56             		jsr	ObjectFall
0001A752 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A758                            ; ===========================================================================
0001A758                            
0001A758                            Obj83_Break:				; XREF: loc_19C72
0001A758 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A75C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A760 7801                       		moveq	#1,d4
0001A762 7203                       		moveq	#3,d1
0001A764 7438                       		moveq	#$38,d2
0001A766 5428 0024                  		addq.b	#2,$24(a0)
0001A76A 117C 0008 0019             		move.b	#8,$19(a0)
0001A770 117C 0008 0016             		move.b	#8,$16(a0)
0001A776 43D0                       		lea	(a0),a1
0001A778 6000                       		bra.s	Obj83_MakeFrag
0001A77A                            ; ===========================================================================
0001A77A                            
0001A77A                            Obj83_LoopFrag:
0001A77A 4EB9 0000 E48A             		jsr	SingleObjLoad2
0001A780 6600                       		bne.s	Obj83_BreakSnd
0001A782                            
0001A782                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A782 45D0                       		lea	(a0),a2
0001A784 47D1                       		lea	(a1),a3
0001A786 7603                       		moveq	#3,d3
0001A788                            
0001A788                            loc_19CC4:
0001A788 26DA                       		move.l	(a2)+,(a3)+
0001A78A 26DA                       		move.l	(a2)+,(a3)+
0001A78C 26DA                       		move.l	(a2)+,(a3)+
0001A78E 26DA                       		move.l	(a2)+,(a3)+
0001A790 51CB FFF6                  		dbf	d3,loc_19CC4
0001A794                            
0001A794 335C 0012                  		move.w	(a4)+,$12(a1)
0001A798 361D                       		move.w	(a5)+,d3
0001A79A D769 0008                  		add.w	d3,8(a1)
0001A79E 361D                       		move.w	(a5)+,d3
0001A7A0 D769 000C                  		add.w	d3,$C(a1)
0001A7A4 1344 001A                  		move.b	d4,$1A(a1)
0001A7A8 5244                       		addq.w	#1,d4
0001A7AA 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A7AE                            
0001A7AE                            Obj83_BreakSnd:
0001A7AE 303C 00CB                  		move.w	#$CB,d0
0001A7B2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A7B8 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A7BE                            ; ===========================================================================
0001A7BE 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A7C2 0120 00C0                  		dc.w $120, $C0
0001A7C6 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A7CA 0010 0000                  		dc.w $10, 0
0001A7CE 0000 0010                  		dc.w 0,	$10
0001A7D2 0010 0010                  		dc.w $10, $10
0001A7D6                            ; ---------------------------------------------------------------------------
0001A7D6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7D6                            ; ---------------------------------------------------------------------------
0001A7D6                            Map_obj83:
0001A7D6                            	include "_maps\obj83.asm"
0001A7D6                            ; ---------------------------------------------------------------------------
0001A7D6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7D6                            ; ---------------------------------------------------------------------------
0001A7D6 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A7DA 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A7DE 0000                       		dc.w byte_19D46-Map_obj83
0001A7E0 01                         byte_19D1C:	dc.b 1
0001A7E1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A7E6 02                         byte_19D22:	dc.b 2
0001A7E7 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A7EC F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A7F1 00                         		dc.b 0
0001A7F2 02                         byte_19D2E:	dc.b 2
0001A7F3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A7F8 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A7FD 00                         		dc.b 0
0001A7FE 02                         byte_19D3A:	dc.b 2
0001A7FF F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A804 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A809 00                         		dc.b 0
0001A80A 02                         byte_19D46:	dc.b 2
0001A80B F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A810 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A816 00                         		even
0001A816 00                         		even
0001A816                            
0001A816                            ; ===========================================================================
0001A816                            ; ---------------------------------------------------------------------------
0001A816                            ; Object 85 - Eggman (FZ)
0001A816                            ; ---------------------------------------------------------------------------
0001A816                            
0001A816                            Obj85_Delete:
0001A816 4EF9 0000 E02A             		jmp	DeleteObject
0001A81C                            ; ===========================================================================
0001A81C                            
0001A81C                            Obj85:					; XREF: Obj_Index
0001A81C 7000                       		moveq	#0,d0
0001A81E 1028 0024                  		move.b	$24(a0),d0
0001A822 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A826 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A82A                            ; ===========================================================================
0001A82A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A82C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A82E 0000                       		dc.w loc_1A38E-Obj85_Index
0001A830 0000                       		dc.w loc_1A346-Obj85_Index
0001A832 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A834 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A836 0000                       		dc.w loc_1A264-Obj85_Index
0001A838                            
0001A838 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A83E 0001 A50E                  		dc.l Map_obj82		; mappings pointer
0001A842 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A848 0000 0000                  		dc.l Map_obj84
0001A84C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A852 0000 0000                  		dc.l Map_FZBoss
0001A856 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A85C 0001 A50E                  		dc.l Map_obj82
0001A860 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A866 0001 8850                  		dc.l Map_Eggman
0001A86A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A870 0001 8850                  		dc.l Map_Eggman
0001A874                            
0001A874 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A879 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A87E 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A883 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A888 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A88D 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A892                            ; ===========================================================================
0001A892                            
0001A892                            Obj85_Main:				; XREF: Obj85_Index
0001A892 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A896 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A89A 2248                       		movea.l	a0,a1
0001A89C 7205                       		moveq	#5,d1
0001A89E 6000                       		bra.s	Obj85_LoadBoss
0001A8A0                            ; ===========================================================================
0001A8A0                            
0001A8A0                            Obj85_Loop:
0001A8A0 4EB9 0000 E48A             		jsr	SingleObjLoad2
0001A8A6 6600                       		bne.s	loc_19E20
0001A8A8                            
0001A8A8                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A8A8 12BC 0085                  		move.b	#$85,(a1)
0001A8AC 335A 0008                  		move.w	(a2)+,8(a1)
0001A8B0 335A 000C                  		move.w	(a2)+,$C(a1)
0001A8B4 335A 0002                  		move.w	(a2)+,2(a1)
0001A8B8 235A 0004                  		move.l	(a2)+,4(a1)
0001A8BC 135B 0024                  		move.b	(a3)+,$24(a1)
0001A8C0 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A8C4 135B 0018                  		move.b	(a3)+,$18(a1)
0001A8C8 135B 0017                  		move.b	(a3)+,$17(a1)
0001A8CC 135B 0016                  		move.b	(a3)+,$16(a1)
0001A8D0 137C 0004 0001             		move.b	#4,1(a1)
0001A8D6 08E8 0007 0001             		bset	#7,1(a0)
0001A8DC 2348 0034                  		move.l	a0,$34(a1)
0001A8E0 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A8E4                            
0001A8E4                            loc_19E20:
0001A8E4 45E8 0036                  		lea	$36(a0),a2
0001A8E8 4EB9 0000 E474             		jsr	SingleObjLoad
0001A8EE 6600                       		bne.s	loc_19E5A
0001A8F0 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A8F4 3489                       		move.w	a1,(a2)
0001A8F6 2348 0034                  		move.l	a0,$34(a1)
0001A8FA 45E8 0038                  		lea	$38(a0),a2
0001A8FE 7400                       		moveq	#0,d2
0001A900 7203                       		moveq	#3,d1
0001A902                            
0001A902                            loc_19E3E:
0001A902 4EB9 0000 E48A             		jsr	SingleObjLoad2
0001A908 6600                       		bne.s	loc_19E5A
0001A90A 34C9                       		move.w	a1,(a2)+
0001A90C 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A910 2348 0034                  		move.l	a0,$34(a1)
0001A914 1342 0028                  		move.b	d2,$28(a1)
0001A918 5442                       		addq.w	#2,d2
0001A91A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A91E                            
0001A91E                            loc_19E5A:
0001A91E 317C 0000 0034             		move.w	#0,$34(a0)
0001A924 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A92A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A930                            
0001A930                            Obj85_Eggman:				; XREF: Obj85_Index
0001A930 7000                       		moveq	#0,d0
0001A932 1028 0034                  		move.b	$34(a0),d0
0001A936 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A93A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A93E 4EF9 0000 DFEE             		jmp	DisplaySprite
0001A944                            ; ===========================================================================
0001A944 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A948 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A94C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A950 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            loc_19E90:				; XREF: off_19E80
0001A954 4AB8 F680                  		tst.l	($FFFFF680).w
0001A958 6600                       		bne.s	loc_19EA2
0001A95A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A960 6500                       		bcs.s	loc_19EA2
0001A962 5428 0034                  		addq.b	#2,$34(a0)
0001A966                            
0001A966                            loc_19EA2:
0001A966 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A96A 4E75                       		rts	
0001A96C                            ; ===========================================================================
0001A96C                            
0001A96C                            loc_19EA8:				; XREF: off_19E80
0001A96C 4A68 0030                  		tst.w	$30(a0)
0001A970 6A00                       		bpl.s	loc_19F10
0001A972 4268 0030                  		clr.w	$30(a0)
0001A976 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001A97C 0240 000C                  		andi.w	#$C,d0
0001A980 3200                       		move.w	d0,d1
0001A982 5441                       		addq.w	#2,d1
0001A984 4A80                       		tst.l	d0
0001A986 6A00                       		bpl.s	loc_19EC6
0001A988 C141                       		exg	d1,d0
0001A98A                            
0001A98A                            loc_19EC6:
0001A98A 43FA 0000                  		lea	word_19FD6(pc),a1
0001A98E 3031 0000                  		move.w	(a1,d0.w),d0
0001A992 3231 1000                  		move.w	(a1,d1.w),d1
0001A996 3140 0030                  		move.w	d0,$30(a0)
0001A99A 74FF                       		moveq	#-1,d2
0001A99C 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A9A0 2242                       		movea.l	d2,a1
0001A9A2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A9A8 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A9AE 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A9B2 2242                       		movea.l	d2,a1
0001A9B4 137C 0001 0029             		move.b	#1,$29(a1)
0001A9BA 337C 0000 0030             		move.w	#0,$30(a1)
0001A9C0 317C 0001 0032             		move.w	#1,$32(a0)
0001A9C6 4228 0035                  		clr.b	$35(a0)
0001A9CA 303C 00B7                  		move.w	#$B7,d0
0001A9CE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A9D4                            
0001A9D4                            loc_19F10:
0001A9D4 4A68 0032                  		tst.w	$32(a0)
0001A9D8 6B00 0000                  		bmi.w	loc_19FA6
0001A9DC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A9E2 3038 D008                  		move.w	($FFFFD008).w,d0
0001A9E6 9068 0008                  		sub.w	8(a0),d0
0001A9EA 6500                       		bcs.s	loc_19F2E
0001A9EC 08E8 0000 0022             		bset	#0,$22(a0)
0001A9F2                            
0001A9F2                            loc_19F2E:
0001A9F2 323C 002B                  		move.w	#$2B,d1
0001A9F6 343C 0014                  		move.w	#$14,d2
0001A9FA 363C 0014                  		move.w	#$14,d3
0001A9FE 3828 0008                  		move.w	8(a0),d4
0001AA02 4EB9 0001 03BE             		jsr	SolidObject
0001AA08 4A44                       		tst.w	d4
0001AA0A 6E00                       		bgt.s	loc_19F50
0001AA0C                            
0001AA0C                            loc_19F48:
0001AA0C 4A28 0035                  		tst.b	$35(a0)
0001AA10 6600                       		bne.s	loc_19F88
0001AA12 6000                       		bra.s	loc_19F96
0001AA14                            ; ===========================================================================
0001AA14                            
0001AA14                            loc_19F50:
0001AA14 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001AA18 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001AA1E 66EC                       		bne.s	loc_19F48
0001AA20 303C 0300                  		move.w	#$300,d0
0001AA24 0828 0000 0022             		btst	#0,$22(a0)
0001AA2A 6600                       		bne.s	loc_19F6A
0001AA2C 4440                       		neg.w	d0
0001AA2E                            
0001AA2E                            loc_19F6A:
0001AA2E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001AA32 4A28 0035                  		tst.b	$35(a0)
0001AA36 6600                       		bne.s	loc_19F88
0001AA38 5328 0021                  		subq.b	#1,$21(a0)
0001AA3C 117C 0064 0035             		move.b	#$64,$35(a0)
0001AA42 303C 00AC                  		move.w	#$AC,d0
0001AA46 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA4C                            
0001AA4C                            loc_19F88:
0001AA4C 5328 0035                  		subq.b	#1,$35(a0)
0001AA50 6700                       		beq.s	loc_19F96
0001AA52 117C 0003 001C             		move.b	#3,$1C(a0)
0001AA58 6000                       		bra.s	loc_19F9C
0001AA5A                            ; ===========================================================================
0001AA5A                            
0001AA5A                            loc_19F96:
0001AA5A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA60                            
0001AA60                            loc_19F9C:
0001AA60 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001AA64 4EF9 0000 B04C             		jmp	AnimateSprite
0001AA6A                            ; ===========================================================================
0001AA6A                            
0001AA6A                            loc_19FA6:
0001AA6A 4A28 0021                  		tst.b	$21(a0)
0001AA6E 6700                       		beq.s	loc_19FBC
0001AA70 5428 0034                  		addq.b	#2,$34(a0)
0001AA74 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AA7A 4268 0032                  		clr.w	$32(a0)
0001AA7E 4E75                       		rts	
0001AA80                            ; ===========================================================================
0001AA80                            
0001AA80                            loc_19FBC:
0001AA80 117C 0006 0034             		move.b	#6,$34(a0)
0001AA86 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AA8C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AA92 117C 0014 0016             		move.b	#$14,$16(a0)
0001AA98 4E75                       		rts	
0001AA9A                            ; ===========================================================================
0001AA9A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AAAA                            ; ===========================================================================
0001AAAA                            
0001AAAA                            loc_19FE6:				; XREF: off_19E80
0001AAAA 70FF                       		moveq	#-1,d0
0001AAAC 3028 0036                  		move.w	$36(a0),d0
0001AAB0 2240                       		movea.l	d0,a1
0001AAB2 4A68 0030                  		tst.w	$30(a0)
0001AAB6 6A00                       		bpl.s	loc_1A000
0001AAB8 4268 0030                  		clr.w	$30(a0)
0001AABC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AAC2 6100                       		bsr.s	loc_1A020
0001AAC4                            
0001AAC4                            loc_1A000:
0001AAC4 700F                       		moveq	#$F,d0
0001AAC6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AACA 6600                       		bne.s	loc_1A00A
0001AACC 6100                       		bsr.s	loc_1A020
0001AACE                            
0001AACE                            loc_1A00A:
0001AACE 4A68 0032                  		tst.w	$32(a0)
0001AAD2 6700                       		beq.s	locret_1A01E
0001AAD4 5528 0034                  		subq.b	#2,$34(a0)
0001AAD8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AADE 4268 0032                  		clr.w	$32(a0)
0001AAE2                            
0001AAE2                            locret_1A01E:
0001AAE2 4E75                       		rts	
0001AAE4                            ; ===========================================================================
0001AAE4                            
0001AAE4                            loc_1A020:
0001AAE4 303C 00B1                  		move.w	#$B1,d0
0001AAE8 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            loc_1A02A:				; XREF: off_19E80
0001AAEE 117C 0030 0017             		move.b	#$30,$17(a0)
0001AAF4 08E8 0000 0022             		bset	#0,$22(a0)
0001AAFA 4EB9 0000 DFC8             		jsr	SpeedToPos
0001AB00 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB06 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB0C 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AB12 6500                       		bcs.s	loc_1A070
0001AB14 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AB1A 5428 0034                  		addq.b	#2,$34(a0)
0001AB1E 117C 0020 0017             		move.b	#$20,$17(a0)
0001AB24 317C 0100 0010             		move.w	#$100,$10(a0)
0001AB2A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AB30 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AB34                            
0001AB34                            loc_1A070:
0001AB34 6000 0000                  		bra.w	loc_1A166
0001AB38                            ; ===========================================================================
0001AB38                            
0001AB38                            loc_1A074:				; XREF: off_19E80
0001AB38 08E8 0000 0022             		bset	#0,$22(a0)
0001AB3E 117C 0004 001C             		move.b	#4,$1C(a0)
0001AB44 4EB9 0000 DFC8             		jsr	SpeedToPos
0001AB4A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB50 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AB56 6500                       		bcs.s	loc_1A09A
0001AB58 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AB5E                            
0001AB5E                            loc_1A09A:
0001AB5E 317C 0400 0010             		move.w	#$400,$10(a0)
0001AB64 3028 0008                  		move.w	8(a0),d0
0001AB68 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AB6C 6A00                       		bpl.s	loc_1A0B4
0001AB6E 317C 0500 0010             		move.w	#$500,$10(a0)
0001AB74 6000 0000                  		bra.w	loc_1A0F2
0001AB78                            ; ===========================================================================
0001AB78                            
0001AB78                            loc_1A0B4:
0001AB78 0440 0070                  		subi.w	#$70,d0
0001AB7C 6500                       		bcs.s	loc_1A0F2
0001AB7E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AB84 5140                       		subq.w	#8,d0
0001AB86 6500                       		bcs.s	loc_1A0F2
0001AB88 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AB8E 5140                       		subq.w	#8,d0
0001AB90 6500                       		bcs.s	loc_1A0F2
0001AB92 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AB98 5140                       		subq.w	#8,d0
0001AB9A 6500                       		bcs.s	loc_1A0F2
0001AB9C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABA2 5140                       		subq.w	#8,d0
0001ABA4 6500                       		bcs.s	loc_1A0F2
0001ABA6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABAC 0440 0038                  		subi.w	#$38,d0
0001ABB0 6500                       		bcs.s	loc_1A0F2
0001ABB2 4268 0010                  		clr.w	$10(a0)
0001ABB6                            
0001ABB6                            loc_1A0F2:
0001ABB6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001ABBC 6500                       		bcs.s	loc_1A110
0001ABBE 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001ABC4 317C 0240 0010             		move.w	#$240,$10(a0)
0001ABCA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001ABD0 5428 0034                  		addq.b	#2,$34(a0)
0001ABD4                            
0001ABD4                            loc_1A110:
0001ABD4 6000                       		bra.s	loc_1A15C
0001ABD6                            ; ===========================================================================
0001ABD6                            
0001ABD6                            loc_1A112:				; XREF: off_19E80
0001ABD6 4EB9 0000 DFC8             		jsr	SpeedToPos
0001ABDC 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001ABE2 6500                       		bcs.s	loc_1A124
0001ABE4 4268 0010                  		clr.w	$10(a0)
0001ABE8                            
0001ABE8                            loc_1A124:
0001ABE8 0668 0034 0012             		addi.w	#$34,$12(a0)
0001ABEE 4A68 0012                  		tst.w	$12(a0)
0001ABF2 6B00                       		bmi.s	loc_1A142
0001ABF4 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001ABFA 6500                       		bcs.s	loc_1A142
0001ABFC 317C 0592 000C             		move.w	#$592,$C(a0)
0001AC02 4268 0012                  		clr.w	$12(a0)
0001AC06                            
0001AC06                            loc_1A142:
0001AC06 3028 0010                  		move.w	$10(a0),d0
0001AC0A 8068 0012                  		or.w	$12(a0),d0
0001AC0E 6600                       		bne.s	loc_1A15C
0001AC10 5428 0034                  		addq.b	#2,$34(a0)
0001AC14 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AC1A 117C 0001 0021             		move.b	#1,$21(a0)
0001AC20                            
0001AC20                            loc_1A15C:
0001AC20 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AC24 4EB9 0000 B04C             		jsr	AnimateSprite
0001AC2A                            
0001AC2A                            loc_1A166:
0001AC2A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AC30 6C00                       		bge.s	loc_1A172
0001AC32 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC36                            
0001AC36                            loc_1A172:
0001AC36 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AC3C 6C00                       		bge.s	locret_1A190
0001AC3E 323C 001B                  		move.w	#$1B,d1
0001AC42 343C 0070                  		move.w	#$70,d2
0001AC46 363C 0071                  		move.w	#$71,d3
0001AC4A 3828 0008                  		move.w	8(a0),d4
0001AC4E 4EF9 0001 03BE             		jmp	SolidObject
0001AC54                            ; ===========================================================================
0001AC54                            
0001AC54                            locret_1A190:
0001AC54 4E75                       		rts	
0001AC56                            ; ===========================================================================
0001AC56                            
0001AC56                            loc_1A192:				; XREF: off_19E80
0001AC56 217C 0001 8850 0004        		move.l	#Map_Eggman,4(a0)
0001AC5E 317C 0400 0002             		move.w	#$400,2(a0)
0001AC64 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC6A 08E8 0000 0022             		bset	#0,$22(a0)
0001AC70 4EB9 0000 DFC8             		jsr	SpeedToPos
0001AC76 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AC7C 6400                       		bcc.s	loc_1A1D0
0001AC7E 317C 0180 0010             		move.w	#$180,$10(a0)
0001AC84 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AC8A 117C 000F 0020             		move.b	#$F,$20(a0)
0001AC90 5428 0034                  		addq.b	#2,$34(a0)
0001AC94                            
0001AC94                            loc_1A1D0:
0001AC94 6000 FF8A                  		bra.w	loc_1A15C
0001AC98                            ; ===========================================================================
0001AC98                            
0001AC98                            loc_1A1D4:				; XREF: off_19E80
0001AC98 08E8 0000 0022             		bset	#0,$22(a0)
0001AC9E 4EB9 0000 DFC8             		jsr	SpeedToPos
0001ACA4 4A68 0030                  		tst.w	$30(a0)
0001ACA8 6600                       		bne.s	loc_1A1FC
0001ACAA 4A28 0020                  		tst.b	$20(a0)
0001ACAE 6600                       		bne.s	loc_1A216
0001ACB0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ACB6 303C 00AC                  		move.w	#$AC,d0
0001ACBA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ACC0                            
0001ACC0                            loc_1A1FC:
0001ACC0 5368 0030                  		subq.w	#1,$30(a0)
0001ACC4 6600                       		bne.s	loc_1A216
0001ACC6 4A28 0022                  		tst.b	$22(a0)
0001ACCA 6A00                       		bpl.s	loc_1A210
0001ACCC 317C 0060 0012             		move.w	#$60,$12(a0)
0001ACD2 6000                       		bra.s	loc_1A216
0001ACD4                            ; ===========================================================================
0001ACD4                            
0001ACD4                            loc_1A210:
0001ACD4 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACDA                            
0001ACDA                            loc_1A216:
0001ACDA 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ACE0 6D00                       		blt.s	loc_1A23A
0001ACE2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ACE8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001ACEE 4278 D014                  		clr.w	($FFFFD014).w
0001ACF2 4A68 0012                  		tst.w	$12(a0)
0001ACF6 6A00                       		bpl.s	loc_1A248
0001ACF8 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001ACFE                            
0001ACFE                            loc_1A23A:
0001ACFE 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AD04 6D00                       		blt.s	loc_1A248
0001AD06 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AD0C                            
0001AD0C                            loc_1A248:
0001AD0C 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AD12 6500                       		bcs.s	loc_1A260
0001AD14 4A28 0001                  		tst.b	1(a0)
0001AD18 6B00                       		bmi.s	loc_1A260
0001AD1A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AD20 6000 FAF4                  		bra.w	Obj85_Delete
0001AD24                            ; ===========================================================================
0001AD24                            
0001AD24                            loc_1A260:
0001AD24 6000 FEFA                  		bra.w	loc_1A15C
0001AD28                            ; ===========================================================================
0001AD28                            
0001AD28                            loc_1A264:				; XREF: Obj85_Index
0001AD28 2268 0034                  		movea.l	$34(a0),a1
0001AD2C 1011                       		move.b	(a1),d0
0001AD2E B010                       		cmp.b	(a0),d0
0001AD30 6600 FAE4                  		bne.w	Obj85_Delete
0001AD34 117C 0007 001C             		move.b	#7,$1C(a0)
0001AD3A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD40 6C00                       		bge.s	loc_1A280
0001AD42 6000                       		bra.s	loc_1A2A6
0001AD44                            ; ===========================================================================
0001AD44                            
0001AD44                            loc_1A280:
0001AD44 4A69 0010                  		tst.w	$10(a1)
0001AD48 6700                       		beq.s	loc_1A28C
0001AD4A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD50                            
0001AD50                            loc_1A28C:
0001AD50 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AD54 4EB9 0000 B04C             		jsr	AnimateSprite
0001AD5A                            
0001AD5A                            loc_1A296:
0001AD5A 2268 0034                  		movea.l	$34(a0),a1
0001AD5E 3169 0008 0008             		move.w	8(a1),8(a0)
0001AD64 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AD6A                            
0001AD6A                            loc_1A2A6:
0001AD6A 2268 0034                  		movea.l	$34(a0),a1
0001AD6E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AD74 7003                       		moveq	#3,d0
0001AD76 C028 0022                  		and.b	$22(a0),d0
0001AD7A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AD80 8128 0001                  		or.b	d0,1(a0)
0001AD84 4EF9 0000 DFEE             		jmp	DisplaySprite
0001AD8A                            ; ===========================================================================
0001AD8A                            
0001AD8A                            loc_1A2C6:				; XREF: Obj85_Index
0001AD8A 2268 0034                  		movea.l	$34(a0),a1
0001AD8E 1011                       		move.b	(a1),d0
0001AD90 B010                       		cmp.b	(a0),d0
0001AD92 6600 FA82                  		bne.w	Obj85_Delete
0001AD96 0CA9 0001 8850 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AD9E 6700                       		beq.s	loc_1A2E4
0001ADA0 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ADA6 60C2                       		bra.s	loc_1A2A6
0001ADA8                            ; ===========================================================================
0001ADA8                            
0001ADA8                            loc_1A2E4:
0001ADA8 117C 0001 001C             		move.b	#1,$1C(a0)
0001ADAE 4A29 0021                  		tst.b	$21(a1)
0001ADB2 6F00                       		ble.s	loc_1A312
0001ADB4 117C 0006 001C             		move.b	#6,$1C(a0)
0001ADBA 217C 0001 8850 0004        		move.l	#Map_Eggman,4(a0)
0001ADC2 317C 0400 0002             		move.w	#$400,2(a0)
0001ADC8 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001ADCC 4EB9 0000 B04C             		jsr	AnimateSprite
0001ADD2 6000 FF86                  		bra.w	loc_1A296
0001ADD6                            ; ===========================================================================
0001ADD6                            
0001ADD6                            loc_1A312:
0001ADD6 4A28 0001                  		tst.b	1(a0)
0001ADDA 6A00 FA3A                  		bpl.w	Obj85_Delete
0001ADDE 6100 D588                  		bsr.w	BossDefeated
0001ADE2 117C 0002 0018             		move.b	#2,$18(a0)
0001ADE8 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADEE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001ADF6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001ADFC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AE00 4EB9 0000 B04C             		jsr	AnimateSprite
0001AE06 6000 FF52                  		bra.w	loc_1A296
0001AE0A                            ; ===========================================================================
0001AE0A                            
0001AE0A                            loc_1A346:				; XREF: Obj85_Index
0001AE0A 08E8 0000 0022             		bset	#0,$22(a0)
0001AE10 2268 0034                  		movea.l	$34(a0),a1
0001AE14 0CA9 0001 8850 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE1C 6700                       		beq.s	loc_1A35E
0001AE1E 6000 FF4A                  		bra.w	loc_1A2A6
0001AE22                            ; ===========================================================================
0001AE22                            
0001AE22                            loc_1A35E:
0001AE22 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE28 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE2E 4A28 001E                  		tst.b	$1E(a0)
0001AE32 6600                       		bne.s	loc_1A376
0001AE34 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AE3A                            
0001AE3A                            loc_1A376:
0001AE3A 5328 001E                  		subq.b	#1,$1E(a0)
0001AE3E 6E00                       		bgt.s	loc_1A38A
0001AE40 5228 001A                  		addq.b	#1,$1A(a0)
0001AE44 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AE4A 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AE4E                            
0001AE4E                            loc_1A38A:
0001AE4E 6000 FF0A                  		bra.w	loc_1A296
0001AE52                            ; ===========================================================================
0001AE52                            
0001AE52                            loc_1A38E:				; XREF: Obj85_Index
0001AE52 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AE58 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE5C 9068 0008                  		sub.w	8(a0),d0
0001AE60 6500                       		bcs.s	loc_1A3A6
0001AE62 4A28 0001                  		tst.b	1(a0)
0001AE66 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AE6A                            
0001AE6A                            loc_1A3A6:
0001AE6A 4EF9 0000 DFEE             		jmp	DisplaySprite
0001AE70                            ; ===========================================================================
0001AE70                            
0001AE70                            loc_1A3AC:				; XREF: Obj85_Index
0001AE70 117C 0000 001A             		move.b	#0,$1A(a0)
0001AE76 08E8 0000 0022             		bset	#0,$22(a0)
0001AE7C 2268 0034                  		movea.l	$34(a0),a1
0001AE80 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AE86 6600                       		bne.s	loc_1A3D0
0001AE88 0CA9 0001 8850 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE90 6700 F984                  		beq.w	Obj85_Delete
0001AE94                            
0001AE94                            loc_1A3D0:
0001AE94 6000 FED4                  		bra.w	loc_1A2A6
0001AE98                            ; ===========================================================================
0001AE98                            Ani_obj85:
0001AE98                            	include "_anim\obj85.asm"
0001AE98                            ; ---------------------------------------------------------------------------
0001AE98                            ; Animation script - Eggman (FZ)
0001AE98                            ; ---------------------------------------------------------------------------
0001AE98 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AE9A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AE9E                            		even
0001AE9E                            		even
0001AE9E                            
0001AE9E                            Map_Eggman2:
0001AE9E                            	include "_maps\Eggman2.asm"
0001AE9E                            ; ---------------------------------------------------------------------------
0001AE9E                            ; Sprite mappings - Eggman (FZ)
0001AE9E                            ; ---------------------------------------------------------------------------
0001AE9E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AEA0 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AEA2 06                         byte_1A3DE:	dc.b 6
0001AEA3 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AEA8 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AEAD EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEB2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AEB7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AEBC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AEC1 06                         byte_1A3FD:	dc.b 6
0001AEC2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AEC7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AECC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AED1 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AED6 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AEDB 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AEE0                            		even
0001AEE0                            		even
0001AEE0                            
0001AEE0                            Map_FZBoss:
0001AEE0                            	include "_maps\FZ boss.asm"
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0                            ; Sprite mappings - boss (FZ)
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0 0000                       		dc.w byte_1A422-Map_FZBoss
0001AEE2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AEE4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AEE6 02                         byte_1A422:	dc.b 2
0001AEE7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AEEC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AEF1 03                         byte_1A42D:	dc.b 3
0001AEF2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AEF7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AEFC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AF01 02                         byte_1A43D:	dc.b 2
0001AF02 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AF07 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AF0C                            		even
0001AF0C                            		even
0001AF0C                            
0001AF0C                            ; ===========================================================================
0001AF0C                            
0001AF0C                            Obj84_Delete:
0001AF0C 4EF9 0000 E02A             		jmp	DeleteObject
0001AF12                            ; ===========================================================================
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12                            
0001AF12                            Obj84:					; XREF: Obj_Index
0001AF12 7000                       		moveq	#0,d0
0001AF14 1028 0024                  		move.b	$24(a0),d0
0001AF18 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AF1C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AF20                            ; ===========================================================================
0001AF20 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AF22 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AF24 0000                       		dc.w loc_1A57E-Obj84_Index
0001AF26                            
0001AF26 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AF2A 2550 0620                  		dc.w $2550, $620
0001AF2E 2490 04C0                  		dc.w $2490, $4C0
0001AF32 2510 04C0                  		dc.w $2510, $4C0
0001AF36                            ; ===========================================================================
0001AF36                            
0001AF36                            Obj84_Main:				; XREF: Obj84_Index
0001AF36 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AF3A 7000                       		moveq	#0,d0
0001AF3C 1028 0028                  		move.b	$28(a0),d0
0001AF40 D040                       		add.w	d0,d0
0001AF42 D2C0                       		adda.w	d0,a1
0001AF44 117C 0004 0001             		move.b	#4,1(a0)
0001AF4A 08E8 0007 0001             		bset	#7,1(a0)
0001AF50 08E8 0004 0001             		bset	#4,1(a0)
0001AF56 317C 0300 0002             		move.w	#$300,2(a0)
0001AF5C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AF64 3159 0008                  		move.w	(a1)+,8(a0)
0001AF68 3151 000C                  		move.w	(a1),$C(a0)
0001AF6C 3159 0038                  		move.w	(a1)+,$38(a0)
0001AF70 117C 0020 0016             		move.b	#$20,$16(a0)
0001AF76 117C 0060 0017             		move.b	#$60,$17(a0)
0001AF7C 117C 0020 0019             		move.b	#$20,$19(a0)
0001AF82 117C 0060 0016             		move.b	#$60,$16(a0)
0001AF88 117C 0003 0018             		move.b	#3,$18(a0)
0001AF8E 5428 0024                  		addq.b	#2,$24(a0)
0001AF92                            
0001AF92                            loc_1A4CE:				; XREF: Obj84_Index
0001AF92 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AF98 6F00                       		ble.s	loc_1A4DC
0001AF9A 08E8 0001 0001             		bset	#1,1(a0)
0001AFA0                            
0001AFA0                            loc_1A4DC:
0001AFA0 42A8 003C                  		clr.l	$3C(a0)
0001AFA4 4A28 0029                  		tst.b	$29(a0)
0001AFA8 6700                       		beq.s	loc_1A4EA
0001AFAA 5428 0024                  		addq.b	#2,$24(a0)
0001AFAE                            
0001AFAE                            loc_1A4EA:
0001AFAE 2028 003C                  		move.l	$3C(a0),d0
0001AFB2 2228 0038                  		move.l	$38(a0),d1
0001AFB6 D280                       		add.l	d0,d1
0001AFB8 4841                       		swap	d1
0001AFBA 3141 000C                  		move.w	d1,$C(a0)
0001AFBE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AFC4 6600                       		bne.s	loc_1A524
0001AFC6 4A68 0030                  		tst.w	$30(a0)
0001AFCA 6A00                       		bpl.s	loc_1A524
0001AFCC 70F6                       		moveq	#-$A,d0
0001AFCE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFD4 6F00                       		ble.s	loc_1A514
0001AFD6 700E                       		moveq	#$E,d0
0001AFD8                            
0001AFD8                            loc_1A514:
0001AFD8 D240                       		add.w	d0,d1
0001AFDA 2268 0034                  		movea.l	$34(a0),a1
0001AFDE 3341 000C                  		move.w	d1,$C(a1)
0001AFE2 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFE8                            
0001AFE8                            loc_1A524:
0001AFE8 323C 002B                  		move.w	#$2B,d1
0001AFEC 343C 0060                  		move.w	#$60,d2
0001AFF0 363C 0061                  		move.w	#$61,d3
0001AFF4 3828 0008                  		move.w	8(a0),d4
0001AFF8 4EB9 0001 03BE             		jsr	SolidObject
0001AFFE 7000                       		moveq	#0,d0
0001B000 3228 003C                  		move.w	$3C(a0),d1
0001B004 6A00                       		bpl.s	loc_1A550
0001B006 4441                       		neg.w	d1
0001B008 5141                       		subq.w	#8,d1
0001B00A 6500                       		bcs.s	loc_1A55C
0001B00C 5200                       		addq.b	#1,d0
0001B00E E841                       		asr.w	#4,d1
0001B010 D041                       		add.w	d1,d0
0001B012 6000                       		bra.s	loc_1A55C
0001B014                            ; ===========================================================================
0001B014                            
0001B014                            loc_1A550:
0001B014 0441 0027                  		subi.w	#$27,d1
0001B018 6500                       		bcs.s	loc_1A55C
0001B01A 5200                       		addq.b	#1,d0
0001B01C E841                       		asr.w	#4,d1
0001B01E D041                       		add.w	d1,d0
0001B020                            
0001B020                            loc_1A55C:
0001B020 1140 001A                  		move.b	d0,$1A(a0)
0001B024 3038 D008                  		move.w	($FFFFD008).w,d0
0001B028 9068 0008                  		sub.w	8(a0),d0
0001B02C 6B00                       		bmi.s	loc_1A578
0001B02E 0440 0140                  		subi.w	#$140,d0
0001B032 6B00                       		bmi.s	loc_1A578
0001B034 4A28 0001                  		tst.b	1(a0)
0001B038 6A00 FED2                  		bpl.w	Obj84_Delete
0001B03C                            
0001B03C                            loc_1A578:
0001B03C 4EF9 0000 DFEE             		jmp	DisplaySprite
0001B042                            ; ===========================================================================
0001B042                            
0001B042                            loc_1A57E:				; XREF: Obj84_Index
0001B042 7000                       		moveq	#0,d0
0001B044 1028 0028                  		move.b	$28(a0),d0
0001B048 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B04C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B050 6000 FF5C                  		bra.w	loc_1A4EA
0001B054                            ; ===========================================================================
0001B054 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B056 0000                       		dc.w loc_1A598-off_1A590
0001B058 0000                       		dc.w loc_1A604-off_1A590
0001B05A 0000                       		dc.w loc_1A604-off_1A590
0001B05C                            ; ===========================================================================
0001B05C                            
0001B05C                            loc_1A598:				; XREF: off_1A590
0001B05C 4A28 0029                  		tst.b	$29(a0)
0001B060 6600                       		bne.s	loc_1A5D4
0001B062 2268 0034                  		movea.l	$34(a0),a1
0001B066 4A29 0021                  		tst.b	$21(a1)
0001B06A 6600                       		bne.s	loc_1A5B4
0001B06C 6100 D2FA                  		bsr.w	BossDefeated
0001B070 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B078                            
0001B078                            loc_1A5B4:
0001B078 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B080 6400                       		bcc.s	locret_1A602
0001B082 42A8 003C                  		clr.l	$3C(a0)
0001B086 2268 0034                  		movea.l	$34(a0),a1
0001B08A 5369 0032                  		subq.w	#1,$32(a1)
0001B08E 4269 0030                  		clr.w	$30(a1)
0001B092 5528 0024                  		subq.b	#2,$24(a0)
0001B096 4E75                       		rts	
0001B098                            ; ===========================================================================
0001B098                            
0001B098                            loc_1A5D4:
0001B098 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B09E 6C00                       		bge.s	loc_1A5E4
0001B0A0 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B0A8                            
0001B0A8                            loc_1A5E4:
0001B0A8 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B0B0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B0B6 6E00                       		bgt.s	locret_1A602
0001B0B8 4268 003E                  		clr.w	$3E(a0)
0001B0BC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B0C2 4228 0029                  		clr.b	$29(a0)
0001B0C6                            
0001B0C6                            locret_1A602:
0001B0C6 4E75                       		rts	
0001B0C8                            ; ===========================================================================
0001B0C8                            
0001B0C8                            loc_1A604:				; XREF: off_1A590
0001B0C8 08E8 0001 0001             		bset	#1,1(a0)
0001B0CE 4A28 0029                  		tst.b	$29(a0)
0001B0D2 6600                       		bne.s	loc_1A646
0001B0D4 2268 0034                  		movea.l	$34(a0),a1
0001B0D8 4A29 0021                  		tst.b	$21(a1)
0001B0DC 6600                       		bne.s	loc_1A626
0001B0DE 6100 D288                  		bsr.w	BossDefeated
0001B0E2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B0EA                            
0001B0EA                            loc_1A626:
0001B0EA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B0F2 6400                       		bcc.s	locret_1A674
0001B0F4 42A8 003C                  		clr.l	$3C(a0)
0001B0F8 2268 0034                  		movea.l	$34(a0),a1
0001B0FC 5369 0032                  		subq.w	#1,$32(a1)
0001B100 4269 0030                  		clr.w	$30(a1)
0001B104 5528 0024                  		subq.b	#2,$24(a0)
0001B108 4E75                       		rts	
0001B10A                            ; ===========================================================================
0001B10A                            
0001B10A                            loc_1A646:
0001B10A 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B110 6D00                       		blt.s	loc_1A656
0001B112 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B11A                            
0001B11A                            loc_1A656:
0001B11A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B122 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B128 6D00                       		blt.s	locret_1A674
0001B12A 4268 003E                  		clr.w	$3E(a0)
0001B12E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B134 4228 0029                  		clr.b	$29(a0)
0001B138                            
0001B138                            locret_1A674:
0001B138 4E75                       		rts	
0001B13A                            ; ===========================================================================
0001B13A                            ; ---------------------------------------------------------------------------
0001B13A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B13A                            ; ---------------------------------------------------------------------------
0001B13A                            Map_obj84:
0001B13A                            	include "_maps\obj84.asm"
0001B13A                            ; ---------------------------------------------------------------------------
0001B13A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B13A                            ; ---------------------------------------------------------------------------
0001B13A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B13E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B142 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B146 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B14A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B14E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B152 06                         byte_1A68E:	dc.b 6
0001B153 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B158 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B15D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B162 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B167 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B16C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B171 08                         byte_1A6AD:	dc.b 8
0001B172 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B177 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B17C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B181 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B186 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B18B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B190 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B195 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B19A 0A                         byte_1A6D6:	dc.b $A
0001B19B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1A0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1A5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1AA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1AF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1B4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1B9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1BE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1C3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B1C8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B1CD 0C                         byte_1A709:	dc.b $C
0001B1CE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1D3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1D8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1DD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1E2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1E7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1EC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1F1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1F6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B1FB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B200 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B205 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B20A 0D                         byte_1A746:	dc.b $D
0001B20B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B210 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B215 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B21A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B21F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B224 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B229 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B22E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B233 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B238 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B23D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B242 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B247 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B24C 0E                         byte_1A788:	dc.b $E
0001B24D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B252 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B257 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B25C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B261 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B266 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B26B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B270 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B275 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B27A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B27F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B284 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B289 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B28E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B293 02                         byte_1A7CF:	dc.b 2
0001B294 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B299 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B29E                            		even
0001B29E                            		even
0001B29E                            
0001B29E                            ; ===========================================================================
0001B29E                            ; ---------------------------------------------------------------------------
0001B29E                            ; Object 86 - energy balls (FZ)
0001B29E                            ; ---------------------------------------------------------------------------
0001B29E                            
0001B29E                            Obj86:					; XREF: Obj_Index
0001B29E 7000                       		moveq	#0,d0
0001B2A0 1028 0024                  		move.b	$24(a0),d0
0001B2A4 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B2A8 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B2AC                            ; ===========================================================================
0001B2AC 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B2AE 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B2B0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B2B2 0000                       		dc.w loc_1A962-Obj86_Index
0001B2B4 0000                       		dc.w loc_1A982-Obj86_Index
0001B2B6                            ; ===========================================================================
0001B2B6                            
0001B2B6                            Obj86_Main:				; XREF: Obj86_Index
0001B2B6 317C 2588 0008             		move.w	#$2588,8(a0)
0001B2BC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B2C2 317C 0300 0002             		move.w	#$300,2(a0)
0001B2C8 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B2D0 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2D6 117C 0003 0018             		move.b	#3,$18(a0)
0001B2DC 117C 0008 0017             		move.b	#8,$17(a0)
0001B2E2 117C 0008 0016             		move.b	#8,$16(a0)
0001B2E8 117C 0004 0001             		move.b	#4,1(a0)
0001B2EE 08E8 0007 0001             		bset	#7,1(a0)
0001B2F4 5428 0024                  		addq.b	#2,$24(a0)
0001B2F8                            
0001B2F8                            Obj86_Generator:			; XREF: Obj86_Index
0001B2F8 2268 0034                  		movea.l	$34(a0),a1
0001B2FC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B302 6600                       		bne.s	loc_1A850
0001B304 10BC 003F                  		move.b	#$3F,(a0)
0001B308 117C 0000 0024             		move.b	#0,$24(a0)
0001B30E 4EF9 0000 DFEE             		jmp	DisplaySprite
0001B314                            ; ===========================================================================
0001B314                            
0001B314                            loc_1A850:
0001B314 117C 0000 001C             		move.b	#0,$1C(a0)
0001B31A 4A28 0029                  		tst.b	$29(a0)
0001B31E 6700                       		beq.s	loc_1A86C
0001B320 5428 0024                  		addq.b	#2,$24(a0)
0001B324 117C 0001 001C             		move.b	#1,$1C(a0)
0001B32A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B330                            
0001B330                            loc_1A86C:
0001B330 323C 0013                  		move.w	#$13,d1
0001B334 343C 0008                  		move.w	#8,d2
0001B338 363C 0011                  		move.w	#$11,d3
0001B33C 3828 0008                  		move.w	8(a0),d4
0001B340 4EB9 0001 03BE             		jsr	SolidObject
0001B346 3038 D008                  		move.w	($FFFFD008).w,d0
0001B34A 9068 0008                  		sub.w	8(a0),d0
0001B34E 6B00                       		bmi.s	loc_1A89A
0001B350 0440 0140                  		subi.w	#$140,d0
0001B354 6B00                       		bmi.s	loc_1A89A
0001B356 4A28 0001                  		tst.b	1(a0)
0001B35A 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B35E                            
0001B35E                            loc_1A89A:
0001B35E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B362 4EB9 0000 B04C             		jsr	AnimateSprite
0001B368 4EF9 0000 DFEE             		jmp	DisplaySprite
0001B36E                            ; ===========================================================================
0001B36E                            
0001B36E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B36E 4A28 0029                  		tst.b	$29(a0)
0001B372 6700 0000                  		beq.w	loc_1A954
0001B376 4228 0029                  		clr.b	$29(a0)
0001B37A D068 0030                  		add.w	$30(a0),d0
0001B37E 0240 001E                  		andi.w	#$1E,d0
0001B382 D4C0                       		adda.w	d0,a2
0001B384 5868 0030                  		addq.w	#4,$30(a0)
0001B388 4268 0032                  		clr.w	$32(a0)
0001B38C 7403                       		moveq	#3,d2
0001B38E                            
0001B38E                            Obj86_Loop:
0001B38E 4EB9 0000 E48A             		jsr	SingleObjLoad2
0001B394 6600 0000                  		bne.w	loc_1A954
0001B398 12BC 0086                  		move.b	#$86,(a1)
0001B39C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3A2 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B3A8 137C 0008 0024             		move.b	#8,$24(a1)
0001B3AE 337C 2300 0002             		move.w	#$2300,2(a1)
0001B3B4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B3BC 137C 000C 0016             		move.b	#$C,$16(a1)
0001B3C2 137C 000C 0017             		move.b	#$C,$17(a1)
0001B3C8 137C 0000 0020             		move.b	#0,$20(a1)
0001B3CE 137C 0003 0018             		move.b	#3,$18(a1)
0001B3D4 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B3DA 137C 0004 0001             		move.b	#4,1(a1)
0001B3E0 08E9 0007 0001             		bset	#7,1(a1)
0001B3E6 2348 0034                  		move.l	a0,$34(a1)
0001B3EA 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B3F0 3228 0032                  		move.w	$32(a0),d1
0001B3F4 C3FC FFB1                  		muls.w	#-$4F,d1
0001B3F8 0641 2578                  		addi.w	#$2578,d1
0001B3FC 0240 001F                  		andi.w	#$1F,d0
0001B400 0440 0010                  		subi.w	#$10,d0
0001B404 D041                       		add.w	d1,d0
0001B406 3340 0030                  		move.w	d0,$30(a1)
0001B40A 5268 0032                  		addq.w	#1,$32(a0)
0001B40E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B414 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B418                            
0001B418                            loc_1A954:
0001B418 4A68 0032                  		tst.w	$32(a0)
0001B41C 6600                       		bne.s	loc_1A95E
0001B41E 5428 0024                  		addq.b	#2,$24(a0)
0001B422                            
0001B422                            loc_1A95E:
0001B422 6000 FF0C                  		bra.w	loc_1A86C
0001B426                            ; ===========================================================================
0001B426                            
0001B426                            loc_1A962:				; XREF: Obj86_Index
0001B426 117C 0002 001C             		move.b	#2,$1C(a0)
0001B42C 4A68 0038                  		tst.w	$38(a0)
0001B430 6600                       		bne.s	loc_1A97E
0001B432 117C 0002 0024             		move.b	#2,$24(a0)
0001B438 2268 0034                  		movea.l	$34(a0),a1
0001B43C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B442                            
0001B442                            loc_1A97E:
0001B442 6000 FEEC                  		bra.w	loc_1A86C
0001B446                            ; ===========================================================================
0001B446                            
0001B446                            loc_1A982:				; XREF: Obj86_Index
0001B446 7000                       		moveq	#0,d0
0001B448 1028 0025                  		move.b	$25(a0),d0
0001B44C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B450 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B454 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B458 4EB9 0000 B04C             		jsr	AnimateSprite
0001B45E 4EF9 0000 DFEE             		jmp	DisplaySprite
0001B464                            ; ===========================================================================
0001B464 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B466 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B468 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B46A                            ; ===========================================================================
0001B46A                            
0001B46A                            loc_1A9A6:				; XREF: Obj86_Index2
0001B46A 3028 0030                  		move.w	$30(a0),d0
0001B46E 9068 0008                  		sub.w	8(a0),d0
0001B472 E940                       		asl.w	#4,d0
0001B474 3140 0010                  		move.w	d0,$10(a0)
0001B478 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B47E 5428 0025                  		addq.b	#2,$25(a0)
0001B482 4E75                       		rts	
0001B484                            ; ===========================================================================
0001B484                            
0001B484                            loc_1A9C0:				; XREF: Obj86_Index2
0001B484 4A68 0010                  		tst.w	$10(a0)
0001B488 6700                       		beq.s	loc_1A9E6
0001B48A 4EB9 0000 DFC8             		jsr	SpeedToPos
0001B490 3028 0008                  		move.w	8(a0),d0
0001B494 9068 0030                  		sub.w	$30(a0),d0
0001B498 6400                       		bcc.s	loc_1A9E6
0001B49A 4268 0010                  		clr.w	$10(a0)
0001B49E D168 0008                  		add.w	d0,8(a0)
0001B4A2 2268 0034                  		movea.l	$34(a0),a1
0001B4A6 5369 0032                  		subq.w	#1,$32(a1)
0001B4AA                            
0001B4AA                            loc_1A9E6:
0001B4AA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B4B0 5368 0028                  		subq.w	#1,$28(a0)
0001B4B4 6600                       		bne.s	locret_1AA1C
0001B4B6 5428 0025                  		addq.b	#2,$25(a0)
0001B4BA 117C 0001 001C             		move.b	#1,$1C(a0)
0001B4C0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B4C6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B4CC 7000                       		moveq	#0,d0
0001B4CE 3038 D008                  		move.w	($FFFFD008).w,d0
0001B4D2 9068 0008                  		sub.w	8(a0),d0
0001B4D6 3140 0010                  		move.w	d0,$10(a0)
0001B4DA 317C 0140 0012             		move.w	#$140,$12(a0)
0001B4E0                            
0001B4E0                            locret_1AA1C:
0001B4E0 4E75                       		rts	
0001B4E2                            ; ===========================================================================
0001B4E2                            
0001B4E2                            loc_1AA1E:				; XREF: Obj86_Index2
0001B4E2 4EB9 0000 DFC8             		jsr	SpeedToPos
0001B4E8 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B4EE 6400                       		bcc.s	loc_1AA34
0001B4F0 5368 0028                  		subq.w	#1,$28(a0)
0001B4F4 6700                       		beq.s	loc_1AA34
0001B4F6 4E75                       		rts	
0001B4F8                            ; ===========================================================================
0001B4F8                            
0001B4F8                            loc_1AA34:
0001B4F8 2268 0034                  		movea.l	$34(a0),a1
0001B4FC 5369 0038                  		subq.w	#1,$38(a1)
0001B500 6000 FA0A                  		bra.w	Obj84_Delete
0001B504                            ; ===========================================================================
0001B504                            Ani_obj86:
0001B504                            	include "_anim\obj86.asm"
0001B504                            ; ---------------------------------------------------------------------------
0001B504                            ; Animation script - energy ball launcher (FZ)
0001B504                            ; ---------------------------------------------------------------------------
0001B504 0000                       		dc.w byte_1AA46-Ani_obj86
0001B506 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B508 0000                       		dc.w byte_1AA50-Ani_obj86
0001B50A 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B50E 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B514 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B51A                            		even
0001B51A                            		even
0001B51A                            
0001B51A                            ; ---------------------------------------------------------------------------
0001B51A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B51A                            ; ---------------------------------------------------------------------------
0001B51A                            Map_obj86:
0001B51A                            	include "_maps\obj86.asm"
0001B51A                            ; ---------------------------------------------------------------------------
0001B51A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B51A                            ; ---------------------------------------------------------------------------
0001B51A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B51E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B522 01                         byte_1AA5E:	dc.b 1
0001B523 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B528 01                         byte_1AA64:	dc.b 1
0001B529 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B52E 01                         byte_1AA6A:	dc.b 1
0001B52F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B534 01                         byte_1AA70:	dc.b 1
0001B535 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B53A                            		even
0001B53A                            		even
0001B53A                            
0001B53A                            Ani_obj86a:
0001B53A                            	include "_anim\obj86a.asm"
0001B53A                            ; ---------------------------------------------------------------------------
0001B53A                            ; Animation script - energy balls (FZ)
0001B53A                            ; ---------------------------------------------------------------------------
0001B53A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B53C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B53E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B54D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B55C 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B560 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B56A                            		even
0001B56A                            		even
0001B56A                            
0001B56A                            ; ---------------------------------------------------------------------------
0001B56A                            ; Sprite mappings - energy balls (FZ)
0001B56A                            ; ---------------------------------------------------------------------------
0001B56A                            Map_obj86a:
0001B56A                            	include "_maps\obj86a.asm"
0001B56A                            ; ---------------------------------------------------------------------------
0001B56A                            ; Sprite mappings - energy balls (FZ)
0001B56A                            ; ---------------------------------------------------------------------------
0001B56A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B56E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B572 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B576 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B57A 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B57E 0000                       		dc.w byte_1AB20-Map_obj86a
0001B580 02                         byte_1AABC:	dc.b 2
0001B581 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B586 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B58B 02                         byte_1AAC7:	dc.b 2
0001B58C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B591 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B596 02                         byte_1AAD2:	dc.b 2
0001B597 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B59C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B5A1 02                         byte_1AADD:	dc.b 2
0001B5A2 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B5A7 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B5AC 02                         byte_1AAE8:	dc.b 2
0001B5AD F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B5B2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B5B7 02                         byte_1AAF3:	dc.b 2
0001B5B8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B5BD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B5C2 01                         byte_1AAFE:	dc.b 1
0001B5C3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B5C8 01                         byte_1AB04:	dc.b 1
0001B5C9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B5CE 02                         byte_1AB0A:	dc.b 2
0001B5CF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B5D4 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B5D9 02                         byte_1AB15:	dc.b 2
0001B5DA F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B5DF F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B5E4 00                         byte_1AB20:	dc.b 0
0001B5E6 00                         		even
0001B5E6 00                         		even
0001B5E6                            
0001B5E6                            ; ===========================================================================
0001B5E6                            ; ---------------------------------------------------------------------------
0001B5E6                            ; Object 3E - prison capsule
0001B5E6                            ; ---------------------------------------------------------------------------
0001B5E6                            
0001B5E6                            Obj3E:					; XREF: Obj_Index
0001B5E6 7000                       		moveq	#0,d0
0001B5E8 1028 0024                  		move.b	$24(a0),d0
0001B5EC 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B5F0 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B5F4 3028 0008                  		move.w	8(a0),d0
0001B5F8 0240 FF80                  		andi.w	#$FF80,d0
0001B5FC 3238 F700                  		move.w	($FFFFF700).w,d1
0001B600 0441 0080                  		subi.w	#$80,d1
0001B604 0241 FF80                  		andi.w	#$FF80,d1
0001B608 9041                       		sub.w	d1,d0
0001B60A 0C40 0280                  		cmpi.w	#$280,d0
0001B60E 6200                       		bhi.s	Obj3E_Delete
0001B610 4EF9 0000 DFEE             		jmp	DisplaySprite
0001B616                            ; ===========================================================================
0001B616                            
0001B616                            Obj3E_Delete:
0001B616 4EF9 0000 E02A             		jmp	DeleteObject
0001B61C                            ; ===========================================================================
0001B61C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B61E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B620 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B622 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B624 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B626 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B628 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B62A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B62C                            
0001B62C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B630 040C 0501                  		dc.b 4,	$C, 5, 1
0001B634 0610 0403                  		dc.b 6,	$10, 4,	3
0001B638 0810 0305                  		dc.b 8,	$10, 3,	5
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            Obj3E_Main:				; XREF: Obj3E_Index
0001B63C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B644 317C 049D 0002             		move.w	#$49D,2(a0)
0001B64A 117C 0004 0001             		move.b	#4,1(a0)
0001B650 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B656 7000                       		moveq	#0,d0
0001B658 1028 0028                  		move.b	$28(a0),d0
0001B65C E548                       		lsl.w	#2,d0
0001B65E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B662 1159 0024                  		move.b	(a1)+,$24(a0)
0001B666 1159 0019                  		move.b	(a1)+,$19(a0)
0001B66A 1159 0018                  		move.b	(a1)+,$18(a0)
0001B66E 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B672 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B676 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B678 117C 0006 0020             		move.b	#6,$20(a0)
0001B67E 117C 0008 0021             		move.b	#8,$21(a0)
0001B684                            
0001B684                            Obj3E_Not02:
0001B684 4E75                       		rts	
0001B686                            ; ===========================================================================
0001B686                            
0001B686                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B686 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B68C 6700                       		beq.s	Obj3E_ChkOpened
0001B68E 323C 002B                  		move.w	#$2B,d1
0001B692 343C 0018                  		move.w	#$18,d2
0001B696 363C 0018                  		move.w	#$18,d3
0001B69A 3828 0008                  		move.w	8(a0),d4
0001B69E 4EF9 0001 03BE             		jmp	SolidObject
0001B6A4                            ; ===========================================================================
0001B6A4                            
0001B6A4                            Obj3E_ChkOpened:
0001B6A4 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B6A8 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B6AA 4228 0025                  		clr.b	$25(a0)
0001B6AE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B6B4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B6BA                            
0001B6BA                            Obj3E_DoOpen:
0001B6BA 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B6C0 4E75                       		rts	
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B6C2 323C 0017                  		move.w	#$17,d1
0001B6C6 343C 0008                  		move.w	#8,d2
0001B6CA 363C 0008                  		move.w	#8,d3
0001B6CE 3828 0008                  		move.w	8(a0),d4
0001B6D2 4EB9 0001 03BE             		jsr	SolidObject
0001B6D8 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B6DE 4EB9 0000 B04C             		jsr	AnimateSprite
0001B6E4 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B6EA 4A28 0025                  		tst.b	$25(a0)
0001B6EE 6700                       		beq.s	locret_1AC60
0001B6F0 5068 000C                  		addq.w	#8,$C(a0)
0001B6F4 117C 000A 0024             		move.b	#$A,$24(a0)
0001B6FA 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B700 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B704 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B708 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B70E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B714 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B716 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B71C 6000                       		bra.s	Obj3E_ContinueCode
0001B71E                            
0001B71E                            Obj3E_MoveLeft:
0001B71E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B724                            
0001B724                            Obj3E_ContinueCode:
0001B724 4228 0025                  		clr.b	$25(a0)
0001B728 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B72E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B734                            
0001B734                            locret_1AC60:
0001B734 4E75                       		rts	
0001B736                            ; ===========================================================================
0001B736                            
0001B736                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B736 7007                       		moveq	#7,d0
0001B738 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B73C 6600                       		bne.s	loc_1ACA0
0001B73E 4EB9 0000 E474             		jsr	SingleObjLoad
0001B744 6600                       		bne.s	loc_1ACA0
0001B746 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B74A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B750 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B756 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B75C 7200                       		moveq	#0,d1
0001B75E 1200                       		move.b	d0,d1
0001B760 E409                       		lsr.b	#2,d1
0001B762 0441 0020                  		subi.w	#$20,d1
0001B766 D369 0008                  		add.w	d1,8(a1)
0001B76A E048                       		lsr.w	#8,d0
0001B76C E608                       		lsr.b	#3,d0
0001B76E D169 000C                  		add.w	d0,$C(a1)
0001B772                            
0001B772                            loc_1ACA0:
0001B772 5368 001E                  		subq.w	#1,$1E(a0)
0001B776 6700                       		beq.s	Obj3E_MakeAnimal
0001B778 4E75                       		rts	
0001B77A                            ; ===========================================================================
0001B77A                            
0001B77A                            Obj3E_MakeAnimal:
0001B77A 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B780 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B786 117C 0006 001A             		move.b	#6,$1A(a0)
0001B78C 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B792 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B798 7C07                       		moveq	#7,d6
0001B79A 3A3C 009A                  		move.w	#$9A,d5
0001B79E 78E4                       		moveq	#-$1C,d4
0001B7A0                            
0001B7A0                            Obj3E_Loop:
0001B7A0 4EB9 0000 E474             		jsr	SingleObjLoad
0001B7A6 6600                       		bne.s	locret_1ACF8
0001B7A8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B7AC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7B8 D969 0008                  		add.w	d4,8(a1)
0001B7BC 5E44                       		addq.w	#7,d4
0001B7BE 3345 0036                  		move.w	d5,$36(a1)
0001B7C2 5145                       		subq.w	#8,d5
0001B7C4 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B7C8                            
0001B7C8                            locret_1ACF8:
0001B7C8 4E75                       		rts	
0001B7CA                            ; ===========================================================================
0001B7CA                            
0001B7CA                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B7CA 7007                       		moveq	#7,d0
0001B7CC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B7D0 6600                       		bne.s	loc_1AD38
0001B7D2 4EB9 0000 E474             		jsr	SingleObjLoad
0001B7D8 6600                       		bne.s	loc_1AD38
0001B7DA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B7DE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7EA 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B7F0 0240 001F                  		andi.w	#$1F,d0
0001B7F4 5D40                       		subq.w	#6,d0
0001B7F6 4A41                       		tst.w	d1
0001B7F8 6A00                       		bpl.s	loc_1AD2E
0001B7FA 4440                       		neg.w	d0
0001B7FC                            
0001B7FC                            loc_1AD2E:
0001B7FC D169 0008                  		add.w	d0,8(a1)
0001B800 337C 000C 0036             		move.w	#$C,$36(a1)
0001B806                            
0001B806                            loc_1AD38:
0001B806 5368 001E                  		subq.w	#1,$1E(a0)
0001B80A 6600                       		bne.s	locret_1AD48
0001B80C 5428 0024                  		addq.b	#2,$24(a0)
0001B810 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B816                            
0001B816                            locret_1AD48:
0001B816 4E75                       		rts	
0001B818                            ; ===========================================================================
0001B818                            
0001B818                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B818 703E                       		moveq	#$3E,d0
0001B81A 7228                       		moveq	#$28,d1
0001B81C 7440                       		moveq	#$40,d2
0001B81E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B822                            
0001B822                            Obj3E_FindObj28:
0001B822 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B824 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B826 D2C2                       		adda.w	d2,a1		; next object RAM
0001B828 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B82C                            
0001B82C 4EB9 0000 F67A             		jsr	GotThroughAct
0001B832 4EF9 0000 E02A             		jmp	DeleteObject
0001B838                            ; ===========================================================================
0001B838                            
0001B838                            Obj3E_Obj28Found:
0001B838 4E75                       		rts	
0001B83A                            ; ===========================================================================
0001B83A                            Ani_obj3E:
0001B83A                            	include "_anim\obj3E.asm"
0001B83A                            ; ---------------------------------------------------------------------------
0001B83A                            ; Animation script - prison capsule
0001B83A                            ; ---------------------------------------------------------------------------
0001B83A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B83C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B83E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B842                            		even
0001B842                            		even
0001B842                            
0001B842                            ; ---------------------------------------------------------------------------
0001B842                            ; Sprite mappings - prison capsule
0001B842                            ; ---------------------------------------------------------------------------
0001B842                            Map_obj3E:
0001B842                            	include "_maps\obj3E.asm"
0001B842                            ; ---------------------------------------------------------------------------
0001B842                            ; Sprite mappings - prison capsule
0001B842                            ; ---------------------------------------------------------------------------
0001B842 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B846 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B84A 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B84E 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B850 07                         byte_1AD82:	dc.b 7
0001B851 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B856 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B85B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B860 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B865 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B86A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B86F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B874 01                         byte_1ADA6:	dc.b 1
0001B875 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B87A 06                         byte_1ADAC:	dc.b 6
0001B87B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B880 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B885 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B88A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B88F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B894 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B899 01                         byte_1ADCB:	dc.b 1
0001B89A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B89F 02                         byte_1ADD1:	dc.b 2
0001B8A0 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B8A5 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B8AA 01                         byte_1ADDC:	dc.b 1
0001B8AB F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B8B0 00                         byte_1ADE2:	dc.b 0
0001B8B2 00                         		even
0001B8B2 00                         		even
0001B8B2                            
0001B8B2                            ; ---------------------------------------------------------------------------
0001B8B2                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B8B2                            ; ---------------------------------------------------------------------------
0001B8B2                            
0001B8B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8B2                            
0001B8B2                            
0001B8B2                            TouchResponse:				; XREF: Obj01
0001B8B2 4E71                       		nop	
0001B8B4 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B8B8 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B8BC 5142                       		subq.w	#8,d2
0001B8BE 7A00                       		moveq	#0,d5
0001B8C0 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B8C4 5705                       		subq.b	#3,d5
0001B8C6 9645                       		sub.w	d5,d3
0001B8C8 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B8CE 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B8D0 0643 000C                  		addi.w	#$C,d3
0001B8D4 7A0A                       		moveq	#$A,d5
0001B8D6                            
0001B8D6                            Touch_NoDuck:
0001B8D6 383C 0010                  		move.w	#$10,d4
0001B8DA DA45                       		add.w	d5,d5
0001B8DC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B8E0 3C3C 005F                  		move.w	#$5F,d6
0001B8E4                            
0001B8E4                            Touch_Loop:
0001B8E4 4A29 0001                  		tst.b	1(a1)
0001B8E8 6A00                       		bpl.s	Touch_NextObj
0001B8EA 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B8EE 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B8F0                            
0001B8F0                            Touch_NextObj:
0001B8F0 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B8F4 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B8F8                            
0001B8F8 7000                       		moveq	#0,d0
0001B8FA 4E75                       		rts	
0001B8FC                            ; ===========================================================================
0001B8FC 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B8FE 0C14                       		dc.b   $C, $14
0001B900 140C                       		dc.b  $14,  $C
0001B902 0410                       		dc.b	4, $10
0001B904 0C12                       		dc.b   $C, $12
0001B906 1010                       		dc.b  $10, $10
0001B908 0606                       		dc.b	6,   6
0001B90A 180C                       		dc.b  $18,  $C
0001B90C 0C10                       		dc.b   $C, $10
0001B90E 100C                       		dc.b  $10,  $C
0001B910 0808                       		dc.b	8,   8
0001B912 1410                       		dc.b  $14, $10
0001B914 1408                       		dc.b  $14,   8
0001B916 0E0E                       		dc.b   $E,  $E
0001B918 1818                       		dc.b  $18, $18
0001B91A 2810                       		dc.b  $28, $10
0001B91C 1018                       		dc.b  $10, $18
0001B91E 0810                       		dc.b	8, $10
0001B920 2070                       		dc.b  $20, $70
0001B922 4020                       		dc.b  $40, $20
0001B924 8020                       		dc.b  $80, $20
0001B926 2020                       		dc.b  $20, $20
0001B928 0808                       		dc.b	8,   8
0001B92A 0404                       		dc.b	4,   4
0001B92C 2008                       		dc.b  $20,   8
0001B92E 0C0C                       		dc.b   $C,  $C
0001B930 0804                       		dc.b	8,   4
0001B932 1804                       		dc.b  $18,   4
0001B934 2804                       		dc.b  $28,   4
0001B936 0408                       		dc.b	4,   8
0001B938 0418                       		dc.b	4, $18
0001B93A 0428                       		dc.b	4, $28
0001B93C 0420                       		dc.b	4, $20
0001B93E 1818                       		dc.b  $18, $18
0001B940 0C18                       		dc.b   $C, $18
0001B942 4808                       		dc.b  $48,   8
0001B944                            ; ===========================================================================
0001B944                            
0001B944                            Touch_Height:				; XREF: TouchResponse
0001B944 0240 003F                  		andi.w	#$3F,d0
0001B948 D040                       		add.w	d0,d0
0001B94A 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B94E 7200                       		moveq	#0,d1
0001B950 121A                       		move.b	(a2)+,d1
0001B952 3029 0008                  		move.w	8(a1),d0
0001B956 9041                       		sub.w	d1,d0
0001B958 9042                       		sub.w	d2,d0
0001B95A 6400                       		bcc.s	loc_1AE98
0001B95C D241                       		add.w	d1,d1
0001B95E D041                       		add.w	d1,d0
0001B960 6500                       		bcs.s	Touch_Width
0001B962 6000 FF8C                  		bra.w	Touch_NextObj
0001B966                            ; ===========================================================================
0001B966                            
0001B966                            loc_1AE98:
0001B966 B044                       		cmp.w	d4,d0
0001B968 6200 FF86                  		bhi.w	Touch_NextObj
0001B96C                            
0001B96C                            Touch_Width:
0001B96C 7200                       		moveq	#0,d1
0001B96E 121A                       		move.b	(a2)+,d1
0001B970 3029 000C                  		move.w	$C(a1),d0
0001B974 9041                       		sub.w	d1,d0
0001B976 9043                       		sub.w	d3,d0
0001B978 6400                       		bcc.s	loc_1AEB6
0001B97A D241                       		add.w	d1,d1
0001B97C D240                       		add.w	d0,d1
0001B97E 6500                       		bcs.s	Touch_ChkValue
0001B980 6000 FF6E                  		bra.w	Touch_NextObj
0001B984                            ; ===========================================================================
0001B984                            
0001B984                            loc_1AEB6:
0001B984 B045                       		cmp.w	d5,d0
0001B986 6200 FF68                  		bhi.w	Touch_NextObj
0001B98A                            
0001B98A                            Touch_ChkValue:
0001B98A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B98E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B992 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B996 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B99A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B99E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B9A0 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B9A4                            
0001B9A4                            ; touch	response is $40-$7F
0001B9A4                            
0001B9A4 1029 0020                  		move.b	$20(a1),d0
0001B9A8 0200 003F                  		andi.b	#$3F,d0
0001B9AC 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B9B0 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B9B2 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B9B8 6400 0000                  		bcc.w	locret_1AEF2
0001B9BC 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B9C0                            
0001B9C0                            locret_1AEF2:
0001B9C0 4E75                       		rts	
0001B9C2                            ; ===========================================================================
0001B9C2                            
0001B9C2                            Touch_Monitor:
0001B9C2 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B9C6 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B9C8 3028 000C                  		move.w	$C(a0),d0
0001B9CC 0440 0010                  		subi.w	#$10,d0
0001B9D0 B069 000C                  		cmp.w	$C(a1),d0
0001B9D4 6500                       		bcs.s	locret_1AF2E
0001B9D6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B9DA 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B9E0 4A29 0025                  		tst.b	$25(a1)
0001B9E4 6600                       		bne.s	locret_1AF2E
0001B9E6 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B9EA 4E75                       		rts	
0001B9EC                            ; ===========================================================================
0001B9EC                            
0001B9EC                            loc_1AF1E:
0001B9EC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B9F2 6600                       		bne.s	locret_1AF2E
0001B9F4 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B9F8 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B9FC                            
0001B9FC                            locret_1AF2E:
0001B9FC 4E75                       		rts	
0001B9FE                            ; ===========================================================================
0001B9FE                            
0001B9FE                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B9FE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BA02 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BA04 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BA0A 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BA0E                            
0001BA0E                            loc_1AF40:
0001BA0E 4A29 0021                  		tst.b	$21(a1)
0001BA12 6700                       		beq.s	Touch_KillEnemy
0001BA14 4468 0010                  		neg.w	$10(a0)
0001BA18 4468 0012                  		neg.w	$12(a0)
0001BA1C E0E8 0010                  		asr	$10(a0)
0001BA20 E0E8 0012                  		asr	$12(a0)
0001BA24 137C 0000 0020             		move.b	#0,$20(a1)
0001BA2A 5329 0021                  		subq.b	#1,$21(a1)
0001BA2E 6600                       		bne.s	locret_1AF68
0001BA30 08E9 0007 0022             		bset	#7,$22(a1)
0001BA36                            
0001BA36                            locret_1AF68:
0001BA36 4E75                       		rts	
0001BA38                            ; ===========================================================================
0001BA38                            
0001BA38                            Touch_KillEnemy:
0001BA38 08E9 0007 0022             		bset	#7,$22(a1)
0001BA3E 7000                       		moveq	#0,d0
0001BA40 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BA44 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BA48 0C40 0006                  		cmpi.w	#6,d0
0001BA4C 6500                       		bcs.s	loc_1AF82
0001BA4E 7006                       		moveq	#6,d0
0001BA50                            
0001BA50                            loc_1AF82:
0001BA50 3340 003E                  		move.w	d0,$3E(a1)
0001BA54 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BA58 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BA5E 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BA60 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BA64 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BA6A                            
0001BA6A                            loc_1AF9C:
0001BA6A 6100 0000                  		bsr.w	AddPoints
0001BA6E 7400                       		moveq	#0,d2	; GMZ
0001BA70 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BA72 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BA74                            
0001BA74                            TouchKE_Explode:
0001BA74 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BA78 137C 0000 0024             		move.b	#0,$24(a1)
0001BA7E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BA82                            
0001BA82                            TouchKE_NextExplosion:
0001BA82 5802                       		addq.b	#4,d2
0001BA84 4EB9 0000 E474             		jsr	SingleObjLoad
0001BA8A 6600                       		bne.s	TouchKE_NoExplosion
0001BA8C 336A 0008 0008             		move.w	8(a2),8(a1)
0001BA92 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BA98 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BA9C                            
0001BA9C                            TouchKE_NoExplosion:
0001BA9C 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BA9E 4A68 0012                  		tst.w	$12(a0)
0001BAA2 6B00                       		bmi.s	loc_1AFC2
0001BAA4 3028 000C                  		move.w	$C(a0),d0
0001BAA8 B069 000C                  		cmp.w	$C(a1),d0
0001BAAC 6400                       		bcc.s	loc_1AFCA
0001BAAE 4468 0012                  		neg.w	$12(a0)
0001BAB2 4E75                       		rts	
0001BAB4                            ; ===========================================================================
0001BAB4                            
0001BAB4                            loc_1AFC2:
0001BAB4 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BABA 4E75                       		rts	
0001BABC                            ; ===========================================================================
0001BABC                            
0001BABC                            loc_1AFCA:
0001BABC 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BAC2 4E75                       		rts	
0001BAC4                            ; ===========================================================================
0001BAC4 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BACC                            ; ===========================================================================
0001BACC                            
0001BACC                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BACC 08E9 0007 0022             		bset	#7,$22(a1)
0001BAD2                            
0001BAD2                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BAD2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BAD6 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BAD8                            
0001BAD8                            loc_1AFE6:				; XREF: Touch_Hurt
0001BAD8 70FF                       		moveq	#-1,d0
0001BADA 4E75                       		rts	
0001BADC                            ; ===========================================================================
0001BADC                            
0001BADC                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BADC 4E71                       		nop	
0001BADE 4A68 0030                  		tst.w	$30(a0)
0001BAE2 66F4                       		bne.s	loc_1AFE6
0001BAE4 2449                       		movea.l	a1,a2
0001BAE6                            
0001BAE6                            ; End of function TouchResponse
0001BAE6                            ; continue straight to HurtSonic
0001BAE6                            
0001BAE6                            ; ---------------------------------------------------------------------------
0001BAE6                            ; Hurting Sonic	subroutine
0001BAE6                            ; ---------------------------------------------------------------------------
0001BAE6                            
0001BAE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAE6                            
0001BAE6                            
0001BAE6                            HurtSonic:
0001BAE6 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BAEA 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BAEC 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BAF0 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BAF4 4EB9 0000 E474             		jsr	SingleObjLoad
0001BAFA 6600                       		bne.s	Hurt_Shield
0001BAFC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BB00 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB06 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BB0C                            
0001BB0C                            Hurt_Shield:
0001BB0C 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BB12 117C 0004 0024             		move.b	#4,$24(a0)
0001BB18 6100 871A                  		bsr.w	Sonic_ResetOnFloor
0001BB1C 08E8 0001 0022             		bset	#1,$22(a0)
0001BB22 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BB28 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BB2E 0828 0006 0022             		btst	#6,$22(a0)
0001BB34 6700                       		beq.s	Hurt_Reverse
0001BB36 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BB3C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BB42                            
0001BB42                            Hurt_Reverse:
0001BB42 3028 0008                  		move.w	8(a0),d0
0001BB46 B06A 0008                  		cmp.w	8(a2),d0
0001BB4A 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BB4C 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BB50                            
0001BB50                            Hurt_ChkSpikes:
0001BB50 317C 0000 0014             		move.w	#0,$14(a0)
0001BB56 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BB5C 317C 0078 0030             		move.w	#$78,$30(a0)
0001BB62 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BB66 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BB6A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BB6C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BB70 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BB72 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BB76                            
0001BB76                            Hurt_Sound:
0001BB76 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BB7C 70FF                       		moveq	#-1,d0
0001BB7E 4E75                       		rts	
0001BB80                            ; ===========================================================================
0001BB80                            
0001BB80                            Hurt_NoRings:
0001BB80 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BB84 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BB88                            ; End of function HurtSonic
0001BB88                            
0001BB88                            ; ---------------------------------------------------------------------------
0001BB88                            ; Subroutine to	kill Sonic
0001BB88                            ; ---------------------------------------------------------------------------
0001BB88                            
0001BB88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB88                            
0001BB88                            
0001BB88                            KillSonic:
0001BB88 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BB8C 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BB8E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BB94 117C 0006 0024             		move.b	#6,$24(a0)
0001BB9A 6100 8698                  		bsr.w	Sonic_ResetOnFloor
0001BB9E 08E8 0001 0022             		bset	#1,$22(a0)
0001BBA4 317C F900 0012             		move.w	#-$700,$12(a0)
0001BBAA 317C 0000 0010             		move.w	#0,$10(a0)
0001BBB0 317C 0000 0014             		move.w	#0,$14(a0)
0001BBB6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BBBC 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BBC2 08E8 0007 0002             		bset	#7,2(a0)
0001BBC8 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BBCC 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BBD0 6600                       		bne.s	Kill_Sound
0001BBD2 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BBD6                            
0001BBD6                            Kill_Sound:
0001BBD6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BBDC                            
0001BBDC                            Kill_NoDeath:
0001BBDC 70FF                       		moveq	#-1,d0
0001BBDE 4E75                       		rts	
0001BBE0                            ; End of function KillSonic
0001BBE0                            
0001BBE0                            
0001BBE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBE0                            
0001BBE0                            
0001BBE0                            Touch_Special:				; XREF: Touch_ChkValue
0001BBE0 1229 0020                  		move.b	$20(a1),d1
0001BBE4 0201 003F                  		andi.b	#$3F,d1
0001BBE8 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BBEC 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BBEE 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BBF2 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BBF4 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BBF8 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BBFA 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BBFE 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BC00 4E75                       		rts	
0001BC02                            ; ===========================================================================
0001BC02                            
0001BC02                            Touch_CatKiller:			; XREF: Touch_Special
0001BC02 6000 FEC8                  		bra.w	loc_1AFDA
0001BC06                            ; ===========================================================================
0001BC06                            
0001BC06                            Touch_Yadrin:				; XREF: Touch_Special
0001BC06 9A40                       		sub.w	d0,d5
0001BC08 0C45 0008                  		cmpi.w	#8,d5
0001BC0C 6400                       		bcc.s	loc_1B144
0001BC0E 3029 0008                  		move.w	8(a1),d0
0001BC12 5940                       		subq.w	#4,d0
0001BC14 0829 0000 0022             		btst	#0,$22(a1)
0001BC1A 6700                       		beq.s	loc_1B130
0001BC1C 0440 0010                  		subi.w	#$10,d0
0001BC20                            
0001BC20                            loc_1B130:
0001BC20 9042                       		sub.w	d2,d0
0001BC22 6400                       		bcc.s	loc_1B13C
0001BC24 0640 0018                  		addi.w	#$18,d0
0001BC28 6500                       		bcs.s	loc_1B140
0001BC2A 6000                       		bra.s	loc_1B144
0001BC2C                            ; ===========================================================================
0001BC2C                            
0001BC2C                            loc_1B13C:
0001BC2C B044                       		cmp.w	d4,d0
0001BC2E 6200                       		bhi.s	loc_1B144
0001BC30                            
0001BC30                            loc_1B140:
0001BC30 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BC34                            ; ===========================================================================
0001BC34                            
0001BC34                            loc_1B144:
0001BC34 6000 FDC8                  		bra.w	Touch_Enemy
0001BC38                            ; ===========================================================================
0001BC38                            
0001BC38                            Touch_D7orE1:				; XREF: Touch_Special
0001BC38 5229 0021                  		addq.b	#1,$21(a1)
0001BC3C 4E75                       		rts	
0001BC3E                            ; End of function Touch_Special
0001BC3E                            
0001BC3E                            ; ---------------------------------------------------------------------------
0001BC3E                            ; Subroutine to	show the special stage layout
0001BC3E                            ; ---------------------------------------------------------------------------
0001BC3E                            
0001BC3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC3E                            
0001BC3E                            
0001BC3E                            SS_ShowLayout:				; XREF: SpecialStage
0001BC3E 6100 0000                  		bsr.w	SS_AniWallsRings
0001BC42 6100 0000                  		bsr.w	SS_AniItems
0001BC46 3F05                       		move.w	d5,-(sp)
0001BC48 43F8 8000                  		lea	($FFFF8000).w,a1
0001BC4C 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC50 0200 00FC                  		andi.b	#$FC,d0
0001BC54 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001BC5A 3800                       		move.w	d0,d4
0001BC5C 3A01                       		move.w	d1,d5
0001BC5E C9FC 0018                  		muls.w	#$18,d4
0001BC62 CBFC 0018                  		muls.w	#$18,d5
0001BC66 7400                       		moveq	#0,d2
0001BC68 3438 F700                  		move.w	($FFFFF700).w,d2
0001BC6C 84FC 0018                  		divu.w	#$18,d2
0001BC70 4842                       		swap	d2
0001BC72 4442                       		neg.w	d2
0001BC74 0642 FF4C                  		addi.w	#-$B4,d2
0001BC78 7600                       		moveq	#0,d3
0001BC7A 3638 F704                  		move.w	($FFFFF704).w,d3
0001BC7E 86FC 0018                  		divu.w	#$18,d3
0001BC82 4843                       		swap	d3
0001BC84 4443                       		neg.w	d3
0001BC86 0643 FF4C                  		addi.w	#-$B4,d3
0001BC8A 3E3C 000F                  		move.w	#$F,d7
0001BC8E                            
0001BC8E                            loc_1B19E:
0001BC8E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BC92 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BC96 4440                       		neg.w	d0
0001BC98 C3C2                       		muls.w	d2,d1
0001BC9A C1C3                       		muls.w	d3,d0
0001BC9C 2C00                       		move.l	d0,d6
0001BC9E DC81                       		add.l	d1,d6
0001BCA0 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BCA4 C1C2                       		muls.w	d2,d0
0001BCA6 C3C3                       		muls.w	d3,d1
0001BCA8 D280                       		add.l	d0,d1
0001BCAA 2406                       		move.l	d6,d2
0001BCAC 3C3C 000F                  		move.w	#$F,d6
0001BCB0                            
0001BCB0                            loc_1B1C0:
0001BCB0 2002                       		move.l	d2,d0
0001BCB2 E080                       		asr.l	#8,d0
0001BCB4 32C0                       		move.w	d0,(a1)+
0001BCB6 2001                       		move.l	d1,d0
0001BCB8 E080                       		asr.l	#8,d0
0001BCBA 32C0                       		move.w	d0,(a1)+
0001BCBC D485                       		add.l	d5,d2
0001BCBE D284                       		add.l	d4,d1
0001BCC0 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BCC4                            
0001BCC4 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BCC8 0643 0018                  		addi.w	#$18,d3
0001BCCC 51CF FFC0                  		dbf	d7,loc_1B19E
0001BCD0                            
0001BCD0 3A1F                       		move.w	(sp)+,d5
0001BCD2 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BCD8 7000                       		moveq	#0,d0
0001BCDA 3038 F704                  		move.w	($FFFFF704).w,d0
0001BCDE 80FC 0018                  		divu.w	#$18,d0
0001BCE2 C0FC 0080                  		mulu.w	#$80,d0
0001BCE6 D1C0                       		adda.l	d0,a0
0001BCE8 7000                       		moveq	#0,d0
0001BCEA 3038 F700                  		move.w	($FFFFF700).w,d0
0001BCEE 80FC 0018                  		divu.w	#$18,d0
0001BCF2 D0C0                       		adda.w	d0,a0
0001BCF4 49F8 8000                  		lea	($FFFF8000).w,a4
0001BCF8 3E3C 000F                  		move.w	#$F,d7
0001BCFC                            
0001BCFC                            loc_1B20C:
0001BCFC 3C3C 000F                  		move.w	#$F,d6
0001BD00                            
0001BD00                            loc_1B210:
0001BD00 7000                       		moveq	#0,d0
0001BD02 1018                       		move.b	(a0)+,d0
0001BD04 6700                       		beq.s	loc_1B268
0001BD06 0C00 004E                  		cmpi.b	#$4E,d0
0001BD0A 6200                       		bhi.s	loc_1B268
0001BD0C 3614                       		move.w	(a4),d3
0001BD0E 0643 0120                  		addi.w	#$120,d3
0001BD12 0C43 0070                  		cmpi.w	#$70,d3
0001BD16 6500                       		bcs.s	loc_1B268
0001BD18 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BD1C 6400                       		bcc.s	loc_1B268
0001BD1E 342C 0002                  		move.w	2(a4),d2
0001BD22 0642 00F0                  		addi.w	#$F0,d2
0001BD26 0C42 0070                  		cmpi.w	#$70,d2
0001BD2A 6500                       		bcs.s	loc_1B268
0001BD2C 0C42 0170                  		cmpi.w	#$170,d2
0001BD30 6400                       		bcc.s	loc_1B268
0001BD32 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BD38 E748                       		lsl.w	#3,d0
0001BD3A 4BF5 0000                  		lea	(a5,d0.w),a5
0001BD3E 225D                       		movea.l	(a5)+,a1
0001BD40 321D                       		move.w	(a5)+,d1
0001BD42 D241                       		add.w	d1,d1
0001BD44 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BD48 365D                       		movea.w	(a5)+,a3
0001BD4A 7200                       		moveq	#0,d1
0001BD4C 1219                       		move.b	(a1)+,d1
0001BD4E 5301                       		subq.b	#1,d1
0001BD50 6B00                       		bmi.s	loc_1B268
0001BD52 4EB9 0000 E14C             		jsr	sub_D762
0001BD58                            
0001BD58                            loc_1B268:
0001BD58 584C                       		addq.w	#4,a4
0001BD5A 51CE FFA4                  		dbf	d6,loc_1B210
0001BD5E                            
0001BD5E 41E8 0070                  		lea	$70(a0),a0
0001BD62 51CF FF98                  		dbf	d7,loc_1B20C
0001BD66                            
0001BD66 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BD6A 0C05 0050                  		cmpi.b	#$50,d5
0001BD6E 6700                       		beq.s	loc_1B288
0001BD70 24BC 0000 0000             		move.l	#0,(a2)
0001BD76 4E75                       		rts	
0001BD78                            ; ===========================================================================
0001BD78                            
0001BD78                            loc_1B288:
0001BD78 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BD7E 4E75                       		rts	
0001BD80                            ; End of function SS_ShowLayout
0001BD80                            
0001BD80                            ; ---------------------------------------------------------------------------
0001BD80                            ; Subroutine to	animate	walls and rings	in the special stage
0001BD80                            ; ---------------------------------------------------------------------------
0001BD80                            
0001BD80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD80                            
0001BD80                            
0001BD80                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BD80 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BD86 7000                       		moveq	#0,d0
0001BD88 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD8C E408                       		lsr.b	#2,d0
0001BD8E 0240 000F                  		andi.w	#$F,d0
0001BD92 7223                       		moveq	#$23,d1
0001BD94                            
0001BD94                            loc_1B2A4:
0001BD94 3280                       		move.w	d0,(a1)
0001BD96 5049                       		addq.w	#8,a1
0001BD98 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BD9C                            
0001BD9C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BDA2 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BDA6 6A00                       		bpl.s	loc_1B2C8
0001BDA8 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BDAE 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BDB2 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BDB8                            
0001BDB8                            loc_1B2C8:
0001BDB8 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BDBE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BDC2 6A00                       		bpl.s	loc_1B2E4
0001BDC4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BDCA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BDCE 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BDD4                            
0001BDD4                            loc_1B2E4:
0001BDD4 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BDD8 1340 0138                  		move.b	d0,$138(a1)
0001BDDC 1340 0160                  		move.b	d0,$160(a1)
0001BDE0 1340 0148                  		move.b	d0,$148(a1)
0001BDE4 1340 0150                  		move.b	d0,$150(a1)
0001BDE8 1340 01D8                  		move.b	d0,$1D8(a1)
0001BDEC 1340 01E0                  		move.b	d0,$1E0(a1)
0001BDF0 1340 01E8                  		move.b	d0,$1E8(a1)
0001BDF4 1340 01F0                  		move.b	d0,$1F0(a1)
0001BDF8 1340 01F8                  		move.b	d0,$1F8(a1)
0001BDFC 1340 0200                  		move.b	d0,$200(a1)
0001BE00 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BE04 6A00                       		bpl.s	loc_1B326
0001BE06 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BE0C 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BE10 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BE16                            
0001BE16                            loc_1B326:
0001BE16 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BE1A 1340 0168                  		move.b	d0,$168(a1)
0001BE1E 1340 0170                  		move.b	d0,$170(a1)
0001BE22 1340 0178                  		move.b	d0,$178(a1)
0001BE26 1340 0180                  		move.b	d0,$180(a1)
0001BE2A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BE2E 6A00                       		bpl.s	loc_1B350
0001BE30 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BE36 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BE3A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BE40                            
0001BE40                            loc_1B350:
0001BE40 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BE46 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BE4C 7000                       		moveq	#0,d0
0001BE4E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BE52 D040                       		add.w	d0,d0
0001BE54 41F0 0000                  		lea	(a0,d0.w),a0
0001BE58 3290                       		move.w	(a0),(a1)
0001BE5A 3368 0002 0008             		move.w	2(a0),8(a1)
0001BE60 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BE66 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BE6C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BE72 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BE78 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BE7E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BE84 D0FC 0020                  		adda.w	#$20,a0
0001BE88 D2FC 0048                  		adda.w	#$48,a1
0001BE8C 3290                       		move.w	(a0),(a1)
0001BE8E 3368 0002 0008             		move.w	2(a0),8(a1)
0001BE94 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BE9A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BEA0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BEA6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BEAC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BEB2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BEB8 D0FC 0020                  		adda.w	#$20,a0
0001BEBC D2FC 0048                  		adda.w	#$48,a1
0001BEC0 3290                       		move.w	(a0),(a1)
0001BEC2 3368 0002 0008             		move.w	2(a0),8(a1)
0001BEC8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BECE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BED4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BEDA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BEE0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BEE6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BEEC D0FC 0020                  		adda.w	#$20,a0
0001BEF0 D2FC 0048                  		adda.w	#$48,a1
0001BEF4 3290                       		move.w	(a0),(a1)
0001BEF6 3368 0002 0008             		move.w	2(a0),8(a1)
0001BEFC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF02 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF08 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF0E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF14 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF1A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF20 D0FC 0020                  		adda.w	#$20,a0
0001BF24 D2FC 0048                  		adda.w	#$48,a1
0001BF28 4E75                       		rts	
0001BF2A                            ; End of function SS_AniWallsRings
0001BF2A                            
0001BF2A                            ; ===========================================================================
0001BF2A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BF3A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BF4A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BF5A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BF6A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BF7A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BF8A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BF9A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            ; Subroutine to	remove items when you collect them in the special stage
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            
0001BFAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFAA                            
0001BFAA                            
0001BFAA                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BFAA 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BFB0 303C 001F                  		move.w	#$1F,d0
0001BFB4                            
0001BFB4                            loc_1B4C4:
0001BFB4 4A12                       		tst.b	(a2)
0001BFB6 6700                       		beq.s	locret_1B4CE
0001BFB8 504A                       		addq.w	#8,a2
0001BFBA 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BFBE                            
0001BFBE                            locret_1B4CE:
0001BFBE 4E75                       		rts	
0001BFC0                            ; End of function SS_RemoveCollectedItem
0001BFC0                            
0001BFC0                            ; ---------------------------------------------------------------------------
0001BFC0                            ; Subroutine to	animate	special	stage items when you touch them
0001BFC0                            ; ---------------------------------------------------------------------------
0001BFC0                            
0001BFC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFC0                            
0001BFC0                            
0001BFC0                            SS_AniItems:				; XREF: SS_ShowLayout
0001BFC0 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BFC6 3E3C 001F                  		move.w	#$1F,d7
0001BFCA                            
0001BFCA                            loc_1B4DA:
0001BFCA 7000                       		moveq	#0,d0
0001BFCC 1010                       		move.b	(a0),d0
0001BFCE 6700                       		beq.s	loc_1B4E8
0001BFD0 E548                       		lsl.w	#2,d0
0001BFD2 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BFD6 4E91                       		jsr	(a1)
0001BFD8                            
0001BFD8                            loc_1B4E8:
0001BFD8 5048                       		addq.w	#8,a0
0001BFDA                            
0001BFDA                            loc_1B4EA:
0001BFDA 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BFDE                            
0001BFDE 4E75                       		rts	
0001BFE0                            ; End of function SS_AniItems
0001BFE0                            
0001BFE0                            ; ===========================================================================
0001BFE0 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BFE4 0000 0000                  		dc.l SS_AniBumper
0001BFE8 0000 0000                  		dc.l SS_Ani1Up
0001BFEC 0000 0000                  		dc.l SS_AniReverse
0001BFF0 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BFF4 0000 0000                  		dc.l SS_AniGlassBlock
0001BFF8                            ; ===========================================================================
0001BFF8                            
0001BFF8                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BFF8 5328 0002                  		subq.b	#1,2(a0)
0001BFFC 6A00                       		bpl.s	locret_1B530
0001BFFE 117C 0005 0002             		move.b	#5,2(a0)
0001C004 7000                       		moveq	#0,d0
0001C006 1028 0003                  		move.b	3(a0),d0
0001C00A 5228 0003                  		addq.b	#1,3(a0)
0001C00E 2268 0004                  		movea.l	4(a0),a1
0001C012 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C016 1280                       		move.b	d0,(a1)
0001C018 6600                       		bne.s	locret_1B530
0001C01A 4290                       		clr.l	(a0)
0001C01C 42A8 0004                  		clr.l	4(a0)
0001C020                            
0001C020                            locret_1B530:
0001C020 4E75                       		rts	
0001C022                            ; ===========================================================================
0001C022 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C028                            ; ===========================================================================
0001C028                            
0001C028                            SS_AniBumper:				; XREF: SS_AniIndex
0001C028 5328 0002                  		subq.b	#1,2(a0)
0001C02C 6A00                       		bpl.s	locret_1B566
0001C02E 117C 0007 0002             		move.b	#7,2(a0)
0001C034 7000                       		moveq	#0,d0
0001C036 1028 0003                  		move.b	3(a0),d0
0001C03A 5228 0003                  		addq.b	#1,3(a0)
0001C03E 2268 0004                  		movea.l	4(a0),a1
0001C042 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C046 6600                       		bne.s	loc_1B564
0001C048 4290                       		clr.l	(a0)
0001C04A 42A8 0004                  		clr.l	4(a0)
0001C04E 12BC 0025                  		move.b	#$25,(a1)
0001C052 4E75                       		rts	
0001C054                            ; ===========================================================================
0001C054                            
0001C054                            loc_1B564:
0001C054 1280                       		move.b	d0,(a1)
0001C056                            
0001C056                            locret_1B566:
0001C056 4E75                       		rts	
0001C058                            ; ===========================================================================
0001C058 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C05E                            ; ===========================================================================
0001C05E                            
0001C05E                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C05E 5328 0002                  		subq.b	#1,2(a0)
0001C062 6A00                       		bpl.s	locret_1B596
0001C064 117C 0005 0002             		move.b	#5,2(a0)
0001C06A 7000                       		moveq	#0,d0
0001C06C 1028 0003                  		move.b	3(a0),d0
0001C070 5228 0003                  		addq.b	#1,3(a0)
0001C074 2268 0004                  		movea.l	4(a0),a1
0001C078 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C07C 1280                       		move.b	d0,(a1)
0001C07E 6600                       		bne.s	locret_1B596
0001C080 4290                       		clr.l	(a0)
0001C082 42A8 0004                  		clr.l	4(a0)
0001C086                            
0001C086                            locret_1B596:
0001C086 4E75                       		rts	
0001C088                            ; ===========================================================================
0001C088 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C08E                            ; ===========================================================================
0001C08E                            
0001C08E                            SS_AniReverse:				; XREF: SS_AniIndex
0001C08E 5328 0002                  		subq.b	#1,2(a0)
0001C092 6A00                       		bpl.s	locret_1B5CC
0001C094 117C 0007 0002             		move.b	#7,2(a0)
0001C09A 7000                       		moveq	#0,d0
0001C09C 1028 0003                  		move.b	3(a0),d0
0001C0A0 5228 0003                  		addq.b	#1,3(a0)
0001C0A4 2268 0004                  		movea.l	4(a0),a1
0001C0A8 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C0AC 6600                       		bne.s	loc_1B5CA
0001C0AE 4290                       		clr.l	(a0)
0001C0B0 42A8 0004                  		clr.l	4(a0)
0001C0B4 12BC 002B                  		move.b	#$2B,(a1)
0001C0B8 4E75                       		rts	
0001C0BA                            ; ===========================================================================
0001C0BA                            
0001C0BA                            loc_1B5CA:
0001C0BA 1280                       		move.b	d0,(a1)
0001C0BC                            
0001C0BC                            locret_1B5CC:
0001C0BC 4E75                       		rts	
0001C0BE                            ; ===========================================================================
0001C0BE 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C0C4                            ; ===========================================================================
0001C0C4                            
0001C0C4                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C0C4 5328 0002                  		subq.b	#1,2(a0)
0001C0C8 6A00                       		bpl.s	locret_1B60C
0001C0CA 117C 0005 0002             		move.b	#5,2(a0)
0001C0D0 7000                       		moveq	#0,d0
0001C0D2 1028 0003                  		move.b	3(a0),d0
0001C0D6 5228 0003                  		addq.b	#1,3(a0)
0001C0DA 2268 0004                  		movea.l	4(a0),a1
0001C0DE 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C0E2 1280                       		move.b	d0,(a1)
0001C0E4 6600                       		bne.s	locret_1B60C
0001C0E6 4290                       		clr.l	(a0)
0001C0E8 42A8 0004                  		clr.l	4(a0)
0001C0EC 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C0F2 303C 00A8                  		move.w	#$A8,d0
0001C0F6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C0FC                            
0001C0FC                            locret_1B60C:
0001C0FC 4E75                       		rts	
0001C0FE                            ; ===========================================================================
0001C0FE 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C104                            ; ===========================================================================
0001C104                            
0001C104                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C104 5328 0002                  		subq.b	#1,2(a0)
0001C108 6A00                       		bpl.s	locret_1B640
0001C10A 117C 0001 0002             		move.b	#1,2(a0)
0001C110 7000                       		moveq	#0,d0
0001C112 1028 0003                  		move.b	3(a0),d0
0001C116 5228 0003                  		addq.b	#1,3(a0)
0001C11A 2268 0004                  		movea.l	4(a0),a1
0001C11E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C122 1280                       		move.b	d0,(a1)
0001C124 6600                       		bne.s	locret_1B640
0001C126 12A8 0004                  		move.b	4(a0),(a1)
0001C12A 4290                       		clr.l	(a0)
0001C12C 42A8 0004                  		clr.l	4(a0)
0001C130                            
0001C130                            locret_1B640:
0001C130 4E75                       		rts	
0001C132                            ; ===========================================================================
0001C132 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C13C                            ; ---------------------------------------------------------------------------
0001C13C                            ; Special stage	layout pointers
0001C13C                            ; ---------------------------------------------------------------------------
0001C13C                            SS_LayoutIndex:
0001C13C                            	include "_inc\Special stage layout pointers.asm"
0001C13C                            ; ---------------------------------------------------------------------------
0001C13C                            ; Special stage	layout pointers
0001C13C                            ; ---------------------------------------------------------------------------
0001C13C 0000 0000                  	dc.l SS_1
0001C140 0000 0000                  	dc.l SS_2
0001C144 0000 0000                  	dc.l SS_3
0001C148 0000 0000                  	dc.l SS_4
0001C14C 0000 0000                  	dc.l SS_5
0001C150 0000 0000                  	dc.l SS_6
0001C154                            	even
0001C154                            	even
0001C154                            
0001C154                            ; ---------------------------------------------------------------------------
0001C154                            ; Special stage	start locations
0001C154                            ; ---------------------------------------------------------------------------
0001C154                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C16C                            		even
0001C16C                            
0001C16C                            ; ---------------------------------------------------------------------------
0001C16C                            ; Subroutine to	load special stage layout
0001C16C                            ; ---------------------------------------------------------------------------
0001C16C                            
0001C16C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C16C                            
0001C16C                            
0001C16C                            SS_Load:				; XREF: SpecialStage
0001C16C 7000                       		moveq	#0,d0
0001C16E 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C172 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C176 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C17C 6500                       		bcs.s	SS_ChkEmldNum
0001C17E 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C184                            
0001C184                            SS_ChkEmldNum:
0001C184 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C18A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C18C 7200                       		moveq	#0,d1
0001C18E 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C192 5301                       		subq.b	#1,d1
0001C194 6500                       		bcs.s	SS_LoadData
0001C196 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C19A                            
0001C19A                            SS_ChkEmldLoop:	
0001C19A B033 1000                  		cmp.b	(a3,d1.w),d0
0001C19E 6600                       		bne.s	SS_ChkEmldRepeat
0001C1A0 60CA                       		bra.s	SS_Load
0001C1A2                            ; ===========================================================================
0001C1A2                            
0001C1A2                            SS_ChkEmldRepeat:
0001C1A2 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C1A6                            
0001C1A6                            SS_LoadData:
0001C1A6 E548                       		lsl.w	#2,d0
0001C1A8 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C1AC 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C1B0 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C1B4 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C1B8 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C1BE 303C 0000                  		move.w	#0,d0
0001C1C2 4EB9 0000 1954             		jsr	(EniDec).l
0001C1C8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C1CE 303C 0FFF                  		move.w	#$FFF,d0
0001C1D2                            
0001C1D2                            SS_ClrRAM3:
0001C1D2 4299                       		clr.l	(a1)+
0001C1D4 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C1D8                            
0001C1D8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C1DE 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C1E4 723F                       		moveq	#$3F,d1
0001C1E6                            
0001C1E6                            loc_1B6F6:
0001C1E6 743F                       		moveq	#$3F,d2
0001C1E8                            
0001C1E8                            loc_1B6F8:
0001C1E8 12D8                       		move.b	(a0)+,(a1)+
0001C1EA 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C1EE                            
0001C1EE 43E9 0040                  		lea	$40(a1),a1
0001C1F2 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C1F6                            
0001C1F6 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C1FC 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C202 724D                       		moveq	#$4D,d1
0001C204                            
0001C204                            loc_1B714:
0001C204 22D8                       		move.l	(a0)+,(a1)+
0001C206 32FC 0000                  		move.w	#0,(a1)+
0001C20A 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C210 32D8                       		move.w	(a0)+,(a1)+
0001C212 51C9 FFF0                  		dbf	d1,loc_1B714
0001C216                            
0001C216 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C21C 323C 003F                  		move.w	#$3F,d1
0001C220                            
0001C220                            loc_1B730:
0001C220                            
0001C220 4299                       		clr.l	(a1)+
0001C222 51C9 FFFC                  		dbf	d1,loc_1B730
0001C226                            
0001C226 4E75                       		rts	
0001C228                            ; End of function SS_Load
0001C228                            
0001C228                            ; ===========================================================================
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            ; Special stage	mappings and VRAM pointers
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            SS_MapIndex:
0001C228                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            ; Special stage	mappings and VRAM pointers
0001C228                            ; ---------------------------------------------------------------------------
0001C228 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C22C 0142                       	dc.w $142		; VRAM setting
0001C22E 0000 0000                  	dc.l Map_SSWalls
0001C232 0142                       	dc.w $142
0001C234 0000 0000                  	dc.l Map_SSWalls
0001C238 0142                       	dc.w $142
0001C23A 0000 0000                  	dc.l Map_SSWalls
0001C23E 0142                       	dc.w $142
0001C240 0000 0000                  	dc.l Map_SSWalls
0001C244 0142                       	dc.w $142
0001C246 0000 0000                  	dc.l Map_SSWalls
0001C24A 0142                       	dc.w $142
0001C24C 0000 0000                  	dc.l Map_SSWalls
0001C250 0142                       	dc.w $142
0001C252 0000 0000                  	dc.l Map_SSWalls
0001C256 0142                       	dc.w $142
0001C258 0000 0000                  	dc.l Map_SSWalls
0001C25C 0142                       	dc.w $142
0001C25E 0000 0000                  	dc.l Map_SSWalls
0001C262 2142                       	dc.w $2142
0001C264 0000 0000                  	dc.l Map_SSWalls
0001C268 2142                       	dc.w $2142
0001C26A 0000 0000                  	dc.l Map_SSWalls
0001C26E 2142                       	dc.w $2142
0001C270 0000 0000                  	dc.l Map_SSWalls
0001C274 2142                       	dc.w $2142
0001C276 0000 0000                  	dc.l Map_SSWalls
0001C27A 2142                       	dc.w $2142
0001C27C 0000 0000                  	dc.l Map_SSWalls
0001C280 2142                       	dc.w $2142
0001C282 0000 0000                  	dc.l Map_SSWalls
0001C286 2142                       	dc.w $2142
0001C288 0000 0000                  	dc.l Map_SSWalls
0001C28C 2142                       	dc.w $2142
0001C28E 0000 0000                  	dc.l Map_SSWalls
0001C292 2142                       	dc.w $2142
0001C294 0000 0000                  	dc.l Map_SSWalls
0001C298 4142                       	dc.w $4142
0001C29A 0000 0000                  	dc.l Map_SSWalls
0001C29E 4142                       	dc.w $4142
0001C2A0 0000 0000                  	dc.l Map_SSWalls
0001C2A4 4142                       	dc.w $4142
0001C2A6 0000 0000                  	dc.l Map_SSWalls
0001C2AA 4142                       	dc.w $4142
0001C2AC 0000 0000                  	dc.l Map_SSWalls
0001C2B0 4142                       	dc.w $4142
0001C2B2 0000 0000                  	dc.l Map_SSWalls
0001C2B6 4142                       	dc.w $4142
0001C2B8 0000 0000                  	dc.l Map_SSWalls
0001C2BC 4142                       	dc.w $4142
0001C2BE 0000 0000                  	dc.l Map_SSWalls
0001C2C2 4142                       	dc.w $4142
0001C2C4 0000 0000                  	dc.l Map_SSWalls
0001C2C8 4142                       	dc.w $4142
0001C2CA 0000 0000                  	dc.l Map_SSWalls
0001C2CE 6142                       	dc.w $6142
0001C2D0 0000 0000                  	dc.l Map_SSWalls
0001C2D4 6142                       	dc.w $6142
0001C2D6 0000 0000                  	dc.l Map_SSWalls
0001C2DA 6142                       	dc.w $6142
0001C2DC 0000 0000                  	dc.l Map_SSWalls
0001C2E0 6142                       	dc.w $6142
0001C2E2 0000 0000                  	dc.l Map_SSWalls
0001C2E6 6142                       	dc.w $6142
0001C2E8 0000 0000                  	dc.l Map_SSWalls
0001C2EC 6142                       	dc.w $6142
0001C2EE 0000 0000                  	dc.l Map_SSWalls
0001C2F2 6142                       	dc.w $6142
0001C2F4 0000 0000                  	dc.l Map_SSWalls
0001C2F8 6142                       	dc.w $6142
0001C2FA 0000 0000                  	dc.l Map_SSWalls
0001C2FE 6142                       	dc.w $6142
0001C300 0000 F4E2                  	dc.l Map_obj47
0001C304 023B                       	dc.w $23B
0001C306 0000 0000                  	dc.l Map_SS_R
0001C30A 0570                       	dc.w $570
0001C30C 0000 0000                  	dc.l Map_SS_R
0001C310 0251                       	dc.w $251
0001C312 0000 0000                  	dc.l Map_SS_R
0001C316 0370                       	dc.w $370
0001C318 0000 0000                  	dc.l Map_SS_Up
0001C31C 0263                       	dc.w $263
0001C31E 0000 0000                  	dc.l Map_SS_Down
0001C322 0263                       	dc.w $263
0001C324 0000 0000                  	dc.l Map_SS_R
0001C328 22F0                       	dc.w $22F0
0001C32A 0000 0000                  	dc.l Map_SS_Glass
0001C32E 0470                       	dc.w $470
0001C330 0000 0000                  	dc.l Map_SS_Glass
0001C334 05F0                       	dc.w $5F0
0001C336 0000 0000                  	dc.l Map_SS_Glass
0001C33A 65F0                       	dc.w $65F0
0001C33C 0000 0000                  	dc.l Map_SS_Glass
0001C340 25F0                       	dc.w $25F0
0001C342 0000 0000                  	dc.l Map_SS_Glass
0001C346 45F0                       	dc.w $45F0
0001C348 0000 0000                  	dc.l Map_SS_R
0001C34C 02F0                       	dc.w $2F0
0001C34E 0100 F4E2                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C352 023B                       	dc.w $23B
0001C354 0200 F4E2                  	dc.l Map_obj47+$2000000
0001C358 023B                       	dc.w $23B
0001C35A 0000 0000                  	dc.l Map_SS_R
0001C35E 0797                       	dc.w $797
0001C360 0000 0000                  	dc.l Map_SS_R
0001C364 07A0                       	dc.w $7A0
0001C366 0000 0000                  	dc.l Map_SS_R
0001C36A 07A9                       	dc.w $7A9
0001C36C 0000 0000                  	dc.l Map_SS_R
0001C370 0797                       	dc.w $797
0001C372 0000 0000                  	dc.l Map_SS_R
0001C376 07A0                       	dc.w $7A0
0001C378 0000 0000                  	dc.l Map_SS_R
0001C37C 07A9                       	dc.w $7A9
0001C37E 0000 A7EA                  	dc.l Map_obj25
0001C382 27B2                       	dc.w $27B2
0001C384 0000 0000                  	dc.l Map_SS_Chaos3
0001C388 0770                       	dc.w $770
0001C38A 0000 0000                  	dc.l Map_SS_Chaos3
0001C38E 2770                       	dc.w $2770
0001C390 0000 0000                  	dc.l Map_SS_Chaos3
0001C394 4770                       	dc.w $4770
0001C396 0000 0000                  	dc.l Map_SS_Chaos3
0001C39A 6770                       	dc.w $6770
0001C39C 0000 0000                  	dc.l Map_SS_Chaos1
0001C3A0 0770                       	dc.w $770
0001C3A2 0000 0000                  	dc.l Map_SS_Chaos2
0001C3A6 0770                       	dc.w $770
0001C3A8 0000 0000                  	dc.l Map_SS_R
0001C3AC 04F0                       	dc.w $4F0
0001C3AE 0400 A7EA                  	dc.l Map_obj25+$4000000
0001C3B2 27B2                       	dc.w $27B2
0001C3B4 0500 A7EA                  	dc.l Map_obj25+$5000000
0001C3B8 27B2                       	dc.w $27B2
0001C3BA 0600 A7EA                  	dc.l Map_obj25+$6000000
0001C3BE 27B2                       	dc.w $27B2
0001C3C0 0700 A7EA                  	dc.l Map_obj25+$7000000
0001C3C4 27B2                       	dc.w $27B2
0001C3C6 0000 0000                  	dc.l Map_SS_Glass
0001C3CA 23F0                       	dc.w $23F0
0001C3CC 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C3D0 23F0                       	dc.w $23F0
0001C3D2 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C3D6 23F0                       	dc.w $23F0
0001C3D8 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C3DC 23F0                       	dc.w $23F0
0001C3DE 0000 0000                  	dc.l Map_SS_R+$2000000
0001C3E2 04F0                       	dc.w $4F0
0001C3E4 0000 0000                  	dc.l Map_SS_Glass
0001C3E8 05F0                       	dc.w $5F0
0001C3EA 0000 0000                  	dc.l Map_SS_Glass
0001C3EE 65F0                       	dc.w $65F0
0001C3F0 0000 0000                  	dc.l Map_SS_Glass
0001C3F4 25F0                       	dc.w $25F0
0001C3F6 0000 0000                  	dc.l Map_SS_Glass
0001C3FA 45F0                       	dc.w $45F0
0001C3FA 45F0                       	dc.w $45F0
0001C3FC                            
0001C3FC                            ; ---------------------------------------------------------------------------
0001C3FC                            ; Sprite mappings - special stage "R" block
0001C3FC                            ; ---------------------------------------------------------------------------
0001C3FC                            Map_SS_R:
0001C3FC                            	include "_maps\SSRblock.asm"
0001C3FC                            ; ---------------------------------------------------------------------------
0001C3FC                            ; Sprite mappings - special stage "R" block
0001C3FC                            ; ---------------------------------------------------------------------------
0001C3FC 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C400 0000                       		dc.w byte_1B91E-Map_SS_R
0001C402 01                         byte_1B912:	dc.b 1
0001C403 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C408 01                         byte_1B918:	dc.b 1
0001C409 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C40E 00                         byte_1B91E:	dc.b 0
0001C410 00                         		even
0001C410 00                         		even
0001C410                            
0001C410                            ; ---------------------------------------------------------------------------
0001C410                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C410                            ; ---------------------------------------------------------------------------
0001C410                            Map_SS_Glass:
0001C410                            	include "_maps\SSglassblock.asm"
0001C410                            ; ---------------------------------------------------------------------------
0001C410                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C410                            ; ---------------------------------------------------------------------------
0001C410 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C414 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C418 01                         byte_1B928:	dc.b 1
0001C419 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C41E 01                         byte_1B92E:	dc.b 1
0001C41F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C424 01                         byte_1B934:	dc.b 1
0001C425 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C42A 01                         byte_1B93A:	dc.b 1
0001C42B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C430                            		even
0001C430                            		even
0001C430                            
0001C430                            ; ---------------------------------------------------------------------------
0001C430                            ; Sprite mappings - special stage "UP" block
0001C430                            ; ---------------------------------------------------------------------------
0001C430                            Map_SS_Up:
0001C430                            	include "_maps\SSUPblock.asm"
0001C430                            ; ---------------------------------------------------------------------------
0001C430                            ; Sprite mappings - special stage "UP" block
0001C430                            ; ---------------------------------------------------------------------------
0001C430 0000                       		dc.w byte_1B944-Map_SS_Up
0001C432 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C434 01                         byte_1B944:	dc.b 1
0001C435 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C43A 01                         byte_1B94A:	dc.b 1
0001C43B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C440                            		even
0001C440                            		even
0001C440                            
0001C440                            ; ---------------------------------------------------------------------------
0001C440                            ; Sprite mappings - special stage "DOWN" block
0001C440                            ; ---------------------------------------------------------------------------
0001C440                            Map_SS_Down:
0001C440                            	include "_maps\SSDOWNblock.asm"
0001C440                            ; ---------------------------------------------------------------------------
0001C440                            ; Sprite mappings - special stage "DOWN" block
0001C440                            ; ---------------------------------------------------------------------------
0001C440 0000                       		dc.w byte_1B954-Map_SS_Down
0001C442 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C444 01                         byte_1B954:	dc.b 1
0001C445 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C44A 01                         byte_1B95A:	dc.b 1
0001C44B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C450                            		even
0001C450                            		even
0001C450                            
0001C450                            ; ---------------------------------------------------------------------------
0001C450                            ; Sprite mappings - special stage chaos	emeralds
0001C450                            ; ---------------------------------------------------------------------------
0001C450 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C452 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C454 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C456 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C458 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C45A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C45C 01                         byte_1B96C:	dc.b 1
0001C45D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C462 01                         byte_1B972:	dc.b 1
0001C463 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C468 01                         byte_1B978:	dc.b 1
0001C469 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C46E 01                         byte_1B97E:	dc.b 1
0001C46F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C474                            		even
0001C474                            ; ===========================================================================
0001C474                            ; ---------------------------------------------------------------------------
0001C474                            ; Object 09 - Sonic (special stage)
0001C474                            ; ---------------------------------------------------------------------------
0001C474                            
0001C474                            Obj09:					; XREF: Obj_Index
0001C474                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C474                            ;		beq.s	Obj09_Normal	; if not, branch
0001C474 6100 0000                  		bsr.w	SS_FixCamera
0001C478                            ;		bra.w	DebugMode
0001C478                            ; ===========================================================================
0001C478                            
0001C478                            Obj09_Normal:
0001C478 7000                       		moveq	#0,d0
0001C47A 1028 0024                  		move.b	$24(a0),d0
0001C47E 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C482 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C486                            ; ===========================================================================
0001C486 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C488 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C48A 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C48C 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C48E                            ; ===========================================================================
0001C48E                            
0001C48E                            Obj09_Main:				; XREF: Obj09_Index
0001C48E 5428 0024                  		addq.b	#2,$24(a0)
0001C492 117C 000E 0016             		move.b	#$E,$16(a0)
0001C498 117C 0007 0017             		move.b	#7,$17(a0)
0001C49E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C4A6 317C 0780 0002             		move.w	#$780,2(a0)
0001C4AC 117C 0004 0001             		move.b	#4,1(a0)
0001C4B2 117C 0000 0018             		move.b	#0,$18(a0)
0001C4B8 117C 0002 001C             		move.b	#2,$1C(a0)
0001C4BE 08E8 0002 0022             		bset	#2,$22(a0)
0001C4C4 08E8 0001 0022             		bset	#1,$22(a0)
0001C4CA                            
0001C4CA                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C4CA                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C4CA                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C4CA                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C4CA                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C4CA                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C4CA                            
0001C4CA                            Obj09_NoDebug:
0001C4CA 117C 0000 0030             		move.b	#0,$30(a0)
0001C4D0 7000                       		moveq	#0,d0
0001C4D2 1028 0022                  		move.b	$22(a0),d0
0001C4D6 0240 0002                  		andi.w	#2,d0
0001C4DA 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C4DE 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C4E2 4EBA 8212                  		jsr	LoadSonicDynPLC
0001C4E6 4EF9 0000 DFEE             		jmp	DisplaySprite
0001C4EC                            ; ===========================================================================
0001C4EC 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C4EE 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C4F0                            ; ===========================================================================
0001C4F0                            
0001C4F0                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C4F0 6100 0000                  		bsr.w	Obj09_Rise
0001C4F4 6100 0000                  		bsr.w	Obj09_Move
0001C4F8 6100 0000                  		bsr.w	Obj09_Fall
0001C4FC 6000                       		bra.s	Obj09_Display
0001C4FE                            ; ===========================================================================
0001C4FE                            
0001C4FE                            Obj09_InAir:				; XREF: Obj09_Modes
0001C4FE 6100 0000                  		bsr.w	Obj09_Rise
0001C502 6100 0000                  		bsr.w	Obj09_Move
0001C506 6100 0000                  		bsr.w	Obj09_Fall
0001C50A                            
0001C50A                            Obj09_Display:				; XREF: Obj09_OnWall
0001C50A 6100 0000                  		bsr.w	Obj09_ChkItems
0001C50E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C512 4EB9 0000 DFC8             		jsr	SpeedToPos
0001C518 6100 0000                  		bsr.w	SS_FixCamera
0001C51C 3038 F780                  		move.w	($FFFFF780).w,d0
0001C520 D078 F782                  		add.w	($FFFFF782).w,d0
0001C524 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C528 4EB9 0001 4450             		jsr	Sonic_Animate
0001C52E 4E75                       		rts	
0001C530                            
0001C530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C530                            
0001C530                            
0001C530                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C530 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C536 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C538 4A78 F784                          tst.w   ($FFFFF784).w
0001C53C 6600                               bne.s   @corereverse1
0001C53E 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C542 6000                               bra.s   Obj09_ChkRight          
0001C544                            
0001C544                            @corereverse1:
0001C544 6100 0000                          bsr.w	Obj09_MoveRight
0001C548                            
0001C548                            Obj09_ChkRight:
0001C548 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C54E 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C550 4A78 F784                          tst.w   ($FFFFF784).w
0001C554 6600                               bne.s   @corereverse2
0001C556 6100 0000                  		bsr.w	Obj09_MoveRight
0001C55A 6000                               bra.s   Obj09_MoveSpeed 
0001C55C                            
0001C55C                            @corereverse2:
0001C55C 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C560                            
0001C560                            Obj09_MoveSpeed:
0001C560 1038 F602                  		move.b	($FFFFF602).w,d0
0001C564 0200 000C                  		andi.b	#$C,d0
0001C568 6600                       		bne.s	Obj09_MoveCollision
0001C56A 3028 0010                  		move.w	$10(a0),d0
0001C56E 6700                       		beq.s	Obj09_MoveCollision
0001C570 317C 0000 0010             		move.w	#0,$10(a0)
0001C576                            
0001C576                            Obj09_MoveCollision:
0001C576 1038 F780                  		move.b	($FFFFF780).w,d0
0001C57A 0600 0020                  		addi.b	#$20,d0
0001C57E 0200 00C0                  		andi.b	#$C0,d0
0001C582 4400                       		neg.b	d0
0001C584 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001C58A C3E8 0010                  		muls.w	$10(a0),d1
0001C58E D3A8 0008                  		add.l	d1,8(a0)
0001C592 C1E8 0012                  		muls.w	$12(a0),d0
0001C596 D1A8 000C                  		add.l	d0,$C(a0)
0001C59A 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C59E 2428 000C                  		move.l	$C(a0),d2
0001C5A2 2628 0008                  		move.l	8(a0),d3
0001C5A6 6100 0000                  		bsr.w	sub_1BCE8
0001C5AA 6700                       		beq.s	loc_1BAF2
0001C5AC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C5B0 93A8 0008                  		sub.l	d1,8(a0)
0001C5B4 91A8 000C                  		sub.l	d0,$C(a0)
0001C5B8 317C 0000 0010             		move.w	#0,$10(a0)
0001C5BE 4E75                       		rts	
0001C5C0                            ; ===========================================================================
0001C5C0                            
0001C5C0                            loc_1BAF2:
0001C5C0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C5C4 4E75                       		rts	
0001C5C6                            ; End of function Obj09_Move
0001C5C6                            
0001C5C6                            
0001C5C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5C6                            
0001C5C6                            
0001C5C6                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C5C6 08E8 0000 0022             		bset	#0,$22(a0)
0001C5CC 4240                               clr.w   d0
0001C5CE 3038 F786                          move.w  ($FFFFF786).w,d0
0001C5D2 D040                               add.w   d0,d0
0001C5D4 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C5DA 4468 0010                          neg.w   $10(a0)
0001C5DE 4E75                               rts
0001C5E0                            
0001C5E0                            ; End of function Obj09_MoveLeft
0001C5E0                            
0001C5E0                            
0001C5E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5E0                            
0001C5E0                            
0001C5E0                            Obj09_MoveRight:
0001C5E0 08A8 0000 0022             		bclr	#0,$22(a0)
0001C5E6 4240                               clr.w   d0
0001C5E8 3038 F786                          move.w  ($FFFFF786).w,d0
0001C5EC D040                               add.w   d0,d0
0001C5EE 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C5F4 4E75                       		rts
0001C5F6                            
0001C5F6                            ; End of function Obj09_MoveRight
0001C5F6                            
0001C5F6                            ; ---------------------------------------------------------------------------
0001C5F6                            
0001C5F6                            SS_XSpdIndex:
0001C5F6 0032                       		dc.w 50
0001C5F8 0064                       		dc.w 100
0001C5FA 0096                       		dc.w 150
0001C5FC 00C8                       		dc.w 200
0001C5FE 00FA                       		dc.w 250
0001C600                            
0001C600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C600                            
0001C600                            
0001C600                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C600 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C606 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C608 4A78 F784                          tst.w   ($FFFFF784).w
0001C60C 6600 0000                          bne.w   @corereverse1
0001C610 6100 0000                  		bsr.w	Obj09_MoveUp
0001C614 6000                               bra.s   Obj09_NoRise
0001C616                            
0001C616                            @corereverse1:
0001C616 6100 0000                  		bsr.w	Obj09_Falling 
0001C61A                                    
0001C61A                            Obj09_NoRise:
0001C61A 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C620 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C622 4A78 F784                          tst.w   ($FFFFF784).w
0001C626 6600 0000                          bne.w   @corereverse2
0001C62A 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C62E 6000                               bra.s   Obj09_MoveYSpeed
0001C630                            
0001C630                            @corereverse2:
0001C630 6100 0000                  		bsr.w	Obj09_MoveUp
0001C634                            		
0001C634                            Obj09_MoveYSpeed:
0001C634 1038 F602                  		move.b	($FFFFF602).w,d0
0001C638 0200 0003                  		andi.b	#3,d0
0001C63C 6600                       		bne.s	Obj09_MoveYCollision
0001C63E 3028 0012                  		move.w	$12(a0),d0
0001C642 6700                       		beq.s	Obj09_MoveYCollision
0001C644 317C 0000 0012             		move.w	#0,$12(a0)
0001C64A                            
0001C64A                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C64A 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C64E 0600 0020                  		addi.b	#$20,d0					;	?
0001C652 0200 00C0                  		andi.b	#$C0,d0					;	
0001C656 4400                       		neg.b	d0						;	?
0001C658 4EB9 0000 2D6C             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C65E C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C662 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C666 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C66A D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C66E 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C672 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C676 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C67A 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C67E 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C682 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C686 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C68A 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C68E 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C694 4E75                       		rts								;	end routine
0001C696                            
0001C696                            Obj09_MoveUp:
0001C696 4240                               clr.w   d0
0001C698 3038 F786                          move.w  ($FFFFF786).w,d0
0001C69C D040                               add.w   d0,d0
0001C69E 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C6A4 4468 0012                          neg.w   $12(a0)
0001C6A8 4E75                               rts
0001C6AA                            
0001C6AA                            Obj09_Falling:
0001C6AA 4240                               clr.w   d0
0001C6AC 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6B0 D040                               add.w   d0,d0
0001C6B2 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C6B8 4E75                       		rts
0001C6BA                            ; End of function Obj09_Jump
0001C6BA                            
0001C6BA                            ; ---------------------------------------------------------------------------
0001C6BA                            SS_YSpdIndex:
0001C6BA 0080                       		dc.w $80
0001C6BC 0100                       		dc.w $100
0001C6BE 0180                       		dc.w $180
0001C6C0 0200                       		dc.w $200
0001C6C2 0280                       		dc.w $280
0001C6C4                            
0001C6C4                            
0001C6C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6C4                            
0001C6C4                            
0001C6C4                            nullsub_2:				; XREF: Obj09_InAir
0001C6C4 4E75                       		rts	
0001C6C6                            ; End of function nullsub_2
0001C6C6                            
0001C6C6                            ; ===========================================================================
0001C6C6                            ; ---------------------------------------------------------------------------
0001C6C6                            ; unused subroutine to limit Sonic's upward vertical speed
0001C6C6                            ; ---------------------------------------------------------------------------
0001C6C6 323C FC00                  		move.w	#-$400,d1
0001C6CA B268 0012                  		cmp.w	$12(a0),d1
0001C6CE 6F00                       		ble.s	locret_1BBB4
0001C6D0 1038 F602                  		move.b	($FFFFF602).w,d0
0001C6D4 0200 0070                  		andi.b	#$70,d0
0001C6D8 6600                       		bne.s	locret_1BBB4
0001C6DA 3141 0012                  		move.w	d1,$12(a0)
0001C6DE                            
0001C6DE                            locret_1BBB4:
0001C6DE 4E75                       		rts	
0001C6E0                            ; ---------------------------------------------------------------------------
0001C6E0                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C6E0                            ; ---------------------------------------------------------------------------
0001C6E0                            
0001C6E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6E0                            
0001C6E0                            
0001C6E0                            SS_FixCamera:				; XREF: Obj09
0001C6E0 3428 000C                  		move.w	$C(a0),d2
0001C6E4 3628 0008                  		move.w	8(a0),d3
0001C6E8 3038 F700                  		move.w	($FFFFF700).w,d0
0001C6EC 0443 00A0                  		subi.w	#$A0,d3
0001C6F0 6500                       		bcs.s	loc_1BBCE
0001C6F2 9043                       		sub.w	d3,d0
0001C6F4 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C6F8                            
0001C6F8                            loc_1BBCE:
0001C6F8 3038 F704                  		move.w	($FFFFF704).w,d0
0001C6FC 0442 0070                  		subi.w	#$70,d2
0001C700 6500                       		bcs.s	locret_1BBDE
0001C702 9042                       		sub.w	d2,d0
0001C704 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C708                            
0001C708                            locret_1BBDE:
0001C708 4E75                       		rts	
0001C70A                            ; End of function SS_FixCamera
0001C70A                            
0001C70A                            ; ===========================================================================
0001C70A                            
0001C70A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C70A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C710 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C716 6600                       		bne.s	loc_1BBF4
0001C718 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C71E                            
0001C71E                            loc_1BBF4:
0001C71E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C724 6D00                       		blt.s	loc_1BC12
0001C726 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C72C                            ;		move.w	#$4000,($FFFFF780).w
0001C72C 5428 0024                  		addq.b	#2,$24(a0)
0001C730 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C736                            
0001C736                            loc_1BC12:
0001C736                            ;		move.w	($FFFFF780).w,d0
0001C736                            ;		add.w	($FFFFF782).w,d0
0001C736                            ;		move.w	d0,($FFFFF780).w
0001C736 4EB9 0001 4450             		jsr	Sonic_Animate
0001C73C 4EB9 0001 46F6             		jsr	LoadSonicDynPLC
0001C742 6100 FF9C                  		bsr.w	SS_FixCamera
0001C746 4EF9 0000 DFEE             		jmp	DisplaySprite
0001C74C                            ; ===========================================================================
0001C74C                            
0001C74C                            Obj09_Exit2:				; XREF: Obj09_Index
0001C74C 5368 0038                  		subq.w	#1,$38(a0)
0001C750 6600                       		bne.s	loc_1BC40
0001C752 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C758                            
0001C758                            loc_1BC40:
0001C758 4EB9 0001 4450             		jsr	Sonic_Animate
0001C75E 4EB9 0001 46F6             		jsr	LoadSonicDynPLC
0001C764 6100 FF7A                  		bsr.w	SS_FixCamera
0001C768 4EF9 0000 DFEE             		jmp	DisplaySprite
0001C76E                            
0001C76E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C76E                            
0001C76E                            
0001C76E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C76E 2428 000C                  		move.l	$C(a0),d2
0001C772 2628 0008                  		move.l	8(a0),d3
0001C776 1038 F780                  		move.b	($FFFFF780).w,d0
0001C77A 0200 00FC                  		andi.b	#$FC,d0
0001C77E 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001C784 3828 0010                  		move.w	$10(a0),d4
0001C788 48C4                       		ext.l	d4
0001C78A E184                       		asl.l	#8,d4
0001C78C C1FC 002A                  		muls.w	#$2A,d0
0001C790 D084                       		add.l	d4,d0
0001C792 3828 0012                  		move.w	$12(a0),d4
0001C796 48C4                       		ext.l	d4
0001C798 E184                       		asl.l	#8,d4
0001C79A C3FC 002A                  		muls.w	#$2A,d1
0001C79E D284                       		add.l	d4,d1
0001C7A0 7A00                       		moveq	#0,d5
0001C7A2 3A28 0010                  		move.w	$10(a0),d5
0001C7A6 6700                       		beq.s	Obj09_NoXFall
0001C7A8 D680                       		add.l	d0,d3
0001C7AA 6100 0000                  		bsr.w	sub_1BCE8
0001C7AE 6700                       		beq.s	loc_1BCB0
0001C7B0 9680                       		sub.l	d0,d3
0001C7B2 7000                       		moveq	#0,d0
0001C7B4 3140 0010                  		move.w	d0,$10(a0)
0001C7B8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C7BE                            
0001C7BE                            Obj09_NoXFall
0001C7BE 7C00                       		moveq	#0,d6
0001C7C0 3C28 0012                  		move.w	$12(a0),d6
0001C7C4 6700                       		beq.s	Obj09_NoYFall
0001C7C6 D481                       		add.l	d1,d2
0001C7C8 6100 0000                  		bsr.w	sub_1BCE8
0001C7CC 6700                       		beq.s	loc_1BCC6
0001C7CE 9481                       		sub.l	d1,d2
0001C7D0 7200                       		moveq	#0,d1
0001C7D2 3141 0012                  		move.w	d1,$12(a0)
0001C7D6 4E75                       		rts	
0001C7D8                            ; ===========================================================================
0001C7D8                            
0001C7D8                            loc_1BCB0:
0001C7D8 7C00                       		moveq	#0,d6
0001C7DA 3C28 0012                  		move.w	$12(a0),d6
0001C7DE 6700                       		beq.s	Obj09_NoYFall
0001C7E0 D481                       		add.l	d1,d2
0001C7E2 6100 0000                  		bsr.w	sub_1BCE8
0001C7E6 6700                       		beq.s	loc_1BCD4
0001C7E8 9481                       		sub.l	d1,d2
0001C7EA 7200                       		moveq	#0,d1
0001C7EC 3141 0012                  		move.w	d1,$12(a0)
0001C7F0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C7F6                            
0001C7F6                            loc_1BCC6:
0001C7F6 E080                       		asr.l	#8,d0
0001C7F8 E081                       		asr.l	#8,d1
0001C7FA 3140 0010                  		move.w	d0,$10(a0)
0001C7FE 3141 0012                  		move.w	d1,$12(a0)
0001C802 4E75                       		rts	
0001C804                            ; ===========================================================================
0001C804                            
0001C804                            loc_1BCD4:
0001C804 E080                       		asr.l	#8,d0
0001C806 E081                       		asr.l	#8,d1
0001C808 3140 0010                  		move.w	d0,$10(a0)
0001C80C 3141 0012                  		move.w	d1,$12(a0)
0001C810 08E8 0001 0022             		bset	#1,$22(a0)
0001C816 4E75                       		rts	
0001C818                            
0001C818                            Obj09_NoYFall:
0001C818 4E75                       		rts
0001C81A                            ; End of function Obj09_Fall
0001C81A                            
0001C81A                            
0001C81A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C81A                            
0001C81A                            
0001C81A                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C81A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C820 7800                       		moveq	#0,d4
0001C822 4842                       		swap	d2
0001C824 3802                       		move.w	d2,d4
0001C826 4842                       		swap	d2
0001C828 0644 0044                  		addi.w	#$44,d4
0001C82C 88FC 0018                  		divu.w	#$18,d4
0001C830 C8FC 0080                  		mulu.w	#$80,d4
0001C834 D3C4                       		adda.l	d4,a1
0001C836 7800                       		moveq	#0,d4
0001C838 4843                       		swap	d3
0001C83A 3803                       		move.w	d3,d4
0001C83C 4843                       		swap	d3
0001C83E 0644 0014                  		addi.w	#$14,d4
0001C842 88FC 0018                  		divu.w	#$18,d4
0001C846 D2C4                       		adda.w	d4,a1
0001C848 7A00                       		moveq	#0,d5
0001C84A 1819                       		move.b	(a1)+,d4
0001C84C 6100                       		bsr.s	sub_1BD30
0001C84E 1819                       		move.b	(a1)+,d4
0001C850 6100                       		bsr.s	sub_1BD30
0001C852 D2FC 007E                  		adda.w	#$7E,a1
0001C856 1819                       		move.b	(a1)+,d4
0001C858 6100                       		bsr.s	sub_1BD30
0001C85A 1819                       		move.b	(a1)+,d4
0001C85C 6100                       		bsr.s	sub_1BD30
0001C85E 4A05                       		tst.b	d5
0001C860 4E75                       		rts	
0001C862                            ; End of function sub_1BCE8
0001C862                            
0001C862                            
0001C862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C862                            
0001C862                            
0001C862                            sub_1BD30:				; XREF: sub_1BCE8
0001C862 6700                       		beq.s	locret_1BD44
0001C864 0C04 0028                  		cmpi.b	#$28,d4
0001C868 6500                       		blo.s	loc_1BD46
0001C86A 0C04 004B                  		cmpi.b	#$4B,d4
0001C86E 6400                       		bhs.s	loc_1BD46
0001C870 0C04 003A                  		cmpi.b	#$3A,d4
0001C874 6400                       		bhs.s	locret_1BD44
0001C876 0C04 002C                  		cmpi.b	#$2C,d4
0001C87A 6400                       		bhs.s	loc_1BD46
0001C87C                            
0001C87C                            locret_1BD44:
0001C87C 4E75                       		rts	
0001C87E                            ; ===========================================================================
0001C87E                            
0001C87E                            loc_1BD46:
0001C87E 1144 0030                  		move.b	d4,$30(a0)
0001C882 2149 0032                  		move.l	a1,$32(a0)
0001C886 7AFF                       		moveq	#-1,d5
0001C888 4E75                       		rts	
0001C88A                            ; End of function sub_1BD30
0001C88A                            
0001C88A                            
0001C88A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C88A                            
0001C88A                            
0001C88A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C88A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C890 7800                       		moveq	#0,d4
0001C892 3828 000C                  		move.w	$C(a0),d4
0001C896 0644 0050                  		addi.w	#$50,d4
0001C89A 88FC 0018                  		divu.w	#$18,d4
0001C89E C8FC 0080                  		mulu.w	#$80,d4
0001C8A2 D3C4                       		adda.l	d4,a1
0001C8A4 7800                       		moveq	#0,d4
0001C8A6 3828 0008                  		move.w	8(a0),d4
0001C8AA 0644 0020                  		addi.w	#$20,d4
0001C8AE 88FC 0018                  		divu.w	#$18,d4
0001C8B2 D2C4                       		adda.w	d4,a1
0001C8B4 1811                       		move.b	(a1),d4
0001C8B6 6600                       		bne.s	Obj09_ChkCont
0001C8B8 4A28 003A                  		tst.b	$3A(a0)
0001C8BC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C8C0 7800                       		moveq	#0,d4
0001C8C2 4E75                       		rts	
0001C8C4                            ; ===========================================================================
0001C8C4                            
0001C8C4                            Obj09_ChkCont:
0001C8C4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C8C8 6600                       		bne.s	Obj09_Chk1Up
0001C8CA 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C8CE 6600                       		bne.s	Obj09_GetCont
0001C8D0 14BC 0001                  		move.b	#1,(a2)
0001C8D4 2549 0004                  		move.l	a1,4(a2)
0001C8D8                            
0001C8D8                            Obj09_GetCont:
0001C8D8 4EB9 0000 A4D2             		jsr	CollectRing
0001C8DE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C8E4 6500                       		bcs.s	Obj09_NoCont
0001C8E6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C8EC 6600                       		bne.s	Obj09_NoCont
0001C8EE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C8F2 303C 00BF                  		move.w	#$BF,d0
0001C8F6 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra continue sound
0001C8FC                            
0001C8FC                            Obj09_NoCont:
0001C8FC 7800                       		moveq	#0,d4
0001C8FE 4E75                       		rts	
0001C900                            ; ===========================================================================
0001C900                            
0001C900                            Obj09_Chk1Up:
0001C900 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C904 6600                       		bne.s	Obj09_ChkEmer
0001C906 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001C90A 6600                       		bne.s	Obj09_Get1Up
0001C90C 14BC 0003                  		move.b	#3,(a2)
0001C910 2549 0004                  		move.l	a1,4(a2)
0001C914                            
0001C914                            Obj09_Get1Up:
0001C914 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C918 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C91C 303C 0088                  		move.w	#$88,d0
0001C920 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra life music
0001C926 7800                       		moveq	#0,d4
0001C928 4E75                       		rts	
0001C92A                            ; ===========================================================================
0001C92A                            
0001C92A                            Obj09_ChkEmer:
0001C92A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C92E 6500                       		bcs.s	Obj09_UPblock
0001C930 0C04 0040                  		cmpi.b	#$40,d4
0001C934 6200                       		bhi.s	Obj09_UPblock
0001C936 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001C93A 6600                       		bne.s	Obj09_GetEmer
0001C93C 14BC 0005                  		move.b	#5,(a2)
0001C940 2549 0004                  		move.l	a1,4(a2)
0001C944                            
0001C944                            Obj09_GetEmer:
0001C944 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C94A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C94C 0404 003B                  		subi.b	#$3B,d4
0001C950 7000                       		moveq	#0,d0
0001C952 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C956 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C95A 1584 0000                  		move.b	d4,(a2,d0.w)
0001C95E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C962                            
0001C962                            Obj09_NoEmer:
0001C962 303C 0093                  		move.w	#$93,d0
0001C966 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play emerald music
0001C96C 7800                       		moveq	#0,d4
0001C96E 4E75                       		rts	
0001C970                            
0001C970                            ; ===========================================================================
0001C970                            
0001C970                            Obj09_UPblock:
0001C970 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001C974 6600                       		bne.s	Obj09_DOWNblock
0001C976 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001C97A 6600                       		bne.s	Obj09_SpeedUp
0001C97C 14BC 0001                  		move.b	#1,(a2)
0001C980 2549 0004                  		move.l	a1,4(a2)
0001C984                            
0001C984                            Obj09_SpeedUp:
0001C984 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001C98A 6400                       		bhs.s	Obj09_UPsnd
0001C98C 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001C990                            
0001C990                            Obj09_UPsnd:
0001C990 303C 00A9                  		move.w	#$A9,d0
0001C994 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C99A 7800                       		moveq	#0,d4
0001C99C 4E75                       		rts	
0001C99E                            ; ===========================================================================
0001C99E                            
0001C99E                            Obj09_DOWNblock:
0001C99E 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001C9A2 6600                       		bne.s	Obj09_Rblock
0001C9A4 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001C9A8 6600                       		bne.s	Obj09_SpeedDown
0001C9AA 14BC 0001                  		move.b	#1,(a2)
0001C9AE 2549 0004                  		move.l	a1,4(a2)
0001C9B2                            
0001C9B2                            Obj09_SpeedDown:
0001C9B2 4A78 F786                  		tst.w 	($FFFFF786).w
0001C9B6 6700                       		beq.s	Obj09_DOWNsnd
0001C9B8 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001C9BC                            
0001C9BC                            Obj09_DOWNsnd:
0001C9BC 303C 00A9                  		move.w	#$A9,d0
0001C9C0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C9C6 7800                       		moveq	#0,d4
0001C9C8 4E75                       		rts	
0001C9CA                            ; ===========================================================================
0001C9CA                            
0001C9CA                            Obj09_Rblock:
0001C9CA 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001C9CE 6600                       		bne.s	Obj09_ChkGhost
0001C9D0 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001C9D4 6600                       		bne.s	Obj09_RevStage
0001C9D6 14BC 0001                  		move.b	#1,(a2)
0001C9DA 2549 0004                  		move.l	a1,4(a2)
0001C9DE                            
0001C9DE                            Obj09_RevStage:
0001C9DE 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001C9E4 103C 00A9                  		move.b	#$A9,d0
0001C9E8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play sound
0001C9EE 7800                       		moveq	#0,d4
0001C9F0 4E75                       		rts	
0001C9F2                            
0001C9F2                            ; ===========================================================================
0001C9F2                            
0001C9F2                            Obj09_ChkGhost:
0001C9F2 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C9F6 6600                       		bne.s	Obj09_ChkGhostTag
0001C9F8 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C9FE                            
0001C9FE                            Obj09_ChkGhostTag:
0001C9FE 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CA02 6600                       		bne.s	Obj09_NoGhost
0001CA04 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CA0A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CA0C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CA12                            
0001CA12                            Obj09_NoGhost:
0001CA12 78FF                       		moveq	#-1,d4
0001CA14 4E75                       		rts	
0001CA16                            ; ===========================================================================
0001CA16                            
0001CA16                            Obj09_MakeGhostSolid:
0001CA16 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CA1C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CA1E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CA24 723F                       		moveq	#$3F,d1
0001CA26                            
0001CA26                            Obj09_GhostLoop2:
0001CA26 743F                       		moveq	#$3F,d2
0001CA28                            
0001CA28                            Obj09_GhostLoop:
0001CA28 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CA2C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CA2E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CA32                            
0001CA32                            Obj09_NoReplace:
0001CA32 5249                       		addq.w	#1,a1
0001CA34 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CA38 43E9 0040                  		lea	$40(a1),a1
0001CA3C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CA40                            
0001CA40                            Obj09_GhostNotSolid:
0001CA40 4228 003A                  		clr.b	$3A(a0)
0001CA44 7800                       		moveq	#0,d4
0001CA46 4E75                       		rts	
0001CA48                            ; End of function Obj09_ChkItems
0001CA48                            
0001CA48                            
0001CA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA48                            
0001CA48                            
0001CA48                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CA48 1028 0030                  		move.b	$30(a0),d0
0001CA4C 6600                       		bne.s	Obj09_GOAL
0001CA4E 5328 0036                  		subq.b	#1,$36(a0)
0001CA52 6A00                       		bpl.s	loc_1BEA0
0001CA54 117C 0000 0036             		move.b	#0,$36(a0)
0001CA5A                            
0001CA5A                            loc_1BEA0:
0001CA5A 5328 0037                  		subq.b	#1,$37(a0)
0001CA5E 6A00                       		bpl.s	locret_1BEAC
0001CA60 117C 0000 0037             		move.b	#0,$37(a0)
0001CA66                            
0001CA66                            locret_1BEAC:
0001CA66 4E75                       		rts	
0001CA68                            ; ===========================================================================
0001CA68                            
0001CA68                            ; ===========================================================================
0001CA68                            
0001CA68                            Obj09_GOAL:
0001CA68 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CA6C 6600                       		bne.s	Obj09_ChkGlass
0001CA6E 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CA72 303C 00A8                  		move.w	#$A8,d0		; change item
0001CA76 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CA7C 4E75                       		rts	
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            Obj09_ChkGlass:
0001CA7E 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CA82 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CA84 0C00 002E                  		cmpi.b	#$2E,d0
0001CA88 6700                       		beq.s	Obj09_Glass
0001CA8A 0C00 002F                  		cmpi.b	#$2F,d0
0001CA8E 6700                       		beq.s	Obj09_Glass
0001CA90 0C00 0030                  		cmpi.b	#$30,d0
0001CA94 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CA96                            
0001CA96                            Obj09_Glass:
0001CA96 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CA9A 6600                       		bne.s	Obj09_GlassSnd
0001CA9C 14BC 0006                  		move.b	#6,(a2)
0001CAA0 2268 0032                  		movea.l	$32(a0),a1
0001CAA4 5389                       		subq.l	#1,a1
0001CAA6 2549 0004                  		move.l	a1,4(a2)
0001CAAA 1011                       		move.b	(a1),d0
0001CAAC 5200                       		addq.b	#1,d0		; change glass type when touched
0001CAAE 0C00 0030                  		cmpi.b	#$30,d0
0001CAB2 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CAB4 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CAB6                            
0001CAB6                            Obj09_GlassUpdate:
0001CAB6 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CABA                            
0001CABA                            Obj09_GlassSnd:
0001CABA 303C 00BA                  		move.w	#$BA,d0
0001CABE 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CAC4                            ; ===========================================================================
0001CAC4                            
0001CAC4                            Obj09_NoGlass:
0001CAC4 4E75                       		rts	
0001CAC6                            ; End of function Obj09_ChkItems2
0001CAC6                            
0001CAC6                            ; ===========================================================================
0001CAC6                            ; ---------------------------------------------------------------------------
0001CAC6                            ; Object 10 - blank
0001CAC6                            ; ---------------------------------------------------------------------------
0001CAC6                            
0001CAC6                            Obj10:					; XREF: Obj_Index
0001CAC6 4E75                       		rts	
0001CAC8                            ; ---------------------------------------------------------------------------
0001CAC8                            ; Subroutine to	animate	level graphics
0001CAC8                            ; ---------------------------------------------------------------------------
0001CAC8                            
0001CAC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC8                            
0001CAC8                            
0001CAC8                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CAC8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CACC 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CACE 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CAD4 6100 0000                  		bsr.w	AniArt_GiantRing
0001CAD8 7000                       		moveq	#0,d0
0001CADA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CADE D040                       		add.w	d0,d0
0001CAE0 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CAE4 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CAE8                            ; ===========================================================================
0001CAE8                            
0001CAE8                            AniArt_Pause:
0001CAE8 4E75                       		rts	
0001CAEA                            ; End of function AniArt_Load
0001CAEA                            
0001CAEA                            ; ===========================================================================
0001CAEA 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CAEE 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CAF2 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CAF6 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CAFA                            ; ===========================================================================
0001CAFA                            ; ---------------------------------------------------------------------------
0001CAFA                            ; Animated pattern routine - Green Hill
0001CAFA                            ; ---------------------------------------------------------------------------
0001CAFA                            
0001CAFA                            AniArt_GHZ:				; XREF: AniArt_Index
0001CAFA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CAFE 6A00                       		bpl.s	loc_1C08A
0001CB00 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CB06 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CB0C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB10 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB14 0240 0001                  		andi.w	#1,d0
0001CB18 6700                       		beq.s	loc_1C078
0001CB1A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CB1E                            
0001CB1E                            loc_1C078:
0001CB1E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CB28 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CB2C 6000 0000                  		bra.w	LoadTiles
0001CB30                            ; ===========================================================================
0001CB30                            
0001CB30                            loc_1C08A:
0001CB30 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB34 6A00                       		bpl.s	loc_1C0C0
0001CB36 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CB3C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB42 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB46 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB4A 0240 0001                  		andi.w	#1,d0
0001CB4E 6700                       		beq.s	loc_1C0AE
0001CB50 43E9 0200                  		lea	$200(a1),a1
0001CB54                            
0001CB54                            loc_1C0AE:
0001CB54 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CB5E 323C 000F                  		move.w	#$F,d1
0001CB62 6000 0000                  		bra.w	LoadTiles
0001CB66                            ; ===========================================================================
0001CB66                            
0001CB66                            loc_1C0C0:
0001CB66 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB6A 6A00                       		bpl.s	locret_1C10C
0001CB6C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB72 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CB76 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CB7A 0240 0003                  		andi.w	#3,d0
0001CB7E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CB82 0800 0000                  		btst	#0,d0
0001CB86 6600                       		bne.s	loc_1C0E8
0001CB88 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CB8E                            
0001CB8E                            loc_1C0E8:
0001CB8E EF48                       		lsl.w	#7,d0
0001CB90 3200                       		move.w	d0,d1
0001CB92 D040                       		add.w	d0,d0
0001CB94 D041                       		add.w	d1,d0
0001CB96 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CBA0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CBA6 43F1 0000                  		lea	(a1,d0.w),a1
0001CBAA 323C 000B                  		move.w	#$B,d1
0001CBAE 6100 0000                  		bsr.w	LoadTiles
0001CBB2                            
0001CBB2                            locret_1C10C:
0001CBB2 4E75                       		rts	
0001CBB4                            ; ===========================================================================
0001CBB4 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CBB8                            ; ===========================================================================
0001CBB8                            ; ---------------------------------------------------------------------------
0001CBB8                            ; Animated pattern routine - Marble
0001CBB8                            ; ---------------------------------------------------------------------------
0001CBB8                            
0001CBB8                            AniArt_MZ:				; XREF: AniArt_Index
0001CBB8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CBBC 6A00                       		bpl.s	loc_1C150
0001CBBE 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CBC4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CBCA 7000                       		moveq	#0,d0
0001CBCC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CBD0 5200                       		addq.b	#1,d0
0001CBD2 0C00 0003                  		cmpi.b	#3,d0
0001CBD6 6600                       		bne.s	loc_1C134
0001CBD8 7000                       		moveq	#0,d0
0001CBDA                            
0001CBDA                            loc_1C134:
0001CBDA 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CBDE C0FC 0100                  		mulu.w	#$100,d0
0001CBE2 D2C0                       		adda.w	d0,a1
0001CBE4 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CBEE 323C 0007                  		move.w	#7,d1
0001CBF2 6100 0000                  		bsr.w	LoadTiles
0001CBF6                            
0001CBF6                            loc_1C150:
0001CBF6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CBFA 6A00                       		bpl.s	loc_1C1AE
0001CBFC 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CC02 7000                       		moveq	#0,d0
0001CC04 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC08 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CC0E EE58                       		ror.w	#7,d0
0001CC10 D8C0                       		adda.w	d0,a4
0001CC12 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CC1C 7600                       		moveq	#0,d3
0001CC1E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CC22 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC26 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CC2A 343C 0003                  		move.w	#3,d2
0001CC2E                            
0001CC2E                            loc_1C188:
0001CC2E 3003                       		move.w	d3,d0
0001CC30 D040                       		add.w	d0,d0
0001CC32 0240 001E                  		andi.w	#$1E,d0
0001CC36 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CC3C 3033 0000                  		move.w	(a3,d0.w),d0
0001CC40 47F3 0000                  		lea	(a3,d0.w),a3
0001CC44 224C                       		movea.l	a4,a1
0001CC46 323C 001F                  		move.w	#$1F,d1
0001CC4A 4E93                       		jsr	(a3)
0001CC4C 5843                       		addq.w	#4,d3
0001CC4E 51CA FFDE                  		dbf	d2,loc_1C188
0001CC52 4E75                       		rts	
0001CC54                            ; ===========================================================================
0001CC54                            
0001CC54                            loc_1C1AE:
0001CC54 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC58 6A00 0000                  		bpl.w	locret_1C1EA
0001CC5C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC62 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CC68 7000                       		moveq	#0,d0
0001CC6A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CC6E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CC72 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CC78 C0FC 00C0                  		mulu.w	#$C0,d0
0001CC7C D2C0                       		adda.w	d0,a1
0001CC7E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CC88 323C 0005                  		move.w	#5,d1
0001CC8C 6000 0000                  		bra.w	LoadTiles
0001CC90                            ; ===========================================================================
0001CC90                            
0001CC90                            locret_1C1EA:
0001CC90 4E75                       		rts	
0001CC92                            ; ===========================================================================
0001CC92                            ; ---------------------------------------------------------------------------
0001CC92                            ; Animated pattern routine - Scrap Brain
0001CC92                            ; ---------------------------------------------------------------------------
0001CC92                            
0001CC92                            AniArt_SBZ:				; XREF: AniArt_Index
0001CC92 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CC96 6700                       		beq.s	loc_1C1F8
0001CC98 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CC9C 6000                       		bra.s	loc_1C250
0001CC9E                            ; ===========================================================================
0001CC9E                            
0001CC9E                            loc_1C1F8:
0001CC9E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CCA2 6A00                       		bpl.s	loc_1C250
0001CCA4 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CCAA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CCB0 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CCBA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CCBE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CCC2 0240 0007                  		andi.w	#7,d0
0001CCC6 6700                       		beq.s	loc_1C234
0001CCC8 5340                       		subq.w	#1,d0
0001CCCA C0FC 0180                  		mulu.w	#$180,d0
0001CCCE 43F1 0000                  		lea	(a1,d0.w),a1
0001CCD2 323C 000B                  		move.w	#$B,d1
0001CCD6 6000 0000                  		bra.w	LoadTiles
0001CCDA                            ; ===========================================================================
0001CCDA                            
0001CCDA                            loc_1C234:
0001CCDA 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CCE0                            
0001CCE0                            loc_1C23A:
0001CCE0 323C 0005                  		move.w	#5,d1
0001CCE4 6100 0000                  		bsr.w	LoadTiles
0001CCE8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CCEE 323C 0005                  		move.w	#5,d1
0001CCF2 6000 0000                  		bra.w	LoadTiles
0001CCF6                            ; ===========================================================================
0001CCF6                            
0001CCF6                            loc_1C250:
0001CCF6 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CCFA 6700                       		beq.s	loc_1C25C
0001CCFC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD00 6000                       		bra.s	locret_1C2A0
0001CD02                            ; ===========================================================================
0001CD02                            
0001CD02                            loc_1C25C:
0001CD02 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD06 6A00                       		bpl.s	locret_1C2A0
0001CD08 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CD0E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CD14 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CD1E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CD22 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD26 0240 0007                  		andi.w	#7,d0
0001CD2A 6700                       		beq.s	loc_1C298
0001CD2C 5340                       		subq.w	#1,d0
0001CD2E C0FC 0180                  		mulu.w	#$180,d0
0001CD32 43F1 0000                  		lea	(a1,d0.w),a1
0001CD36 323C 000B                  		move.w	#$B,d1
0001CD3A 6000 0000                  		bra.w	LoadTiles
0001CD3E                            ; ===========================================================================
0001CD3E                            
0001CD3E                            loc_1C298:
0001CD3E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CD44 609A                       		bra.s	loc_1C23A
0001CD46                            ; ===========================================================================
0001CD46                            
0001CD46                            locret_1C2A0:
0001CD46 4E75                       		rts	
0001CD48                            ; ===========================================================================
0001CD48                            ; ---------------------------------------------------------------------------
0001CD48                            ; Animated pattern routine - ending sequence
0001CD48                            ; ---------------------------------------------------------------------------
0001CD48                            
0001CD48                            AniArt_Ending:				; XREF: AniArt_Index
0001CD48 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD4C 6A00                       		bpl.s	loc_1C2F4
0001CD4E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CD54 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CD5A 45F8 9400                  		lea	($FFFF9400).w,a2
0001CD5E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CD62 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD66 0240 0001                  		andi.w	#1,d0
0001CD6A 6700                       		beq.s	loc_1C2CE
0001CD6C 43E9 0200                  		lea	$200(a1),a1
0001CD70 45EA 0200                  		lea	$200(a2),a2
0001CD74                            
0001CD74                            loc_1C2CE:
0001CD74 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CD7E 323C 000F                  		move.w	#$F,d1
0001CD82 6100 0000                  		bsr.w	LoadTiles
0001CD86 224A                       		movea.l	a2,a1
0001CD88 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CD92 323C 000F                  		move.w	#$F,d1
0001CD96 6000 0000                  		bra.w	LoadTiles
0001CD9A                            ; ===========================================================================
0001CD9A                            
0001CD9A                            loc_1C2F4:
0001CD9A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD9E 6A00                       		bpl.s	loc_1C33C
0001CDA0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CDA6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CDAA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CDAE 0240 0007                  		andi.w	#7,d0
0001CDB2 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CDB6 EF48                       		lsl.w	#7,d0
0001CDB8 3200                       		move.w	d0,d1
0001CDBA D040                       		add.w	d0,d0
0001CDBC D041                       		add.w	d1,d0
0001CDBE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CDC8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CDCE 43F1 0000                  		lea	(a1,d0.w),a1
0001CDD2 323C 000B                  		move.w	#$B,d1
0001CDD6 6000 0000                  		bra.w	LoadTiles
0001CDDA                            ; ===========================================================================
0001CDDA 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CDE2                            ; ===========================================================================
0001CDE2                            
0001CDE2                            loc_1C33C:
0001CDE2 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CDE6 6A00                       		bpl.s	loc_1C37A
0001CDE8 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CDEE 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CDF2 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CDF6 0240 0003                  		andi.w	#3,d0
0001CDFA 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CDFE E148                       		lsl.w	#8,d0
0001CE00 D040                       		add.w	d0,d0
0001CE02 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CE0C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CE10 43F1 0000                  		lea	(a1,d0.w),a1
0001CE14 323C 000F                  		move.w	#$F,d1
0001CE18 6000 0000                  		bra.w	LoadTiles
0001CE1C                            ; ===========================================================================
0001CE1C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CE20                            ; ===========================================================================
0001CE20                            
0001CE20                            loc_1C37A:
0001CE20 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CE24 6A00                       		bpl.s	locret_1C3B4
0001CE26 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CE2C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CE30 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CE34 0240 0003                  		andi.w	#3,d0
0001CE38 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CE3C E148                       		lsl.w	#8,d0
0001CE3E D040                       		add.w	d0,d0
0001CE40 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CE4A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CE4E 43F1 0000                  		lea	(a1,d0.w),a1
0001CE52 323C 000F                  		move.w	#$F,d1
0001CE56 6000 0000                  		bra.w	LoadTiles
0001CE5A                            ; ===========================================================================
0001CE5A                            
0001CE5A                            locret_1C3B4:
0001CE5A 4E75                       		rts	
0001CE5C                            ; ===========================================================================
0001CE5C                            
0001CE5C                            AniArt_none:				; XREF: AniArt_Index
0001CE5C 4E75                       		rts	
0001CE5E                            
0001CE5E                            ; ---------------------------------------------------------------------------
0001CE5E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CE5E                            ; ---------------------------------------------------------------------------
0001CE5E                            
0001CE5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE5E                            
0001CE5E                            
0001CE5E                            LoadTiles:
0001CE5E 2C99                       		move.l	(a1)+,(a6)
0001CE60 2C99                       		move.l	(a1)+,(a6)
0001CE62 2C99                       		move.l	(a1)+,(a6)
0001CE64 2C99                       		move.l	(a1)+,(a6)
0001CE66 2C99                       		move.l	(a1)+,(a6)
0001CE68 2C99                       		move.l	(a1)+,(a6)
0001CE6A 2C99                       		move.l	(a1)+,(a6)
0001CE6C 2C99                       		move.l	(a1)+,(a6)
0001CE6E 51C9 FFEE                  		dbf	d1,LoadTiles
0001CE72 4E75                       		rts	
0001CE74                            ; End of function LoadTiles
0001CE74                            
0001CE74                            ; ===========================================================================
0001CE74                            ; ---------------------------------------------------------------------------
0001CE74                            ; Animated pattern routine - more Marble Zone
0001CE74                            ; ---------------------------------------------------------------------------
0001CE74 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CE78 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CE7C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CE80 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CE84 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CE88 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CE8C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CE90 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CE94                            ; ===========================================================================
0001CE94                            
0001CE94                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CE94 2C91                       		move.l	(a1),(a6)
0001CE96 43E9 0010                  		lea	$10(a1),a1
0001CE9A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CE9E 4E75                       		rts	
0001CEA0                            ; ===========================================================================
0001CEA0                            
0001CEA0                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CEA0 2029 0002                  		move.l	2(a1),d0
0001CEA4 1029 0001                  		move.b	1(a1),d0
0001CEA8 E098                       		ror.l	#8,d0
0001CEAA 2C80                       		move.l	d0,(a6)
0001CEAC 43E9 0010                  		lea	$10(a1),a1
0001CEB0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CEB4 4E75                       		rts	
0001CEB6                            ; ===========================================================================
0001CEB6                            
0001CEB6                            loc_1C410:				; XREF: AniArt_MZextra
0001CEB6 2CA9 0002                  		move.l	2(a1),(a6)
0001CEBA 43E9 0010                  		lea	$10(a1),a1
0001CEBE 51C9 FFF6                  		dbf	d1,loc_1C410
0001CEC2 4E75                       		rts	
0001CEC4                            ; ===========================================================================
0001CEC4                            
0001CEC4                            loc_1C41E:				; XREF: AniArt_MZextra
0001CEC4 2029 0004                  		move.l	4(a1),d0
0001CEC8 1029 0003                  		move.b	3(a1),d0
0001CECC E098                       		ror.l	#8,d0
0001CECE 2C80                       		move.l	d0,(a6)
0001CED0 43E9 0010                  		lea	$10(a1),a1
0001CED4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CED8 4E75                       		rts	
0001CEDA                            ; ===========================================================================
0001CEDA                            
0001CEDA                            loc_1C434:				; XREF: AniArt_MZextra
0001CEDA 2CA9 0004                  		move.l	4(a1),(a6)
0001CEDE 43E9 0010                  		lea	$10(a1),a1
0001CEE2 51C9 FFF6                  		dbf	d1,loc_1C434
0001CEE6 4E75                       		rts	
0001CEE8                            ; ===========================================================================
0001CEE8                            
0001CEE8                            loc_1C442:				; XREF: AniArt_MZextra
0001CEE8 2029 0006                  		move.l	6(a1),d0
0001CEEC 1029 0005                  		move.b	5(a1),d0
0001CEF0 E098                       		ror.l	#8,d0
0001CEF2 2C80                       		move.l	d0,(a6)
0001CEF4 43E9 0010                  		lea	$10(a1),a1
0001CEF8 51C9 FFEE                  		dbf	d1,loc_1C442
0001CEFC 4E75                       		rts	
0001CEFE                            ; ===========================================================================
0001CEFE                            
0001CEFE                            loc_1C458:				; XREF: AniArt_MZextra
0001CEFE 2CA9 0006                  		move.l	6(a1),(a6)
0001CF02 43E9 0010                  		lea	$10(a1),a1
0001CF06 51C9 FFF6                  		dbf	d1,loc_1C458
0001CF0A 4E75                       		rts	
0001CF0C                            ; ===========================================================================
0001CF0C                            
0001CF0C                            loc_1C466:				; XREF: AniArt_MZextra
0001CF0C 2029 0008                  		move.l	8(a1),d0
0001CF10 1029 0007                  		move.b	7(a1),d0
0001CF14 E098                       		ror.l	#8,d0
0001CF16 2C80                       		move.l	d0,(a6)
0001CF18 43E9 0010                  		lea	$10(a1),a1
0001CF1C 51C9 FFEE                  		dbf	d1,loc_1C466
0001CF20 4E75                       		rts	
0001CF22                            ; ===========================================================================
0001CF22                            
0001CF22                            loc_1C47C:				; XREF: AniArt_MZextra
0001CF22 2CA9 0008                  		move.l	8(a1),(a6)
0001CF26 43E9 0010                  		lea	$10(a1),a1
0001CF2A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CF2E 4E75                       		rts	
0001CF30                            ; ===========================================================================
0001CF30                            
0001CF30                            loc_1C48A:				; XREF: AniArt_MZextra
0001CF30 2029 000A                  		move.l	$A(a1),d0
0001CF34 1029 0009                  		move.b	9(a1),d0
0001CF38 E098                       		ror.l	#8,d0
0001CF3A 2C80                       		move.l	d0,(a6)
0001CF3C 43E9 0010                  		lea	$10(a1),a1
0001CF40 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CF44 4E75                       		rts	
0001CF46                            ; ===========================================================================
0001CF46                            
0001CF46                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CF46 2CA9 000A                  		move.l	$A(a1),(a6)
0001CF4A 43E9 0010                  		lea	$10(a1),a1
0001CF4E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CF52 4E75                       		rts	
0001CF54                            ; ===========================================================================
0001CF54                            
0001CF54                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CF54 2029 000C                  		move.l	$C(a1),d0
0001CF58 1029 000B                  		move.b	$B(a1),d0
0001CF5C E098                       		ror.l	#8,d0
0001CF5E 2C80                       		move.l	d0,(a6)
0001CF60 43E9 0010                  		lea	$10(a1),a1
0001CF64 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CF68 4E75                       		rts	
0001CF6A                            ; ===========================================================================
0001CF6A                            
0001CF6A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CF6A 2CA9 000C                  		move.l	$C(a1),(a6)
0001CF6E 43E9 0010                  		lea	$10(a1),a1
0001CF72 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CF76 4E75                       		rts	
0001CF78                            ; ===========================================================================
0001CF78                            
0001CF78                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CF78 2029 000C                  		move.l	$C(a1),d0
0001CF7C E198                       		rol.l	#8,d0
0001CF7E 1011                       		move.b	0(a1),d0
0001CF80 2C80                       		move.l	d0,(a6)
0001CF82 43E9 0010                  		lea	$10(a1),a1
0001CF86 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CF8A 4E75                       		rts	
0001CF8C                            ; ===========================================================================
0001CF8C                            
0001CF8C                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CF8C 3CA9 000E                  		move.w	$E(a1),(a6)
0001CF90 3C91                       		move.w	0(a1),(a6)
0001CF92 43E9 0010                  		lea	$10(a1),a1
0001CF96 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CF9A 4E75                       		rts	
0001CF9C                            ; ===========================================================================
0001CF9C                            
0001CF9C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CF9C 2011                       		move.l	0(a1),d0
0001CF9E 1029 000F                  		move.b	$F(a1),d0
0001CFA2 E098                       		ror.l	#8,d0
0001CFA4 2C80                       		move.l	d0,(a6)
0001CFA6 43E9 0010                  		lea	$10(a1),a1
0001CFAA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CFAE 4E75                       		rts	
0001CFB0                            
0001CFB0                            ; ---------------------------------------------------------------------------
0001CFB0                            ; Animated pattern routine - giant ring
0001CFB0                            ; ---------------------------------------------------------------------------
0001CFB0                            
0001CFB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFB0                            
0001CFB0                            
0001CFB0                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CFB0 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CFB4 6600                       		bne.s	loc_1C518
0001CFB6 4E75                       		rts	
0001CFB8                            ; ===========================================================================
0001CFB8                            
0001CFB8                            loc_1C518:
0001CFB8 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CFBE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CFC4 7000                       		moveq	#0,d0
0001CFC6 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CFCA 43F1 0000                  		lea	(a1,d0.w),a1
0001CFCE 0640 8000                  		addi.w	#$8000,d0
0001CFD2 E588                       		lsl.l	#2,d0
0001CFD4 E448                       		lsr.w	#2,d0
0001CFD6 0040 4000                  		ori.w	#$4000,d0
0001CFDA 4840                       		swap	d0
0001CFDC 2D40 0004                  		move.l	d0,4(a6)
0001CFE0 323C 000D                  		move.w	#$D,d1
0001CFE4 6000 FE78                  		bra.w	LoadTiles
0001CFE8                            ; End of function AniArt_GiantRing
0001CFE8                            
0001CFE8                            ; ===========================================================================
0001CFE8                            ; ---------------------------------------------------------------------------
0001CFE8                            ; Object 21 - SCORE, TIME, RINGS
0001CFE8                            ; ---------------------------------------------------------------------------
0001CFE8                            
0001CFE8                            Obj21:					; XREF: Obj_Index
0001CFE8 7000                       		moveq	#0,d0
0001CFEA 1028 0024                  		move.b	$24(a0),d0
0001CFEE 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CFF2 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CFF6                            ; ===========================================================================
0001CFF6 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CFF8 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CFFA                            ; ===========================================================================
0001CFFA                            
0001CFFA                            Obj21_Main:				; XREF: Obj21_Main
0001CFFA 5428 0024                  		addq.b	#2,$24(a0)
0001CFFE 317C 0090 0008             		move.w	#$90,8(a0)
0001D004 317C 0108 000A             		move.w	#$108,$A(a0)
0001D00A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D012 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D018 117C 0000 0001             		move.b	#0,1(a0)
0001D01E 117C 0000 0018             		move.b	#0,$18(a0)
0001D024                            
0001D024                            Obj21_Flash:				; XREF: Obj21_Main
0001D024 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D028 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D02A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D02E 4EF9 0000 DFEE             		jmp	DisplaySprite
0001D034                            ; ===========================================================================
0001D034                            
0001D034                            Obj21_Flash2:
0001D034 7000                       		moveq	#0,d0
0001D036 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D03C 6600                       		bne.s	Obj21_Display
0001D03E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D040 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D046 6600                       		bne.s	Obj21_Display	; if not, branch
0001D048 5440                       		addq.w	#2,d0		; make time counter flash red
0001D04A                            
0001D04A                            Obj21_Display:
0001D04A 1140 001A                  		move.b	d0,$1A(a0)
0001D04E 4EF9 0000 DFEE             		jmp	DisplaySprite
0001D054                            ; ===========================================================================
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            ; Sprite mappings - SCORE, TIME, RINGS
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            Map_obj21:
0001D054                            	include "_maps\obj21.asm"
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            ; Sprite mappings - SCORE, TIME, RINGS
0001D054                            ; ---------------------------------------------------------------------------
0001D054 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D058 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D05C 0A                         byte_1C5BC:	dc.b $A
0001D05D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D062 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D067 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D06C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D071 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D076 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D07B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D080 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D085 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D08A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D08F 00                         		dc.b 0
0001D090 0A                         byte_1C5F0:	dc.b $A
0001D091 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D096 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D09B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D0A0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D0A5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D0AA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D0AF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D0B4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D0B9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D0BE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D0C3 00                         		dc.b 0
0001D0C4 0A                         byte_1C624:	dc.b $A
0001D0C5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D0CA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D0CF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D0D4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D0D9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D0DE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D0E3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D0E8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D0ED 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D0F2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D0F7 00                         		dc.b 0
0001D0F8 0A                         byte_1C658:	dc.b $A
0001D0F9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D0FE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D103 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D108 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D10D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D112 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D117 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D11C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D121 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D126 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D12C 00                         		even
0001D12C 00                         		even
0001D12C                            
0001D12C                            ; ---------------------------------------------------------------------------
0001D12C                            ; Add points subroutine
0001D12C                            ; ---------------------------------------------------------------------------
0001D12C                            
0001D12C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D12C                            
0001D12C                            
0001D12C                            AddPoints:
0001D12C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D132 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D136 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D13A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D13C 223C 000F 423F             		move.l	#999999,d1
0001D142 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D144 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D148 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D14A 2481                       		move.l	d1,(a2)
0001D14C                            
0001D14C                            loc_1C6AC:
0001D14C 2013                       		move.l	(a3),d0
0001D14E B092                       		cmp.l	(a2),d0
0001D150 6500 0000                  		bcs.w	locret_1C6B6
0001D154 2480                       		move.l	d0,(a2)
0001D156                            
0001D156                            locret_1C6B6:
0001D156 4E75                       		rts	
0001D158                            ; End of function AddPoints
0001D158                            
0001D158                            ; ---------------------------------------------------------------------------
0001D158                            ; Subroutine to	update the HUD
0001D158                            ; ---------------------------------------------------------------------------
0001D158                            
0001D158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D158                            
0001D158                            
0001D158                            HudUpdate:
0001D158 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D15C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D160 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D164 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D166 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D16A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D170 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D174 6100 0000                  		bsr.w	Hud_Score
0001D178                            
0001D178                            Hud_ChkRings:
0001D178 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D17C 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D17E 6A00                       		bpl.s	loc_1C6E4
0001D180 6100 0000                  		bsr.w	Hud_LoadZero
0001D184                            
0001D184                            loc_1C6E4:
0001D184 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D188 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D18E 7200                       		moveq	#0,d1
0001D190 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D194 6100 0000                  		bsr.w	Hud_Rings
0001D198                            
0001D198                            Hud_ChkTime:
0001D198 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D19C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D19E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D1A2 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D1A4 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D1A8 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D1AE 6700                       		beq.s	TimeOver	; if yes, branch
0001D1B0 5221                       		addq.b	#1,-(a1)
0001D1B2 0C11 003C                  		cmpi.b	#60,(a1)
0001D1B6 6500                       		bcs.s	Hud_ChkLives
0001D1B8 12BC 0000                  		move.b	#0,(a1)
0001D1BC 5221                       		addq.b	#1,-(a1)
0001D1BE 0C11 003C                  		cmpi.b	#60,(a1)
0001D1C2 6500                       		bcs.s	loc_1C734
0001D1C4 12BC 0000                  		move.b	#0,(a1)
0001D1C8 5221                       		addq.b	#1,-(a1)
0001D1CA 0C11 0009                  		cmpi.b	#9,(a1)
0001D1CE 6500                       		bcs.s	loc_1C734
0001D1D0 12BC 0009                  		move.b	#9,(a1)
0001D1D4                            
0001D1D4                            loc_1C734:
0001D1D4 203C 5E40 0003             		move.l	#$5E400003,d0
0001D1DA 7200                       		moveq	#0,d1
0001D1DC 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D1E0 6100 0000                  		bsr.w	Hud_Mins
0001D1E4 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D1EA 7200                       		moveq	#0,d1
0001D1EC 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D1F0 6100 0000                  		bsr.w	Hud_Secs
0001D1F4                            
0001D1F4                            Hud_ChkLives:
0001D1F4 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D1F8 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D1FA 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D1FE 6100 0000                  		bsr.w	Hud_Lives
0001D202                            
0001D202                            Hud_ChkBonus:
0001D202 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D206 6700                       		beq.s	Hud_End		; if not, branch
0001D208 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D20C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D216 7200                       		moveq	#0,d1
0001D218 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D21C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D220 7200                       		moveq	#0,d1
0001D222 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D226 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D22A                            
0001D22A                            Hud_End:
0001D22A 4E75                       		rts	
0001D22C                            ; ===========================================================================
0001D22C                            
0001D22C                            TimeOver:				; XREF: Hud_ChkTime
0001D22C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D230 41F8 D000                  		lea	($FFFFD000).w,a0
0001D234 2448                       		movea.l	a0,a2
0001D236 6100 E950                  		bsr.w	KillSonic
0001D23A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D240 4E75                       		rts	
0001D242                            ; ===========================================================================
0001D242                            
0001D242                            HudDebug:				; XREF: HudUpdate
0001D242 6100 0000                  		bsr.w	HudDb_XY
0001D246 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D24A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D24C 6A00                       		bpl.s	HudDb_Rings
0001D24E 6100 0000                  		bsr.w	Hud_LoadZero
0001D252                            
0001D252                            HudDb_Rings:
0001D252 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D256 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D25C 7200                       		moveq	#0,d1
0001D25E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D262 6100 0000                  		bsr.w	Hud_Rings
0001D266                            
0001D266                            HudDb_ObjCount:
0001D266 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D26C 7200                       		moveq	#0,d1
0001D26E 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D272 6100 0000                  		bsr.w	Hud_Secs
0001D276 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D27A 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D27C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D280 6100 0000                  		bsr.w	Hud_Lives
0001D284                            
0001D284                            HudDb_ChkBonus:
0001D284 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D288 6700                       		beq.s	HudDb_End	; if not, branch
0001D28A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D28E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D298 7200                       		moveq	#0,d1
0001D29A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D29E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D2A2 7200                       		moveq	#0,d1
0001D2A4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D2A8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D2AC                            
0001D2AC                            HudDb_End:
0001D2AC 4E75                       		rts	
0001D2AE                            ; End of function HudUpdate
0001D2AE                            
0001D2AE                            ; ---------------------------------------------------------------------------
0001D2AE                            ; Subroutine to	load "0" on the	HUD
0001D2AE                            ; ---------------------------------------------------------------------------
0001D2AE                            
0001D2AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2AE                            
0001D2AE                            
0001D2AE                            Hud_LoadZero:				; XREF: HudUpdate
0001D2AE 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D2B8 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D2BC 343C 0002                  		move.w	#2,d2
0001D2C0 6000                       		bra.s	loc_1C83E
0001D2C2                            ; End of function Hud_LoadZero
0001D2C2                            
0001D2C2                            ; ---------------------------------------------------------------------------
0001D2C2                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D2C2                            ; ---------------------------------------------------------------------------
0001D2C2                            
0001D2C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2C2                            
0001D2C2                            
0001D2C2                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D2C2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D2C8 6100 0000                  		bsr.w	Hud_Lives
0001D2CC 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D2D6 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D2DA 343C 000E                  		move.w	#$E,d2
0001D2DE                            
0001D2DE                            loc_1C83E:				; XREF: Hud_LoadZero
0001D2DE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2E2                            
0001D2E2                            loc_1C842:
0001D2E2 323C 000F                  		move.w	#$F,d1
0001D2E6 101A                       		move.b	(a2)+,d0
0001D2E8 6B00                       		bmi.s	loc_1C85E
0001D2EA 4880                       		ext.w	d0
0001D2EC EB48                       		lsl.w	#5,d0
0001D2EE 47F1 0000                  		lea	(a1,d0.w),a3
0001D2F2                            
0001D2F2                            loc_1C852:
0001D2F2 2C9B                       		move.l	(a3)+,(a6)
0001D2F4 51C9 FFFC                  		dbf	d1,loc_1C852
0001D2F8                            
0001D2F8                            loc_1C858:
0001D2F8 51CA FFE8                  		dbf	d2,loc_1C842
0001D2FC                            
0001D2FC 4E75                       		rts	
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            loc_1C85E:
0001D2FE 2CBC 0000 0000             		move.l	#0,(a6)
0001D304 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D308                            
0001D308 60EE                       		bra.s	loc_1C858
0001D30A                            ; End of function Hud_Base
0001D30A                            
0001D30A                            ; ===========================================================================
0001D30A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D316 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D31A                            ; ---------------------------------------------------------------------------
0001D31A                            ; Subroutine to	load debug mode	numbers	patterns
0001D31A                            ; ---------------------------------------------------------------------------
0001D31A                            
0001D31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D31A                            
0001D31A                            
0001D31A                            HudDb_XY:				; XREF: HudDebug
0001D31A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D324 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D328 4841                       		swap	d1
0001D32A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D32E 6100                       		bsr.s	HudDb_XY2
0001D330 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D334 4841                       		swap	d1
0001D336 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D33A                            ; End of function HudDb_XY
0001D33A                            
0001D33A                            
0001D33A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D33A                            
0001D33A                            
0001D33A                            HudDb_XY2:
0001D33A 7C07                       		moveq	#7,d6
0001D33C 43F9 0000 0606             		lea	(Art_Text).l,a1
0001D342                            
0001D342                            HudDb_XYLoop:
0001D342 E959                       		rol.w	#4,d1
0001D344 3401                       		move.w	d1,d2
0001D346 0242 000F                  		andi.w	#$F,d2
0001D34A 0C42 000A                  		cmpi.w	#$A,d2
0001D34E 6500                       		bcs.s	loc_1C8B2
0001D350 5E42                       		addq.w	#7,d2
0001D352                            
0001D352                            loc_1C8B2:
0001D352 EB4A                       		lsl.w	#5,d2
0001D354 47F1 2000                  		lea	(a1,d2.w),a3
0001D358 2C9B                       		move.l	(a3)+,(a6)
0001D35A 2C9B                       		move.l	(a3)+,(a6)
0001D35C 2C9B                       		move.l	(a3)+,(a6)
0001D35E 2C9B                       		move.l	(a3)+,(a6)
0001D360 2C9B                       		move.l	(a3)+,(a6)
0001D362 2C9B                       		move.l	(a3)+,(a6)
0001D364 2C9B                       		move.l	(a3)+,(a6)
0001D366 2C9B                       		move.l	(a3)+,(a6)
0001D368 4841                       		swap	d1
0001D36A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D36E                            
0001D36E 4E75                       		rts	
0001D370                            ; End of function HudDb_XY2
0001D370                            
0001D370                            ; ---------------------------------------------------------------------------
0001D370                            ; Subroutine to	load rings numbers patterns
0001D370                            ; ---------------------------------------------------------------------------
0001D370                            
0001D370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D370                            
0001D370                            
0001D370                            Hud_Rings:				; XREF: HudUpdate
0001D370 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D376 7C02                       		moveq	#2,d6
0001D378 6000                       		bra.s	Hud_LoadArt
0001D37A                            ; End of function Hud_Rings
0001D37A                            
0001D37A                            ; ---------------------------------------------------------------------------
0001D37A                            ; Subroutine to	load score numbers patterns
0001D37A                            ; ---------------------------------------------------------------------------
0001D37A                            
0001D37A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D37A                            
0001D37A                            
0001D37A                            Hud_Score:				; XREF: HudUpdate
0001D37A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D380 7C05                       		moveq	#5,d6
0001D382                            
0001D382                            Hud_LoadArt:
0001D382 7800                       		moveq	#0,d4
0001D384 43FA 0000                  		lea	Art_Hud(pc),a1
0001D388                            
0001D388                            Hud_ScoreLoop:
0001D388 7400                       		moveq	#0,d2
0001D38A 261A                       		move.l	(a2)+,d3
0001D38C                            
0001D38C                            loc_1C8EC:
0001D38C 9283                       		sub.l	d3,d1
0001D38E 6500                       		bcs.s	loc_1C8F4
0001D390 5242                       		addq.w	#1,d2
0001D392 60F8                       		bra.s	loc_1C8EC
0001D394                            ; ===========================================================================
0001D394                            
0001D394                            loc_1C8F4:
0001D394 D283                       		add.l	d3,d1
0001D396 4A42                       		tst.w	d2
0001D398 6700                       		beq.s	loc_1C8FE
0001D39A 383C 0001                  		move.w	#1,d4
0001D39E                            
0001D39E                            loc_1C8FE:
0001D39E 4A44                       		tst.w	d4
0001D3A0 6700                       		beq.s	loc_1C92C
0001D3A2 ED4A                       		lsl.w	#6,d2
0001D3A4 2D40 0004                  		move.l	d0,4(a6)
0001D3A8 47F1 2000                  		lea	(a1,d2.w),a3
0001D3AC 2C9B                       		move.l	(a3)+,(a6)
0001D3AE 2C9B                       		move.l	(a3)+,(a6)
0001D3B0 2C9B                       		move.l	(a3)+,(a6)
0001D3B2 2C9B                       		move.l	(a3)+,(a6)
0001D3B4 2C9B                       		move.l	(a3)+,(a6)
0001D3B6 2C9B                       		move.l	(a3)+,(a6)
0001D3B8 2C9B                       		move.l	(a3)+,(a6)
0001D3BA 2C9B                       		move.l	(a3)+,(a6)
0001D3BC 2C9B                       		move.l	(a3)+,(a6)
0001D3BE 2C9B                       		move.l	(a3)+,(a6)
0001D3C0 2C9B                       		move.l	(a3)+,(a6)
0001D3C2 2C9B                       		move.l	(a3)+,(a6)
0001D3C4 2C9B                       		move.l	(a3)+,(a6)
0001D3C6 2C9B                       		move.l	(a3)+,(a6)
0001D3C8 2C9B                       		move.l	(a3)+,(a6)
0001D3CA 2C9B                       		move.l	(a3)+,(a6)
0001D3CC                            
0001D3CC                            loc_1C92C:
0001D3CC 0680 0040 0000             		addi.l	#$400000,d0
0001D3D2 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D3D6                            
0001D3D6 4E75                       		rts	
0001D3D8                            ; End of function Hud_Score
0001D3D8                            
0001D3D8                            ; ---------------------------------------------------------------------------
0001D3D8                            ; Subroutine to	load countdown numbers on the continue screen
0001D3D8                            ; ---------------------------------------------------------------------------
0001D3D8                            
0001D3D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3D8                            
0001D3D8                            
0001D3D8                            ContScrCounter:				; XREF: ContinueScreen
0001D3D8 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D3E2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D3E8 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D3EE 7C01                       		moveq	#1,d6
0001D3F0 7800                       		moveq	#0,d4
0001D3F2 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D3F6                            
0001D3F6                            ContScr_Loop:
0001D3F6 7400                       		moveq	#0,d2
0001D3F8 261A                       		move.l	(a2)+,d3
0001D3FA                            
0001D3FA                            loc_1C95A:
0001D3FA 9283                       		sub.l	d3,d1
0001D3FC 6500                       		bcs.s	loc_1C962
0001D3FE 5242                       		addq.w	#1,d2
0001D400 60F8                       		bra.s	loc_1C95A
0001D402                            ; ===========================================================================
0001D402                            
0001D402                            loc_1C962:
0001D402 D283                       		add.l	d3,d1
0001D404 ED4A                       		lsl.w	#6,d2
0001D406 47F1 2000                  		lea	(a1,d2.w),a3
0001D40A 2C9B                       		move.l	(a3)+,(a6)
0001D40C 2C9B                       		move.l	(a3)+,(a6)
0001D40E 2C9B                       		move.l	(a3)+,(a6)
0001D410 2C9B                       		move.l	(a3)+,(a6)
0001D412 2C9B                       		move.l	(a3)+,(a6)
0001D414 2C9B                       		move.l	(a3)+,(a6)
0001D416 2C9B                       		move.l	(a3)+,(a6)
0001D418 2C9B                       		move.l	(a3)+,(a6)
0001D41A 2C9B                       		move.l	(a3)+,(a6)
0001D41C 2C9B                       		move.l	(a3)+,(a6)
0001D41E 2C9B                       		move.l	(a3)+,(a6)
0001D420 2C9B                       		move.l	(a3)+,(a6)
0001D422 2C9B                       		move.l	(a3)+,(a6)
0001D424 2C9B                       		move.l	(a3)+,(a6)
0001D426 2C9B                       		move.l	(a3)+,(a6)
0001D428 2C9B                       		move.l	(a3)+,(a6)
0001D42A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D42E                            
0001D42E 4E75                       		rts	
0001D430                            ; End of function ContScrCounter
0001D430                            
0001D430                            ; ===========================================================================
0001D430                            ; ---------------------------------------------------------------------------
0001D430                            ; HUD counter sizes
0001D430                            ; ---------------------------------------------------------------------------
0001D430 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D434 0000 2710                  Hud_10000:	dc.l 10000
0001D438 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D43C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D440 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D444 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D448                            
0001D448                            ; ---------------------------------------------------------------------------
0001D448                            ; Subroutine to	load time numbers patterns
0001D448                            ; ---------------------------------------------------------------------------
0001D448                            
0001D448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D448                            
0001D448                            
0001D448                            Hud_Mins:				; XREF: Hud_ChkTime
0001D448 45F9 0001 D444             		lea	(Hud_1).l,a2
0001D44E 7C00                       		moveq	#0,d6
0001D450 6000                       		bra.s	loc_1C9BA
0001D452                            ; End of function Hud_Mins
0001D452                            
0001D452                            
0001D452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D452                            
0001D452                            
0001D452                            Hud_Secs:				; XREF: Hud_ChkTime
0001D452 45F9 0001 D440             		lea	(Hud_10).l,a2
0001D458 7C01                       		moveq	#1,d6
0001D45A                            
0001D45A                            loc_1C9BA:
0001D45A 7800                       		moveq	#0,d4
0001D45C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D460                            
0001D460                            Hud_TimeLoop:
0001D460 7400                       		moveq	#0,d2
0001D462 261A                       		move.l	(a2)+,d3
0001D464                            
0001D464                            loc_1C9C4:
0001D464 9283                       		sub.l	d3,d1
0001D466 6500                       		bcs.s	loc_1C9CC
0001D468 5242                       		addq.w	#1,d2
0001D46A 60F8                       		bra.s	loc_1C9C4
0001D46C                            ; ===========================================================================
0001D46C                            
0001D46C                            loc_1C9CC:
0001D46C D283                       		add.l	d3,d1
0001D46E 4A42                       		tst.w	d2
0001D470 6700                       		beq.s	loc_1C9D6
0001D472 383C 0001                  		move.w	#1,d4
0001D476                            
0001D476                            loc_1C9D6:
0001D476 ED4A                       		lsl.w	#6,d2
0001D478 2D40 0004                  		move.l	d0,4(a6)
0001D47C 47F1 2000                  		lea	(a1,d2.w),a3
0001D480 2C9B                       		move.l	(a3)+,(a6)
0001D482 2C9B                       		move.l	(a3)+,(a6)
0001D484 2C9B                       		move.l	(a3)+,(a6)
0001D486 2C9B                       		move.l	(a3)+,(a6)
0001D488 2C9B                       		move.l	(a3)+,(a6)
0001D48A 2C9B                       		move.l	(a3)+,(a6)
0001D48C 2C9B                       		move.l	(a3)+,(a6)
0001D48E 2C9B                       		move.l	(a3)+,(a6)
0001D490 2C9B                       		move.l	(a3)+,(a6)
0001D492 2C9B                       		move.l	(a3)+,(a6)
0001D494 2C9B                       		move.l	(a3)+,(a6)
0001D496 2C9B                       		move.l	(a3)+,(a6)
0001D498 2C9B                       		move.l	(a3)+,(a6)
0001D49A 2C9B                       		move.l	(a3)+,(a6)
0001D49C 2C9B                       		move.l	(a3)+,(a6)
0001D49E 2C9B                       		move.l	(a3)+,(a6)
0001D4A0 0680 0040 0000             		addi.l	#$400000,d0
0001D4A6 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D4AA                            
0001D4AA 4E75                       		rts	
0001D4AC                            ; End of function Hud_Secs
0001D4AC                            
0001D4AC                            ; ---------------------------------------------------------------------------
0001D4AC                            ; Subroutine to	load time/ring bonus numbers patterns
0001D4AC                            ; ---------------------------------------------------------------------------
0001D4AC                            
0001D4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4AC                            
0001D4AC                            
0001D4AC                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D4AC 45F9 0001 D438             		lea	(Hud_1000).l,a2
0001D4B2 7C03                       		moveq	#3,d6
0001D4B4 7800                       		moveq	#0,d4
0001D4B6 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4BA                            
0001D4BA                            Hud_BonusLoop:
0001D4BA 7400                       		moveq	#0,d2
0001D4BC 261A                       		move.l	(a2)+,d3
0001D4BE                            
0001D4BE                            loc_1CA1E:
0001D4BE 9283                       		sub.l	d3,d1
0001D4C0 6500                       		bcs.s	loc_1CA26
0001D4C2 5242                       		addq.w	#1,d2
0001D4C4 60F8                       		bra.s	loc_1CA1E
0001D4C6                            ; ===========================================================================
0001D4C6                            
0001D4C6                            loc_1CA26:
0001D4C6 D283                       		add.l	d3,d1
0001D4C8 4A42                       		tst.w	d2
0001D4CA 6700                       		beq.s	loc_1CA30
0001D4CC 383C 0001                  		move.w	#1,d4
0001D4D0                            
0001D4D0                            loc_1CA30:
0001D4D0 4A44                       		tst.w	d4
0001D4D2 6700                       		beq.s	Hud_ClrBonus
0001D4D4 ED4A                       		lsl.w	#6,d2
0001D4D6 47F1 2000                  		lea	(a1,d2.w),a3
0001D4DA 2C9B                       		move.l	(a3)+,(a6)
0001D4DC 2C9B                       		move.l	(a3)+,(a6)
0001D4DE 2C9B                       		move.l	(a3)+,(a6)
0001D4E0 2C9B                       		move.l	(a3)+,(a6)
0001D4E2 2C9B                       		move.l	(a3)+,(a6)
0001D4E4 2C9B                       		move.l	(a3)+,(a6)
0001D4E6 2C9B                       		move.l	(a3)+,(a6)
0001D4E8 2C9B                       		move.l	(a3)+,(a6)
0001D4EA 2C9B                       		move.l	(a3)+,(a6)
0001D4EC 2C9B                       		move.l	(a3)+,(a6)
0001D4EE 2C9B                       		move.l	(a3)+,(a6)
0001D4F0 2C9B                       		move.l	(a3)+,(a6)
0001D4F2 2C9B                       		move.l	(a3)+,(a6)
0001D4F4 2C9B                       		move.l	(a3)+,(a6)
0001D4F6 2C9B                       		move.l	(a3)+,(a6)
0001D4F8 2C9B                       		move.l	(a3)+,(a6)
0001D4FA                            
0001D4FA                            loc_1CA5A:
0001D4FA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D4FE                            
0001D4FE 4E75                       		rts	
0001D500                            ; ===========================================================================
0001D500                            
0001D500                            Hud_ClrBonus:
0001D500 7A0F                       		moveq	#$F,d5
0001D502                            
0001D502                            Hud_ClrBonusLoop:
0001D502 2CBC 0000 0000             		move.l	#0,(a6)
0001D508 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D50C                            
0001D50C 60EC                       		bra.s	loc_1CA5A
0001D50E                            ; End of function Hud_TimeRingBonus
0001D50E                            
0001D50E                            ; ---------------------------------------------------------------------------
0001D50E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D50E                            ; ---------------------------------------------------------------------------
0001D50E                            
0001D50E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D50E                            
0001D50E                            
0001D50E                            Hud_Lives:				; XREF: Hud_ChkLives
0001D50E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D514 7200                       		moveq	#0,d1
0001D516 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D51A 45F9 0001 D440             		lea	(Hud_10).l,a2
0001D520 7C01                       		moveq	#1,d6
0001D522 7800                       		moveq	#0,d4
0001D524 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D528                            
0001D528                            Hud_LivesLoop:
0001D528 2D40 0004                  		move.l	d0,4(a6)
0001D52C 7400                       		moveq	#0,d2
0001D52E 261A                       		move.l	(a2)+,d3
0001D530                            
0001D530                            loc_1CA90:
0001D530 9283                       		sub.l	d3,d1
0001D532 6500                       		bcs.s	loc_1CA98
0001D534 5242                       		addq.w	#1,d2
0001D536 60F8                       		bra.s	loc_1CA90
0001D538                            ; ===========================================================================
0001D538                            
0001D538                            loc_1CA98:
0001D538 D283                       		add.l	d3,d1
0001D53A 4A42                       		tst.w	d2
0001D53C 6700                       		beq.s	loc_1CAA2
0001D53E 383C 0001                  		move.w	#1,d4
0001D542                            
0001D542                            loc_1CAA2:
0001D542 4A44                       		tst.w	d4
0001D544 6700                       		beq.s	Hud_ClrLives
0001D546                            
0001D546                            loc_1CAA6:
0001D546 EB4A                       		lsl.w	#5,d2
0001D548 47F1 2000                  		lea	(a1,d2.w),a3
0001D54C 2C9B                       		move.l	(a3)+,(a6)
0001D54E 2C9B                       		move.l	(a3)+,(a6)
0001D550 2C9B                       		move.l	(a3)+,(a6)
0001D552 2C9B                       		move.l	(a3)+,(a6)
0001D554 2C9B                       		move.l	(a3)+,(a6)
0001D556 2C9B                       		move.l	(a3)+,(a6)
0001D558 2C9B                       		move.l	(a3)+,(a6)
0001D55A 2C9B                       		move.l	(a3)+,(a6)
0001D55C                            
0001D55C                            loc_1CABC:
0001D55C 0680 0040 0000             		addi.l	#$400000,d0
0001D562 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D566                            
0001D566 4E75                       		rts	
0001D568                            ; ===========================================================================
0001D568                            
0001D568                            Hud_ClrLives:
0001D568 4A46                       		tst.w	d6
0001D56A 67DA                       		beq.s	loc_1CAA6
0001D56C 7A07                       		moveq	#7,d5
0001D56E                            
0001D56E                            Hud_ClrLivesLoop:
0001D56E 2CBC 0000 0000             		move.l	#0,(a6)
0001D574 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D578 60E2                       		bra.s	loc_1CABC
0001D57A                            ; End of function Hud_Lives
0001D57A                            
0001D57A                            ; ===========================================================================
0001D57A                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D87A                            		even
0001D87A                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D9BA                            		even
0001D9BA                            ; ===========================================================================
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA                            ; When debug mode is currently in use
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA                            
0001D9BA                            DebugMode:				; XREF: Obj01; Obj09
0001D9BA 7000                       		moveq	#0,d0
0001D9BC 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D9C0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D9C4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D9C8                            ; ===========================================================================
0001D9C8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D9CA 0000                       		dc.w Debug_Skip-Debug_Index
0001D9CC                            ; ===========================================================================
0001D9CC                            
0001D9CC                            Debug_Main:				; XREF: Debug_Index
0001D9CC 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D9D0 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D9D6 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D9DC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D9E2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D9E8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D9EE 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D9F4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D9FA 117C 0000 001A             		move.b	#0,$1A(a0)
0001DA00 117C 0000 001C             		move.b	#0,$1C(a0)
0001DA06 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DA0C 6600                       		bne.s	Debug_Zone	; if not, branch
0001DA0E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DA14 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DA1A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DA1C 6000                       		bra.s	Debug_UseList
0001DA1E                            ; ===========================================================================
0001DA1E                            
0001DA1E                            Debug_Zone:
0001DA1E 7000                       		moveq	#0,d0
0001DA20 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA24                            
0001DA24                            Debug_UseList:
0001DA24 45F9 0000 0000             		lea	(DebugList).l,a2
0001DA2A D040                       		add.w	d0,d0
0001DA2C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DA30 3C1A                       		move.w	(a2)+,d6
0001DA32 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DA36 6200                       		bhi.s	loc_1CF9E
0001DA38 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DA3E                            
0001DA3E                            loc_1CF9E:
0001DA3E 6100 0000                  		bsr.w	Debug_ShowItem
0001DA42 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DA48 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DA4E                            
0001DA4E                            Debug_Skip:				; XREF: Debug_Index
0001DA4E 7006                       		moveq	#6,d0
0001DA50 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DA56 6700                       		beq.s	loc_1CFBE
0001DA58 7000                       		moveq	#0,d0
0001DA5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA5E                            
0001DA5E                            loc_1CFBE:
0001DA5E 45F9 0000 0000             		lea	(DebugList).l,a2
0001DA64 D040                       		add.w	d0,d0
0001DA66 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DA6A 3C1A                       		move.w	(a2)+,d6
0001DA6C 6100 0000                  		bsr.w	Debug_Control
0001DA70 4EF9 0000 DFEE             		jmp	DisplaySprite
0001DA76                            
0001DA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA76                            
0001DA76                            
0001DA76                            Debug_Control:
0001DA76 7800                       		moveq	#0,d4
0001DA78 323C 0001                  		move.w	#1,d1
0001DA7C 1838 F605                  		move.b	($FFFFF605).w,d4
0001DA80 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DA84 6600                       		bne.s	loc_1D018	; if yes, branch
0001DA86 1038 F604                  		move.b	($FFFFF604).w,d0
0001DA8A 0240 000F                  		andi.w	#$F,d0
0001DA8E 6600                       		bne.s	loc_1D000
0001DA90 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DA96 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DA9C 6000 0000                  		bra.w	Debug_BackItem
0001DAA0                            ; ===========================================================================
0001DAA0                            
0001DAA0                            loc_1D000:
0001DAA0 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DAA4 6600                       		bne.s	loc_1D01C
0001DAA6 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DAAC 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DAB0 6600                       		bne.s	loc_1D018
0001DAB2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DAB8                            
0001DAB8                            loc_1D018:
0001DAB8 1838 F604                  		move.b	($FFFFF604).w,d4
0001DABC                            
0001DABC                            loc_1D01C:
0001DABC 7200                       		moveq	#0,d1
0001DABE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DAC2 5241                       		addq.w	#1,d1
0001DAC4 4841                       		swap	d1
0001DAC6 E881                       		asr.l	#4,d1
0001DAC8 2428 000C                  		move.l	$C(a0),d2
0001DACC 2628 0008                  		move.l	8(a0),d3
0001DAD0 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DAD4 6700                       		beq.s	loc_1D03C	; if not, branch
0001DAD6 9481                       		sub.l	d1,d2
0001DAD8 6400                       		bcc.s	loc_1D03C
0001DADA 7400                       		moveq	#0,d2
0001DADC                            
0001DADC                            loc_1D03C:
0001DADC 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DAE0 6700                       		beq.s	loc_1D052	; if not, branch
0001DAE2 D481                       		add.l	d1,d2
0001DAE4 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DAEA 6500                       		bcs.s	loc_1D052
0001DAEC 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DAF2                            
0001DAF2                            loc_1D052:
0001DAF2 0804 0002                  		btst	#2,d4
0001DAF6 6700                       		beq.s	loc_1D05E
0001DAF8 9681                       		sub.l	d1,d3
0001DAFA 6400                       		bcc.s	loc_1D05E
0001DAFC 7600                       		moveq	#0,d3
0001DAFE                            
0001DAFE                            loc_1D05E:
0001DAFE 0804 0003                  		btst	#3,d4
0001DB02 6700                       		beq.s	loc_1D066
0001DB04 D681                       		add.l	d1,d3
0001DB06                            
0001DB06                            loc_1D066:
0001DB06 2142 000C                  		move.l	d2,$C(a0)
0001DB0A 2143 0008                  		move.l	d3,8(a0)
0001DB0E                            
0001DB0E                            Debug_BackItem:
0001DB0E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DB14 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DB16 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DB1C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DB1E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DB22 6400                       		bcc.s	Debug_NoLoop
0001DB24 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DB28 6000                       		bra.s	Debug_NoLoop
0001DB2A                            ; ===========================================================================
0001DB2A                            
0001DB2A                            Debug_NextItem:
0001DB2A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DB30 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DB32 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DB36 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB3A 6200                       		bhi.s	Debug_NoLoop
0001DB3C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DB42                            
0001DB42                            Debug_NoLoop:
0001DB42 6000 0000                  		bra.w	Debug_ShowItem
0001DB46                            ; ===========================================================================
0001DB46                            
0001DB46                            Debug_MakeItem:
0001DB46 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DB4C 6700                       		beq.s	Debug_Exit	; if not, branch
0001DB4E 4EB9 0000 E474             		jsr	SingleObjLoad
0001DB54 6600                       		bne.s	Debug_Exit
0001DB56 3368 0008 0008             		move.w	8(a0),8(a1)
0001DB5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DB62 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DB66 1368 0001 0001             		move.b	1(a0),1(a1)
0001DB6C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DB72 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DB78 7000                       		moveq	#0,d0
0001DB7A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DB7E E748                       		lsl.w	#3,d0
0001DB80 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DB86 4E75                       		rts	
0001DB88                            ; ===========================================================================
0001DB88                            
0001DB88                            Debug_Exit:
0001DB88 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DB8E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DB90 7000                       		moveq	#0,d0
0001DB92 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DB96 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DB9E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DBA4 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DBA8 3140 000A                  		move.w	d0,$A(a0)
0001DBAC 3140 000E                  		move.w	d0,$E(a0)
0001DBB0 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DBB6 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DBBC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DBC2 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DBC4 4278 F780                  		clr.w	($FFFFF780).w
0001DBC8 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DBCE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DBD6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DBDC 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DBE2 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DBE8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DBEE                            
0001DBEE                            Debug_DoNothing:
0001DBEE 4E75                       		rts	
0001DBF0                            ; End of function Debug_Control
0001DBF0                            
0001DBF0                            
0001DBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBF0                            
0001DBF0                            
0001DBF0                            Debug_ShowItem:				; XREF: Debug_Main
0001DBF0 7000                       		moveq	#0,d0
0001DBF2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DBF6 E748                       		lsl.w	#3,d0
0001DBF8 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DBFE 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DC04 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DC0A 4E75                       		rts	
0001DC0C                            ; End of function Debug_ShowItem
0001DC0C                            
0001DC0C                            ; ===========================================================================
0001DC0C                            ; ---------------------------------------------------------------------------
0001DC0C                            ; Debug	list pointers
0001DC0C                            ; ---------------------------------------------------------------------------
0001DC0C                            DebugList:
0001DC0C                            	include "_inc\Debug list pointers.asm"
0001DC0C                            ; ---------------------------------------------------------------------------
0001DC0C                            ; Debug	list pointers
0001DC0C                            ; ---------------------------------------------------------------------------
0001DC0C 0000                       	dc.w Debug_GHZ-DebugList
0001DC0E 0000                       	dc.w Debug_LZ-DebugList
0001DC10 0000                       	dc.w Debug_MZ-DebugList
0001DC12 0000                       	dc.w Debug_SLZ-DebugList
0001DC14 0000                       	dc.w Debug_SYZ-DebugList
0001DC16 0000                       	dc.w Debug_SBZ-DebugList
0001DC18 0000                       	dc.w Debug_Ending-DebugList
0001DC1A 0000                       	dc.w Debug_GHZ-DebugList
0001DC1A 0000                       	dc.w Debug_GHZ-DebugList
0001DC1C                            
0001DC1C                            ; ---------------------------------------------------------------------------
0001DC1C                            ; Debug	list - Green Hill
0001DC1C                            ; ---------------------------------------------------------------------------
0001DC1C                            Debug_GHZ:
0001DC1C                            	include "_inc\Debug list - GHZ.asm"
0001DC1C                            ; ---------------------------------------------------------------------------
0001DC1C                            ; Debug	list - Green Hill
0001DC1C                            ; ---------------------------------------------------------------------------
0001DC1C 0010                       	dc.w $10			; number of items in list
0001DC1E 2500 A7EA                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DC22 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DC26 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DC2A 0000 0680                  	dc.b 0,	0, 6, $80
0001DC2E 1F00 9FE2                  	dc.l Map_obj1F+$1F000000
0001DC32 0000 0400                  	dc.b 0,	0, 4, 0
0001DC36 2200 A29E                  	dc.l Map_obj22+$22000000
0001DC3A 0000 0444                  	dc.b 0,	0, 4, $44
0001DC3E 2B00 B464                  	dc.l Map_obj2B+$2B000000
0001DC42 0000 047B                  	dc.b 0,	0, 4, $7B
0001DC46 3600 D990                  	dc.l Map_obj36+$36000000
0001DC4A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC4E 1800 88F4                  	dc.l Map_obj18+$18000000
0001DC52 0000 4000                  	dc.b 0,	0, $40,	0
0001DC56 3B00 DAB6                  	dc.l Map_obj3B+$3B000000
0001DC5A 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DC5E 4001 0188                  	dc.l Map_obj40+$40000000
0001DC62 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DC66 4100 E702                  	dc.l Map_obj41+$41000000
0001DC6A 0000 0523                  	dc.b 0,	0, 5, $23
0001DC6E 4200 E928                  	dc.l Map_obj42+$42000000
0001DC72 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DC76 4400 EC36                  	dc.l Map_obj44+$44000000
0001DC7A 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DC7E 1900 89F4                  	dc.l Map_obj48+$19000000
0001DC82 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DC86 7901 7BD6                  	dc.l Map_obj79+$79000000
0001DC8A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC8E 4B00 A82A                  	dc.l Map_obj4B+$4B000000
0001DC92 0000 2400                  	dc.b 0,	0, $24,	0
0001DC96 7D01 7D26                  	dc.l Map_obj7D+$7D000000
0001DC9A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DC9E                            	even
0001DC9E                            	even
0001DC9E                            
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E                            ; Debug	list - Labyrinth
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E                            Debug_LZ:
0001DC9E                            	include "_inc\Debug list - LZ.asm"
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E                            ; Debug	list - Labyrinth
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E 0019                       	dc.w $19
0001DCA0 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DCA4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCA8 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DCAC 0000 0680                  	dc.b 0,	0, 6, $80
0001DCB0 4100 E702                  	dc.l Map_obj41+$41000000
0001DCB4 0000 0523                  	dc.b 0,	0, 5, $23
0001DCB8 2C00 B514                  	dc.l Map_obj2C+$2C000000
0001DCBC 0800 2486                  	dc.b 8,	0, $24,	$86
0001DCC0 2D00 B708                  	dc.l Map_obj2D+$2D000000
0001DCC4 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DCC8 1601 295C                  	dc.l Map_obj16+$16000000
0001DCCC 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DCD0 1601 295C                  	dc.l Map_obj16+$16000000
0001DCD4 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DCD8 3300 CBC0                  	dc.l Map_obj33+$33000000
0001DCDC 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DCE0 3200 C780                  	dc.l Map_obj32+$32000000
0001DCE4 0000 0513                  	dc.b 0,	0, 5, $13
0001DCE8 3600 D990                  	dc.l Map_obj36+$36000000
0001DCEC 0000 051B                  	dc.b 0,	0, 5, $1B
0001DCF0 5201 0A7E                  	dc.l Map_obj52a+$52000000
0001DCF4 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DCF8 6101 2B84                  	dc.l Map_obj61+$61000000
0001DCFC 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DD00 6101 2B84                  	dc.l Map_obj61+$61000000
0001DD04 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DD08 6101 2B84                  	dc.l Map_obj61+$61000000
0001DD0C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DD10 6201 2CD8                  	dc.l Map_obj62+$62000000
0001DD14 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DD18 6101 2B84                  	dc.l Map_obj61+$61000000
0001DD1C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DD20 6101 2B84                  	dc.l Map_obj61+$61000000
0001DD24 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DD28 6301 303A                  	dc.l Map_obj63+$63000000
0001DD2C 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DD30 6001 28A6                  	dc.l Map_obj60+$60000000
0001DD34 0000 0467                  	dc.b 0,	0, 4, $67
0001DD38 6401 3380                  	dc.l Map_obj64+$64000000
0001DD3C 8413 8348                  	dc.b $84, $13, $83, $48
0001DD40 6501 3508                  	dc.l Map_obj65+$65000000
0001DD44 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DD48 6501 3508                  	dc.l Map_obj65+$65000000
0001DD4C 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DD50 0B01 1CF6                  	dc.l Map_obj0B+$B000000
0001DD54 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DD58 0C01 1DC6                  	dc.l Map_obj0C+$C000000
0001DD5C 0200 4328                  	dc.b 2,	0, $43,	$28
0001DD60 7901 7BD6                  	dc.l Map_obj79+$79000000
0001DD64 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD68                            	even
0001DD68                            	even
0001DD68                            
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            ; Debug	list - Marble
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            Debug_MZ:
0001DD68                            	include "_inc\Debug list - MZ.asm"
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            ; Debug	list - Marble
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68 0012                       	dc.w $12
0001DD6A 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DD6E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD72 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DD76 0000 0680                  	dc.b 0,	0, 6, $80
0001DD7A 2200 A29E                  	dc.l Map_obj22+$22000000
0001DD7E 0000 0444                  	dc.b 0,	0, 4, $44
0001DD82 3600 D990                  	dc.l Map_obj36+$36000000
0001DD86 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD8A 4100 E702                  	dc.l Map_obj41+$41000000
0001DD8E 0000 0523                  	dc.b 0,	0, 5, $23
0001DD92 1300 BC4A                  	dc.l Map_obj14+$13000000
0001DD96 0000 0345                  	dc.b 0,	0, 3, $45
0001DD9A 4600 F2E8                  	dc.l Map_obj46+$46000000
0001DD9E 0000 4000                  	dc.b 0,	0, $40,	0
0001DDA2 4C00 FC34                  	dc.l Map_obj4C+$4C000000
0001DDA6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DDAA 4E00 FF18                  	dc.l Map_obj4E+$4E000000
0001DDAE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DDB2 3300 CBC0                  	dc.l Map_obj33+$33000000
0001DDB6 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DDBA 5001 0316                  	dc.l Map_obj50+$50000000
0001DDBE 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DDC2 5101 07B2                  	dc.l Map_obj51+$51000000
0001DDC6 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DDCA 5201 0A28                  	dc.l Map_obj52+$52000000
0001DDCE 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DDD2 5300 8F8C                  	dc.l Map_obj53+$53000000
0001DDD6 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DDDA 5400 FBFA                  	dc.l Map_obj54+$54000000
0001DDDE 0000 8680                  	dc.b 0,	0, $86,	$80
0001DDE2 5501 0C1C                  	dc.l Map_obj55+$55000000
0001DDE6 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DDEA 7801 7850                  	dc.l Map_obj78+$78000000
0001DDEE 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DDF2 7901 7BD6                  	dc.l Map_obj79+$79000000
0001DDF6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDFA                            	even
0001DDFA                            	even
0001DDFA                            
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA                            ; Debug	list - Star Light
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA                            Debug_SLZ:
0001DDFA                            	include "_inc\Debug list - SLZ.asm"
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA                            ; Debug	list - Star Light
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA 000F                       	dc.w $F
0001DDFC 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DE00 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE04 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DE08 0000 0680                  	dc.b 0,	0, 6, $80
0001DE0C 5901 171E                  	dc.l Map_obj59+$59000000
0001DE10 0000 4000                  	dc.b 0,	0, $40,	0
0001DE14 5300 8F8C                  	dc.l Map_obj53+$53000000
0001DE18 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DE1C 1800 8952                  	dc.l Map_obj18b+$18000000
0001DE20 0000 4000                  	dc.b 0,	0, $40,	0
0001DE24 5A01 1858                  	dc.l Map_obj5A+$5A000000
0001DE28 0000 4000                  	dc.b 0,	0, $40,	0
0001DE2C 5B01 1A10                  	dc.l Map_obj5B+$5B000000
0001DE30 0000 4000                  	dc.b 0,	0, $40,	0
0001DE34 5D01 1FE0                  	dc.l Map_obj5D+$5D000000
0001DE38 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DE3C 5E01 2372                  	dc.l Map_obj5E+$5E000000
0001DE40 0000 0374                  	dc.b 0,	0, 3, $74
0001DE44 4100 E702                  	dc.l Map_obj41+$41000000
0001DE48 0000 0523                  	dc.b 0,	0, 5, $23
0001DE4C 1300 BC4A                  	dc.l Map_obj14+$13000000
0001DE50 0000 0480                  	dc.b 0,	0, 4, $80
0001DE54 1C00 909C                  	dc.l Map_obj1C+$1C000000
0001DE58 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DE5C 5F01 25F0                  	dc.l Map_obj5F+$5F000000
0001DE60 0000 0400                  	dc.b 0,	0, 4, 0
0001DE64 6001 28A6                  	dc.l Map_obj60+$60000000
0001DE68 0000 2429                  	dc.b 0,	0, $24,	$29
0001DE6C 7901 7BD6                  	dc.l Map_obj79+$79000000
0001DE70 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE74                            	even
0001DE74                            	even
0001DE74                            
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74                            ; Debug	list - Spring Yard
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74                            Debug_SYZ:
0001DE74                            	include "_inc\Debug list - SYZ.asm"
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74                            ; Debug	list - Spring Yard
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74 000F                       	dc.w $F
0001DE76 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DE7A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE7E 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DE82 0000 0680                  	dc.b 0,	0, 6, $80
0001DE86 3600 D990                  	dc.l Map_obj36+$36000000
0001DE8A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE8E 4100 E702                  	dc.l Map_obj41+$41000000
0001DE92 0000 0523                  	dc.b 0,	0, 5, $23
0001DE96 4300 EB88                  	dc.l Map_obj43+$43000000
0001DE9A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DE9E 1200 F366                  	dc.l Map_obj12+$12000000
0001DEA2 0000 0000                  	dc.b 0,	0, 0, 0
0001DEA6 4700 F4E2                  	dc.l Map_obj47+$47000000
0001DEAA 0000 0380                  	dc.b 0,	0, 3, $80
0001DEAE 1F00 9FE2                  	dc.l Map_obj1F+$1F000000
0001DEB2 0000 0400                  	dc.b 0,	0, 4, 0
0001DEB6 2200 A29E                  	dc.l Map_obj22+$22000000
0001DEBA 0000 0444                  	dc.b 0,	0, 4, $44
0001DEBE 5001 0316                  	dc.l Map_obj50+$50000000
0001DEC2 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DEC6 1800 8940                  	dc.l Map_obj18a+$18000000
0001DECA 0000 4000                  	dc.b 0,	0, $40,	0
0001DECE 5601 10DE                  	dc.l Map_obj56+$56000000
0001DED2 0000 4000                  	dc.b 0,	0, $40,	0
0001DED6 3200 C780                  	dc.l Map_obj32+$32000000
0001DEDA 0000 0513                  	dc.b 0,	0, 5, $13
0001DEDE 7801 7850                  	dc.l Map_obj78+$78000000
0001DEE2 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DEE6 7901 7BD6                  	dc.l Map_obj79+$79000000
0001DEEA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DEEE                            	even
0001DEEE                            	even
0001DEEE                            
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE                            ; Debug	list - Scrap Brain
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE                            Debug_SBZ:
0001DEEE                            	include "_inc\Debug list - SBZ.asm"
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE                            ; Debug	list - Scrap Brain
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE 001D                       	dc.w $1D
0001DEF0 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DEF4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DEF8 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DEFC 0000 0680                  	dc.b 0,	0, 6, $80
0001DF00 5F01 25F0                  	dc.l Map_obj5F+$5F000000
0001DF04 0000 0400                  	dc.b 0,	0, 4, 0
0001DF08 6001 28A6                  	dc.l Map_obj60+$60000000
0001DF0C 0000 0429                  	dc.b 0,	0, 4, $29
0001DF10 7801 7850                  	dc.l Map_obj78+$78000000
0001DF14 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DF18 1501 147A                  	dc.l Map_obj15b+$15000000
0001DF1C 0702 4391                  	dc.b 7,	2, $43,	$91
0001DF20 6701 6164                  	dc.l Map_obj67+$67000000
0001DF24 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DF28 5201 0A28                  	dc.l Map_obj52+$52000000
0001DF2C 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DF30 3200 C780                  	dc.l Map_obj32+$32000000
0001DF34 0000 0513                  	dc.b 0,	0, 5, $13
0001DF38 6901 63BE                  	dc.l Map_obj69+$69000000
0001DF3C 0300 4492                  	dc.b 3,	0, $44,	$92
0001DF40 6901 6418                  	dc.l Map_obj69a+$69000000
0001DF44 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DF48 6A01 6676                  	dc.l Map_obj6A+$6A000000
0001DF4C 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DF50 5300 8F8C                  	dc.l Map_obj53+$53000000
0001DF54 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DF58 5201 0A28                  	dc.l Map_obj52+$52000000
0001DF5C 3903 4460                  	dc.b $39, 3, $44, $60
0001DF60 6B01 6A46                  	dc.l Map_obj6B+$6B000000
0001DF64 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DF68 2A00 9232                  	dc.l Map_obj2A+$2A000000
0001DF6C 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DF70 6B01 6A46                  	dc.l Map_obj6B+$6B000000
0001DF74 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DF78 6A01 6676                  	dc.l Map_obj6A+$6A000000
0001DF7C 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DF80 6B01 6A46                  	dc.l Map_obj6B+$6B000000
0001DF84 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DF88 6A01 6676                  	dc.l Map_obj6A+$6A000000
0001DF8C 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DF90 6B01 6A46                  	dc.l Map_obj6B+$6B000000
0001DF94 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DF98 6C01 6C08                  	dc.l Map_obj6C+$6C000000
0001DF9C 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DFA0 6D00 EFD8                  	dc.l Map_obj6D+$6D000000
0001DFA4 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DFA8 6D00 EFD8                  	dc.l Map_obj6D+$6D000000
0001DFAC 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DFB0 6E01 6CBE                  	dc.l Map_obj6E+$6E000000
0001DFB4 0400 047E                  	dc.b 4,	0, 4, $7E
0001DFB8 7001 7114                  	dc.l Map_obj70+$70000000
0001DFBC 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DFC0 7101 1E86                  	dc.l Map_obj71+$71000000
0001DFC4 1100 8680                  	dc.b $11, 0, $86, $80
0001DFC8 1E00 96F0                  	dc.l Map_obj1E+$1E000000
0001DFCC 0400 2302                  	dc.b 4,	0, $23,	2
0001DFD0 7901 7BD6                  	dc.l Map_obj79+$79000000
0001DFD4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFD8                            	even
0001DFD8                            	even
0001DFD8                            
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8                            ; Debug	list - ending sequence / special stage
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8                            Debug_Ending:
0001DFD8                            	include "_inc\Debug list - Ending and SS.asm"
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8                            ; Debug	list - ending sequence / special stage
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8 000D                       	dc.w $D
0001DFDA 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DFDE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFE2 4700 F4E2                  	dc.l Map_obj47+$47000000
0001DFE6 0000 0380                  	dc.b 0,	0, 3, $80
0001DFEA 2800 9D14                  	dc.l Map_obj28a+$28000000
0001DFEE 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DFF2 2800 9D14                  	dc.l Map_obj28a+$28000000
0001DFF6 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DFFA 2800 9D14                  	dc.l Map_obj28a+$28000000
0001DFFE 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E002 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E006 0D00 0553                  	dc.b $D, 0, 5, $53
0001E00A 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E00E 0E00 0553                  	dc.b $E, 0, 5, $53
0001E012 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E016 0F00 0573                  	dc.b $F, 0, 5, $73
0001E01A 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E01E 1000 0573                  	dc.b $10, 0, 5,	$73
0001E022 2800 9D14                  	dc.l Map_obj28a+$28000000
0001E026 1100 0585                  	dc.b $11, 0, 5,	$85
0001E02A 2800 9D2C                  	dc.l Map_obj28b+$28000000
0001E02E 1200 0593                  	dc.b $12, 0, 5,	$93
0001E032 2800 9D14                  	dc.l Map_obj28a+$28000000
0001E036 1300 0565                  	dc.b $13, 0, 5,	$65
0001E03A 2800 9D2C                  	dc.l Map_obj28b+$28000000
0001E03E 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E042                            	even
0001E042                            	even
0001E042                            
0001E042                            ; ---------------------------------------------------------------------------
0001E042                            ; Main level load blocks
0001E042                            ; ---------------------------------------------------------------------------
0001E042                            MainLoadBlocks:
0001E042                            	include "_inc\Main level load blocks.asm"
0001E042                            ; ---------------------------------------------------------------------------
0001E042                            ; Main level load blocks
0001E042                            ;
0001E042                            ; ===FORMAT===
0001E042                            ; level	patterns + (1st	PLC num	* 10^6)
0001E042                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E042                            ; 256x256 mappings
0001E042                            ; blank, music (unused), pal index (unused), pal index
0001E042                            ; ---------------------------------------------------------------------------
0001E042 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001E046 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001E04A 0000 0000                  	dc.l Blk256_GHZ
0001E04E 0081 0404                  	dc.b 0,	$81, 4,	4
0001E052 0000 0000                  	dc.l Nem_LZ+$6000000
0001E056 0000 0000                  	dc.l Blk16_LZ+$7000000
0001E05A 0000 0000                  	dc.l Blk256_LZ
0001E05E 0082 0505                  	dc.b 0,	$82, 5,	5
0001E062 0000 0000                  	dc.l Nem_MZ+$8000000
0001E066 0000 0000                  	dc.l Blk16_MZ+$9000000
0001E06A 0000 0000                  	dc.l Blk256_MZ
0001E06E 0083 0606                  	dc.b 0,	$83, 6,	6
0001E072 0000 0000                  	dc.l Nem_SLZ+$A000000
0001E076 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001E07A 0000 0000                  	dc.l Blk256_SLZ
0001E07E 0084 0707                  	dc.b 0,	$84, 7,	7
0001E082 0000 0000                  	dc.l Nem_SYZ+$C000000
0001E086 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001E08A 0000 0000                  	dc.l Blk256_SYZ
0001E08E 0085 0808                  	dc.b 0,	$85, 8,	8
0001E092 0000 0000                  	dc.l Nem_SBZ+$E000000
0001E096 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001E09A 0000 0000                  	dc.l Blk256_SBZ
0001E09E 0086 0909                  	dc.b 0,	$86, 9,	9
0001E0A2 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E0A6 0000 0000                  	dc.l Blk16_GHZ
0001E0AA 0000 0000                  	dc.l Blk256_GHZ
0001E0AE 0086 1313                  	dc.b 0,	$86, $13, $13
0001E0B2 0000 0000                  	dc.l Nem_BHZ_2nd+$4000000
0001E0B6 0000 0000                  	dc.l Blk16_BHZ+$5000000
0001E0BA 0000 0000                  	dc.l Blk256_BHZ
0001E0BE 009E 2121                  	dc.b 0,	$9E, $21,	$21
0001E0C2                            	even
0001E0C2                            	even
0001E0C2                            
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            ; Pattern load cues
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            ArtLoadCues:
0001E0C2                            	include "_inc\Pattern load cues.asm"
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            ; Pattern load cues - index
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001E0C6 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001E0CA 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001E0CE 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E0D2 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E0D6 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E0DA 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E0DE 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E0E2 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues
0001E0E6 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001E0EA 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E0EE 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E0F2 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E0F6 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E0FA 0000 0000 0000             	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E100 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E104 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E108 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E10A                            ; ---------------------------------------------------------------------------
0001E10A                            ; Pattern load cues - standard block 1
0001E10A                            ; ---------------------------------------------------------------------------
0001E10A 0004                       PLC_Main:	dc.w 4
0001E10C 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E110 F400                       		dc.w $F400
0001E112 0000 0000                  		dc.l Nem_Hud		; HUD
0001E116 D940                       		dc.w $D940
0001E118 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E11C FA80                       		dc.w $FA80
0001E11E 0000 0000                  		dc.l Nem_Ring		; rings
0001E122 F640                       		dc.w $F640
0001E124 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E128 F2E0                       		dc.w $F2E0
0001E12A                            ; ---------------------------------------------------------------------------
0001E12A                            ; Pattern load cues - standard block 2
0001E12A                            ; ---------------------------------------------------------------------------
0001E12A 0002                       PLC_Main2:	dc.w 2
0001E12C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E130 D000                       		dc.w $D000
0001E132 0000 0000                  		dc.l Nem_Shield		; shield
0001E136 A820                       		dc.w $A820
0001E138 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E13C AB80                       		dc.w $AB80
0001E13E                            ; ---------------------------------------------------------------------------
0001E13E                            ; Pattern load cues - explosion
0001E13E                            ; ---------------------------------------------------------------------------
0001E13E 0000                       PLC_Explode:	dc.w 0
0001E140 0000 0000                  		dc.l Nem_Explode	; explosion
0001E144 B400                       		dc.w $B400
0001E146                            ; ---------------------------------------------------------------------------
0001E146                            ; Pattern load cues - game/time	over
0001E146                            ; ---------------------------------------------------------------------------
0001E146 0000                       PLC_GameOver:	dc.w 0
0001E148 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E14C ABC0                       		dc.w $ABC0
0001E14E                            ; ---------------------------------------------------------------------------
0001E14E                            ; Pattern load cues - Green Hill
0001E14E                            ; ---------------------------------------------------------------------------
0001E14E 000B                       PLC_GHZ:	dc.w $B
0001E150 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E154 0000                       		dc.w 0
0001E156 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E15A 39A0                       		dc.w $39A0
0001E15C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E160 6B00                       		dc.w $6B00
0001E162 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E166 7A00                       		dc.w $7A00
0001E168 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E16C 8000                       		dc.w $8000
0001E16E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E172 8880                       		dc.w $8880
0001E174 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E178 8F60                       		dc.w $8F60
0001E17A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E17E 9360                       		dc.w $9360
0001E180 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E184 9E00                       		dc.w $9E00
0001E186 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E18A A360                       		dc.w $A360
0001E18C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E190 A460                       		dc.w $A460
0001E192 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E196 A660                       		dc.w $A660
0001E198 0005                       PLC_GHZ2:	dc.w 5
0001E19A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E19E 7000                       		dc.w $7000
0001E1A0 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E1A4 71C0                       		dc.w $71C0
0001E1A6 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E1AA 7300                       		dc.w $7300
0001E1AC 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E1B0 7540                       		dc.w $7540
0001E1B2 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E1B6 A1E0                       		dc.w $A1E0
0001E1B8 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E1BC 6980                       		dc.w $6980
0001E1BE                            ; ---------------------------------------------------------------------------
0001E1BE                            ; Pattern load cues - Labyrinth
0001E1BE                            ; ---------------------------------------------------------------------------
0001E1BE 000B                       PLC_LZ:		dc.w $B
0001E1C0 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E1C4 0000                       		dc.w 0
0001E1C6 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E1CA 3C00                       		dc.w $3C00
0001E1CC 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E1D0 3E00                       		dc.w $3E00
0001E1D2 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E1D6 4B20                       		dc.w $4B20
0001E1D8 0000 0000                  		dc.l Nem_Water		; water	surface
0001E1DC 6000                       		dc.w $6000
0001E1DE 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E1E2 6200                       		dc.w $6200
0001E1E4 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E1E8 6500                       		dc.w $6500
0001E1EA 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E1EE 6900                       		dc.w $6900
0001E1F0 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E1F4 7780                       		dc.w $7780
0001E1F6 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E1FA 7880                       		dc.w $7880
0001E1FC 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E200 7980                       		dc.w $7980
0001E202 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E206 94C0                       		dc.w $94C0
0001E208 000C                       PLC_LZ2:	dc.w $C
0001E20A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E20E 7BC0                       		dc.w $7BC0
0001E210 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E214 7CC0                       		dc.w $7CC0
0001E216 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E21A 7EC0                       		dc.w $7EC0
0001E21C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E220 5D20                       		dc.w $5D20
0001E222 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E226 8800                       		dc.w $8800
0001E228 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E22C 89E0                       		dc.w $89E0
0001E22E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E232 8CE0                       		dc.w $8CE0
0001E234 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E238 90C0                       		dc.w $90C0
0001E23A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E23E A1E0                       		dc.w $A1E0
0001E240 0000 0000                  		dc.l Nem_Cork		; cork block
0001E244 A000                       		dc.w $A000
0001E246 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E24A A360                       		dc.w $A360
0001E24C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E250 A460                       		dc.w $A460
0001E252 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E256 A660                       		dc.w $A660
0001E258                            ; ---------------------------------------------------------------------------
0001E258                            ; Pattern load cues - Marble
0001E258                            ; ---------------------------------------------------------------------------
0001E258 0009                       PLC_MZ:		dc.w 9
0001E25A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E25E 0000                       		dc.w 0
0001E260 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E264 6000                       		dc.w $6000
0001E266 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E26A 68A0                       		dc.w $68A0
0001E26C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E270 7000                       		dc.w $7000
0001E272 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E276 71C0                       		dc.w $71C0
0001E278 0000 0000                  		dc.l Nem_Lava		; lava
0001E27C 7500                       		dc.w $7500
0001E27E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E282 8880                       		dc.w $8880
0001E284 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E288 8F60                       		dc.w $8F60
0001E28A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E28E 9700                       		dc.w $9700
0001E290 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E294 9FE0                       		dc.w $9FE0
0001E296 0004                       PLC_MZ2:	dc.w 4
0001E298 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E29C A260                       		dc.w $A260
0001E29E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2A2 A360                       		dc.w $A360
0001E2A4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2A8 A460                       		dc.w $A460
0001E2AA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2AE A660                       		dc.w $A660
0001E2B0 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E2B4 5700                       		dc.w $5700
0001E2B6                            ; ---------------------------------------------------------------------------
0001E2B6                            ; Pattern load cues - Star Light
0001E2B6                            ; ---------------------------------------------------------------------------
0001E2B6 0008                       PLC_SLZ:	dc.w 8
0001E2B8 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E2BC 0000                       		dc.w 0
0001E2BE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E2C2 8000                       		dc.w $8000
0001E2C4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E2C8 8520                       		dc.w $8520
0001E2CA 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E2CE 9000                       		dc.w $9000
0001E2D0 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E2D4 9C00                       		dc.w $9C00
0001E2D6 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E2DA A260                       		dc.w $A260
0001E2DC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2E0 A360                       		dc.w $A360
0001E2E2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2E6 A460                       		dc.w $A460
0001E2E8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2EC A660                       		dc.w $A660
0001E2EE 0005                       PLC_SLZ2:	dc.w 5
0001E2F0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E2F4 6E80                       		dc.w $6E80
0001E2F6 0000 0000                  		dc.l Nem_Fan		; fan
0001E2FA 7400                       		dc.w $7400
0001E2FC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E300 7980                       		dc.w $7980
0001E302 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E306 7B80                       		dc.w $7B80
0001E308 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E30C 9B00                       		dc.w $9B00
0001E30E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E312 9E00                       		dc.w $9E00
0001E314                            ; ---------------------------------------------------------------------------
0001E314                            ; Pattern load cues - Spring Yard
0001E314                            ; ---------------------------------------------------------------------------
0001E314 0004                       PLC_SYZ:	dc.w 4
0001E316 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E31A 0000                       		dc.w 0
0001E31C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E320 8000                       		dc.w $8000
0001E322 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E326 8880                       		dc.w $8880
0001E328 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E32C 8F60                       		dc.w $8F60
0001E32E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E332 9700                       		dc.w $9700
0001E334 0007                       PLC_SYZ2:	dc.w 7
0001E336 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E33A 7000                       		dc.w $7000
0001E33C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E340 72C0                       		dc.w $72C0
0001E342 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E346 7740                       		dc.w $7740
0001E348 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E34C 9FE0                       		dc.w $9FE0
0001E34E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E352 A1E0                       		dc.w $A1E0
0001E354 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E358 A360                       		dc.w $A360
0001E35A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E35E A460                       		dc.w $A460
0001E360 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E364 A660                       		dc.w $A660
0001E366                            ; ---------------------------------------------------------------------------
0001E366                            ; Pattern load cues - Scrap Brain
0001E366                            ; ---------------------------------------------------------------------------
0001E366 000B                       PLC_SBZ:	dc.w $B
0001E368 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E36C 0000                       		dc.w 0
0001E36E 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E372 5800                       		dc.w $5800
0001E374 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E378 5D00                       		dc.w $5D00
0001E37A 0000 0000                  		dc.l Nem_Girder		; girder
0001E37E 5E00                       		dc.w $5E00
0001E380 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E384 6040                       		dc.w $6040
0001E386 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E38A 6880                       		dc.w $6880
0001E38C 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E390 6900                       		dc.w $6900
0001E392 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E396 7220                       		dc.w $7220
0001E398 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E39C 76A0                       		dc.w $76A0
0001E39E 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E3A2 7B20                       		dc.w $7B20
0001E3A4 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E3A8 7EA0                       		dc.w $7EA0
0001E3AA 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E3AE 9860                       		dc.w $9860
0001E3B0 000C                       PLC_SBZ2:	dc.w $C
0001E3B2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3B6 5600                       		dc.w $5600
0001E3B8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E3BC 8000                       		dc.w $8000
0001E3BE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E3C2 8520                       		dc.w $8520
0001E3C4 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E3C8 8C00                       		dc.w $8C00
0001E3CA 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E3CE 8DE0                       		dc.w $8DE0
0001E3D0 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E3D4 8FC0                       		dc.w $8FC0
0001E3D6 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E3DA 9240                       		dc.w $9240
0001E3DC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E3E0 7F20                       		dc.w $7F20
0001E3E2 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E3E6 9BE0                       		dc.w $9BE0
0001E3E8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E3EC A1E0                       		dc.w $A1E0
0001E3EE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3F2 A360                       		dc.w $A360
0001E3F4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3F8 A460                       		dc.w $A460
0001E3FA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3FE A660                       		dc.w $A660
0001E400                            ; ---------------------------------------------------------------------------
0001E400                            ; Pattern load cues - DR. Breen Hill
0001E400                            ; ---------------------------------------------------------------------------
0001E400 000B                       PLC_BHZ:	dc.w $B
0001E402 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E406 0000                       		dc.w 0
0001E408 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E40C 39A0                       		dc.w $39A0
0001E40E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E412 6B00                       		dc.w $6B00
0001E414 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E418 7A00                       		dc.w $7A00
0001E41A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E41E 8000                       		dc.w $8000
0001E420 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E424 8880                       		dc.w $8880
0001E426 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E42A 8F60                       		dc.w $8F60
0001E42C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E430 9360                       		dc.w $9360
0001E432 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E436 9E00                       		dc.w $9E00
0001E438 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E43C A360                       		dc.w $A360
0001E43E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E442 A460                       		dc.w $A460
0001E444 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E448 A660                       		dc.w $A660
0001E44A 0005                       PLC_BHZ2:	dc.w 5
0001E44C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E450 7000                       		dc.w $7000
0001E452 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E456 71C0                       		dc.w $71C0
0001E458 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E45C 7300                       		dc.w $7300
0001E45E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E462 7540                       		dc.w $7540
0001E464 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E468 A1E0                       		dc.w $A1E0
0001E46A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E46E 6980                       		dc.w $6980
0001E470                            ; ---------------------------------------------------------------------------
0001E470                            ; Pattern load cues - title card
0001E470                            ; ---------------------------------------------------------------------------
0001E470 0000                       PLC_TitleCard:	dc.w 0
0001E472 0000 0000                  		dc.l Nem_TitleCard
0001E476 B000                       		dc.w $B000
0001E478                            ; ---------------------------------------------------------------------------
0001E478                            ; Pattern load cues - act 3 boss
0001E478                            ; ---------------------------------------------------------------------------
0001E478 0005                       PLC_Boss:	dc.w 5
0001E47A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E47E 8000                       		dc.w $8000
0001E480 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E484 8D80                       		dc.w $8D80
0001E486 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E48A 93A0                       		dc.w $93A0
0001E48C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E490 A300                       		dc.w $A300
0001E492 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E496 A300                       		dc.w $A300
0001E498 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E49C A540                       		dc.w $A540
0001E49E                            ; ---------------------------------------------------------------------------
0001E49E                            ; Pattern load cues - act 1/2 signpost
0001E49E                            ; ---------------------------------------------------------------------------
0001E49E 0002                       PLC_Signpost:	dc.w 2
0001E4A0 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E4A4 D000                       		dc.w $D000
0001E4A6 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E4AA 96C0                       		dc.w $96C0
0001E4AC 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E4B0 8C40                       		dc.w $8C40
0001E4B2                            ; ---------------------------------------------------------------------------
0001E4B2                            ; Pattern load cues - beta special stage warp effect
0001E4B2                            ; ---------------------------------------------------------------------------
0001E4B2 0000                       PLC_Warp:	dc.w 0
0001E4B4 0000 0000                  		dc.l Nem_Warp
0001E4B8 A820                       		dc.w $A820
0001E4BA                            ; ---------------------------------------------------------------------------
0001E4BA                            ; Pattern load cues - special stage
0001E4BA                            ; ---------------------------------------------------------------------------
0001E4BA 0010                       PLC_SpeStage:	dc.w $10
0001E4BC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E4C0 0000                       		dc.w 0
0001E4C2 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E4C6 0A20                       		dc.w $A20
0001E4C8 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E4CC 2840                       		dc.w $2840
0001E4CE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E4D2 4760                       		dc.w $4760
0001E4D4 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E4D8 4A20                       		dc.w $4A20
0001E4DA 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E4DE 4C60                       		dc.w $4C60
0001E4E0 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E4E4 5E00                       		dc.w $5E00
0001E4E6 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E4EA 6E00                       		dc.w $6E00
0001E4EC 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E4F0 7E00                       		dc.w $7E00
0001E4F2 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E4F6 8E00                       		dc.w $8E00
0001E4F8 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E4FC 9E00                       		dc.w $9E00
0001E4FE 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E502 AE00                       		dc.w $AE00
0001E504 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E508 BE00                       		dc.w $BE00
0001E50A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E50E EE00                       		dc.w $EE00
0001E510 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E514 F2E0                       		dc.w $F2E0
0001E516 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E51A F400                       		dc.w $F400
0001E51C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E520 F520                       		dc.w $F520
0001E522 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E526 F2E0                       		dc.w $F2E0
0001E528 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E52C F400                       		dc.w $F400
0001E52E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E532 F520                       		dc.w $F520
0001E534                            ; ---------------------------------------------------------------------------
0001E534                            ; Pattern load cues - GHZ animals
0001E534                            ; ---------------------------------------------------------------------------
0001E534 0001                       PLC_GHZAnimals:	dc.w 1
0001E536 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E53A B000                       		dc.w $B000
0001E53C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E540 B240                       		dc.w $B240
0001E542                            ; ---------------------------------------------------------------------------
0001E542                            ; Pattern load cues - LZ animals
0001E542                            ; ---------------------------------------------------------------------------
0001E542 0001                       PLC_LZAnimals:	dc.w 1
0001E544 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E548 B000                       		dc.w $B000
0001E54A 0000 0000                  		dc.l Nem_Seal		; seal
0001E54E B240                       		dc.w $B240
0001E550                            ; ---------------------------------------------------------------------------
0001E550                            ; Pattern load cues - MZ animals
0001E550                            ; ---------------------------------------------------------------------------
0001E550 0001                       PLC_MZAnimals:	dc.w 1
0001E552 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E556 B000                       		dc.w $B000
0001E558 0000 0000                  		dc.l Nem_Seal		; seal
0001E55C B240                       		dc.w $B240
0001E55E                            ; ---------------------------------------------------------------------------
0001E55E                            ; Pattern load cues - SLZ animals
0001E55E                            ; ---------------------------------------------------------------------------
0001E55E 0001                       PLC_SLZAnimals:	dc.w 1
0001E560 0000 0000                  		dc.l Nem_Pig		; pig
0001E564 B000                       		dc.w $B000
0001E566 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E56A B240                       		dc.w $B240
0001E56C                            ; ---------------------------------------------------------------------------
0001E56C                            ; Pattern load cues - SYZ animals
0001E56C                            ; ---------------------------------------------------------------------------
0001E56C 0001                       PLC_SYZAnimals:	dc.w 1
0001E56E 0000 0000                  		dc.l Nem_Pig		; pig
0001E572 B000                       		dc.w $B000
0001E574 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E578 B240                       		dc.w $B240
0001E57A                            ; ---------------------------------------------------------------------------
0001E57A                            ; Pattern load cues - SBZ animals
0001E57A                            ; ---------------------------------------------------------------------------
0001E57A 0001                       PLC_SBZAnimals:	dc.w 1
0001E57C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E580 B000                       		dc.w $B000
0001E582 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E586 B240                       		dc.w $B240
0001E588                            ; ---------------------------------------------------------------------------
0001E588                            ; Pattern load cues - special stage results screen
0001E588                            ; ---------------------------------------------------------------------------
0001E588 0001                       PLC_SpeStResult:dc.w 1
0001E58A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E58E A820                       		dc.w $A820
0001E590 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E594 AA20                       		dc.w $AA20
0001E596                            ; ---------------------------------------------------------------------------
0001E596                            ; Pattern load cues - ending sequence
0001E596                            ; ---------------------------------------------------------------------------
0001E596 000E                       PLC_Ending:	dc.w $E
0001E598 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E59C 0000                       		dc.w 0
0001E59E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E5A2 39A0                       		dc.w $39A0
0001E5A4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E5A8 6B00                       		dc.w $6B00
0001E5AA 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E5AE 7400                       		dc.w $7400
0001E5B0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E5B4 78A0                       		dc.w $78A0
0001E5B6 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E5BA 7C20                       		dc.w $7C20
0001E5BC 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E5C0 A480                       		dc.w $A480
0001E5C2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E5C6 AA60                       		dc.w $AA60
0001E5C8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E5CC ACA0                       		dc.w $ACA0
0001E5CE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E5D2 AE60                       		dc.w $AE60
0001E5D4 0000 0000                  		dc.l Nem_Seal		; seal
0001E5D8 B0A0                       		dc.w $B0A0
0001E5DA 0000 0000                  		dc.l Nem_Pig		; pig
0001E5DE B260                       		dc.w $B260
0001E5E0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E5E4 B4A0                       		dc.w $B4A0
0001E5E6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E5EA B660                       		dc.w $B660
0001E5EC 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E5F0 B8A0                       		dc.w $B8A0
0001E5F2                            ; ---------------------------------------------------------------------------
0001E5F2                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E5F2                            ; ---------------------------------------------------------------------------
0001E5F2 0002                       PLC_TryAgain:	dc.w 2
0001E5F4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E5F8 78A0                       		dc.w $78A0
0001E5FA 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E5FE 7C20                       		dc.w $7C20
0001E600 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E604 B400                       		dc.w $B400
0001E606                            ; ---------------------------------------------------------------------------
0001E606                            ; Pattern load cues - Eggman on SBZ 2
0001E606                            ; ---------------------------------------------------------------------------
0001E606 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E608 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E60C A300                       		dc.w $A300
0001E60E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E612 8000                       		dc.w $8000
0001E614 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E618 9400                       		dc.w $9400
0001E61A                            ; ---------------------------------------------------------------------------
0001E61A                            ; Pattern load cues - final boss
0001E61A                            ; ---------------------------------------------------------------------------
0001E61A 0004                       PLC_FZBoss:	dc.w 4
0001E61C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E620 7400                       		dc.w $7400
0001E622 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E626 6000                       		dc.w $6000
0001E628 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E62C 8000                       		dc.w $8000
0001E62E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E632 8E00                       		dc.w $8E00
0001E634 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E638 A540                       		dc.w $A540
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A                            ; Pattern load cues - Teto boss
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A 0002                       PLC_TetoBoss:	dc.w 2
0001E63C 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E640 8000                       		dc.w $8000
0001E642 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E646 93A0                       		dc.w $93A0
0001E648 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E64C 9000                       		dc.w $9000
0001E64E                            		even
0001E64E                            		even
0001E64E                            
0001E64E                            		incbin	misc\padding.bin
0001E73C                            		even
0001E73C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EB92                            		even
0001EB92                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EC2A                            		even
0001EC2A                            Nem_Gomer:	incbin	artnem\gomer.bin
0001ED6C                            		even
0001ED6C                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EDBA                            		even
0001EDBA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EECE                            		even
0001EECE                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FD98                            		even
0001FD98                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023E9E                            		even
00023E9E                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023ED2                            		even
00023ED2                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023F90                            		even
00023F90                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024438                            		even
00024438                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024496                            		even
00024496                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
0002509C                            		even
0002509C                            ; ---------------------------------------------------------------------------
0002509C                            ; Sprite mappings - Sonic
0002509C                            ; ---------------------------------------------------------------------------
0002509C                            Map_Sonic:
0002509C                            	include "_maps\Sonic.asm"
0002509C                            Map_a933:
0002509C 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
0002509E 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000250A0 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000250A2 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000250A4 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000250A6 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000250A8 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000250AA 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000250AC 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000250AE 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000250B0 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000250B2 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000250B4 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000250B6 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000250B8 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000250BA 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000250BC 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000250BE 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000250C0 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000250C2 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000250C4 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000250C6 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000250C8 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000250CA 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000250CC 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000250CE 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000250D0 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000250D2 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000250D4 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000250D6 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000250D8 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000250DA 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000250DC 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000250DE 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000250E0 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000250E2 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000250E4 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000250E6 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000250E8 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000250EA 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000250EC 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000250EE 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000250F0 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000250F2 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000250F4 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000250F6 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000250F8 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000250FA 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000250FC 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000250FE 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
00025100 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
00025102 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00025104 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00025106 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00025108 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
0002510A 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
0002510C 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
0002510E 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
00025110 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
00025112 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00025114 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00025116 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00025118 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
0002511A 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
0002511C 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002511E 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00025120 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00025122 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00025124 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00025126 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00025128 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
0002512A 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
0002512C 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002512E 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00025130 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00025132 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025134 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025136 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025138 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002513A 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
0002513C 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002513E 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00025140 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00025142 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025144 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025146 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025148 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
0002514A 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
0002514C 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002514E 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00025150 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00025152 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025154 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025156 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00025158 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
0002515A 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
0002515C 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002515E 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
00025160 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00025162 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00025164 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00025166 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00025168 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
0002516A 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
0002516C 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002516E 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
00025170 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00025172 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00025174 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00025176 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00025178 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
0002517A 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
0002517C 00                         Map_a933_E0: 	dc.b $0
0002517D 02                         Map_a933_E1: 	dc.b $2
0002517E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00025183 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00025188 03                         Map_a933_EC: 	dc.b $3
00025189 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002518E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00025193 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025198 03                         Map_a933_FC: 	dc.b $3
00025199 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002519E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000251A3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251A8 03                         Map_a933_10C: 	dc.b $3
000251A9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251AE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000251B3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251B8 03                         Map_a933_11C: 	dc.b $3
000251B9 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000251BE 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000251C3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251C8 04                         Map_a933_12C: 	dc.b $4
000251C9 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000251CE FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000251D3 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000251D8 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000251DD 02                         Map_a933_141: 	dc.b $2
000251DE EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000251E3 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000251E8 02                         Map_a933_14C: 	dc.b $2
000251E9 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000251EE FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000251F3 04                         Map_a933_157: 	dc.b $4
000251F4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000251F9 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000251FE FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00025203 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025208 02                         Map_a933_16C: 	dc.b $2
00025209 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002520E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00025213 03                         Map_a933_177: 	dc.b $3
00025214 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025219 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002521E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00025223 05                         Map_a933_187: 	dc.b $5
00025224 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025229 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002522E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025233 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025238 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002523D 06                         Map_a933_1A1: 	dc.b $6
0002523E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025243 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025248 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002524D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025252 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025257 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002525C 04                         Map_a933_1C0: 	dc.b $4
0002525D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025262 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025267 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002526C 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00025271 05                         Map_a933_1D5: 	dc.b $5
00025272 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025277 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002527C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00025281 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025286 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002528B 04                         Map_a933_1EF: 	dc.b $4
0002528C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025291 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025296 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002529B 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000252A0 05                         Map_a933_204: 	dc.b $5
000252A1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000252A6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000252AB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000252B0 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000252B5 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000252BA 04                         Map_a933_21E: 	dc.b $4
000252BB F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000252C0 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000252C5 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000252CA 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000252CF 02                         Map_a933_233: 	dc.b $2
000252D0 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000252D5 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000252DA 02                         Map_a933_23E: 	dc.b $2
000252DB F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000252E0 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000252E5 04                         Map_a933_249: 	dc.b $4
000252E6 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000252EB EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000252F0 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000252F5 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000252FA 02                         Map_a933_25E: 	dc.b $2
000252FB F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025300 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025305 03                         Map_a933_269: 	dc.b $3
00025306 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002530B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00025310 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025315 06                         Map_a933_279: 	dc.b $6
00025316 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002531B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025320 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025325 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002532A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002532F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025334 06                         Map_a933_298: 	dc.b $6
00025335 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002533A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002533F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025344 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025349 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002534E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025353 04                         Map_a933_2B7: 	dc.b $4
00025354 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025359 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002535E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025363 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025368 05                         Map_a933_2CC: 	dc.b $5
00025369 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002536E ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025373 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025378 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002537D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025382 04                         Map_a933_2E6: 	dc.b $4
00025383 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025388 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002538D EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025392 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025397 05                         Map_a933_2FB: 	dc.b $5
00025398 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002539D EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000253A2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000253A7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000253AC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000253B1 02                         Map_a933_315: 	dc.b $2
000253B2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253B7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253BC 02                         Map_a933_320: 	dc.b $2
000253BD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253C2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253C7 02                         Map_a933_32B: 	dc.b $2
000253C8 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253CD FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253D2 02                         Map_a933_336: 	dc.b $2
000253D3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253D8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253DD 04                         Map_a933_341: 	dc.b $4
000253DE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000253E3 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000253E8 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000253ED FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000253F2 03                         Map_a933_356: 	dc.b $3
000253F3 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000253F8 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000253FD FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025402 04                         Map_a933_366: 	dc.b $4
00025403 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025408 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002540D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025412 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025417 03                         Map_a933_37B: 	dc.b $3
00025418 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002541D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025422 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025427 02                         Map_a933_38B: 	dc.b $2
00025428 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002542D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025432 02                         Map_a933_396: 	dc.b $2
00025433 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025438 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002543D 02                         Map_a933_3A1: 	dc.b $2
0002543E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025443 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025448 02                         Map_a933_3AC: 	dc.b $2
00025449 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002544E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025453 04                         Map_a933_3B7: 	dc.b $4
00025454 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025459 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002545E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025463 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025468 02                         Map_a933_3CC: 	dc.b $2
00025469 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002546E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025473 04                         Map_a933_3D7: 	dc.b $4
00025474 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025479 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002547E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025483 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025488 02                         Map_a933_3EC: 	dc.b $2
00025489 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002548E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025493 01                         Map_a933_3F7: 	dc.b $1
00025494 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025499 01                         Map_a933_3FD: 	dc.b $1
0002549A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002549F 01                         Map_a933_403: 	dc.b $1
000254A0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254A5 01                         Map_a933_409: 	dc.b $1
000254A6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254AB 01                         Map_a933_40F: 	dc.b $1
000254AC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254B1 02                         Map_a933_415: 	dc.b $2
000254B2 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000254B7 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000254BC 01                         Map_a933_420: 	dc.b $1
000254BD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254C2 02                         Map_a933_426: 	dc.b $2
000254C3 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000254C8 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000254CD 01                         Map_a933_431: 	dc.b $1
000254CE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254D3 02                         Map_a933_437: 	dc.b $2
000254D4 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000254D9 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000254DE 04                         Map_a933_442: 	dc.b $4
000254DF ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000254E4 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000254E9 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000254EE 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000254F3 06                         Map_a933_457: 	dc.b $6
000254F4 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000254F9 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000254FE 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025503 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025508 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002550D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025512 02                         Map_a933_476: 	dc.b $2
00025513 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025518 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002551D 02                         Map_a933_481: 	dc.b $2
0002551E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025523 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025528 04                         Map_a933_48C: 	dc.b $4
00025529 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002552E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025533 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025538 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002553D 02                         Map_a933_4A1: 	dc.b $2
0002553E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025543 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025548 03                         Map_a933_4AC: 	dc.b $3
00025549 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002554E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025553 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025558 04                         Map_a933_4BC: 	dc.b $4
00025559 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002555E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025563 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025568 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002556D 02                         Map_a933_4D1: 	dc.b $2
0002556E EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025573 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025578 04                         Map_a933_4DC: 	dc.b $4
00025579 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002557E 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025583 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025588 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002558D 04                         Map_a933_4F1: 	dc.b $4
0002558E F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025593 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025598 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002559D F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000255A2 05                         Map_a933_506: 	dc.b $5
000255A3 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000255A8 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000255AD 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000255B2 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000255B7 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000255BC 05                         Map_a933_520: 	dc.b $5
000255BD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000255C2 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000255C7 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000255CC 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000255D1 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000255D6 02                         Map_a933_53A: 	dc.b $2
000255D7 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000255DC 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000255E1 03                         Map_a933_545: 	dc.b $3
000255E2 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000255E7 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000255EC 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000255F1 02                         Map_a933_555: 	dc.b $2
000255F2 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000255F7 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000255FC 03                         Map_a933_560: 	dc.b $3
000255FD EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025602 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025607 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002560C 02                         Map_a933_570: 	dc.b $2
0002560D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025612 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025617 03                         Map_a933_57B: 	dc.b $3
00025618 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002561D 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025622 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025627 03                         Map_a933_58B: 	dc.b $3
00025628 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002562D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025632 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025637 05                         Map_a933_59B: 	dc.b $5
00025638 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002563D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025642 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025647 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002564C 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025651 05                         Map_a933_5B5: 	dc.b $5
00025652 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025657 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002565C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025661 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025666 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002566B 02                         Map_a933_5CF: 	dc.b $2
0002566C EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025671 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025676 03                         Map_a933_5DA: 	dc.b $3
00025677 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002567C F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025681 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025686 01                         Map_a933_5EA: 	dc.b $1
00025687 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002568C 01                         Map_a933_5F0: 	dc.b $1
0002568D F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025692 01                         Map_a933_5F6: 	dc.b $1
00025693 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025698 04                         Map_a933_5FC: 	dc.b $4
00025699 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002569E F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000256A3 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000256A8 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000256AD 03                         Map_a933_611: 	dc.b $3
000256AE F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000256B3 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000256B8 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000256BD 03                         Map_a933_621: 	dc.b $3
000256BE F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000256C3 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000256C8 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000256CD 03                         Map_a933_631: 	dc.b $3
000256CE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000256D3 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000256D8 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000256DD 02                         Map_a933_641: 	dc.b $2
000256DE F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000256E3 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000256E8 02                         Map_a933_64C: 	dc.b $2
000256E9 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000256EE EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000256F3 03                         Map_a933_657: 	dc.b $3
000256F4 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000256F9 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000256FE 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025703 02                         Map_a933_667: 	dc.b $2
00025704 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025709 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002570E 04                         Map_a933_672: 	dc.b $4
0002570F ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025714 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025719 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002571E 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025723 00                         Map_a933_687: 	dc.b $0
00025724 00                         Map_a933_688: 	dc.b $0
00025725 00                         Map_a933_689: 	dc.b $0
00025726 00                         Map_a933_68A: 	dc.b $0
00025727 02                         Map_a933_68B: 	dc.b $2
00025728 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002572D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025732 00                         Map_a933_696: 	dc.b $0
00025733 02                         Map_a933_697: 	dc.b $2
00025734 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025739 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002573E 00                         Map_a933_6A2: 	dc.b $0
0002573F 00                         Map_a933_6A3: 	dc.b $0
00025740 00                         Map_a933_6A4: 	dc.b $0
00025741 02                         Map_a933_6A5: 	dc.b $2
00025742 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025747 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002574C 00                         Map_a933_6B0: 	dc.b $0
0002574D 02                         Map_a933_6B1: 	dc.b $2
0002574E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025753 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025758 00                         Map_a933_6BC: 	dc.b $0
00025759 00                         Map_a933_6BD: 	dc.b $0
0002575A 00                         Map_a933_6BE: 	dc.b $0
0002575B 02                         Map_a933_6BF: 	dc.b $2
0002575C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025761 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025766 00                         Map_a933_6CA: 	dc.b $0
00025767 02                         Map_a933_6CB: 	dc.b $2
00025768 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002576D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025772 00                         Map_a933_6D6: 	dc.b $0
00025774 00                         	even
00025774 00                         	even
00025774                            
00025774                            ; ---------------------------------------------------------------------------
00025774                            ; Uncompressed graphics	loading	array for Sonic
00025774                            ; ---------------------------------------------------------------------------
00025774                            SonicDynPLC:
00025774                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025774                            DPLC_33c5:
00025774 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025776 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025778 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
0002577A 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
0002577C 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
0002577E 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00025780 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00025782 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025784 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025786 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025788 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
0002578A 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
0002578C 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
0002578E 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00025790 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00025792 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00025794 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00025796 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00025798 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
0002579A 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
0002579C 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
0002579E 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000257A0 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000257A2 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000257A4 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000257A6 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000257A8 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000257AA 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000257AC 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000257AE 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000257B0 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000257B2 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
000257B4 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
000257B6 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
000257B8 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
000257BA 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
000257BC 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
000257BE 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
000257C0 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
000257C2 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
000257C4 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
000257C6 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
000257C8 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
000257CA 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
000257CC 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
000257CE 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
000257D0 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
000257D2 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000257D4 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000257D6 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000257D8 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000257DA 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000257DC 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000257DE 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000257E0 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000257E2 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000257E4 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000257E6 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000257E8 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000257EA 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000257EC 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000257EE 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000257F0 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000257F2 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
000257F4 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
000257F6 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
000257F8 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
000257FA 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
000257FC 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
000257FE 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00025800 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00025802 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025804 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025806 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025808 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
0002580A 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
0002580C 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
0002580E 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00025810 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00025812 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025814 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025816 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025818 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
0002581A 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
0002581C 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
0002581E 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00025820 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00025822 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025824 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025826 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025828 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
0002582A 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
0002582C 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
0002582E 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025830 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025832 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025834 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025836 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025838 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
0002583A 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
0002583C 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
0002583E 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025840 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025842 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025844 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025846 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025848 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
0002584A 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
0002584C 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
0002584E 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025850 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025852 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025854 00                         DPLC_33c5_E0: 	dc.b $0
00025855 02                         DPLC_33c5_E1: 	dc.b $2
00025856 F000                       	dc.b $F0, $0
00025858 1010                       	dc.b $10, $10
0002585A 03                         DPLC_33c5_E6: 	dc.b $3
0002585B 5012                       	dc.b $50, $12
0002585D 5018                       	dc.b $50, $18
0002585F 201E                       	dc.b $20, $1E
00025861 03                         DPLC_33c5_ED: 	dc.b $3
00025862 5021                       	dc.b $50, $21
00025864 5018                       	dc.b $50, $18
00025866 201E                       	dc.b $20, $1E
00025868 03                         DPLC_33c5_F4: 	dc.b $3
00025869 5021                       	dc.b $50, $21
0002586B 5018                       	dc.b $50, $18
0002586D 2027                       	dc.b $20, $27
0002586F 03                         DPLC_33c5_FB: 	dc.b $3
00025870 802A                       	dc.b $80, $2A
00025872 2033                       	dc.b $20, $33
00025874 2036                       	dc.b $20, $36
00025876 04                         DPLC_33c5_102: 	dc.b $4
00025877 7039                       	dc.b $70, $39
00025879 5041                       	dc.b $50, $41
0002587B 5047                       	dc.b $50, $47
0002587D 104D                       	dc.b $10, $4D
0002587F 02                         DPLC_33c5_10B: 	dc.b $2
00025880 7039                       	dc.b $70, $39
00025882 B04F                       	dc.b $B0, $4F
00025884 02                         DPLC_33c5_110: 	dc.b $2
00025885 505B                       	dc.b $50, $5B
00025887 8061                       	dc.b $80, $61
00025889 04                         DPLC_33c5_115: 	dc.b $4
0002588A 505B                       	dc.b $50, $5B
0002588C 506A                       	dc.b $50, $6A
0002588E 5070                       	dc.b $50, $70
00025890 1076                       	dc.b $10, $76
00025892 02                         DPLC_33c5_11E: 	dc.b $2
00025893 F4F0                       	dc.b $F4, $F0
00025895 1500                       	dc.b $15, $0
00025897 03                         DPLC_33c5_123: 	dc.b $3
00025898 7039                       	dc.b $70, $39
0002589A 3078                       	dc.b $30, $78
0002589C 507C                       	dc.b $50, $7C
0002589E 05                         DPLC_33c5_12A: 	dc.b $5
0002589F 5082                       	dc.b $50, $82
000258A1 5088                       	dc.b $50, $88
000258A3 208E                       	dc.b $20, $8E
000258A5 5091                       	dc.b $50, $91
000258A7 0097                       	dc.b $0, $97
000258A9 06                         DPLC_33c5_135: 	dc.b $6
000258AA 5082                       	dc.b $50, $82
000258AC 1098                       	dc.b $10, $98
000258AE 309A                       	dc.b $30, $9A
000258B0 509E                       	dc.b $50, $9E
000258B2 30A4                       	dc.b $30, $A4
000258B4 00A8                       	dc.b $0, $A8
000258B6 04                         DPLC_33c5_142: 	dc.b $4
000258B7 50A9                       	dc.b $50, $A9
000258B9 10AF                       	dc.b $10, $AF
000258BB 70B1                       	dc.b $70, $B1
000258BD 20B9                       	dc.b $20, $B9
000258BF 05                         DPLC_33c5_14B: 	dc.b $5
000258C0 50BC                       	dc.b $50, $BC
000258C2 30C2                       	dc.b $30, $C2
000258C4 70C6                       	dc.b $70, $C6
000258C6 20CE                       	dc.b $20, $CE
000258C8 10D1                       	dc.b $10, $D1
000258CA 04                         DPLC_33c5_156: 	dc.b $4
000258CB 50BC                       	dc.b $50, $BC
000258CD 10D3                       	dc.b $10, $D3
000258CF 70D5                       	dc.b $70, $D5
000258D1 20DD                       	dc.b $20, $DD
000258D3 05                         DPLC_33c5_15F: 	dc.b $5
000258D4 5082                       	dc.b $50, $82
000258D6 1098                       	dc.b $10, $98
000258D8 008E                       	dc.b $0, $8E
000258DA 70E0                       	dc.b $70, $E0
000258DC 20E8                       	dc.b $20, $E8
000258DE 04                         DPLC_33c5_16A: 	dc.b $4
000258DF 70EB                       	dc.b $70, $EB
000258E1 50F3                       	dc.b $50, $F3
000258E3 10F9                       	dc.b $10, $F9
000258E5 50FB                       	dc.b $50, $FB
000258E7 02                         DPLC_33c5_173: 	dc.b $2
000258E8 70EB                       	dc.b $70, $EB
000258EA B101                       	dc.b $B1, $1
000258EC 02                         DPLC_33c5_178: 	dc.b $2
000258ED 510D                       	dc.b $51, $D
000258EF 8113                       	dc.b $81, $13
000258F1 04                         DPLC_33c5_17D: 	dc.b $4
000258F2 510D                       	dc.b $51, $D
000258F4 511C                       	dc.b $51, $1C
000258F6 1122                       	dc.b $11, $22
000258F8 5124                       	dc.b $51, $24
000258FA 02                         DPLC_33c5_186: 	dc.b $2
000258FB 510D                       	dc.b $51, $D
000258FD B12A                       	dc.b $B1, $2A
000258FF 03                         DPLC_33c5_18B: 	dc.b $3
00025900 70EB                       	dc.b $70, $EB
00025902 0101                       	dc.b $1, $1
00025904 8136                       	dc.b $81, $36
00025906 06                         DPLC_33c5_192: 	dc.b $6
00025907 513F                       	dc.b $51, $3F
00025909 1145                       	dc.b $11, $45
0002590B 1147                       	dc.b $11, $47
0002590D 8149                       	dc.b $81, $49
0002590F 0152                       	dc.b $1, $52
00025911 0153                       	dc.b $1, $53
00025913 06                         DPLC_33c5_19F: 	dc.b $6
00025914 513F                       	dc.b $51, $3F
00025916 2154                       	dc.b $21, $54
00025918 1157                       	dc.b $11, $57
0002591A 1159                       	dc.b $11, $59
0002591C 815B                       	dc.b $81, $5B
0002591E 0152                       	dc.b $1, $52
00025920 04                         DPLC_33c5_1AC: 	dc.b $4
00025921 5164                       	dc.b $51, $64
00025923 116A                       	dc.b $11, $6A
00025925 816C                       	dc.b $81, $6C
00025927 1175                       	dc.b $11, $75
00025929 05                         DPLC_33c5_1B5: 	dc.b $5
0002592A 5177                       	dc.b $51, $77
0002592C 217D                       	dc.b $21, $7D
0002592E 1180                       	dc.b $11, $80
00025930 7182                       	dc.b $71, $82
00025932 218A                       	dc.b $21, $8A
00025934 04                         DPLC_33c5_1C0: 	dc.b $4
00025935 5177                       	dc.b $51, $77
00025937 118D                       	dc.b $11, $8D
00025939 818F                       	dc.b $81, $8F
0002593B 1198                       	dc.b $11, $98
0002593D 05                         DPLC_33c5_1C9: 	dc.b $5
0002593E 513F                       	dc.b $51, $3F
00025940 819A                       	dc.b $81, $9A
00025942 1159                       	dc.b $11, $59
00025944 11A3                       	dc.b $11, $A3
00025946 0152                       	dc.b $1, $52
00025948 02                         DPLC_33c5_1D4: 	dc.b $2
00025949 51A5                       	dc.b $51, $A5
0002594B B1AB                       	dc.b $B1, $AB
0002594D 02                         DPLC_33c5_1D9: 	dc.b $2
0002594E 505B                       	dc.b $50, $5B
00025950 B1B7                       	dc.b $B1, $B7
00025952 02                         DPLC_33c5_1DE: 	dc.b $2
00025953 51A5                       	dc.b $51, $A5
00025955 B1C3                       	dc.b $B1, $C3
00025957 02                         DPLC_33c5_1E3: 	dc.b $2
00025958 505B                       	dc.b $50, $5B
0002595A B1CF                       	dc.b $B1, $CF
0002595C 04                         DPLC_33c5_1E8: 	dc.b $4
0002595D 51DB                       	dc.b $51, $DB
0002595F 11E1                       	dc.b $11, $E1
00025961 B1E3                       	dc.b $B1, $E3
00025963 01EF                       	dc.b $1, $EF
00025965 03                         DPLC_33c5_1F1: 	dc.b $3
00025966 51F0                       	dc.b $51, $F0
00025968 11F6                       	dc.b $11, $F6
0002596A B1F8                       	dc.b $B1, $F8
0002596C 04                         DPLC_33c5_1F8: 	dc.b $4
0002596D 51DB                       	dc.b $51, $DB
0002596F 1204                       	dc.b $12, $4
00025971 B206                       	dc.b $B2, $6
00025973 01EF                       	dc.b $1, $EF
00025975 03                         DPLC_33c5_201: 	dc.b $3
00025976 51F0                       	dc.b $51, $F0
00025978 11F6                       	dc.b $11, $F6
0002597A B212                       	dc.b $B2, $12
0002597C 02                         DPLC_33c5_208: 	dc.b $2
0002597D 521E                       	dc.b $52, $1E
0002597F B224                       	dc.b $B2, $24
00025981 02                         DPLC_33c5_20D: 	dc.b $2
00025982 510D                       	dc.b $51, $D
00025984 B230                       	dc.b $B2, $30
00025986 02                         DPLC_33c5_212: 	dc.b $2
00025987 521E                       	dc.b $52, $1E
00025989 B23C                       	dc.b $B2, $3C
0002598B 02                         DPLC_33c5_217: 	dc.b $2
0002598C 510D                       	dc.b $51, $D
0002598E B248                       	dc.b $B2, $48
00025990 04                         DPLC_33c5_21C: 	dc.b $4
00025991 5254                       	dc.b $52, $54
00025993 125A                       	dc.b $12, $5A
00025995 B25C                       	dc.b $B2, $5C
00025997 0268                       	dc.b $2, $68
00025999 02                         DPLC_33c5_225: 	dc.b $2
0002599A 7269                       	dc.b $72, $69
0002599C B271                       	dc.b $B2, $71
0002599E 04                         DPLC_33c5_22A: 	dc.b $4
0002599F 5254                       	dc.b $52, $54
000259A1 127D                       	dc.b $12, $7D
000259A3 B27F                       	dc.b $B2, $7F
000259A5 0268                       	dc.b $2, $68
000259A7 02                         DPLC_33c5_233: 	dc.b $2
000259A8 7269                       	dc.b $72, $69
000259AA B28B                       	dc.b $B2, $8B
000259AC 01                         DPLC_33c5_238: 	dc.b $1
000259AD F297                       	dc.b $F2, $97
000259AF 01                         DPLC_33c5_23B: 	dc.b $1
000259B0 F2A7                       	dc.b $F2, $A7
000259B2 01                         DPLC_33c5_23E: 	dc.b $1
000259B3 F2B7                       	dc.b $F2, $B7
000259B5 01                         DPLC_33c5_241: 	dc.b $1
000259B6 F2C7                       	dc.b $F2, $C7
000259B8 01                         DPLC_33c5_244: 	dc.b $1
000259B9 F2D7                       	dc.b $F2, $D7
000259BB 02                         DPLC_33c5_247: 	dc.b $2
000259BC B2E7                       	dc.b $B2, $E7
000259BE 22F3                       	dc.b $22, $F3
000259C0 01                         DPLC_33c5_24C: 	dc.b $1
000259C1 F2F6                       	dc.b $F2, $F6
000259C3 02                         DPLC_33c5_24F: 	dc.b $2
000259C4 B306                       	dc.b $B3, $6
000259C6 2312                       	dc.b $23, $12
000259C8 01                         DPLC_33c5_254: 	dc.b $1
000259C9 F315                       	dc.b $F3, $15
000259CB 02                         DPLC_33c5_257: 	dc.b $2
000259CC 5325                       	dc.b $53, $25
000259CE B32B                       	dc.b $B3, $2B
000259D0 04                         DPLC_33c5_25C: 	dc.b $4
000259D1 5337                       	dc.b $53, $37
000259D3 733D                       	dc.b $73, $3D
000259D5 1345                       	dc.b $13, $45
000259D7 0347                       	dc.b $3, $47
000259D9 02                         DPLC_33c5_265: 	dc.b $2
000259DA D348                       	dc.b $D3, $48
000259DC 34EC                       	dc.b $34, $EC
000259DE 02                         DPLC_33c5_26A: 	dc.b $2
000259DF F528                       	dc.b $F5, $28
000259E1 0538                       	dc.b $5, $38
000259E3 02                         DPLC_33c5_26F: 	dc.b $2
000259E4 F539                       	dc.b $F5, $39
000259E6 0549                       	dc.b $5, $49
000259E8 02                         DPLC_33c5_274: 	dc.b $2
000259E9 E356                       	dc.b $E3, $56
000259EB 054A                       	dc.b $5, $4A
000259ED 01                         DPLC_33c5_279: 	dc.b $1
000259EE 8365                       	dc.b $83, $65
000259F0 03                         DPLC_33c5_27C: 	dc.b $3
000259F1 736E                       	dc.b $73, $6E
000259F3 0376                       	dc.b $3, $76
000259F5 3377                       	dc.b $33, $77
000259F7 02                         DPLC_33c5_283: 	dc.b $2
000259F8 E37B                       	dc.b $E3, $7B
000259FA 054A                       	dc.b $5, $4A
000259FC 01                         DPLC_33c5_288: 	dc.b $1
000259FD D561                       	dc.b $D5, $61
000259FF 04                         DPLC_33c5_28B: 	dc.b $4
00025A00 B399                       	dc.b $B3, $99
00025A02 33A5                       	dc.b $33, $A5
00025A04 03A9                       	dc.b $3, $A9
00025A06 03AA                       	dc.b $3, $AA
00025A08 04                         DPLC_33c5_294: 	dc.b $4
00025A09 B3AB                       	dc.b $B3, $AB
00025A0B 33B7                       	dc.b $33, $B7
00025A0D 03BB                       	dc.b $3, $BB
00025A0F 03BC                       	dc.b $3, $BC
00025A11 05                         DPLC_33c5_29D: 	dc.b $5
00025A12 83BD                       	dc.b $83, $BD
00025A14 13C6                       	dc.b $13, $C6
00025A16 53C8                       	dc.b $53, $C8
00025A18 13CE                       	dc.b $13, $CE
00025A1A 03D0                       	dc.b $3, $D0
00025A1C 05                         DPLC_33c5_2A8: 	dc.b $5
00025A1D 83D1                       	dc.b $83, $D1
00025A1F 13DA                       	dc.b $13, $DA
00025A21 53C8                       	dc.b $53, $C8
00025A23 13CE                       	dc.b $13, $CE
00025A25 03D0                       	dc.b $3, $D0
00025A27 02                         DPLC_33c5_2B3: 	dc.b $2
00025A28 83DC                       	dc.b $83, $DC
00025A2A 73E5                       	dc.b $73, $E5
00025A2C 03                         DPLC_33c5_2B8: 	dc.b $3
00025A2D 83ED                       	dc.b $83, $ED
00025A2F 23F6                       	dc.b $23, $F6
00025A31 13F9                       	dc.b $13, $F9
00025A33 02                         DPLC_33c5_2BF: 	dc.b $2
00025A34 83FB                       	dc.b $83, $FB
00025A36 7404                       	dc.b $74, $4
00025A38 03                         DPLC_33c5_2C4: 	dc.b $3
00025A39 83ED                       	dc.b $83, $ED
00025A3B 240C                       	dc.b $24, $C
00025A3D 140F                       	dc.b $14, $F
00025A3F 02                         DPLC_33c5_2CB: 	dc.b $2
00025A40 5411                       	dc.b $54, $11
00025A42 B417                       	dc.b $B4, $17
00025A44 03                         DPLC_33c5_2D0: 	dc.b $3
00025A45 8423                       	dc.b $84, $23
00025A47 342C                       	dc.b $34, $2C
00025A49 0430                       	dc.b $4, $30
00025A4B 03                         DPLC_33c5_2D7: 	dc.b $3
00025A4C 7431                       	dc.b $74, $31
00025A4E 1439                       	dc.b $14, $39
00025A50 B43B                       	dc.b $B4, $3B
00025A52 05                         DPLC_33c5_2DE: 	dc.b $5
00025A53 7447                       	dc.b $74, $47
00025A55 144F                       	dc.b $14, $4F
00025A57 5451                       	dc.b $54, $51
00025A59 3457                       	dc.b $34, $57
00025A5B 045B                       	dc.b $4, $5B
00025A5D 05                         DPLC_33c5_2E9: 	dc.b $5
00025A5E 745C                       	dc.b $74, $5C
00025A60 144F                       	dc.b $14, $4F
00025A62 5464                       	dc.b $54, $64
00025A64 3457                       	dc.b $34, $57
00025A66 045B                       	dc.b $4, $5B
00025A68 02                         DPLC_33c5_2F4: 	dc.b $2
00025A69 246A                       	dc.b $24, $6A
00025A6B F46D                       	dc.b $F4, $6D
00025A6D 03                         DPLC_33c5_2F9: 	dc.b $3
00025A6E 247D                       	dc.b $24, $7D
00025A70 B480                       	dc.b $B4, $80
00025A72 248C                       	dc.b $24, $8C
00025A74 01                         DPLC_33c5_300: 	dc.b $1
00025A75 B48F                       	dc.b $B4, $8F
00025A77 01                         DPLC_33c5_303: 	dc.b $1
00025A78 549B                       	dc.b $54, $9B
00025A7A 01                         DPLC_33c5_306: 	dc.b $1
00025A7B 14A1                       	dc.b $14, $A1
00025A7D 02                         DPLC_33c5_309: 	dc.b $2
00025A7E E356                       	dc.b $E3, $56
00025A80 054A                       	dc.b $5, $4A
00025A82 03                         DPLC_33c5_30E: 	dc.b $3
00025A83 736E                       	dc.b $73, $6E
00025A85 0376                       	dc.b $3, $76
00025A87 3377                       	dc.b $33, $77
00025A89 03                         DPLC_33c5_315: 	dc.b $3
00025A8A B4A3                       	dc.b $B4, $A3
00025A8C 14AF                       	dc.b $14, $AF
00025A8E 34B1                       	dc.b $34, $B1
00025A90 03                         DPLC_33c5_31C: 	dc.b $3
00025A91 54B5                       	dc.b $54, $B5
00025A93 B4BB                       	dc.b $B4, $BB
00025A95 1074                       	dc.b $10, $74
00025A97 02                         DPLC_33c5_323: 	dc.b $2
00025A98 F4C7                       	dc.b $F4, $C7
00025A9A 24D7                       	dc.b $24, $D7
00025A9C 02                         DPLC_33c5_328: 	dc.b $2
00025A9D F4DA                       	dc.b $F4, $DA
00025A9F 14EA                       	dc.b $14, $EA
00025AA1 02                         DPLC_33c5_32D: 	dc.b $2
00025AA2 F502                       	dc.b $F5, $2
00025AA4 2512                       	dc.b $25, $12
00025AA6 02                         DPLC_33c5_332: 	dc.b $2
00025AA7 F515                       	dc.b $F5, $15
00025AA9 2525                       	dc.b $25, $25
00025AAB 02                         DPLC_33c5_337: 	dc.b $2
00025AAC F54B                       	dc.b $F5, $4B
00025AAE 755B                       	dc.b $75, $5B
00025AB0 00                         DPLC_33c5_33C: 	dc.b $0
00025AB1 00                         DPLC_33c5_33D: 	dc.b $0
00025AB2 00                         DPLC_33c5_33E: 	dc.b $0
00025AB3 00                         DPLC_33c5_33F: 	dc.b $0
00025AB4 02                         DPLC_33c5_340: 	dc.b $2
00025AB5 F4DA                       	dc.b $F4, $DA
00025AB7 14EA                       	dc.b $14, $EA
00025AB9 00                         DPLC_33c5_345: 	dc.b $0
00025ABA 02                         DPLC_33c5_346: 	dc.b $2
00025ABB F4DA                       	dc.b $F4, $DA
00025ABD 14EA                       	dc.b $14, $EA
00025ABF 00                         DPLC_33c5_34B: 	dc.b $0
00025AC0 00                         DPLC_33c5_34C: 	dc.b $0
00025AC1 00                         DPLC_33c5_34D: 	dc.b $0
00025AC2 02                         DPLC_33c5_34E: 	dc.b $2
00025AC3 F4DA                       	dc.b $F4, $DA
00025AC5 14EA                       	dc.b $14, $EA
00025AC7 00                         DPLC_33c5_353: 	dc.b $0
00025AC8 02                         DPLC_33c5_354: 	dc.b $2
00025AC9 F4DA                       	dc.b $F4, $DA
00025ACB 14EA                       	dc.b $14, $EA
00025ACD 00                         DPLC_33c5_359: 	dc.b $0
00025ACE 00                         DPLC_33c5_35A: 	dc.b $0
00025ACF 00                         DPLC_33c5_35B: 	dc.b $0
00025AD0 02                         DPLC_33c5_35C: 	dc.b $2
00025AD1 F4DA                       	dc.b $F4, $DA
00025AD3 14EA                       	dc.b $14, $EA
00025AD5 00                         DPLC_33c5_361: 	dc.b $0
00025AD6 02                         DPLC_33c5_362: 	dc.b $2
00025AD7 F4DA                       	dc.b $F4, $DA
00025AD9 14EA                       	dc.b $14, $EA
00025ADB 00                         DPLC_33c5_367: 	dc.b $0
00025ADC                            	even
00025ADC                            	even
00025ADC                            
00025ADC                            ; ---------------------------------------------------------------------------
00025ADC                            ; Uncompressed graphics	- Sonic
00025ADC                            ; ---------------------------------------------------------------------------
00025ADC                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000308BC                            		even
000308BC                            ; ---------------------------------------------------------------------------
000308BC                            ; Compressed graphics - various
000308BC                            ; ---------------------------------------------------------------------------
000308BC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000309C0                            		even
000309C0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000309FA                            		even
000309FA                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030B90                            		even
00030B90                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030CD8                            		even
00030CD8                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030DE2                            		even
00030DE2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030E34                            		even
00030E34                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003107C                            		even
0003107C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00031202                            		even
00031202                            ; ---------------------------------------------------------------------------
00031202                            ; Sprite mappings - walls of the special stage
00031202                            ; ---------------------------------------------------------------------------
00031202                            Map_SSWalls:
00031202                            	include "_maps\SSwalls.asm"
00031202                            ; ---------------------------------------------------------------------------
00031202                            ; Sprite mappings - walls of the special stage
00031202                            ; ---------------------------------------------------------------------------
00031202 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031206 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003120A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003120E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00031212 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031216 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003121A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003121E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00031222 01                         byte_2C584:	dc.b 1
00031223 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031228 01                         byte_2C58A:	dc.b 1
00031229 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003122E 01                         byte_2C590:	dc.b 1
0003122F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031234 01                         byte_2C596:	dc.b 1
00031235 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003123A 01                         byte_2C59C:	dc.b 1
0003123B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031240 01                         byte_2C5A2:	dc.b 1
00031241 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031246 01                         byte_2C5A8:	dc.b 1
00031247 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003124C 01                         byte_2C5AE:	dc.b 1
0003124D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031252 01                         byte_2C5B4:	dc.b 1
00031253 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031258 01                         byte_2C5BA:	dc.b 1
00031259 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003125E 01                         byte_2C5C0:	dc.b 1
0003125F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00031264 01                         byte_2C5C6:	dc.b 1
00031265 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003126A 01                         byte_2C5CC:	dc.b 1
0003126B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00031270 01                         byte_2C5D2:	dc.b 1
00031271 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031276 01                         byte_2C5D8:	dc.b 1
00031277 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003127C 01                         byte_2C5DE:	dc.b 1
0003127D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00031282                            		even
00031282                            		even
00031282                            ; ---------------------------------------------------------------------------
00031282                            ; Compressed graphics - special stage
00031282                            ; ---------------------------------------------------------------------------
00031282                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031BBA                            		even
00031BBA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031D08                            		even
00031D08                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003319A                            		even
0003319A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003349A                            		even
0003349A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003398E                            		even
0003398E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033A7C                            		even
00033A7C                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033B4C                            		even
00033B4C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033C42                            		even
00033C42                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033CA0                            		even
00033CA0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033D32                            		even
00033D32                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033DF4                            		even
00033DF4                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033EC2                            		even
00033EC2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033F8E                            		even
00033F8E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034056                            		even
00034056                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00034120                            		even
00034120                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000341F0                            		even
000341F0                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000343E4                            		even
000343E4                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003454C                            		even
0003454C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000345FC                            		even
000345FC                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000346D6                            		even
000346D6                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003475A                            		even
0003475A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000348D8                            		even
000348D8                            ; ---------------------------------------------------------------------------
000348D8                            ; Compressed graphics - GHZ stuff
000348D8                            ; ---------------------------------------------------------------------------
000348D8                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034922                            		even
00034922                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034A3C                            		even
00034A3C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034B28                            		even
00034B28                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034B70                            		even
00034B70                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034D0E                            		even
00034D0E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034DCA                            		even
00034DCA                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034FDE                            		even
00034FDE                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003510A                            		even
0003510A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035238                            		even
00035238                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000352D6                            		even
000352D6                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035336                            		even
00035336                            ; ---------------------------------------------------------------------------
00035336                            ; Compressed graphics - LZ stuff
00035336                            ; ---------------------------------------------------------------------------
00035336                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003545A                            		even
0003545A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035C4E                            		even
00035C4E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035DCE                            		even
00035DCE                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035F38                            		even
00035F38                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003658E                            		even
0003658E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036644                            		even
00036644                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000366E6                            		even
000366E6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036842                            		even
00036842                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000368A6                            		even
000368A6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000369F8                            		even
000369F8                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036EDA                            		even
00036EDA                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003704A                            		even
0003704A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037302                            		even
00037302                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003743A                            		even
0003743A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037564                            		even
00037564                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037674                            		even
00037674                            ; ---------------------------------------------------------------------------
00037674                            ; Compressed graphics - MZ stuff
00037674                            ; ---------------------------------------------------------------------------
00037674                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037902                            		even
00037902                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000379C0                            		even
000379C0                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037A78                            		even
00037A78                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037ACC                            		even
00037ACC                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037D9E 00                         		even
00037D9E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000386B4                            		even
000386B4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038818                            		even
00038818                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000388A0                            		even
000388A0                            ; ---------------------------------------------------------------------------
000388A0                            ; Compressed graphics - SLZ stuff
000388A0                            ; ---------------------------------------------------------------------------
000388A0                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038ADC                            		even
00038ADC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038C22                            		even
00038C22                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038E66                            		even
00038E66                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038EC8                            		even
00038EC8                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038FAA                            		even
00038FAA                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003918C                            		even
0003918C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00039298                            		even
00039298                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003933C                            		even
0003933C                            ; ---------------------------------------------------------------------------
0003933C                            ; Compressed graphics - SYZ stuff
0003933C                            ; ---------------------------------------------------------------------------
0003933C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000394A6                            		even
000394A6                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039508                            		even
00039508                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000395EA                            		even
000395EA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039878                            		even
00039878                            ; ---------------------------------------------------------------------------
00039878                            ; Compressed graphics - SBZ stuff
00039878                            ; ---------------------------------------------------------------------------
00039878                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000398CC                            		even
000398CC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039B68                            		even
00039B68                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039D6C                            		even
00039D6C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039F0A                            		even
00039F0A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A23A                            		even
0003A23A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A418                            		even
0003A418                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A470                            		even
0003A470                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A63A 00                         		even
0003A63A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A738                            		even
0003A738                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A8C4                            		even
0003A8C4                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A914                            		even
0003A914                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A96C                            		even
0003A96C                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AA68                            		even
0003AA68                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AB7E                            		even
0003AB7E                            ; ---------------------------------------------------------------------------
0003AB7E                            ; Compressed graphics - enemies
0003AB7E                            ; ---------------------------------------------------------------------------
0003AB7E                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AFEC 00                         		even
0003AFEC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B196 00                         		even
0003B196                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B558 00                         		even
0003B558                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B740                            		even
0003B740                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B8F8 00                         		even
0003B8F8                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BA42                            		even
0003BA42                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BCCC                            		even
0003BCCC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C2F0                            		even
0003C2F0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C4E6                            		even
0003C4E6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CB04                            		even
0003CB04                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CF04 00                         		even
0003CF04                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D200                            		even
0003D200                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D448                            		even
0003D448                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D6E0                            		even
0003D6E0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D8BE                            		even
0003D8BE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DA4C                            		even
0003DA4C                            ; ---------------------------------------------------------------------------
0003DA4C                            ; Compressed graphics - various
0003DA4C                            ; ---------------------------------------------------------------------------
0003DA4C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DF7C                            		even
0003DF7C                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E072                            		even
0003E072                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E178                            		even
0003E178                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E26C                            		even
0003E26C                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E7B0                            		even
0003E7B0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EE16                            		even
0003EE16                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EEC6                            		even
0003EEC6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F058                            		even
0003F058                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F16C                            		even
0003F16C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F23E                            		even
0003F23E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F6BA                            		even
0003F6BA                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F77A                            		even
0003F77A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F8EE                            		even
0003F8EE                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FBF0                            		even
0003FBF0                            ; ---------------------------------------------------------------------------
0003FBF0                            ; Compressed graphics - continue screen
0003FBF0                            ; ---------------------------------------------------------------------------
0003FBF0                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FEA0                            		even
0003FEA0                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000400DA                            		even
000400DA                            ; ---------------------------------------------------------------------------
000400DA                            ; Compressed graphics - animals
000400DA                            ; ---------------------------------------------------------------------------
000400DA                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040232                            		even
00040232                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004038E                            		even
0004038E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004050A                            		even
0004050A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040626                            		even
00040626                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004075C                            		even
0004075C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040896                            		even
00040896                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000409F2                            		even
000409F2                            ; ---------------------------------------------------------------------------
000409F2                            ; Compressed graphics - primary patterns and block mappings
000409F2                            ; ---------------------------------------------------------------------------
000409F2                            Blk16_GHZ:	incbin	map16\ghz.bin
00041306                            		even
00041306                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042C14                            		even
00042C14                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043F94                            		even
00043F94                            Blk256_GHZ:	incbin	map256\ghz.bin
000463CE                            		even
000463CE                            Blk16_LZ:	incbin	map16\lz.bin
00046B08                            		even
00046B08                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048F0E                            		even
00048F0E                            Blk256_LZ:	incbin	map256\lz.bin
0004B88E                            		even
0004B88E                            Blk16_MZ:	incbin	map16\mz.bin
0004BFF6                            		even
0004BFF6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E932                            		even
0004E932                            Blk256_MZ:	incbin	map256\mz.bin
000500D6                            		even
000500D6                            Blk16_SLZ:	incbin	map16\slz.bin
000507A0                            		even
000507A0                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000526F4                            		even
000526F4                            Blk256_SLZ:	incbin	map256\slz.bin
00052D6E                            		even
00052D6E                            Blk16_SYZ:	incbin	map16\syz.bin
00053994                            		even
00053994                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057F26                            		even
00057F26                            Blk256_SYZ:	incbin	map256\syz.bin
00059F82                            		even
00059F82                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AECA                            		even
0005AECA                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D88E                            		even
0005D88E                            Blk256_SBZ:	incbin	map256\sbz.bin
00060384                            		even
00060384                            Blk16_BHZ:	incbin	map16\bhz.bin
00060D24                            		even
00060D24                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
00062384                            		even
00062384                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
0006372C                            		even
0006372C                            Blk256_BHZ:	incbin	map256\bhz.bin
0006583C                            		even
0006583C                            ; ---------------------------------------------------------------------------
0006583C                            ; Compressed graphics - bosses and ending sequence
0006583C                            ; ---------------------------------------------------------------------------
0006583C                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00066056 00                         		even
00066056                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
000666A4                            		even
000666A4                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
0006671E                            		even
0006671E                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066A08                            		even
00066A08                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006728C                            		even
0006728C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00067FE2 00                         		even
00067FE2                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006874A                            		even
0006874A                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00068CCA                            		even
00068CCA                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00068DEA                            		even
00068DEA                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00068FE8                            		even
00068FE8                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A1C6                            		even
0006A1C6                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006AB0A                            		even
0006AB0A                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006AEE0                            		even
0006AEE0                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B470                            		even
0006B470                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006B6F8                            		even
0006B6F8                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006BCE6 00                         		even
0006BCE6                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006BF6E                            		even
0006BF6E                            		incbin	misc\padding2.bin
0006C072                            		even
0006C072                            ; ---------------------------------------------------------------------------
0006C072                            ; Collision data
0006C072                            ; ---------------------------------------------------------------------------
0006C072                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C172                            		even
0006C172                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D172                            		even
0006D172                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E172                            		even
0006E172                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E32A 00                         		even
0006E32A                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E492                            		even
0006E492                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E622 00                         		even
0006E622                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006E816                            		even
0006E816                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EA1C                            		even
0006EA1C                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006ECBA                            		even
0006ECBA                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006EE54                            		even
0006EE54                            ; ---------------------------------------------------------------------------
0006EE54                            ; Special layouts
0006EE54                            ; ---------------------------------------------------------------------------
0006EE54                            SS_1:		incbin	sslayout\1.bin
0006F09C                            		even
0006F09C                            SS_2:		incbin	sslayout\2.bin
0006F454                            		even
0006F454                            SS_3:		incbin	sslayout\3.bin
0006F7B0                            		even
0006F7B0                            SS_4:		incbin	sslayout\4.bin
0006FC8A                            		even
0006FC8A                            SS_5:		incbin	sslayout\5.bin
0007013A                            		even
0007013A                            SS_6:		incbin	sslayout\6.bin
0007042C                            		even
0007042C                            ; ---------------------------------------------------------------------------
0007042C                            ; Animated uncompressed graphics
0007042C                            ; ---------------------------------------------------------------------------
0007042C                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0007062C                            		even
0007062C                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070A2C                            		even
00070A2C                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00070EAC                            		even
00070EAC                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000711AC                            		even
000711AC                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000717AC                            		even
000717AC                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071AAC                            		even
00071AAC                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0007252C                            		even
0007252C                            
0007252C                            ; ---------------------------------------------------------------------------
0007252C                            ; Level	layout index
0007252C                            ; ---------------------------------------------------------------------------
0007252C 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00072532 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00072538 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007253E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00072544 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007254A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00072550 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00072556 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007255C 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00072562 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00072568 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007256E 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00072574 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007257A 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072580 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072586 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007258C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00072592 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00072598 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007259E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000725A4 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000725AA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000725B0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000725B6 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000725BC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000725C2 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000725C8 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000725CE 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000725D4 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000725DA 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000725E0 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
000725E6 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000725EC                            
000725EC                            Level_GHZ1:	incbin	levels\ghz1.bin
000726DE                            		even
000726DE 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000726E2                            Level_GHZ2:	incbin	levels\ghz2.bin
000727AA                            		even
000727AA 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000727AE                            Level_GHZ3:	incbin	levels\ghz3.bin
000728D0                            		even
000728D0                            Level_GHZbg:	incbin	levels\ghzbg.bin
000728F2                            		even
000728F2 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000728F6 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000728FA                            
000728FA                            Level_LZ1:	incbin	levels\lz1.bin
000729FC                            		even
000729FC                            Level_LZbg:	incbin	levels\lzbg.bin
00072AFE                            		even
00072AFE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072B02                            Level_LZ2:	incbin	levels\lz2.bin
00072B9C                            		even
00072B9C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072BA0                            Level_LZ3:	incbin	levels\lz3.bin
00072CBA                            		even
00072CBA 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00072CBE                            Level_SBZ3:	incbin	levels\sbz3.bin
00072D78                            		even
00072D78 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00072D7C                            
00072D7C                            Level_MZ1:	incbin	levels\mz1.bin
00072E1A                            		even
00072E1A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00072E94                            		even
00072E94                            Level_MZ2:	incbin	levels\mz2.bin
00072F38                            		even
00072F38                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00072FCA                            		even
00072FCA 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00072FCE                            Level_MZ3:	incbin	levels\mz3.bin
000730B0                            		even
000730B0                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00073154 00                         		even
00073154 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00073158 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007315C                            
0007315C                            Level_SLZ1:	incbin	levels\slz1.bin
0007326E                            		even
0007326E                            Level_SLZbg:	incbin	levels\slzbg.bin
00073288                            		even
00073288                            Level_SLZ2:	incbin	levels\slz2.bin
00073378                            		even
00073378                            Level_SLZ3:	incbin	levels\slz3.bin
00073492                            		even
00073492 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00073496                            
00073496                            Level_SYZ1:	incbin	levels\syz1.bin
00073552 00                         		even
00073552                            Level_SYZbg:	incbin	levels\syzbg.bin
0007358C                            		even
0007358C 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00073590                            Level_SYZ2:	incbin	levels\syz2.bin
00073694                            		even
00073694 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00073698                            Level_SYZ3:	incbin	levels\syz3.bin
000737F2 00                         		even
000737F2 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000737F6 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000737FA                            
000737FA                            Level_SBZ1:	incbin	levels\sbz1.bin
0007391C                            		even
0007391C                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007395A                            		even
0007395A                            Level_SBZ2:	incbin	levels\sbz2.bin
00073A9C                            		even
00073A9C                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073C06                            		even
00073C06 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073C0A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073C0E                            Level_End:	incbin	levels\ending.bin
00073C3E 00                         		even
00073C3E 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073C42                            Level_BHZ1:	incbin	levels\bhz1.bin
00073D34                            		even
00073D34                            
00073D34                            Level_BHZ2:	incbin	levels\bhz2.bin
00073DFC                            		even
00073DFC                            
00073DFC                            Level_BHZ3:	incbin	levels\bhz3.bin
00073F1E                            		even
00073F1E                            Level_BHZbg:	incbin	levels\bhzbg.bin
00073F40                            		even
00073F40                            ; ---------------------------------------------------------------------------
00073F40                            ; Animated uncompressed giant ring graphics
00073F40                            ; ---------------------------------------------------------------------------
00073F40                            Art_BigRing:	incbin	artunc\bigring.bin
00074B80                            		even
00074B80                            
00074B80                            		incbin	misc\padding3.bin
00074C1C                            		even
00074C1C                            
00074C1C                            ; ---------------------------------------------------------------------------
00074C1C                            ; Sprite locations index
00074C1C                            ; ---------------------------------------------------------------------------
00074C1C 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C20 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C24 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C28 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C2C 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C30 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C34 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C38 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C3C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C40 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C44 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C48 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C4C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C50 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C54 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C58 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C5C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C60 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C64 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C68 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C6C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C70 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C74 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C78 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C7C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C80 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C84 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C88 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C8C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074C90 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00074C94 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00074C98 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074C9C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074CA0 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00074CA4 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00074CA8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074CAC 0000 0000                  	dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CB0 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CB4 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CB8 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CBC FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00074CC2                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007550E                            		even
0007550E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000757D8                            		even
000757D8                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000761A4                            		even
000761A4                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007654C                            		even
0007654C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076882                            		even
00076882                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00076D98                            		even
00076D98                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00077230                            		even
00077230                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00077262                            		even
00077262                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00077294                            		even
00077294                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000772C6                            		even
000772C6                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000772F8                            		even
000772F8                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00077342                            		even
00077342                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00077380                            		even
00077380                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000776EC                            		even
000776EC                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077B96                            		even
00077B96                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007810C                            		even
0007810C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00078136                            		even
00078136                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007859E                            		even
0007859E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078B80                            		even
00078B80                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000791F2                            		even
000791F2                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007975C                            		even
0007975C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00079D62                            		even
00079D62                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A4A0                            		even
0007A4A0                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AB7E                            		even
0007AB7E                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AB90                            		even
0007AB90                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007ABC2                            		even
0007ABC2                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007ABF4                            		even
0007ABF4                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007AC26                            		even
0007AC26                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007AC58                            		even
0007AC58                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AC8A                            		even
0007AC8A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007ACC2                            		even
0007ACC2                            ObjPos_End:	incbin	objpos\ending.bin
0007AE1E                            		even
0007AE1E                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B328                            		even
0007B328                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007B8E6                            		even
0007B8E6                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007BFA0                            		even
0007BFA0 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007BFA6                            ; ---------------------------------------------------------------------------
0007BFA6                            		incbin	misc\padding4.bin
0007C5D0                            		even
0007C5D0                            
0007C5D0 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007C5D4 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007C5D8 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007C5DC 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007C5E0 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007C5E4 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007C5E8                            ; ---------------------------------------------------------------------------
0007C5E8                            ; PSG instruments used in music
0007C5E8                            ; ---------------------------------------------------------------------------
0007C5E8 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007C5F4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007C600 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007C60C                            
0007C60C 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007C61C 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007C623                            
0007C623 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007C62A                            
0007C62A 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007C63A 80                                     dc.b    $80
0007C63B                            
0007C63B 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007C646                            
0007C646 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007C656 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007C666 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007C670                            
0007C670 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007C67F                            
0007C67F 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007C68F 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007C69B                            
0007C69B 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007C6AB 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007C6BB 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007C6C3                            
0007C6C3 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007C6D3 80                                     dc.b    $80
0007C6D4                            
0007C6D4 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007C6DC                            ; ---------------------------------------------------------------------------
0007C6DC                            ; Music	Pointers
0007C6DC                            ; ---------------------------------------------------------------------------
0007C6DC 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007C6E4 0000 0000 0000 0000        		dc.l Music83, Music84
0007C6EC 0000 0000 0000 0000        		dc.l Music85, Music86
0007C6F4 0000 0000 0000 0000        		dc.l Music87, Music88
0007C6FC 0000 0000 0000 0000        		dc.l Music89, Music8A
0007C704 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007C70C 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007C714 0000 0000 0000 0000        		dc.l Music8F, Music90
0007C71C 0000 0000 0000 0000        		dc.l Music91, Music92
0007C724 0000 0000 0000 0000        		dc.l Music93, Music94
0007C72C 0000 0000 0000 0000        		dc.l Music95, Music96
0007C734 0000 0000 0000 0000        		dc.l Music97, Music98
0007C73C 0000 0000 0000 0000        		dc.l Music99, Music9A
0007C744 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007C74C 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007C754 0000 0000                  		dc.l Music9F
0007C758                            ; ---------------------------------------------------------------------------
0007C758                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007C758                            ; ---------------------------------------------------------------------------
0007C758 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007C768 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007C778 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007C788 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007C798 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007C7A8 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007C7B8 9090 9090                  		dc.b $90, $90, $90, $90
0007C7BC                            
0007C7BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C7BC                            
0007C7BC                            
0007C7BC                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007C7BC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007C7C4 4E71                       		nop	
0007C7C6 4E71                       		nop	
0007C7C8 4E71                       		nop	
0007C7CA                            
0007C7CA                            loc_71B5A:
0007C7CA 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007C7D2 66F6                       		bne.s	loc_71B5A
0007C7D4                            
0007C7D4 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007C7DC 6700                       		beq.s	loc_71B82
0007C7DE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C7E6 4E71                       		nop	
0007C7E8 4E71                       		nop	
0007C7EA 4E71                       		nop	
0007C7EC 4E71                       		nop	
0007C7EE 4E71                       		nop	
0007C7F0 60CA                       		bra.s	sub_71B4C
0007C7F2                            ; ===========================================================================
0007C7F2                            
0007C7F2                            loc_71B82:
0007C7F2 4DF9 00FF F000             		lea	($FFF000).l,a6
0007C7F8 422E 000E                  		clr.b	$E(a6)
0007C7FC 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007C800 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007C804 532E 0001                  		subq.b	#1,1(a6)
0007C808 6600                       		bne.s	loc_71B9E
0007C80A 4EBA 0000                  		jsr	sub_7260C(pc)
0007C80E                            
0007C80E                            loc_71B9E:
0007C80E 102E 0004                  		move.b	4(a6),d0
0007C812 6700                       		beq.s	loc_71BA8
0007C814 4EBA 0000                  		jsr	sub_72504(pc)
0007C818                            
0007C818                            loc_71BA8:
0007C818 4A2E 0024                  		tst.b	$24(a6)
0007C81C 6700                       		beq.s	loc_71BB2
0007C81E 4EBA 0000                  		jsr	sub_7267C(pc)
0007C822                            
0007C822                            loc_71BB2:
0007C822 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007C826 6700                       		beq.s	loc_71BBC	; if not, branch
0007C828 4EBA 0000                  		jsr	Sound_Play(pc)
0007C82C                            
0007C82C                            loc_71BBC:
0007C82C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007C832 6700                       		beq.s	loc_71BC8
0007C834 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007C838                            
0007C838                            loc_71BC8:
0007C838 4BEE 0040                  		lea	$40(a6),a5
0007C83C 4A15                       		tst.b	(a5)
0007C83E 6A00                       		bpl.s	loc_71BD4
0007C840 4EBA 0000                  		jsr	sub_71C4E(pc)
0007C844                            
0007C844                            loc_71BD4:
0007C844 422E 0008                  		clr.b	8(a6)
0007C848 7E05                       		moveq	#5,d7
0007C84A                            
0007C84A                            loc_71BDA:
0007C84A DAFC 0030                  		adda.w	#$30,a5
0007C84E 4A15                       		tst.b	(a5)
0007C850 6A00                       		bpl.s	loc_71BE6
0007C852 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C856                            
0007C856                            loc_71BE6:
0007C856 51CF FFF2                  		dbf	d7,loc_71BDA
0007C85A                            
0007C85A 7E02                       		moveq	#2,d7
0007C85C                            
0007C85C                            loc_71BEC:
0007C85C DAFC 0030                  		adda.w	#$30,a5
0007C860 4A15                       		tst.b	(a5)
0007C862 6A00                       		bpl.s	loc_71BF8
0007C864 4EBA 0000                  		jsr	sub_72850(pc)
0007C868                            
0007C868                            loc_71BF8:
0007C868 51CF FFF2                  		dbf	d7,loc_71BEC
0007C86C                            
0007C86C 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007C872 7E02                       		moveq	#2,d7
0007C874                            
0007C874                            loc_71C04:
0007C874 DAFC 0030                  		adda.w	#$30,a5
0007C878 4A15                       		tst.b	(a5)
0007C87A 6A00                       		bpl.s	loc_71C10
0007C87C 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C880                            
0007C880                            loc_71C10:
0007C880 51CF FFF2                  		dbf	d7,loc_71C04
0007C884                            
0007C884 7E02                       		moveq	#2,d7
0007C886                            
0007C886                            loc_71C16:
0007C886 DAFC 0030                  		adda.w	#$30,a5
0007C88A 4A15                       		tst.b	(a5)
0007C88C 6A00                       		bpl.s	loc_71C22
0007C88E 4EBA 0000                  		jsr	sub_72850(pc)
0007C892                            
0007C892                            loc_71C22:
0007C892 51CF FFF2                  		dbf	d7,loc_71C16
0007C896 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007C89C DAFC 0030                  		adda.w	#$30,a5
0007C8A0 4A15                       		tst.b	(a5)
0007C8A2 6A00                       		bpl.s	loc_71C38
0007C8A4 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C8A8                            
0007C8A8                            loc_71C38:
0007C8A8 DAFC 0030                  		adda.w	#$30,a5
0007C8AC 4A15                       		tst.b	(a5)
0007C8AE 6A00                       		bpl.s	loc_71C44
0007C8B0 4EBA 0000                  		jsr	sub_72850(pc)
0007C8B4                            
0007C8B4                            loc_71C44:
0007C8B4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C8BC 4E75                       		rts	
0007C8BE                            ; End of function sub_71B4C
0007C8BE                            
0007C8BE                            
0007C8BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C8BE                            
0007C8BE                            
0007C8BE                            sub_71C4E:				; XREF: sub_71B4C
0007C8BE 532D 000E                  		subq.b	#1,$E(a5)
0007C8C2 6600                       		bne.s	locret_71CAA
0007C8C4 1D7C 0080 0008             		move.b	#$80,8(a6)
0007C8CA 286D 0004                  		movea.l	4(a5),a4
0007C8CE                            
0007C8CE                            loc_71C5E:
0007C8CE 7A00                       		moveq	#0,d5
0007C8D0 1A1C                       		move.b	(a4)+,d5
0007C8D2 0C05 00E0                  		cmpi.b	#-$20,d5
0007C8D6 6500                       		bcs.s	loc_71C6E
0007C8D8 4EBA 0000                  		jsr	sub_72A5A(pc)
0007C8DC 60F0                       		bra.s	loc_71C5E
0007C8DE                            ; ===========================================================================
0007C8DE                            
0007C8DE                            loc_71C6E:
0007C8DE 4A05                       		tst.b	d5
0007C8E0 6A00                       		bpl.s	loc_71C84
0007C8E2 1B45 0010                  		move.b	d5,$10(a5)
0007C8E6 1A1C                       		move.b	(a4)+,d5
0007C8E8 6A00                       		bpl.s	loc_71C84
0007C8EA 534C                       		subq.w	#1,a4
0007C8EC 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007C8F2 6000                       		bra.s	loc_71C88
0007C8F4                            ; ===========================================================================
0007C8F4                            
0007C8F4                            loc_71C84:
0007C8F4 4EBA 0000                  		jsr	sub_71D40(pc)
0007C8F8                            
0007C8F8                            loc_71C88:
0007C8F8 2B4C 0004                  		move.l	a4,4(a5)
0007C8FC 0815 0002                  		btst	#2,(a5)
0007C900 6600                       		bne.s	locret_71CAA
0007C902 7000                       		moveq	#0,d0
0007C904 102D 0010                  		move.b	$10(a5),d0
0007C908 0C00 0080                  		cmpi.b	#$80,d0
0007C90C 6700                       		beq.s	locret_71CAA
0007C90E 0800 0003                  		btst	#3,d0
0007C912 6600                       		bne.s	loc_71CAC
0007C914 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007C91A                            
0007C91A                            locret_71CAA:
0007C91A 4E75                       		rts	
0007C91C                            ; ===========================================================================
0007C91C                            
0007C91C                            loc_71CAC:
0007C91C 0400 0088                  		subi.b	#$88,d0
0007C920 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007C924 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007C92A 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007C932 4E75                       		rts	
0007C934                            ; End of function sub_71C4E
0007C934                            
0007C934                            ; ===========================================================================
0007C934 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007C93A                            
0007C93A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C93A                            
0007C93A                            
0007C93A                            sub_71CCA:				; XREF: sub_71B4C
0007C93A 532D 000E                  		subq.b	#1,$E(a5)
0007C93E 6600                       		bne.s	loc_71CE0
0007C940 0895 0004                  		bclr	#4,(a5)
0007C944 4EBA 0000                  		jsr	sub_71CEC(pc)
0007C948 4EBA 0000                  		jsr	sub_71E18(pc)
0007C94C 6000 0000                  		bra.w	loc_726E2
0007C950                            ; ===========================================================================
0007C950                            
0007C950                            loc_71CE0:
0007C950 4EBA 0000                  		jsr	sub_71D9E(pc)
0007C954 4EBA 0000                  		jsr	sub_71DC6(pc)
0007C958 6000 0000                  		bra.w	loc_71E24
0007C95C                            ; End of function sub_71CCA
0007C95C                            
0007C95C                            
0007C95C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C95C                            
0007C95C                            
0007C95C                            sub_71CEC:				; XREF: sub_71CCA
0007C95C 286D 0004                  		movea.l	4(a5),a4
0007C960 0895 0001                  		bclr	#1,(a5)
0007C964                            
0007C964                            loc_71CF4:
0007C964 7A00                       		moveq	#0,d5
0007C966 1A1C                       		move.b	(a4)+,d5
0007C968 0C05 00E0                  		cmpi.b	#-$20,d5
0007C96C 6500                       		bcs.s	loc_71D04
0007C96E 4EBA 0000                  		jsr	sub_72A5A(pc)
0007C972 60F0                       		bra.s	loc_71CF4
0007C974                            ; ===========================================================================
0007C974                            
0007C974                            loc_71D04:
0007C974 4EBA 0000                  		jsr	sub_726FE(pc)
0007C978 4A05                       		tst.b	d5
0007C97A 6A00                       		bpl.s	loc_71D1A
0007C97C 4EBA 0000                  		jsr	sub_71D22(pc)
0007C980 1A1C                       		move.b	(a4)+,d5
0007C982 6A00                       		bpl.s	loc_71D1A
0007C984 534C                       		subq.w	#1,a4
0007C986 6000 0000                  		bra.w	sub_71D60
0007C98A                            ; ===========================================================================
0007C98A                            
0007C98A                            loc_71D1A:
0007C98A 4EBA 0000                  		jsr	sub_71D40(pc)
0007C98E 6000 0000                  		bra.w	sub_71D60
0007C992                            ; End of function sub_71CEC
0007C992                            
0007C992                            
0007C992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C992                            
0007C992                            
0007C992                            sub_71D22:				; XREF: sub_71CEC
0007C992 0405 0080                  		subi.b	#$80,d5
0007C996 6700                       		beq.s	loc_71D58
0007C998 DA2D 0008                  		add.b	8(a5),d5
0007C99C 0245 007F                  		andi.w	#$7F,d5
0007C9A0 E34D                       		lsl.w	#1,d5
0007C9A2 41FA 0000                  		lea	word_72790(pc),a0
0007C9A6 3C30 5000                  		move.w	(a0,d5.w),d6
0007C9AA 3B46 0010                  		move.w	d6,$10(a5)
0007C9AE 4E75                       		rts	
0007C9B0                            ; End of function sub_71D22
0007C9B0                            
0007C9B0                            
0007C9B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C9B0                            
0007C9B0                            
0007C9B0                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007C9B0 1005                       		move.b	d5,d0
0007C9B2 122D 0002                  		move.b	2(a5),d1
0007C9B6                            
0007C9B6                            loc_71D46:
0007C9B6 5301                       		subq.b	#1,d1
0007C9B8 6700                       		beq.s	loc_71D4E
0007C9BA D005                       		add.b	d5,d0
0007C9BC 60F8                       		bra.s	loc_71D46
0007C9BE                            ; ===========================================================================
0007C9BE                            
0007C9BE                            loc_71D4E:
0007C9BE 1B40 000F                  		move.b	d0,$F(a5)
0007C9C2 1B40 000E                  		move.b	d0,$E(a5)
0007C9C6 4E75                       		rts	
0007C9C8                            ; End of function sub_71D40
0007C9C8                            
0007C9C8                            ; ===========================================================================
0007C9C8                            
0007C9C8                            loc_71D58:				; XREF: sub_71D22
0007C9C8 08D5 0001                  		bset	#1,(a5)
0007C9CC 426D 0010                  		clr.w	$10(a5)
0007C9D0                            
0007C9D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C9D0                            
0007C9D0                            
0007C9D0                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007C9D0 2B4C 0004                  		move.l	a4,4(a5)
0007C9D4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007C9DA 0815 0004                  		btst	#4,(a5)
0007C9DE 6600                       		bne.s	locret_71D9C
0007C9E0 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007C9E6 422D 000C                  		clr.b	$C(a5)
0007C9EA 0815 0003                  		btst	#3,(a5)
0007C9EE 6700                       		beq.s	locret_71D9C
0007C9F0 206D 0014                  		movea.l	$14(a5),a0
0007C9F4 1B58 0018                  		move.b	(a0)+,$18(a5)
0007C9F8 1B58 0019                  		move.b	(a0)+,$19(a5)
0007C9FC 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CA00 1018                       		move.b	(a0)+,d0
0007CA02 E208                       		lsr.b	#1,d0
0007CA04 1B40 001B                  		move.b	d0,$1B(a5)
0007CA08 426D 001C                  		clr.w	$1C(a5)
0007CA0C                            
0007CA0C                            locret_71D9C:
0007CA0C 4E75                       		rts	
0007CA0E                            ; End of function sub_71D60
0007CA0E                            
0007CA0E                            
0007CA0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA0E                            
0007CA0E                            
0007CA0E                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CA0E 4A2D 0012                  		tst.b	$12(a5)
0007CA12 6700                       		beq.s	locret_71DC4
0007CA14 532D 0012                  		subq.b	#1,$12(a5)
0007CA18 6600                       		bne.s	locret_71DC4
0007CA1A 08D5 0001                  		bset	#1,(a5)
0007CA1E 4A2D 0001                  		tst.b	1(a5)
0007CA22 6B00 0000                  		bmi.w	loc_71DBE
0007CA26 4EBA 0000                  		jsr	sub_726FE(pc)
0007CA2A 584F                       		addq.w	#4,sp
0007CA2C 4E75                       		rts	
0007CA2E                            ; ===========================================================================
0007CA2E                            
0007CA2E                            loc_71DBE:
0007CA2E 4EBA 0000                  		jsr	sub_729A0(pc)
0007CA32 584F                       		addq.w	#4,sp
0007CA34                            
0007CA34                            locret_71DC4:
0007CA34 4E75                       		rts	
0007CA36                            ; End of function sub_71D9E
0007CA36                            
0007CA36                            
0007CA36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA36                            
0007CA36                            
0007CA36                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CA36 584F                       		addq.w	#4,sp
0007CA38 0815 0003                  		btst	#3,(a5)
0007CA3C 6700                       		beq.s	locret_71E16
0007CA3E 4A2D 0018                  		tst.b	$18(a5)
0007CA42 6700                       		beq.s	loc_71DDA
0007CA44 532D 0018                  		subq.b	#1,$18(a5)
0007CA48 4E75                       		rts	
0007CA4A                            ; ===========================================================================
0007CA4A                            
0007CA4A                            loc_71DDA:
0007CA4A 532D 0019                  		subq.b	#1,$19(a5)
0007CA4E 6700                       		beq.s	loc_71DE2
0007CA50 4E75                       		rts	
0007CA52                            ; ===========================================================================
0007CA52                            
0007CA52                            loc_71DE2:
0007CA52 206D 0014                  		movea.l	$14(a5),a0
0007CA56 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CA5C 4A2D 001B                  		tst.b	$1B(a5)
0007CA60 6600                       		bne.s	loc_71DFE
0007CA62 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CA68 442D 001A                  		neg.b	$1A(a5)
0007CA6C 4E75                       		rts	
0007CA6E                            ; ===========================================================================
0007CA6E                            
0007CA6E                            loc_71DFE:
0007CA6E 532D 001B                  		subq.b	#1,$1B(a5)
0007CA72 1C2D 001A                  		move.b	$1A(a5),d6
0007CA76 4886                       		ext.w	d6
0007CA78 DC6D 001C                  		add.w	$1C(a5),d6
0007CA7C 3B46 001C                  		move.w	d6,$1C(a5)
0007CA80 DC6D 0010                  		add.w	$10(a5),d6
0007CA84 594F                       		subq.w	#4,sp
0007CA86                            
0007CA86                            locret_71E16:
0007CA86 4E75                       		rts	
0007CA88                            ; End of function sub_71DC6
0007CA88                            
0007CA88                            
0007CA88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA88                            
0007CA88                            
0007CA88                            sub_71E18:				; XREF: sub_71CCA
0007CA88 0815 0001                  		btst	#1,(a5)
0007CA8C 6600                       		bne.s	locret_71E48
0007CA8E 3C2D 0010                  		move.w	$10(a5),d6
0007CA92 6700                       		beq.s	loc_71E4A
0007CA94                            
0007CA94                            loc_71E24:				; XREF: sub_71CCA
0007CA94 102D 001E                  		move.b	$1E(a5),d0
0007CA98 4880                       		ext.w	d0
0007CA9A DC40                       		add.w	d0,d6
0007CA9C 0815 0002                  		btst	#2,(a5)
0007CAA0 6600                       		bne.s	locret_71E48
0007CAA2 3206                       		move.w	d6,d1
0007CAA4 E049                       		lsr.w	#8,d1
0007CAA6 103C 00A4                  		move.b	#-$5C,d0
0007CAAA 4EBA 0000                  		jsr	sub_72722(pc)
0007CAAE 1206                       		move.b	d6,d1
0007CAB0 103C 00A0                  		move.b	#-$60,d0
0007CAB4 4EBA 0000                  		jsr	sub_72722(pc)
0007CAB8                            
0007CAB8                            locret_71E48:
0007CAB8 4E75                       		rts	
0007CABA                            ; ===========================================================================
0007CABA                            
0007CABA                            loc_71E4A:
0007CABA 08D5 0001                  		bset	#1,(a5)
0007CABE 4E75                       		rts	
0007CAC0                            ; End of function sub_71E18
0007CAC0                            
0007CAC0                            ; ===========================================================================
0007CAC0                            
0007CAC0                            loc_71E50:				; XREF: sub_71B4C
0007CAC0 6B00                       		bmi.s	loc_71E94
0007CAC2 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CAC8 6700 0000                  		beq.w	loc_71EFE
0007CACC 1D7C 0002 0003             		move.b	#2,3(a6)
0007CAD2 7602                       		moveq	#2,d3
0007CAD4 103C 00B4                  		move.b	#-$4C,d0
0007CAD8 7200                       		moveq	#0,d1
0007CADA                            
0007CADA                            loc_71E6A:
0007CADA 4EBA 0000                  		jsr	sub_7272E(pc)
0007CADE 4EBA 0000                  		jsr	sub_72764(pc)
0007CAE2 5200                       		addq.b	#1,d0
0007CAE4 51CB FFF4                  		dbf	d3,loc_71E6A
0007CAE8                            
0007CAE8 7602                       		moveq	#2,d3
0007CAEA 7028                       		moveq	#$28,d0
0007CAEC                            
0007CAEC                            loc_71E7C:
0007CAEC 1203                       		move.b	d3,d1
0007CAEE 4EBA 0000                  		jsr	sub_7272E(pc)
0007CAF2 5801                       		addq.b	#4,d1
0007CAF4 4EBA 0000                  		jsr	sub_7272E(pc)
0007CAF8 51CB FFF2                  		dbf	d3,loc_71E7C
0007CAFC                            
0007CAFC 4EBA 0000                  		jsr	sub_729B6(pc)
0007CB00 6000 FDB2                  		bra.w	loc_71C44
0007CB04                            ; ===========================================================================
0007CB04                            
0007CB04                            loc_71E94:				; XREF: loc_71E50
0007CB04 422E 0003                  		clr.b	3(a6)
0007CB08 7630                       		moveq	#$30,d3
0007CB0A 4BEE 0040                  		lea	$40(a6),a5
0007CB0E 7806                       		moveq	#6,d4
0007CB10                            
0007CB10                            loc_71EA0:
0007CB10 0815 0007                  		btst	#7,(a5)
0007CB14 6700                       		beq.s	loc_71EB8
0007CB16 0815 0002                  		btst	#2,(a5)
0007CB1A 6600                       		bne.s	loc_71EB8
0007CB1C 103C 00B4                  		move.b	#-$4C,d0
0007CB20 122D 000A                  		move.b	$A(a5),d1
0007CB24 4EBA 0000                  		jsr	sub_72722(pc)
0007CB28                            
0007CB28                            loc_71EB8:
0007CB28 DAC3                       		adda.w	d3,a5
0007CB2A 51CC FFE4                  		dbf	d4,loc_71EA0
0007CB2E                            
0007CB2E 4BEE 0220                  		lea	$220(a6),a5
0007CB32 7802                       		moveq	#2,d4
0007CB34                            
0007CB34                            loc_71EC4:
0007CB34 0815 0007                  		btst	#7,(a5)
0007CB38 6700                       		beq.s	loc_71EDC
0007CB3A 0815 0002                  		btst	#2,(a5)
0007CB3E 6600                       		bne.s	loc_71EDC
0007CB40 103C 00B4                  		move.b	#-$4C,d0
0007CB44 122D 000A                  		move.b	$A(a5),d1
0007CB48 4EBA 0000                  		jsr	sub_72722(pc)
0007CB4C                            
0007CB4C                            loc_71EDC:
0007CB4C DAC3                       		adda.w	d3,a5
0007CB4E 51CC FFE4                  		dbf	d4,loc_71EC4
0007CB52                            
0007CB52 4BEE 0340                  		lea	$340(a6),a5
0007CB56 0815 0007                  		btst	#7,(a5)
0007CB5A 6700                       		beq.s	loc_71EFE
0007CB5C 0815 0002                  		btst	#2,(a5)
0007CB60 6600                       		bne.s	loc_71EFE
0007CB62 103C 00B4                  		move.b	#-$4C,d0
0007CB66 122D 000A                  		move.b	$A(a5),d1
0007CB6A 4EBA 0000                  		jsr	sub_72722(pc)
0007CB6E                            
0007CB6E                            loc_71EFE:
0007CB6E 6000 FD44                  		bra.w	loc_71C44
0007CB72                            
0007CB72                            ; ---------------------------------------------------------------------------
0007CB72                            ; Subroutine to	play a sound or	music track
0007CB72                            ; ---------------------------------------------------------------------------
0007CB72                            
0007CB72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB72                            
0007CB72                            
0007CB72                            Sound_Play:				; XREF: sub_71B4C
0007CB72 2079 0007 C5D0             		movea.l	(Go_SoundTypes).l,a0
0007CB78 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CB7C 1616                       		move.b	0(a6),d3
0007CB7E 7802                       		moveq	#2,d4
0007CB80                            
0007CB80                            loc_71F12:
0007CB80 1011                       		move.b	(a1),d0		; move track number to d0
0007CB82 1200                       		move.b	d0,d1
0007CB84 4219                       		clr.b	(a1)+
0007CB86 0400 0081                  		subi.b	#$81,d0
0007CB8A 6500                       		bcs.s	loc_71F3E
0007CB8C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CB92 6700                       		beq.s	loc_71F2C
0007CB94 1D41 000A                  		move.b	d1,$A(a6)
0007CB98 6000                       		bra.s	loc_71F3E
0007CB9A                            ; ===========================================================================
0007CB9A                            
0007CB9A                            loc_71F2C:
0007CB9A 0240 007F                  		andi.w	#$7F,d0
0007CB9E 1430 0000                  		move.b	(a0,d0.w),d2
0007CBA2 B403                       		cmp.b	d3,d2
0007CBA4 6500                       		bcs.s	loc_71F3E
0007CBA6 1602                       		move.b	d2,d3
0007CBA8 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CBAC                            
0007CBAC                            loc_71F3E:
0007CBAC 51CC FFD2                  		dbf	d4,loc_71F12
0007CBB0                            
0007CBB0 4A03                       		tst.b	d3
0007CBB2 6B00                       		bmi.s	locret_71F4A
0007CBB4 1C83                       		move.b	d3,0(a6)
0007CBB6                            
0007CBB6                            locret_71F4A:
0007CBB6 4E75                       		rts	
0007CBB8                            ; End of function Sound_Play
0007CBB8                            
0007CBB8                            
0007CBB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBB8                            
0007CBB8                            
0007CBB8                            Sound_ChkValue:				; XREF: sub_71B4C
0007CBB8 7E00                       		moveq	#0,d7
0007CBBA 1E2E 0009                  		move.b	9(a6),d7
0007CBBE 6700 0000                  		beq.w	Sound_E4
0007CBC2 6A00                       		bpl.s	locret_71F8C
0007CBC4 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007CBCA 0C07 009F                  		cmpi.b	#$9F,d7
0007CBCE 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007CBD2 0C07 00A0                  		cmpi.b	#$A0,d7
0007CBD6 6500 0000                  		bcs.w	locret_71F8C
0007CBDA 0C07 00CF                  		cmpi.b	#$CF,d7
0007CBDE 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007CBE2 0C07 00D0                  		cmpi.b	#$D0,d7
0007CBE6 6500 0000                  		bcs.w	locret_71F8C
0007CBEA 0C07 00E0                  		cmpi.b	#$E0,d7
0007CBEE 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007CBF2 0C07 00E5                  		cmpi.b	#$E5,d7
0007CBF6 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007CBF8                            
0007CBF8                            locret_71F8C:
0007CBF8 4E75                       		rts	
0007CBFA                            ; ===========================================================================
0007CBFA                            
0007CBFA                            Sound_E0toE5				; XREF: Sound_ChkValue
0007CBFA 0407 00E0                  		subi.b	#$E0,d7
0007CBFE E54F                       		lsl.w	#2,d7
0007CC00 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007CC04                            ; ===========================================================================
0007CC04                            
0007CC04                            Sound_ExIndex:
0007CC04 6000 0000                  		bra.w	Sound_E0
0007CC08                            ; ===========================================================================
0007CC08 6000 0000                  		bra.w	Sound_E1
0007CC0C                            ; ===========================================================================
0007CC0C 6000 0000                  		bra.w	Sound_E2
0007CC10                            ; ===========================================================================
0007CC10 6000 0000                  		bra.w	Sound_E3
0007CC14                            ; ===========================================================================
0007CC14 6000 0000                  		bra.w	Sound_E4
0007CC18                            ; ===========================================================================
0007CC18 6000 0000                  		bra.w	Sound_E5
0007CC1C                            ; ===========================================================================
0007CC1C                            ; ---------------------------------------------------------------------------
0007CC1C                            ; Play "Say-gaa" PCM sound
0007CC1C                            ; ---------------------------------------------------------------------------
0007CC1C                            
0007CC1C                            Sound_E1:				  
0007CC1C 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CC22 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007CC28 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CC30                            PlayPCM_Loop:	  
0007CC30 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CC36 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007CC3A 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007CC3E 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CC40 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007CC42 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007CC46 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007CC4C 4EB8 142A                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007CC50 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007CC56 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007CC58 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007CC5A                            return_PlayPCM: 
0007CC5A 584F                       		addq.w	#4,sp 
0007CC5C 4E75                       		rts
0007CC5E                            		
0007CC5E                            ; ---------------------------------------------------------------------------
0007CC5E                            ; Play you are an idiot pcm sound
0007CC5E                            ; since the sfx already crashes the game forever load it here :V
0007CC5E                            ; ---------------------------------------------------------------------------
0007CC5E                            
0007CC5E                            Sound_E5: 
0007CC5E 4EB8 14FA                  		jsr	ClearScreen
0007CC62                            		;control port on a5
0007CC62 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007CC68 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007CC6E 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007CC72 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007CC76 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007CC7A                            		
0007CC7A 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007CC7E                            		
0007CC7E 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007CC84 41F9 0002 4496             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007CC8A 4EB8 1676                  		jsr	NemDec
0007CC8E 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CC94 41F9 0002 4438             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007CC9A 303C 0000                  		move.w	#0,d0
0007CC9E 4EB8 1954                  		jsr	EniDec
0007CCA2 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CCA8 203C 4304 0003             		move.l	#$43040003,d0
0007CCAE 7223                       		moveq	#35,d1
0007CCB0 740D                       		moveq	#13,d2
0007CCB2 4EB8 1656                  		jsr	ShowVDPGraphics
0007CCB6 7014                       		moveq	#20,d0
0007CCB8 4EB8 231A                  		jsr	PalLoad2	; load pallet
0007CCBC                            		
0007CCBC                            Sound_E5_StartPCM:
0007CCBC 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CCC2 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
0007CCC8 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CCD0                            PlayPCM_LoopE5:	  
0007CCD0                            
0007CCD0 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CCD6                            		
0007CCD6 5278 FE24                  		addq.w	#1,($FFFFFE24).w
0007CCDA                            		
0007CCDA 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007CCDE 0200 000F                  		andi.b	#$F,d0
0007CCE2 6700                       		beq.s	SfxE5SwapPalette
0007CCE4                            		
0007CCE4 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007CCE8 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007CCEC 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CCEE 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007CCF0 60DE                       		bra.s	PlayPCM_LoopE5
0007CCF2                            		
0007CCF2                            SfxE5SwapPalette:
0007CCF2                            		
0007CCF2 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007CCF8                            		
0007CCF8                            		
0007CCF8 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007CCFE 6700                       		beq.s	@not_black
0007CD00 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007CD06 6000                       		bra.s	@merge
0007CD08                            	@not_black:
0007CD08 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007CD0E                            	@merge:
0007CD0E 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007CD12 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007CD16 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
0007CD1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007CD20                            		
0007CD20 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007CD24 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007CD28 60A6                       		bra.s	PlayPCM_LoopE5
0007CD2A                            		
0007CD2A                            ; ===========================================================================
0007CD2A                            ; ---------------------------------------------------------------------------
0007CD2A                            ; Play music track $81-$9F
0007CD2A                            ; ---------------------------------------------------------------------------
0007CD2A                            
0007CD2A                            Sound_81to9F:				; XREF: Sound_ChkValue
0007CD2A 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007CD2E 6600                       		bne.s	loc_72024	; if not, branch
0007CD30 4A2E 0027                  		tst.b	$27(a6)
0007CD34 6600 0000                  		bne.w	loc_721B6
0007CD38 4BEE 0040                  		lea	$40(a6),a5
0007CD3C 7009                       		moveq	#9,d0
0007CD3E                            
0007CD3E                            loc_71FE6:
0007CD3E 0895 0002                  		bclr	#2,(a5)
0007CD42 DAFC 0030                  		adda.w	#$30,a5
0007CD46 51C8 FFF6                  		dbf	d0,loc_71FE6
0007CD4A                            
0007CD4A 4BEE 0220                  		lea	$220(a6),a5
0007CD4E 7005                       		moveq	#5,d0
0007CD50                            
0007CD50                            loc_71FF8:
0007CD50 0895 0007                  		bclr	#7,(a5)
0007CD54 DAFC 0030                  		adda.w	#$30,a5
0007CD58 51C8 FFF6                  		dbf	d0,loc_71FF8
0007CD5C 4216                       		clr.b	0(a6)
0007CD5E 204E                       		movea.l	a6,a0
0007CD60 43EE 03A0                  		lea	$3A0(a6),a1
0007CD64 303C 0087                  		move.w	#$87,d0
0007CD68                            
0007CD68                            loc_72012:
0007CD68 22D8                       		move.l	(a0)+,(a1)+
0007CD6A 51C8 FFFC                  		dbf	d0,loc_72012
0007CD6E                            
0007CD6E 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007CD74 4216                       		clr.b	0(a6)
0007CD76 6000                       		bra.s	loc_7202C
0007CD78                            ; ===========================================================================
0007CD78                            
0007CD78                            loc_72024:
0007CD78 422E 0027                  		clr.b	$27(a6)
0007CD7C 422E 0026                  		clr.b	$26(a6)
0007CD80                            
0007CD80                            loc_7202C:
0007CD80 4EBA 0000                  		jsr	sub_725CA(pc)
0007CD84 2879 0007 C5E0             		movea.l	(off_719A0).l,a4
0007CD8A 0407 0081                  		subi.b	#$81,d7
0007CD8E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007CD94 2879 0007 C5D8             		movea.l	(Go_MusicIndex).l,a4
0007CD9A E54F                       		lsl.w	#2,d7
0007CD9C 2874 7000                  		movea.l	(a4,d7.w),a4
0007CDA0 7000                       		moveq	#0,d0
0007CDA2 3014                       		move.w	(a4),d0
0007CDA4 D08C                       		add.l	a4,d0
0007CDA6 2D40 0018                  		move.l	d0,$18(a6)
0007CDAA 102C 0005                  		move.b	5(a4),d0
0007CDAE 1D40 0028                  		move.b	d0,$28(a6)
0007CDB2 4A2E 002A                  		tst.b	$2A(a6)
0007CDB6 6700                       		beq.s	loc_72068
0007CDB8 102E 0029                  		move.b	$29(a6),d0
0007CDBC                            
0007CDBC                            loc_72068:
0007CDBC 1D40 0002                  		move.b	d0,2(a6)
0007CDC0 1D40 0001                  		move.b	d0,1(a6)
0007CDC4 7200                       		moveq	#0,d1
0007CDC6 264C                       		movea.l	a4,a3
0007CDC8 5C4C                       		addq.w	#6,a4
0007CDCA 7E00                       		moveq	#0,d7
0007CDCC 1E2B 0002                  		move.b	2(a3),d7
0007CDD0 6700 0000                  		beq.w	loc_72114
0007CDD4 5307                       		subq.b	#1,d7
0007CDD6 123C 00C0                  		move.b	#-$40,d1
0007CDDA 182B 0004                  		move.b	4(a3),d4
0007CDDE 7C30                       		moveq	#$30,d6
0007CDE0 1A3C 0001                  		move.b	#1,d5
0007CDE4 43EE 0040                  		lea	$40(a6),a1
0007CDE8 45FA 0000                  		lea	byte_721BA(pc),a2
0007CDEC                            
0007CDEC                            loc_72098:
0007CDEC 08D1 0007                  		bset	#7,(a1)
0007CDF0 135A 0001                  		move.b	(a2)+,1(a1)
0007CDF4 1344 0002                  		move.b	d4,2(a1)
0007CDF8 1346 000D                  		move.b	d6,$D(a1)
0007CDFC 1341 000A                  		move.b	d1,$A(a1)
0007CE00 1345 000E                  		move.b	d5,$E(a1)
0007CE04 7000                       		moveq	#0,d0
0007CE06 301C                       		move.w	(a4)+,d0
0007CE08 D08B                       		add.l	a3,d0
0007CE0A 2340 0004                  		move.l	d0,4(a1)
0007CE0E 335C 0008                  		move.w	(a4)+,8(a1)
0007CE12 D2C6                       		adda.w	d6,a1
0007CE14 51CF FFD6                  		dbf	d7,loc_72098
0007CE18 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007CE1E 6600                       		bne.s	loc_720D8
0007CE20 702B                       		moveq	#$2B,d0
0007CE22 7200                       		moveq	#0,d1
0007CE24 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE28 6000 0000                  		bra.w	loc_72114
0007CE2C                            ; ===========================================================================
0007CE2C                            
0007CE2C                            loc_720D8:
0007CE2C 7028                       		moveq	#$28,d0
0007CE2E 7206                       		moveq	#6,d1
0007CE30 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE34 103C 0042                  		move.b	#$42,d0
0007CE38 727F                       		moveq	#$7F,d1
0007CE3A 4EBA 0000                  		jsr	sub_72764(pc)
0007CE3E 103C 004A                  		move.b	#$4A,d0
0007CE42 727F                       		moveq	#$7F,d1
0007CE44 4EBA 0000                  		jsr	sub_72764(pc)
0007CE48 103C 0046                  		move.b	#$46,d0
0007CE4C 727F                       		moveq	#$7F,d1
0007CE4E 4EBA 0000                  		jsr	sub_72764(pc)
0007CE52 103C 004E                  		move.b	#$4E,d0
0007CE56 727F                       		moveq	#$7F,d1
0007CE58 4EBA 0000                  		jsr	sub_72764(pc)
0007CE5C 103C 00B6                  		move.b	#-$4A,d0
0007CE60 123C 00C0                  		move.b	#-$40,d1
0007CE64 4EBA 0000                  		jsr	sub_72764(pc)
0007CE68                            
0007CE68                            loc_72114:
0007CE68 7E00                       		moveq	#0,d7
0007CE6A 1E2B 0003                  		move.b	3(a3),d7
0007CE6E 6700                       		beq.s	loc_72154
0007CE70 5307                       		subq.b	#1,d7
0007CE72 43EE 0190                  		lea	$190(a6),a1
0007CE76 45FA 0000                  		lea	byte_721C2(pc),a2
0007CE7A                            
0007CE7A                            loc_72126:
0007CE7A 08D1 0007                  		bset	#7,(a1)
0007CE7E 135A 0001                  		move.b	(a2)+,1(a1)
0007CE82 1344 0002                  		move.b	d4,2(a1)
0007CE86 1346 000D                  		move.b	d6,$D(a1)
0007CE8A 1345 000E                  		move.b	d5,$E(a1)
0007CE8E 7000                       		moveq	#0,d0
0007CE90 301C                       		move.w	(a4)+,d0
0007CE92 D08B                       		add.l	a3,d0
0007CE94 2340 0004                  		move.l	d0,4(a1)
0007CE98 335C 0008                  		move.w	(a4)+,8(a1)
0007CE9C 101C                       		move.b	(a4)+,d0
0007CE9E 135C 000B                  		move.b	(a4)+,$B(a1)
0007CEA2 D2C6                       		adda.w	d6,a1
0007CEA4 51CF FFD4                  		dbf	d7,loc_72126
0007CEA8                            
0007CEA8                            loc_72154:
0007CEA8 43EE 0220                  		lea	$220(a6),a1
0007CEAC 7E05                       		moveq	#5,d7
0007CEAE                            
0007CEAE                            loc_7215A:
0007CEAE 4A11                       		tst.b	(a1)
0007CEB0 6A00 0000                  		bpl.w	loc_7217C
0007CEB4 7000                       		moveq	#0,d0
0007CEB6 1029 0001                  		move.b	1(a1),d0
0007CEBA 6B00                       		bmi.s	loc_7216E
0007CEBC 5500                       		subq.b	#2,d0
0007CEBE E508                       		lsl.b	#2,d0
0007CEC0 6000                       		bra.s	loc_72170
0007CEC2                            ; ===========================================================================
0007CEC2                            
0007CEC2                            loc_7216E:
0007CEC2 E608                       		lsr.b	#3,d0
0007CEC4                            
0007CEC4                            loc_72170:
0007CEC4 41FA 0000                  		lea	dword_722CC(pc),a0
0007CEC8 2070 0000                  		movea.l	(a0,d0.w),a0
0007CECC 08D0 0002                  		bset	#2,(a0)
0007CED0                            
0007CED0                            loc_7217C:
0007CED0 D2C6                       		adda.w	d6,a1
0007CED2 51CF FFDA                  		dbf	d7,loc_7215A
0007CED6                            
0007CED6 4A6E 0340                  		tst.w	$340(a6)
0007CEDA 6A00                       		bpl.s	loc_7218E
0007CEDC 08EE 0002 0100             		bset	#2,$100(a6)
0007CEE2                            
0007CEE2                            loc_7218E:
0007CEE2 4A6E 0370                  		tst.w	$370(a6)
0007CEE6 6A00                       		bpl.s	loc_7219A
0007CEE8 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007CEEE                            
0007CEEE                            loc_7219A:
0007CEEE 4BEE 0070                  		lea	$70(a6),a5
0007CEF2 7805                       		moveq	#5,d4
0007CEF4                            
0007CEF4                            loc_721A0:
0007CEF4 4EBA 0000                  		jsr	sub_726FE(pc)
0007CEF8 DAC6                       		adda.w	d6,a5
0007CEFA 51CC FFF8                  		dbf	d4,loc_721A0
0007CEFE 7802                       		moveq	#2,d4
0007CF00                            
0007CF00                            loc_721AC:
0007CF00 4EBA 0000                  		jsr	sub_729A0(pc)
0007CF04 DAC6                       		adda.w	d6,a5
0007CF06 51CC FFF8                  		dbf	d4,loc_721AC
0007CF0A                            
0007CF0A                            loc_721B6:
0007CF0A 584F                       		addq.w	#4,sp
0007CF0C 4E75                       		rts	
0007CF0E                            ; ===========================================================================
0007CF0E 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007CF16                            		even
0007CF16 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007CF1A                            		even
0007CF1A                            ; ===========================================================================
0007CF1A                            ; ---------------------------------------------------------------------------
0007CF1A                            ; Play normal sound effect
0007CF1A                            ; ---------------------------------------------------------------------------
0007CF1A                            
0007CF1A                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007CF1A 4A2E 0027                  		tst.b	$27(a6)
0007CF1E 6600 0000                  		bne.w	loc_722C6
0007CF22 4A2E 0004                  		tst.b	4(a6)
0007CF26 6600 0000                  		bne.w	loc_722C6
0007CF2A 4A2E 0024                  		tst.b	$24(a6)
0007CF2E 6600 0000                  		bne.w	loc_722C6
0007CF32 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007CF36 6600                       		bne.s	Sound_notB5	; if not, branch
0007CF38 4A2E 002B                  		tst.b	$2B(a6)
0007CF3C 6600                       		bne.s	loc_721EE
0007CF3E 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007CF42                            
0007CF42                            loc_721EE:
0007CF42 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007CF48                            
0007CF48                            Sound_notB5:
0007CF48 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007CF4C 6600                       		bne.s	Sound_notA7	; if not, branch
0007CF4E 4A2E 002C                  		tst.b	$2C(a6)
0007CF52 6600 0000                  		bne.w	locret_722C4
0007CF56 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007CF5C                            
0007CF5C                            Sound_notA7:
0007CF5C 2079 0007 C5DC             		movea.l	(Go_SoundIndex).l,a0
0007CF62 0407 00A0                  		subi.b	#$A0,d7
0007CF66 E54F                       		lsl.w	#2,d7
0007CF68 2670 7000                  		movea.l	(a0,d7.w),a3
0007CF6C 224B                       		movea.l	a3,a1
0007CF6E 7200                       		moveq	#0,d1
0007CF70 3219                       		move.w	(a1)+,d1
0007CF72 D28B                       		add.l	a3,d1
0007CF74 1A19                       		move.b	(a1)+,d5
0007CF76 1E19                       		move.b	(a1)+,d7
0007CF78 5307                       		subq.b	#1,d7
0007CF7A 7C30                       		moveq	#$30,d6
0007CF7C                            
0007CF7C                            loc_72228:
0007CF7C 7600                       		moveq	#0,d3
0007CF7E 1629 0001                  		move.b	1(a1),d3
0007CF82 1803                       		move.b	d3,d4
0007CF84 6B00                       		bmi.s	loc_72244
0007CF86 5543                       		subq.w	#2,d3
0007CF88 E54B                       		lsl.w	#2,d3
0007CF8A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007CF8E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007CF92 08D5 0002                  		bset	#2,(a5)
0007CF96 6000                       		bra.s	loc_7226E
0007CF98                            ; ===========================================================================
0007CF98                            
0007CF98                            loc_72244:
0007CF98 E64B                       		lsr.w	#3,d3
0007CF9A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007CF9E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007CFA2 08D5 0002                  		bset	#2,(a5)
0007CFA6 0C04 00C0                  		cmpi.b	#$C0,d4
0007CFAA 6600                       		bne.s	loc_7226E
0007CFAC 1004                       		move.b	d4,d0
0007CFAE 0000 001F                  		ori.b	#$1F,d0
0007CFB2 13C0 00C0 0011             		move.b	d0,($C00011).l
0007CFB8 0840 0005                  		bchg	#5,d0
0007CFBC 13C0 00C0 0011             		move.b	d0,($C00011).l
0007CFC2                            
0007CFC2                            loc_7226E:
0007CFC2 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007CFC6 244D                       		movea.l	a5,a2
0007CFC8 700B                       		moveq	#$B,d0
0007CFCA                            
0007CFCA                            loc_72276:
0007CFCA 429A                       		clr.l	(a2)+
0007CFCC 51C8 FFFC                  		dbf	d0,loc_72276
0007CFD0                            
0007CFD0 3A99                       		move.w	(a1)+,(a5)
0007CFD2 1B45 0002                  		move.b	d5,2(a5)
0007CFD6 7000                       		moveq	#0,d0
0007CFD8 3019                       		move.w	(a1)+,d0
0007CFDA D08B                       		add.l	a3,d0
0007CFDC 2B40 0004                  		move.l	d0,4(a5)
0007CFE0 3B59 0008                  		move.w	(a1)+,8(a5)
0007CFE4 1B7C 0001 000E             		move.b	#1,$E(a5)
0007CFEA 1B46 000D                  		move.b	d6,$D(a5)
0007CFEE 4A04                       		tst.b	d4
0007CFF0 6B00                       		bmi.s	loc_722A8
0007CFF2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007CFF8 2B41 0020                  		move.l	d1,$20(a5)
0007CFFC                            
0007CFFC                            loc_722A8:
0007CFFC 51CF FF7E                  		dbf	d7,loc_72228
0007D000                            
0007D000 4A2E 0250                  		tst.b	$250(a6)
0007D004 6A00                       		bpl.s	loc_722B8
0007D006 08EE 0002 0340             		bset	#2,$340(a6)
0007D00C                            
0007D00C                            loc_722B8:
0007D00C 4A2E 0310                  		tst.b	$310(a6)
0007D010 6A00                       		bpl.s	locret_722C4
0007D012 08EE 0002 0370             		bset	#2,$370(a6)
0007D018                            
0007D018                            locret_722C4:
0007D018 4E75                       		rts	
0007D01A                            ; ===========================================================================
0007D01A                            
0007D01A                            loc_722C6:
0007D01A 4216                       		clr.b	0(a6)
0007D01C 4E75                       		rts	
0007D01E                            ; ===========================================================================
0007D01E 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D022 0000 0000                  		dc.l 0
0007D026 00FF F100                  		dc.l $FFF100
0007D02A 00FF F130                  		dc.l $FFF130
0007D02E 00FF F190                  		dc.l $FFF190
0007D032 00FF F1C0                  		dc.l $FFF1C0
0007D036 00FF F1F0                  		dc.l $FFF1F0
0007D03A 00FF F1F0                  		dc.l $FFF1F0
0007D03E 00FF F220                  dword_722EC:	dc.l $FFF220
0007D042 0000 0000                  		dc.l 0
0007D046 00FF F250                  		dc.l $FFF250
0007D04A 00FF F280                  		dc.l $FFF280
0007D04E 00FF F2B0                  		dc.l $FFF2B0
0007D052 00FF F2E0                  		dc.l $FFF2E0
0007D056 00FF F310                  		dc.l $FFF310
0007D05A 00FF F310                  		dc.l $FFF310
0007D05E                            ; ===========================================================================
0007D05E                            ; ---------------------------------------------------------------------------
0007D05E                            ; Play GHZ waterfall sound
0007D05E                            ; ---------------------------------------------------------------------------
0007D05E                            
0007D05E                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D05E 4A2E 0027                  		tst.b	$27(a6)
0007D062 6600 0000                  		bne.w	locret_723C6
0007D066 4A2E 0004                  		tst.b	4(a6)
0007D06A 6600 0000                  		bne.w	locret_723C6
0007D06E 4A2E 0024                  		tst.b	$24(a6)
0007D072 6600 0000                  		bne.w	locret_723C6
0007D076 2079 0007 C5D4             		movea.l	(Go_SoundD0).l,a0
0007D07C 0407 00D0                  		subi.b	#$D0,d7
0007D080 E54F                       		lsl.w	#2,d7
0007D082 2670 7000                  		movea.l	(a0,d7.w),a3
0007D086 224B                       		movea.l	a3,a1
0007D088 7000                       		moveq	#0,d0
0007D08A 3019                       		move.w	(a1)+,d0
0007D08C D08B                       		add.l	a3,d0
0007D08E 2D40 0020                  		move.l	d0,$20(a6)
0007D092 1A19                       		move.b	(a1)+,d5
0007D094 1E19                       		move.b	(a1)+,d7
0007D096 5307                       		subq.b	#1,d7
0007D098 7C30                       		moveq	#$30,d6
0007D09A                            
0007D09A                            loc_72348:
0007D09A 1829 0001                  		move.b	1(a1),d4
0007D09E 6B00                       		bmi.s	loc_7235A
0007D0A0 08EE 0002 0100             		bset	#2,$100(a6)
0007D0A6 4BEE 0340                  		lea	$340(a6),a5
0007D0AA 6000                       		bra.s	loc_72364
0007D0AC                            ; ===========================================================================
0007D0AC                            
0007D0AC                            loc_7235A:
0007D0AC 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D0B2 4BEE 0370                  		lea	$370(a6),a5
0007D0B6                            
0007D0B6                            loc_72364:
0007D0B6 244D                       		movea.l	a5,a2
0007D0B8 700B                       		moveq	#$B,d0
0007D0BA                            
0007D0BA                            loc_72368:
0007D0BA 429A                       		clr.l	(a2)+
0007D0BC 51C8 FFFC                  		dbf	d0,loc_72368
0007D0C0                            
0007D0C0 3A99                       		move.w	(a1)+,(a5)
0007D0C2 1B45 0002                  		move.b	d5,2(a5)
0007D0C6 7000                       		moveq	#0,d0
0007D0C8 3019                       		move.w	(a1)+,d0
0007D0CA D08B                       		add.l	a3,d0
0007D0CC 2B40 0004                  		move.l	d0,4(a5)
0007D0D0 3B59 0008                  		move.w	(a1)+,8(a5)
0007D0D4 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D0DA 1B46 000D                  		move.b	d6,$D(a5)
0007D0DE 4A04                       		tst.b	d4
0007D0E0 6B00                       		bmi.s	loc_72396
0007D0E2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D0E8                            
0007D0E8                            loc_72396:
0007D0E8 51CF FFB0                  		dbf	d7,loc_72348
0007D0EC                            
0007D0EC 4A2E 0250                  		tst.b	$250(a6)
0007D0F0 6A00                       		bpl.s	loc_723A6
0007D0F2 08EE 0002 0340             		bset	#2,$340(a6)
0007D0F8                            
0007D0F8                            loc_723A6:
0007D0F8 4A2E 0310                  		tst.b	$310(a6)
0007D0FC 6A00                       		bpl.s	locret_723C6
0007D0FE 08EE 0002 0370             		bset	#2,$370(a6)
0007D104 0004 001F                  		ori.b	#$1F,d4
0007D108 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D10E 0844 0005                  		bchg	#5,d4
0007D112 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D118                            
0007D118                            locret_723C6:
0007D118 4E75                       		rts	
0007D11A                            ; End of function Sound_ChkValue
0007D11A                            
0007D11A                            ; ===========================================================================
0007D11A 00FF F100                  		dc.l $FFF100
0007D11E 00FF F1F0                  		dc.l $FFF1F0
0007D122 00FF F250                  		dc.l $FFF250
0007D126 00FF F310                  		dc.l $FFF310
0007D12A 00FF F340                  		dc.l $FFF340
0007D12E 00FF F370                  		dc.l $FFF370
0007D132                            
0007D132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D132                            
0007D132                            
0007D132                            Snd_FadeOut1:				; XREF: Sound_E0
0007D132 4216                       		clr.b	0(a6)
0007D134 4BEE 0220                  		lea	$220(a6),a5
0007D138 7E05                       		moveq	#5,d7
0007D13A                            
0007D13A                            loc_723EA:
0007D13A 4A15                       		tst.b	(a5)
0007D13C 6A00 0000                  		bpl.w	loc_72472
0007D140 0895 0007                  		bclr	#7,(a5)
0007D144 7600                       		moveq	#0,d3
0007D146 162D 0001                  		move.b	1(a5),d3
0007D14A 6B00                       		bmi.s	loc_7243C
0007D14C 4EBA 0000                  		jsr	sub_726FE(pc)
0007D150 0C03 0004                  		cmpi.b	#4,d3
0007D154 6600                       		bne.s	loc_72416
0007D156 4A2E 0340                  		tst.b	$340(a6)
0007D15A 6A00                       		bpl.s	loc_72416
0007D15C 4BEE 0340                  		lea	$340(a6),a5
0007D160 226E 0020                  		movea.l	$20(a6),a1
0007D164 6000                       		bra.s	loc_72428
0007D166                            ; ===========================================================================
0007D166                            
0007D166                            loc_72416:
0007D166 5503                       		subq.b	#2,d3
0007D168 E50B                       		lsl.b	#2,d3
0007D16A 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D16E 264D                       		movea.l	a5,a3
0007D170 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D174 226E 0018                  		movea.l	$18(a6),a1
0007D178                            
0007D178                            loc_72428:
0007D178 0895 0002                  		bclr	#2,(a5)
0007D17C 08D5 0001                  		bset	#1,(a5)
0007D180 102D 000B                  		move.b	$B(a5),d0
0007D184 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D188 2A4B                       		movea.l	a3,a5
0007D18A 6000                       		bra.s	loc_72472
0007D18C                            ; ===========================================================================
0007D18C                            
0007D18C                            loc_7243C:
0007D18C 4EBA 0000                  		jsr	sub_729A0(pc)
0007D190 41EE 0370                  		lea	$370(a6),a0
0007D194 0C03 00E0                  		cmpi.b	#$E0,d3
0007D198 6700                       		beq.s	loc_7245A
0007D19A 0C03 00C0                  		cmpi.b	#$C0,d3
0007D19E 6700                       		beq.s	loc_7245A
0007D1A0 E60B                       		lsr.b	#3,d3
0007D1A2 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D1A6 2070 3000                  		movea.l	(a0,d3.w),a0
0007D1AA                            
0007D1AA                            loc_7245A:
0007D1AA 0890 0002                  		bclr	#2,(a0)
0007D1AE 08D0 0001                  		bset	#1,(a0)
0007D1B2 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D1B8 6600                       		bne.s	loc_72472
0007D1BA 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D1C2                            
0007D1C2                            loc_72472:
0007D1C2 DAFC 0030                  		adda.w	#$30,a5
0007D1C6 51CF FF72                  		dbf	d7,loc_723EA
0007D1CA                            
0007D1CA 4E75                       		rts	
0007D1CC                            ; End of function Snd_FadeOut1
0007D1CC                            
0007D1CC                            
0007D1CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D1CC                            
0007D1CC                            
0007D1CC                            Snd_FadeOut2:				; XREF: Sound_E0
0007D1CC 4BEE 0340                  		lea	$340(a6),a5
0007D1D0 4A15                       		tst.b	(a5)
0007D1D2 6A00                       		bpl.s	loc_724AE
0007D1D4 0895 0007                  		bclr	#7,(a5)
0007D1D8 0815 0002                  		btst	#2,(a5)
0007D1DC 6600                       		bne.s	loc_724AE
0007D1DE 4EBA 0000                  		jsr	loc_7270A(pc)
0007D1E2 4BEE 0100                  		lea	$100(a6),a5
0007D1E6 0895 0002                  		bclr	#2,(a5)
0007D1EA 08D5 0001                  		bset	#1,(a5)
0007D1EE 4A15                       		tst.b	(a5)
0007D1F0 6A00                       		bpl.s	loc_724AE
0007D1F2 226E 0018                  		movea.l	$18(a6),a1
0007D1F6 102D 000B                  		move.b	$B(a5),d0
0007D1FA 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D1FE                            
0007D1FE                            loc_724AE:
0007D1FE 4BEE 0370                  		lea	$370(a6),a5
0007D202 4A15                       		tst.b	(a5)
0007D204 6A00                       		bpl.s	locret_724E4
0007D206 0895 0007                  		bclr	#7,(a5)
0007D20A 0815 0002                  		btst	#2,(a5)
0007D20E 6600                       		bne.s	locret_724E4
0007D210 4EBA 0000                  		jsr	loc_729A6(pc)
0007D214 4BEE 01F0                  		lea	$1F0(a6),a5
0007D218 0895 0002                  		bclr	#2,(a5)
0007D21C 08D5 0001                  		bset	#1,(a5)
0007D220 4A15                       		tst.b	(a5)
0007D222 6A00                       		bpl.s	locret_724E4
0007D224 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D22A 6600                       		bne.s	locret_724E4
0007D22C 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D234                            
0007D234                            locret_724E4:
0007D234 4E75                       		rts	
0007D236                            ; End of function Snd_FadeOut2
0007D236                            
0007D236                            ; ===========================================================================
0007D236                            ; ---------------------------------------------------------------------------
0007D236                            ; Fade out music
0007D236                            ; ---------------------------------------------------------------------------
0007D236                            
0007D236                            Sound_E0:				; XREF: Sound_ExIndex
0007D236 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D23A 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D23E 1D7C 0003 0006             		move.b	#3,6(a6)
0007D244 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D24A 422E 0040                  		clr.b	$40(a6)
0007D24E 422E 002A                  		clr.b	$2A(a6)
0007D252 4E75                       		rts	
0007D254                            
0007D254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D254                            
0007D254                            
0007D254                            sub_72504:				; XREF: sub_71B4C
0007D254 102E 0006                  		move.b	6(a6),d0
0007D258 6700                       		beq.s	loc_72510
0007D25A 532E 0006                  		subq.b	#1,6(a6)
0007D25E 4E75                       		rts	
0007D260                            ; ===========================================================================
0007D260                            
0007D260                            loc_72510:
0007D260 532E 0004                  		subq.b	#1,4(a6)
0007D264 6700 0000                  		beq.w	Sound_E4
0007D268 1D7C 0003 0006             		move.b	#3,6(a6)
0007D26E 4BEE 0070                  		lea	$70(a6),a5
0007D272 7E05                       		moveq	#5,d7
0007D274                            
0007D274                            loc_72524:
0007D274 4A15                       		tst.b	(a5)
0007D276 6A00                       		bpl.s	loc_72538
0007D278 522D 0009                  		addq.b	#1,9(a5)
0007D27C 6A00                       		bpl.s	loc_72534
0007D27E 0895 0007                  		bclr	#7,(a5)
0007D282 6000                       		bra.s	loc_72538
0007D284                            ; ===========================================================================
0007D284                            
0007D284                            loc_72534:
0007D284 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D288                            
0007D288                            loc_72538:
0007D288 DAFC 0030                  		adda.w	#$30,a5
0007D28C 51CF FFE6                  		dbf	d7,loc_72524
0007D290                            
0007D290 7E02                       		moveq	#2,d7
0007D292                            
0007D292                            loc_72542:
0007D292 4A15                       		tst.b	(a5)
0007D294 6A00                       		bpl.s	loc_72560
0007D296 522D 0009                  		addq.b	#1,9(a5)
0007D29A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D2A0 6500                       		bcs.s	loc_72558
0007D2A2 0895 0007                  		bclr	#7,(a5)
0007D2A6 6000                       		bra.s	loc_72560
0007D2A8                            ; ===========================================================================
0007D2A8                            
0007D2A8                            loc_72558:
0007D2A8 1C2D 0009                  		move.b	9(a5),d6
0007D2AC 4EBA 0000                  		jsr	sub_7296A(pc)
0007D2B0                            
0007D2B0                            loc_72560:
0007D2B0 DAFC 0030                  		adda.w	#$30,a5
0007D2B4 51CF FFDC                  		dbf	d7,loc_72542
0007D2B8                            
0007D2B8 4E75                       		rts	
0007D2BA                            ; End of function sub_72504
0007D2BA                            
0007D2BA                            
0007D2BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D2BA                            
0007D2BA                            
0007D2BA                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D2BA 7602                       		moveq	#2,d3
0007D2BC 7028                       		moveq	#$28,d0
0007D2BE                            
0007D2BE                            loc_7256E:
0007D2BE 1203                       		move.b	d3,d1
0007D2C0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2C4 5801                       		addq.b	#4,d1
0007D2C6 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2CA 51CB FFF2                  		dbf	d3,loc_7256E
0007D2CE                            
0007D2CE 7040                       		moveq	#$40,d0
0007D2D0 727F                       		moveq	#$7F,d1
0007D2D2 7802                       		moveq	#2,d4
0007D2D4                            
0007D2D4                            loc_72584:
0007D2D4 7603                       		moveq	#3,d3
0007D2D6                            
0007D2D6                            loc_72586:
0007D2D6 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2DA 4EBA 0000                  		jsr	sub_72764(pc)
0007D2DE 5840                       		addq.w	#4,d0
0007D2E0 51CB FFF4                  		dbf	d3,loc_72586
0007D2E4                            
0007D2E4 0400 000F                  		subi.b	#$F,d0
0007D2E8 51CC FFEA                  		dbf	d4,loc_72584
0007D2EC                            
0007D2EC 4E75                       		rts	
0007D2EE                            ; End of function sub_7256A
0007D2EE                            
0007D2EE                            ; ===========================================================================
0007D2EE                            ; ---------------------------------------------------------------------------
0007D2EE                            ; Stop music
0007D2EE                            ; ---------------------------------------------------------------------------
0007D2EE                            
0007D2EE                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D2EE 702B                       		moveq	#$2B,d0
0007D2F0 123C 0080                  		move.b	#$80,d1
0007D2F4 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2F8 7027                       		moveq	#$27,d0
0007D2FA 7200                       		moveq	#0,d1
0007D2FC 4EBA 0000                  		jsr	sub_7272E(pc)
0007D300 204E                       		movea.l	a6,a0
0007D302 303C 00E3                  		move.w	#$E3,d0
0007D306                            
0007D306                            loc_725B6:
0007D306 4298                       		clr.l	(a0)+
0007D308 51C8 FFFC                  		dbf	d0,loc_725B6
0007D30C                            
0007D30C 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D312 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D316 6000 0000                  		bra.w	sub_729B6
0007D31A                            
0007D31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D31A                            
0007D31A                            
0007D31A                            sub_725CA:				; XREF: Sound_ChkValue
0007D31A 204E                       		movea.l	a6,a0
0007D31C 1216                       		move.b	0(a6),d1
0007D31E 142E 0027                  		move.b	$27(a6),d2
0007D322 162E 002A                  		move.b	$2A(a6),d3
0007D326 182E 0026                  		move.b	$26(a6),d4
0007D32A 3A2E 000A                  		move.w	$A(a6),d5
0007D32E 303C 0087                  		move.w	#$87,d0
0007D332                            
0007D332                            loc_725E4:
0007D332 4298                       		clr.l	(a0)+
0007D334 51C8 FFFC                  		dbf	d0,loc_725E4
0007D338                            
0007D338 1C81                       		move.b	d1,0(a6)
0007D33A 1D42 0027                  		move.b	d2,$27(a6)
0007D33E 1D43 002A                  		move.b	d3,$2A(a6)
0007D342 1D44 0026                  		move.b	d4,$26(a6)
0007D346 3D45 000A                  		move.w	d5,$A(a6)
0007D34A 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D350 4EBA FF68                  		jsr	sub_7256A(pc)
0007D354 6000 0000                  		bra.w	sub_729B6
0007D358                            ; End of function sub_725CA
0007D358                            
0007D358                            
0007D358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D358                            
0007D358                            
0007D358                            sub_7260C:				; XREF: sub_71B4C
0007D358 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D35E 41EE 004E                  		lea	$4E(a6),a0
0007D362 7030                       		moveq	#$30,d0
0007D364 7209                       		moveq	#9,d1
0007D366                            
0007D366                            loc_7261A:
0007D366 5210                       		addq.b	#1,(a0)
0007D368 D0C0                       		adda.w	d0,a0
0007D36A 51C9 FFFA                  		dbf	d1,loc_7261A
0007D36E                            
0007D36E 4E75                       		rts	
0007D370                            ; End of function sub_7260C
0007D370                            
0007D370                            ; ===========================================================================
0007D370                            ; ---------------------------------------------------------------------------
0007D370                            ; Speed	up music
0007D370                            ; ---------------------------------------------------------------------------
0007D370                            
0007D370                            Sound_E2:				; XREF: Sound_ExIndex
0007D370 4A2E 0027                  		tst.b	$27(a6)
0007D374 6600                       		bne.s	loc_7263E
0007D376 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D37C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D382 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D388 4E75                       		rts	
0007D38A                            ; ===========================================================================
0007D38A                            
0007D38A                            loc_7263E:
0007D38A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D390 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D396 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D39C 4E75                       		rts	
0007D39E                            ; ===========================================================================
0007D39E                            ; ---------------------------------------------------------------------------
0007D39E                            ; Change music back to normal speed
0007D39E                            ; ---------------------------------------------------------------------------
0007D39E                            
0007D39E                            Sound_E3:				; XREF: Sound_ExIndex
0007D39E 4A2E 0027                  		tst.b	$27(a6)
0007D3A2 6600                       		bne.s	loc_7266A
0007D3A4 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D3AA 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D3B0 422E 002A                  		clr.b	$2A(a6)
0007D3B4 4E75                       		rts	
0007D3B6                            ; ===========================================================================
0007D3B6                            
0007D3B6                            loc_7266A:
0007D3B6 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D3BC 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D3C2 422E 03CA                  		clr.b	$3CA(a6)
0007D3C6 4E75                       		rts	
0007D3C8                            
0007D3C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D3C8                            
0007D3C8                            
0007D3C8                            sub_7267C:				; XREF: sub_71B4C
0007D3C8 4A2E 0025                  		tst.b	$25(a6)
0007D3CC 6700                       		beq.s	loc_72688
0007D3CE 532E 0025                  		subq.b	#1,$25(a6)
0007D3D2 4E75                       		rts	
0007D3D4                            ; ===========================================================================
0007D3D4                            
0007D3D4                            loc_72688:
0007D3D4 4A2E 0026                  		tst.b	$26(a6)
0007D3D8 6700                       		beq.s	loc_726D6
0007D3DA 532E 0026                  		subq.b	#1,$26(a6)
0007D3DE 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D3E4 4BEE 0070                  		lea	$70(a6),a5
0007D3E8 7E05                       		moveq	#5,d7
0007D3EA                            
0007D3EA                            loc_7269E:
0007D3EA 4A15                       		tst.b	(a5)
0007D3EC 6A00                       		bpl.s	loc_726AA
0007D3EE 532D 0009                  		subq.b	#1,9(a5)
0007D3F2 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D3F6                            
0007D3F6                            loc_726AA:
0007D3F6 DAFC 0030                  		adda.w	#$30,a5
0007D3FA 51CF FFEE                  		dbf	d7,loc_7269E
0007D3FE 7E02                       		moveq	#2,d7
0007D400                            
0007D400                            loc_726B4:
0007D400 4A15                       		tst.b	(a5)
0007D402 6A00                       		bpl.s	loc_726CC
0007D404 532D 0009                  		subq.b	#1,9(a5)
0007D408 1C2D 0009                  		move.b	9(a5),d6
0007D40C 0C06 0010                  		cmpi.b	#$10,d6
0007D410 6500                       		bcs.s	loc_726C8
0007D412 7C0F                       		moveq	#$F,d6
0007D414                            
0007D414                            loc_726C8:
0007D414 4EBA 0000                  		jsr	sub_7296A(pc)
0007D418                            
0007D418                            loc_726CC:
0007D418 DAFC 0030                  		adda.w	#$30,a5
0007D41C 51CF FFE2                  		dbf	d7,loc_726B4
0007D420 4E75                       		rts	
0007D422                            ; ===========================================================================
0007D422                            
0007D422                            loc_726D6:
0007D422 08AE 0002 0040             		bclr	#2,$40(a6)
0007D428 422E 0024                  		clr.b	$24(a6)
0007D42C 4E75                       		rts	
0007D42E                            ; End of function sub_7267C
0007D42E                            
0007D42E                            ; ===========================================================================
0007D42E                            
0007D42E                            loc_726E2:				; XREF: sub_71CCA
0007D42E 0815 0001                  		btst	#1,(a5)
0007D432 6600                       		bne.s	locret_726FC
0007D434 0815 0002                  		btst	#2,(a5)
0007D438 6600                       		bne.s	locret_726FC
0007D43A 7028                       		moveq	#$28,d0
0007D43C 122D 0001                  		move.b	1(a5),d1
0007D440 0001 00F0                  		ori.b	#-$10,d1
0007D444 6000 0000                  		bra.w	sub_7272E
0007D448                            ; ===========================================================================
0007D448                            
0007D448                            locret_726FC:
0007D448 4E75                       		rts	
0007D44A                            
0007D44A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D44A                            
0007D44A                            
0007D44A                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D44A 0815 0004                  		btst	#4,(a5)
0007D44E 6600                       		bne.s	locret_72714
0007D450 0815 0002                  		btst	#2,(a5)
0007D454 6600                       		bne.s	locret_72714
0007D456                            
0007D456                            loc_7270A:				; XREF: Snd_FadeOut2
0007D456 7028                       		moveq	#$28,d0
0007D458 122D 0001                  		move.b	1(a5),d1
0007D45C 6000 0000                  		bra.w	sub_7272E
0007D460                            ; ===========================================================================
0007D460                            
0007D460                            locret_72714:
0007D460 4E75                       		rts	
0007D462                            ; End of function sub_726FE
0007D462                            
0007D462                            ; ===========================================================================
0007D462                            
0007D462                            loc_72716:				; XREF: sub_72A5A
0007D462 0815 0002                  		btst	#2,(a5)
0007D466 6600                       		bne.s	locret_72720
0007D468 6000 0000                  		bra.w	sub_72722
0007D46C                            ; ===========================================================================
0007D46C                            
0007D46C                            locret_72720:
0007D46C 4E75                       		rts	
0007D46E                            
0007D46E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D46E                            
0007D46E                            
0007D46E                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D46E 082D 0002 0001             		btst	#2,1(a5)
0007D474 6600                       		bne.s	loc_7275A
0007D476 D02D 0001                  		add.b	1(a5),d0
0007D47A                            ; End of function sub_72722
0007D47A                            
0007D47A                            
0007D47A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D47A                            
0007D47A                            
0007D47A                            sub_7272E:				; XREF: loc_71E6A
0007D47A 1439 00A0 4000             		move.b	($A04000).l,d2
0007D480 0802 0007                  		btst	#7,d2
0007D484 66F4                       		bne.s	sub_7272E
0007D486 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D48C 4E71                       		nop	
0007D48E 4E71                       		nop	
0007D490 4E71                       		nop	
0007D492                            
0007D492                            loc_72746:
0007D492 1439 00A0 4000             		move.b	($A04000).l,d2
0007D498 0802 0007                  		btst	#7,d2
0007D49C 66F4                       		bne.s	loc_72746
0007D49E                            
0007D49E 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D4A4 4E75                       		rts	
0007D4A6                            ; End of function sub_7272E
0007D4A6                            
0007D4A6                            ; ===========================================================================
0007D4A6                            
0007D4A6                            loc_7275A:				; XREF: sub_72722
0007D4A6 142D 0001                  		move.b	1(a5),d2
0007D4AA 0882 0002                  		bclr	#2,d2
0007D4AE D002                       		add.b	d2,d0
0007D4B0                            
0007D4B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D4B0                            
0007D4B0                            
0007D4B0                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D4B0 1439 00A0 4000             		move.b	($A04000).l,d2
0007D4B6 0802 0007                  		btst	#7,d2
0007D4BA 66F4                       		bne.s	sub_72764
0007D4BC 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D4C2 4E71                       		nop	
0007D4C4 4E71                       		nop	
0007D4C6 4E71                       		nop	
0007D4C8                            
0007D4C8                            loc_7277C:
0007D4C8 1439 00A0 4000             		move.b	($A04000).l,d2
0007D4CE 0802 0007                  		btst	#7,d2
0007D4D2 66F4                       		bne.s	loc_7277C
0007D4D4                            
0007D4D4 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D4DA 4E75                       		rts	
0007D4DC                            ; End of function sub_72764
0007D4DC                            
0007D4DC                            ; ===========================================================================
0007D4DC 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D4EE 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D500 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D510 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D520 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D530 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D540 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D550 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007D560 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007D570 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007D580 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007D590 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007D59C                            
0007D59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D59C                            
0007D59C                            
0007D59C                            sub_72850:				; XREF: sub_71B4C
0007D59C 532D 000E                  		subq.b	#1,$E(a5)
0007D5A0 6600                       		bne.s	loc_72866
0007D5A2 0895 0004                  		bclr	#4,(a5)
0007D5A6 4EBA 0000                  		jsr	sub_72878(pc)
0007D5AA 4EBA 0000                  		jsr	sub_728DC(pc)
0007D5AE 6000 0000                  		bra.w	loc_7292E
0007D5B2                            ; ===========================================================================
0007D5B2                            
0007D5B2                            loc_72866:
0007D5B2 4EBA F45A                  		jsr	sub_71D9E(pc)
0007D5B6 4EBA 0000                  		jsr	sub_72926(pc)
0007D5BA 4EBA F47A                  		jsr	sub_71DC6(pc)
0007D5BE 4EBA 0000                  		jsr	sub_728E2(pc)
0007D5C2 4E75                       		rts	
0007D5C4                            ; End of function sub_72850
0007D5C4                            
0007D5C4                            
0007D5C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5C4                            
0007D5C4                            
0007D5C4                            sub_72878:				; XREF: sub_72850
0007D5C4 0895 0001                  		bclr	#1,(a5)
0007D5C8 286D 0004                  		movea.l	4(a5),a4
0007D5CC                            
0007D5CC                            loc_72880:
0007D5CC 7A00                       		moveq	#0,d5
0007D5CE 1A1C                       		move.b	(a4)+,d5
0007D5D0 0C05 00E0                  		cmpi.b	#$E0,d5
0007D5D4 6500                       		bcs.s	loc_72890
0007D5D6 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D5DA 60F0                       		bra.s	loc_72880
0007D5DC                            ; ===========================================================================
0007D5DC                            
0007D5DC                            loc_72890:
0007D5DC 4A05                       		tst.b	d5
0007D5DE 6A00                       		bpl.s	loc_728A4
0007D5E0 4EBA 0000                  		jsr	sub_728AC(pc)
0007D5E4 1A1C                       		move.b	(a4)+,d5
0007D5E6 4A05                       		tst.b	d5
0007D5E8 6A00                       		bpl.s	loc_728A4
0007D5EA 534C                       		subq.w	#1,a4
0007D5EC 6000 F3E2                  		bra.w	sub_71D60
0007D5F0                            ; ===========================================================================
0007D5F0                            
0007D5F0                            loc_728A4:
0007D5F0 4EBA F3BE                  		jsr	sub_71D40(pc)
0007D5F4 6000 F3DA                  		bra.w	sub_71D60
0007D5F8                            ; End of function sub_72878
0007D5F8                            
0007D5F8                            
0007D5F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5F8                            
0007D5F8                            
0007D5F8                            sub_728AC:				; XREF: sub_72878
0007D5F8 0405 0081                  		subi.b	#$81,d5
0007D5FC 6500                       		bcs.s	loc_728CA
0007D5FE DA2D 0008                  		add.b	8(a5),d5
0007D602 0245 007F                  		andi.w	#$7F,d5
0007D606 E34D                       		lsl.w	#1,d5
0007D608 41FA 0000                  		lea	word_729CE(pc),a0
0007D60C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007D612 6000 F3BC                  		bra.w	sub_71D60
0007D616                            ; ===========================================================================
0007D616                            
0007D616                            loc_728CA:
0007D616 08D5 0001                  		bset	#1,(a5)
0007D61A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007D620 4EBA F3AE                  		jsr	sub_71D60(pc)
0007D624 6000 0000                  		bra.w	sub_729A0
0007D628                            ; End of function sub_728AC
0007D628                            
0007D628                            
0007D628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D628                            
0007D628                            
0007D628                            sub_728DC:				; XREF: sub_72850
0007D628 3C2D 0010                  		move.w	$10(a5),d6
0007D62C 6B00                       		bmi.s	loc_72920
0007D62E                            ; End of function sub_728DC
0007D62E                            
0007D62E                            
0007D62E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D62E                            
0007D62E                            
0007D62E                            sub_728E2:				; XREF: sub_72850
0007D62E 102D 001E                  		move.b	$1E(a5),d0
0007D632 4880                       		ext.w	d0
0007D634 DC40                       		add.w	d0,d6
0007D636 0815 0002                  		btst	#2,(a5)
0007D63A 6600                       		bne.s	locret_7291E
0007D63C 0815 0001                  		btst	#1,(a5)
0007D640 6600                       		bne.s	locret_7291E
0007D642 102D 0001                  		move.b	1(a5),d0
0007D646 0C00 00E0                  		cmpi.b	#$E0,d0
0007D64A 6600                       		bne.s	loc_72904
0007D64C 103C 00C0                  		move.b	#$C0,d0
0007D650                            
0007D650                            loc_72904:
0007D650 3206                       		move.w	d6,d1
0007D652 0201 000F                  		andi.b	#$F,d1
0007D656 8001                       		or.b	d1,d0
0007D658 E84E                       		lsr.w	#4,d6
0007D65A 0206 003F                  		andi.b	#$3F,d6
0007D65E 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D664 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D66A                            
0007D66A                            locret_7291E:
0007D66A 4E75                       		rts	
0007D66C                            ; End of function sub_728E2
0007D66C                            
0007D66C                            ; ===========================================================================
0007D66C                            
0007D66C                            loc_72920:				; XREF: sub_728DC
0007D66C 08D5 0001                  		bset	#1,(a5)
0007D670 4E75                       		rts	
0007D672                            
0007D672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D672                            
0007D672                            
0007D672                            sub_72926:				; XREF: sub_72850
0007D672 4A2D 000B                  		tst.b	$B(a5)
0007D676 6700 0000                  		beq.w	locret_7298A
0007D67A                            
0007D67A                            loc_7292E:				; XREF: sub_72850
0007D67A 1C2D 0009                  		move.b	9(a5),d6
0007D67E 7000                       		moveq	#0,d0
0007D680 102D 000B                  		move.b	$B(a5),d0
0007D684 6700                       		beq.s	sub_7296A
0007D686 2079 0007 C5E4             		movea.l	(Go_PSGIndex).l,a0
0007D68C 5340                       		subq.w	#1,d0
0007D68E E548                       		lsl.w	#2,d0
0007D690 2070 0000                  		movea.l	(a0,d0.w),a0
0007D694 102D 000C                  		move.b	$C(a5),d0
0007D698 1030 0000                  		move.b	(a0,d0.w),d0
0007D69C 522D 000C                  		addq.b	#1,$C(a5)
0007D6A0 0800 0007                  		btst	#7,d0
0007D6A4 6700                       		beq.s	loc_72960
0007D6A6 0C00 0080                  		cmpi.b	#$80,d0
0007D6AA 6700                       		beq.s	loc_7299A
0007D6AC                            
0007D6AC                            loc_72960:
0007D6AC DC40                       		add.w	d0,d6
0007D6AE 0C06 0010                  		cmpi.b	#$10,d6
0007D6B2 6500                       		bcs.s	sub_7296A
0007D6B4 7C0F                       		moveq	#$F,d6
0007D6B6                            ; End of function sub_72926
0007D6B6                            
0007D6B6                            
0007D6B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6B6                            
0007D6B6                            
0007D6B6                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007D6B6 0815 0001                  		btst	#1,(a5)
0007D6BA 6600                       		bne.s	locret_7298A
0007D6BC 0815 0002                  		btst	#2,(a5)
0007D6C0 6600                       		bne.s	locret_7298A
0007D6C2 0815 0004                  		btst	#4,(a5)
0007D6C6 6600                       		bne.s	loc_7298C
0007D6C8                            
0007D6C8                            loc_7297C:
0007D6C8 8C2D 0001                  		or.b	1(a5),d6
0007D6CC 0606 0010                  		addi.b	#$10,d6
0007D6D0 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D6D6                            
0007D6D6                            locret_7298A:
0007D6D6 4E75                       		rts	
0007D6D8                            ; ===========================================================================
0007D6D8                            
0007D6D8                            loc_7298C:
0007D6D8 4A2D 0013                  		tst.b	$13(a5)
0007D6DC 67EA                       		beq.s	loc_7297C
0007D6DE 4A2D 0012                  		tst.b	$12(a5)
0007D6E2 66E4                       		bne.s	loc_7297C
0007D6E4 4E75                       		rts	
0007D6E6                            ; End of function sub_7296A
0007D6E6                            
0007D6E6                            ; ===========================================================================
0007D6E6                            
0007D6E6                            loc_7299A:				; XREF: sub_72926
0007D6E6 532D 000C                  		subq.b	#1,$C(a5)
0007D6EA 4E75                       		rts	
0007D6EC                            
0007D6EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6EC                            
0007D6EC                            
0007D6EC                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007D6EC 0815 0002                  		btst	#2,(a5)
0007D6F0 6600                       		bne.s	locret_729B4
0007D6F2                            
0007D6F2                            loc_729A6:				; XREF: Snd_FadeOut2
0007D6F2 102D 0001                  		move.b	1(a5),d0
0007D6F6 0000 001F                  		ori.b	#$1F,d0
0007D6FA 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D700                            
0007D700                            locret_729B4:
0007D700 4E75                       		rts	
0007D702                            ; End of function sub_729A0
0007D702                            
0007D702                            
0007D702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D702                            
0007D702                            
0007D702                            sub_729B6:				; XREF: loc_71E7C
0007D702 41F9 00C0 0011             		lea	($C00011).l,a0
0007D708 10BC 009F                  		move.b	#$9F,(a0)
0007D70C 10BC 00BF                  		move.b	#$BF,(a0)
0007D710 10BC 00DF                  		move.b	#$DF,(a0)
0007D714 10BC 00FF                  		move.b	#$FF,(a0)
0007D718 4E75                       		rts	
0007D71A                            ; End of function sub_729B6
0007D71A                            
0007D71A                            ; ===========================================================================
0007D71A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007D72C 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007D73E 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007D752 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007D766 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007D77A 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007D78E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007D7A2 0011 0000                  		dc.w $11, 0
0007D7A6                            
0007D7A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7A6                            
0007D7A6                            
0007D7A6                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007D7A6 0445 00E0                  		subi.w	#$E0,d5
0007D7AA E54D                       		lsl.w	#2,d5
0007D7AC 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007D7B0                            ; End of function sub_72A5A
0007D7B0                            
0007D7B0                            ; ===========================================================================
0007D7B0                            
0007D7B0                            loc_72A64:
0007D7B0 6000 0000                  		bra.w	loc_72ACC
0007D7B4                            ; ===========================================================================
0007D7B4 6000 0000                  		bra.w	loc_72AEC
0007D7B8                            ; ===========================================================================
0007D7B8 6000 0000                  		bra.w	loc_72AF2
0007D7BC                            ; ===========================================================================
0007D7BC 6000 0000                  		bra.w	loc_72AF8
0007D7C0                            ; ===========================================================================
0007D7C0 6000 0000                  		bra.w	loc_72B14
0007D7C4                            ; ===========================================================================
0007D7C4 6000 0000                  		bra.w	loc_72B9E
0007D7C8                            ; ===========================================================================
0007D7C8 6000 0000                  		bra.w	loc_72BA4
0007D7CC                            ; ===========================================================================
0007D7CC 6000 0000                  		bra.w	loc_72BAE
0007D7D0                            ; ===========================================================================
0007D7D0 6000 0000                  		bra.w	loc_72BB4
0007D7D4                            ; ===========================================================================
0007D7D4 6000 0000                  		bra.w	loc_72BBE
0007D7D8                            ; ===========================================================================
0007D7D8 6000 0000                  		bra.w	loc_72BC6
0007D7DC                            ; ===========================================================================
0007D7DC 6000 0000                  		bra.w	loc_72BD0
0007D7E0                            ; ===========================================================================
0007D7E0 6000 0000                  		bra.w	loc_72BE6
0007D7E4                            ; ===========================================================================
0007D7E4 6000 0000                  		bra.w	loc_72BEE
0007D7E8                            ; ===========================================================================
0007D7E8 6000 0000                  		bra.w	loc_72BF4
0007D7EC                            ; ===========================================================================
0007D7EC 6000 0000                  		bra.w	loc_72C26
0007D7F0                            ; ===========================================================================
0007D7F0 6000 0000                  		bra.w	loc_72D30
0007D7F4                            ; ===========================================================================
0007D7F4 6000 0000                  		bra.w	loc_72D52
0007D7F8                            ; ===========================================================================
0007D7F8 6000 0000                  		bra.w	loc_72D58
0007D7FC                            ; ===========================================================================
0007D7FC 6000 0000                  		bra.w	loc_72E06
0007D800                            ; ===========================================================================
0007D800 6000 0000                  		bra.w	loc_72E20
0007D804                            ; ===========================================================================
0007D804 6000 0000                  		bra.w	loc_72E26
0007D808                            ; ===========================================================================
0007D808 6000 0000                  		bra.w	loc_72E2C
0007D80C                            ; ===========================================================================
0007D80C 6000 0000                  		bra.w	loc_72E38
0007D810                            ; ===========================================================================
0007D810 6000 0000                  		bra.w	loc_72E52
0007D814                            ; ===========================================================================
0007D814 6000 0000                  		bra.w	loc_72E64
0007D818                            ; ===========================================================================
0007D818                            
0007D818                            loc_72ACC:				; XREF: loc_72A64
0007D818 121C                       		move.b	(a4)+,d1
0007D81A 4A2D 0001                  		tst.b	1(a5)
0007D81E 6B00                       		bmi.s	locret_72AEA
0007D820 102D 000A                  		move.b	$A(a5),d0
0007D824 0200 0037                  		andi.b	#$37,d0
0007D828 8200                       		or.b	d0,d1
0007D82A 1B41 000A                  		move.b	d1,$A(a5)
0007D82E 103C 00B4                  		move.b	#$B4,d0
0007D832 6000 FC2E                  		bra.w	loc_72716
0007D836                            ; ===========================================================================
0007D836                            
0007D836                            locret_72AEA:
0007D836 4E75                       		rts	
0007D838                            ; ===========================================================================
0007D838                            
0007D838                            loc_72AEC:				; XREF: loc_72A64
0007D838 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007D83C 4E75                       		rts	
0007D83E                            ; ===========================================================================
0007D83E                            
0007D83E                            loc_72AF2:				; XREF: loc_72A64
0007D83E 1D5C 0007                  		move.b	(a4)+,7(a6)
0007D842 4E75                       		rts	
0007D844                            ; ===========================================================================
0007D844                            
0007D844                            loc_72AF8:				; XREF: loc_72A64
0007D844 7000                       		moveq	#0,d0
0007D846 102D 000D                  		move.b	$D(a5),d0
0007D84A 2875 0000                  		movea.l	(a5,d0.w),a4
0007D84E 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007D856 544C                       		addq.w	#2,a4
0007D858 5800                       		addq.b	#4,d0
0007D85A 1B40 000D                  		move.b	d0,$D(a5)
0007D85E 4E75                       		rts	
0007D860                            ; ===========================================================================
0007D860                            
0007D860                            loc_72B14:				; XREF: loc_72A64
0007D860 204E                       		movea.l	a6,a0
0007D862 43EE 03A0                  		lea	$3A0(a6),a1
0007D866 303C 0087                  		move.w	#$87,d0
0007D86A                            
0007D86A                            loc_72B1E:
0007D86A 20D9                       		move.l	(a1)+,(a0)+
0007D86C 51C8 FFFC                  		dbf	d0,loc_72B1E
0007D870                            
0007D870 08EE 0002 0040             		bset	#2,$40(a6)
0007D876 264D                       		movea.l	a5,a3
0007D878 1C3C 0028                  		move.b	#$28,d6
0007D87C 9C2E 0026                  		sub.b	$26(a6),d6
0007D880 7E05                       		moveq	#5,d7
0007D882 4BEE 0070                  		lea	$70(a6),a5
0007D886                            
0007D886                            loc_72B3A:
0007D886 0815 0007                  		btst	#7,(a5)
0007D88A 6700                       		beq.s	loc_72B5C
0007D88C 08D5 0001                  		bset	#1,(a5)
0007D890 DD2D 0009                  		add.b	d6,9(a5)
0007D894 0815 0002                  		btst	#2,(a5)
0007D898 6600                       		bne.s	loc_72B5C
0007D89A 7000                       		moveq	#0,d0
0007D89C 102D 000B                  		move.b	$B(a5),d0
0007D8A0 226E 0018                  		movea.l	$18(a6),a1
0007D8A4 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D8A8                            
0007D8A8                            loc_72B5C:
0007D8A8 DAFC 0030                  		adda.w	#$30,a5
0007D8AC 51CF FFD8                  		dbf	d7,loc_72B3A
0007D8B0                            
0007D8B0 7E02                       		moveq	#2,d7
0007D8B2                            
0007D8B2                            loc_72B66:
0007D8B2 0815 0007                  		btst	#7,(a5)
0007D8B6 6700                       		beq.s	loc_72B78
0007D8B8 08D5 0001                  		bset	#1,(a5)
0007D8BC 4EBA FE2E                  		jsr	sub_729A0(pc)
0007D8C0 DD2D 0009                  		add.b	d6,9(a5)
0007D8C4                            
0007D8C4                            loc_72B78:
0007D8C4 DAFC 0030                  		adda.w	#$30,a5
0007D8C8 51CF FFE8                  		dbf	d7,loc_72B66
0007D8CC 2A4B                       		movea.l	a3,a5
0007D8CE 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007D8D4 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007D8DA 422E 0027                  		clr.b	$27(a6)
0007D8DE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007D8E6 504F                       		addq.w	#8,sp
0007D8E8 4E75                       		rts	
0007D8EA                            ; ===========================================================================
0007D8EA                            
0007D8EA                            loc_72B9E:				; XREF: loc_72A64
0007D8EA 1B5C 0002                  		move.b	(a4)+,2(a5)
0007D8EE 4E75                       		rts	
0007D8F0                            ; ===========================================================================
0007D8F0                            
0007D8F0                            loc_72BA4:				; XREF: loc_72A64
0007D8F0 101C                       		move.b	(a4)+,d0
0007D8F2 D12D 0009                  		add.b	d0,9(a5)
0007D8F6 6000 0000                  		bra.w	sub_72CB4
0007D8FA                            ; ===========================================================================
0007D8FA                            
0007D8FA                            loc_72BAE:				; XREF: loc_72A64
0007D8FA 08D5 0004                  		bset	#4,(a5)
0007D8FE 4E75                       		rts	
0007D900                            ; ===========================================================================
0007D900                            
0007D900                            loc_72BB4:				; XREF: loc_72A64
0007D900 1B54 0012                  		move.b	(a4),$12(a5)
0007D904 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007D908 4E75                       		rts	
0007D90A                            ; ===========================================================================
0007D90A                            
0007D90A                            loc_72BBE:				; XREF: loc_72A64
0007D90A 101C                       		move.b	(a4)+,d0
0007D90C D12D 0008                  		add.b	d0,8(a5)
0007D910 4E75                       		rts	
0007D912                            ; ===========================================================================
0007D912                            
0007D912                            loc_72BC6:				; XREF: loc_72A64
0007D912 1D54 0002                  		move.b	(a4),2(a6)
0007D916 1D5C 0001                  		move.b	(a4)+,1(a6)
0007D91A 4E75                       		rts	
0007D91C                            ; ===========================================================================
0007D91C                            
0007D91C                            loc_72BD0:				; XREF: loc_72A64
0007D91C 41EE 0040                  		lea	$40(a6),a0
0007D920 101C                       		move.b	(a4)+,d0
0007D922 7230                       		moveq	#$30,d1
0007D924 7409                       		moveq	#9,d2
0007D926                            
0007D926                            loc_72BDA:
0007D926 1140 0002                  		move.b	d0,2(a0)
0007D92A D0C1                       		adda.w	d1,a0
0007D92C 51CA FFF8                  		dbf	d2,loc_72BDA
0007D930                            
0007D930 4E75                       		rts	
0007D932                            ; ===========================================================================
0007D932                            
0007D932                            loc_72BE6:				; XREF: loc_72A64
0007D932 101C                       		move.b	(a4)+,d0
0007D934 D12D 0009                  		add.b	d0,9(a5)
0007D938 4E75                       		rts	
0007D93A                            ; ===========================================================================
0007D93A                            
0007D93A                            loc_72BEE:				; XREF: loc_72A64
0007D93A 422E 002C                  		clr.b	$2C(a6)
0007D93E 4E75                       		rts	
0007D940                            ; ===========================================================================
0007D940                            
0007D940                            loc_72BF4:				; XREF: loc_72A64
0007D940 0895 0007                  		bclr	#7,(a5)
0007D944 0895 0004                  		bclr	#4,(a5)
0007D948 4EBA FB00                  		jsr	sub_726FE(pc)
0007D94C 4A2E 0250                  		tst.b	$250(a6)
0007D950 6B00                       		bmi.s	loc_72C22
0007D952 264D                       		movea.l	a5,a3
0007D954 4BEE 0100                  		lea	$100(a6),a5
0007D958 226E 0018                  		movea.l	$18(a6),a1
0007D95C 0895 0002                  		bclr	#2,(a5)
0007D960 08D5 0001                  		bset	#1,(a5)
0007D964 102D 000B                  		move.b	$B(a5),d0
0007D968 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D96C 2A4B                       		movea.l	a3,a5
0007D96E                            
0007D96E                            loc_72C22:
0007D96E 504F                       		addq.w	#8,sp
0007D970 4E75                       		rts	
0007D972                            ; ===========================================================================
0007D972                            
0007D972                            loc_72C26:				; XREF: loc_72A64
0007D972 7000                       		moveq	#0,d0
0007D974 101C                       		move.b	(a4)+,d0
0007D976 1B40 000B                  		move.b	d0,$B(a5)
0007D97A 0815 0002                  		btst	#2,(a5)
0007D97E 6600 0000                  		bne.w	locret_72CAA
0007D982 226E 0018                  		movea.l	$18(a6),a1
0007D986 4A2E 000E                  		tst.b	$E(a6)
0007D98A 6700                       		beq.s	sub_72C4E
0007D98C 226D 0020                  		movea.l	$20(a5),a1
0007D990 4A2E 000E                  		tst.b	$E(a6)
0007D994 6B00                       		bmi.s	sub_72C4E
0007D996 226E 0020                  		movea.l	$20(a6),a1
0007D99A                            
0007D99A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D99A                            
0007D99A                            
0007D99A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007D99A 5340                       		subq.w	#1,d0
0007D99C 6B00                       		bmi.s	loc_72C5C
0007D99E 323C 0019                  		move.w	#$19,d1
0007D9A2                            
0007D9A2                            loc_72C56:
0007D9A2 D2C1                       		adda.w	d1,a1
0007D9A4 51C8 FFFC                  		dbf	d0,loc_72C56
0007D9A8                            
0007D9A8                            loc_72C5C:
0007D9A8 1219                       		move.b	(a1)+,d1
0007D9AA 1B41 001F                  		move.b	d1,$1F(a5)
0007D9AE 1801                       		move.b	d1,d4
0007D9B0 103C 00B0                  		move.b	#$B0,d0
0007D9B4 4EBA FAB8                  		jsr	sub_72722(pc)
0007D9B8 45FA 0000                  		lea	byte_72D18(pc),a2
0007D9BC 7613                       		moveq	#$13,d3
0007D9BE                            
0007D9BE                            loc_72C72:
0007D9BE 101A                       		move.b	(a2)+,d0
0007D9C0 1219                       		move.b	(a1)+,d1
0007D9C2 4EBA FAAA                  		jsr	sub_72722(pc)
0007D9C6 51CB FFF6                  		dbf	d3,loc_72C72
0007D9CA 7A03                       		moveq	#3,d5
0007D9CC 0244 0007                  		andi.w	#7,d4
0007D9D0 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007D9D4 162D 0009                  		move.b	9(a5),d3
0007D9D8                            
0007D9D8                            loc_72C8C:
0007D9D8 101A                       		move.b	(a2)+,d0
0007D9DA 1219                       		move.b	(a1)+,d1
0007D9DC E20C                       		lsr.b	#1,d4
0007D9DE 6400                       		bcc.s	loc_72C96
0007D9E0 D203                       		add.b	d3,d1
0007D9E2                            
0007D9E2                            loc_72C96:
0007D9E2 4EBA FA8A                  		jsr	sub_72722(pc)
0007D9E6 51CD FFF0                  		dbf	d5,loc_72C8C
0007D9EA 103C 00B4                  		move.b	#$B4,d0
0007D9EE 122D 000A                  		move.b	$A(a5),d1
0007D9F2 4EBA FA7A                  		jsr	sub_72722(pc)
0007D9F6                            
0007D9F6                            locret_72CAA:
0007D9F6 4E75                       		rts	
0007D9F8                            ; End of function sub_72C4E
0007D9F8                            
0007D9F8                            ; ===========================================================================
0007D9F8 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DA00                            
0007DA00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA00                            
0007DA00                            
0007DA00                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DA00 0815 0002                  		btst	#2,(a5)
0007DA04 6600                       		bne.s	locret_72D16
0007DA06 7000                       		moveq	#0,d0
0007DA08 102D 000B                  		move.b	$B(a5),d0
0007DA0C 226E 0018                  		movea.l	$18(a6),a1
0007DA10 4A2E 000E                  		tst.b	$E(a6)
0007DA14 6700                       		beq.s	loc_72CD8
0007DA16 226E 0020                  		movea.l	$20(a6),a1
0007DA1A 4A2E 000E                  		tst.b	$E(a6)
0007DA1E 6B00                       		bmi.s	loc_72CD8
0007DA20 226E 0020                  		movea.l	$20(a6),a1
0007DA24                            
0007DA24                            loc_72CD8:
0007DA24 5340                       		subq.w	#1,d0
0007DA26 6B00                       		bmi.s	loc_72CE6
0007DA28 323C 0019                  		move.w	#$19,d1
0007DA2C                            
0007DA2C                            loc_72CE0:
0007DA2C D2C1                       		adda.w	d1,a1
0007DA2E 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DA32                            
0007DA32                            loc_72CE6:
0007DA32 D2FC 0015                  		adda.w	#$15,a1
0007DA36 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DA3A 102D 001F                  		move.b	$1F(a5),d0
0007DA3E 0240 0007                  		andi.w	#7,d0
0007DA42 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DA46 162D 0009                  		move.b	9(a5),d3
0007DA4A 6B00                       		bmi.s	locret_72D16
0007DA4C 7A03                       		moveq	#3,d5
0007DA4E                            
0007DA4E                            loc_72D02:
0007DA4E 101A                       		move.b	(a2)+,d0
0007DA50 1219                       		move.b	(a1)+,d1
0007DA52 E20C                       		lsr.b	#1,d4
0007DA54 6400                       		bcc.s	loc_72D12
0007DA56 D203                       		add.b	d3,d1
0007DA58 6500                       		bcs.s	loc_72D12
0007DA5A 4EBA FA12                  		jsr	sub_72722(pc)
0007DA5E                            
0007DA5E                            loc_72D12:
0007DA5E 51CD FFEE                  		dbf	d5,loc_72D02
0007DA62                            
0007DA62                            locret_72D16:
0007DA62 4E75                       		rts	
0007DA64                            ; End of function sub_72CB4
0007DA64                            
0007DA64                            ; ===========================================================================
0007DA64 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DA6E 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DA78 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DA7C                            ; ===========================================================================
0007DA7C                            
0007DA7C                            loc_72D30:				; XREF: loc_72A64
0007DA7C 08D5 0003                  		bset	#3,(a5)
0007DA80 2B4C 0014                  		move.l	a4,$14(a5)
0007DA84 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DA88 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DA8C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DA90 101C                       		move.b	(a4)+,d0
0007DA92 E208                       		lsr.b	#1,d0
0007DA94 1B40 001B                  		move.b	d0,$1B(a5)
0007DA98 426D 001C                  		clr.w	$1C(a5)
0007DA9C 4E75                       		rts	
0007DA9E                            ; ===========================================================================
0007DA9E                            
0007DA9E                            loc_72D52:				; XREF: loc_72A64
0007DA9E 08D5 0003                  		bset	#3,(a5)
0007DAA2 4E75                       		rts	
0007DAA4                            ; ===========================================================================
0007DAA4                            
0007DAA4                            loc_72D58:				; XREF: loc_72A64
0007DAA4 0895 0007                  		bclr	#7,(a5)
0007DAA8 0895 0004                  		bclr	#4,(a5)
0007DAAC 4A2D 0001                  		tst.b	1(a5)
0007DAB0 6B00                       		bmi.s	loc_72D74
0007DAB2 4A2E 0008                  		tst.b	8(a6)
0007DAB6 6B00 0000                  		bmi.w	loc_72E02
0007DABA 4EBA F98E                  		jsr	sub_726FE(pc)
0007DABE 6000                       		bra.s	loc_72D78
0007DAC0                            ; ===========================================================================
0007DAC0                            
0007DAC0                            loc_72D74:
0007DAC0 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DAC4                            
0007DAC4                            loc_72D78:
0007DAC4 4A2E 000E                  		tst.b	$E(a6)
0007DAC8 6A00 0000                  		bpl.w	loc_72E02
0007DACC 4216                       		clr.b	0(a6)
0007DACE 7000                       		moveq	#0,d0
0007DAD0 102D 0001                  		move.b	1(a5),d0
0007DAD4 6B00                       		bmi.s	loc_72DCC
0007DAD6 41FA F546                  		lea	dword_722CC(pc),a0
0007DADA 264D                       		movea.l	a5,a3
0007DADC 0C00 0004                  		cmpi.b	#4,d0
0007DAE0 6600                       		bne.s	loc_72DA8
0007DAE2 4A2E 0340                  		tst.b	$340(a6)
0007DAE6 6A00                       		bpl.s	loc_72DA8
0007DAE8 4BEE 0340                  		lea	$340(a6),a5
0007DAEC 226E 0020                  		movea.l	$20(a6),a1
0007DAF0 6000                       		bra.s	loc_72DB8
0007DAF2                            ; ===========================================================================
0007DAF2                            
0007DAF2                            loc_72DA8:
0007DAF2 5500                       		subq.b	#2,d0
0007DAF4 E508                       		lsl.b	#2,d0
0007DAF6 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DAFA 4A15                       		tst.b	(a5)
0007DAFC 6A00                       		bpl.s	loc_72DC8
0007DAFE 226E 0018                  		movea.l	$18(a6),a1
0007DB02                            
0007DB02                            loc_72DB8:
0007DB02 0895 0002                  		bclr	#2,(a5)
0007DB06 08D5 0001                  		bset	#1,(a5)
0007DB0A 102D 000B                  		move.b	$B(a5),d0
0007DB0E 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DB12                            
0007DB12                            loc_72DC8:
0007DB12 2A4B                       		movea.l	a3,a5
0007DB14 6000                       		bra.s	loc_72E02
0007DB16                            ; ===========================================================================
0007DB16                            
0007DB16                            loc_72DCC:
0007DB16 41EE 0370                  		lea	$370(a6),a0
0007DB1A 4A10                       		tst.b	(a0)
0007DB1C 6A00                       		bpl.s	loc_72DE0
0007DB1E 0C00 00E0                  		cmpi.b	#$E0,d0
0007DB22 6700                       		beq.s	loc_72DEA
0007DB24 0C00 00C0                  		cmpi.b	#$C0,d0
0007DB28 6700                       		beq.s	loc_72DEA
0007DB2A                            
0007DB2A                            loc_72DE0:
0007DB2A 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DB2E E608                       		lsr.b	#3,d0
0007DB30 2070 0000                  		movea.l	(a0,d0.w),a0
0007DB34                            
0007DB34                            loc_72DEA:
0007DB34 0890 0002                  		bclr	#2,(a0)
0007DB38 08D0 0001                  		bset	#1,(a0)
0007DB3C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DB42 6600                       		bne.s	loc_72E02
0007DB44 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DB4C                            
0007DB4C                            loc_72E02:
0007DB4C 504F                       		addq.w	#8,sp
0007DB4E 4E75                       		rts	
0007DB50                            ; ===========================================================================
0007DB50                            
0007DB50                            loc_72E06:				; XREF: loc_72A64
0007DB50 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007DB56 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007DB5A 0815 0002                  		btst	#2,(a5)
0007DB5E 6600                       		bne.s	locret_72E1E
0007DB60 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007DB68                            
0007DB68                            locret_72E1E:
0007DB68 4E75                       		rts	
0007DB6A                            ; ===========================================================================
0007DB6A                            
0007DB6A                            loc_72E20:				; XREF: loc_72A64
0007DB6A 0895 0003                  		bclr	#3,(a5)
0007DB6E 4E75                       		rts	
0007DB70                            ; ===========================================================================
0007DB70                            
0007DB70                            loc_72E26:				; XREF: loc_72A64
0007DB70 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007DB74 4E75                       		rts	
0007DB76                            ; ===========================================================================
0007DB76                            
0007DB76                            loc_72E2C:				; XREF: loc_72A64
0007DB76 101C                       		move.b	(a4)+,d0
0007DB78 E148                       		lsl.w	#8,d0
0007DB7A 101C                       		move.b	(a4)+,d0
0007DB7C D8C0                       		adda.w	d0,a4
0007DB7E 534C                       		subq.w	#1,a4
0007DB80 4E75                       		rts	
0007DB82                            ; ===========================================================================
0007DB82                            
0007DB82                            loc_72E38:				; XREF: loc_72A64
0007DB82 7000                       		moveq	#0,d0
0007DB84 101C                       		move.b	(a4)+,d0
0007DB86 121C                       		move.b	(a4)+,d1
0007DB88 4A35 0024                  		tst.b	$24(a5,d0.w)
0007DB8C 6600                       		bne.s	loc_72E48
0007DB8E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007DB92                            
0007DB92                            loc_72E48:
0007DB92 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007DB96 66DE                       		bne.s	loc_72E2C
0007DB98 544C                       		addq.w	#2,a4
0007DB9A 4E75                       		rts	
0007DB9C                            ; ===========================================================================
0007DB9C                            
0007DB9C                            loc_72E52:				; XREF: loc_72A64
0007DB9C 7000                       		moveq	#0,d0
0007DB9E 102D 000D                  		move.b	$D(a5),d0
0007DBA2 5900                       		subq.b	#4,d0
0007DBA4 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007DBA8 1B40 000D                  		move.b	d0,$D(a5)
0007DBAC 60C8                       		bra.s	loc_72E2C
0007DBAE                            ; ===========================================================================
0007DBAE                            
0007DBAE                            loc_72E64:				; XREF: loc_72A64
0007DBAE 103C 0088                  		move.b	#$88,d0
0007DBB2 123C 000F                  		move.b	#$F,d1
0007DBB6 4EBA F8C2                  		jsr	sub_7272E(pc)
0007DBBA 103C 008C                  		move.b	#$8C,d0
0007DBBE 123C 000F                  		move.b	#$F,d1
0007DBC2 6000 F8B6                  		bra.w	sub_7272E
0007DBC6                            ; ===========================================================================
0007DBC6                            Kos_Z80:	incbin	sound\z80_1.bin
0007DC76 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007DC78 21                         		dc.b $21
0007DC79 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007DC7B                            		incbin	sound\z80_2.bin
0007F326                            		even
0007F326                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085B26                            		even
00085B26                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F3C4                            		even
0008F3C4                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00092FE4 00                         		even
00092FE4                            Music84:	include	sound\music84.asm ; Star Light Act 1
00092FE4                            music84_Header:
00092FE4 =00000001                  smpsHeaderStartSong = 1
00092FE4 0000                       	smpsHeaderVoice     music84_Voices
00092FE6 0603                       	smpsHeaderChan      $06, $03
00092FE8 0205                       	smpsHeaderTempo     $02, $05
00092FEA                            
00092FEE 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00092FF2 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00092FF6 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00092FFA 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00092FFE 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00093002 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00093008 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0009300E 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00093014                            
00093014                            ; FM1 Data
00093014                            music84_FM1:
00093014 E0C0                       	smpsPan             panCenter, $00
00093018 E107                       	smpsAlterNote       $07
0009301A 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0009301E E106                       	smpsAlterNote       $06
00093020 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00093024 E10B                       	smpsAlterNote       $0B
00093026 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0009302C E10C                       	smpsAlterNote       $0C
0009302E E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093031 E10B                       	smpsAlterNote       $0B
00093033 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093036 E109                       	smpsAlterNote       $09
00093038 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0009303D E108                       	smpsAlterNote       $08
0009303F 8001                       	dc.b	nRst, $01
00093041 E10B                       	smpsAlterNote       $0B
00093043 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00093049 E107                       	smpsAlterNote       $07
0009304B 9B03                       	dc.b	nD2, $03
0009304D                            
0009304D                            music84_Jump04:
0009304D E107                       	smpsAlterNote       $07
0009304F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093053 E10B                       	smpsAlterNote       $0B
00093055 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093059 E107                       	smpsAlterNote       $07
0009305B 9B03                       	dc.b	nD2, $03
0009305D E11A                       	smpsAlterNote       $1A
0009305F A301                       	dc.b	nBb2, $01
00093061 E1F2                       	smpsAlterNote       $F2
00093063 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093066 E1FF                       	smpsAlterNote       $FF
00093068 E701                       	dc.b	smpsNoAttack, $01
0009306A E111                       	smpsAlterNote       $11
0009306C E701                       	dc.b	smpsNoAttack, $01
0009306E E106                       	smpsAlterNote       $06
00093070 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093073 E107                       	smpsAlterNote       $07
00093075 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093079 E108                       	smpsAlterNote       $08
0009307B 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00093083 E109                       	smpsAlterNote       $09
00093085 A003                       	dc.b	nG2, $03
00093087 E10C                       	smpsAlterNote       $0C
00093089 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009308D E1FD                       	smpsAlterNote       $FD
0009308F A401                       	dc.b	nB2, $01
00093091 E109                       	smpsAlterNote       $09
00093093 E701                       	dc.b	smpsNoAttack, $01
00093095 E106                       	smpsAlterNote       $06
00093097 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009309A E109                       	smpsAlterNote       $09
0009309C A007                       	dc.b	nG2, $07
0009309E E108                       	smpsAlterNote       $08
000930A0 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000930A4 E107                       	smpsAlterNote       $07
000930A6 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000930AC E10B                       	smpsAlterNote       $0B
000930AE A203 8001                  	dc.b	nA2, $03, nRst, $01
000930B2 E107                       	smpsAlterNote       $07
000930B4 9B03                       	dc.b	nD2, $03
000930B6 E11A                       	smpsAlterNote       $1A
000930B8 A301                       	dc.b	nBb2, $01
000930BA E1F9                       	smpsAlterNote       $F9
000930BC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000930BF E107                       	smpsAlterNote       $07
000930C1 E701                       	dc.b	smpsNoAttack, $01
000930C3 E111                       	smpsAlterNote       $11
000930C5 E701                       	dc.b	smpsNoAttack, $01
000930C7 E106                       	smpsAlterNote       $06
000930C9 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000930CE E107                       	smpsAlterNote       $07
000930D0 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000930D8 E1EC                       	smpsAlterNote       $EC
000930DA A101                       	dc.b	nAb2, $01
000930DC E108                       	smpsAlterNote       $08
000930DE E701                       	dc.b	smpsNoAttack, $01
000930E0 E116                       	smpsAlterNote       $16
000930E2 E701                       	dc.b	smpsNoAttack, $01
000930E4 E1F5                       	smpsAlterNote       $F5
000930E6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000930E9 E10B                       	smpsAlterNote       $0B
000930EB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000930EF E107                       	smpsAlterNote       $07
000930F1 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000930F7 E109                       	smpsAlterNote       $09
000930F9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000930FD E10B                       	smpsAlterNote       $0B
000930FF 9603                       	dc.b	nA1, $03
00093101 E107                       	smpsAlterNote       $07
00093103 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093109 E10B                       	smpsAlterNote       $0B
0009310B A203 8001                  	dc.b	nA2, $03, nRst, $01
0009310F E107                       	smpsAlterNote       $07
00093111 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093115 E11A                       	smpsAlterNote       $1A
00093117 A301                       	dc.b	nBb2, $01
00093119 E1F9                       	smpsAlterNote       $F9
0009311B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009311E E107                       	smpsAlterNote       $07
00093120 E701                       	dc.b	smpsNoAttack, $01
00093122 E1FB                       	smpsAlterNote       $FB
00093124 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093127 E106                       	smpsAlterNote       $06
00093129 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009312D E107                       	smpsAlterNote       $07
0009312F 9B03                       	dc.b	nD2, $03
00093131 E108                       	smpsAlterNote       $08
00093133 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093139 E109                       	smpsAlterNote       $09
0009313B A002 8001                  	dc.b	nG2, $02, nRst, $01
0009313F E10C                       	smpsAlterNote       $0C
00093141 A303                       	dc.b	nBb2, $03
00093143 E1F0                       	smpsAlterNote       $F0
00093145 A401                       	dc.b	nB2, $01
00093147 E1FD                       	smpsAlterNote       $FD
00093149 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0009314E E106                       	smpsAlterNote       $06
00093150 8001                       	dc.b	nRst, $01
00093152 E109                       	smpsAlterNote       $09
00093154 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093158 E108                       	smpsAlterNote       $08
0009315A 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0009315E E107                       	smpsAlterNote       $07
00093160 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093166 E10B                       	smpsAlterNote       $0B
00093168 A203                       	dc.b	nA2, $03
0009316A E107                       	smpsAlterNote       $07
0009316C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093170 E1F2                       	smpsAlterNote       $F2
00093172 A401                       	dc.b	nB2, $01
00093174 E1FF                       	smpsAlterNote       $FF
00093176 E701                       	dc.b	smpsNoAttack, $01
00093178 E107                       	smpsAlterNote       $07
0009317A E701                       	dc.b	smpsNoAttack, $01
0009317C E1FB                       	smpsAlterNote       $FB
0009317E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093181 E106                       	smpsAlterNote       $06
00093183 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093187 E107                       	smpsAlterNote       $07
00093189 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00093193 E117                       	smpsAlterNote       $17
00093195 A001                       	dc.b	nG2, $01
00093197 E1FA                       	smpsAlterNote       $FA
00093199 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009319C E108                       	smpsAlterNote       $08
0009319E E701                       	dc.b	smpsNoAttack, $01
000931A0 E1E7                       	smpsAlterNote       $E7
000931A2 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000931A5 E103                       	smpsAlterNote       $03
000931A7 E701                       	dc.b	smpsNoAttack, $01
000931A9 E10B                       	smpsAlterNote       $0B
000931AB E702                       	dc.b	smpsNoAttack, $02
000931AD E107                       	smpsAlterNote       $07
000931AF 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000931B7 E106                       	smpsAlterNote       $06
000931B9 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000931BF E10C                       	smpsAlterNote       $0C
000931C1 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000931C7 E109                       	smpsAlterNote       $09
000931C9 9E03                       	dc.b	nF2, $03
000931CB E10C                       	smpsAlterNote       $0C
000931CD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000931D1 E1EA                       	smpsAlterNote       $EA
000931D3 A201                       	dc.b	nA2, $01
000931D5 E106                       	smpsAlterNote       $06
000931D7 E701                       	dc.b	smpsNoAttack, $01
000931D9 E1E2                       	smpsAlterNote       $E2
000931DB E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000931DE E1F0                       	smpsAlterNote       $F0
000931E0 E701                       	dc.b	smpsNoAttack, $01
000931E2 E10C                       	smpsAlterNote       $0C
000931E4 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000931F0 E116                       	smpsAlterNote       $16
000931F2 9C01                       	dc.b	nEb2, $01
000931F4 E105                       	smpsAlterNote       $05
000931F6 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000931F9 E1F1                       	smpsAlterNote       $F1
000931FB E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000931FE E1FF                       	smpsAlterNote       $FF
00093200 E701                       	dc.b	smpsNoAttack, $01
00093202 E109                       	smpsAlterNote       $09
00093204 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093208 E10C                       	smpsAlterNote       $0C
0009320A 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093216 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0009321C E109                       	smpsAlterNote       $09
0009321E 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093222 E10C                       	smpsAlterNote       $0C
00093224 9703                       	dc.b	nBb1, $03
00093226 E11A                       	smpsAlterNote       $1A
00093228 A101                       	dc.b	nAb2, $01
0009322A E1FB                       	smpsAlterNote       $FB
0009322C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009322F E10A                       	smpsAlterNote       $0A
00093231 E701                       	dc.b	smpsNoAttack, $01
00093233 E1E8                       	smpsAlterNote       $E8
00093235 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093238 E106                       	smpsAlterNote       $06
0009323A E701                       	dc.b	smpsNoAttack, $01
0009323C E10C                       	smpsAlterNote       $0C
0009323E E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0009324A E1F9                       	smpsAlterNote       $F9
0009324C 9D01                       	dc.b	nE2, $01
0009324E E108                       	smpsAlterNote       $08
00093250 E701                       	dc.b	smpsNoAttack, $01
00093252 E1F6                       	smpsAlterNote       $F6
00093254 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093257 E109                       	smpsAlterNote       $09
00093259 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0009325D E10C                       	smpsAlterNote       $0C
0009325F 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0009326B E108                       	smpsAlterNote       $08
0009326D 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093273 E106                       	smpsAlterNote       $06
00093275 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093279 E108                       	smpsAlterNote       $08
0009327B 9D03                       	dc.b	nE2, $03
0009327D E1EB                       	smpsAlterNote       $EB
0009327F A801                       	dc.b	nEb3, $01
00093281 E109                       	smpsAlterNote       $09
00093283 E701                       	dc.b	smpsNoAttack, $01
00093285 E1FA                       	smpsAlterNote       $FA
00093287 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0009328A E108                       	smpsAlterNote       $08
0009328C E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093298 E1E9                       	smpsAlterNote       $E9
0009329A A301                       	dc.b	nBb2, $01
0009329C E107                       	smpsAlterNote       $07
0009329E E701                       	dc.b	smpsNoAttack, $01
000932A0 E1F0                       	smpsAlterNote       $F0
000932A2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000932A5 E1F7                       	smpsAlterNote       $F7
000932A7 E701                       	dc.b	smpsNoAttack, $01
000932A9 E107                       	smpsAlterNote       $07
000932AB E701                       	dc.b	smpsNoAttack, $01
000932AD E106                       	smpsAlterNote       $06
000932AF E701                       	dc.b	smpsNoAttack, $01
000932B1 E108                       	smpsAlterNote       $08
000932B3 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000932B9 E106                       	smpsAlterNote       $06
000932BB A403 8001                  	dc.b	nB2, $03, nRst, $01
000932BF E108                       	smpsAlterNote       $08
000932C1 9D03                       	dc.b	nE2, $03
000932C3 E10B                       	smpsAlterNote       $0B
000932C5 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000932CD E108                       	smpsAlterNote       $08
000932CF 9D03                       	dc.b	nE2, $03
000932D1 E10B                       	smpsAlterNote       $0B
000932D3 9603 8001                  	dc.b	nA1, $03, nRst, $01
000932D7 E113                       	smpsAlterNote       $13
000932D9 A001                       	dc.b	nG2, $01
000932DB E118                       	smpsAlterNote       $18
000932DD E701                       	dc.b	smpsNoAttack, $01
000932DF E1E9                       	smpsAlterNote       $E9
000932E1 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000932E4 E1F3                       	smpsAlterNote       $F3
000932E6 E701                       	dc.b	smpsNoAttack, $01
000932E8 E1FD                       	smpsAlterNote       $FD
000932EA E701                       	dc.b	smpsNoAttack, $01
000932EC E102                       	smpsAlterNote       $02
000932EE E701                       	dc.b	smpsNoAttack, $01
000932F0 E107                       	smpsAlterNote       $07
000932F2 8001                       	dc.b	nRst, $01
000932F4 E10B                       	smpsAlterNote       $0B
000932F6 9603                       	dc.b	nA1, $03
000932F8 E10C                       	smpsAlterNote       $0C
000932FA 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00093300 E10B                       	smpsAlterNote       $0B
00093302 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0009330E 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00093314 E107                       	smpsAlterNote       $07
00093316 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009331C E10B                       	smpsAlterNote       $0B
0009331E A203                       	dc.b	nA2, $03
00093320 E107                       	smpsAlterNote       $07
00093322 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093326 E1F2                       	smpsAlterNote       $F2
00093328 A401                       	dc.b	nB2, $01
0009332A E1FF                       	smpsAlterNote       $FF
0009332C E701                       	dc.b	smpsNoAttack, $01
0009332E E107                       	smpsAlterNote       $07
00093330 E701                       	dc.b	smpsNoAttack, $01
00093332 E1FB                       	smpsAlterNote       $FB
00093334 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093337 E106                       	smpsAlterNote       $06
00093339 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009333D E107                       	smpsAlterNote       $07
0009333F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093343 E108                       	smpsAlterNote       $08
00093345 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0009334B E109                       	smpsAlterNote       $09
0009334D A003 8001                  	dc.b	nG2, $03, nRst, $01
00093351 E10C                       	smpsAlterNote       $0C
00093353 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093357 E1F0                       	smpsAlterNote       $F0
00093359 A401                       	dc.b	nB2, $01
0009335B E109                       	smpsAlterNote       $09
0009335D E701                       	dc.b	smpsNoAttack, $01
0009335F E106                       	smpsAlterNote       $06
00093361 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093364 E109                       	smpsAlterNote       $09
00093366 A007                       	dc.b	nG2, $07
00093368 E108                       	smpsAlterNote       $08
0009336A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009336E E107                       	smpsAlterNote       $07
00093370 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093376 E10B                       	smpsAlterNote       $0B
00093378 A202 8001                  	dc.b	nA2, $02, nRst, $01
0009337C E107                       	smpsAlterNote       $07
0009337E 9B03                       	dc.b	nD2, $03
00093380 E11A                       	smpsAlterNote       $1A
00093382 A301                       	dc.b	nBb2, $01
00093384 E1F2                       	smpsAlterNote       $F2
00093386 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093389 E1FF                       	smpsAlterNote       $FF
0009338B E701                       	dc.b	smpsNoAttack, $01
0009338D E111                       	smpsAlterNote       $11
0009338F E701                       	dc.b	smpsNoAttack, $01
00093391 E106                       	smpsAlterNote       $06
00093393 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093396 E107                       	smpsAlterNote       $07
00093398 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000933A4 E117                       	smpsAlterNote       $17
000933A6 A001                       	dc.b	nG2, $01
000933A8 E1FA                       	smpsAlterNote       $FA
000933AA E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000933AD E116                       	smpsAlterNote       $16
000933AF E701                       	dc.b	smpsNoAttack, $01
000933B1 E1F5                       	smpsAlterNote       $F5
000933B3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000933B6 E103                       	smpsAlterNote       $03
000933B8 E701                       	dc.b	smpsNoAttack, $01
000933BA E10B                       	smpsAlterNote       $0B
000933BC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000933C0 E107                       	smpsAlterNote       $07
000933C2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000933C8 E109                       	smpsAlterNote       $09
000933CA 9E03                       	dc.b	nF2, $03
000933CC E10B                       	smpsAlterNote       $0B
000933CE 9603 8001                  	dc.b	nA1, $03, nRst, $01
000933D2 E107                       	smpsAlterNote       $07
000933D4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000933DA E10B                       	smpsAlterNote       $0B
000933DC A203 8001                  	dc.b	nA2, $03, nRst, $01
000933E0 E107                       	smpsAlterNote       $07
000933E2 9B03                       	dc.b	nD2, $03
000933E4 E11A                       	smpsAlterNote       $1A
000933E6 A301                       	dc.b	nBb2, $01
000933E8 E1F9                       	smpsAlterNote       $F9
000933EA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000933ED E107                       	smpsAlterNote       $07
000933EF E701                       	dc.b	smpsNoAttack, $01
000933F1 E111                       	smpsAlterNote       $11
000933F3 E701                       	dc.b	smpsNoAttack, $01
000933F5 E106                       	smpsAlterNote       $06
000933F7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000933FC E107                       	smpsAlterNote       $07
000933FE 9B03                       	dc.b	nD2, $03
00093400 E108                       	smpsAlterNote       $08
00093402 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093408 E109                       	smpsAlterNote       $09
0009340A A003                       	dc.b	nG2, $03
0009340C E10C                       	smpsAlterNote       $0C
0009340E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093412 E1FD                       	smpsAlterNote       $FD
00093414 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00093419 E106                       	smpsAlterNote       $06
0009341B 8001                       	dc.b	nRst, $01
0009341D E109                       	smpsAlterNote       $09
0009341F A006 8001                  	dc.b	nG2, $06, nRst, $01
00093423 E108                       	smpsAlterNote       $08
00093425 9C03                       	dc.b	nEb2, $03
00093427 E107                       	smpsAlterNote       $07
00093429 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0009342F E10B                       	smpsAlterNote       $0B
00093431 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093435 E107                       	smpsAlterNote       $07
00093437 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009343B E11A                       	smpsAlterNote       $1A
0009343D A301                       	dc.b	nBb2, $01
0009343F E1F9                       	smpsAlterNote       $F9
00093441 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093444 E107                       	smpsAlterNote       $07
00093446 E701                       	dc.b	smpsNoAttack, $01
00093448 E1FB                       	smpsAlterNote       $FB
0009344A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009344D E106                       	smpsAlterNote       $06
0009344F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093453 E107                       	smpsAlterNote       $07
00093455 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0009345D E1EC                       	smpsAlterNote       $EC
0009345F A101                       	dc.b	nAb2, $01
00093461 E108                       	smpsAlterNote       $08
00093463 E701                       	dc.b	smpsNoAttack, $01
00093465 E1E7                       	smpsAlterNote       $E7
00093467 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009346A E1F5                       	smpsAlterNote       $F5
0009346C E701                       	dc.b	smpsNoAttack, $01
0009346E E10B                       	smpsAlterNote       $0B
00093470 E702                       	dc.b	smpsNoAttack, $02
00093472 E107                       	smpsAlterNote       $07
00093474 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0009347A E106                       	smpsAlterNote       $06
0009347C 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093482 E10C                       	smpsAlterNote       $0C
00093484 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0009348C E109                       	smpsAlterNote       $09
0009348E 9E03                       	dc.b	nF2, $03
00093490 E10C                       	smpsAlterNote       $0C
00093492 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093496 E1EA                       	smpsAlterNote       $EA
00093498 A201                       	dc.b	nA2, $01
0009349A E106                       	smpsAlterNote       $06
0009349C E701                       	dc.b	smpsNoAttack, $01
0009349E E114                       	smpsAlterNote       $14
000934A0 E701                       	dc.b	smpsNoAttack, $01
000934A2 E1F0                       	smpsAlterNote       $F0
000934A4 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000934A7 E10C                       	smpsAlterNote       $0C
000934A9 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000934B5 9703                       	dc.b	nBb1, $03
000934B7 E116                       	smpsAlterNote       $16
000934B9 9C01                       	dc.b	nEb2, $01
000934BB E105                       	smpsAlterNote       $05
000934BD E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000934C0 E113                       	smpsAlterNote       $13
000934C2 E701                       	dc.b	smpsNoAttack, $01
000934C4 E1FF                       	smpsAlterNote       $FF
000934C6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000934C9 E109                       	smpsAlterNote       $09
000934CB E703                       	dc.b	smpsNoAttack, $03
000934CD E10C                       	smpsAlterNote       $0C
000934CF 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000934DB 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000934E3 E109                       	smpsAlterNote       $09
000934E5 9E03                       	dc.b	nF2, $03
000934E7 E10C                       	smpsAlterNote       $0C
000934E9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000934ED E1EC                       	smpsAlterNote       $EC
000934EF A201                       	dc.b	nA2, $01
000934F1 E10A                       	smpsAlterNote       $0A
000934F3 E701                       	dc.b	smpsNoAttack, $01
000934F5 E1E8                       	smpsAlterNote       $E8
000934F7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000934FA E1F7                       	smpsAlterNote       $F7
000934FC E701                       	dc.b	smpsNoAttack, $01
000934FE E10C                       	smpsAlterNote       $0C
00093500 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0009350C E1EA                       	smpsAlterNote       $EA
0009350E 9D01                       	dc.b	nE2, $01
00093510 E108                       	smpsAlterNote       $08
00093512 E701                       	dc.b	smpsNoAttack, $01
00093514 E1F6                       	smpsAlterNote       $F6
00093516 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093519 E105                       	smpsAlterNote       $05
0009351B E701                       	dc.b	smpsNoAttack, $01
0009351D E109                       	smpsAlterNote       $09
0009351F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093523 E10C                       	smpsAlterNote       $0C
00093525 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093531 E108                       	smpsAlterNote       $08
00093533 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00093539 E106                       	smpsAlterNote       $06
0009353B A403 8001                  	dc.b	nB2, $03, nRst, $01
0009353F E108                       	smpsAlterNote       $08
00093541 9D03                       	dc.b	nE2, $03
00093543 E1EB                       	smpsAlterNote       $EB
00093545 A801                       	dc.b	nEb3, $01
00093547 E109                       	smpsAlterNote       $09
00093549 E701                       	dc.b	smpsNoAttack, $01
0009354B E1EB                       	smpsAlterNote       $EB
0009354D E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093550 E108                       	smpsAlterNote       $08
00093552 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0009355E E1E9                       	smpsAlterNote       $E9
00093560 A301                       	dc.b	nBb2, $01
00093562 E1F8                       	smpsAlterNote       $F8
00093564 E701                       	dc.b	smpsNoAttack, $01
00093566 E116                       	smpsAlterNote       $16
00093568 E701                       	dc.b	smpsNoAttack, $01
0009356A E1F7                       	smpsAlterNote       $F7
0009356C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009356F E107                       	smpsAlterNote       $07
00093571 E701                       	dc.b	smpsNoAttack, $01
00093573 E1EE                       	smpsAlterNote       $EE
00093575 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093578 E106                       	smpsAlterNote       $06
0009357A 8001                       	dc.b	nRst, $01
0009357C E108                       	smpsAlterNote       $08
0009357E 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00093584 E106                       	smpsAlterNote       $06
00093586 A402 8001                  	dc.b	nB2, $02, nRst, $01
0009358A E108                       	smpsAlterNote       $08
0009358C 9D03                       	dc.b	nE2, $03
0009358E E10B                       	smpsAlterNote       $0B
00093590 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00093596 E108                       	smpsAlterNote       $08
00093598 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0009359C E10B                       	smpsAlterNote       $0B
0009359E 9603                       	dc.b	nA1, $03
000935A0 E10E                       	smpsAlterNote       $0E
000935A2 A001                       	dc.b	nG2, $01
000935A4 E118                       	smpsAlterNote       $18
000935A6 E701                       	dc.b	smpsNoAttack, $01
000935A8 E1E9                       	smpsAlterNote       $E9
000935AA E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000935AD E1EE                       	smpsAlterNote       $EE
000935AF E701                       	dc.b	smpsNoAttack, $01
000935B1 E1F8                       	smpsAlterNote       $F8
000935B3 E701                       	dc.b	smpsNoAttack, $01
000935B5 E102                       	smpsAlterNote       $02
000935B7 E701                       	dc.b	smpsNoAttack, $01
000935B9 E107                       	smpsAlterNote       $07
000935BB 8001                       	dc.b	nRst, $01
000935BD E10B                       	smpsAlterNote       $0B
000935BF 9603                       	dc.b	nA1, $03
000935C1 E10C                       	smpsAlterNote       $0C
000935C3 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000935C9 E10B                       	smpsAlterNote       $0B
000935CB 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000935D7 8001 9603                  	dc.b	nRst, $01, nA1, $03
000935DB E10C                       	smpsAlterNote       $0C
000935DD 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000935E9 8001                       	dc.b	nRst, $01
000935EB E10B                       	smpsAlterNote       $0B
000935ED 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000935F5 E107                       	smpsAlterNote       $07
000935F7 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000935FB E10B                       	smpsAlterNote       $0B
000935FD 9603                       	dc.b	nA1, $03
000935FF E109                       	smpsAlterNote       $09
00093601 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093605 E108                       	smpsAlterNote       $08
00093607 9D06                       	dc.b	nE2, $06
00093609 E107                       	smpsAlterNote       $07
0009360B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009360F E106                       	smpsAlterNote       $06
00093611 9903                       	dc.b	nC2, $03
00093613 E10C                       	smpsAlterNote       $0C
00093615 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093619 E10B                       	smpsAlterNote       $0B
0009361B 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093627 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093631 E10C                       	smpsAlterNote       $0C
00093633 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0009363F 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0009364B 8001                       	dc.b	nRst, $01
0009364D E10B                       	smpsAlterNote       $0B
0009364F 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009365B 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00093667 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00093673 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009367D E10C                       	smpsAlterNote       $0C
0009367F 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0009368B E10B                       	smpsAlterNote       $0B
0009368D 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093695 E107                       	smpsAlterNote       $07
00093697 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0009369B E10B                       	smpsAlterNote       $0B
0009369D 9603                       	dc.b	nA1, $03
0009369F E109                       	smpsAlterNote       $09
000936A1 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000936A5 E108                       	smpsAlterNote       $08
000936A7 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000936AB E107                       	smpsAlterNote       $07
000936AD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000936B1 E106                       	smpsAlterNote       $06
000936B3 9903                       	dc.b	nC2, $03
000936B5 E10C                       	smpsAlterNote       $0C
000936B7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000936BB E10B                       	smpsAlterNote       $0B
000936BD 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000936C9 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000936D3 E10C                       	smpsAlterNote       $0C
000936D5 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000936E1 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000936ED 8001                       	dc.b	nRst, $01
000936EF E10B                       	smpsAlterNote       $0B
000936F1 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000936FD 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093707 E10C                       	smpsAlterNote       $0C
00093709 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093715 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093721 E10B                       	smpsAlterNote       $0B
00093723 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009372F 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093739 E10C                       	smpsAlterNote       $0C
0009373B 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093747 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00093753 E10B                       	smpsAlterNote       $0B
00093755 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00093761 8001                       	dc.b	nRst, $01
00093763 E1EC                       	smpsAlterNote       $EC
00093765 A101                       	dc.b	nAb2, $01
00093767 E1FA                       	smpsAlterNote       $FA
00093769 E701                       	dc.b	smpsNoAttack, $01
0009376B E116                       	smpsAlterNote       $16
0009376D E701                       	dc.b	smpsNoAttack, $01
0009376F E1F5                       	smpsAlterNote       $F5
00093771 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093774 E10B                       	smpsAlterNote       $0B
00093776 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00093782 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0009378E E107                       	smpsAlterNote       $07
00093790 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093796 E10B                       	smpsAlterNote       $0B
00093798 A203                       	dc.b	nA2, $03
0009379A E107                       	smpsAlterNote       $07
0009379C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000937A0 E1F3                       	smpsAlterNote       $F3
000937A2 A401                       	dc.b	nB2, $01
000937A4 E102                       	smpsAlterNote       $02
000937A6 E701                       	dc.b	smpsNoAttack, $01
000937A8 E109                       	smpsAlterNote       $09
000937AA E701                       	dc.b	smpsNoAttack, $01
000937AC E102                       	smpsAlterNote       $02
000937AE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937B1 E106                       	smpsAlterNote       $06
000937B3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000937B7 E107                       	smpsAlterNote       $07
000937B9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000937BD E108                       	smpsAlterNote       $08
000937BF 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000937C5 E109                       	smpsAlterNote       $09
000937C7 A003 8001                  	dc.b	nG2, $03, nRst, $01
000937CB E1F2                       	smpsAlterNote       $F2
000937CD A401                       	dc.b	nB2, $01
000937CF E1FF                       	smpsAlterNote       $FF
000937D1 E701                       	dc.b	smpsNoAttack, $01
000937D3 E111                       	smpsAlterNote       $11
000937D5 E701                       	dc.b	smpsNoAttack, $01
000937D7 E1FB                       	smpsAlterNote       $FB
000937D9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937DC E106                       	smpsAlterNote       $06
000937DE E702                       	dc.b	smpsNoAttack, $02
000937E0 E109                       	smpsAlterNote       $09
000937E2 A007                       	dc.b	nG2, $07
000937E4 E108                       	smpsAlterNote       $08
000937E6 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000937EA E107                       	smpsAlterNote       $07
000937EC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000937F2 E10B                       	smpsAlterNote       $0B
000937F4 A202 8001                  	dc.b	nA2, $02, nRst, $01
000937F8 E107                       	smpsAlterNote       $07
000937FA 9B03                       	dc.b	nD2, $03
000937FC E11A                       	smpsAlterNote       $1A
000937FE A301                       	dc.b	nBb2, $01
00093800 E1F2                       	smpsAlterNote       $F2
00093802 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093805 E1FF                       	smpsAlterNote       $FF
00093807 E701                       	dc.b	smpsNoAttack, $01
00093809 E111                       	smpsAlterNote       $11
0009380B E701                       	dc.b	smpsNoAttack, $01
0009380D E106                       	smpsAlterNote       $06
0009380F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093812 E107                       	smpsAlterNote       $07
00093814 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093820 E117                       	smpsAlterNote       $17
00093822 A001                       	dc.b	nG2, $01
00093824 E1FA                       	smpsAlterNote       $FA
00093826 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093829 E116                       	smpsAlterNote       $16
0009382B E701                       	dc.b	smpsNoAttack, $01
0009382D E1F5                       	smpsAlterNote       $F5
0009382F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093832 E103                       	smpsAlterNote       $03
00093834 E701                       	dc.b	smpsNoAttack, $01
00093836 E10B                       	smpsAlterNote       $0B
00093838 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009383C E107                       	smpsAlterNote       $07
0009383E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093844 E109                       	smpsAlterNote       $09
00093846 9E03                       	dc.b	nF2, $03
00093848 E10B                       	smpsAlterNote       $0B
0009384A 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009384E E107                       	smpsAlterNote       $07
00093850 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093856 E10B                       	smpsAlterNote       $0B
00093858 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009385C E107                       	smpsAlterNote       $07
0009385E 9B03                       	dc.b	nD2, $03
00093860 E11A                       	smpsAlterNote       $1A
00093862 A301                       	dc.b	nBb2, $01
00093864 E1F9                       	smpsAlterNote       $F9
00093866 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093869 E1FF                       	smpsAlterNote       $FF
0009386B E701                       	dc.b	smpsNoAttack, $01
0009386D E111                       	smpsAlterNote       $11
0009386F E701                       	dc.b	smpsNoAttack, $01
00093871 E106                       	smpsAlterNote       $06
00093873 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093876 E107                       	smpsAlterNote       $07
00093878 9B03                       	dc.b	nD2, $03
0009387A E108                       	smpsAlterNote       $08
0009387C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093882 E109                       	smpsAlterNote       $09
00093884 A003                       	dc.b	nG2, $03
00093886 E1F0                       	smpsAlterNote       $F0
00093888 A501                       	dc.b	nC3, $01
0009388A E106                       	smpsAlterNote       $06
0009388C E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093890 E109                       	smpsAlterNote       $09
00093892 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093896 E108                       	smpsAlterNote       $08
00093898 9C03                       	dc.b	nEb2, $03
0009389A E107                       	smpsAlterNote       $07
0009389C 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000938A2 E10B                       	smpsAlterNote       $0B
000938A4 A203 8001                  	dc.b	nA2, $03, nRst, $01
000938A8 E107                       	smpsAlterNote       $07
000938AA 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000938AE E11A                       	smpsAlterNote       $1A
000938B0 A301                       	dc.b	nBb2, $01
000938B2 E1F9                       	smpsAlterNote       $F9
000938B4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000938B7 E107                       	smpsAlterNote       $07
000938B9 E701                       	dc.b	smpsNoAttack, $01
000938BB E1FB                       	smpsAlterNote       $FB
000938BD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000938C0 E106                       	smpsAlterNote       $06
000938C2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000938C6 E107                       	smpsAlterNote       $07
000938C8 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000938D0 E1EC                       	smpsAlterNote       $EC
000938D2 A101                       	dc.b	nAb2, $01
000938D4 E108                       	smpsAlterNote       $08
000938D6 E701                       	dc.b	smpsNoAttack, $01
000938D8 E1E7                       	smpsAlterNote       $E7
000938DA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000938DD E1F5                       	smpsAlterNote       $F5
000938DF E701                       	dc.b	smpsNoAttack, $01
000938E1 E10B                       	smpsAlterNote       $0B
000938E3 E702                       	dc.b	smpsNoAttack, $02
000938E5 E107                       	smpsAlterNote       $07
000938E7 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000938ED E106                       	smpsAlterNote       $06
000938EF 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000938F5 E10C                       	smpsAlterNote       $0C
000938F7 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000938FF E109                       	smpsAlterNote       $09
00093901 9E03                       	dc.b	nF2, $03
00093903 E10C                       	smpsAlterNote       $0C
00093905 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093909 E1EA                       	smpsAlterNote       $EA
0009390B A201                       	dc.b	nA2, $01
0009390D E106                       	smpsAlterNote       $06
0009390F E701                       	dc.b	smpsNoAttack, $01
00093911 E114                       	smpsAlterNote       $14
00093913 E701                       	dc.b	smpsNoAttack, $01
00093915 E1F0                       	smpsAlterNote       $F0
00093917 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009391A E10C                       	smpsAlterNote       $0C
0009391C E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093928 9703                       	dc.b	nBb1, $03
0009392A E116                       	smpsAlterNote       $16
0009392C 9C01                       	dc.b	nEb2, $01
0009392E E105                       	smpsAlterNote       $05
00093930 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093933 E113                       	smpsAlterNote       $13
00093935 E701                       	dc.b	smpsNoAttack, $01
00093937 E1FF                       	smpsAlterNote       $FF
00093939 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0009393C E109                       	smpsAlterNote       $09
0009393E E703                       	dc.b	smpsNoAttack, $03
00093940 E10C                       	smpsAlterNote       $0C
00093942 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0009394E 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093956 E109                       	smpsAlterNote       $09
00093958 9E03                       	dc.b	nF2, $03
0009395A E10C                       	smpsAlterNote       $0C
0009395C 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093960 E1EA                       	smpsAlterNote       $EA
00093962 A201                       	dc.b	nA2, $01
00093964 E106                       	smpsAlterNote       $06
00093966 E701                       	dc.b	smpsNoAttack, $01
00093968 E1E2                       	smpsAlterNote       $E2
0009396A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009396D E1F0                       	smpsAlterNote       $F0
0009396F E701                       	dc.b	smpsNoAttack, $01
00093971 E10C                       	smpsAlterNote       $0C
00093973 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0009397F E116                       	smpsAlterNote       $16
00093981 9C01                       	dc.b	nEb2, $01
00093983 E105                       	smpsAlterNote       $05
00093985 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093988 E1F1                       	smpsAlterNote       $F1
0009398A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0009398D E1FF                       	smpsAlterNote       $FF
0009398F E701                       	dc.b	smpsNoAttack, $01
00093991 E109                       	smpsAlterNote       $09
00093993 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093997 E10C                       	smpsAlterNote       $0C
00093999 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000939A5 E106                       	smpsAlterNote       $06
000939A7 9903                       	dc.b	nC2, $03
000939A9 E107                       	smpsAlterNote       $07
000939AB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000939AF E109                       	smpsAlterNote       $09
000939B1 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000939B7 E107                       	smpsAlterNote       $07
000939B9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000939BD E108                       	smpsAlterNote       $08
000939BF 9D03                       	dc.b	nE2, $03
000939C1 E10B                       	smpsAlterNote       $0B
000939C3 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000939C9 E109                       	smpsAlterNote       $09
000939CB 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000939D1 E10C                       	smpsAlterNote       $0C
000939D3 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000939D9 E106                       	smpsAlterNote       $06
000939DB 9903                       	dc.b	nC2, $03
000939DD E11A                       	smpsAlterNote       $1A
000939DF A301                       	dc.b	nBb2, $01
000939E1 E1F9                       	smpsAlterNote       $F9
000939E3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000939E6 E1FF                       	smpsAlterNote       $FF
000939E8 E701                       	dc.b	smpsNoAttack, $01
000939EA E111                       	smpsAlterNote       $11
000939EC E701                       	dc.b	smpsNoAttack, $01
000939EE E106                       	smpsAlterNote       $06
000939F0 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000939F7 E109                       	smpsAlterNote       $09
000939F9 A003                       	dc.b	nG2, $03
000939FB E106                       	smpsAlterNote       $06
000939FD 9907                       	dc.b	nC2, $07
000939FF E107                       	smpsAlterNote       $07
00093A01 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093A09 E10B                       	smpsAlterNote       $0B
00093A0B A203                       	dc.b	nA2, $03
00093A0D E107                       	smpsAlterNote       $07
00093A0F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093A13 E1F2                       	smpsAlterNote       $F2
00093A15 A401                       	dc.b	nB2, $01
00093A17 E1F9                       	smpsAlterNote       $F9
00093A19 E701                       	dc.b	smpsNoAttack, $01
00093A1B E107                       	smpsAlterNote       $07
00093A1D E701                       	dc.b	smpsNoAttack, $01
00093A1F E1FB                       	smpsAlterNote       $FB
00093A21 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A24 E106                       	smpsAlterNote       $06
00093A26 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A2A E107                       	smpsAlterNote       $07
00093A2C 9B03                       	dc.b	nD2, $03
00093A2E E108                       	smpsAlterNote       $08
00093A30 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093A36 E109                       	smpsAlterNote       $09
00093A38 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093A3C E1F2                       	smpsAlterNote       $F2
00093A3E A401                       	dc.b	nB2, $01
00093A40 E1F9                       	smpsAlterNote       $F9
00093A42 E701                       	dc.b	smpsNoAttack, $01
00093A44 E107                       	smpsAlterNote       $07
00093A46 E701                       	dc.b	smpsNoAttack, $01
00093A48 E1FB                       	smpsAlterNote       $FB
00093A4A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A4D E106                       	smpsAlterNote       $06
00093A4F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A53 E108                       	smpsAlterNote       $08
00093A55 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093A59 E10C                       	smpsAlterNote       $0C
00093A5B A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093A5F E107                       	smpsAlterNote       $07
00093A61 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093A67 E10B                       	smpsAlterNote       $0B
00093A69 A203                       	dc.b	nA2, $03
00093A6B E107                       	smpsAlterNote       $07
00093A6D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093A71 E1F2                       	smpsAlterNote       $F2
00093A73 A401                       	dc.b	nB2, $01
00093A75 E1FF                       	smpsAlterNote       $FF
00093A77 E701                       	dc.b	smpsNoAttack, $01
00093A79 E107                       	smpsAlterNote       $07
00093A7B E701                       	dc.b	smpsNoAttack, $01
00093A7D E1FB                       	smpsAlterNote       $FB
00093A7F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A82 E106                       	smpsAlterNote       $06
00093A84 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A88 E107                       	smpsAlterNote       $07
00093A8A 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093A8E E108                       	smpsAlterNote       $08
00093A90 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093A96 E109                       	smpsAlterNote       $09
00093A98 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093A9C E1F2                       	smpsAlterNote       $F2
00093A9E A401                       	dc.b	nB2, $01
00093AA0 E1FF                       	smpsAlterNote       $FF
00093AA2 E701                       	dc.b	smpsNoAttack, $01
00093AA4 E111                       	smpsAlterNote       $11
00093AA6 E701                       	dc.b	smpsNoAttack, $01
00093AA8 E1FB                       	smpsAlterNote       $FB
00093AAA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093AAD E106                       	smpsAlterNote       $06
00093AAF E702                       	dc.b	smpsNoAttack, $02
00093AB1 E108                       	smpsAlterNote       $08
00093AB3 9C07                       	dc.b	nEb2, $07
00093AB5 E10C                       	smpsAlterNote       $0C
00093AB7 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093ABB E107                       	smpsAlterNote       $07
00093ABD 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093AC3 E10B                       	smpsAlterNote       $0B
00093AC5 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093AC9 E107                       	smpsAlterNote       $07
00093ACB 9B03                       	dc.b	nD2, $03
00093ACD E11A                       	smpsAlterNote       $1A
00093ACF A301                       	dc.b	nBb2, $01
00093AD1 E1F2                       	smpsAlterNote       $F2
00093AD3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093AD6 E1FF                       	smpsAlterNote       $FF
00093AD8 E701                       	dc.b	smpsNoAttack, $01
00093ADA E111                       	smpsAlterNote       $11
00093ADC E701                       	dc.b	smpsNoAttack, $01
00093ADE E106                       	smpsAlterNote       $06
00093AE0 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093AE3 E107                       	smpsAlterNote       $07
00093AE5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093AE9 E108                       	smpsAlterNote       $08
00093AEB 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093AF3 E109                       	smpsAlterNote       $09
00093AF5 A003                       	dc.b	nG2, $03
00093AF7 E11A                       	smpsAlterNote       $1A
00093AF9 A301                       	dc.b	nBb2, $01
00093AFB E1F2                       	smpsAlterNote       $F2
00093AFD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093B00 E1FF                       	smpsAlterNote       $FF
00093B02 E701                       	dc.b	smpsNoAttack, $01
00093B04 E111                       	smpsAlterNote       $11
00093B06 E701                       	dc.b	smpsNoAttack, $01
00093B08 E106                       	smpsAlterNote       $06
00093B0A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093B0D E108                       	smpsAlterNote       $08
00093B0F 9C07                       	dc.b	nEb2, $07
00093B11 E10C                       	smpsAlterNote       $0C
00093B13 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093B17 E107                       	smpsAlterNote       $07
00093B19 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093B25 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093B2F E108                       	smpsAlterNote       $08
00093B31 9C06                       	dc.b	nEb2, $06
00093B33 E10C                       	smpsAlterNote       $0C
00093B35 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093B39 E108                       	smpsAlterNote       $08
00093B3B 9C03                       	dc.b	nEb2, $03
00093B3D E109                       	smpsAlterNote       $09
00093B3F A003 8001                  	dc.b	nG2, $03, nRst, $01
00093B43 E10C                       	smpsAlterNote       $0C
00093B45 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093B4D E107                       	smpsAlterNote       $07
00093B4F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093B53 F6F4 F8                    	smpsJump            music84_Jump04
00093B56                            
00093B56                            ; FM2 Data
00093B56                            music84_FM2:
00093B56 E0C0                       	smpsPan             panCenter, $00
00093B5A E10B                       	smpsAlterNote       $0B
00093B5C C603 8007                  	dc.b	nA5, $03, nRst, $07
00093B60 E109                       	smpsAlterNote       $09
00093B62 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00093B66 E108                       	smpsAlterNote       $08
00093B68 C103 8004                  	dc.b	nE5, $03, nRst, $04
00093B6E E080                       	smpsPan             panLeft, $00
00093B70 E10C                       	smpsAlterNote       $0C
00093B72 E6F9                       	smpsAlterVol        $F9
00093B74 C703                       	dc.b	nBb5, $03
00093B76 E10B                       	smpsAlterNote       $0B
00093B78 C603 8001                  	dc.b	nA5, $03, nRst, $01
00093B7C E109                       	smpsAlterNote       $09
00093B7E C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00093B84 E108                       	smpsAlterNote       $08
00093B86 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093B8A E106                       	smpsAlterNote       $06
00093B8C BD03                       	dc.b	nC5, $03
00093B8E E10B                       	smpsAlterNote       $0B
00093B90 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00093B96 E0C0                       	smpsPan             panCenter, $00
00093B98 E107                       	smpsAlterNote       $07
00093B9A E606                       	smpsAlterVol        $06
00093B9C BF03                       	dc.b	nD5, $03
00093B9E                            
00093B9E                            music84_Jump03:
00093B9E E108                       	smpsAlterNote       $08
00093BA0 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093BA4 E109                       	smpsAlterNote       $09
00093BA6 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00093BAC E10B                       	smpsAlterNote       $0B
00093BAE C607                       	dc.b	nA5, $07
00093BB0 E107                       	smpsAlterNote       $07
00093BB2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093BB6 E106                       	smpsAlterNote       $06
00093BB8 C90D                       	dc.b	nC6, $0D
00093BBA E100                       	smpsAlterNote       $00
00093BBC E701                       	dc.b	smpsNoAttack, $01
00093BBE E1FF                       	smpsAlterNote       $FF
00093BC0 E701                       	dc.b	smpsNoAttack, $01
00093BC2 E103                       	smpsAlterNote       $03
00093BC4 E701                       	dc.b	smpsNoAttack, $01
00093BC6 E109                       	smpsAlterNote       $09
00093BC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BCC E106                       	smpsAlterNote       $06
00093BCE E701                       	dc.b	smpsNoAttack, $01
00093BD0 E100                       	smpsAlterNote       $00
00093BD2 E701                       	dc.b	smpsNoAttack, $01
00093BD4 E10C                       	smpsAlterNote       $0C
00093BD6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093BDA E10B                       	smpsAlterNote       $0B
00093BDC C603                       	dc.b	nA5, $03
00093BDE E109                       	smpsAlterNote       $09
00093BE0 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093BE4 E10B                       	smpsAlterNote       $0B
00093BE6 C60D                       	dc.b	nA5, $0D
00093BE8 E105                       	smpsAlterNote       $05
00093BEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BEE E10B                       	smpsAlterNote       $0B
00093BF0 E701                       	dc.b	smpsNoAttack, $01
00093BF2 E10E                       	smpsAlterNote       $0E
00093BF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BF8 E108                       	smpsAlterNote       $08
00093BFA E701                       	dc.b	smpsNoAttack, $01
00093BFC E104                       	smpsAlterNote       $04
00093BFE E701                       	dc.b	smpsNoAttack, $01
00093C00 E105                       	smpsAlterNote       $05
00093C02 E701                       	dc.b	smpsNoAttack, $01
00093C04 E10B                       	smpsAlterNote       $0B
00093C06 E701                       	dc.b	smpsNoAttack, $01
00093C08 E10F                       	smpsAlterNote       $0F
00093C0A E701                       	dc.b	smpsNoAttack, $01
00093C0C E10B                       	smpsAlterNote       $0B
00093C0E E701                       	dc.b	smpsNoAttack, $01
00093C10 E108                       	smpsAlterNote       $08
00093C12 E701                       	dc.b	smpsNoAttack, $01
00093C14 E104                       	smpsAlterNote       $04
00093C16 E701                       	dc.b	smpsNoAttack, $01
00093C18 E108                       	smpsAlterNote       $08
00093C1A E701                       	dc.b	smpsNoAttack, $01
00093C1C E10E                       	smpsAlterNote       $0E
00093C1E E701                       	dc.b	smpsNoAttack, $01
00093C20 E10F                       	smpsAlterNote       $0F
00093C22 E701                       	dc.b	smpsNoAttack, $01
00093C24 E10B                       	smpsAlterNote       $0B
00093C26 E701                       	dc.b	smpsNoAttack, $01
00093C28 E105                       	smpsAlterNote       $05
00093C2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C2E E108                       	smpsAlterNote       $08
00093C30 E701                       	dc.b	smpsNoAttack, $01
00093C32 E10E                       	smpsAlterNote       $0E
00093C34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C38 E108                       	smpsAlterNote       $08
00093C3A E701                       	dc.b	smpsNoAttack, $01
00093C3C E105                       	smpsAlterNote       $05
00093C3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C42 E10B                       	smpsAlterNote       $0B
00093C44 E701                       	dc.b	smpsNoAttack, $01
00093C46 E10F                       	smpsAlterNote       $0F
00093C48 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00093C4C E107                       	smpsAlterNote       $07
00093C4E BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093C52 E108                       	smpsAlterNote       $08
00093C54 C103                       	dc.b	nE5, $03
00093C56 E109                       	smpsAlterNote       $09
00093C58 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00093C60 E10B                       	smpsAlterNote       $0B
00093C62 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093C66 E107                       	smpsAlterNote       $07
00093C68 BF03                       	dc.b	nD5, $03
00093C6A E106                       	smpsAlterNote       $06
00093C6C C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00093C70 E107                       	smpsAlterNote       $07
00093C72 CB03                       	dc.b	nD6, $03
00093C74 E10C                       	smpsAlterNote       $0C
00093C76 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00093C7A E10B                       	smpsAlterNote       $0B
00093C7C C604 8001                  	dc.b	nA5, $04, nRst, $01
00093C80 E109                       	smpsAlterNote       $09
00093C82 C404                       	dc.b	nG5, $04
00093C84 E10B                       	smpsAlterNote       $0B
00093C86 C60D                       	dc.b	nA5, $0D
00093C88 E108                       	smpsAlterNote       $08
00093C8A E701                       	dc.b	smpsNoAttack, $01
00093C8C E104                       	smpsAlterNote       $04
00093C8E E701                       	dc.b	smpsNoAttack, $01
00093C90 E108                       	smpsAlterNote       $08
00093C92 E701                       	dc.b	smpsNoAttack, $01
00093C94 E10B                       	smpsAlterNote       $0B
00093C96 E701                       	dc.b	smpsNoAttack, $01
00093C98 E10F                       	smpsAlterNote       $0F
00093C9A E701                       	dc.b	smpsNoAttack, $01
00093C9C E10B                       	smpsAlterNote       $0B
00093C9E E701                       	dc.b	smpsNoAttack, $01
00093CA0 E105                       	smpsAlterNote       $05
00093CA2 E701                       	dc.b	smpsNoAttack, $01
00093CA4 E104                       	smpsAlterNote       $04
00093CA6 E701                       	dc.b	smpsNoAttack, $01
00093CA8 E108                       	smpsAlterNote       $08
00093CAA E701                       	dc.b	smpsNoAttack, $01
00093CAC E10E                       	smpsAlterNote       $0E
00093CAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CB2 E10B                       	smpsAlterNote       $0B
00093CB4 E701                       	dc.b	smpsNoAttack, $01
00093CB6 E105                       	smpsAlterNote       $05
00093CB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CBC E10B                       	smpsAlterNote       $0B
00093CBE E701                       	dc.b	smpsNoAttack, $01
00093CC0 E10E                       	smpsAlterNote       $0E
00093CC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CC6 E108                       	smpsAlterNote       $08
00093CC8 E701                       	dc.b	smpsNoAttack, $01
00093CCA E104                       	smpsAlterNote       $04
00093CCC E701                       	dc.b	smpsNoAttack, $01
00093CCE E105                       	smpsAlterNote       $05
00093CD0 E701                       	dc.b	smpsNoAttack, $01
00093CD2 E10B                       	smpsAlterNote       $0B
00093CD4 E701                       	dc.b	smpsNoAttack, $01
00093CD6 E10F                       	smpsAlterNote       $0F
00093CD8 E701                       	dc.b	smpsNoAttack, $01
00093CDA E10B                       	smpsAlterNote       $0B
00093CDC E701                       	dc.b	smpsNoAttack, $01
00093CDE E108                       	smpsAlterNote       $08
00093CE0 E701                       	dc.b	smpsNoAttack, $01
00093CE2 E105                       	smpsAlterNote       $05
00093CE4 8001                       	dc.b	nRst, $01
00093CE6 E109                       	smpsAlterNote       $09
00093CE8 C401                       	dc.b	nG5, $01
00093CEA E10B                       	smpsAlterNote       $0B
00093CEC E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00093CF5 E109                       	smpsAlterNote       $09
00093CF7 C404 8001                  	dc.b	nG5, $04, nRst, $01
00093CFB E10B                       	smpsAlterNote       $0B
00093CFD C604 8001                  	dc.b	nA5, $04, nRst, $01
00093D01 E107                       	smpsAlterNote       $07
00093D03 BF0D                       	dc.b	nD5, $0D
00093D05 E101                       	smpsAlterNote       $01
00093D07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D0B E104                       	smpsAlterNote       $04
00093D0D E701                       	dc.b	smpsNoAttack, $01
00093D0F E10A                       	smpsAlterNote       $0A
00093D11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D15 E104                       	smpsAlterNote       $04
00093D17 E701                       	dc.b	smpsNoAttack, $01
00093D19 E101                       	smpsAlterNote       $01
00093D1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D1F E107                       	smpsAlterNote       $07
00093D21 E701                       	dc.b	smpsNoAttack, $01
00093D23 E10B                       	smpsAlterNote       $0B
00093D25 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093D29 E108                       	smpsAlterNote       $08
00093D2B C101                       	dc.b	nE5, $01
00093D2D E109                       	smpsAlterNote       $09
00093D2F E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00093D34 E10B                       	smpsAlterNote       $0B
00093D36 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00093D3E E108                       	smpsAlterNote       $08
00093D40 CD06                       	dc.b	nE6, $06
00093D42 E109                       	smpsAlterNote       $09
00093D44 CE07                       	dc.b	nF6, $07
00093D46 E108                       	smpsAlterNote       $08
00093D48 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00093D4C E106                       	smpsAlterNote       $06
00093D4E C903                       	dc.b	nC6, $03
00093D50 E109                       	smpsAlterNote       $09
00093D52 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093D56 E10C                       	smpsAlterNote       $0C
00093D58 C70D                       	dc.b	nBb5, $0D
00093D5A E106                       	smpsAlterNote       $06
00093D5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D60 E109                       	smpsAlterNote       $09
00093D62 E701                       	dc.b	smpsNoAttack, $01
00093D64 E10F                       	smpsAlterNote       $0F
00093D66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D6A E109                       	smpsAlterNote       $09
00093D6C E701                       	dc.b	smpsNoAttack, $01
00093D6E E106                       	smpsAlterNote       $06
00093D70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D74 E10C                       	smpsAlterNote       $0C
00093D76 E701                       	dc.b	smpsNoAttack, $01
00093D78 E110                       	smpsAlterNote       $10
00093D7A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093D7E E10B                       	smpsAlterNote       $0B
00093D80 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00093D84 E105                       	smpsAlterNote       $05
00093D86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D8A E10B                       	smpsAlterNote       $0B
00093D8C E701                       	dc.b	smpsNoAttack, $01
00093D8E E10E                       	smpsAlterNote       $0E
00093D90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D94 E108                       	smpsAlterNote       $08
00093D96 E701                       	dc.b	smpsNoAttack, $01
00093D98 E104                       	smpsAlterNote       $04
00093D9A E701                       	dc.b	smpsNoAttack, $01
00093D9C E105                       	smpsAlterNote       $05
00093D9E E701                       	dc.b	smpsNoAttack, $01
00093DA0 E10B                       	smpsAlterNote       $0B
00093DA2 E701                       	dc.b	smpsNoAttack, $01
00093DA4 E10F                       	smpsAlterNote       $0F
00093DA6 E701                       	dc.b	smpsNoAttack, $01
00093DA8 E10B                       	smpsAlterNote       $0B
00093DAA E701                       	dc.b	smpsNoAttack, $01
00093DAC E108                       	smpsAlterNote       $08
00093DAE E701                       	dc.b	smpsNoAttack, $01
00093DB0 E104                       	smpsAlterNote       $04
00093DB2 E701                       	dc.b	smpsNoAttack, $01
00093DB4 E108                       	smpsAlterNote       $08
00093DB6 E701                       	dc.b	smpsNoAttack, $01
00093DB8 E10E                       	smpsAlterNote       $0E
00093DBA E701                       	dc.b	smpsNoAttack, $01
00093DBC E10F                       	smpsAlterNote       $0F
00093DBE E701                       	dc.b	smpsNoAttack, $01
00093DC0 E10B                       	smpsAlterNote       $0B
00093DC2 E701                       	dc.b	smpsNoAttack, $01
00093DC4 E105                       	smpsAlterNote       $05
00093DC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DCA E108                       	smpsAlterNote       $08
00093DCC E701                       	dc.b	smpsNoAttack, $01
00093DCE E10E                       	smpsAlterNote       $0E
00093DD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DD4 E108                       	smpsAlterNote       $08
00093DD6 E701                       	dc.b	smpsNoAttack, $01
00093DD8 E105                       	smpsAlterNote       $05
00093DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DDE E10B                       	smpsAlterNote       $0B
00093DE0 E701                       	dc.b	smpsNoAttack, $01
00093DE2 E10F                       	smpsAlterNote       $0F
00093DE4 E701                       	dc.b	smpsNoAttack, $01
00093DE6 E10E                       	smpsAlterNote       $0E
00093DE8 E701                       	dc.b	smpsNoAttack, $01
00093DEA E108                       	smpsAlterNote       $08
00093DEC E701                       	dc.b	smpsNoAttack, $01
00093DEE E104                       	smpsAlterNote       $04
00093DF0 E701                       	dc.b	smpsNoAttack, $01
00093DF2 E108                       	smpsAlterNote       $08
00093DF4 E701                       	dc.b	smpsNoAttack, $01
00093DF6 E10E                       	smpsAlterNote       $0E
00093DF8 E701                       	dc.b	smpsNoAttack, $01
00093DFA E10F                       	smpsAlterNote       $0F
00093DFC E701                       	dc.b	smpsNoAttack, $01
00093DFE E10B                       	smpsAlterNote       $0B
00093E00 E701                       	dc.b	smpsNoAttack, $01
00093E02 E105                       	smpsAlterNote       $05
00093E04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E08 E108                       	smpsAlterNote       $08
00093E0A E701                       	dc.b	smpsNoAttack, $01
00093E0C E10E                       	smpsAlterNote       $0E
00093E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E12 E108                       	smpsAlterNote       $08
00093E14 E701                       	dc.b	smpsNoAttack, $01
00093E16 E105                       	smpsAlterNote       $05
00093E18 E701                       	dc.b	smpsNoAttack, $01
00093E1A E10B                       	smpsAlterNote       $0B
00093E1C C60D                       	dc.b	nA5, $0D
00093E1E E108                       	smpsAlterNote       $08
00093E20 E701                       	dc.b	smpsNoAttack, $01
00093E22 E104                       	smpsAlterNote       $04
00093E24 E701                       	dc.b	smpsNoAttack, $01
00093E26 E105                       	smpsAlterNote       $05
00093E28 E701                       	dc.b	smpsNoAttack, $01
00093E2A E10B                       	smpsAlterNote       $0B
00093E2C E701                       	dc.b	smpsNoAttack, $01
00093E2E E10F                       	smpsAlterNote       $0F
00093E30 E701                       	dc.b	smpsNoAttack, $01
00093E32 E10B                       	smpsAlterNote       $0B
00093E34 E701                       	dc.b	smpsNoAttack, $01
00093E36 E108                       	smpsAlterNote       $08
00093E38 E701                       	dc.b	smpsNoAttack, $01
00093E3A E104                       	smpsAlterNote       $04
00093E3C E701                       	dc.b	smpsNoAttack, $01
00093E3E E108                       	smpsAlterNote       $08
00093E40 E701                       	dc.b	smpsNoAttack, $01
00093E42 E10E                       	smpsAlterNote       $0E
00093E44 E701                       	dc.b	smpsNoAttack, $01
00093E46 E10F                       	smpsAlterNote       $0F
00093E48 E701                       	dc.b	smpsNoAttack, $01
00093E4C E109                       	smpsAlterNote       $09
00093E4E E6FF                       	smpsAlterVol        $FF
00093E50 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00093E5A E108                       	smpsAlterNote       $08
00093E5C C103 800E                  	dc.b	nE5, $03, nRst, $0E
00093E62 E107                       	smpsAlterNote       $07
00093E64 E601                       	smpsAlterVol        $01
00093E66 BF03                       	dc.b	nD5, $03
00093E68 E108                       	smpsAlterNote       $08
00093E6A C103 8001                  	dc.b	nE5, $03, nRst, $01
00093E6E E109                       	smpsAlterNote       $09
00093E70 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00093E76 E10B                       	smpsAlterNote       $0B
00093E78 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093E7C E107                       	smpsAlterNote       $07
00093E7E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093E82 E106                       	smpsAlterNote       $06
00093E84 C90D                       	dc.b	nC6, $0D
00093E86 E103                       	smpsAlterNote       $03
00093E88 E701                       	dc.b	smpsNoAttack, $01
00093E8A E1FF                       	smpsAlterNote       $FF
00093E8C E701                       	dc.b	smpsNoAttack, $01
00093E8E E103                       	smpsAlterNote       $03
00093E90 E701                       	dc.b	smpsNoAttack, $01
00093E92 E109                       	smpsAlterNote       $09
00093E94 E701                       	dc.b	smpsNoAttack, $01
00093E96 E10A                       	smpsAlterNote       $0A
00093E98 E701                       	dc.b	smpsNoAttack, $01
00093E9A E106                       	smpsAlterNote       $06
00093E9C E701                       	dc.b	smpsNoAttack, $01
00093E9E E100                       	smpsAlterNote       $00
00093EA0 E701                       	dc.b	smpsNoAttack, $01
00093EA2 E10C                       	smpsAlterNote       $0C
00093EA4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093EA8 E10B                       	smpsAlterNote       $0B
00093EAA C603                       	dc.b	nA5, $03
00093EAC E109                       	smpsAlterNote       $09
00093EAE C403 8001                  	dc.b	nG5, $03, nRst, $01
00093EB2 E10B                       	smpsAlterNote       $0B
00093EB4 C60D                       	dc.b	nA5, $0D
00093EB6 E105                       	smpsAlterNote       $05
00093EB8 E701                       	dc.b	smpsNoAttack, $01
00093EBA E104                       	smpsAlterNote       $04
00093EBC E701                       	dc.b	smpsNoAttack, $01
00093EBE E108                       	smpsAlterNote       $08
00093EC0 E701                       	dc.b	smpsNoAttack, $01
00093EC2 E10E                       	smpsAlterNote       $0E
00093EC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EC8 E10B                       	smpsAlterNote       $0B
00093ECA E701                       	dc.b	smpsNoAttack, $01
00093ECC E105                       	smpsAlterNote       $05
00093ECE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093ED2 E10B                       	smpsAlterNote       $0B
00093ED4 E701                       	dc.b	smpsNoAttack, $01
00093ED6 E10E                       	smpsAlterNote       $0E
00093ED8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EDC E108                       	smpsAlterNote       $08
00093EDE E701                       	dc.b	smpsNoAttack, $01
00093EE0 E104                       	smpsAlterNote       $04
00093EE2 E701                       	dc.b	smpsNoAttack, $01
00093EE4 E105                       	smpsAlterNote       $05
00093EE6 E701                       	dc.b	smpsNoAttack, $01
00093EE8 E10B                       	smpsAlterNote       $0B
00093EEA E701                       	dc.b	smpsNoAttack, $01
00093EEC E10F                       	smpsAlterNote       $0F
00093EEE E701                       	dc.b	smpsNoAttack, $01
00093EF0 E10B                       	smpsAlterNote       $0B
00093EF2 E701                       	dc.b	smpsNoAttack, $01
00093EF4 E108                       	smpsAlterNote       $08
00093EF6 E701                       	dc.b	smpsNoAttack, $01
00093EF8 E104                       	smpsAlterNote       $04
00093EFA E701                       	dc.b	smpsNoAttack, $01
00093EFC E108                       	smpsAlterNote       $08
00093EFE E701                       	dc.b	smpsNoAttack, $01
00093F00 E10E                       	smpsAlterNote       $0E
00093F02 E701                       	dc.b	smpsNoAttack, $01
00093F04 E10F                       	smpsAlterNote       $0F
00093F06 E701                       	dc.b	smpsNoAttack, $01
00093F08 E10B                       	smpsAlterNote       $0B
00093F0A E701                       	dc.b	smpsNoAttack, $01
00093F0C E105                       	smpsAlterNote       $05
00093F0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F12 E108                       	smpsAlterNote       $08
00093F14 E701                       	dc.b	smpsNoAttack, $01
00093F16 E10E                       	smpsAlterNote       $0E
00093F18 E701                       	dc.b	smpsNoAttack, $01
00093F1A E10F                       	smpsAlterNote       $0F
00093F1C 800F                       	dc.b	nRst, $0F
00093F1E E107                       	smpsAlterNote       $07
00093F20 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093F24 E108                       	smpsAlterNote       $08
00093F26 C103                       	dc.b	nE5, $03
00093F28 E109                       	smpsAlterNote       $09
00093F2A C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00093F30 E10B                       	smpsAlterNote       $0B
00093F32 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093F36 E107                       	smpsAlterNote       $07
00093F38 BF03                       	dc.b	nD5, $03
00093F3A E106                       	smpsAlterNote       $06
00093F3C C90E                       	dc.b	nC6, $0E
00093F3E E107                       	smpsAlterNote       $07
00093F40 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00093F44 E10C                       	smpsAlterNote       $0C
00093F46 C704                       	dc.b	nBb5, $04
00093F48 E10B                       	smpsAlterNote       $0B
00093F4A C604 8001                  	dc.b	nA5, $04, nRst, $01
00093F4E E109                       	smpsAlterNote       $09
00093F50 C404                       	dc.b	nG5, $04
00093F52 E10B                       	smpsAlterNote       $0B
00093F54 C60D                       	dc.b	nA5, $0D
00093F56 E108                       	smpsAlterNote       $08
00093F58 E701                       	dc.b	smpsNoAttack, $01
00093F5A E105                       	smpsAlterNote       $05
00093F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F60 E10B                       	smpsAlterNote       $0B
00093F62 E701                       	dc.b	smpsNoAttack, $01
00093F64 E10F                       	smpsAlterNote       $0F
00093F66 E701                       	dc.b	smpsNoAttack, $01
00093F68 E10E                       	smpsAlterNote       $0E
00093F6A E701                       	dc.b	smpsNoAttack, $01
00093F6C E108                       	smpsAlterNote       $08
00093F6E E701                       	dc.b	smpsNoAttack, $01
00093F70 E104                       	smpsAlterNote       $04
00093F72 E701                       	dc.b	smpsNoAttack, $01
00093F74 E108                       	smpsAlterNote       $08
00093F76 E701                       	dc.b	smpsNoAttack, $01
00093F78 E10B                       	smpsAlterNote       $0B
00093F7A E701                       	dc.b	smpsNoAttack, $01
00093F7C E10F                       	smpsAlterNote       $0F
00093F7E E701                       	dc.b	smpsNoAttack, $01
00093F80 E10B                       	smpsAlterNote       $0B
00093F82 E701                       	dc.b	smpsNoAttack, $01
00093F84 E105                       	smpsAlterNote       $05
00093F86 E701                       	dc.b	smpsNoAttack, $01
00093F88 E104                       	smpsAlterNote       $04
00093F8A E701                       	dc.b	smpsNoAttack, $01
00093F8C E108                       	smpsAlterNote       $08
00093F8E E701                       	dc.b	smpsNoAttack, $01
00093F90 E10E                       	smpsAlterNote       $0E
00093F92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F96 E10B                       	smpsAlterNote       $0B
00093F98 E701                       	dc.b	smpsNoAttack, $01
00093F9A E105                       	smpsAlterNote       $05
00093F9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FA0 E10B                       	smpsAlterNote       $0B
00093FA2 E701                       	dc.b	smpsNoAttack, $01
00093FA4 E10E                       	smpsAlterNote       $0E
00093FA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FAA E108                       	smpsAlterNote       $08
00093FAC E701                       	dc.b	smpsNoAttack, $01
00093FAE E105                       	smpsAlterNote       $05
00093FB0 8001                       	dc.b	nRst, $01
00093FB2 E109                       	smpsAlterNote       $09
00093FB4 C402                       	dc.b	nG5, $02
00093FB6 E10B                       	smpsAlterNote       $0B
00093FB8 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00093FC1 E109                       	smpsAlterNote       $09
00093FC3 C404                       	dc.b	nG5, $04
00093FC5 E10B                       	smpsAlterNote       $0B
00093FC7 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093FCB E107                       	smpsAlterNote       $07
00093FCD BF0D                       	dc.b	nD5, $0D
00093FCF E101                       	smpsAlterNote       $01
00093FD1 E701                       	dc.b	smpsNoAttack, $01
00093FD3 E100                       	smpsAlterNote       $00
00093FD5 E701                       	dc.b	smpsNoAttack, $01
00093FD7 E104                       	smpsAlterNote       $04
00093FD9 E701                       	dc.b	smpsNoAttack, $01
00093FDB E10A                       	smpsAlterNote       $0A
00093FDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FE1 E107                       	smpsAlterNote       $07
00093FE3 E701                       	dc.b	smpsNoAttack, $01
00093FE5 E101                       	smpsAlterNote       $01
00093FE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FEB E107                       	smpsAlterNote       $07
00093FED E701                       	dc.b	smpsNoAttack, $01
00093FEF E10A                       	smpsAlterNote       $0A
00093FF1 E701                       	dc.b	smpsNoAttack, $01
00093FF3 E10B                       	smpsAlterNote       $0B
00093FF5 8001                       	dc.b	nRst, $01
00093FF7 E108                       	smpsAlterNote       $08
00093FF9 C101                       	dc.b	nE5, $01
00093FFB E109                       	smpsAlterNote       $09
00093FFD E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00094002 E10B                       	smpsAlterNote       $0B
00094004 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0009400C E108                       	smpsAlterNote       $08
0009400E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094012 E109                       	smpsAlterNote       $09
00094014 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094018 E108                       	smpsAlterNote       $08
0009401A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009401E E106                       	smpsAlterNote       $06
00094020 C903                       	dc.b	nC6, $03
00094022 E109                       	smpsAlterNote       $09
00094024 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094028 E10C                       	smpsAlterNote       $0C
0009402A C70D                       	dc.b	nBb5, $0D
0009402C E109                       	smpsAlterNote       $09
0009402E E701                       	dc.b	smpsNoAttack, $01
00094030 E105                       	smpsAlterNote       $05
00094032 E701                       	dc.b	smpsNoAttack, $01
00094034 E109                       	smpsAlterNote       $09
00094036 E701                       	dc.b	smpsNoAttack, $01
00094038 E10F                       	smpsAlterNote       $0F
0009403A E701                       	dc.b	smpsNoAttack, $01
0009403C E110                       	smpsAlterNote       $10
0009403E E701                       	dc.b	smpsNoAttack, $01
00094040 E10C                       	smpsAlterNote       $0C
00094042 E701                       	dc.b	smpsNoAttack, $01
00094044 E106                       	smpsAlterNote       $06
00094046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009404A E109                       	smpsAlterNote       $09
0009404C E701                       	dc.b	smpsNoAttack, $01
0009404E E10F                       	smpsAlterNote       $0F
00094050 E701                       	dc.b	smpsNoAttack, $01
00094052 E110                       	smpsAlterNote       $10
00094054 8001                       	dc.b	nRst, $01
00094056 E10B                       	smpsAlterNote       $0B
00094058 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009405E E105                       	smpsAlterNote       $05
00094060 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094064 E108                       	smpsAlterNote       $08
00094066 E701                       	dc.b	smpsNoAttack, $01
00094068 E10E                       	smpsAlterNote       $0E
0009406A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009406E E108                       	smpsAlterNote       $08
00094070 E701                       	dc.b	smpsNoAttack, $01
00094072 E105                       	smpsAlterNote       $05
00094074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094078 E10B                       	smpsAlterNote       $0B
0009407A E701                       	dc.b	smpsNoAttack, $01
0009407C E10F                       	smpsAlterNote       $0F
0009407E E701                       	dc.b	smpsNoAttack, $01
00094080 E10E                       	smpsAlterNote       $0E
00094082 E701                       	dc.b	smpsNoAttack, $01
00094084 E108                       	smpsAlterNote       $08
00094086 E701                       	dc.b	smpsNoAttack, $01
00094088 E104                       	smpsAlterNote       $04
0009408A E701                       	dc.b	smpsNoAttack, $01
0009408C E108                       	smpsAlterNote       $08
0009408E E701                       	dc.b	smpsNoAttack, $01
00094090 E10B                       	smpsAlterNote       $0B
00094092 E701                       	dc.b	smpsNoAttack, $01
00094094 E10F                       	smpsAlterNote       $0F
00094096 E701                       	dc.b	smpsNoAttack, $01
00094098 E10B                       	smpsAlterNote       $0B
0009409A E701                       	dc.b	smpsNoAttack, $01
0009409C E105                       	smpsAlterNote       $05
0009409E E701                       	dc.b	smpsNoAttack, $01
000940A0 E104                       	smpsAlterNote       $04
000940A2 E701                       	dc.b	smpsNoAttack, $01
000940A4 E108                       	smpsAlterNote       $08
000940A6 E701                       	dc.b	smpsNoAttack, $01
000940A8 E10E                       	smpsAlterNote       $0E
000940AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940AE E10B                       	smpsAlterNote       $0B
000940B0 E701                       	dc.b	smpsNoAttack, $01
000940B2 E105                       	smpsAlterNote       $05
000940B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940B8 E10B                       	smpsAlterNote       $0B
000940BA E701                       	dc.b	smpsNoAttack, $01
000940BC E10E                       	smpsAlterNote       $0E
000940BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940C2 E108                       	smpsAlterNote       $08
000940C4 E701                       	dc.b	smpsNoAttack, $01
000940C6 E104                       	smpsAlterNote       $04
000940C8 E701                       	dc.b	smpsNoAttack, $01
000940CA E105                       	smpsAlterNote       $05
000940CC E701                       	dc.b	smpsNoAttack, $01
000940CE E10B                       	smpsAlterNote       $0B
000940D0 E701                       	dc.b	smpsNoAttack, $01
000940D2 E10F                       	smpsAlterNote       $0F
000940D4 E701                       	dc.b	smpsNoAttack, $01
000940D6 E10B                       	smpsAlterNote       $0B
000940D8 E701                       	dc.b	smpsNoAttack, $01
000940DA E108                       	smpsAlterNote       $08
000940DC E701                       	dc.b	smpsNoAttack, $01
000940DE E104                       	smpsAlterNote       $04
000940E0 E701                       	dc.b	smpsNoAttack, $01
000940E2 E108                       	smpsAlterNote       $08
000940E4 E701                       	dc.b	smpsNoAttack, $01
000940E6 E10E                       	smpsAlterNote       $0E
000940E8 E701                       	dc.b	smpsNoAttack, $01
000940EA E10F                       	smpsAlterNote       $0F
000940EC E701                       	dc.b	smpsNoAttack, $01
000940EE E10B                       	smpsAlterNote       $0B
000940F0 E701                       	dc.b	smpsNoAttack, $01
000940F2 E105                       	smpsAlterNote       $05
000940F4 E701                       	dc.b	smpsNoAttack, $01
000940F6 E10B                       	smpsAlterNote       $0B
000940F8 C60E                       	dc.b	nA5, $0E
000940FA E105                       	smpsAlterNote       $05
000940FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094100 E10B                       	smpsAlterNote       $0B
00094102 E701                       	dc.b	smpsNoAttack, $01
00094104 E10E                       	smpsAlterNote       $0E
00094106 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009410A E108                       	smpsAlterNote       $08
0009410C E701                       	dc.b	smpsNoAttack, $01
0009410E E104                       	smpsAlterNote       $04
00094110 E701                       	dc.b	smpsNoAttack, $01
00094112 E105                       	smpsAlterNote       $05
00094114 E701                       	dc.b	smpsNoAttack, $01
00094116 E10B                       	smpsAlterNote       $0B
00094118 E701                       	dc.b	smpsNoAttack, $01
0009411A E10F                       	smpsAlterNote       $0F
0009411C E701                       	dc.b	smpsNoAttack, $01
0009411E E10B                       	smpsAlterNote       $0B
00094120 E701                       	dc.b	smpsNoAttack, $01
00094122 E108                       	smpsAlterNote       $08
00094124 E701                       	dc.b	smpsNoAttack, $01
00094126 E104                       	smpsAlterNote       $04
00094128 E701                       	dc.b	smpsNoAttack, $01
0009412A E108                       	smpsAlterNote       $08
0009412C E701                       	dc.b	smpsNoAttack, $01
0009412E E10E                       	smpsAlterNote       $0E
00094130 E701                       	dc.b	smpsNoAttack, $01
00094132 E10F                       	smpsAlterNote       $0F
00094134 E701                       	dc.b	smpsNoAttack, $01
00094136 E10B                       	smpsAlterNote       $0B
00094138 E701                       	dc.b	smpsNoAttack, $01
0009413A E105                       	smpsAlterNote       $05
0009413C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094140 E108                       	smpsAlterNote       $08
00094142 E701                       	dc.b	smpsNoAttack, $01
00094144 E10E                       	smpsAlterNote       $0E
00094146 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009414A E108                       	smpsAlterNote       $08
0009414C E701                       	dc.b	smpsNoAttack, $01
0009414E E105                       	smpsAlterNote       $05
00094150 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094154 E10B                       	smpsAlterNote       $0B
00094156 E701                       	dc.b	smpsNoAttack, $01
00094158 E10F                       	smpsAlterNote       $0F
0009415A E701                       	dc.b	smpsNoAttack, $01
0009415C E10E                       	smpsAlterNote       $0E
0009415E E701                       	dc.b	smpsNoAttack, $01
00094160 E108                       	smpsAlterNote       $08
00094162 E701                       	dc.b	smpsNoAttack, $01
00094164 E104                       	smpsAlterNote       $04
00094166 E701                       	dc.b	smpsNoAttack, $01
00094168 E108                       	smpsAlterNote       $08
0009416A E701                       	dc.b	smpsNoAttack, $01
0009416C E10E                       	smpsAlterNote       $0E
0009416E E701                       	dc.b	smpsNoAttack, $01
00094170 E10F                       	smpsAlterNote       $0F
00094172 E701                       	dc.b	smpsNoAttack, $01
00094174 E10B                       	smpsAlterNote       $0B
00094176 E701                       	dc.b	smpsNoAttack, $01
00094178 E105                       	smpsAlterNote       $05
0009417A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009417E E108                       	smpsAlterNote       $08
00094180 E701                       	dc.b	smpsNoAttack, $01
00094182 E10E                       	smpsAlterNote       $0E
00094184 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094188 E108                       	smpsAlterNote       $08
0009418A E701                       	dc.b	smpsNoAttack, $01
0009418C E105                       	smpsAlterNote       $05
0009418E E701                       	dc.b	smpsNoAttack, $01
00094192 E10B                       	smpsAlterNote       $0B
00094194 E6FD                       	smpsAlterVol        $FD
00094196 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009419A E109                       	smpsAlterNote       $09
0009419C C404                       	dc.b	nG5, $04
0009419E E10B                       	smpsAlterNote       $0B
000941A0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000941A4 E107                       	smpsAlterNote       $07
000941A6 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000941AC E10B                       	smpsAlterNote       $0B
000941AE C604                       	dc.b	nA5, $04
000941B0 E109                       	smpsAlterNote       $09
000941B2 C404 8001                  	dc.b	nG5, $04, nRst, $01
000941B6 E10B                       	smpsAlterNote       $0B
000941B8 C604                       	dc.b	nA5, $04
000941BA E108                       	smpsAlterNote       $08
000941BC C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000941C4 E106                       	smpsAlterNote       $06
000941C6 C904 8001                  	dc.b	nC6, $04, nRst, $01
000941CA E10C                       	smpsAlterNote       $0C
000941CC C704                       	dc.b	nBb5, $04
000941CE E10B                       	smpsAlterNote       $0B
000941D0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000941D4 E109                       	smpsAlterNote       $09
000941D6 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000941E0 E10B                       	smpsAlterNote       $0B
000941E2 C60D                       	dc.b	nA5, $0D
000941E4 E108                       	smpsAlterNote       $08
000941E6 E701                       	dc.b	smpsNoAttack, $01
000941E8 E104                       	smpsAlterNote       $04
000941EA E701                       	dc.b	smpsNoAttack, $01
000941EC E108                       	smpsAlterNote       $08
000941EE E701                       	dc.b	smpsNoAttack, $01
000941F0 E10E                       	smpsAlterNote       $0E
000941F2 E701                       	dc.b	smpsNoAttack, $01
000941F4 E10F                       	smpsAlterNote       $0F
000941F6 E701                       	dc.b	smpsNoAttack, $01
000941F8 E10B                       	smpsAlterNote       $0B
000941FA E701                       	dc.b	smpsNoAttack, $01
000941FC E105                       	smpsAlterNote       $05
000941FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094202 E108                       	smpsAlterNote       $08
00094204 E701                       	dc.b	smpsNoAttack, $01
00094206 E10E                       	smpsAlterNote       $0E
00094208 E701                       	dc.b	smpsNoAttack, $01
0009420A E10F                       	smpsAlterNote       $0F
0009420C 8001                       	dc.b	nRst, $01
0009420E E109                       	smpsAlterNote       $09
00094210 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00094216 E108                       	smpsAlterNote       $08
00094218 C10D                       	dc.b	nE5, $0D
0009421A E102                       	smpsAlterNote       $02
0009421C E701                       	dc.b	smpsNoAttack, $01
0009421E E101                       	smpsAlterNote       $01
00094220 E701                       	dc.b	smpsNoAttack, $01
00094222 E105                       	smpsAlterNote       $05
00094224 E701                       	dc.b	smpsNoAttack, $01
00094226 E10B                       	smpsAlterNote       $0B
00094228 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009422C E108                       	smpsAlterNote       $08
0009422E E701                       	dc.b	smpsNoAttack, $01
00094230 E102                       	smpsAlterNote       $02
00094232 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094236 E108                       	smpsAlterNote       $08
00094238 E701                       	dc.b	smpsNoAttack, $01
0009423A E10B                       	smpsAlterNote       $0B
0009423C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094240 E105                       	smpsAlterNote       $05
00094242 E701                       	dc.b	smpsNoAttack, $01
00094244 E101                       	smpsAlterNote       $01
00094246 E701                       	dc.b	smpsNoAttack, $01
00094248 E102                       	smpsAlterNote       $02
0009424A E701                       	dc.b	smpsNoAttack, $01
0009424C E108                       	smpsAlterNote       $08
0009424E E701                       	dc.b	smpsNoAttack, $01
00094250 E10C                       	smpsAlterNote       $0C
00094252 E701                       	dc.b	smpsNoAttack, $01
00094254 E108                       	smpsAlterNote       $08
00094256 E701                       	dc.b	smpsNoAttack, $01
00094258 E105                       	smpsAlterNote       $05
0009425A E701                       	dc.b	smpsNoAttack, $01
0009425C E101                       	smpsAlterNote       $01
0009425E E701                       	dc.b	smpsNoAttack, $01
00094260 E105                       	smpsAlterNote       $05
00094262 E701                       	dc.b	smpsNoAttack, $01
00094264 E10B                       	smpsAlterNote       $0B
00094266 E701                       	dc.b	smpsNoAttack, $01
00094268 E10C                       	smpsAlterNote       $0C
0009426A E701                       	dc.b	smpsNoAttack, $01
0009426C E108                       	smpsAlterNote       $08
0009426E E701                       	dc.b	smpsNoAttack, $01
00094270 E102                       	smpsAlterNote       $02
00094272 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094276 E105                       	smpsAlterNote       $05
00094278 E701                       	dc.b	smpsNoAttack, $01
0009427A E10B                       	smpsAlterNote       $0B
0009427C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094280 E105                       	smpsAlterNote       $05
00094282 E701                       	dc.b	smpsNoAttack, $01
00094284 E102                       	smpsAlterNote       $02
00094286 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009428A E108                       	smpsAlterNote       $08
0009428C E701                       	dc.b	smpsNoAttack, $01
0009428E E10C                       	smpsAlterNote       $0C
00094290 E701                       	dc.b	smpsNoAttack, $01
00094292 E10B                       	smpsAlterNote       $0B
00094294 E701                       	dc.b	smpsNoAttack, $01
00094296 E105                       	smpsAlterNote       $05
00094298 E701                       	dc.b	smpsNoAttack, $01
0009429A E101                       	smpsAlterNote       $01
0009429C E701                       	dc.b	smpsNoAttack, $01
0009429E E105                       	smpsAlterNote       $05
000942A0 E701                       	dc.b	smpsNoAttack, $01
000942A2 E108                       	smpsAlterNote       $08
000942A4 E701                       	dc.b	smpsNoAttack, $01
000942A6 E10C                       	smpsAlterNote       $0C
000942A8 E701                       	dc.b	smpsNoAttack, $01
000942AA E108                       	smpsAlterNote       $08
000942AC E701                       	dc.b	smpsNoAttack, $01
000942AE E102                       	smpsAlterNote       $02
000942B0 E701                       	dc.b	smpsNoAttack, $01
000942B2 E101                       	smpsAlterNote       $01
000942B4 E701                       	dc.b	smpsNoAttack, $01
000942B6 E105                       	smpsAlterNote       $05
000942B8 E701                       	dc.b	smpsNoAttack, $01
000942BA E10B                       	smpsAlterNote       $0B
000942BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942C0 E108                       	smpsAlterNote       $08
000942C2 E701                       	dc.b	smpsNoAttack, $01
000942C4 E102                       	smpsAlterNote       $02
000942C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942CA E108                       	smpsAlterNote       $08
000942CC E701                       	dc.b	smpsNoAttack, $01
000942CE E10B                       	smpsAlterNote       $0B
000942D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942D4 E105                       	smpsAlterNote       $05
000942D6 E701                       	dc.b	smpsNoAttack, $01
000942D8 E101                       	smpsAlterNote       $01
000942DA E701                       	dc.b	smpsNoAttack, $01
000942DC E102                       	smpsAlterNote       $02
000942DE E701                       	dc.b	smpsNoAttack, $01
000942E0 E108                       	smpsAlterNote       $08
000942E2 E701                       	dc.b	smpsNoAttack, $01
000942E4 E10C                       	smpsAlterNote       $0C
000942E6 E701                       	dc.b	smpsNoAttack, $01
000942E8 E108                       	smpsAlterNote       $08
000942EA E701                       	dc.b	smpsNoAttack, $01
000942EC E105                       	smpsAlterNote       $05
000942EE E701                       	dc.b	smpsNoAttack, $01
000942F0 E101                       	smpsAlterNote       $01
000942F2 E701                       	dc.b	smpsNoAttack, $01
000942F4 E105                       	smpsAlterNote       $05
000942F6 E701                       	dc.b	smpsNoAttack, $01
000942F8 E10B                       	smpsAlterNote       $0B
000942FA E701                       	dc.b	smpsNoAttack, $01
000942FC E10C                       	smpsAlterNote       $0C
000942FE E701                       	dc.b	smpsNoAttack, $01
00094300 E108                       	smpsAlterNote       $08
00094302 E701                       	dc.b	smpsNoAttack, $01
00094304 E102                       	smpsAlterNote       $02
00094306 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009430A E105                       	smpsAlterNote       $05
0009430C E701                       	dc.b	smpsNoAttack, $01
0009430E E10B                       	smpsAlterNote       $0B
00094310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094314 E105                       	smpsAlterNote       $05
00094316 E701                       	dc.b	smpsNoAttack, $01
00094318 E101                       	smpsAlterNote       $01
0009431A E701                       	dc.b	smpsNoAttack, $01
0009431C E102                       	smpsAlterNote       $02
0009431E E701                       	dc.b	smpsNoAttack, $01
00094320 E108                       	smpsAlterNote       $08
00094322 E701                       	dc.b	smpsNoAttack, $01
00094324 E10C                       	smpsAlterNote       $0C
00094326 E701                       	dc.b	smpsNoAttack, $01
00094328 E108                       	smpsAlterNote       $08
0009432A E701                       	dc.b	smpsNoAttack, $01
0009432C E105                       	smpsAlterNote       $05
0009432E E701                       	dc.b	smpsNoAttack, $01
00094330 E101                       	smpsAlterNote       $01
00094332 E701                       	dc.b	smpsNoAttack, $01
00094334 E105                       	smpsAlterNote       $05
00094336 E701                       	dc.b	smpsNoAttack, $01
00094338 E10B                       	smpsAlterNote       $0B
0009433A E701                       	dc.b	smpsNoAttack, $01
0009433C E10C                       	smpsAlterNote       $0C
0009433E E701                       	dc.b	smpsNoAttack, $01
00094340 E108                       	smpsAlterNote       $08
00094342 E701                       	dc.b	smpsNoAttack, $01
00094344 E102                       	smpsAlterNote       $02
00094346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009434A E105                       	smpsAlterNote       $05
0009434C E701                       	dc.b	smpsNoAttack, $01
0009434E E10B                       	smpsAlterNote       $0B
00094350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094354 E105                       	smpsAlterNote       $05
00094356 E701                       	dc.b	smpsNoAttack, $01
00094358 E102                       	smpsAlterNote       $02
0009435A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009435E E108                       	smpsAlterNote       $08
00094360 E701                       	dc.b	smpsNoAttack, $01
00094362 E10C                       	smpsAlterNote       $0C
00094364 E701                       	dc.b	smpsNoAttack, $01
00094366 E10B                       	smpsAlterNote       $0B
00094368 E701                       	dc.b	smpsNoAttack, $01
0009436A E105                       	smpsAlterNote       $05
0009436C E701                       	dc.b	smpsNoAttack, $01
0009436E E101                       	smpsAlterNote       $01
00094370 E701                       	dc.b	smpsNoAttack, $01
00094372 E105                       	smpsAlterNote       $05
00094374 E701                       	dc.b	smpsNoAttack, $01
00094376 E108                       	smpsAlterNote       $08
00094378 E701                       	dc.b	smpsNoAttack, $01
0009437A E10C                       	smpsAlterNote       $0C
0009437C E701                       	dc.b	smpsNoAttack, $01
00094380 E10B                       	smpsAlterNote       $0B
00094382 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094386 E109                       	smpsAlterNote       $09
00094388 C404                       	dc.b	nG5, $04
0009438A E10B                       	smpsAlterNote       $0B
0009438C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094390 E107                       	smpsAlterNote       $07
00094392 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094398 E10B                       	smpsAlterNote       $0B
0009439A C604                       	dc.b	nA5, $04
0009439C E109                       	smpsAlterNote       $09
0009439E C404 8001                  	dc.b	nG5, $04, nRst, $01
000943A2 E10B                       	smpsAlterNote       $0B
000943A4 C604                       	dc.b	nA5, $04
000943A6 E108                       	smpsAlterNote       $08
000943A8 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000943AE E106                       	smpsAlterNote       $06
000943B0 C904 8001                  	dc.b	nC6, $04, nRst, $01
000943B4 E10C                       	smpsAlterNote       $0C
000943B6 C704                       	dc.b	nBb5, $04
000943B8 E10B                       	smpsAlterNote       $0B
000943BA C604 8001                  	dc.b	nA5, $04, nRst, $01
000943BE E109                       	smpsAlterNote       $09
000943C0 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000943CA E10B                       	smpsAlterNote       $0B
000943CC C60D                       	dc.b	nA5, $0D
000943CE E108                       	smpsAlterNote       $08
000943D0 E701                       	dc.b	smpsNoAttack, $01
000943D2 E104                       	smpsAlterNote       $04
000943D4 E701                       	dc.b	smpsNoAttack, $01
000943D6 E108                       	smpsAlterNote       $08
000943D8 E701                       	dc.b	smpsNoAttack, $01
000943DA E10B                       	smpsAlterNote       $0B
000943DC E701                       	dc.b	smpsNoAttack, $01
000943DE E10F                       	smpsAlterNote       $0F
000943E0 E701                       	dc.b	smpsNoAttack, $01
000943E2 E10B                       	smpsAlterNote       $0B
000943E4 E701                       	dc.b	smpsNoAttack, $01
000943E6 E105                       	smpsAlterNote       $05
000943E8 E701                       	dc.b	smpsNoAttack, $01
000943EA E104                       	smpsAlterNote       $04
000943EC E701                       	dc.b	smpsNoAttack, $01
000943EE E108                       	smpsAlterNote       $08
000943F0 E701                       	dc.b	smpsNoAttack, $01
000943F2 E10E                       	smpsAlterNote       $0E
000943F4 E701                       	dc.b	smpsNoAttack, $01
000943F6 E10F                       	smpsAlterNote       $0F
000943F8 8001                       	dc.b	nRst, $01
000943FA E109                       	smpsAlterNote       $09
000943FC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00094402 E108                       	smpsAlterNote       $08
00094404 C10D                       	dc.b	nE5, $0D
00094406 E105                       	smpsAlterNote       $05
00094408 E701                       	dc.b	smpsNoAttack, $01
0009440A E101                       	smpsAlterNote       $01
0009440C E701                       	dc.b	smpsNoAttack, $01
0009440E E105                       	smpsAlterNote       $05
00094410 E701                       	dc.b	smpsNoAttack, $01
00094412 E10B                       	smpsAlterNote       $0B
00094414 E701                       	dc.b	smpsNoAttack, $01
00094416 E10C                       	smpsAlterNote       $0C
00094418 E701                       	dc.b	smpsNoAttack, $01
0009441A E108                       	smpsAlterNote       $08
0009441C E701                       	dc.b	smpsNoAttack, $01
0009441E E102                       	smpsAlterNote       $02
00094420 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094424 E105                       	smpsAlterNote       $05
00094426 E701                       	dc.b	smpsNoAttack, $01
00094428 E10B                       	smpsAlterNote       $0B
0009442A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009442E E105                       	smpsAlterNote       $05
00094430 E701                       	dc.b	smpsNoAttack, $01
00094432 E102                       	smpsAlterNote       $02
00094434 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094438 E108                       	smpsAlterNote       $08
0009443A E701                       	dc.b	smpsNoAttack, $01
0009443C E10C                       	smpsAlterNote       $0C
0009443E E701                       	dc.b	smpsNoAttack, $01
00094440 E10B                       	smpsAlterNote       $0B
00094442 E701                       	dc.b	smpsNoAttack, $01
00094444 E105                       	smpsAlterNote       $05
00094446 E701                       	dc.b	smpsNoAttack, $01
00094448 E101                       	smpsAlterNote       $01
0009444A E701                       	dc.b	smpsNoAttack, $01
0009444C E105                       	smpsAlterNote       $05
0009444E E701                       	dc.b	smpsNoAttack, $01
00094450 E108                       	smpsAlterNote       $08
00094452 E701                       	dc.b	smpsNoAttack, $01
00094454 E10C                       	smpsAlterNote       $0C
00094456 E701                       	dc.b	smpsNoAttack, $01
00094458 E108                       	smpsAlterNote       $08
0009445A E701                       	dc.b	smpsNoAttack, $01
0009445C E102                       	smpsAlterNote       $02
0009445E E701                       	dc.b	smpsNoAttack, $01
00094460 E101                       	smpsAlterNote       $01
00094462 E701                       	dc.b	smpsNoAttack, $01
00094464 E105                       	smpsAlterNote       $05
00094466 E701                       	dc.b	smpsNoAttack, $01
00094468 E10B                       	smpsAlterNote       $0B
0009446A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009446E E108                       	smpsAlterNote       $08
00094470 E701                       	dc.b	smpsNoAttack, $01
00094472 E102                       	smpsAlterNote       $02
00094474 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094478 E108                       	smpsAlterNote       $08
0009447A E701                       	dc.b	smpsNoAttack, $01
0009447C E10B                       	smpsAlterNote       $0B
0009447E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094482 E105                       	smpsAlterNote       $05
00094484 E701                       	dc.b	smpsNoAttack, $01
00094486 E101                       	smpsAlterNote       $01
00094488 E701                       	dc.b	smpsNoAttack, $01
0009448A E102                       	smpsAlterNote       $02
0009448C E701                       	dc.b	smpsNoAttack, $01
0009448E E108                       	smpsAlterNote       $08
00094490 E701                       	dc.b	smpsNoAttack, $01
00094492 E10C                       	smpsAlterNote       $0C
00094494 E701                       	dc.b	smpsNoAttack, $01
00094496 E108                       	smpsAlterNote       $08
00094498 E701                       	dc.b	smpsNoAttack, $01
0009449A E105                       	smpsAlterNote       $05
0009449C E701                       	dc.b	smpsNoAttack, $01
0009449E E101                       	smpsAlterNote       $01
000944A0 E701                       	dc.b	smpsNoAttack, $01
000944A2 E105                       	smpsAlterNote       $05
000944A4 E701                       	dc.b	smpsNoAttack, $01
000944A6 E10B                       	smpsAlterNote       $0B
000944A8 E701                       	dc.b	smpsNoAttack, $01
000944AA E10C                       	smpsAlterNote       $0C
000944AC E701                       	dc.b	smpsNoAttack, $01
000944AE E108                       	smpsAlterNote       $08
000944B0 E701                       	dc.b	smpsNoAttack, $01
000944B2 E102                       	smpsAlterNote       $02
000944B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944B8 E108                       	smpsAlterNote       $08
000944BA E701                       	dc.b	smpsNoAttack, $01
000944BC E10B                       	smpsAlterNote       $0B
000944BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944C2 E105                       	smpsAlterNote       $05
000944C4 E701                       	dc.b	smpsNoAttack, $01
000944C6 E101                       	smpsAlterNote       $01
000944C8 E701                       	dc.b	smpsNoAttack, $01
000944CA E102                       	smpsAlterNote       $02
000944CC E701                       	dc.b	smpsNoAttack, $01
000944CE E108                       	smpsAlterNote       $08
000944D0 E701                       	dc.b	smpsNoAttack, $01
000944D2 E10C                       	smpsAlterNote       $0C
000944D4 E701                       	dc.b	smpsNoAttack, $01
000944D6 E108                       	smpsAlterNote       $08
000944D8 E701                       	dc.b	smpsNoAttack, $01
000944DA E105                       	smpsAlterNote       $05
000944DC E701                       	dc.b	smpsNoAttack, $01
000944DE E101                       	smpsAlterNote       $01
000944E0 E701                       	dc.b	smpsNoAttack, $01
000944E2 E105                       	smpsAlterNote       $05
000944E4 E701                       	dc.b	smpsNoAttack, $01
000944E6 E10B                       	smpsAlterNote       $0B
000944E8 E701                       	dc.b	smpsNoAttack, $01
000944EA E10C                       	smpsAlterNote       $0C
000944EC E701                       	dc.b	smpsNoAttack, $01
000944EE E108                       	smpsAlterNote       $08
000944F0 E701                       	dc.b	smpsNoAttack, $01
000944F2 E102                       	smpsAlterNote       $02
000944F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944F8 E105                       	smpsAlterNote       $05
000944FA E701                       	dc.b	smpsNoAttack, $01
000944FC E10B                       	smpsAlterNote       $0B
000944FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094502 E105                       	smpsAlterNote       $05
00094504 E701                       	dc.b	smpsNoAttack, $01
00094506 E102                       	smpsAlterNote       $02
00094508 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009450C E108                       	smpsAlterNote       $08
0009450E E701                       	dc.b	smpsNoAttack, $01
00094510 E10C                       	smpsAlterNote       $0C
00094512 E701                       	dc.b	smpsNoAttack, $01
00094514 E10B                       	smpsAlterNote       $0B
00094516 E701                       	dc.b	smpsNoAttack, $01
00094518 E105                       	smpsAlterNote       $05
0009451A E701                       	dc.b	smpsNoAttack, $01
0009451C E101                       	smpsAlterNote       $01
0009451E E701                       	dc.b	smpsNoAttack, $01
00094520 E105                       	smpsAlterNote       $05
00094522 E701                       	dc.b	smpsNoAttack, $01
00094524 E108                       	smpsAlterNote       $08
00094526 E701                       	dc.b	smpsNoAttack, $01
00094528 E10C                       	smpsAlterNote       $0C
0009452A E701                       	dc.b	smpsNoAttack, $01
0009452C E108                       	smpsAlterNote       $08
0009452E E701                       	dc.b	smpsNoAttack, $01
00094530 E102                       	smpsAlterNote       $02
00094532 E701                       	dc.b	smpsNoAttack, $01
00094534 E101                       	smpsAlterNote       $01
00094536 E701                       	dc.b	smpsNoAttack, $01
00094538 E105                       	smpsAlterNote       $05
0009453A E701                       	dc.b	smpsNoAttack, $01
0009453C E10B                       	smpsAlterNote       $0B
0009453E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094542 E108                       	smpsAlterNote       $08
00094544 E701                       	dc.b	smpsNoAttack, $01
00094546 E102                       	smpsAlterNote       $02
00094548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009454C E108                       	smpsAlterNote       $08
0009454E E701                       	dc.b	smpsNoAttack, $01
00094550 E10B                       	smpsAlterNote       $0B
00094552 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094556 E105                       	smpsAlterNote       $05
00094558 E701                       	dc.b	smpsNoAttack, $01
0009455A E102                       	smpsAlterNote       $02
0009455C 8001                       	dc.b	nRst, $01
0009455E E107                       	smpsAlterNote       $07
00094560 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00094564 E108                       	smpsAlterNote       $08
00094566 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0009456A E102                       	smpsAlterNote       $02
0009456C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094570 E108                       	smpsAlterNote       $08
00094572 E701                       	dc.b	smpsNoAttack, $01
00094574 E10B                       	smpsAlterNote       $0B
00094576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009457A E105                       	smpsAlterNote       $05
0009457C E701                       	dc.b	smpsNoAttack, $01
0009457E E101                       	smpsAlterNote       $01
00094580 E701                       	dc.b	smpsNoAttack, $01
00094582 E102                       	smpsAlterNote       $02
00094584 E701                       	dc.b	smpsNoAttack, $01
00094586 E108                       	smpsAlterNote       $08
00094588 E701                       	dc.b	smpsNoAttack, $01
0009458A E10C                       	smpsAlterNote       $0C
0009458C E701                       	dc.b	smpsNoAttack, $01
0009458E E108                       	smpsAlterNote       $08
00094590 E701                       	dc.b	smpsNoAttack, $01
00094592 E105                       	smpsAlterNote       $05
00094594 E701                       	dc.b	smpsNoAttack, $01
00094596 E101                       	smpsAlterNote       $01
00094598 E701                       	dc.b	smpsNoAttack, $01
0009459A E105                       	smpsAlterNote       $05
0009459C E701                       	dc.b	smpsNoAttack, $01
0009459E E10B                       	smpsAlterNote       $0B
000945A0 E701                       	dc.b	smpsNoAttack, $01
000945A2 E10C                       	smpsAlterNote       $0C
000945A4 E701                       	dc.b	smpsNoAttack, $01
000945A6 E108                       	smpsAlterNote       $08
000945A8 E701                       	dc.b	smpsNoAttack, $01
000945AA E102                       	smpsAlterNote       $02
000945AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945B0 E105                       	smpsAlterNote       $05
000945B2 E701                       	dc.b	smpsNoAttack, $01
000945B4 E10B                       	smpsAlterNote       $0B
000945B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945BA E105                       	smpsAlterNote       $05
000945BC E701                       	dc.b	smpsNoAttack, $01
000945BE E102                       	smpsAlterNote       $02
000945C0 E701                       	dc.b	smpsNoAttack, $01
000945C2 E109                       	smpsAlterNote       $09
000945C4 C40A C207                  	dc.b	nG5, $0A, nF5, $07
000945C8 E108                       	smpsAlterNote       $08
000945CA C10D                       	dc.b	nE5, $0D
000945CC E105                       	smpsAlterNote       $05
000945CE E701                       	dc.b	smpsNoAttack, $01
000945D0 E101                       	smpsAlterNote       $01
000945D2 E701                       	dc.b	smpsNoAttack, $01
000945D4 E102                       	smpsAlterNote       $02
000945D6 E701                       	dc.b	smpsNoAttack, $01
000945D8 E108                       	smpsAlterNote       $08
000945DA E701                       	dc.b	smpsNoAttack, $01
000945DC E10C                       	smpsAlterNote       $0C
000945DE E701                       	dc.b	smpsNoAttack, $01
000945E0 E108                       	smpsAlterNote       $08
000945E2 E701                       	dc.b	smpsNoAttack, $01
000945E4 E105                       	smpsAlterNote       $05
000945E6 E701                       	dc.b	smpsNoAttack, $01
000945E8 E101                       	smpsAlterNote       $01
000945EA E701                       	dc.b	smpsNoAttack, $01
000945EC E105                       	smpsAlterNote       $05
000945EE E701                       	dc.b	smpsNoAttack, $01
000945F0 E10B                       	smpsAlterNote       $0B
000945F2 E701                       	dc.b	smpsNoAttack, $01
000945F4 E10C                       	smpsAlterNote       $0C
000945F6 E701                       	dc.b	smpsNoAttack, $01
000945F8 E108                       	smpsAlterNote       $08
000945FA E701                       	dc.b	smpsNoAttack, $01
000945FC E102                       	smpsAlterNote       $02
000945FE E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00094606 E10B                       	smpsAlterNote       $0B
00094608 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009460C E10C                       	smpsAlterNote       $0C
0009460E BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00094612 E10B                       	smpsAlterNote       $0B
00094614 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0009461A E107                       	smpsAlterNote       $07
0009461C BF03                       	dc.b	nD5, $03
0009461E E108                       	smpsAlterNote       $08
00094620 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094624 E109                       	smpsAlterNote       $09
00094626 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0009462C E10B                       	smpsAlterNote       $0B
0009462E C606 8001                  	dc.b	nA5, $06, nRst, $01
00094632 E107                       	smpsAlterNote       $07
00094634 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094638 E106                       	smpsAlterNote       $06
0009463A C90D                       	dc.b	nC6, $0D
0009463C E103                       	smpsAlterNote       $03
0009463E E701                       	dc.b	smpsNoAttack, $01
00094640 E1FF                       	smpsAlterNote       $FF
00094642 E701                       	dc.b	smpsNoAttack, $01
00094644 E103                       	smpsAlterNote       $03
00094646 E701                       	dc.b	smpsNoAttack, $01
00094648 E109                       	smpsAlterNote       $09
0009464A E701                       	dc.b	smpsNoAttack, $01
0009464C E10A                       	smpsAlterNote       $0A
0009464E E701                       	dc.b	smpsNoAttack, $01
00094650 E106                       	smpsAlterNote       $06
00094652 E701                       	dc.b	smpsNoAttack, $01
00094654 E100                       	smpsAlterNote       $00
00094656 E701                       	dc.b	smpsNoAttack, $01
00094658 E10C                       	smpsAlterNote       $0C
0009465A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009465E E10B                       	smpsAlterNote       $0B
00094660 C603                       	dc.b	nA5, $03
00094662 E109                       	smpsAlterNote       $09
00094664 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094668 E10B                       	smpsAlterNote       $0B
0009466A C60D                       	dc.b	nA5, $0D
0009466C E105                       	smpsAlterNote       $05
0009466E E701                       	dc.b	smpsNoAttack, $01
00094670 E104                       	smpsAlterNote       $04
00094672 E701                       	dc.b	smpsNoAttack, $01
00094674 E108                       	smpsAlterNote       $08
00094676 E701                       	dc.b	smpsNoAttack, $01
00094678 E10E                       	smpsAlterNote       $0E
0009467A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009467E E10B                       	smpsAlterNote       $0B
00094680 E701                       	dc.b	smpsNoAttack, $01
00094682 E105                       	smpsAlterNote       $05
00094684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094688 E10B                       	smpsAlterNote       $0B
0009468A E701                       	dc.b	smpsNoAttack, $01
0009468C E10E                       	smpsAlterNote       $0E
0009468E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094692 E108                       	smpsAlterNote       $08
00094694 E701                       	dc.b	smpsNoAttack, $01
00094696 E104                       	smpsAlterNote       $04
00094698 E701                       	dc.b	smpsNoAttack, $01
0009469A E105                       	smpsAlterNote       $05
0009469C E701                       	dc.b	smpsNoAttack, $01
0009469E E10B                       	smpsAlterNote       $0B
000946A0 E701                       	dc.b	smpsNoAttack, $01
000946A2 E10F                       	smpsAlterNote       $0F
000946A4 E701                       	dc.b	smpsNoAttack, $01
000946A6 E10B                       	smpsAlterNote       $0B
000946A8 E701                       	dc.b	smpsNoAttack, $01
000946AA E108                       	smpsAlterNote       $08
000946AC E701                       	dc.b	smpsNoAttack, $01
000946AE E104                       	smpsAlterNote       $04
000946B0 E701                       	dc.b	smpsNoAttack, $01
000946B2 E108                       	smpsAlterNote       $08
000946B4 E701                       	dc.b	smpsNoAttack, $01
000946B6 E10E                       	smpsAlterNote       $0E
000946B8 E701                       	dc.b	smpsNoAttack, $01
000946BA E10F                       	smpsAlterNote       $0F
000946BC E701                       	dc.b	smpsNoAttack, $01
000946BE E10B                       	smpsAlterNote       $0B
000946C0 E701                       	dc.b	smpsNoAttack, $01
000946C2 E105                       	smpsAlterNote       $05
000946C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946C8 E108                       	smpsAlterNote       $08
000946CA E701                       	dc.b	smpsNoAttack, $01
000946CC E10E                       	smpsAlterNote       $0E
000946CE E701                       	dc.b	smpsNoAttack, $01
000946D0 E10F                       	smpsAlterNote       $0F
000946D2 800F                       	dc.b	nRst, $0F
000946D4 E107                       	smpsAlterNote       $07
000946D6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000946DA E108                       	smpsAlterNote       $08
000946DC C103                       	dc.b	nE5, $03
000946DE E109                       	smpsAlterNote       $09
000946E0 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000946E6 E10B                       	smpsAlterNote       $0B
000946E8 C607                       	dc.b	nA5, $07
000946EA E107                       	smpsAlterNote       $07
000946EC BF03 8001                  	dc.b	nD5, $03, nRst, $01
000946F0 E106                       	smpsAlterNote       $06
000946F2 C90D                       	dc.b	nC6, $0D
000946F4 E107                       	smpsAlterNote       $07
000946F6 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000946FA E10C                       	smpsAlterNote       $0C
000946FC C704                       	dc.b	nBb5, $04
000946FE E10B                       	smpsAlterNote       $0B
00094700 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094704 E109                       	smpsAlterNote       $09
00094706 C404                       	dc.b	nG5, $04
00094708 E10B                       	smpsAlterNote       $0B
0009470A C60D                       	dc.b	nA5, $0D
0009470C E108                       	smpsAlterNote       $08
0009470E E701                       	dc.b	smpsNoAttack, $01
00094710 E105                       	smpsAlterNote       $05
00094712 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094716 E10B                       	smpsAlterNote       $0B
00094718 E701                       	dc.b	smpsNoAttack, $01
0009471A E10F                       	smpsAlterNote       $0F
0009471C E701                       	dc.b	smpsNoAttack, $01
0009471E E10E                       	smpsAlterNote       $0E
00094720 E701                       	dc.b	smpsNoAttack, $01
00094722 E108                       	smpsAlterNote       $08
00094724 E701                       	dc.b	smpsNoAttack, $01
00094726 E104                       	smpsAlterNote       $04
00094728 E701                       	dc.b	smpsNoAttack, $01
0009472A E108                       	smpsAlterNote       $08
0009472C E701                       	dc.b	smpsNoAttack, $01
0009472E E10B                       	smpsAlterNote       $0B
00094730 E701                       	dc.b	smpsNoAttack, $01
00094732 E10F                       	smpsAlterNote       $0F
00094734 E701                       	dc.b	smpsNoAttack, $01
00094736 E10B                       	smpsAlterNote       $0B
00094738 E701                       	dc.b	smpsNoAttack, $01
0009473A E105                       	smpsAlterNote       $05
0009473C E701                       	dc.b	smpsNoAttack, $01
0009473E E104                       	smpsAlterNote       $04
00094740 E701                       	dc.b	smpsNoAttack, $01
00094742 E108                       	smpsAlterNote       $08
00094744 E701                       	dc.b	smpsNoAttack, $01
00094746 E10E                       	smpsAlterNote       $0E
00094748 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009474C E10B                       	smpsAlterNote       $0B
0009474E E701                       	dc.b	smpsNoAttack, $01
00094750 E105                       	smpsAlterNote       $05
00094752 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094756 E10B                       	smpsAlterNote       $0B
00094758 E701                       	dc.b	smpsNoAttack, $01
0009475A E10E                       	smpsAlterNote       $0E
0009475C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094760 E108                       	smpsAlterNote       $08
00094762 E701                       	dc.b	smpsNoAttack, $01
00094764 E105                       	smpsAlterNote       $05
00094766 8001                       	dc.b	nRst, $01
00094768 E109                       	smpsAlterNote       $09
0009476A C401 8001                  	dc.b	nG5, $01, nRst, $01
0009476E E10B                       	smpsAlterNote       $0B
00094770 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094778 E109                       	smpsAlterNote       $09
0009477A C404                       	dc.b	nG5, $04
0009477C E10B                       	smpsAlterNote       $0B
0009477E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094782 E107                       	smpsAlterNote       $07
00094784 BF0D                       	dc.b	nD5, $0D
00094786 E101                       	smpsAlterNote       $01
00094788 E701                       	dc.b	smpsNoAttack, $01
0009478A E100                       	smpsAlterNote       $00
0009478C E701                       	dc.b	smpsNoAttack, $01
0009478E E104                       	smpsAlterNote       $04
00094790 E701                       	dc.b	smpsNoAttack, $01
00094792 E10A                       	smpsAlterNote       $0A
00094794 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094798 E107                       	smpsAlterNote       $07
0009479A E701                       	dc.b	smpsNoAttack, $01
0009479C E101                       	smpsAlterNote       $01
0009479E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947A2 E107                       	smpsAlterNote       $07
000947A4 E701                       	dc.b	smpsNoAttack, $01
000947A6 E10A                       	smpsAlterNote       $0A
000947A8 E701                       	dc.b	smpsNoAttack, $01
000947AA E10B                       	smpsAlterNote       $0B
000947AC 8001                       	dc.b	nRst, $01
000947AE E108                       	smpsAlterNote       $08
000947B0 8001                       	dc.b	nRst, $01
000947B2 E109                       	smpsAlterNote       $09
000947B4 8001 C401                  	dc.b	nRst, $01, nG5, $01
000947B8 E10B                       	smpsAlterNote       $0B
000947BA C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000947C2 E108                       	smpsAlterNote       $08
000947C4 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000947C8 E109                       	smpsAlterNote       $09
000947CA CE06 8001                  	dc.b	nF6, $06, nRst, $01
000947CE E108                       	smpsAlterNote       $08
000947D0 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000947D4 E106                       	smpsAlterNote       $06
000947D6 C903                       	dc.b	nC6, $03
000947D8 E109                       	smpsAlterNote       $09
000947DA C403 8001                  	dc.b	nG5, $03, nRst, $01
000947DE E10C                       	smpsAlterNote       $0C
000947E0 C70D                       	dc.b	nBb5, $0D
000947E2 E109                       	smpsAlterNote       $09
000947E4 E701                       	dc.b	smpsNoAttack, $01
000947E6 E105                       	smpsAlterNote       $05
000947E8 E701                       	dc.b	smpsNoAttack, $01
000947EA E109                       	smpsAlterNote       $09
000947EC E701                       	dc.b	smpsNoAttack, $01
000947EE E10F                       	smpsAlterNote       $0F
000947F0 E701                       	dc.b	smpsNoAttack, $01
000947F2 E110                       	smpsAlterNote       $10
000947F4 E701                       	dc.b	smpsNoAttack, $01
000947F6 E10C                       	smpsAlterNote       $0C
000947F8 E701                       	dc.b	smpsNoAttack, $01
000947FA E106                       	smpsAlterNote       $06
000947FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094800 E109                       	smpsAlterNote       $09
00094802 E701                       	dc.b	smpsNoAttack, $01
00094804 E10F                       	smpsAlterNote       $0F
00094806 E701                       	dc.b	smpsNoAttack, $01
00094808 E110                       	smpsAlterNote       $10
0009480A 8001                       	dc.b	nRst, $01
0009480C E10B                       	smpsAlterNote       $0B
0009480E C606 8001                  	dc.b	nA5, $06, nRst, $01
00094812 E109                       	smpsAlterNote       $09
00094814 C40D                       	dc.b	nG5, $0D
00094816 E103                       	smpsAlterNote       $03
00094818 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009481C E106                       	smpsAlterNote       $06
0009481E E701                       	dc.b	smpsNoAttack, $01
00094820 E10C                       	smpsAlterNote       $0C
00094822 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094826 E106                       	smpsAlterNote       $06
00094828 E701                       	dc.b	smpsNoAttack, $01
0009482A E103                       	smpsAlterNote       $03
0009482C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094830 E109                       	smpsAlterNote       $09
00094832 E701                       	dc.b	smpsNoAttack, $01
00094834 E10D                       	smpsAlterNote       $0D
00094836 E701                       	dc.b	smpsNoAttack, $01
00094838 E10C                       	smpsAlterNote       $0C
0009483A E701                       	dc.b	smpsNoAttack, $01
0009483C E106                       	smpsAlterNote       $06
0009483E E701                       	dc.b	smpsNoAttack, $01
00094840 E102                       	smpsAlterNote       $02
00094842 E701                       	dc.b	smpsNoAttack, $01
00094844 E103                       	smpsAlterNote       $03
00094846 8001                       	dc.b	nRst, $01
00094848 E10B                       	smpsAlterNote       $0B
0009484A C60D                       	dc.b	nA5, $0D
0009484C E108                       	smpsAlterNote       $08
0009484E E701                       	dc.b	smpsNoAttack, $01
00094850 E104                       	smpsAlterNote       $04
00094852 E701                       	dc.b	smpsNoAttack, $01
00094854 E108                       	smpsAlterNote       $08
00094856 E701                       	dc.b	smpsNoAttack, $01
00094858 E10B                       	smpsAlterNote       $0B
0009485A E701                       	dc.b	smpsNoAttack, $01
0009485C E10F                       	smpsAlterNote       $0F
0009485E E701                       	dc.b	smpsNoAttack, $01
00094860 E10B                       	smpsAlterNote       $0B
00094862 E701                       	dc.b	smpsNoAttack, $01
00094864 E105                       	smpsAlterNote       $05
00094866 E701                       	dc.b	smpsNoAttack, $01
00094868 E104                       	smpsAlterNote       $04
0009486A E701                       	dc.b	smpsNoAttack, $01
0009486C E108                       	smpsAlterNote       $08
0009486E E701                       	dc.b	smpsNoAttack, $01
00094870 E10E                       	smpsAlterNote       $0E
00094872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094876 E10B                       	smpsAlterNote       $0B
00094878 E701                       	dc.b	smpsNoAttack, $01
0009487A E105                       	smpsAlterNote       $05
0009487C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094880 E10C                       	smpsAlterNote       $0C
00094882 C70E                       	dc.b	nBb5, $0E
00094884 E106                       	smpsAlterNote       $06
00094886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009488A E10C                       	smpsAlterNote       $0C
0009488C E701                       	dc.b	smpsNoAttack, $01
0009488E E10F                       	smpsAlterNote       $0F
00094890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094894 E109                       	smpsAlterNote       $09
00094896 E701                       	dc.b	smpsNoAttack, $01
00094898 E105                       	smpsAlterNote       $05
0009489A E701                       	dc.b	smpsNoAttack, $01
0009489C E106                       	smpsAlterNote       $06
0009489E E701                       	dc.b	smpsNoAttack, $01
000948A0 E10C                       	smpsAlterNote       $0C
000948A2 E701                       	dc.b	smpsNoAttack, $01
000948A4 E110                       	smpsAlterNote       $10
000948A6 E701                       	dc.b	smpsNoAttack, $01
000948A8 E10C                       	smpsAlterNote       $0C
000948AA E701                       	dc.b	smpsNoAttack, $01
000948AC E109                       	smpsAlterNote       $09
000948AE E701                       	dc.b	smpsNoAttack, $01
000948B0 E105                       	smpsAlterNote       $05
000948B2 E701                       	dc.b	smpsNoAttack, $01
000948B4 E106                       	smpsAlterNote       $06
000948B6 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000948BA E107                       	smpsAlterNote       $07
000948BC CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000948C1 E108                       	smpsAlterNote       $08
000948C3 CD0D                       	dc.b	nE6, $0D
000948C5 E107                       	smpsAlterNote       $07
000948C7 CB0D                       	dc.b	nD6, $0D
000948C9 E104                       	smpsAlterNote       $04
000948CB E701                       	dc.b	smpsNoAttack, $01
000948CD E100                       	smpsAlterNote       $00
000948CF E701                       	dc.b	smpsNoAttack, $01
000948D1 E101                       	smpsAlterNote       $01
000948D3 E701                       	dc.b	smpsNoAttack, $01
000948D5 E107                       	smpsAlterNote       $07
000948D7 E701                       	dc.b	smpsNoAttack, $01
000948D9 E10B                       	smpsAlterNote       $0B
000948DB E701                       	dc.b	smpsNoAttack, $01
000948DD E107                       	smpsAlterNote       $07
000948DF E701                       	dc.b	smpsNoAttack, $01
000948E1 E104                       	smpsAlterNote       $04
000948E3 E701                       	dc.b	smpsNoAttack, $01
000948E5 E100                       	smpsAlterNote       $00
000948E7 E701                       	dc.b	smpsNoAttack, $01
000948E9 E104                       	smpsAlterNote       $04
000948EB E701                       	dc.b	smpsNoAttack, $01
000948ED E10A                       	smpsAlterNote       $0A
000948EF E701                       	dc.b	smpsNoAttack, $01
000948F1 E10B                       	smpsAlterNote       $0B
000948F3 E701                       	dc.b	smpsNoAttack, $01
000948F5 E108                       	smpsAlterNote       $08
000948F7 CC0D                       	dc.b	nEb6, $0D
000948F9 E105                       	smpsAlterNote       $05
000948FB E701                       	dc.b	smpsNoAttack, $01
000948FD E101                       	smpsAlterNote       $01
000948FF E701                       	dc.b	smpsNoAttack, $01
00094901 E102                       	smpsAlterNote       $02
00094903 E701                       	dc.b	smpsNoAttack, $01
00094905 E108                       	smpsAlterNote       $08
00094907 E701                       	dc.b	smpsNoAttack, $01
00094909 E106                       	smpsAlterNote       $06
0009490B C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094917 8001                       	dc.b	nRst, $01
00094919 E107                       	smpsAlterNote       $07
0009491B CB0D                       	dc.b	nD6, $0D
0009491D E104                       	smpsAlterNote       $04
0009491F E701                       	dc.b	smpsNoAttack, $01
00094921 E100                       	smpsAlterNote       $00
00094923 E701                       	dc.b	smpsNoAttack, $01
00094925 E104                       	smpsAlterNote       $04
00094927 E701                       	dc.b	smpsNoAttack, $01
00094929 E107                       	smpsAlterNote       $07
0009492B E701                       	dc.b	smpsNoAttack, $01
0009492D E10B                       	smpsAlterNote       $0B
0009492F E701                       	dc.b	smpsNoAttack, $01
00094931 E107                       	smpsAlterNote       $07
00094933 E701                       	dc.b	smpsNoAttack, $01
00094935 E101                       	smpsAlterNote       $01
00094937 E701                       	dc.b	smpsNoAttack, $01
00094939 E100                       	smpsAlterNote       $00
0009493B E701                       	dc.b	smpsNoAttack, $01
0009493D E104                       	smpsAlterNote       $04
0009493F E701                       	dc.b	smpsNoAttack, $01
00094941 E10A                       	smpsAlterNote       $0A
00094943 E701                       	dc.b	smpsNoAttack, $01
00094945 E10B                       	smpsAlterNote       $0B
00094947 8001                       	dc.b	nRst, $01
00094949 E109                       	smpsAlterNote       $09
0009494B CE0A                       	dc.b	nF6, $0A
0009494D E108                       	smpsAlterNote       $08
0009494F CC07                       	dc.b	nEb6, $07
00094951 E106                       	smpsAlterNote       $06
00094953 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0009495F E107                       	smpsAlterNote       $07
00094961 CB0D                       	dc.b	nD6, $0D
00094963 E101                       	smpsAlterNote       $01
00094965 E701                       	dc.b	smpsNoAttack, $01
00094967 E100                       	smpsAlterNote       $00
00094969 E701                       	dc.b	smpsNoAttack, $01
0009496B E104                       	smpsAlterNote       $04
0009496D E701                       	dc.b	smpsNoAttack, $01
0009496F E10A                       	smpsAlterNote       $0A
00094971 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094975 E107                       	smpsAlterNote       $07
00094977 E701                       	dc.b	smpsNoAttack, $01
00094979 E101                       	smpsAlterNote       $01
0009497B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009497F E107                       	smpsAlterNote       $07
00094981 E701                       	dc.b	smpsNoAttack, $01
00094983 E10A                       	smpsAlterNote       $0A
00094985 E701                       	dc.b	smpsNoAttack, $01
00094987 E10B                       	smpsAlterNote       $0B
00094989 8001                       	dc.b	nRst, $01
0009498B E108                       	smpsAlterNote       $08
0009498D CC0D                       	dc.b	nEb6, $0D
0009498F E102                       	smpsAlterNote       $02
00094991 E701                       	dc.b	smpsNoAttack, $01
00094993 E101                       	smpsAlterNote       $01
00094995 E701                       	dc.b	smpsNoAttack, $01
00094997 E105                       	smpsAlterNote       $05
00094999 E701                       	dc.b	smpsNoAttack, $01
0009499B E108                       	smpsAlterNote       $08
0009499D 8001                       	dc.b	nRst, $01
0009499F E106                       	smpsAlterNote       $06
000949A1 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000949AD 8001                       	dc.b	nRst, $01
000949AF E107                       	smpsAlterNote       $07
000949B1 CB0D                       	dc.b	nD6, $0D
000949B3 E101                       	smpsAlterNote       $01
000949B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949B9 E104                       	smpsAlterNote       $04
000949BB E701                       	dc.b	smpsNoAttack, $01
000949BD E10A                       	smpsAlterNote       $0A
000949BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949C3 E104                       	smpsAlterNote       $04
000949C5 E701                       	dc.b	smpsNoAttack, $01
000949C7 E101                       	smpsAlterNote       $01
000949C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949CD E107                       	smpsAlterNote       $07
000949CF E701                       	dc.b	smpsNoAttack, $01
000949D1 E10B                       	smpsAlterNote       $0B
000949D3 E701                       	dc.b	smpsNoAttack, $01
000949D5 E10A                       	smpsAlterNote       $0A
000949D7 E701                       	dc.b	smpsNoAttack, $01
000949D9 E104                       	smpsAlterNote       $04
000949DB E701                       	dc.b	smpsNoAttack, $01
000949DD E100                       	smpsAlterNote       $00
000949DF E701                       	dc.b	smpsNoAttack, $01
000949E1 E101                       	smpsAlterNote       $01
000949E3 801C                       	dc.b	nRst, $1C
000949E7 E107                       	smpsAlterNote       $07
000949E9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000949ED E603                       	smpsAlterVol        $03
000949EF F6F1 AD                    	smpsJump            music84_Jump03
000949F2                            
000949F2                            ; FM3 Data
000949F2                            music84_FM3:
000949F2 E0C0                       	smpsPan             panCenter, $00
000949F6 E109                       	smpsAlterNote       $09
000949F8 C203 8007                  	dc.b	nF5, $03, nRst, $07
000949FC E108                       	smpsAlterNote       $08
000949FE C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094A02 E10B                       	smpsAlterNote       $0B
00094A04 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094A0A E040                       	smpsPan             panRight, $00
00094A0C E110                       	smpsAlterNote       $10
00094A0E E6F9                       	smpsAlterVol        $F9
00094A10 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094A14 E10F                       	smpsAlterNote       $0F
00094A16 C603                       	dc.b	nA5, $03
00094A18 E10D                       	smpsAlterNote       $0D
00094A1A C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094A20 E10C                       	smpsAlterNote       $0C
00094A22 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094A26 E10A                       	smpsAlterNote       $0A
00094A28 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094A2C E10F                       	smpsAlterNote       $0F
00094A2E BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094A32 E0C0                       	smpsPan             panCenter, $00
00094A36 E109                       	smpsAlterNote       $09
00094A38 E609                       	smpsAlterVol        $09
00094A3A B603                       	dc.b	nF4, $03
00094A3C                            
00094A3C                            music84_Jump02:
00094A3C E70A                       	dc.b	smpsNoAttack, $0A
00094A3E E103                       	smpsAlterNote       $03
00094A40 E701                       	dc.b	smpsNoAttack, $01
00094A42 E102                       	smpsAlterNote       $02
00094A44 E701                       	dc.b	smpsNoAttack, $01
00094A46 E106                       	smpsAlterNote       $06
00094A48 E701                       	dc.b	smpsNoAttack, $01
00094A4A E10C                       	smpsAlterNote       $0C
00094A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A50 E109                       	smpsAlterNote       $09
00094A52 E701                       	dc.b	smpsNoAttack, $01
00094A54 E103                       	smpsAlterNote       $03
00094A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A5A E109                       	smpsAlterNote       $09
00094A5C E701                       	dc.b	smpsNoAttack, $01
00094A5E E10C                       	smpsAlterNote       $0C
00094A60 E701                       	dc.b	smpsNoAttack, $01
00094A62 E10D                       	smpsAlterNote       $0D
00094A64 8001                       	dc.b	nRst, $01
00094A66 E109                       	smpsAlterNote       $09
00094A68 B80D                       	dc.b	nG4, $0D
00094A6A E103                       	smpsAlterNote       $03
00094A6C E701                       	dc.b	smpsNoAttack, $01
00094A6E E102                       	smpsAlterNote       $02
00094A70 E701                       	dc.b	smpsNoAttack, $01
00094A72 E106                       	smpsAlterNote       $06
00094A74 E701                       	dc.b	smpsNoAttack, $01
00094A76 E10C                       	smpsAlterNote       $0C
00094A78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A7C E109                       	smpsAlterNote       $09
00094A7E E701                       	dc.b	smpsNoAttack, $01
00094A80 E103                       	smpsAlterNote       $03
00094A82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A86 E109                       	smpsAlterNote       $09
00094A88 E701                       	dc.b	smpsNoAttack, $01
00094A8A E10C                       	smpsAlterNote       $0C
00094A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A90 E106                       	smpsAlterNote       $06
00094A92 E701                       	dc.b	smpsNoAttack, $01
00094A94 E102                       	smpsAlterNote       $02
00094A96 E701                       	dc.b	smpsNoAttack, $01
00094A98 E103                       	smpsAlterNote       $03
00094A9A E701                       	dc.b	smpsNoAttack, $01
00094A9C E109                       	smpsAlterNote       $09
00094A9E E701                       	dc.b	smpsNoAttack, $01
00094AA0 E10D                       	smpsAlterNote       $0D
00094AA2 E701                       	dc.b	smpsNoAttack, $01
00094AA4 E109                       	smpsAlterNote       $09
00094AA6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094AAA E10B                       	smpsAlterNote       $0B
00094AAC BA0D                       	dc.b	nA4, $0D
00094AAE E105                       	smpsAlterNote       $05
00094AB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AB4 E108                       	smpsAlterNote       $08
00094AB6 E701                       	dc.b	smpsNoAttack, $01
00094AB8 E10E                       	smpsAlterNote       $0E
00094ABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ABE E108                       	smpsAlterNote       $08
00094AC0 E701                       	dc.b	smpsNoAttack, $01
00094AC2 E104                       	smpsAlterNote       $04
00094AC4 E701                       	dc.b	smpsNoAttack, $01
00094AC6 E105                       	smpsAlterNote       $05
00094AC8 E701                       	dc.b	smpsNoAttack, $01
00094ACA E10B                       	smpsAlterNote       $0B
00094ACC E701                       	dc.b	smpsNoAttack, $01
00094ACE E10F                       	smpsAlterNote       $0F
00094AD0 E701                       	dc.b	smpsNoAttack, $01
00094AD2 E10B                       	smpsAlterNote       $0B
00094AD4 E701                       	dc.b	smpsNoAttack, $01
00094AD6 E108                       	smpsAlterNote       $08
00094AD8 E701                       	dc.b	smpsNoAttack, $01
00094ADA E104                       	smpsAlterNote       $04
00094ADC E701                       	dc.b	smpsNoAttack, $01
00094ADE E108                       	smpsAlterNote       $08
00094AE0 E701                       	dc.b	smpsNoAttack, $01
00094AE2 E10E                       	smpsAlterNote       $0E
00094AE4 E701                       	dc.b	smpsNoAttack, $01
00094AE6 E10F                       	smpsAlterNote       $0F
00094AE8 E701                       	dc.b	smpsNoAttack, $01
00094AEA E10B                       	smpsAlterNote       $0B
00094AEC E701                       	dc.b	smpsNoAttack, $01
00094AEE E105                       	smpsAlterNote       $05
00094AF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AF4 E108                       	smpsAlterNote       $08
00094AF6 E701                       	dc.b	smpsNoAttack, $01
00094AF8 E10E                       	smpsAlterNote       $0E
00094AFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AFE E108                       	smpsAlterNote       $08
00094B00 E701                       	dc.b	smpsNoAttack, $01
00094B02 E105                       	smpsAlterNote       $05
00094B04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B08 E10B                       	smpsAlterNote       $0B
00094B0A E701                       	dc.b	smpsNoAttack, $01
00094B0C E10F                       	smpsAlterNote       $0F
00094B0E E701                       	dc.b	smpsNoAttack, $01
00094B10 E10E                       	smpsAlterNote       $0E
00094B12 E701                       	dc.b	smpsNoAttack, $01
00094B14 E108                       	smpsAlterNote       $08
00094B16 E701                       	dc.b	smpsNoAttack, $01
00094B18 E104                       	smpsAlterNote       $04
00094B1A E701                       	dc.b	smpsNoAttack, $01
00094B1C E105                       	smpsAlterNote       $05
00094B1E 8001                       	dc.b	nRst, $01
00094B20 E108                       	smpsAlterNote       $08
00094B22 B50A                       	dc.b	nE4, $0A
00094B24 E109                       	smpsAlterNote       $09
00094B26 B60D                       	dc.b	nF4, $0D
00094B28 E106                       	smpsAlterNote       $06
00094B2A E701                       	dc.b	smpsNoAttack, $01
00094B2C E103                       	smpsAlterNote       $03
00094B2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B32 E109                       	smpsAlterNote       $09
00094B34 E701                       	dc.b	smpsNoAttack, $01
00094B36 E10D                       	smpsAlterNote       $0D
00094B38 E701                       	dc.b	smpsNoAttack, $01
00094B3A E10C                       	smpsAlterNote       $0C
00094B3C E701                       	dc.b	smpsNoAttack, $01
00094B3E E106                       	smpsAlterNote       $06
00094B40 E701                       	dc.b	smpsNoAttack, $01
00094B42 E102                       	smpsAlterNote       $02
00094B44 E701                       	dc.b	smpsNoAttack, $01
00094B46 E106                       	smpsAlterNote       $06
00094B48 E701                       	dc.b	smpsNoAttack, $01
00094B4A E109                       	smpsAlterNote       $09
00094B4C E701                       	dc.b	smpsNoAttack, $01
00094B4E E10D                       	smpsAlterNote       $0D
00094B50 E701                       	dc.b	smpsNoAttack, $01
00094B52 E109                       	smpsAlterNote       $09
00094B54 B80D                       	dc.b	nG4, $0D
00094B56 E106                       	smpsAlterNote       $06
00094B58 E701                       	dc.b	smpsNoAttack, $01
00094B5A E103                       	smpsAlterNote       $03
00094B5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B60 E109                       	smpsAlterNote       $09
00094B62 E701                       	dc.b	smpsNoAttack, $01
00094B64 E10D                       	smpsAlterNote       $0D
00094B66 E701                       	dc.b	smpsNoAttack, $01
00094B68 E10C                       	smpsAlterNote       $0C
00094B6A E701                       	dc.b	smpsNoAttack, $01
00094B6C E106                       	smpsAlterNote       $06
00094B6E E701                       	dc.b	smpsNoAttack, $01
00094B70 E102                       	smpsAlterNote       $02
00094B72 E701                       	dc.b	smpsNoAttack, $01
00094B74 E106                       	smpsAlterNote       $06
00094B76 E701                       	dc.b	smpsNoAttack, $01
00094B78 E109                       	smpsAlterNote       $09
00094B7A E701                       	dc.b	smpsNoAttack, $01
00094B7C E10D                       	smpsAlterNote       $0D
00094B7E E701                       	dc.b	smpsNoAttack, $01
00094B80 E109                       	smpsAlterNote       $09
00094B82 E701                       	dc.b	smpsNoAttack, $01
00094B84 E103                       	smpsAlterNote       $03
00094B86 E701                       	dc.b	smpsNoAttack, $01
00094B88 E102                       	smpsAlterNote       $02
00094B8A E701                       	dc.b	smpsNoAttack, $01
00094B8C E106                       	smpsAlterNote       $06
00094B8E E701                       	dc.b	smpsNoAttack, $01
00094B90 E10C                       	smpsAlterNote       $0C
00094B92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B96 E109                       	smpsAlterNote       $09
00094B98 E701                       	dc.b	smpsNoAttack, $01
00094B9A E10B                       	smpsAlterNote       $0B
00094B9C BA0D                       	dc.b	nA4, $0D
00094B9E E108                       	smpsAlterNote       $08
00094BA0 E701                       	dc.b	smpsNoAttack, $01
00094BA2 E104                       	smpsAlterNote       $04
00094BA4 E701                       	dc.b	smpsNoAttack, $01
00094BA6 E108                       	smpsAlterNote       $08
00094BA8 E701                       	dc.b	smpsNoAttack, $01
00094BAA E10B                       	smpsAlterNote       $0B
00094BAC E701                       	dc.b	smpsNoAttack, $01
00094BAE E10F                       	smpsAlterNote       $0F
00094BB0 E701                       	dc.b	smpsNoAttack, $01
00094BB2 E10B                       	smpsAlterNote       $0B
00094BB4 E701                       	dc.b	smpsNoAttack, $01
00094BB6 E105                       	smpsAlterNote       $05
00094BB8 E701                       	dc.b	smpsNoAttack, $01
00094BBA E104                       	smpsAlterNote       $04
00094BBC E701                       	dc.b	smpsNoAttack, $01
00094BBE E108                       	smpsAlterNote       $08
00094BC0 E701                       	dc.b	smpsNoAttack, $01
00094BC2 E10E                       	smpsAlterNote       $0E
00094BC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BC8 E10B                       	smpsAlterNote       $0B
00094BCA E701                       	dc.b	smpsNoAttack, $01
00094BCC E105                       	smpsAlterNote       $05
00094BCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BD2 E10B                       	smpsAlterNote       $0B
00094BD4 E701                       	dc.b	smpsNoAttack, $01
00094BD6 E10E                       	smpsAlterNote       $0E
00094BD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BDC E108                       	smpsAlterNote       $08
00094BDE E701                       	dc.b	smpsNoAttack, $01
00094BE0 E104                       	smpsAlterNote       $04
00094BE2 E701                       	dc.b	smpsNoAttack, $01
00094BE4 E105                       	smpsAlterNote       $05
00094BE6 E701                       	dc.b	smpsNoAttack, $01
00094BE8 E10B                       	smpsAlterNote       $0B
00094BEA E701                       	dc.b	smpsNoAttack, $01
00094BEC E10F                       	smpsAlterNote       $0F
00094BEE E701                       	dc.b	smpsNoAttack, $01
00094BF0 E10B                       	smpsAlterNote       $0B
00094BF2 E701                       	dc.b	smpsNoAttack, $01
00094BF4 E108                       	smpsAlterNote       $08
00094BF6 E701                       	dc.b	smpsNoAttack, $01
00094BF8 E105                       	smpsAlterNote       $05
00094BFA 8001                       	dc.b	nRst, $01
00094BFC E109                       	smpsAlterNote       $09
00094BFE B609 8001                  	dc.b	nF4, $09, nRst, $01
00094C02 E108                       	smpsAlterNote       $08
00094C04 B506 8001                  	dc.b	nE4, $06, nRst, $01
00094C08 E107                       	smpsAlterNote       $07
00094C0A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00094C0E E108                       	smpsAlterNote       $08
00094C10 B502 8001                  	dc.b	nE4, $02, nRst, $01
00094C14 E109                       	smpsAlterNote       $09
00094C16 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00094C1C E10B                       	smpsAlterNote       $0B
00094C1E BA0D                       	dc.b	nA4, $0D
00094C20 E108                       	smpsAlterNote       $08
00094C22 E701                       	dc.b	smpsNoAttack, $01
00094C24 E104                       	smpsAlterNote       $04
00094C26 E701                       	dc.b	smpsNoAttack, $01
00094C28 E108                       	smpsAlterNote       $08
00094C2A E701                       	dc.b	smpsNoAttack, $01
00094C2C E10E                       	smpsAlterNote       $0E
00094C2E E701                       	dc.b	smpsNoAttack, $01
00094C30 E10F                       	smpsAlterNote       $0F
00094C32 E701                       	dc.b	smpsNoAttack, $01
00094C34 E10B                       	smpsAlterNote       $0B
00094C36 E701                       	dc.b	smpsNoAttack, $01
00094C38 E105                       	smpsAlterNote       $05
00094C3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C3E E108                       	smpsAlterNote       $08
00094C40 E701                       	dc.b	smpsNoAttack, $01
00094C42 E10E                       	smpsAlterNote       $0E
00094C44 E701                       	dc.b	smpsNoAttack, $01
00094C46 E10F                       	smpsAlterNote       $0F
00094C48 8001                       	dc.b	nRst, $01
00094C4A E109                       	smpsAlterNote       $09
00094C4C C20D                       	dc.b	nF5, $0D
00094C4E E103                       	smpsAlterNote       $03
00094C50 E701                       	dc.b	smpsNoAttack, $01
00094C52 E102                       	smpsAlterNote       $02
00094C54 E701                       	dc.b	smpsNoAttack, $01
00094C56 E106                       	smpsAlterNote       $06
00094C58 E701                       	dc.b	smpsNoAttack, $01
00094C5A E10C                       	smpsAlterNote       $0C
00094C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C60 E109                       	smpsAlterNote       $09
00094C62 E701                       	dc.b	smpsNoAttack, $01
00094C64 E103                       	smpsAlterNote       $03
00094C66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C6A E109                       	smpsAlterNote       $09
00094C6C E701                       	dc.b	smpsNoAttack, $01
00094C6E E10C                       	smpsAlterNote       $0C
00094C70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C74 E106                       	smpsAlterNote       $06
00094C76 E701                       	dc.b	smpsNoAttack, $01
00094C78 E102                       	smpsAlterNote       $02
00094C7A E701                       	dc.b	smpsNoAttack, $01
00094C7C E103                       	smpsAlterNote       $03
00094C7E E701                       	dc.b	smpsNoAttack, $01
00094C80 E109                       	smpsAlterNote       $09
00094C82 E701                       	dc.b	smpsNoAttack, $01
00094C84 E10D                       	smpsAlterNote       $0D
00094C86 E701                       	dc.b	smpsNoAttack, $01
00094C88 E109                       	smpsAlterNote       $09
00094C8A E701                       	dc.b	smpsNoAttack, $01
00094C8C E106                       	smpsAlterNote       $06
00094C8E E701                       	dc.b	smpsNoAttack, $01
00094C90 E102                       	smpsAlterNote       $02
00094C92 E701                       	dc.b	smpsNoAttack, $01
00094C94 E106                       	smpsAlterNote       $06
00094C96 E701                       	dc.b	smpsNoAttack, $01
00094C98 E10C                       	smpsAlterNote       $0C
00094C9A E701                       	dc.b	smpsNoAttack, $01
00094C9C E10D                       	smpsAlterNote       $0D
00094C9E E701                       	dc.b	smpsNoAttack, $01
00094CA0 E109                       	smpsAlterNote       $09
00094CA2 E701                       	dc.b	smpsNoAttack, $01
00094CA4 E103                       	smpsAlterNote       $03
00094CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CAA E106                       	smpsAlterNote       $06
00094CAC E701                       	dc.b	smpsNoAttack, $01
00094CAE E10C                       	smpsAlterNote       $0C
00094CB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CB4 E106                       	smpsAlterNote       $06
00094CB6 E701                       	dc.b	smpsNoAttack, $01
00094CB8 E103                       	smpsAlterNote       $03
00094CBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CBE E109                       	smpsAlterNote       $09
00094CC0 E701                       	dc.b	smpsNoAttack, $01
00094CC2 E10D                       	smpsAlterNote       $0D
00094CC4 E701                       	dc.b	smpsNoAttack, $01
00094CC6 E10C                       	smpsAlterNote       $0C
00094CC8 E701                       	dc.b	smpsNoAttack, $01
00094CCA E106                       	smpsAlterNote       $06
00094CCC E701                       	dc.b	smpsNoAttack, $01
00094CCE E102                       	smpsAlterNote       $02
00094CD0 E701                       	dc.b	smpsNoAttack, $01
00094CD2 E106                       	smpsAlterNote       $06
00094CD4 E701                       	dc.b	smpsNoAttack, $01
00094CD6 E109                       	smpsAlterNote       $09
00094CD8 E701                       	dc.b	smpsNoAttack, $01
00094CDA E10D                       	smpsAlterNote       $0D
00094CDC E701                       	dc.b	smpsNoAttack, $01
00094CDE E109                       	smpsAlterNote       $09
00094CE0 E701                       	dc.b	smpsNoAttack, $01
00094CE2 E103                       	smpsAlterNote       $03
00094CE4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094CE8 E109                       	smpsAlterNote       $09
00094CEA C206                       	dc.b	nF5, $06
00094CEC E108                       	smpsAlterNote       $08
00094CEE C10E                       	dc.b	nE5, $0E
00094CF0 E102                       	smpsAlterNote       $02
00094CF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CF6 E108                       	smpsAlterNote       $08
00094CF8 E701                       	dc.b	smpsNoAttack, $01
00094CFA E10B                       	smpsAlterNote       $0B
00094CFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D00 E105                       	smpsAlterNote       $05
00094D02 E701                       	dc.b	smpsNoAttack, $01
00094D04 E101                       	smpsAlterNote       $01
00094D06 E701                       	dc.b	smpsNoAttack, $01
00094D08 E102                       	smpsAlterNote       $02
00094D0A E701                       	dc.b	smpsNoAttack, $01
00094D0C E108                       	smpsAlterNote       $08
00094D0E E701                       	dc.b	smpsNoAttack, $01
00094D10 E10C                       	smpsAlterNote       $0C
00094D12 E701                       	dc.b	smpsNoAttack, $01
00094D14 E107                       	smpsAlterNote       $07
00094D16 BF0E                       	dc.b	nD5, $0E
00094D18 E101                       	smpsAlterNote       $01
00094D1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D1E E107                       	smpsAlterNote       $07
00094D20 E701                       	dc.b	smpsNoAttack, $01
00094D22 E10A                       	smpsAlterNote       $0A
00094D24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D28 E104                       	smpsAlterNote       $04
00094D2A E701                       	dc.b	smpsNoAttack, $01
00094D2C E100                       	smpsAlterNote       $00
00094D2E E701                       	dc.b	smpsNoAttack, $01
00094D30 E104                       	smpsAlterNote       $04
00094D32 E701                       	dc.b	smpsNoAttack, $01
00094D34 E107                       	smpsAlterNote       $07
00094D36 E701                       	dc.b	smpsNoAttack, $01
00094D38 E10B                       	smpsAlterNote       $0B
00094D3A E701                       	dc.b	smpsNoAttack, $01
00094D3C E107                       	smpsAlterNote       $07
00094D3E E701                       	dc.b	smpsNoAttack, $01
00094D40 E101                       	smpsAlterNote       $01
00094D42 E701                       	dc.b	smpsNoAttack, $01
00094D44 E100                       	smpsAlterNote       $00
00094D46 E701                       	dc.b	smpsNoAttack, $01
00094D48 E104                       	smpsAlterNote       $04
00094D4A E701                       	dc.b	smpsNoAttack, $01
00094D4C E10A                       	smpsAlterNote       $0A
00094D4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D52 E107                       	smpsAlterNote       $07
00094D54 E701                       	dc.b	smpsNoAttack, $01
00094D56 E101                       	smpsAlterNote       $01
00094D58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D5C E107                       	smpsAlterNote       $07
00094D5E E701                       	dc.b	smpsNoAttack, $01
00094D60 E10A                       	smpsAlterNote       $0A
00094D62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D66 E104                       	smpsAlterNote       $04
00094D68 E701                       	dc.b	smpsNoAttack, $01
00094D6A E100                       	smpsAlterNote       $00
00094D6C E701                       	dc.b	smpsNoAttack, $01
00094D6E E101                       	smpsAlterNote       $01
00094D70 E701                       	dc.b	smpsNoAttack, $01
00094D72 E107                       	smpsAlterNote       $07
00094D74 E701                       	dc.b	smpsNoAttack, $01
00094D76 E10B                       	smpsAlterNote       $0B
00094D78 E701                       	dc.b	smpsNoAttack, $01
00094D7A E107                       	smpsAlterNote       $07
00094D7C E701                       	dc.b	smpsNoAttack, $01
00094D7E E104                       	smpsAlterNote       $04
00094D80 E701                       	dc.b	smpsNoAttack, $01
00094D82 E100                       	smpsAlterNote       $00
00094D84 E701                       	dc.b	smpsNoAttack, $01
00094D86 E104                       	smpsAlterNote       $04
00094D88 E701                       	dc.b	smpsNoAttack, $01
00094D8A E10A                       	smpsAlterNote       $0A
00094D8C E701                       	dc.b	smpsNoAttack, $01
00094D8E E10B                       	smpsAlterNote       $0B
00094D90 E701                       	dc.b	smpsNoAttack, $01
00094D92 E107                       	smpsAlterNote       $07
00094D94 E701                       	dc.b	smpsNoAttack, $01
00094D96 E101                       	smpsAlterNote       $01
00094D98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D9C E104                       	smpsAlterNote       $04
00094D9E E701                       	dc.b	smpsNoAttack, $01
00094DA0 E10A                       	smpsAlterNote       $0A
00094DA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DA6 E104                       	smpsAlterNote       $04
00094DA8 E701                       	dc.b	smpsNoAttack, $01
00094DAA E101                       	smpsAlterNote       $01
00094DAC E701                       	dc.b	smpsNoAttack, $01
00094DB0 E107                       	smpsAlterNote       $07
00094DB2 E6FF                       	smpsAlterVol        $FF
00094DB4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00094DC0 8004                       	dc.b	nRst, $04
00094DC4 E109                       	smpsAlterNote       $09
00094DC6 E602                       	smpsAlterVol        $02
00094DC8 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00094DCE E108                       	smpsAlterNote       $08
00094DD0 B502 8001                  	dc.b	nE4, $02, nRst, $01
00094DD4 E109                       	smpsAlterNote       $09
00094DD6 B60D                       	dc.b	nF4, $0D
00094DD8 E106                       	smpsAlterNote       $06
00094DDA E701                       	dc.b	smpsNoAttack, $01
00094DDC E102                       	smpsAlterNote       $02
00094DDE E701                       	dc.b	smpsNoAttack, $01
00094DE0 E106                       	smpsAlterNote       $06
00094DE2 E701                       	dc.b	smpsNoAttack, $01
00094DE4 E109                       	smpsAlterNote       $09
00094DE6 E701                       	dc.b	smpsNoAttack, $01
00094DE8 E10D                       	smpsAlterNote       $0D
00094DEA E701                       	dc.b	smpsNoAttack, $01
00094DEC E109                       	smpsAlterNote       $09
00094DEE E701                       	dc.b	smpsNoAttack, $01
00094DF0 E103                       	smpsAlterNote       $03
00094DF2 E701                       	dc.b	smpsNoAttack, $01
00094DF4 E102                       	smpsAlterNote       $02
00094DF6 E701                       	dc.b	smpsNoAttack, $01
00094DF8 E106                       	smpsAlterNote       $06
00094DFA E701                       	dc.b	smpsNoAttack, $01
00094DFC E10C                       	smpsAlterNote       $0C
00094DFE E701                       	dc.b	smpsNoAttack, $01
00094E00 E10D                       	smpsAlterNote       $0D
00094E02 8001                       	dc.b	nRst, $01
00094E04 E109                       	smpsAlterNote       $09
00094E06 B80D                       	dc.b	nG4, $0D
00094E08 E106                       	smpsAlterNote       $06
00094E0A E701                       	dc.b	smpsNoAttack, $01
00094E0C E102                       	smpsAlterNote       $02
00094E0E E701                       	dc.b	smpsNoAttack, $01
00094E10 E106                       	smpsAlterNote       $06
00094E12 E701                       	dc.b	smpsNoAttack, $01
00094E14 E10C                       	smpsAlterNote       $0C
00094E16 E701                       	dc.b	smpsNoAttack, $01
00094E18 E10D                       	smpsAlterNote       $0D
00094E1A E701                       	dc.b	smpsNoAttack, $01
00094E1C E109                       	smpsAlterNote       $09
00094E1E E701                       	dc.b	smpsNoAttack, $01
00094E20 E103                       	smpsAlterNote       $03
00094E22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E26 E106                       	smpsAlterNote       $06
00094E28 E701                       	dc.b	smpsNoAttack, $01
00094E2A E10C                       	smpsAlterNote       $0C
00094E2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E30 E106                       	smpsAlterNote       $06
00094E32 E701                       	dc.b	smpsNoAttack, $01
00094E34 E103                       	smpsAlterNote       $03
00094E36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E3A E109                       	smpsAlterNote       $09
00094E3C E701                       	dc.b	smpsNoAttack, $01
00094E3E E10D                       	smpsAlterNote       $0D
00094E40 E701                       	dc.b	smpsNoAttack, $01
00094E42 E10C                       	smpsAlterNote       $0C
00094E44 E701                       	dc.b	smpsNoAttack, $01
00094E46 E109                       	smpsAlterNote       $09
00094E48 8001                       	dc.b	nRst, $01
00094E4A E10B                       	smpsAlterNote       $0B
00094E4C BA03                       	dc.b	nA4, $03
00094E4E E10C                       	smpsAlterNote       $0C
00094E50 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00094E54 E10B                       	smpsAlterNote       $0B
00094E56 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00094E5C E10C                       	smpsAlterNote       $0C
00094E5E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094E62 E10B                       	smpsAlterNote       $0B
00094E64 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00094E6A E10C                       	smpsAlterNote       $0C
00094E6C D303                       	dc.b	nBb6, $03
00094E6E E10B                       	smpsAlterNote       $0B
00094E70 D20D                       	dc.b	nA6, $0D
00094E72 E108                       	smpsAlterNote       $08
00094E74 E701                       	dc.b	smpsNoAttack, $01
00094E76 E104                       	smpsAlterNote       $04
00094E78 E701                       	dc.b	smpsNoAttack, $01
00094E7A E105                       	smpsAlterNote       $05
00094E7C E701                       	dc.b	smpsNoAttack, $01
00094E7E E10B                       	smpsAlterNote       $0B
00094E80 E701                       	dc.b	smpsNoAttack, $01
00094E82 E10F                       	smpsAlterNote       $0F
00094E84 E701                       	dc.b	smpsNoAttack, $01
00094E86 E10B                       	smpsAlterNote       $0B
00094E88 E701                       	dc.b	smpsNoAttack, $01
00094E8A E108                       	smpsAlterNote       $08
00094E8C E701                       	dc.b	smpsNoAttack, $01
00094E8E E104                       	smpsAlterNote       $04
00094E90 E701                       	dc.b	smpsNoAttack, $01
00094E92 E108                       	smpsAlterNote       $08
00094E94 E701                       	dc.b	smpsNoAttack, $01
00094E96 E10E                       	smpsAlterNote       $0E
00094E98 E701                       	dc.b	smpsNoAttack, $01
00094E9A E10F                       	smpsAlterNote       $0F
00094E9C E701                       	dc.b	smpsNoAttack, $01
00094E9E E10B                       	smpsAlterNote       $0B
00094EA0 E701                       	dc.b	smpsNoAttack, $01
00094EA2 E105                       	smpsAlterNote       $05
00094EA4 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00094EAA E109                       	smpsAlterNote       $09
00094EAC CE07                       	dc.b	nF6, $07
00094EAE E108                       	smpsAlterNote       $08
00094EB0 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094EB4 E109                       	smpsAlterNote       $09
00094EB6 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00094EBA E108                       	smpsAlterNote       $08
00094EBC CC0D                       	dc.b	nEb6, $0D
00094EBE E102                       	smpsAlterNote       $02
00094EC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EC4 E108                       	smpsAlterNote       $08
00094EC6 E701                       	dc.b	smpsNoAttack, $01
00094EC8 E10B                       	smpsAlterNote       $0B
00094ECA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ECE E105                       	smpsAlterNote       $05
00094ED0 E701                       	dc.b	smpsNoAttack, $01
00094ED2 E101                       	smpsAlterNote       $01
00094ED4 E701                       	dc.b	smpsNoAttack, $01
00094ED6 E102                       	smpsAlterNote       $02
00094ED8 E701                       	dc.b	smpsNoAttack, $01
00094EDA E108                       	smpsAlterNote       $08
00094EDC E701                       	dc.b	smpsNoAttack, $01
00094EDE E10C                       	smpsAlterNote       $0C
00094EE0 E701                       	dc.b	smpsNoAttack, $01
00094EE2 E108                       	smpsAlterNote       $08
00094EE4 E701                       	dc.b	smpsNoAttack, $01
00094EE6 E105                       	smpsAlterNote       $05
00094EE8 E701                       	dc.b	smpsNoAttack, $01
00094EEA E101                       	smpsAlterNote       $01
00094EEC E701                       	dc.b	smpsNoAttack, $01
00094EEE E105                       	smpsAlterNote       $05
00094EF0 E701                       	dc.b	smpsNoAttack, $01
00094EF2 E10B                       	smpsAlterNote       $0B
00094EF4 E701                       	dc.b	smpsNoAttack, $01
00094EF6 E10C                       	smpsAlterNote       $0C
00094EF8 E701                       	dc.b	smpsNoAttack, $01
00094EFA E108                       	smpsAlterNote       $08
00094EFC E701                       	dc.b	smpsNoAttack, $01
00094EFE E107                       	smpsAlterNote       $07
00094F00 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00094F0A E10B                       	smpsAlterNote       $0B
00094F0C C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00094F16 E109                       	smpsAlterNote       $09
00094F18 C203                       	dc.b	nF5, $03
00094F1A E108                       	smpsAlterNote       $08
00094F1C C103 8001                  	dc.b	nE5, $03, nRst, $01
00094F20 E109                       	smpsAlterNote       $09
00094F22 C20D                       	dc.b	nF5, $0D
00094F24 E108                       	smpsAlterNote       $08
00094F26 C10E                       	dc.b	nE5, $0E
00094F28 E107                       	smpsAlterNote       $07
00094F2A BF0D                       	dc.b	nD5, $0D
00094F2C E104                       	smpsAlterNote       $04
00094F2E E701                       	dc.b	smpsNoAttack, $01
00094F30 E100                       	smpsAlterNote       $00
00094F32 E701                       	dc.b	smpsNoAttack, $01
00094F34 E104                       	smpsAlterNote       $04
00094F36 E701                       	dc.b	smpsNoAttack, $01
00094F38 E107                       	smpsAlterNote       $07
00094F3A E701                       	dc.b	smpsNoAttack, $01
00094F3C E10B                       	smpsAlterNote       $0B
00094F3E E701                       	dc.b	smpsNoAttack, $01
00094F40 E107                       	smpsAlterNote       $07
00094F42 E701                       	dc.b	smpsNoAttack, $01
00094F44 E101                       	smpsAlterNote       $01
00094F46 E701                       	dc.b	smpsNoAttack, $01
00094F48 E100                       	smpsAlterNote       $00
00094F4A E701                       	dc.b	smpsNoAttack, $01
00094F4C E104                       	smpsAlterNote       $04
00094F4E E701                       	dc.b	smpsNoAttack, $01
00094F50 E10A                       	smpsAlterNote       $0A
00094F52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F56 E107                       	smpsAlterNote       $07
00094F58 E701                       	dc.b	smpsNoAttack, $01
00094F5A E101                       	smpsAlterNote       $01
00094F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F60 E107                       	smpsAlterNote       $07
00094F62 E701                       	dc.b	smpsNoAttack, $01
00094F64 E10A                       	smpsAlterNote       $0A
00094F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F6A E104                       	smpsAlterNote       $04
00094F6C E701                       	dc.b	smpsNoAttack, $01
00094F6E E100                       	smpsAlterNote       $00
00094F70 E701                       	dc.b	smpsNoAttack, $01
00094F72 E101                       	smpsAlterNote       $01
00094F74 E701                       	dc.b	smpsNoAttack, $01
00094F76 E107                       	smpsAlterNote       $07
00094F78 E701                       	dc.b	smpsNoAttack, $01
00094F7A E10B                       	smpsAlterNote       $0B
00094F7C E701                       	dc.b	smpsNoAttack, $01
00094F7E E107                       	smpsAlterNote       $07
00094F80 E701                       	dc.b	smpsNoAttack, $01
00094F82 E104                       	smpsAlterNote       $04
00094F84 E701                       	dc.b	smpsNoAttack, $01
00094F86 E100                       	smpsAlterNote       $00
00094F88 E701                       	dc.b	smpsNoAttack, $01
00094F8A E104                       	smpsAlterNote       $04
00094F8C E701                       	dc.b	smpsNoAttack, $01
00094F8E E10A                       	smpsAlterNote       $0A
00094F90 E701                       	dc.b	smpsNoAttack, $01
00094F92 E10B                       	smpsAlterNote       $0B
00094F94 E701                       	dc.b	smpsNoAttack, $01
00094F96 E107                       	smpsAlterNote       $07
00094F98 E701                       	dc.b	smpsNoAttack, $01
00094F9A E101                       	smpsAlterNote       $01
00094F9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FA0 E104                       	smpsAlterNote       $04
00094FA2 E701                       	dc.b	smpsNoAttack, $01
00094FA4 E10A                       	smpsAlterNote       $0A
00094FA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FAA E104                       	smpsAlterNote       $04
00094FAC E701                       	dc.b	smpsNoAttack, $01
00094FAE E101                       	smpsAlterNote       $01
00094FB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FB4 E107                       	smpsAlterNote       $07
00094FB6 E701                       	dc.b	smpsNoAttack, $01
00094FB8 E10B                       	smpsAlterNote       $0B
00094FBA E701                       	dc.b	smpsNoAttack, $01
00094FBC E10A                       	smpsAlterNote       $0A
00094FBE E701                       	dc.b	smpsNoAttack, $01
00094FC0 E104                       	smpsAlterNote       $04
00094FC2 E701                       	dc.b	smpsNoAttack, $01
00094FC4 E100                       	smpsAlterNote       $00
00094FC6 E701                       	dc.b	smpsNoAttack, $01
00094FC8 E104                       	smpsAlterNote       $04
00094FCA E701                       	dc.b	smpsNoAttack, $01
00094FCC E107                       	smpsAlterNote       $07
00094FCE E701                       	dc.b	smpsNoAttack, $01
00094FD0 E10B                       	smpsAlterNote       $0B
00094FD2 E701                       	dc.b	smpsNoAttack, $01
00094FD4 E107                       	smpsAlterNote       $07
00094FD6 E701                       	dc.b	smpsNoAttack, $01
00094FD8 E101                       	smpsAlterNote       $01
00094FDA E701                       	dc.b	smpsNoAttack, $01
00094FDC E100                       	smpsAlterNote       $00
00094FDE E701                       	dc.b	smpsNoAttack, $01
00094FE0 E104                       	smpsAlterNote       $04
00094FE2 E701                       	dc.b	smpsNoAttack, $01
00094FE4 E10A                       	smpsAlterNote       $0A
00094FE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FEA E107                       	smpsAlterNote       $07
00094FEC E701                       	dc.b	smpsNoAttack, $01
00094FEE E101                       	smpsAlterNote       $01
00094FF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FF4 E107                       	smpsAlterNote       $07
00094FF6 E701                       	dc.b	smpsNoAttack, $01
00094FF8 E10A                       	smpsAlterNote       $0A
00094FFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FFE E104                       	smpsAlterNote       $04
00095000 E701                       	dc.b	smpsNoAttack, $01
00095002 E100                       	smpsAlterNote       $00
00095004 E701                       	dc.b	smpsNoAttack, $01
00095006 E101                       	smpsAlterNote       $01
00095008 E701                       	dc.b	smpsNoAttack, $01
0009500A E107                       	smpsAlterNote       $07
0009500C E701                       	dc.b	smpsNoAttack, $01
0009500E E10B                       	smpsAlterNote       $0B
00095010 E701                       	dc.b	smpsNoAttack, $01
00095012 E107                       	smpsAlterNote       $07
00095014 E701                       	dc.b	smpsNoAttack, $01
00095016 E104                       	smpsAlterNote       $04
00095018 E701                       	dc.b	smpsNoAttack, $01
0009501A E100                       	smpsAlterNote       $00
0009501C E701                       	dc.b	smpsNoAttack, $01
0009501E E101                       	smpsAlterNote       $01
00095020 8001                       	dc.b	nRst, $01
00095022 E109                       	smpsAlterNote       $09
00095024 C20D                       	dc.b	nF5, $0D
00095026 E106                       	smpsAlterNote       $06
00095028 E701                       	dc.b	smpsNoAttack, $01
0009502A E102                       	smpsAlterNote       $02
0009502C E701                       	dc.b	smpsNoAttack, $01
0009502E E106                       	smpsAlterNote       $06
00095030 E701                       	dc.b	smpsNoAttack, $01
00095032 E10C                       	smpsAlterNote       $0C
00095034 E701                       	dc.b	smpsNoAttack, $01
00095036 E10D                       	smpsAlterNote       $0D
00095038 E701                       	dc.b	smpsNoAttack, $01
0009503A E109                       	smpsAlterNote       $09
0009503C E701                       	dc.b	smpsNoAttack, $01
0009503E E103                       	smpsAlterNote       $03
00095040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095044 E106                       	smpsAlterNote       $06
00095046 E701                       	dc.b	smpsNoAttack, $01
00095048 E10C                       	smpsAlterNote       $0C
0009504A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009504E E106                       	smpsAlterNote       $06
00095050 E701                       	dc.b	smpsNoAttack, $01
00095052 E103                       	smpsAlterNote       $03
00095054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095058 E109                       	smpsAlterNote       $09
0009505A E701                       	dc.b	smpsNoAttack, $01
0009505C E10D                       	smpsAlterNote       $0D
0009505E E701                       	dc.b	smpsNoAttack, $01
00095060 E10C                       	smpsAlterNote       $0C
00095062 E701                       	dc.b	smpsNoAttack, $01
00095064 E109                       	smpsAlterNote       $09
00095066 8001                       	dc.b	nRst, $01
00095068 E108                       	smpsAlterNote       $08
0009506A C10D                       	dc.b	nE5, $0D
0009506C E109                       	smpsAlterNote       $09
0009506E C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00095072 E108                       	smpsAlterNote       $08
00095074 C10D                       	dc.b	nE5, $0D
00095076 E102                       	smpsAlterNote       $02
00095078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009507C E105                       	smpsAlterNote       $05
0009507E E701                       	dc.b	smpsNoAttack, $01
00095080 E108                       	smpsAlterNote       $08
00095082 8001                       	dc.b	nRst, $01
00095084 E107                       	smpsAlterNote       $07
00095086 BF0D                       	dc.b	nD5, $0D
00095088 E108                       	smpsAlterNote       $08
0009508A C107                       	dc.b	nE5, $07
0009508C E109                       	smpsAlterNote       $09
0009508E C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00095094 E10B                       	smpsAlterNote       $0B
00095096 C603                       	dc.b	nA5, $03
00095098 E10C                       	smpsAlterNote       $0C
0009509A C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000950A0 E10B                       	smpsAlterNote       $0B
000950A2 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000950A8 E109                       	smpsAlterNote       $09
000950AA D003                       	dc.b	nG6, $03
000950AC E108                       	smpsAlterNote       $08
000950AE CD02 8001                  	dc.b	nE6, $02, nRst, $01
000950B2 E10B                       	smpsAlterNote       $0B
000950B4 C601 8001                  	dc.b	nA5, $01, nRst, $01
000950B8 E108                       	smpsAlterNote       $08
000950BA C102                       	dc.b	nE5, $02
000950BE E10C                       	smpsAlterNote       $0C
000950C0 E6FB                       	smpsAlterVol        $FB
000950C2 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000950CE 8001                       	dc.b	nRst, $01
000950D0 E10B                       	smpsAlterNote       $0B
000950D2 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000950DA E107                       	smpsAlterNote       $07
000950DC A706 8001                  	dc.b	nD3, $06, nRst, $01
000950E0 E10B                       	smpsAlterNote       $0B
000950E2 A203                       	dc.b	nA2, $03
000950E4 E109                       	smpsAlterNote       $09
000950E6 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000950EA E108                       	smpsAlterNote       $08
000950EC A906                       	dc.b	nE3, $06
000950EE E107                       	smpsAlterNote       $07
000950F0 A703 8001                  	dc.b	nD3, $03, nRst, $01
000950F4 E106                       	smpsAlterNote       $06
000950F6 A503                       	dc.b	nC3, $03
000950F8 E10C                       	smpsAlterNote       $0C
000950FA A303 8001                  	dc.b	nBb2, $03, nRst, $01
000950FE E10B                       	smpsAlterNote       $0B
00095100 A203 8004                  	dc.b	nA2, $03, nRst, $04
00095104 E11B                       	smpsAlterNote       $1B
00095106 C401                       	dc.b	nG5, $01
00095108 E1F4                       	smpsAlterNote       $F4
0009510A E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0009510D E106                       	smpsAlterNote       $06
0009510F E701                       	dc.b	smpsNoAttack, $01
00095111 E10F                       	smpsAlterNote       $0F
00095113 E701                       	dc.b	smpsNoAttack, $01
00095115 E1E4                       	smpsAlterNote       $E4
00095117 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0009511A E1F6                       	smpsAlterNote       $F6
0009511C E701                       	dc.b	smpsNoAttack, $01
0009511E E108                       	smpsAlterNote       $08
00095120 E701                       	dc.b	smpsNoAttack, $01
00095122 E10B                       	smpsAlterNote       $0B
00095124 E706                       	dc.b	smpsNoAttack, $06
00095126 E105                       	smpsAlterNote       $05
00095128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009512C E108                       	smpsAlterNote       $08
0009512E E701                       	dc.b	smpsNoAttack, $01
00095130 E10E                       	smpsAlterNote       $0E
00095132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095136 E108                       	smpsAlterNote       $08
00095138 E701                       	dc.b	smpsNoAttack, $01
0009513A E105                       	smpsAlterNote       $05
0009513C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095140 E10B                       	smpsAlterNote       $0B
00095142 E701                       	dc.b	smpsNoAttack, $01
00095144 E10F                       	smpsAlterNote       $0F
00095146 E701                       	dc.b	smpsNoAttack, $01
00095148 E10E                       	smpsAlterNote       $0E
0009514A E701                       	dc.b	smpsNoAttack, $01
0009514C E108                       	smpsAlterNote       $08
0009514E E701                       	dc.b	smpsNoAttack, $01
00095150 E104                       	smpsAlterNote       $04
00095152 E701                       	dc.b	smpsNoAttack, $01
00095154 E108                       	smpsAlterNote       $08
00095156 E701                       	dc.b	smpsNoAttack, $01
00095158 E10B                       	smpsAlterNote       $0B
0009515A E701                       	dc.b	smpsNoAttack, $01
0009515C E10F                       	smpsAlterNote       $0F
0009515E E701                       	dc.b	smpsNoAttack, $01
00095160 E10B                       	smpsAlterNote       $0B
00095162 E701                       	dc.b	smpsNoAttack, $01
00095164 E105                       	smpsAlterNote       $05
00095166 E701                       	dc.b	smpsNoAttack, $01
00095168 E104                       	smpsAlterNote       $04
0009516A E701                       	dc.b	smpsNoAttack, $01
0009516C E108                       	smpsAlterNote       $08
0009516E E701                       	dc.b	smpsNoAttack, $01
00095170 E10E                       	smpsAlterNote       $0E
00095172 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095176 E10B                       	smpsAlterNote       $0B
00095178 E701                       	dc.b	smpsNoAttack, $01
0009517A E105                       	smpsAlterNote       $05
0009517C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095180 E10B                       	smpsAlterNote       $0B
00095182 E701                       	dc.b	smpsNoAttack, $01
00095184 E10E                       	smpsAlterNote       $0E
00095186 E701                       	dc.b	smpsNoAttack, $01
00095188 E10F                       	smpsAlterNote       $0F
0009518A 8001                       	dc.b	nRst, $01
0009518C E109                       	smpsAlterNote       $09
0009518E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00095194 E108                       	smpsAlterNote       $08
00095196 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009519A E109                       	smpsAlterNote       $09
0009519C C202                       	dc.b	nF5, $02
0009519E E108                       	smpsAlterNote       $08
000951A0 C102                       	dc.b	nE5, $02
000951A2 E107                       	smpsAlterNote       $07
000951A4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000951A8 E108                       	smpsAlterNote       $08
000951AA C101 8001                  	dc.b	nE5, $01, nRst, $01
000951AE E107                       	smpsAlterNote       $07
000951B0 BF02                       	dc.b	nD5, $02
000951B2 E106                       	smpsAlterNote       $06
000951B4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000951B8 E107                       	smpsAlterNote       $07
000951BA BF01 8001                  	dc.b	nD5, $01, nRst, $01
000951BE E106                       	smpsAlterNote       $06
000951C0 BD02                       	dc.b	nC5, $02
000951C2 E10C                       	smpsAlterNote       $0C
000951C4 BB02                       	dc.b	nBb4, $02
000951C6 E106                       	smpsAlterNote       $06
000951C8 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000951CC E10C                       	smpsAlterNote       $0C
000951CE BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000951D2 E10B                       	smpsAlterNote       $0B
000951D4 BA02                       	dc.b	nA4, $02
000951D6 E10C                       	smpsAlterNote       $0C
000951D8 BB02                       	dc.b	nBb4, $02
000951DA E10B                       	smpsAlterNote       $0B
000951DC BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000951E6 E108                       	smpsAlterNote       $08
000951E8 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000951F0 E107                       	smpsAlterNote       $07
000951F2 BE02                       	dc.b	nCs5, $02
000951F4 E10B                       	smpsAlterNote       $0B
000951F6 BA02                       	dc.b	nA4, $02
000951F8 E109                       	smpsAlterNote       $09
000951FA B802 8001                  	dc.b	nG4, $02, nRst, $01
000951FE E108                       	smpsAlterNote       $08
00095200 B501 8001                  	dc.b	nE4, $01, nRst, $01
00095204 E10B                       	smpsAlterNote       $0B
00095206 AE02                       	dc.b	nA3, $02
00095208 E10C                       	smpsAlterNote       $0C
0009520A A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00095216 E10B                       	smpsAlterNote       $0B
00095218 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095220 E107                       	smpsAlterNote       $07
00095222 A706 8001                  	dc.b	nD3, $06, nRst, $01
00095226 E10B                       	smpsAlterNote       $0B
00095228 A203                       	dc.b	nA2, $03
0009522A E109                       	smpsAlterNote       $09
0009522C AA03 8001                  	dc.b	nF3, $03, nRst, $01
00095230 E108                       	smpsAlterNote       $08
00095232 A906 8001                  	dc.b	nE3, $06, nRst, $01
00095236 E107                       	smpsAlterNote       $07
00095238 A702 8001                  	dc.b	nD3, $02, nRst, $01
0009523C E106                       	smpsAlterNote       $06
0009523E A503                       	dc.b	nC3, $03
00095240 E10C                       	smpsAlterNote       $0C
00095242 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095248 E107                       	smpsAlterNote       $07
0009524A B20D                       	dc.b	nCs4, $0D
0009524C E104                       	smpsAlterNote       $04
0009524E E701                       	dc.b	smpsNoAttack, $01
00095250 E100                       	smpsAlterNote       $00
00095252 E701                       	dc.b	smpsNoAttack, $01
00095254 E104                       	smpsAlterNote       $04
00095256 E701                       	dc.b	smpsNoAttack, $01
00095258 E10A                       	smpsAlterNote       $0A
0009525A E701                       	dc.b	smpsNoAttack, $01
0009525C E10B                       	smpsAlterNote       $0B
0009525E E701                       	dc.b	smpsNoAttack, $01
00095260 E107                       	smpsAlterNote       $07
00095262 E701                       	dc.b	smpsNoAttack, $01
00095264 E101                       	smpsAlterNote       $01
00095266 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009526A E104                       	smpsAlterNote       $04
0009526C E701                       	dc.b	smpsNoAttack, $01
0009526E E10A                       	smpsAlterNote       $0A
00095270 E701                       	dc.b	smpsNoAttack, $01
00095272 E10B                       	smpsAlterNote       $0B
00095274 8001                       	dc.b	nRst, $01
00095276 E107                       	smpsAlterNote       $07
00095278 B30D                       	dc.b	nD4, $0D
0009527A E104                       	smpsAlterNote       $04
0009527C E701                       	dc.b	smpsNoAttack, $01
0009527E E100                       	smpsAlterNote       $00
00095280 E701                       	dc.b	smpsNoAttack, $01
00095282 E104                       	smpsAlterNote       $04
00095284 E701                       	dc.b	smpsNoAttack, $01
00095286 E10A                       	smpsAlterNote       $0A
00095288 E701                       	dc.b	smpsNoAttack, $01
0009528A E10B                       	smpsAlterNote       $0B
0009528C E701                       	dc.b	smpsNoAttack, $01
0009528E E107                       	smpsAlterNote       $07
00095290 E701                       	dc.b	smpsNoAttack, $01
00095292 E101                       	smpsAlterNote       $01
00095294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095298 E104                       	smpsAlterNote       $04
0009529A E701                       	dc.b	smpsNoAttack, $01
0009529C E10A                       	smpsAlterNote       $0A
0009529E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952A2 E104                       	smpsAlterNote       $04
000952A4 E701                       	dc.b	smpsNoAttack, $01
000952A6 E101                       	smpsAlterNote       $01
000952A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952AC E107                       	smpsAlterNote       $07
000952AE E701                       	dc.b	smpsNoAttack, $01
000952B0 E10B                       	smpsAlterNote       $0B
000952B2 E701                       	dc.b	smpsNoAttack, $01
000952B4 E10A                       	smpsAlterNote       $0A
000952B6 E701                       	dc.b	smpsNoAttack, $01
000952B8 E107                       	smpsAlterNote       $07
000952BA 8001                       	dc.b	nRst, $01
000952BC E108                       	smpsAlterNote       $08
000952BE B50D                       	dc.b	nE4, $0D
000952C0 E102                       	smpsAlterNote       $02
000952C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952C6 E105                       	smpsAlterNote       $05
000952C8 E701                       	dc.b	smpsNoAttack, $01
000952CA E10B                       	smpsAlterNote       $0B
000952CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952D0 E105                       	smpsAlterNote       $05
000952D2 E701                       	dc.b	smpsNoAttack, $01
000952D4 E102                       	smpsAlterNote       $02
000952D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952DA E108                       	smpsAlterNote       $08
000952DC E701                       	dc.b	smpsNoAttack, $01
000952DE E10C                       	smpsAlterNote       $0C
000952E0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000952E4 E107                       	smpsAlterNote       $07
000952E6 B30D                       	dc.b	nD4, $0D
000952E8 E101                       	smpsAlterNote       $01
000952EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952EE E104                       	smpsAlterNote       $04
000952F0 E701                       	dc.b	smpsNoAttack, $01
000952F2 E10A                       	smpsAlterNote       $0A
000952F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952F8 E104                       	smpsAlterNote       $04
000952FA E701                       	dc.b	smpsNoAttack, $01
000952FC E101                       	smpsAlterNote       $01
000952FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095302 E107                       	smpsAlterNote       $07
00095304 E701                       	dc.b	smpsNoAttack, $01
00095306 E10B                       	smpsAlterNote       $0B
00095308 E701                       	dc.b	smpsNoAttack, $01
0009530A E10A                       	smpsAlterNote       $0A
0009530C E701                       	dc.b	smpsNoAttack, $01
0009530E E104                       	smpsAlterNote       $04
00095310 E701                       	dc.b	smpsNoAttack, $01
00095312 E100                       	smpsAlterNote       $00
00095314 E701                       	dc.b	smpsNoAttack, $01
00095316 E104                       	smpsAlterNote       $04
00095318 E701                       	dc.b	smpsNoAttack, $01
0009531A E107                       	smpsAlterNote       $07
0009531C E701                       	dc.b	smpsNoAttack, $01
0009531E E10B                       	smpsAlterNote       $0B
00095320 E701                       	dc.b	smpsNoAttack, $01
00095322 E107                       	smpsAlterNote       $07
00095324 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00095328 E101                       	smpsAlterNote       $01
0009532A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009532E E107                       	smpsAlterNote       $07
00095330 E701                       	dc.b	smpsNoAttack, $01
00095332 E10A                       	smpsAlterNote       $0A
00095334 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095338 E104                       	smpsAlterNote       $04
0009533A E701                       	dc.b	smpsNoAttack, $01
0009533C E100                       	smpsAlterNote       $00
0009533E E701                       	dc.b	smpsNoAttack, $01
00095340 E101                       	smpsAlterNote       $01
00095342 E701                       	dc.b	smpsNoAttack, $01
00095344 E107                       	smpsAlterNote       $07
00095346 E701                       	dc.b	smpsNoAttack, $01
00095348 E10B                       	smpsAlterNote       $0B
0009534A E701                       	dc.b	smpsNoAttack, $01
0009534C E107                       	smpsAlterNote       $07
0009534E B30E                       	dc.b	nD4, $0E
00095350 E101                       	smpsAlterNote       $01
00095352 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095356 E107                       	smpsAlterNote       $07
00095358 E701                       	dc.b	smpsNoAttack, $01
0009535A E10A                       	smpsAlterNote       $0A
0009535C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095360 E104                       	smpsAlterNote       $04
00095362 E701                       	dc.b	smpsNoAttack, $01
00095364 E100                       	smpsAlterNote       $00
00095366 E701                       	dc.b	smpsNoAttack, $01
00095368 E101                       	smpsAlterNote       $01
0009536A E701                       	dc.b	smpsNoAttack, $01
0009536C E107                       	smpsAlterNote       $07
0009536E E701                       	dc.b	smpsNoAttack, $01
00095370 E10B                       	smpsAlterNote       $0B
00095372 E701                       	dc.b	smpsNoAttack, $01
00095374 E107                       	smpsAlterNote       $07
00095376 E701                       	dc.b	smpsNoAttack, $01
00095378 E104                       	smpsAlterNote       $04
0009537A E701                       	dc.b	smpsNoAttack, $01
0009537C E100                       	smpsAlterNote       $00
0009537E E701                       	dc.b	smpsNoAttack, $01
00095380 E104                       	smpsAlterNote       $04
00095382 E701                       	dc.b	smpsNoAttack, $01
00095384 E10A                       	smpsAlterNote       $0A
00095386 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009538A E107                       	smpsAlterNote       $07
0009538C E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00095390 E104                       	smpsAlterNote       $04
00095392 E701                       	dc.b	smpsNoAttack, $01
00095394 E100                       	smpsAlterNote       $00
00095396 E701                       	dc.b	smpsNoAttack, $01
00095398 E101                       	smpsAlterNote       $01
0009539A E701                       	dc.b	smpsNoAttack, $01
0009539C E107                       	smpsAlterNote       $07
0009539E E701                       	dc.b	smpsNoAttack, $01
000953A0 E10B                       	smpsAlterNote       $0B
000953A2 E701                       	dc.b	smpsNoAttack, $01
000953A4 E107                       	smpsAlterNote       $07
000953A6 E701                       	dc.b	smpsNoAttack, $01
000953A8 E104                       	smpsAlterNote       $04
000953AA E701                       	dc.b	smpsNoAttack, $01
000953AC E100                       	smpsAlterNote       $00
000953AE E701                       	dc.b	smpsNoAttack, $01
000953B0 E104                       	smpsAlterNote       $04
000953B2 E701                       	dc.b	smpsNoAttack, $01
000953B4 E10A                       	smpsAlterNote       $0A
000953B6 E701                       	dc.b	smpsNoAttack, $01
000953B8 E10B                       	smpsAlterNote       $0B
000953BA E701                       	dc.b	smpsNoAttack, $01
000953BE E6FF                       	smpsAlterVol        $FF
000953C0 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000953CC 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000953D4 E109                       	smpsAlterNote       $09
000953D6 E601                       	smpsAlterVol        $01
000953D8 B60D                       	dc.b	nF4, $0D
000953DA E106                       	smpsAlterNote       $06
000953DC E701                       	dc.b	smpsNoAttack, $01
000953DE E102                       	smpsAlterNote       $02
000953E0 E701                       	dc.b	smpsNoAttack, $01
000953E2 E106                       	smpsAlterNote       $06
000953E4 E701                       	dc.b	smpsNoAttack, $01
000953E6 E109                       	smpsAlterNote       $09
000953E8 E701                       	dc.b	smpsNoAttack, $01
000953EA E10D                       	smpsAlterNote       $0D
000953EC E701                       	dc.b	smpsNoAttack, $01
000953EE E109                       	smpsAlterNote       $09
000953F0 E701                       	dc.b	smpsNoAttack, $01
000953F2 E103                       	smpsAlterNote       $03
000953F4 E701                       	dc.b	smpsNoAttack, $01
000953F6 E102                       	smpsAlterNote       $02
000953F8 E701                       	dc.b	smpsNoAttack, $01
000953FA E106                       	smpsAlterNote       $06
000953FC E701                       	dc.b	smpsNoAttack, $01
000953FE E10C                       	smpsAlterNote       $0C
00095400 E701                       	dc.b	smpsNoAttack, $01
00095402 E10D                       	smpsAlterNote       $0D
00095404 8001                       	dc.b	nRst, $01
00095406 E109                       	smpsAlterNote       $09
00095408 B80D                       	dc.b	nG4, $0D
0009540A E106                       	smpsAlterNote       $06
0009540C E701                       	dc.b	smpsNoAttack, $01
0009540E E102                       	smpsAlterNote       $02
00095410 E701                       	dc.b	smpsNoAttack, $01
00095412 E106                       	smpsAlterNote       $06
00095414 E701                       	dc.b	smpsNoAttack, $01
00095416 E109                       	smpsAlterNote       $09
00095418 E701                       	dc.b	smpsNoAttack, $01
0009541A E10D                       	smpsAlterNote       $0D
0009541C E701                       	dc.b	smpsNoAttack, $01
0009541E E109                       	smpsAlterNote       $09
00095420 E701                       	dc.b	smpsNoAttack, $01
00095422 E103                       	smpsAlterNote       $03
00095424 E701                       	dc.b	smpsNoAttack, $01
00095426 E102                       	smpsAlterNote       $02
00095428 E701                       	dc.b	smpsNoAttack, $01
0009542A E106                       	smpsAlterNote       $06
0009542C E701                       	dc.b	smpsNoAttack, $01
0009542E E10C                       	smpsAlterNote       $0C
00095430 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095434 E106                       	smpsAlterNote       $06
00095436 E701                       	dc.b	smpsNoAttack, $01
00095438 E103                       	smpsAlterNote       $03
0009543A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009543E E109                       	smpsAlterNote       $09
00095440 E701                       	dc.b	smpsNoAttack, $01
00095442 E10D                       	smpsAlterNote       $0D
00095444 E701                       	dc.b	smpsNoAttack, $01
00095446 E10C                       	smpsAlterNote       $0C
00095448 E701                       	dc.b	smpsNoAttack, $01
0009544A E109                       	smpsAlterNote       $09
0009544C 8001                       	dc.b	nRst, $01
0009544E E10B                       	smpsAlterNote       $0B
00095450 BA0D                       	dc.b	nA4, $0D
00095452 E105                       	smpsAlterNote       $05
00095454 E701                       	dc.b	smpsNoAttack, $01
00095456 E104                       	smpsAlterNote       $04
00095458 E701                       	dc.b	smpsNoAttack, $01
0009545A E108                       	smpsAlterNote       $08
0009545C E701                       	dc.b	smpsNoAttack, $01
0009545E E10E                       	smpsAlterNote       $0E
00095460 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095464 E10B                       	smpsAlterNote       $0B
00095466 E701                       	dc.b	smpsNoAttack, $01
00095468 E105                       	smpsAlterNote       $05
0009546A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009546E E10B                       	smpsAlterNote       $0B
00095470 E701                       	dc.b	smpsNoAttack, $01
00095472 E10E                       	smpsAlterNote       $0E
00095474 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095478 E108                       	smpsAlterNote       $08
0009547A E701                       	dc.b	smpsNoAttack, $01
0009547C E104                       	smpsAlterNote       $04
0009547E E701                       	dc.b	smpsNoAttack, $01
00095480 E105                       	smpsAlterNote       $05
00095482 E701                       	dc.b	smpsNoAttack, $01
00095484 E10B                       	smpsAlterNote       $0B
00095486 E701                       	dc.b	smpsNoAttack, $01
00095488 E10F                       	smpsAlterNote       $0F
0009548A E701                       	dc.b	smpsNoAttack, $01
0009548C E10B                       	smpsAlterNote       $0B
0009548E E701                       	dc.b	smpsNoAttack, $01
00095490 E108                       	smpsAlterNote       $08
00095492 E701                       	dc.b	smpsNoAttack, $01
00095494 E104                       	smpsAlterNote       $04
00095496 E701                       	dc.b	smpsNoAttack, $01
00095498 E108                       	smpsAlterNote       $08
0009549A E701                       	dc.b	smpsNoAttack, $01
0009549C E10E                       	smpsAlterNote       $0E
0009549E E701                       	dc.b	smpsNoAttack, $01
000954A0 E10F                       	smpsAlterNote       $0F
000954A2 E701                       	dc.b	smpsNoAttack, $01
000954A4 E10B                       	smpsAlterNote       $0B
000954A6 E701                       	dc.b	smpsNoAttack, $01
000954A8 E105                       	smpsAlterNote       $05
000954AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954AE E108                       	smpsAlterNote       $08
000954B0 E701                       	dc.b	smpsNoAttack, $01
000954B2 E10E                       	smpsAlterNote       $0E
000954B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954B8 E108                       	smpsAlterNote       $08
000954BA E701                       	dc.b	smpsNoAttack, $01
000954BC E105                       	smpsAlterNote       $05
000954BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954C2 E108                       	smpsAlterNote       $08
000954C4 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000954C8 E109                       	smpsAlterNote       $09
000954CA B60D                       	dc.b	nF4, $0D
000954CC E103                       	smpsAlterNote       $03
000954CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954D2 E106                       	smpsAlterNote       $06
000954D4 E701                       	dc.b	smpsNoAttack, $01
000954D6 E10C                       	smpsAlterNote       $0C
000954D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954DC E106                       	smpsAlterNote       $06
000954DE E701                       	dc.b	smpsNoAttack, $01
000954E0 E103                       	smpsAlterNote       $03
000954E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954E6 E109                       	smpsAlterNote       $09
000954E8 E701                       	dc.b	smpsNoAttack, $01
000954EA E10D                       	smpsAlterNote       $0D
000954EC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000954F0 E109                       	smpsAlterNote       $09
000954F2 B80D                       	dc.b	nG4, $0D
000954F4 E103                       	smpsAlterNote       $03
000954F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954FA E109                       	smpsAlterNote       $09
000954FC E701                       	dc.b	smpsNoAttack, $01
000954FE E10C                       	smpsAlterNote       $0C
00095500 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095504 E106                       	smpsAlterNote       $06
00095506 E701                       	dc.b	smpsNoAttack, $01
00095508 E102                       	smpsAlterNote       $02
0009550A E701                       	dc.b	smpsNoAttack, $01
0009550C E103                       	smpsAlterNote       $03
0009550E E701                       	dc.b	smpsNoAttack, $01
00095510 E109                       	smpsAlterNote       $09
00095512 E701                       	dc.b	smpsNoAttack, $01
00095514 E10D                       	smpsAlterNote       $0D
00095516 E701                       	dc.b	smpsNoAttack, $01
00095518 E109                       	smpsAlterNote       $09
0009551A E701                       	dc.b	smpsNoAttack, $01
0009551C E106                       	smpsAlterNote       $06
0009551E E701                       	dc.b	smpsNoAttack, $01
00095520 E102                       	smpsAlterNote       $02
00095522 E701                       	dc.b	smpsNoAttack, $01
00095524 E106                       	smpsAlterNote       $06
00095526 E701                       	dc.b	smpsNoAttack, $01
00095528 E10C                       	smpsAlterNote       $0C
0009552A E701                       	dc.b	smpsNoAttack, $01
0009552C E10D                       	smpsAlterNote       $0D
0009552E E701                       	dc.b	smpsNoAttack, $01
00095530 E109                       	smpsAlterNote       $09
00095532 E701                       	dc.b	smpsNoAttack, $01
00095534 E10B                       	smpsAlterNote       $0B
00095536 BA0D                       	dc.b	nA4, $0D
00095538 E108                       	smpsAlterNote       $08
0009553A E701                       	dc.b	smpsNoAttack, $01
0009553C E105                       	smpsAlterNote       $05
0009553E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095542 E10B                       	smpsAlterNote       $0B
00095544 E701                       	dc.b	smpsNoAttack, $01
00095546 E10F                       	smpsAlterNote       $0F
00095548 E701                       	dc.b	smpsNoAttack, $01
0009554A E10E                       	smpsAlterNote       $0E
0009554C E701                       	dc.b	smpsNoAttack, $01
0009554E E108                       	smpsAlterNote       $08
00095550 E701                       	dc.b	smpsNoAttack, $01
00095552 E104                       	smpsAlterNote       $04
00095554 E701                       	dc.b	smpsNoAttack, $01
00095556 E108                       	smpsAlterNote       $08
00095558 E701                       	dc.b	smpsNoAttack, $01
0009555A E10B                       	smpsAlterNote       $0B
0009555C E701                       	dc.b	smpsNoAttack, $01
0009555E E10F                       	smpsAlterNote       $0F
00095560 E701                       	dc.b	smpsNoAttack, $01
00095562 E10B                       	smpsAlterNote       $0B
00095564 E701                       	dc.b	smpsNoAttack, $01
00095566 E105                       	smpsAlterNote       $05
00095568 E701                       	dc.b	smpsNoAttack, $01
0009556A E104                       	smpsAlterNote       $04
0009556C E701                       	dc.b	smpsNoAttack, $01
0009556E E108                       	smpsAlterNote       $08
00095570 E701                       	dc.b	smpsNoAttack, $01
00095572 E10E                       	smpsAlterNote       $0E
00095574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095578 E10B                       	smpsAlterNote       $0B
0009557A E701                       	dc.b	smpsNoAttack, $01
0009557C E105                       	smpsAlterNote       $05
0009557E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095582 E10B                       	smpsAlterNote       $0B
00095584 E701                       	dc.b	smpsNoAttack, $01
00095586 E10E                       	smpsAlterNote       $0E
00095588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009558C E108                       	smpsAlterNote       $08
0009558E E701                       	dc.b	smpsNoAttack, $01
00095590 E105                       	smpsAlterNote       $05
00095592 8001                       	dc.b	nRst, $01
00095594 E109                       	smpsAlterNote       $09
00095596 B60A                       	dc.b	nF4, $0A
00095598 E108                       	smpsAlterNote       $08
0009559A B507                       	dc.b	nE4, $07
0009559C E107                       	smpsAlterNote       $07
0009559E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000955A2 E108                       	smpsAlterNote       $08
000955A4 B503                       	dc.b	nE4, $03
000955A6 E109                       	smpsAlterNote       $09
000955A8 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000955B0 E10B                       	smpsAlterNote       $0B
000955B2 BA0D                       	dc.b	nA4, $0D
000955B4 E108                       	smpsAlterNote       $08
000955B6 E701                       	dc.b	smpsNoAttack, $01
000955B8 E104                       	smpsAlterNote       $04
000955BA E701                       	dc.b	smpsNoAttack, $01
000955BC E108                       	smpsAlterNote       $08
000955BE E701                       	dc.b	smpsNoAttack, $01
000955C0 E10B                       	smpsAlterNote       $0B
000955C2 E701                       	dc.b	smpsNoAttack, $01
000955C4 E10F                       	smpsAlterNote       $0F
000955C6 E701                       	dc.b	smpsNoAttack, $01
000955C8 E10B                       	smpsAlterNote       $0B
000955CA E701                       	dc.b	smpsNoAttack, $01
000955CC E105                       	smpsAlterNote       $05
000955CE E701                       	dc.b	smpsNoAttack, $01
000955D0 E104                       	smpsAlterNote       $04
000955D2 E701                       	dc.b	smpsNoAttack, $01
000955D4 E108                       	smpsAlterNote       $08
000955D6 E701                       	dc.b	smpsNoAttack, $01
000955D8 E10E                       	smpsAlterNote       $0E
000955DA E701                       	dc.b	smpsNoAttack, $01
000955DC E10F                       	smpsAlterNote       $0F
000955DE 8001                       	dc.b	nRst, $01
000955E0 E109                       	smpsAlterNote       $09
000955E2 C20D                       	dc.b	nF5, $0D
000955E4 E106                       	smpsAlterNote       $06
000955E6 E701                       	dc.b	smpsNoAttack, $01
000955E8 E102                       	smpsAlterNote       $02
000955EA E701                       	dc.b	smpsNoAttack, $01
000955EC E106                       	smpsAlterNote       $06
000955EE E701                       	dc.b	smpsNoAttack, $01
000955F0 E109                       	smpsAlterNote       $09
000955F2 E701                       	dc.b	smpsNoAttack, $01
000955F4 E10D                       	smpsAlterNote       $0D
000955F6 E701                       	dc.b	smpsNoAttack, $01
000955F8 E109                       	smpsAlterNote       $09
000955FA E701                       	dc.b	smpsNoAttack, $01
000955FC E103                       	smpsAlterNote       $03
000955FE E701                       	dc.b	smpsNoAttack, $01
00095600 E102                       	smpsAlterNote       $02
00095602 E701                       	dc.b	smpsNoAttack, $01
00095604 E106                       	smpsAlterNote       $06
00095606 E701                       	dc.b	smpsNoAttack, $01
00095608 E10C                       	smpsAlterNote       $0C
0009560A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009560E E109                       	smpsAlterNote       $09
00095610 E701                       	dc.b	smpsNoAttack, $01
00095612 E103                       	smpsAlterNote       $03
00095614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095618 E109                       	smpsAlterNote       $09
0009561A E701                       	dc.b	smpsNoAttack, $01
0009561C E10C                       	smpsAlterNote       $0C
0009561E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095622 E106                       	smpsAlterNote       $06
00095624 E701                       	dc.b	smpsNoAttack, $01
00095626 E102                       	smpsAlterNote       $02
00095628 E701                       	dc.b	smpsNoAttack, $01
0009562A E103                       	smpsAlterNote       $03
0009562C E701                       	dc.b	smpsNoAttack, $01
0009562E E109                       	smpsAlterNote       $09
00095630 E701                       	dc.b	smpsNoAttack, $01
00095632 E10D                       	smpsAlterNote       $0D
00095634 E701                       	dc.b	smpsNoAttack, $01
00095636 E109                       	smpsAlterNote       $09
00095638 E701                       	dc.b	smpsNoAttack, $01
0009563A E106                       	smpsAlterNote       $06
0009563C E701                       	dc.b	smpsNoAttack, $01
0009563E E102                       	smpsAlterNote       $02
00095640 E701                       	dc.b	smpsNoAttack, $01
00095642 E106                       	smpsAlterNote       $06
00095644 E701                       	dc.b	smpsNoAttack, $01
00095646 E10C                       	smpsAlterNote       $0C
00095648 E701                       	dc.b	smpsNoAttack, $01
0009564A E10D                       	smpsAlterNote       $0D
0009564C E701                       	dc.b	smpsNoAttack, $01
0009564E E109                       	smpsAlterNote       $09
00095650 E701                       	dc.b	smpsNoAttack, $01
00095652 E103                       	smpsAlterNote       $03
00095654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095658 E106                       	smpsAlterNote       $06
0009565A E701                       	dc.b	smpsNoAttack, $01
0009565C E10C                       	smpsAlterNote       $0C
0009565E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095662 E106                       	smpsAlterNote       $06
00095664 E701                       	dc.b	smpsNoAttack, $01
00095666 E103                       	smpsAlterNote       $03
00095668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009566C E109                       	smpsAlterNote       $09
0009566E E701                       	dc.b	smpsNoAttack, $01
00095670 E10D                       	smpsAlterNote       $0D
00095672 E701                       	dc.b	smpsNoAttack, $01
00095674 E10C                       	smpsAlterNote       $0C
00095676 E701                       	dc.b	smpsNoAttack, $01
00095678 E106                       	smpsAlterNote       $06
0009567A E701                       	dc.b	smpsNoAttack, $01
0009567C E103                       	smpsAlterNote       $03
0009567E 8001                       	dc.b	nRst, $01
00095680 E109                       	smpsAlterNote       $09
00095682 C206 8001                  	dc.b	nF5, $06, nRst, $01
00095688 E10C                       	smpsAlterNote       $0C
0009568A E601                       	smpsAlterVol        $01
0009568C BB0D                       	dc.b	nBb4, $0D
0009568E E106                       	smpsAlterNote       $06
00095690 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095694 E109                       	smpsAlterNote       $09
00095696 E701                       	dc.b	smpsNoAttack, $01
00095698 E10F                       	smpsAlterNote       $0F
0009569A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009569E E109                       	smpsAlterNote       $09
000956A0 E701                       	dc.b	smpsNoAttack, $01
000956A2 E106                       	smpsAlterNote       $06
000956A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956A8 E10C                       	smpsAlterNote       $0C
000956AA E701                       	dc.b	smpsNoAttack, $01
000956AC E110                       	smpsAlterNote       $10
000956AE E701                       	dc.b	smpsNoAttack, $01
000956B0 E10F                       	smpsAlterNote       $0F
000956B2 E701                       	dc.b	smpsNoAttack, $01
000956B4 E109                       	smpsAlterNote       $09
000956B6 E701                       	dc.b	smpsNoAttack, $01
000956B8 E105                       	smpsAlterNote       $05
000956BA E701                       	dc.b	smpsNoAttack, $01
000956BC E106                       	smpsAlterNote       $06
000956BE 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000956C2 E103                       	smpsAlterNote       $03
000956C4 E701                       	dc.b	smpsNoAttack, $01
000956C6 E1FF                       	smpsAlterNote       $FF
000956C8 E701                       	dc.b	smpsNoAttack, $01
000956CA E103                       	smpsAlterNote       $03
000956CC E701                       	dc.b	smpsNoAttack, $01
000956CE E106                       	smpsAlterNote       $06
000956D0 E701                       	dc.b	smpsNoAttack, $01
000956D2 E10A                       	smpsAlterNote       $0A
000956D4 E701                       	dc.b	smpsNoAttack, $01
000956D6 E106                       	smpsAlterNote       $06
000956D8 E701                       	dc.b	smpsNoAttack, $01
000956DA E100                       	smpsAlterNote       $00
000956DC E701                       	dc.b	smpsNoAttack, $01
000956DE E1FF                       	smpsAlterNote       $FF
000956E0 E701                       	dc.b	smpsNoAttack, $01
000956E2 E103                       	smpsAlterNote       $03
000956E4 E701                       	dc.b	smpsNoAttack, $01
000956E6 E109                       	smpsAlterNote       $09
000956E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956EC E106                       	smpsAlterNote       $06
000956EE E701                       	dc.b	smpsNoAttack, $01
000956F0 E100                       	smpsAlterNote       $00
000956F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F6 E107                       	smpsAlterNote       $07
000956F8 BF0E                       	dc.b	nD5, $0E
000956FA E101                       	smpsAlterNote       $01
000956FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095700 E107                       	smpsAlterNote       $07
00095702 E701                       	dc.b	smpsNoAttack, $01
00095704 E10A                       	smpsAlterNote       $0A
00095706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009570A E104                       	smpsAlterNote       $04
0009570C E701                       	dc.b	smpsNoAttack, $01
0009570E E100                       	smpsAlterNote       $00
00095710 E701                       	dc.b	smpsNoAttack, $01
00095712 E101                       	smpsAlterNote       $01
00095714 E701                       	dc.b	smpsNoAttack, $01
00095716 E107                       	smpsAlterNote       $07
00095718 E701                       	dc.b	smpsNoAttack, $01
0009571A E10B                       	smpsAlterNote       $0B
0009571C E701                       	dc.b	smpsNoAttack, $01
0009571E E107                       	smpsAlterNote       $07
00095720 E701                       	dc.b	smpsNoAttack, $01
00095722 E104                       	smpsAlterNote       $04
00095724 E701                       	dc.b	smpsNoAttack, $01
00095726 E100                       	smpsAlterNote       $00
00095728 E701                       	dc.b	smpsNoAttack, $01
0009572A E101                       	smpsAlterNote       $01
0009572C 8001                       	dc.b	nRst, $01
0009572E E108                       	smpsAlterNote       $08
00095730 C10C                       	dc.b	nE5, $0C
00095732 E109                       	smpsAlterNote       $09
00095734 C201 8001                  	dc.b	nF5, $01, nRst, $01
00095738 E10A                       	smpsAlterNote       $0A
0009573A 8001                       	dc.b	nRst, $01
0009573C E109                       	smpsAlterNote       $09
0009573E C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00095742 E106                       	smpsAlterNote       $06
00095744 E701                       	dc.b	smpsNoAttack, $01
00095746 E102                       	smpsAlterNote       $02
00095748 E701                       	dc.b	smpsNoAttack, $01
0009574A E103                       	smpsAlterNote       $03
0009574C E701                       	dc.b	smpsNoAttack, $01
0009574E E109                       	smpsAlterNote       $09
00095750 E701                       	dc.b	smpsNoAttack, $01
00095752 E10D                       	smpsAlterNote       $0D
00095754 E701                       	dc.b	smpsNoAttack, $01
00095756 E109                       	smpsAlterNote       $09
00095758 E701                       	dc.b	smpsNoAttack, $01
0009575A E106                       	smpsAlterNote       $06
0009575C E701                       	dc.b	smpsNoAttack, $01
0009575E E102                       	smpsAlterNote       $02
00095760 E701                       	dc.b	smpsNoAttack, $01
00095762 E106                       	smpsAlterNote       $06
00095764 E701                       	dc.b	smpsNoAttack, $01
00095766 E10C                       	smpsAlterNote       $0C
00095768 E701                       	dc.b	smpsNoAttack, $01
0009576A E10D                       	smpsAlterNote       $0D
0009576C E701                       	dc.b	smpsNoAttack, $01
0009576E E109                       	smpsAlterNote       $09
00095770 C40D                       	dc.b	nG5, $0D
00095772 E106                       	smpsAlterNote       $06
00095774 E701                       	dc.b	smpsNoAttack, $01
00095776 E102                       	smpsAlterNote       $02
00095778 E701                       	dc.b	smpsNoAttack, $01
0009577A E103                       	smpsAlterNote       $03
0009577C E701                       	dc.b	smpsNoAttack, $01
0009577E E109                       	smpsAlterNote       $09
00095780 E701                       	dc.b	smpsNoAttack, $01
00095782 E108                       	smpsAlterNote       $08
00095784 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00095790 E109                       	smpsAlterNote       $09
00095792 C20D                       	dc.b	nF5, $0D
00095794 E106                       	smpsAlterNote       $06
00095796 E701                       	dc.b	smpsNoAttack, $01
00095798 E102                       	smpsAlterNote       $02
0009579A E701                       	dc.b	smpsNoAttack, $01
0009579C E106                       	smpsAlterNote       $06
0009579E E701                       	dc.b	smpsNoAttack, $01
000957A0 E109                       	smpsAlterNote       $09
000957A2 E701                       	dc.b	smpsNoAttack, $01
000957A4 E10D                       	smpsAlterNote       $0D
000957A6 E701                       	dc.b	smpsNoAttack, $01
000957A8 E109                       	smpsAlterNote       $09
000957AA E701                       	dc.b	smpsNoAttack, $01
000957AC E103                       	smpsAlterNote       $03
000957AE E701                       	dc.b	smpsNoAttack, $01
000957B0 E102                       	smpsAlterNote       $02
000957B2 E701                       	dc.b	smpsNoAttack, $01
000957B4 E106                       	smpsAlterNote       $06
000957B6 E701                       	dc.b	smpsNoAttack, $01
000957B8 E10C                       	smpsAlterNote       $0C
000957BA E701                       	dc.b	smpsNoAttack, $01
000957BC E10D                       	smpsAlterNote       $0D
000957BE 8001                       	dc.b	nRst, $01
000957C0 E112                       	smpsAlterNote       $12
000957C2 C401                       	dc.b	nG5, $01
000957C4 E1EB                       	smpsAlterNote       $EB
000957C6 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000957C9 E1FD                       	smpsAlterNote       $FD
000957CB E701                       	dc.b	smpsNoAttack, $01
000957CD E10F                       	smpsAlterNote       $0F
000957CF E701                       	dc.b	smpsNoAttack, $01
000957D1 E118                       	smpsAlterNote       $18
000957D3 E701                       	dc.b	smpsNoAttack, $01
000957D5 E1ED                       	smpsAlterNote       $ED
000957D7 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000957DA E1FF                       	smpsAlterNote       $FF
000957DC E701                       	dc.b	smpsNoAttack, $01
000957DE E10B                       	smpsAlterNote       $0B
000957E0 E703                       	dc.b	smpsNoAttack, $03
000957E2 E109                       	smpsAlterNote       $09
000957E4 C407                       	dc.b	nG5, $07
000957E6 E108                       	smpsAlterNote       $08
000957E8 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000957F4 E109                       	smpsAlterNote       $09
000957F6 C20D                       	dc.b	nF5, $0D
000957F8 E103                       	smpsAlterNote       $03
000957FA E701                       	dc.b	smpsNoAttack, $01
000957FC E102                       	smpsAlterNote       $02
000957FE E701                       	dc.b	smpsNoAttack, $01
00095800 E106                       	smpsAlterNote       $06
00095802 E701                       	dc.b	smpsNoAttack, $01
00095804 E10C                       	smpsAlterNote       $0C
00095806 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009580A E109                       	smpsAlterNote       $09
0009580C E701                       	dc.b	smpsNoAttack, $01
0009580E E103                       	smpsAlterNote       $03
00095810 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095814 E109                       	smpsAlterNote       $09
00095816 E701                       	dc.b	smpsNoAttack, $01
00095818 E10C                       	smpsAlterNote       $0C
0009581A E701                       	dc.b	smpsNoAttack, $01
0009581C E10D                       	smpsAlterNote       $0D
0009581E 8001                       	dc.b	nRst, $01
00095820 E10B                       	smpsAlterNote       $0B
00095822 C609 8001                  	dc.b	nA5, $09, nRst, $01
00095826 E109                       	smpsAlterNote       $09
00095828 B806 8001                  	dc.b	nG4, $06, nRst, $01
0009582C E108                       	smpsAlterNote       $08
0009582E C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009583A 8001                       	dc.b	nRst, $01
0009583C E109                       	smpsAlterNote       $09
0009583E C20D                       	dc.b	nF5, $0D
00095840 E103                       	smpsAlterNote       $03
00095842 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095846 E106                       	smpsAlterNote       $06
00095848 E701                       	dc.b	smpsNoAttack, $01
0009584A E10C                       	smpsAlterNote       $0C
0009584C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095850 E106                       	smpsAlterNote       $06
00095852 E701                       	dc.b	smpsNoAttack, $01
00095854 E103                       	smpsAlterNote       $03
00095856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009585A E109                       	smpsAlterNote       $09
0009585C E701                       	dc.b	smpsNoAttack, $01
0009585E E10D                       	smpsAlterNote       $0D
00095860 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095866 E108                       	smpsAlterNote       $08
00095868 E6FF                       	smpsAlterVol        $FF
0009586A A806                       	dc.b	nEb3, $06
0009586C E10C                       	smpsAlterNote       $0C
0009586E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095872 E108                       	smpsAlterNote       $08
00095874 A803                       	dc.b	nEb3, $03
00095876 E109                       	smpsAlterNote       $09
00095878 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0009587C E10C                       	smpsAlterNote       $0C
0009587E AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095888 E109                       	smpsAlterNote       $09
0009588A E602                       	smpsAlterVol        $02
0009588C B604                       	dc.b	nF4, $04
0009588E E602                       	smpsAlterVol        $02
00095890 F6F1 AA                    	smpsJump            music84_Jump02
00095893                            
00095893                            ; FM4 Data
00095893                            music84_FM4:
00095895 E040                       	smpsPan             panRight, $00
00095897 8003                       	dc.b	nRst, $03
00095899 E10F                       	smpsAlterNote       $0F
0009589B C603 8008                  	dc.b	nA5, $03, nRst, $08
0009589F E10D                       	smpsAlterNote       $0D
000958A1 C403 800A                  	dc.b	nG5, $03, nRst, $0A
000958A5 E10C                       	smpsAlterNote       $0C
000958A7 C103 8004                  	dc.b	nE5, $03, nRst, $04
000958AD E6FE                       	smpsAlterVol        $FE
000958AF E110                       	smpsAlterNote       $10
000958B1 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000958B5 E10F                       	smpsAlterNote       $0F
000958B7 C602 8001                  	dc.b	nA5, $02, nRst, $01
000958BB E10D                       	smpsAlterNote       $0D
000958BD C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000958C6 E10C                       	smpsAlterNote       $0C
000958C8 C103                       	dc.b	nE5, $03
000958CA E10A                       	smpsAlterNote       $0A
000958CC BD03 8001                  	dc.b	nC5, $03, nRst, $01
000958D2 03                         	dc.b	$03
000958D3                            
000958D3                            music84_Jump01:
000958D3 E10B                       	smpsAlterNote       $0B
000958D5 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000958D9 E10C                       	smpsAlterNote       $0C
000958DB C102 8001                  	dc.b	nE5, $02, nRst, $01
000958DF E10D                       	smpsAlterNote       $0D
000958E1 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000958EB E10B                       	smpsAlterNote       $0B
000958ED BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000958F1 E107                       	smpsAlterNote       $07
000958F3 E701                       	dc.b	smpsNoAttack, $01
000958F5 E103                       	smpsAlterNote       $03
000958F7 E701                       	dc.b	smpsNoAttack, $01
000958F9 E104                       	smpsAlterNote       $04
000958FB E701                       	dc.b	smpsNoAttack, $01
000958FD E10A                       	smpsAlterNote       $0A
000958FF E701                       	dc.b	smpsNoAttack, $01
00095901 E10E                       	smpsAlterNote       $0E
00095903 E701                       	dc.b	smpsNoAttack, $01
00095905 E10A                       	smpsAlterNote       $0A
00095907 E701                       	dc.b	smpsNoAttack, $01
00095909 E107                       	smpsAlterNote       $07
0009590B E701                       	dc.b	smpsNoAttack, $01
0009590D E104                       	smpsAlterNote       $04
0009590F 8001                       	dc.b	nRst, $01
00095911 E110                       	smpsAlterNote       $10
00095913 C703                       	dc.b	nBb5, $03
00095915 E10F                       	smpsAlterNote       $0F
00095917 C603 8001                  	dc.b	nA5, $03, nRst, $01
0009591B E10D                       	smpsAlterNote       $0D
0009591D C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095923 E10C                       	smpsAlterNote       $0C
00095925 E701                       	dc.b	smpsNoAttack, $01
00095927 E108                       	smpsAlterNote       $08
00095929 E701                       	dc.b	smpsNoAttack, $01
0009592B E10C                       	smpsAlterNote       $0C
0009592D E701                       	dc.b	smpsNoAttack, $01
0009592F E10F                       	smpsAlterNote       $0F
00095931 E701                       	dc.b	smpsNoAttack, $01
00095933 E113                       	smpsAlterNote       $13
00095935 E701                       	dc.b	smpsNoAttack, $01
00095937 E10F                       	smpsAlterNote       $0F
00095939 E701                       	dc.b	smpsNoAttack, $01
0009593B E109                       	smpsAlterNote       $09
0009593D E701                       	dc.b	smpsNoAttack, $01
0009593F E108                       	smpsAlterNote       $08
00095941 E701                       	dc.b	smpsNoAttack, $01
00095943 E10C                       	smpsAlterNote       $0C
00095945 E701                       	dc.b	smpsNoAttack, $01
00095947 E112                       	smpsAlterNote       $12
00095949 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009594D E10C                       	smpsAlterNote       $0C
0009594F E701                       	dc.b	smpsNoAttack, $01
00095951 E109                       	smpsAlterNote       $09
00095953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095957 E10F                       	smpsAlterNote       $0F
00095959 E701                       	dc.b	smpsNoAttack, $01
0009595B E113                       	smpsAlterNote       $13
0009595D E701                       	dc.b	smpsNoAttack, $01
0009595F E112                       	smpsAlterNote       $12
00095961 E701                       	dc.b	smpsNoAttack, $01
00095963 E10C                       	smpsAlterNote       $0C
00095965 E701                       	dc.b	smpsNoAttack, $01
00095967 E108                       	smpsAlterNote       $08
00095969 E701                       	dc.b	smpsNoAttack, $01
0009596B E10C                       	smpsAlterNote       $0C
0009596D E701                       	dc.b	smpsNoAttack, $01
0009596F E10F                       	smpsAlterNote       $0F
00095971 E701                       	dc.b	smpsNoAttack, $01
00095973 E113                       	smpsAlterNote       $13
00095975 E701                       	dc.b	smpsNoAttack, $01
00095977 E10F                       	smpsAlterNote       $0F
00095979 E701                       	dc.b	smpsNoAttack, $01
0009597B E109                       	smpsAlterNote       $09
0009597D E701                       	dc.b	smpsNoAttack, $01
0009597F E108                       	smpsAlterNote       $08
00095981 E701                       	dc.b	smpsNoAttack, $01
00095983 E10C                       	smpsAlterNote       $0C
00095985 E701                       	dc.b	smpsNoAttack, $01
00095987 E112                       	smpsAlterNote       $12
00095989 E701                       	dc.b	smpsNoAttack, $01
0009598B E113                       	smpsAlterNote       $13
0009598D 800F                       	dc.b	nRst, $0F
0009598F E10B                       	smpsAlterNote       $0B
00095991 BF03                       	dc.b	nD5, $03
00095993 E10C                       	smpsAlterNote       $0C
00095995 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095999 E10D                       	smpsAlterNote       $0D
0009599B C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
000959A3 E10B                       	smpsAlterNote       $0B
000959A5 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000959AF E110                       	smpsAlterNote       $10
000959B1 C704                       	dc.b	nBb5, $04
000959B3 E10F                       	smpsAlterNote       $0F
000959B5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000959B9 E10D                       	smpsAlterNote       $0D
000959BB C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000959C1 E109                       	smpsAlterNote       $09
000959C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959C7 E10F                       	smpsAlterNote       $0F
000959C9 E701                       	dc.b	smpsNoAttack, $01
000959CB E112                       	smpsAlterNote       $12
000959CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959D1 E10C                       	smpsAlterNote       $0C
000959D3 E701                       	dc.b	smpsNoAttack, $01
000959D5 E108                       	smpsAlterNote       $08
000959D7 E701                       	dc.b	smpsNoAttack, $01
000959D9 E109                       	smpsAlterNote       $09
000959DB E701                       	dc.b	smpsNoAttack, $01
000959DD E10F                       	smpsAlterNote       $0F
000959DF E701                       	dc.b	smpsNoAttack, $01
000959E1 E113                       	smpsAlterNote       $13
000959E3 E701                       	dc.b	smpsNoAttack, $01
000959E5 E10F                       	smpsAlterNote       $0F
000959E7 E701                       	dc.b	smpsNoAttack, $01
000959E9 E10C                       	smpsAlterNote       $0C
000959EB E701                       	dc.b	smpsNoAttack, $01
000959ED E108                       	smpsAlterNote       $08
000959EF E701                       	dc.b	smpsNoAttack, $01
000959F1 E10C                       	smpsAlterNote       $0C
000959F3 E701                       	dc.b	smpsNoAttack, $01
000959F5 E112                       	smpsAlterNote       $12
000959F7 E701                       	dc.b	smpsNoAttack, $01
000959F9 E113                       	smpsAlterNote       $13
000959FB E701                       	dc.b	smpsNoAttack, $01
000959FD E10F                       	smpsAlterNote       $0F
000959FF E701                       	dc.b	smpsNoAttack, $01
00095A01 E109                       	smpsAlterNote       $09
00095A03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A07 E10C                       	smpsAlterNote       $0C
00095A09 E701                       	dc.b	smpsNoAttack, $01
00095A0B E112                       	smpsAlterNote       $12
00095A0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A11 E10C                       	smpsAlterNote       $0C
00095A13 E701                       	dc.b	smpsNoAttack, $01
00095A15 E109                       	smpsAlterNote       $09
00095A17 E701                       	dc.b	smpsNoAttack, $01
00095A19 E10D                       	smpsAlterNote       $0D
00095A1B C401 8001                  	dc.b	nG5, $01, nRst, $01
00095A1F E10F                       	smpsAlterNote       $0F
00095A21 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095A2B E10D                       	smpsAlterNote       $0D
00095A2D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095A33 E10B                       	smpsAlterNote       $0B
00095A35 BF0D                       	dc.b	nD5, $0D
00095A37 E108                       	smpsAlterNote       $08
00095A39 E701                       	dc.b	smpsNoAttack, $01
00095A3B E104                       	smpsAlterNote       $04
00095A3D E701                       	dc.b	smpsNoAttack, $01
00095A3F E108                       	smpsAlterNote       $08
00095A41 E701                       	dc.b	smpsNoAttack, $01
00095A43 E10B                       	smpsAlterNote       $0B
00095A45 E701                       	dc.b	smpsNoAttack, $01
00095A47 E10F                       	smpsAlterNote       $0F
00095A49 E701                       	dc.b	smpsNoAttack, $01
00095A4B E10B                       	smpsAlterNote       $0B
00095A4D E701                       	dc.b	smpsNoAttack, $01
00095A4F E105                       	smpsAlterNote       $05
00095A51 E701                       	dc.b	smpsNoAttack, $01
00095A53 E104                       	smpsAlterNote       $04
00095A55 E701                       	dc.b	smpsNoAttack, $01
00095A57 E108                       	smpsAlterNote       $08
00095A59 E701                       	dc.b	smpsNoAttack, $01
00095A5B E10E                       	smpsAlterNote       $0E
00095A5D E701                       	dc.b	smpsNoAttack, $01
00095A5F E10F                       	smpsAlterNote       $0F
00095A61 8001                       	dc.b	nRst, $01
00095A63 E10C                       	smpsAlterNote       $0C
00095A65 C101                       	dc.b	nE5, $01
00095A67 E10D                       	smpsAlterNote       $0D
00095A69 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095A6F E10F                       	smpsAlterNote       $0F
00095A71 C606 8001                  	dc.b	nA5, $06, nRst, $01
00095A75 E10C                       	smpsAlterNote       $0C
00095A77 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095A7B E10D                       	smpsAlterNote       $0D
00095A7D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095A81 E10C                       	smpsAlterNote       $0C
00095A83 CD03                       	dc.b	nE6, $03
00095A85 E10A                       	smpsAlterNote       $0A
00095A87 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095A8B E10D                       	smpsAlterNote       $0D
00095A8D C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095A95 E109                       	smpsAlterNote       $09
00095A97 E701                       	dc.b	smpsNoAttack, $01
00095A99 E10D                       	smpsAlterNote       $0D
00095A9B E701                       	dc.b	smpsNoAttack, $01
00095A9D E110                       	smpsAlterNote       $10
00095A9F E701                       	dc.b	smpsNoAttack, $01
00095AA1 E114                       	smpsAlterNote       $14
00095AA3 E701                       	dc.b	smpsNoAttack, $01
00095AA5 E110                       	smpsAlterNote       $10
00095AA7 E701                       	dc.b	smpsNoAttack, $01
00095AA9 E10A                       	smpsAlterNote       $0A
00095AAB E701                       	dc.b	smpsNoAttack, $01
00095AAD E109                       	smpsAlterNote       $09
00095AAF E701                       	dc.b	smpsNoAttack, $01
00095AB1 E10D                       	smpsAlterNote       $0D
00095AB3 E701                       	dc.b	smpsNoAttack, $01
00095AB5 E113                       	smpsAlterNote       $13
00095AB7 E701                       	dc.b	smpsNoAttack, $01
00095AB9 E114                       	smpsAlterNote       $14
00095ABB 8001                       	dc.b	nRst, $01
00095ABD E10F                       	smpsAlterNote       $0F
00095ABF C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095AC5 E10C                       	smpsAlterNote       $0C
00095AC7 E701                       	dc.b	smpsNoAttack, $01
00095AC9 E108                       	smpsAlterNote       $08
00095ACB E701                       	dc.b	smpsNoAttack, $01
00095ACD E10C                       	smpsAlterNote       $0C
00095ACF E701                       	dc.b	smpsNoAttack, $01
00095AD1 E112                       	smpsAlterNote       $12
00095AD3 E701                       	dc.b	smpsNoAttack, $01
00095AD5 E113                       	smpsAlterNote       $13
00095AD7 E701                       	dc.b	smpsNoAttack, $01
00095AD9 E10F                       	smpsAlterNote       $0F
00095ADB E701                       	dc.b	smpsNoAttack, $01
00095ADD E109                       	smpsAlterNote       $09
00095ADF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AE3 E10C                       	smpsAlterNote       $0C
00095AE5 E701                       	dc.b	smpsNoAttack, $01
00095AE7 E112                       	smpsAlterNote       $12
00095AE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AED E10C                       	smpsAlterNote       $0C
00095AEF E701                       	dc.b	smpsNoAttack, $01
00095AF1 E109                       	smpsAlterNote       $09
00095AF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AF7 E10F                       	smpsAlterNote       $0F
00095AF9 E701                       	dc.b	smpsNoAttack, $01
00095AFB E113                       	smpsAlterNote       $13
00095AFD E701                       	dc.b	smpsNoAttack, $01
00095AFF E112                       	smpsAlterNote       $12
00095B01 E701                       	dc.b	smpsNoAttack, $01
00095B03 E10C                       	smpsAlterNote       $0C
00095B05 E701                       	dc.b	smpsNoAttack, $01
00095B07 E108                       	smpsAlterNote       $08
00095B09 E701                       	dc.b	smpsNoAttack, $01
00095B0B E10C                       	smpsAlterNote       $0C
00095B0D E701                       	dc.b	smpsNoAttack, $01
00095B0F E10F                       	smpsAlterNote       $0F
00095B11 E701                       	dc.b	smpsNoAttack, $01
00095B13 E113                       	smpsAlterNote       $13
00095B15 E701                       	dc.b	smpsNoAttack, $01
00095B17 E10F                       	smpsAlterNote       $0F
00095B19 E701                       	dc.b	smpsNoAttack, $01
00095B1B E109                       	smpsAlterNote       $09
00095B1D E701                       	dc.b	smpsNoAttack, $01
00095B1F E108                       	smpsAlterNote       $08
00095B21 E701                       	dc.b	smpsNoAttack, $01
00095B23 E10C                       	smpsAlterNote       $0C
00095B25 E701                       	dc.b	smpsNoAttack, $01
00095B27 E112                       	smpsAlterNote       $12
00095B29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B2D E10F                       	smpsAlterNote       $0F
00095B2F E701                       	dc.b	smpsNoAttack, $01
00095B31 E109                       	smpsAlterNote       $09
00095B33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B37 E10F                       	smpsAlterNote       $0F
00095B39 E701                       	dc.b	smpsNoAttack, $01
00095B3B E113                       	smpsAlterNote       $13
00095B3D E701                       	dc.b	smpsNoAttack, $01
00095B3F E112                       	smpsAlterNote       $12
00095B41 E701                       	dc.b	smpsNoAttack, $01
00095B43 E10C                       	smpsAlterNote       $0C
00095B45 E701                       	dc.b	smpsNoAttack, $01
00095B47 E108                       	smpsAlterNote       $08
00095B49 E701                       	dc.b	smpsNoAttack, $01
00095B4B E10C                       	smpsAlterNote       $0C
00095B4D E701                       	dc.b	smpsNoAttack, $01
00095B4F E10F                       	smpsAlterNote       $0F
00095B51 E701                       	dc.b	smpsNoAttack, $01
00095B53 E113                       	smpsAlterNote       $13
00095B55 E701                       	dc.b	smpsNoAttack, $01
00095B57 E10F                       	smpsAlterNote       $0F
00095B59 E701                       	dc.b	smpsNoAttack, $01
00095B5B E109                       	smpsAlterNote       $09
00095B5D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095B61 E10F                       	smpsAlterNote       $0F
00095B63 C60D                       	dc.b	nA5, $0D
00095B65 E109                       	smpsAlterNote       $09
00095B67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B6B E10C                       	smpsAlterNote       $0C
00095B6D E701                       	dc.b	smpsNoAttack, $01
00095B6F E112                       	smpsAlterNote       $12
00095B71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B75 E10C                       	smpsAlterNote       $0C
00095B77 E701                       	dc.b	smpsNoAttack, $01
00095B79 E109                       	smpsAlterNote       $09
00095B7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B7F E10F                       	smpsAlterNote       $0F
00095B81 E701                       	dc.b	smpsNoAttack, $01
00095B83 E113                       	smpsAlterNote       $13
00095B85 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095B8B E10D                       	smpsAlterNote       $0D
00095B8D C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00095B95 E10C                       	smpsAlterNote       $0C
00095B97 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00095B9D E6FF                       	smpsAlterVol        $FF
00095B9F E10B                       	smpsAlterNote       $0B
00095BA1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095BA5 E10C                       	smpsAlterNote       $0C
00095BA7 C103                       	dc.b	nE5, $03
00095BA9 E10D                       	smpsAlterNote       $0D
00095BAB C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095BB5 E10B                       	smpsAlterNote       $0B
00095BB7 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095BBB E107                       	smpsAlterNote       $07
00095BBD E701                       	dc.b	smpsNoAttack, $01
00095BBF E104                       	smpsAlterNote       $04
00095BC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BC5 E10A                       	smpsAlterNote       $0A
00095BC7 E701                       	dc.b	smpsNoAttack, $01
00095BC9 E10D                       	smpsAlterNote       $0D
00095BCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BCF E107                       	smpsAlterNote       $07
00095BD1 E701                       	dc.b	smpsNoAttack, $01
00095BD3 E104                       	smpsAlterNote       $04
00095BD5 8001                       	dc.b	nRst, $01
00095BD7 E110                       	smpsAlterNote       $10
00095BD9 C703                       	dc.b	nBb5, $03
00095BDB E10F                       	smpsAlterNote       $0F
00095BDD C603 8001                  	dc.b	nA5, $03, nRst, $01
00095BE1 E10D                       	smpsAlterNote       $0D
00095BE3 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095BE7 E10C                       	smpsAlterNote       $0C
00095BE9 E701                       	dc.b	smpsNoAttack, $01
00095BEB E108                       	smpsAlterNote       $08
00095BED E701                       	dc.b	smpsNoAttack, $01
00095BEF E109                       	smpsAlterNote       $09
00095BF1 E701                       	dc.b	smpsNoAttack, $01
00095BF3 E10F                       	smpsAlterNote       $0F
00095BF5 E701                       	dc.b	smpsNoAttack, $01
00095BF7 E113                       	smpsAlterNote       $13
00095BF9 E701                       	dc.b	smpsNoAttack, $01
00095BFB E10F                       	smpsAlterNote       $0F
00095BFD E701                       	dc.b	smpsNoAttack, $01
00095BFF E10C                       	smpsAlterNote       $0C
00095C01 E701                       	dc.b	smpsNoAttack, $01
00095C03 E108                       	smpsAlterNote       $08
00095C05 E701                       	dc.b	smpsNoAttack, $01
00095C07 E10C                       	smpsAlterNote       $0C
00095C09 E701                       	dc.b	smpsNoAttack, $01
00095C0B E112                       	smpsAlterNote       $12
00095C0D E701                       	dc.b	smpsNoAttack, $01
00095C0F E113                       	smpsAlterNote       $13
00095C11 E701                       	dc.b	smpsNoAttack, $01
00095C13 E10F                       	smpsAlterNote       $0F
00095C15 E701                       	dc.b	smpsNoAttack, $01
00095C17 E109                       	smpsAlterNote       $09
00095C19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C1D E10C                       	smpsAlterNote       $0C
00095C1F E701                       	dc.b	smpsNoAttack, $01
00095C21 E112                       	smpsAlterNote       $12
00095C23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C27 E10C                       	smpsAlterNote       $0C
00095C29 E701                       	dc.b	smpsNoAttack, $01
00095C2B E109                       	smpsAlterNote       $09
00095C2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C31 E10F                       	smpsAlterNote       $0F
00095C33 E701                       	dc.b	smpsNoAttack, $01
00095C35 E113                       	smpsAlterNote       $13
00095C37 E701                       	dc.b	smpsNoAttack, $01
00095C39 E112                       	smpsAlterNote       $12
00095C3B E701                       	dc.b	smpsNoAttack, $01
00095C3D E10C                       	smpsAlterNote       $0C
00095C3F E701                       	dc.b	smpsNoAttack, $01
00095C41 E108                       	smpsAlterNote       $08
00095C43 E701                       	dc.b	smpsNoAttack, $01
00095C45 E10C                       	smpsAlterNote       $0C
00095C47 E701                       	dc.b	smpsNoAttack, $01
00095C49 E10F                       	smpsAlterNote       $0F
00095C4B E701                       	dc.b	smpsNoAttack, $01
00095C4D E113                       	smpsAlterNote       $13
00095C4F E701                       	dc.b	smpsNoAttack, $01
00095C51 E10F                       	smpsAlterNote       $0F
00095C53 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00095C57 E110                       	smpsAlterNote       $10
00095C59 BB03                       	dc.b	nBb4, $03
00095C5B E10F                       	smpsAlterNote       $0F
00095C5D BA06 8001                  	dc.b	nA4, $06, nRst, $01
00095C61 E10B                       	smpsAlterNote       $0B
00095C63 BF03                       	dc.b	nD5, $03
00095C65 E10C                       	smpsAlterNote       $0C
00095C67 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095C6B E10D                       	smpsAlterNote       $0D
00095C6D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095C77 E10B                       	smpsAlterNote       $0B
00095C79 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00095C85 E110                       	smpsAlterNote       $10
00095C87 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095C8B E10F                       	smpsAlterNote       $0F
00095C8D C604                       	dc.b	nA5, $04
00095C8F E10D                       	smpsAlterNote       $0D
00095C91 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095C97 E109                       	smpsAlterNote       $09
00095C99 E701                       	dc.b	smpsNoAttack, $01
00095C9B E108                       	smpsAlterNote       $08
00095C9D E701                       	dc.b	smpsNoAttack, $01
00095C9F E10C                       	smpsAlterNote       $0C
00095CA1 E701                       	dc.b	smpsNoAttack, $01
00095CA3 E112                       	smpsAlterNote       $12
00095CA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CA9 E10F                       	smpsAlterNote       $0F
00095CAB E701                       	dc.b	smpsNoAttack, $01
00095CAD E109                       	smpsAlterNote       $09
00095CAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CB3 E10F                       	smpsAlterNote       $0F
00095CB5 E701                       	dc.b	smpsNoAttack, $01
00095CB7 E112                       	smpsAlterNote       $12
00095CB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CBD E10C                       	smpsAlterNote       $0C
00095CBF E701                       	dc.b	smpsNoAttack, $01
00095CC1 E108                       	smpsAlterNote       $08
00095CC3 E701                       	dc.b	smpsNoAttack, $01
00095CC5 E109                       	smpsAlterNote       $09
00095CC7 E701                       	dc.b	smpsNoAttack, $01
00095CC9 E10F                       	smpsAlterNote       $0F
00095CCB E701                       	dc.b	smpsNoAttack, $01
00095CCD E113                       	smpsAlterNote       $13
00095CCF E701                       	dc.b	smpsNoAttack, $01
00095CD1 E10F                       	smpsAlterNote       $0F
00095CD3 E701                       	dc.b	smpsNoAttack, $01
00095CD5 E10C                       	smpsAlterNote       $0C
00095CD7 E701                       	dc.b	smpsNoAttack, $01
00095CD9 E108                       	smpsAlterNote       $08
00095CDB E701                       	dc.b	smpsNoAttack, $01
00095CDD E10C                       	smpsAlterNote       $0C
00095CDF E701                       	dc.b	smpsNoAttack, $01
00095CE1 E112                       	smpsAlterNote       $12
00095CE3 E701                       	dc.b	smpsNoAttack, $01
00095CE5 E113                       	smpsAlterNote       $13
00095CE7 E701                       	dc.b	smpsNoAttack, $01
00095CE9 E10F                       	smpsAlterNote       $0F
00095CEB E701                       	dc.b	smpsNoAttack, $01
00095CED E109                       	smpsAlterNote       $09
00095CEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CF3 E10C                       	smpsAlterNote       $0C
00095CF5 E701                       	dc.b	smpsNoAttack, $01
00095CF7 E112                       	smpsAlterNote       $12
00095CF9 E701                       	dc.b	smpsNoAttack, $01
00095CFB E113                       	smpsAlterNote       $13
00095CFD 8001                       	dc.b	nRst, $01
00095CFF E10F                       	smpsAlterNote       $0F
00095D01 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00095D0D C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00095D15 E10D                       	smpsAlterNote       $0D
00095D17 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095D1D E10B                       	smpsAlterNote       $0B
00095D1F BF0D                       	dc.b	nD5, $0D
00095D21 E108                       	smpsAlterNote       $08
00095D23 E701                       	dc.b	smpsNoAttack, $01
00095D25 E104                       	smpsAlterNote       $04
00095D27 E701                       	dc.b	smpsNoAttack, $01
00095D29 E105                       	smpsAlterNote       $05
00095D2B E701                       	dc.b	smpsNoAttack, $01
00095D2D E10B                       	smpsAlterNote       $0B
00095D2F E701                       	dc.b	smpsNoAttack, $01
00095D31 E10F                       	smpsAlterNote       $0F
00095D33 E701                       	dc.b	smpsNoAttack, $01
00095D35 E10B                       	smpsAlterNote       $0B
00095D37 E701                       	dc.b	smpsNoAttack, $01
00095D39 E108                       	smpsAlterNote       $08
00095D3B E701                       	dc.b	smpsNoAttack, $01
00095D3D E104                       	smpsAlterNote       $04
00095D3F E701                       	dc.b	smpsNoAttack, $01
00095D41 E108                       	smpsAlterNote       $08
00095D43 E701                       	dc.b	smpsNoAttack, $01
00095D45 E10E                       	smpsAlterNote       $0E
00095D47 E701                       	dc.b	smpsNoAttack, $01
00095D49 E10F                       	smpsAlterNote       $0F
00095D4B E701                       	dc.b	smpsNoAttack, $01
00095D4D E10C                       	smpsAlterNote       $0C
00095D4F C101                       	dc.b	nE5, $01
00095D51 E10D                       	smpsAlterNote       $0D
00095D53 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00095D5B E10F                       	smpsAlterNote       $0F
00095D5D C607                       	dc.b	nA5, $07
00095D5F E10C                       	smpsAlterNote       $0C
00095D61 CD07                       	dc.b	nE6, $07
00095D63 E10D                       	smpsAlterNote       $0D
00095D65 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095D69 E10C                       	smpsAlterNote       $0C
00095D6B CD03                       	dc.b	nE6, $03
00095D6D E10A                       	smpsAlterNote       $0A
00095D6F C903 8001                  	dc.b	nC6, $03, nRst, $01
00095D73 E10D                       	smpsAlterNote       $0D
00095D75 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00095D7B E10A                       	smpsAlterNote       $0A
00095D7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D81 E110                       	smpsAlterNote       $10
00095D83 E701                       	dc.b	smpsNoAttack, $01
00095D85 E114                       	smpsAlterNote       $14
00095D87 E701                       	dc.b	smpsNoAttack, $01
00095D89 E113                       	smpsAlterNote       $13
00095D8B E701                       	dc.b	smpsNoAttack, $01
00095D8D E10D                       	smpsAlterNote       $0D
00095D8F E701                       	dc.b	smpsNoAttack, $01
00095D91 E109                       	smpsAlterNote       $09
00095D93 E701                       	dc.b	smpsNoAttack, $01
00095D95 E10D                       	smpsAlterNote       $0D
00095D97 E701                       	dc.b	smpsNoAttack, $01
00095D99 E110                       	smpsAlterNote       $10
00095D9B E701                       	dc.b	smpsNoAttack, $01
00095D9D E114                       	smpsAlterNote       $14
00095D9F E701                       	dc.b	smpsNoAttack, $01
00095DA1 E10F                       	smpsAlterNote       $0F
00095DA3 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00095DA7 E10C                       	smpsAlterNote       $0C
00095DA9 E701                       	dc.b	smpsNoAttack, $01
00095DAB E108                       	smpsAlterNote       $08
00095DAD E701                       	dc.b	smpsNoAttack, $01
00095DAF E10C                       	smpsAlterNote       $0C
00095DB1 E701                       	dc.b	smpsNoAttack, $01
00095DB3 E10F                       	smpsAlterNote       $0F
00095DB5 E701                       	dc.b	smpsNoAttack, $01
00095DB7 E113                       	smpsAlterNote       $13
00095DB9 E701                       	dc.b	smpsNoAttack, $01
00095DBB E10F                       	smpsAlterNote       $0F
00095DBD E701                       	dc.b	smpsNoAttack, $01
00095DBF E109                       	smpsAlterNote       $09
00095DC1 E701                       	dc.b	smpsNoAttack, $01
00095DC3 E108                       	smpsAlterNote       $08
00095DC5 E701                       	dc.b	smpsNoAttack, $01
00095DC7 E10C                       	smpsAlterNote       $0C
00095DC9 E701                       	dc.b	smpsNoAttack, $01
00095DCB E112                       	smpsAlterNote       $12
00095DCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DD1 E10F                       	smpsAlterNote       $0F
00095DD3 E701                       	dc.b	smpsNoAttack, $01
00095DD5 E109                       	smpsAlterNote       $09
00095DD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DDB E10F                       	smpsAlterNote       $0F
00095DDD E701                       	dc.b	smpsNoAttack, $01
00095DDF E112                       	smpsAlterNote       $12
00095DE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DE5 E10C                       	smpsAlterNote       $0C
00095DE7 E701                       	dc.b	smpsNoAttack, $01
00095DE9 E108                       	smpsAlterNote       $08
00095DEB E701                       	dc.b	smpsNoAttack, $01
00095DED E109                       	smpsAlterNote       $09
00095DEF E701                       	dc.b	smpsNoAttack, $01
00095DF1 E10F                       	smpsAlterNote       $0F
00095DF3 E701                       	dc.b	smpsNoAttack, $01
00095DF5 E113                       	smpsAlterNote       $13
00095DF7 E701                       	dc.b	smpsNoAttack, $01
00095DF9 E10F                       	smpsAlterNote       $0F
00095DFB E701                       	dc.b	smpsNoAttack, $01
00095DFD E10C                       	smpsAlterNote       $0C
00095DFF E701                       	dc.b	smpsNoAttack, $01
00095E01 E108                       	smpsAlterNote       $08
00095E03 E701                       	dc.b	smpsNoAttack, $01
00095E05 E10C                       	smpsAlterNote       $0C
00095E07 E701                       	dc.b	smpsNoAttack, $01
00095E09 E112                       	smpsAlterNote       $12
00095E0B E701                       	dc.b	smpsNoAttack, $01
00095E0D E113                       	smpsAlterNote       $13
00095E0F E701                       	dc.b	smpsNoAttack, $01
00095E11 E10F                       	smpsAlterNote       $0F
00095E13 E701                       	dc.b	smpsNoAttack, $01
00095E15 E109                       	smpsAlterNote       $09
00095E17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E1B E10C                       	smpsAlterNote       $0C
00095E1D E701                       	dc.b	smpsNoAttack, $01
00095E1F E112                       	smpsAlterNote       $12
00095E21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E25 E10C                       	smpsAlterNote       $0C
00095E27 E701                       	dc.b	smpsNoAttack, $01
00095E29 E109                       	smpsAlterNote       $09
00095E2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E2F E10F                       	smpsAlterNote       $0F
00095E31 E701                       	dc.b	smpsNoAttack, $01
00095E33 E113                       	smpsAlterNote       $13
00095E35 E701                       	dc.b	smpsNoAttack, $01
00095E37 E112                       	smpsAlterNote       $12
00095E39 E701                       	dc.b	smpsNoAttack, $01
00095E3B E10C                       	smpsAlterNote       $0C
00095E3D E701                       	dc.b	smpsNoAttack, $01
00095E3F E109                       	smpsAlterNote       $09
00095E41 8001                       	dc.b	nRst, $01
00095E43 E10F                       	smpsAlterNote       $0F
00095E45 C60D                       	dc.b	nA5, $0D
00095E47 E10C                       	smpsAlterNote       $0C
00095E49 E701                       	dc.b	smpsNoAttack, $01
00095E4B E108                       	smpsAlterNote       $08
00095E4D E701                       	dc.b	smpsNoAttack, $01
00095E4F E10C                       	smpsAlterNote       $0C
00095E51 E701                       	dc.b	smpsNoAttack, $01
00095E53 E112                       	smpsAlterNote       $12
00095E55 E701                       	dc.b	smpsNoAttack, $01
00095E57 E113                       	smpsAlterNote       $13
00095E59 E701                       	dc.b	smpsNoAttack, $01
00095E5B E10F                       	smpsAlterNote       $0F
00095E5D E701                       	dc.b	smpsNoAttack, $01
00095E5F E109                       	smpsAlterNote       $09
00095E61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E65 E10C                       	smpsAlterNote       $0C
00095E67 E701                       	dc.b	smpsNoAttack, $01
00095E69 E112                       	smpsAlterNote       $12
00095E6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E6F E10C                       	smpsAlterNote       $0C
00095E71 E701                       	dc.b	smpsNoAttack, $01
00095E73 E109                       	smpsAlterNote       $09
00095E75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E79 E10F                       	smpsAlterNote       $0F
00095E7B E701                       	dc.b	smpsNoAttack, $01
00095E7D E113                       	smpsAlterNote       $13
00095E7F E701                       	dc.b	smpsNoAttack, $01
00095E81 E112                       	smpsAlterNote       $12
00095E83 E701                       	dc.b	smpsNoAttack, $01
00095E85 E10C                       	smpsAlterNote       $0C
00095E87 E701                       	dc.b	smpsNoAttack, $01
00095E89 E108                       	smpsAlterNote       $08
00095E8B E701                       	dc.b	smpsNoAttack, $01
00095E8D E10C                       	smpsAlterNote       $0C
00095E8F E701                       	dc.b	smpsNoAttack, $01
00095E91 E10F                       	smpsAlterNote       $0F
00095E93 E701                       	dc.b	smpsNoAttack, $01
00095E95 E113                       	smpsAlterNote       $13
00095E97 E701                       	dc.b	smpsNoAttack, $01
00095E99 E10F                       	smpsAlterNote       $0F
00095E9B E701                       	dc.b	smpsNoAttack, $01
00095E9D E109                       	smpsAlterNote       $09
00095E9F E701                       	dc.b	smpsNoAttack, $01
00095EA1 E108                       	smpsAlterNote       $08
00095EA3 E701                       	dc.b	smpsNoAttack, $01
00095EA5 E10C                       	smpsAlterNote       $0C
00095EA7 E701                       	dc.b	smpsNoAttack, $01
00095EA9 E112                       	smpsAlterNote       $12
00095EAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EAF E10F                       	smpsAlterNote       $0F
00095EB1 E701                       	dc.b	smpsNoAttack, $01
00095EB3 E109                       	smpsAlterNote       $09
00095EB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EB9 E10F                       	smpsAlterNote       $0F
00095EBB E701                       	dc.b	smpsNoAttack, $01
00095EBD E112                       	smpsAlterNote       $12
00095EBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EC3 E10C                       	smpsAlterNote       $0C
00095EC5 E701                       	dc.b	smpsNoAttack, $01
00095EC7 E108                       	smpsAlterNote       $08
00095EC9 E701                       	dc.b	smpsNoAttack, $01
00095ECB E10C                       	smpsAlterNote       $0C
00095ECD E701                       	dc.b	smpsNoAttack, $01
00095ECF E10F                       	smpsAlterNote       $0F
00095ED1 E701                       	dc.b	smpsNoAttack, $01
00095ED3 E113                       	smpsAlterNote       $13
00095ED5 E701                       	dc.b	smpsNoAttack, $01
00095ED7 E10F                       	smpsAlterNote       $0F
00095ED9 E701                       	dc.b	smpsNoAttack, $01
00095EDB E109                       	smpsAlterNote       $09
00095EDD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095EE3 E601                       	smpsAlterVol        $01
00095EE5 E10F                       	smpsAlterNote       $0F
00095EE7 C604                       	dc.b	nA5, $04
00095EE9 E10D                       	smpsAlterNote       $0D
00095EEB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095EF1 E10B                       	smpsAlterNote       $0B
00095EF3 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00095EFB E10F                       	smpsAlterNote       $0F
00095EFD C604 8001                  	dc.b	nA5, $04, nRst, $01
00095F01 E10D                       	smpsAlterNote       $0D
00095F03 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095F09 E10C                       	smpsAlterNote       $0C
00095F0B C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00095F11 E10A                       	smpsAlterNote       $0A
00095F13 C904 8001                  	dc.b	nC6, $04, nRst, $01
00095F17 E110                       	smpsAlterNote       $10
00095F19 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095F1D E10F                       	smpsAlterNote       $0F
00095F1F C604                       	dc.b	nA5, $04
00095F21 E10D                       	smpsAlterNote       $0D
00095F23 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00095F2F E109                       	smpsAlterNote       $09
00095F31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F35 E10F                       	smpsAlterNote       $0F
00095F37 E701                       	dc.b	smpsNoAttack, $01
00095F39 E112                       	smpsAlterNote       $12
00095F3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F3F E10C                       	smpsAlterNote       $0C
00095F41 E701                       	dc.b	smpsNoAttack, $01
00095F43 E108                       	smpsAlterNote       $08
00095F45 E701                       	dc.b	smpsNoAttack, $01
00095F47 E10C                       	smpsAlterNote       $0C
00095F49 E701                       	dc.b	smpsNoAttack, $01
00095F4B E10F                       	smpsAlterNote       $0F
00095F4D E701                       	dc.b	smpsNoAttack, $01
00095F4F E113                       	smpsAlterNote       $13
00095F51 E701                       	dc.b	smpsNoAttack, $01
00095F53 E10D                       	smpsAlterNote       $0D
00095F55 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00095F5B E10C                       	smpsAlterNote       $0C
00095F5D C10D                       	dc.b	nE5, $0D
00095F5F E109                       	smpsAlterNote       $09
00095F61 E701                       	dc.b	smpsNoAttack, $01
00095F63 E105                       	smpsAlterNote       $05
00095F65 E701                       	dc.b	smpsNoAttack, $01
00095F67 E106                       	smpsAlterNote       $06
00095F69 E701                       	dc.b	smpsNoAttack, $01
00095F6B E10C                       	smpsAlterNote       $0C
00095F6D E701                       	dc.b	smpsNoAttack, $01
00095F6F E110                       	smpsAlterNote       $10
00095F71 E701                       	dc.b	smpsNoAttack, $01
00095F73 E10C                       	smpsAlterNote       $0C
00095F75 E701                       	dc.b	smpsNoAttack, $01
00095F77 E109                       	smpsAlterNote       $09
00095F79 E701                       	dc.b	smpsNoAttack, $01
00095F7B E105                       	smpsAlterNote       $05
00095F7D E701                       	dc.b	smpsNoAttack, $01
00095F7F E109                       	smpsAlterNote       $09
00095F81 E701                       	dc.b	smpsNoAttack, $01
00095F83 E10F                       	smpsAlterNote       $0F
00095F85 E701                       	dc.b	smpsNoAttack, $01
00095F87 E110                       	smpsAlterNote       $10
00095F89 E701                       	dc.b	smpsNoAttack, $01
00095F8B E10C                       	smpsAlterNote       $0C
00095F8D E701                       	dc.b	smpsNoAttack, $01
00095F8F E106                       	smpsAlterNote       $06
00095F91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F95 E109                       	smpsAlterNote       $09
00095F97 E701                       	dc.b	smpsNoAttack, $01
00095F99 E10F                       	smpsAlterNote       $0F
00095F9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F9F E109                       	smpsAlterNote       $09
00095FA1 E701                       	dc.b	smpsNoAttack, $01
00095FA3 E106                       	smpsAlterNote       $06
00095FA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FA9 E10C                       	smpsAlterNote       $0C
00095FAB E701                       	dc.b	smpsNoAttack, $01
00095FAD E110                       	smpsAlterNote       $10
00095FAF E701                       	dc.b	smpsNoAttack, $01
00095FB1 E10F                       	smpsAlterNote       $0F
00095FB3 E701                       	dc.b	smpsNoAttack, $01
00095FB5 E109                       	smpsAlterNote       $09
00095FB7 E701                       	dc.b	smpsNoAttack, $01
00095FB9 E105                       	smpsAlterNote       $05
00095FBB E701                       	dc.b	smpsNoAttack, $01
00095FBD E109                       	smpsAlterNote       $09
00095FBF E701                       	dc.b	smpsNoAttack, $01
00095FC1 E10C                       	smpsAlterNote       $0C
00095FC3 E701                       	dc.b	smpsNoAttack, $01
00095FC5 E110                       	smpsAlterNote       $10
00095FC7 E701                       	dc.b	smpsNoAttack, $01
00095FC9 E10C                       	smpsAlterNote       $0C
00095FCB E701                       	dc.b	smpsNoAttack, $01
00095FCD E106                       	smpsAlterNote       $06
00095FCF E701                       	dc.b	smpsNoAttack, $01
00095FD1 E105                       	smpsAlterNote       $05
00095FD3 E701                       	dc.b	smpsNoAttack, $01
00095FD5 E109                       	smpsAlterNote       $09
00095FD7 E701                       	dc.b	smpsNoAttack, $01
00095FD9 E10F                       	smpsAlterNote       $0F
00095FDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FDF E10C                       	smpsAlterNote       $0C
00095FE1 E701                       	dc.b	smpsNoAttack, $01
00095FE3 E106                       	smpsAlterNote       $06
00095FE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FE9 E10C                       	smpsAlterNote       $0C
00095FEB E701                       	dc.b	smpsNoAttack, $01
00095FED E10F                       	smpsAlterNote       $0F
00095FEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FF3 E109                       	smpsAlterNote       $09
00095FF5 E701                       	dc.b	smpsNoAttack, $01
00095FF7 E105                       	smpsAlterNote       $05
00095FF9 E701                       	dc.b	smpsNoAttack, $01
00095FFB E106                       	smpsAlterNote       $06
00095FFD E701                       	dc.b	smpsNoAttack, $01
00095FFF E10C                       	smpsAlterNote       $0C
00096001 E701                       	dc.b	smpsNoAttack, $01
00096003 E110                       	smpsAlterNote       $10
00096005 E701                       	dc.b	smpsNoAttack, $01
00096007 E10C                       	smpsAlterNote       $0C
00096009 E701                       	dc.b	smpsNoAttack, $01
0009600B E109                       	smpsAlterNote       $09
0009600D E701                       	dc.b	smpsNoAttack, $01
0009600F E105                       	smpsAlterNote       $05
00096011 E701                       	dc.b	smpsNoAttack, $01
00096013 E109                       	smpsAlterNote       $09
00096015 E701                       	dc.b	smpsNoAttack, $01
00096017 E10F                       	smpsAlterNote       $0F
00096019 E701                       	dc.b	smpsNoAttack, $01
0009601B E110                       	smpsAlterNote       $10
0009601D E701                       	dc.b	smpsNoAttack, $01
0009601F E10C                       	smpsAlterNote       $0C
00096021 E701                       	dc.b	smpsNoAttack, $01
00096023 E106                       	smpsAlterNote       $06
00096025 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096029 E109                       	smpsAlterNote       $09
0009602B E701                       	dc.b	smpsNoAttack, $01
0009602D E10F                       	smpsAlterNote       $0F
0009602F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096033 E109                       	smpsAlterNote       $09
00096035 E701                       	dc.b	smpsNoAttack, $01
00096037 E106                       	smpsAlterNote       $06
00096039 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009603D E10C                       	smpsAlterNote       $0C
0009603F E701                       	dc.b	smpsNoAttack, $01
00096041 E110                       	smpsAlterNote       $10
00096043 E701                       	dc.b	smpsNoAttack, $01
00096045 E10F                       	smpsAlterNote       $0F
00096047 E701                       	dc.b	smpsNoAttack, $01
00096049 E109                       	smpsAlterNote       $09
0009604B E701                       	dc.b	smpsNoAttack, $01
0009604D E105                       	smpsAlterNote       $05
0009604F E701                       	dc.b	smpsNoAttack, $01
00096051 E109                       	smpsAlterNote       $09
00096053 E701                       	dc.b	smpsNoAttack, $01
00096055 E10C                       	smpsAlterNote       $0C
00096057 E701                       	dc.b	smpsNoAttack, $01
00096059 E110                       	smpsAlterNote       $10
0009605B E701                       	dc.b	smpsNoAttack, $01
0009605D E10C                       	smpsAlterNote       $0C
0009605F E701                       	dc.b	smpsNoAttack, $01
00096061 E106                       	smpsAlterNote       $06
00096063 E701                       	dc.b	smpsNoAttack, $01
00096065 E105                       	smpsAlterNote       $05
00096067 E701                       	dc.b	smpsNoAttack, $01
00096069 E109                       	smpsAlterNote       $09
0009606B E701                       	dc.b	smpsNoAttack, $01
0009606D E10F                       	smpsAlterNote       $0F
0009606F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096073 E109                       	smpsAlterNote       $09
00096075 E701                       	dc.b	smpsNoAttack, $01
00096077 E106                       	smpsAlterNote       $06
00096079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009607D E10C                       	smpsAlterNote       $0C
0009607F E701                       	dc.b	smpsNoAttack, $01
00096081 E110                       	smpsAlterNote       $10
00096083 E701                       	dc.b	smpsNoAttack, $01
00096085 E10F                       	smpsAlterNote       $0F
00096087 E701                       	dc.b	smpsNoAttack, $01
00096089 E109                       	smpsAlterNote       $09
0009608B E701                       	dc.b	smpsNoAttack, $01
0009608D E105                       	smpsAlterNote       $05
0009608F E701                       	dc.b	smpsNoAttack, $01
00096091 E109                       	smpsAlterNote       $09
00096093 E701                       	dc.b	smpsNoAttack, $01
00096095 E10C                       	smpsAlterNote       $0C
00096097 E701                       	dc.b	smpsNoAttack, $01
00096099 E110                       	smpsAlterNote       $10
0009609B E701                       	dc.b	smpsNoAttack, $01
0009609D E10C                       	smpsAlterNote       $0C
0009609F E701                       	dc.b	smpsNoAttack, $01
000960A1 E106                       	smpsAlterNote       $06
000960A3 E701                       	dc.b	smpsNoAttack, $01
000960A5 E105                       	smpsAlterNote       $05
000960A7 E701                       	dc.b	smpsNoAttack, $01
000960A9 E109                       	smpsAlterNote       $09
000960AB E701                       	dc.b	smpsNoAttack, $01
000960AD E10F                       	smpsAlterNote       $0F
000960AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960B3 E10C                       	smpsAlterNote       $0C
000960B5 E701                       	dc.b	smpsNoAttack, $01
000960B7 E106                       	smpsAlterNote       $06
000960B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960BD E10C                       	smpsAlterNote       $0C
000960BF E701                       	dc.b	smpsNoAttack, $01
000960C1 E10F                       	smpsAlterNote       $0F
000960C3 E701                       	dc.b	smpsNoAttack, $01
000960C5 E110                       	smpsAlterNote       $10
000960C7 8001                       	dc.b	nRst, $01
000960C9 E10F                       	smpsAlterNote       $0F
000960CB C604                       	dc.b	nA5, $04
000960CD E10D                       	smpsAlterNote       $0D
000960CF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000960D5 E10B                       	smpsAlterNote       $0B
000960D7 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000960DD E10F                       	smpsAlterNote       $0F
000960DF C604 8001                  	dc.b	nA5, $04, nRst, $01
000960E3 E10D                       	smpsAlterNote       $0D
000960E5 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000960EB E10C                       	smpsAlterNote       $0C
000960ED C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000960F3 E10A                       	smpsAlterNote       $0A
000960F5 C904                       	dc.b	nC6, $04
000960F7 E110                       	smpsAlterNote       $10
000960F9 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000960FD E10F                       	smpsAlterNote       $0F
000960FF C604                       	dc.b	nA5, $04
00096101 E10D                       	smpsAlterNote       $0D
00096103 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009610F E109                       	smpsAlterNote       $09
00096111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096115 E10F                       	smpsAlterNote       $0F
00096117 E701                       	dc.b	smpsNoAttack, $01
00096119 E112                       	smpsAlterNote       $12
0009611B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009611F E10C                       	smpsAlterNote       $0C
00096121 E701                       	dc.b	smpsNoAttack, $01
00096123 E108                       	smpsAlterNote       $08
00096125 E701                       	dc.b	smpsNoAttack, $01
00096127 E109                       	smpsAlterNote       $09
00096129 E701                       	dc.b	smpsNoAttack, $01
0009612B E10F                       	smpsAlterNote       $0F
0009612D E701                       	dc.b	smpsNoAttack, $01
0009612F E113                       	smpsAlterNote       $13
00096131 E701                       	dc.b	smpsNoAttack, $01
00096133 E10D                       	smpsAlterNote       $0D
00096135 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0009613B E10C                       	smpsAlterNote       $0C
0009613D C10D                       	dc.b	nE5, $0D
0009613F E109                       	smpsAlterNote       $09
00096141 E701                       	dc.b	smpsNoAttack, $01
00096143 E106                       	smpsAlterNote       $06
00096145 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096149 E10C                       	smpsAlterNote       $0C
0009614B E701                       	dc.b	smpsNoAttack, $01
0009614D E110                       	smpsAlterNote       $10
0009614F E701                       	dc.b	smpsNoAttack, $01
00096151 E10F                       	smpsAlterNote       $0F
00096153 E701                       	dc.b	smpsNoAttack, $01
00096155 E109                       	smpsAlterNote       $09
00096157 E701                       	dc.b	smpsNoAttack, $01
00096159 E105                       	smpsAlterNote       $05
0009615B E701                       	dc.b	smpsNoAttack, $01
0009615D E109                       	smpsAlterNote       $09
0009615F E701                       	dc.b	smpsNoAttack, $01
00096161 E10C                       	smpsAlterNote       $0C
00096163 E701                       	dc.b	smpsNoAttack, $01
00096165 E110                       	smpsAlterNote       $10
00096167 E701                       	dc.b	smpsNoAttack, $01
00096169 E10C                       	smpsAlterNote       $0C
0009616B E701                       	dc.b	smpsNoAttack, $01
0009616D E106                       	smpsAlterNote       $06
0009616F E701                       	dc.b	smpsNoAttack, $01
00096171 E105                       	smpsAlterNote       $05
00096173 E701                       	dc.b	smpsNoAttack, $01
00096175 E109                       	smpsAlterNote       $09
00096177 E701                       	dc.b	smpsNoAttack, $01
00096179 E10F                       	smpsAlterNote       $0F
0009617B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009617F E10C                       	smpsAlterNote       $0C
00096181 E701                       	dc.b	smpsNoAttack, $01
00096183 E106                       	smpsAlterNote       $06
00096185 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096189 E10C                       	smpsAlterNote       $0C
0009618B E701                       	dc.b	smpsNoAttack, $01
0009618D E10F                       	smpsAlterNote       $0F
0009618F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096193 E109                       	smpsAlterNote       $09
00096195 E701                       	dc.b	smpsNoAttack, $01
00096197 E105                       	smpsAlterNote       $05
00096199 E701                       	dc.b	smpsNoAttack, $01
0009619B E106                       	smpsAlterNote       $06
0009619D E701                       	dc.b	smpsNoAttack, $01
0009619F E10C                       	smpsAlterNote       $0C
000961A1 E701                       	dc.b	smpsNoAttack, $01
000961A3 E110                       	smpsAlterNote       $10
000961A5 E701                       	dc.b	smpsNoAttack, $01
000961A7 E10C                       	smpsAlterNote       $0C
000961A9 E701                       	dc.b	smpsNoAttack, $01
000961AB E109                       	smpsAlterNote       $09
000961AD E701                       	dc.b	smpsNoAttack, $01
000961AF E105                       	smpsAlterNote       $05
000961B1 E701                       	dc.b	smpsNoAttack, $01
000961B3 E109                       	smpsAlterNote       $09
000961B5 E701                       	dc.b	smpsNoAttack, $01
000961B7 E10F                       	smpsAlterNote       $0F
000961B9 E701                       	dc.b	smpsNoAttack, $01
000961BB E110                       	smpsAlterNote       $10
000961BD E701                       	dc.b	smpsNoAttack, $01
000961BF E10C                       	smpsAlterNote       $0C
000961C1 E701                       	dc.b	smpsNoAttack, $01
000961C3 E106                       	smpsAlterNote       $06
000961C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961C9 E109                       	smpsAlterNote       $09
000961CB E701                       	dc.b	smpsNoAttack, $01
000961CD E10F                       	smpsAlterNote       $0F
000961CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961D3 E109                       	smpsAlterNote       $09
000961D5 E701                       	dc.b	smpsNoAttack, $01
000961D7 E106                       	smpsAlterNote       $06
000961D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961DD E10C                       	smpsAlterNote       $0C
000961DF E701                       	dc.b	smpsNoAttack, $01
000961E1 E110                       	smpsAlterNote       $10
000961E3 E701                       	dc.b	smpsNoAttack, $01
000961E5 E10F                       	smpsAlterNote       $0F
000961E7 E701                       	dc.b	smpsNoAttack, $01
000961E9 E109                       	smpsAlterNote       $09
000961EB E701                       	dc.b	smpsNoAttack, $01
000961ED E105                       	smpsAlterNote       $05
000961EF E701                       	dc.b	smpsNoAttack, $01
000961F1 E109                       	smpsAlterNote       $09
000961F3 E701                       	dc.b	smpsNoAttack, $01
000961F5 E10F                       	smpsAlterNote       $0F
000961F7 E701                       	dc.b	smpsNoAttack, $01
000961F9 E110                       	smpsAlterNote       $10
000961FB E701                       	dc.b	smpsNoAttack, $01
000961FD E10C                       	smpsAlterNote       $0C
000961FF E701                       	dc.b	smpsNoAttack, $01
00096201 E106                       	smpsAlterNote       $06
00096203 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096207 E109                       	smpsAlterNote       $09
00096209 E701                       	dc.b	smpsNoAttack, $01
0009620B E10F                       	smpsAlterNote       $0F
0009620D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096211 E109                       	smpsAlterNote       $09
00096213 E701                       	dc.b	smpsNoAttack, $01
00096215 E106                       	smpsAlterNote       $06
00096217 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009621B E10C                       	smpsAlterNote       $0C
0009621D E701                       	dc.b	smpsNoAttack, $01
0009621F E110                       	smpsAlterNote       $10
00096221 E701                       	dc.b	smpsNoAttack, $01
00096223 E10F                       	smpsAlterNote       $0F
00096225 E701                       	dc.b	smpsNoAttack, $01
00096227 E109                       	smpsAlterNote       $09
00096229 E701                       	dc.b	smpsNoAttack, $01
0009622B E105                       	smpsAlterNote       $05
0009622D E701                       	dc.b	smpsNoAttack, $01
0009622F E109                       	smpsAlterNote       $09
00096231 E701                       	dc.b	smpsNoAttack, $01
00096233 E10C                       	smpsAlterNote       $0C
00096235 E701                       	dc.b	smpsNoAttack, $01
00096237 E110                       	smpsAlterNote       $10
00096239 E701                       	dc.b	smpsNoAttack, $01
0009623B E10C                       	smpsAlterNote       $0C
0009623D E701                       	dc.b	smpsNoAttack, $01
0009623F E106                       	smpsAlterNote       $06
00096241 E701                       	dc.b	smpsNoAttack, $01
00096243 E105                       	smpsAlterNote       $05
00096245 E701                       	dc.b	smpsNoAttack, $01
00096247 E109                       	smpsAlterNote       $09
00096249 E701                       	dc.b	smpsNoAttack, $01
0009624B E10F                       	smpsAlterNote       $0F
0009624D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096251 E10C                       	smpsAlterNote       $0C
00096253 E701                       	dc.b	smpsNoAttack, $01
00096255 E106                       	smpsAlterNote       $06
00096257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009625B E10C                       	smpsAlterNote       $0C
0009625D E701                       	dc.b	smpsNoAttack, $01
0009625F E10F                       	smpsAlterNote       $0F
00096261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096265 E109                       	smpsAlterNote       $09
00096267 E701                       	dc.b	smpsNoAttack, $01
00096269 E105                       	smpsAlterNote       $05
0009626B E701                       	dc.b	smpsNoAttack, $01
0009626D E106                       	smpsAlterNote       $06
0009626F E701                       	dc.b	smpsNoAttack, $01
00096271 E10C                       	smpsAlterNote       $0C
00096273 E701                       	dc.b	smpsNoAttack, $01
00096275 E110                       	smpsAlterNote       $10
00096277 E701                       	dc.b	smpsNoAttack, $01
00096279 E10C                       	smpsAlterNote       $0C
0009627B E701                       	dc.b	smpsNoAttack, $01
0009627D E109                       	smpsAlterNote       $09
0009627F E701                       	dc.b	smpsNoAttack, $01
00096281 E105                       	smpsAlterNote       $05
00096283 E701                       	dc.b	smpsNoAttack, $01
00096285 E109                       	smpsAlterNote       $09
00096287 E701                       	dc.b	smpsNoAttack, $01
00096289 E10F                       	smpsAlterNote       $0F
0009628B E701                       	dc.b	smpsNoAttack, $01
0009628D E110                       	smpsAlterNote       $10
0009628F E701                       	dc.b	smpsNoAttack, $01
00096291 E10C                       	smpsAlterNote       $0C
00096293 E701                       	dc.b	smpsNoAttack, $01
00096295 E106                       	smpsAlterNote       $06
00096297 E701                       	dc.b	smpsNoAttack, $01
00096299 E10B                       	smpsAlterNote       $0B
0009629B BF02                       	dc.b	nD5, $02
0009629D E10C                       	smpsAlterNote       $0C
0009629F C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000962A5 E109                       	smpsAlterNote       $09
000962A7 E701                       	dc.b	smpsNoAttack, $01
000962A9 E105                       	smpsAlterNote       $05
000962AB E701                       	dc.b	smpsNoAttack, $01
000962AD E109                       	smpsAlterNote       $09
000962AF E701                       	dc.b	smpsNoAttack, $01
000962B1 E10F                       	smpsAlterNote       $0F
000962B3 E701                       	dc.b	smpsNoAttack, $01
000962B5 E110                       	smpsAlterNote       $10
000962B7 E701                       	dc.b	smpsNoAttack, $01
000962B9 E10C                       	smpsAlterNote       $0C
000962BB E701                       	dc.b	smpsNoAttack, $01
000962BD E106                       	smpsAlterNote       $06
000962BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962C3 E109                       	smpsAlterNote       $09
000962C5 E701                       	dc.b	smpsNoAttack, $01
000962C7 E10F                       	smpsAlterNote       $0F
000962C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962CD E109                       	smpsAlterNote       $09
000962CF E701                       	dc.b	smpsNoAttack, $01
000962D1 E106                       	smpsAlterNote       $06
000962D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962D7 E10C                       	smpsAlterNote       $0C
000962D9 E701                       	dc.b	smpsNoAttack, $01
000962DB E110                       	smpsAlterNote       $10
000962DD E701                       	dc.b	smpsNoAttack, $01
000962DF E10F                       	smpsAlterNote       $0F
000962E1 E701                       	dc.b	smpsNoAttack, $01
000962E3 E109                       	smpsAlterNote       $09
000962E5 E701                       	dc.b	smpsNoAttack, $01
000962E7 E105                       	smpsAlterNote       $05
000962E9 E701                       	dc.b	smpsNoAttack, $01
000962EB E109                       	smpsAlterNote       $09
000962ED E701                       	dc.b	smpsNoAttack, $01
000962EF E10C                       	smpsAlterNote       $0C
000962F1 E701                       	dc.b	smpsNoAttack, $01
000962F3 E110                       	smpsAlterNote       $10
000962F5 E701                       	dc.b	smpsNoAttack, $01
000962F7 E10C                       	smpsAlterNote       $0C
000962F9 E701                       	dc.b	smpsNoAttack, $01
000962FB E106                       	smpsAlterNote       $06
000962FD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096301 E10D                       	smpsAlterNote       $0D
00096303 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0009630B E10C                       	smpsAlterNote       $0C
0009630D C10D                       	dc.b	nE5, $0D
0009630F E106                       	smpsAlterNote       $06
00096311 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096315 E109                       	smpsAlterNote       $09
00096317 E701                       	dc.b	smpsNoAttack, $01
00096319 E10F                       	smpsAlterNote       $0F
0009631B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009631F E109                       	smpsAlterNote       $09
00096321 E701                       	dc.b	smpsNoAttack, $01
00096323 E106                       	smpsAlterNote       $06
00096325 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096329 E10C                       	smpsAlterNote       $0C
0009632B E701                       	dc.b	smpsNoAttack, $01
0009632D E110                       	smpsAlterNote       $10
0009632F E701                       	dc.b	smpsNoAttack, $01
00096331 E10F                       	smpsAlterNote       $0F
00096333 E701                       	dc.b	smpsNoAttack, $01
00096335 E109                       	smpsAlterNote       $09
00096337 E701                       	dc.b	smpsNoAttack, $01
00096339 E105                       	smpsAlterNote       $05
0009633B E701                       	dc.b	smpsNoAttack, $01
0009633D E106                       	smpsAlterNote       $06
0009633F 800F                       	dc.b	nRst, $0F
00096343 E6FF                       	smpsAlterVol        $FF
00096345 E10F                       	smpsAlterNote       $0F
00096347 BA01                       	dc.b	nA4, $01
00096349 E110                       	smpsAlterNote       $10
0009634B BB02                       	dc.b	nBb4, $02
0009634D E10F                       	smpsAlterNote       $0F
0009634F BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00096355 E10B                       	smpsAlterNote       $0B
00096357 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009635B E10C                       	smpsAlterNote       $0C
0009635D C103                       	dc.b	nE5, $03
0009635F E10D                       	smpsAlterNote       $0D
00096361 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0009636B E10B                       	smpsAlterNote       $0B
0009636D BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00096371 E104                       	smpsAlterNote       $04
00096373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096377 E10A                       	smpsAlterNote       $0A
00096379 E701                       	dc.b	smpsNoAttack, $01
0009637B E10D                       	smpsAlterNote       $0D
0009637D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096381 E107                       	smpsAlterNote       $07
00096383 E701                       	dc.b	smpsNoAttack, $01
00096385 E104                       	smpsAlterNote       $04
00096387 8001                       	dc.b	nRst, $01
00096389 E110                       	smpsAlterNote       $10
0009638B C703                       	dc.b	nBb5, $03
0009638D E10F                       	smpsAlterNote       $0F
0009638F C603 8001                  	dc.b	nA5, $03, nRst, $01
00096393 E10D                       	smpsAlterNote       $0D
00096395 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096399 E10C                       	smpsAlterNote       $0C
0009639B E701                       	dc.b	smpsNoAttack, $01
0009639D E108                       	smpsAlterNote       $08
0009639F E701                       	dc.b	smpsNoAttack, $01
000963A1 E109                       	smpsAlterNote       $09
000963A3 E701                       	dc.b	smpsNoAttack, $01
000963A5 E10F                       	smpsAlterNote       $0F
000963A7 E701                       	dc.b	smpsNoAttack, $01
000963A9 E113                       	smpsAlterNote       $13
000963AB E701                       	dc.b	smpsNoAttack, $01
000963AD E10F                       	smpsAlterNote       $0F
000963AF E701                       	dc.b	smpsNoAttack, $01
000963B1 E10C                       	smpsAlterNote       $0C
000963B3 E701                       	dc.b	smpsNoAttack, $01
000963B5 E108                       	smpsAlterNote       $08
000963B7 E701                       	dc.b	smpsNoAttack, $01
000963B9 E10C                       	smpsAlterNote       $0C
000963BB E701                       	dc.b	smpsNoAttack, $01
000963BD E112                       	smpsAlterNote       $12
000963BF E701                       	dc.b	smpsNoAttack, $01
000963C1 E113                       	smpsAlterNote       $13
000963C3 E701                       	dc.b	smpsNoAttack, $01
000963C5 E10F                       	smpsAlterNote       $0F
000963C7 E701                       	dc.b	smpsNoAttack, $01
000963C9 E109                       	smpsAlterNote       $09
000963CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963CF E10C                       	smpsAlterNote       $0C
000963D1 E701                       	dc.b	smpsNoAttack, $01
000963D3 E112                       	smpsAlterNote       $12
000963D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963D9 E10C                       	smpsAlterNote       $0C
000963DB E701                       	dc.b	smpsNoAttack, $01
000963DD E109                       	smpsAlterNote       $09
000963DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963E3 E10F                       	smpsAlterNote       $0F
000963E5 E701                       	dc.b	smpsNoAttack, $01
000963E7 E113                       	smpsAlterNote       $13
000963E9 E701                       	dc.b	smpsNoAttack, $01
000963EB E112                       	smpsAlterNote       $12
000963ED E701                       	dc.b	smpsNoAttack, $01
000963EF E10C                       	smpsAlterNote       $0C
000963F1 E701                       	dc.b	smpsNoAttack, $01
000963F3 E108                       	smpsAlterNote       $08
000963F5 E701                       	dc.b	smpsNoAttack, $01
000963F7 E10C                       	smpsAlterNote       $0C
000963F9 E701                       	dc.b	smpsNoAttack, $01
000963FB E10F                       	smpsAlterNote       $0F
000963FD E701                       	dc.b	smpsNoAttack, $01
000963FF E113                       	smpsAlterNote       $13
00096401 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00096405 E10B                       	smpsAlterNote       $0B
00096407 BF03                       	dc.b	nD5, $03
00096409 E10C                       	smpsAlterNote       $0C
0009640B C103 8001                  	dc.b	nE5, $03, nRst, $01
0009640F E10D                       	smpsAlterNote       $0D
00096411 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0009641B E10B                       	smpsAlterNote       $0B
0009641D BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00096429 E110                       	smpsAlterNote       $10
0009642B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009642F E10F                       	smpsAlterNote       $0F
00096431 C604                       	dc.b	nA5, $04
00096433 E10D                       	smpsAlterNote       $0D
00096435 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0009643B E109                       	smpsAlterNote       $09
0009643D E701                       	dc.b	smpsNoAttack, $01
0009643F E108                       	smpsAlterNote       $08
00096441 E701                       	dc.b	smpsNoAttack, $01
00096443 E10C                       	smpsAlterNote       $0C
00096445 E701                       	dc.b	smpsNoAttack, $01
00096447 E112                       	smpsAlterNote       $12
00096449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009644D E10F                       	smpsAlterNote       $0F
0009644F E701                       	dc.b	smpsNoAttack, $01
00096451 E109                       	smpsAlterNote       $09
00096453 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096457 E10F                       	smpsAlterNote       $0F
00096459 E701                       	dc.b	smpsNoAttack, $01
0009645B E112                       	smpsAlterNote       $12
0009645D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096461 E10C                       	smpsAlterNote       $0C
00096463 E701                       	dc.b	smpsNoAttack, $01
00096465 E108                       	smpsAlterNote       $08
00096467 E701                       	dc.b	smpsNoAttack, $01
00096469 E109                       	smpsAlterNote       $09
0009646B E701                       	dc.b	smpsNoAttack, $01
0009646D E10F                       	smpsAlterNote       $0F
0009646F E701                       	dc.b	smpsNoAttack, $01
00096471 E113                       	smpsAlterNote       $13
00096473 E701                       	dc.b	smpsNoAttack, $01
00096475 E10F                       	smpsAlterNote       $0F
00096477 E701                       	dc.b	smpsNoAttack, $01
00096479 E10C                       	smpsAlterNote       $0C
0009647B E701                       	dc.b	smpsNoAttack, $01
0009647D E108                       	smpsAlterNote       $08
0009647F E701                       	dc.b	smpsNoAttack, $01
00096481 E10C                       	smpsAlterNote       $0C
00096483 E701                       	dc.b	smpsNoAttack, $01
00096485 E112                       	smpsAlterNote       $12
00096487 E701                       	dc.b	smpsNoAttack, $01
00096489 E113                       	smpsAlterNote       $13
0009648B E701                       	dc.b	smpsNoAttack, $01
0009648D E10F                       	smpsAlterNote       $0F
0009648F E701                       	dc.b	smpsNoAttack, $01
00096491 E109                       	smpsAlterNote       $09
00096493 E701                       	dc.b	smpsNoAttack, $01
00096495 E10D                       	smpsAlterNote       $0D
00096497 C402                       	dc.b	nG5, $02
00096499 E10F                       	smpsAlterNote       $0F
0009649B C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000964A5 E10D                       	smpsAlterNote       $0D
000964A7 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000964AD E10B                       	smpsAlterNote       $0B
000964AF BF0D                       	dc.b	nD5, $0D
000964B1 E108                       	smpsAlterNote       $08
000964B3 E701                       	dc.b	smpsNoAttack, $01
000964B5 E104                       	smpsAlterNote       $04
000964B7 E701                       	dc.b	smpsNoAttack, $01
000964B9 E105                       	smpsAlterNote       $05
000964BB E701                       	dc.b	smpsNoAttack, $01
000964BD E10B                       	smpsAlterNote       $0B
000964BF E701                       	dc.b	smpsNoAttack, $01
000964C1 E10F                       	smpsAlterNote       $0F
000964C3 E701                       	dc.b	smpsNoAttack, $01
000964C5 E10B                       	smpsAlterNote       $0B
000964C7 E701                       	dc.b	smpsNoAttack, $01
000964C9 E108                       	smpsAlterNote       $08
000964CB E701                       	dc.b	smpsNoAttack, $01
000964CD E104                       	smpsAlterNote       $04
000964CF E701                       	dc.b	smpsNoAttack, $01
000964D1 E108                       	smpsAlterNote       $08
000964D3 E701                       	dc.b	smpsNoAttack, $01
000964D5 E10E                       	smpsAlterNote       $0E
000964D7 E701                       	dc.b	smpsNoAttack, $01
000964D9 E10F                       	smpsAlterNote       $0F
000964DB E701                       	dc.b	smpsNoAttack, $01
000964DD E10C                       	smpsAlterNote       $0C
000964DF C101                       	dc.b	nE5, $01
000964E1 E10D                       	smpsAlterNote       $0D
000964E3 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000964EB E10F                       	smpsAlterNote       $0F
000964ED C607                       	dc.b	nA5, $07
000964EF E10C                       	smpsAlterNote       $0C
000964F1 CD07                       	dc.b	nE6, $07
000964F3 E10D                       	smpsAlterNote       $0D
000964F5 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000964F9 E10C                       	smpsAlterNote       $0C
000964FB CD03                       	dc.b	nE6, $03
000964FD E10A                       	smpsAlterNote       $0A
000964FF C903 8001                  	dc.b	nC6, $03, nRst, $01
00096503 E10D                       	smpsAlterNote       $0D
00096505 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0009650B E10A                       	smpsAlterNote       $0A
0009650D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096511 E110                       	smpsAlterNote       $10
00096513 E701                       	dc.b	smpsNoAttack, $01
00096515 E114                       	smpsAlterNote       $14
00096517 E701                       	dc.b	smpsNoAttack, $01
00096519 E113                       	smpsAlterNote       $13
0009651B E701                       	dc.b	smpsNoAttack, $01
0009651D E10D                       	smpsAlterNote       $0D
0009651F E701                       	dc.b	smpsNoAttack, $01
00096521 E109                       	smpsAlterNote       $09
00096523 E701                       	dc.b	smpsNoAttack, $01
00096525 E10D                       	smpsAlterNote       $0D
00096527 E701                       	dc.b	smpsNoAttack, $01
00096529 E110                       	smpsAlterNote       $10
0009652B E701                       	dc.b	smpsNoAttack, $01
0009652D E114                       	smpsAlterNote       $14
0009652F E701                       	dc.b	smpsNoAttack, $01
00096531 E10F                       	smpsAlterNote       $0F
00096533 C607                       	dc.b	nA5, $07
00096535 E10D                       	smpsAlterNote       $0D
00096537 C40D                       	dc.b	nG5, $0D
00096539 E10A                       	smpsAlterNote       $0A
0009653B E701                       	dc.b	smpsNoAttack, $01
0009653D E106                       	smpsAlterNote       $06
0009653F E701                       	dc.b	smpsNoAttack, $01
00096541 E10A                       	smpsAlterNote       $0A
00096543 E701                       	dc.b	smpsNoAttack, $01
00096545 E10D                       	smpsAlterNote       $0D
00096547 E701                       	dc.b	smpsNoAttack, $01
00096549 E111                       	smpsAlterNote       $11
0009654B E701                       	dc.b	smpsNoAttack, $01
0009654D E10D                       	smpsAlterNote       $0D
0009654F E701                       	dc.b	smpsNoAttack, $01
00096551 E107                       	smpsAlterNote       $07
00096553 E701                       	dc.b	smpsNoAttack, $01
00096555 E106                       	smpsAlterNote       $06
00096557 E701                       	dc.b	smpsNoAttack, $01
00096559 E10A                       	smpsAlterNote       $0A
0009655B E701                       	dc.b	smpsNoAttack, $01
0009655D E110                       	smpsAlterNote       $10
0009655F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096563 E10D                       	smpsAlterNote       $0D
00096565 E701                       	dc.b	smpsNoAttack, $01
00096567 E107                       	smpsAlterNote       $07
00096569 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009656D E10F                       	smpsAlterNote       $0F
0009656F C60E                       	dc.b	nA5, $0E
00096571 E109                       	smpsAlterNote       $09
00096573 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096577 E10F                       	smpsAlterNote       $0F
00096579 E701                       	dc.b	smpsNoAttack, $01
0009657B E112                       	smpsAlterNote       $12
0009657D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096581 E10C                       	smpsAlterNote       $0C
00096583 E701                       	dc.b	smpsNoAttack, $01
00096585 E108                       	smpsAlterNote       $08
00096587 E701                       	dc.b	smpsNoAttack, $01
00096589 E109                       	smpsAlterNote       $09
0009658B E701                       	dc.b	smpsNoAttack, $01
0009658D E10F                       	smpsAlterNote       $0F
0009658F E701                       	dc.b	smpsNoAttack, $01
00096591 E113                       	smpsAlterNote       $13
00096593 E701                       	dc.b	smpsNoAttack, $01
00096595 E10F                       	smpsAlterNote       $0F
00096597 E701                       	dc.b	smpsNoAttack, $01
00096599 E10C                       	smpsAlterNote       $0C
0009659B E701                       	dc.b	smpsNoAttack, $01
0009659D E108                       	smpsAlterNote       $08
0009659F E701                       	dc.b	smpsNoAttack, $01
000965A1 E109                       	smpsAlterNote       $09
000965A3 8001                       	dc.b	nRst, $01
000965A5 E110                       	smpsAlterNote       $10
000965A7 C70D                       	dc.b	nBb5, $0D
000965A9 E10D                       	smpsAlterNote       $0D
000965AB E701                       	dc.b	smpsNoAttack, $01
000965AD E109                       	smpsAlterNote       $09
000965AF E701                       	dc.b	smpsNoAttack, $01
000965B1 E10D                       	smpsAlterNote       $0D
000965B3 E701                       	dc.b	smpsNoAttack, $01
000965B5 E113                       	smpsAlterNote       $13
000965B7 E701                       	dc.b	smpsNoAttack, $01
000965B9 E114                       	smpsAlterNote       $14
000965BB E701                       	dc.b	smpsNoAttack, $01
000965BD E110                       	smpsAlterNote       $10
000965BF E701                       	dc.b	smpsNoAttack, $01
000965C1 E10A                       	smpsAlterNote       $0A
000965C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965C7 E10D                       	smpsAlterNote       $0D
000965C9 E701                       	dc.b	smpsNoAttack, $01
000965CB E113                       	smpsAlterNote       $13
000965CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965D1 E10D                       	smpsAlterNote       $0D
000965D3 E701                       	dc.b	smpsNoAttack, $01
000965D5 E10A                       	smpsAlterNote       $0A
000965D7 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000965E1 E10B                       	smpsAlterNote       $0B
000965E3 8001                       	dc.b	nRst, $01
000965E5 E10C                       	smpsAlterNote       $0C
000965E7 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000965EB E10B                       	smpsAlterNote       $0B
000965ED CB0D                       	dc.b	nD6, $0D
000965EF E105                       	smpsAlterNote       $05
000965F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965F5 E108                       	smpsAlterNote       $08
000965F7 E701                       	dc.b	smpsNoAttack, $01
000965F9 E10E                       	smpsAlterNote       $0E
000965FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965FF E108                       	smpsAlterNote       $08
00096601 E701                       	dc.b	smpsNoAttack, $01
00096603 E105                       	smpsAlterNote       $05
00096605 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096609 E10B                       	smpsAlterNote       $0B
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E10F                       	smpsAlterNote       $0F
0009660F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096613 E10C                       	smpsAlterNote       $0C
00096615 CC0D                       	dc.b	nEb6, $0D
00096617 E106                       	smpsAlterNote       $06
00096619 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009661D E109                       	smpsAlterNote       $09
0009661F E701                       	dc.b	smpsNoAttack, $01
00096621 E10C                       	smpsAlterNote       $0C
00096623 8001                       	dc.b	nRst, $01
00096625 E10A                       	smpsAlterNote       $0A
00096627 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00096633 CB0E                       	dc.b	nD6, $0E
00096635 E105                       	smpsAlterNote       $05
00096637 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009663B E10B                       	smpsAlterNote       $0B
0009663D E701                       	dc.b	smpsNoAttack, $01
0009663F E10E                       	smpsAlterNote       $0E
00096641 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096645 E108                       	smpsAlterNote       $08
00096647 E701                       	dc.b	smpsNoAttack, $01
00096649 E104                       	smpsAlterNote       $04
0009664B E701                       	dc.b	smpsNoAttack, $01
0009664D E105                       	smpsAlterNote       $05
0009664F E701                       	dc.b	smpsNoAttack, $01
00096651 E10B                       	smpsAlterNote       $0B
00096653 E701                       	dc.b	smpsNoAttack, $01
00096655 E10F                       	smpsAlterNote       $0F
00096657 E701                       	dc.b	smpsNoAttack, $01
00096659 E10D                       	smpsAlterNote       $0D
0009665B CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0009665F E10C                       	smpsAlterNote       $0C
00096661 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00096665 E10A                       	smpsAlterNote       $0A
00096667 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00096673 CB0D                       	dc.b	nD6, $0D
00096675 E108                       	smpsAlterNote       $08
00096677 E701                       	dc.b	smpsNoAttack, $01
00096679 E104                       	smpsAlterNote       $04
0009667B E701                       	dc.b	smpsNoAttack, $01
0009667D E105                       	smpsAlterNote       $05
0009667F E701                       	dc.b	smpsNoAttack, $01
00096681 E10B                       	smpsAlterNote       $0B
00096683 E701                       	dc.b	smpsNoAttack, $01
00096685 E10F                       	smpsAlterNote       $0F
00096687 E701                       	dc.b	smpsNoAttack, $01
00096689 E10B                       	smpsAlterNote       $0B
0009668B E701                       	dc.b	smpsNoAttack, $01
0009668D E108                       	smpsAlterNote       $08
0009668F E701                       	dc.b	smpsNoAttack, $01
00096691 E104                       	smpsAlterNote       $04
00096693 E701                       	dc.b	smpsNoAttack, $01
00096695 E108                       	smpsAlterNote       $08
00096697 E701                       	dc.b	smpsNoAttack, $01
00096699 E10E                       	smpsAlterNote       $0E
0009669B E701                       	dc.b	smpsNoAttack, $01
0009669D E10F                       	smpsAlterNote       $0F
0009669F E701                       	dc.b	smpsNoAttack, $01
000966A1 E10C                       	smpsAlterNote       $0C
000966A3 CC0D                       	dc.b	nEb6, $0D
000966A5 E109                       	smpsAlterNote       $09
000966A7 E701                       	dc.b	smpsNoAttack, $01
000966A9 E105                       	smpsAlterNote       $05
000966AB E701                       	dc.b	smpsNoAttack, $01
000966AD E106                       	smpsAlterNote       $06
000966AF E701                       	dc.b	smpsNoAttack, $01
000966B1 E10C                       	smpsAlterNote       $0C
000966B3 E701                       	dc.b	smpsNoAttack, $01
000966B5 E10A                       	smpsAlterNote       $0A
000966B7 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000966C3 CB0D                       	dc.b	nD6, $0D
000966C5 E108                       	smpsAlterNote       $08
000966C7 E701                       	dc.b	smpsNoAttack, $01
000966C9 E104                       	smpsAlterNote       $04
000966CB E701                       	dc.b	smpsNoAttack, $01
000966CD E108                       	smpsAlterNote       $08
000966CF E701                       	dc.b	smpsNoAttack, $01
000966D1 E10B                       	smpsAlterNote       $0B
000966D3 E701                       	dc.b	smpsNoAttack, $01
000966D5 E10F                       	smpsAlterNote       $0F
000966D7 E701                       	dc.b	smpsNoAttack, $01
000966D9 E10B                       	smpsAlterNote       $0B
000966DB E701                       	dc.b	smpsNoAttack, $01
000966DD E105                       	smpsAlterNote       $05
000966DF E701                       	dc.b	smpsNoAttack, $01
000966E1 E104                       	smpsAlterNote       $04
000966E3 E701                       	dc.b	smpsNoAttack, $01
000966E5 E108                       	smpsAlterNote       $08
000966E7 E701                       	dc.b	smpsNoAttack, $01
000966E9 E10E                       	smpsAlterNote       $0E
000966EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966EF E10B                       	smpsAlterNote       $0B
000966F1 E701                       	dc.b	smpsNoAttack, $01
000966F3 E105                       	smpsAlterNote       $05
000966F5 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000966FD 03                         	dc.b	$03
000966FE E601                       	smpsAlterVol        $01
00096700 F6F1 D1                    	smpsJump            music84_Jump01
00096703                            
00096703                            ; FM5 Data
00096703                            music84_FM5:
00096705 E080                       	smpsPan             panLeft, $00
00096707 8003                       	dc.b	nRst, $03
00096709 E10D                       	smpsAlterNote       $0D
0009670B C203 8008                  	dc.b	nF5, $03, nRst, $08
0009670F E10C                       	smpsAlterNote       $0C
00096711 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00096715 E10F                       	smpsAlterNote       $0F
00096717 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0009671D E6FE                       	smpsAlterVol        $FE
0009671F C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00096725 E10D                       	smpsAlterNote       $0D
00096727 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009672D E10C                       	smpsAlterNote       $0C
0009672F C102 8001                  	dc.b	nE5, $02, nRst, $01
00096733 E10A                       	smpsAlterNote       $0A
00096735 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0009673B 03                         	dc.b	$03
0009673C                            
0009673C                            music84_Jump00:
0009673C 8004                       	dc.b	nRst, $04
0009673E E602                       	smpsAlterVol        $02
00096740 E10D                       	smpsAlterNote       $0D
00096742 B60D                       	dc.b	nF4, $0D
00096744 E107                       	smpsAlterNote       $07
00096746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009674A E10A                       	smpsAlterNote       $0A
0009674C E701                       	dc.b	smpsNoAttack, $01
0009674E E110                       	smpsAlterNote       $10
00096750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096754 E10A                       	smpsAlterNote       $0A
00096756 E701                       	dc.b	smpsNoAttack, $01
00096758 E107                       	smpsAlterNote       $07
0009675A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009675E E10D                       	smpsAlterNote       $0D
00096760 E701                       	dc.b	smpsNoAttack, $01
00096762 E111                       	smpsAlterNote       $11
00096764 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096768 E10D                       	smpsAlterNote       $0D
0009676A B80D                       	dc.b	nG4, $0D
0009676C E107                       	smpsAlterNote       $07
0009676E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096772 E10A                       	smpsAlterNote       $0A
00096774 E701                       	dc.b	smpsNoAttack, $01
00096776 E110                       	smpsAlterNote       $10
00096778 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009677C E10A                       	smpsAlterNote       $0A
0009677E E701                       	dc.b	smpsNoAttack, $01
00096780 E107                       	smpsAlterNote       $07
00096782 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096786 E10D                       	smpsAlterNote       $0D
00096788 E701                       	dc.b	smpsNoAttack, $01
0009678A E111                       	smpsAlterNote       $11
0009678C E701                       	dc.b	smpsNoAttack, $01
0009678E E110                       	smpsAlterNote       $10
00096790 E701                       	dc.b	smpsNoAttack, $01
00096792 E10A                       	smpsAlterNote       $0A
00096794 E701                       	dc.b	smpsNoAttack, $01
00096796 E106                       	smpsAlterNote       $06
00096798 E701                       	dc.b	smpsNoAttack, $01
0009679A E10A                       	smpsAlterNote       $0A
0009679C E701                       	dc.b	smpsNoAttack, $01
0009679E E10D                       	smpsAlterNote       $0D
000967A0 E701                       	dc.b	smpsNoAttack, $01
000967A2 E111                       	smpsAlterNote       $11
000967A4 E701                       	dc.b	smpsNoAttack, $01
000967A6 E10D                       	smpsAlterNote       $0D
000967A8 E701                       	dc.b	smpsNoAttack, $01
000967AA E10F                       	smpsAlterNote       $0F
000967AC BA0E                       	dc.b	nA4, $0E
000967AE E109                       	smpsAlterNote       $09
000967B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967B4 E10F                       	smpsAlterNote       $0F
000967B6 E701                       	dc.b	smpsNoAttack, $01
000967B8 E112                       	smpsAlterNote       $12
000967BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967BE E10C                       	smpsAlterNote       $0C
000967C0 E701                       	dc.b	smpsNoAttack, $01
000967C2 E108                       	smpsAlterNote       $08
000967C4 E701                       	dc.b	smpsNoAttack, $01
000967C6 E109                       	smpsAlterNote       $09
000967C8 E701                       	dc.b	smpsNoAttack, $01
000967CA E10F                       	smpsAlterNote       $0F
000967CC E701                       	dc.b	smpsNoAttack, $01
000967CE E113                       	smpsAlterNote       $13
000967D0 E701                       	dc.b	smpsNoAttack, $01
000967D2 E10F                       	smpsAlterNote       $0F
000967D4 E701                       	dc.b	smpsNoAttack, $01
000967D6 E109                       	smpsAlterNote       $09
000967D8 E701                       	dc.b	smpsNoAttack, $01
000967DA E108                       	smpsAlterNote       $08
000967DC E701                       	dc.b	smpsNoAttack, $01
000967DE E10C                       	smpsAlterNote       $0C
000967E0 E701                       	dc.b	smpsNoAttack, $01
000967E2 E112                       	smpsAlterNote       $12
000967E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967E8 E10F                       	smpsAlterNote       $0F
000967EA E701                       	dc.b	smpsNoAttack, $01
000967EC E109                       	smpsAlterNote       $09
000967EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967F2 E10F                       	smpsAlterNote       $0F
000967F4 E701                       	dc.b	smpsNoAttack, $01
000967F6 E112                       	smpsAlterNote       $12
000967F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967FC E10C                       	smpsAlterNote       $0C
000967FE E701                       	dc.b	smpsNoAttack, $01
00096800 E108                       	smpsAlterNote       $08
00096802 E701                       	dc.b	smpsNoAttack, $01
00096804 E109                       	smpsAlterNote       $09
00096806 E701                       	dc.b	smpsNoAttack, $01
00096808 E10F                       	smpsAlterNote       $0F
0009680A E701                       	dc.b	smpsNoAttack, $01
0009680C E113                       	smpsAlterNote       $13
0009680E E701                       	dc.b	smpsNoAttack, $01
00096810 E10F                       	smpsAlterNote       $0F
00096812 E701                       	dc.b	smpsNoAttack, $01
00096814 E10C                       	smpsAlterNote       $0C
00096816 E701                       	dc.b	smpsNoAttack, $01
00096818 E108                       	smpsAlterNote       $08
0009681A E701                       	dc.b	smpsNoAttack, $01
0009681C E109                       	smpsAlterNote       $09
0009681E 8001                       	dc.b	nRst, $01
00096820 E10C                       	smpsAlterNote       $0C
00096822 B50A                       	dc.b	nE4, $0A
00096824 E10D                       	smpsAlterNote       $0D
00096826 B60D                       	dc.b	nF4, $0D
00096828 E10A                       	smpsAlterNote       $0A
0009682A E701                       	dc.b	smpsNoAttack, $01
0009682C E106                       	smpsAlterNote       $06
0009682E E701                       	dc.b	smpsNoAttack, $01
00096830 E107                       	smpsAlterNote       $07
00096832 E701                       	dc.b	smpsNoAttack, $01
00096834 E10D                       	smpsAlterNote       $0D
00096836 E701                       	dc.b	smpsNoAttack, $01
00096838 E111                       	smpsAlterNote       $11
0009683A E701                       	dc.b	smpsNoAttack, $01
0009683C E10D                       	smpsAlterNote       $0D
0009683E E701                       	dc.b	smpsNoAttack, $01
00096840 E10A                       	smpsAlterNote       $0A
00096842 E701                       	dc.b	smpsNoAttack, $01
00096844 E106                       	smpsAlterNote       $06
00096846 E701                       	dc.b	smpsNoAttack, $01
00096848 E10A                       	smpsAlterNote       $0A
0009684A E701                       	dc.b	smpsNoAttack, $01
0009684C E110                       	smpsAlterNote       $10
0009684E E701                       	dc.b	smpsNoAttack, $01
00096850 E111                       	smpsAlterNote       $11
00096852 E701                       	dc.b	smpsNoAttack, $01
00096854 E10D                       	smpsAlterNote       $0D
00096856 B80D                       	dc.b	nG4, $0D
00096858 E10A                       	smpsAlterNote       $0A
0009685A E701                       	dc.b	smpsNoAttack, $01
0009685C E106                       	smpsAlterNote       $06
0009685E E701                       	dc.b	smpsNoAttack, $01
00096860 E107                       	smpsAlterNote       $07
00096862 E701                       	dc.b	smpsNoAttack, $01
00096864 E10D                       	smpsAlterNote       $0D
00096866 E701                       	dc.b	smpsNoAttack, $01
00096868 E111                       	smpsAlterNote       $11
0009686A E701                       	dc.b	smpsNoAttack, $01
0009686C E10D                       	smpsAlterNote       $0D
0009686E E701                       	dc.b	smpsNoAttack, $01
00096870 E10A                       	smpsAlterNote       $0A
00096872 E701                       	dc.b	smpsNoAttack, $01
00096874 E106                       	smpsAlterNote       $06
00096876 E701                       	dc.b	smpsNoAttack, $01
00096878 E10A                       	smpsAlterNote       $0A
0009687A E701                       	dc.b	smpsNoAttack, $01
0009687C E110                       	smpsAlterNote       $10
0009687E E701                       	dc.b	smpsNoAttack, $01
00096880 E111                       	smpsAlterNote       $11
00096882 E701                       	dc.b	smpsNoAttack, $01
00096884 E10D                       	smpsAlterNote       $0D
00096886 E701                       	dc.b	smpsNoAttack, $01
00096888 E107                       	smpsAlterNote       $07
0009688A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009688E E10A                       	smpsAlterNote       $0A
00096890 E701                       	dc.b	smpsNoAttack, $01
00096892 E110                       	smpsAlterNote       $10
00096894 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096898 E10D                       	smpsAlterNote       $0D
0009689A 8001                       	dc.b	nRst, $01
0009689C E10F                       	smpsAlterNote       $0F
0009689E BA0D                       	dc.b	nA4, $0D
000968A0 E10C                       	smpsAlterNote       $0C
000968A2 E701                       	dc.b	smpsNoAttack, $01
000968A4 E108                       	smpsAlterNote       $08
000968A6 E701                       	dc.b	smpsNoAttack, $01
000968A8 E10C                       	smpsAlterNote       $0C
000968AA E701                       	dc.b	smpsNoAttack, $01
000968AC E112                       	smpsAlterNote       $12
000968AE E701                       	dc.b	smpsNoAttack, $01
000968B0 E113                       	smpsAlterNote       $13
000968B2 E701                       	dc.b	smpsNoAttack, $01
000968B4 E10F                       	smpsAlterNote       $0F
000968B6 E701                       	dc.b	smpsNoAttack, $01
000968B8 E109                       	smpsAlterNote       $09
000968BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968BE E10C                       	smpsAlterNote       $0C
000968C0 E701                       	dc.b	smpsNoAttack, $01
000968C2 E112                       	smpsAlterNote       $12
000968C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968C8 E10C                       	smpsAlterNote       $0C
000968CA E701                       	dc.b	smpsNoAttack, $01
000968CC E109                       	smpsAlterNote       $09
000968CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968D2 E10F                       	smpsAlterNote       $0F
000968D4 E701                       	dc.b	smpsNoAttack, $01
000968D6 E113                       	smpsAlterNote       $13
000968D8 E701                       	dc.b	smpsNoAttack, $01
000968DA E112                       	smpsAlterNote       $12
000968DC E701                       	dc.b	smpsNoAttack, $01
000968DE E10C                       	smpsAlterNote       $0C
000968E0 E701                       	dc.b	smpsNoAttack, $01
000968E2 E108                       	smpsAlterNote       $08
000968E4 E701                       	dc.b	smpsNoAttack, $01
000968E6 E10C                       	smpsAlterNote       $0C
000968E8 E701                       	dc.b	smpsNoAttack, $01
000968EA E10F                       	smpsAlterNote       $0F
000968EC E701                       	dc.b	smpsNoAttack, $01
000968EE E113                       	smpsAlterNote       $13
000968F0 E701                       	dc.b	smpsNoAttack, $01
000968F2 E10F                       	smpsAlterNote       $0F
000968F4 E701                       	dc.b	smpsNoAttack, $01
000968F6 E109                       	smpsAlterNote       $09
000968F8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000968FC E10D                       	smpsAlterNote       $0D
000968FE B609 8001                  	dc.b	nF4, $09, nRst, $01
00096902 E10C                       	smpsAlterNote       $0C
00096904 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096908 E10B                       	smpsAlterNote       $0B
0009690A B30D                       	dc.b	nD4, $0D
0009690C E10C                       	smpsAlterNote       $0C
0009690E B503 8001                  	dc.b	nE4, $03, nRst, $01
00096912 E10D                       	smpsAlterNote       $0D
00096914 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0009691C E109                       	smpsAlterNote       $09
0009691E E701                       	dc.b	smpsNoAttack, $01
00096920 E108                       	smpsAlterNote       $08
00096922 E701                       	dc.b	smpsNoAttack, $01
00096924 E10C                       	smpsAlterNote       $0C
00096926 E701                       	dc.b	smpsNoAttack, $01
00096928 E112                       	smpsAlterNote       $12
0009692A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009692E E10F                       	smpsAlterNote       $0F
00096930 E701                       	dc.b	smpsNoAttack, $01
00096932 E109                       	smpsAlterNote       $09
00096934 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096938 E10F                       	smpsAlterNote       $0F
0009693A E701                       	dc.b	smpsNoAttack, $01
0009693C E112                       	smpsAlterNote       $12
0009693E E701                       	dc.b	smpsNoAttack, $01
00096940 E113                       	smpsAlterNote       $13
00096942 8001                       	dc.b	nRst, $01
00096944 E10D                       	smpsAlterNote       $0D
00096946 C20D                       	dc.b	nF5, $0D
00096948 E107                       	smpsAlterNote       $07
0009694A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009694E E10A                       	smpsAlterNote       $0A
00096950 E701                       	dc.b	smpsNoAttack, $01
00096952 E110                       	smpsAlterNote       $10
00096954 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096958 E10A                       	smpsAlterNote       $0A
0009695A E701                       	dc.b	smpsNoAttack, $01
0009695C E107                       	smpsAlterNote       $07
0009695E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096962 E10D                       	smpsAlterNote       $0D
00096964 E701                       	dc.b	smpsNoAttack, $01
00096966 E111                       	smpsAlterNote       $11
00096968 E701                       	dc.b	smpsNoAttack, $01
0009696A E110                       	smpsAlterNote       $10
0009696C E701                       	dc.b	smpsNoAttack, $01
0009696E E10A                       	smpsAlterNote       $0A
00096970 E701                       	dc.b	smpsNoAttack, $01
00096972 E106                       	smpsAlterNote       $06
00096974 E701                       	dc.b	smpsNoAttack, $01
00096976 E10A                       	smpsAlterNote       $0A
00096978 E701                       	dc.b	smpsNoAttack, $01
0009697A E10D                       	smpsAlterNote       $0D
0009697C E701                       	dc.b	smpsNoAttack, $01
0009697E E111                       	smpsAlterNote       $11
00096980 E701                       	dc.b	smpsNoAttack, $01
00096982 E10D                       	smpsAlterNote       $0D
00096984 E701                       	dc.b	smpsNoAttack, $01
00096986 E107                       	smpsAlterNote       $07
00096988 E701                       	dc.b	smpsNoAttack, $01
0009698A E106                       	smpsAlterNote       $06
0009698C E701                       	dc.b	smpsNoAttack, $01
0009698E E10A                       	smpsAlterNote       $0A
00096990 E701                       	dc.b	smpsNoAttack, $01
00096992 E110                       	smpsAlterNote       $10
00096994 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096998 E10D                       	smpsAlterNote       $0D
0009699A E701                       	dc.b	smpsNoAttack, $01
0009699C E107                       	smpsAlterNote       $07
0009699E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969A2 E10D                       	smpsAlterNote       $0D
000969A4 E701                       	dc.b	smpsNoAttack, $01
000969A6 E110                       	smpsAlterNote       $10
000969A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969AC E10A                       	smpsAlterNote       $0A
000969AE E701                       	dc.b	smpsNoAttack, $01
000969B0 E106                       	smpsAlterNote       $06
000969B2 E701                       	dc.b	smpsNoAttack, $01
000969B4 E107                       	smpsAlterNote       $07
000969B6 E701                       	dc.b	smpsNoAttack, $01
000969B8 E10D                       	smpsAlterNote       $0D
000969BA E701                       	dc.b	smpsNoAttack, $01
000969BC E111                       	smpsAlterNote       $11
000969BE E701                       	dc.b	smpsNoAttack, $01
000969C0 E10D                       	smpsAlterNote       $0D
000969C2 E701                       	dc.b	smpsNoAttack, $01
000969C4 E10A                       	smpsAlterNote       $0A
000969C6 E701                       	dc.b	smpsNoAttack, $01
000969C8 E106                       	smpsAlterNote       $06
000969CA E701                       	dc.b	smpsNoAttack, $01
000969CC E10A                       	smpsAlterNote       $0A
000969CE E701                       	dc.b	smpsNoAttack, $01
000969D0 E110                       	smpsAlterNote       $10
000969D2 E701                       	dc.b	smpsNoAttack, $01
000969D4 E111                       	smpsAlterNote       $11
000969D6 E701                       	dc.b	smpsNoAttack, $01
000969D8 E10D                       	smpsAlterNote       $0D
000969DA E701                       	dc.b	smpsNoAttack, $01
000969DC E107                       	smpsAlterNote       $07
000969DE E701                       	dc.b	smpsNoAttack, $01
000969E0 E10D                       	smpsAlterNote       $0D
000969E2 C207                       	dc.b	nF5, $07
000969E4 E10C                       	smpsAlterNote       $0C
000969E6 C10D                       	dc.b	nE5, $0D
000969E8 E109                       	smpsAlterNote       $09
000969EA E701                       	dc.b	smpsNoAttack, $01
000969EC E106                       	smpsAlterNote       $06
000969EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969F2 E10C                       	smpsAlterNote       $0C
000969F4 E701                       	dc.b	smpsNoAttack, $01
000969F6 E110                       	smpsAlterNote       $10
000969F8 E701                       	dc.b	smpsNoAttack, $01
000969FA E10F                       	smpsAlterNote       $0F
000969FC E701                       	dc.b	smpsNoAttack, $01
000969FE E109                       	smpsAlterNote       $09
00096A00 E701                       	dc.b	smpsNoAttack, $01
00096A02 E105                       	smpsAlterNote       $05
00096A04 E701                       	dc.b	smpsNoAttack, $01
00096A06 E109                       	smpsAlterNote       $09
00096A08 E701                       	dc.b	smpsNoAttack, $01
00096A0A E10C                       	smpsAlterNote       $0C
00096A0C E701                       	dc.b	smpsNoAttack, $01
00096A0E E110                       	smpsAlterNote       $10
00096A10 E701                       	dc.b	smpsNoAttack, $01
00096A12 E10B                       	smpsAlterNote       $0B
00096A14 BF0D                       	dc.b	nD5, $0D
00096A16 E108                       	smpsAlterNote       $08
00096A18 E701                       	dc.b	smpsNoAttack, $01
00096A1A E105                       	smpsAlterNote       $05
00096A1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A20 E10B                       	smpsAlterNote       $0B
00096A22 E701                       	dc.b	smpsNoAttack, $01
00096A24 E10F                       	smpsAlterNote       $0F
00096A26 E701                       	dc.b	smpsNoAttack, $01
00096A28 E10E                       	smpsAlterNote       $0E
00096A2A E701                       	dc.b	smpsNoAttack, $01
00096A2C E108                       	smpsAlterNote       $08
00096A2E E701                       	dc.b	smpsNoAttack, $01
00096A30 E104                       	smpsAlterNote       $04
00096A32 E701                       	dc.b	smpsNoAttack, $01
00096A34 E108                       	smpsAlterNote       $08
00096A36 E701                       	dc.b	smpsNoAttack, $01
00096A38 E10E                       	smpsAlterNote       $0E
00096A3A E701                       	dc.b	smpsNoAttack, $01
00096A3C E10F                       	smpsAlterNote       $0F
00096A3E E701                       	dc.b	smpsNoAttack, $01
00096A40 E10B                       	smpsAlterNote       $0B
00096A42 E701                       	dc.b	smpsNoAttack, $01
00096A44 E105                       	smpsAlterNote       $05
00096A46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A4A E108                       	smpsAlterNote       $08
00096A4C E701                       	dc.b	smpsNoAttack, $01
00096A4E E10E                       	smpsAlterNote       $0E
00096A50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A54 E108                       	smpsAlterNote       $08
00096A56 E701                       	dc.b	smpsNoAttack, $01
00096A58 E105                       	smpsAlterNote       $05
00096A5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A5E E10B                       	smpsAlterNote       $0B
00096A60 E701                       	dc.b	smpsNoAttack, $01
00096A62 E10F                       	smpsAlterNote       $0F
00096A64 E701                       	dc.b	smpsNoAttack, $01
00096A66 E10E                       	smpsAlterNote       $0E
00096A68 E701                       	dc.b	smpsNoAttack, $01
00096A6A E108                       	smpsAlterNote       $08
00096A6C E701                       	dc.b	smpsNoAttack, $01
00096A6E E104                       	smpsAlterNote       $04
00096A70 E701                       	dc.b	smpsNoAttack, $01
00096A72 E108                       	smpsAlterNote       $08
00096A74 E701                       	dc.b	smpsNoAttack, $01
00096A76 E10B                       	smpsAlterNote       $0B
00096A78 E701                       	dc.b	smpsNoAttack, $01
00096A7A E10F                       	smpsAlterNote       $0F
00096A7C E701                       	dc.b	smpsNoAttack, $01
00096A7E E10B                       	smpsAlterNote       $0B
00096A80 E701                       	dc.b	smpsNoAttack, $01
00096A82 E105                       	smpsAlterNote       $05
00096A84 E701                       	dc.b	smpsNoAttack, $01
00096A86 E104                       	smpsAlterNote       $04
00096A88 E701                       	dc.b	smpsNoAttack, $01
00096A8A E108                       	smpsAlterNote       $08
00096A8C E701                       	dc.b	smpsNoAttack, $01
00096A8E E10E                       	smpsAlterNote       $0E
00096A90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A94 E10B                       	smpsAlterNote       $0B
00096A96 E701                       	dc.b	smpsNoAttack, $01
00096A98 E105                       	smpsAlterNote       $05
00096A9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A9E E10B                       	smpsAlterNote       $0B
00096AA0 E701                       	dc.b	smpsNoAttack, $01
00096AA2 E10E                       	smpsAlterNote       $0E
00096AA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AA8 E108                       	smpsAlterNote       $08
00096AAA E701                       	dc.b	smpsNoAttack, $01
00096AAC E105                       	smpsAlterNote       $05
00096AAE 8001                       	dc.b	nRst, $01
00096AB2 E601                       	smpsAlterVol        $01
00096AB4 E10B                       	smpsAlterNote       $0B
00096AB6 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096AC2 8004                       	dc.b	nRst, $04
00096AC6 E6FF                       	smpsAlterVol        $FF
00096AC8 E10D                       	smpsAlterNote       $0D
00096ACA B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096AD2 E10C                       	smpsAlterNote       $0C
00096AD4 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096AD9 E10D                       	smpsAlterNote       $0D
00096ADB B60D                       	dc.b	nF4, $0D
00096ADD E10A                       	smpsAlterNote       $0A
00096ADF E701                       	dc.b	smpsNoAttack, $01
00096AE1 E106                       	smpsAlterNote       $06
00096AE3 E701                       	dc.b	smpsNoAttack, $01
00096AE5 E10A                       	smpsAlterNote       $0A
00096AE7 E701                       	dc.b	smpsNoAttack, $01
00096AE9 E110                       	smpsAlterNote       $10
00096AEB E701                       	dc.b	smpsNoAttack, $01
00096AED E111                       	smpsAlterNote       $11
00096AEF E701                       	dc.b	smpsNoAttack, $01
00096AF1 E10D                       	smpsAlterNote       $0D
00096AF3 E701                       	dc.b	smpsNoAttack, $01
00096AF5 E107                       	smpsAlterNote       $07
00096AF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AFB E10A                       	smpsAlterNote       $0A
00096AFD E701                       	dc.b	smpsNoAttack, $01
00096AFF E110                       	smpsAlterNote       $10
00096B01 E701                       	dc.b	smpsNoAttack, $01
00096B03 E111                       	smpsAlterNote       $11
00096B05 8001                       	dc.b	nRst, $01
00096B07 E10D                       	smpsAlterNote       $0D
00096B09 B80D                       	dc.b	nG4, $0D
00096B0B E10A                       	smpsAlterNote       $0A
00096B0D E701                       	dc.b	smpsNoAttack, $01
00096B0F E106                       	smpsAlterNote       $06
00096B11 E701                       	dc.b	smpsNoAttack, $01
00096B13 E10A                       	smpsAlterNote       $0A
00096B15 E701                       	dc.b	smpsNoAttack, $01
00096B17 E110                       	smpsAlterNote       $10
00096B19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B1D E10D                       	smpsAlterNote       $0D
00096B1F E701                       	dc.b	smpsNoAttack, $01
00096B21 E107                       	smpsAlterNote       $07
00096B23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B27 E10D                       	smpsAlterNote       $0D
00096B29 E701                       	dc.b	smpsNoAttack, $01
00096B2B E110                       	smpsAlterNote       $10
00096B2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B31 E10A                       	smpsAlterNote       $0A
00096B33 E701                       	dc.b	smpsNoAttack, $01
00096B35 E106                       	smpsAlterNote       $06
00096B37 E701                       	dc.b	smpsNoAttack, $01
00096B39 E107                       	smpsAlterNote       $07
00096B3B E701                       	dc.b	smpsNoAttack, $01
00096B3D E10D                       	smpsAlterNote       $0D
00096B3F E701                       	dc.b	smpsNoAttack, $01
00096B41 E111                       	smpsAlterNote       $11
00096B43 E701                       	dc.b	smpsNoAttack, $01
00096B45 E10D                       	smpsAlterNote       $0D
00096B47 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096B4B E10F                       	smpsAlterNote       $0F
00096B4D BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096B51 E110                       	smpsAlterNote       $10
00096B53 BB03                       	dc.b	nBb4, $03
00096B55 E10F                       	smpsAlterNote       $0F
00096B57 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00096B5D E110                       	smpsAlterNote       $10
00096B5F C703 8001                  	dc.b	nBb5, $03, nRst, $01
00096B63 E10F                       	smpsAlterNote       $0F
00096B65 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00096B6B E110                       	smpsAlterNote       $10
00096B6D D302 8001                  	dc.b	nBb6, $02, nRst, $01
00096B71 E10F                       	smpsAlterNote       $0F
00096B73 D20D                       	dc.b	nA6, $0D
00096B75 E10C                       	smpsAlterNote       $0C
00096B77 E701                       	dc.b	smpsNoAttack, $01
00096B79 E108                       	smpsAlterNote       $08
00096B7B E701                       	dc.b	smpsNoAttack, $01
00096B7D E10C                       	smpsAlterNote       $0C
00096B7F E701                       	dc.b	smpsNoAttack, $01
00096B81 E10F                       	smpsAlterNote       $0F
00096B83 E701                       	dc.b	smpsNoAttack, $01
00096B85 E113                       	smpsAlterNote       $13
00096B87 E701                       	dc.b	smpsNoAttack, $01
00096B89 E10F                       	smpsAlterNote       $0F
00096B8B E701                       	dc.b	smpsNoAttack, $01
00096B8D E109                       	smpsAlterNote       $09
00096B8F E701                       	dc.b	smpsNoAttack, $01
00096B91 E108                       	smpsAlterNote       $08
00096B93 E701                       	dc.b	smpsNoAttack, $01
00096B95 E10C                       	smpsAlterNote       $0C
00096B97 E701                       	dc.b	smpsNoAttack, $01
00096B99 E112                       	smpsAlterNote       $12
00096B9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B9F E10F                       	smpsAlterNote       $0F
00096BA1 E701                       	dc.b	smpsNoAttack, $01
00096BA3 E109                       	smpsAlterNote       $09
00096BA5 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00096BAB E10D                       	smpsAlterNote       $0D
00096BAD CE07                       	dc.b	nF6, $07
00096BAF E10C                       	smpsAlterNote       $0C
00096BB1 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096BB5 E10D                       	smpsAlterNote       $0D
00096BB7 CE03                       	dc.b	nF6, $03
00096BB9 E10C                       	smpsAlterNote       $0C
00096BBB CC0D                       	dc.b	nEb6, $0D
00096BBD E109                       	smpsAlterNote       $09
00096BBF E701                       	dc.b	smpsNoAttack, $01
00096BC1 E106                       	smpsAlterNote       $06
00096BC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BC7 E10C                       	smpsAlterNote       $0C
00096BC9 E701                       	dc.b	smpsNoAttack, $01
00096BCB E110                       	smpsAlterNote       $10
00096BCD E701                       	dc.b	smpsNoAttack, $01
00096BCF E10F                       	smpsAlterNote       $0F
00096BD1 E701                       	dc.b	smpsNoAttack, $01
00096BD3 E109                       	smpsAlterNote       $09
00096BD5 E701                       	dc.b	smpsNoAttack, $01
00096BD7 E105                       	smpsAlterNote       $05
00096BD9 E701                       	dc.b	smpsNoAttack, $01
00096BDB E109                       	smpsAlterNote       $09
00096BDD E701                       	dc.b	smpsNoAttack, $01
00096BDF E10C                       	smpsAlterNote       $0C
00096BE1 E701                       	dc.b	smpsNoAttack, $01
00096BE3 E110                       	smpsAlterNote       $10
00096BE5 E701                       	dc.b	smpsNoAttack, $01
00096BE7 E10C                       	smpsAlterNote       $0C
00096BE9 E701                       	dc.b	smpsNoAttack, $01
00096BEB E106                       	smpsAlterNote       $06
00096BED E701                       	dc.b	smpsNoAttack, $01
00096BEF E105                       	smpsAlterNote       $05
00096BF1 E701                       	dc.b	smpsNoAttack, $01
00096BF3 E109                       	smpsAlterNote       $09
00096BF5 E701                       	dc.b	smpsNoAttack, $01
00096BF7 E10F                       	smpsAlterNote       $0F
00096BF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BFD E10C                       	smpsAlterNote       $0C
00096BFF E701                       	dc.b	smpsNoAttack, $01
00096C01 E10B                       	smpsAlterNote       $0B
00096C03 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00096C0D E10F                       	smpsAlterNote       $0F
00096C0F C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00096C19 E10D                       	smpsAlterNote       $0D
00096C1B C203                       	dc.b	nF5, $03
00096C1D E10C                       	smpsAlterNote       $0C
00096C1F C103 8001                  	dc.b	nE5, $03, nRst, $01
00096C23 E10D                       	smpsAlterNote       $0D
00096C25 C20D                       	dc.b	nF5, $0D
00096C27 E10C                       	smpsAlterNote       $0C
00096C29 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00096C2D E10B                       	smpsAlterNote       $0B
00096C2F BF0D                       	dc.b	nD5, $0D
00096C31 E108                       	smpsAlterNote       $08
00096C33 E701                       	dc.b	smpsNoAttack, $01
00096C35 E104                       	smpsAlterNote       $04
00096C37 E701                       	dc.b	smpsNoAttack, $01
00096C39 E108                       	smpsAlterNote       $08
00096C3B E701                       	dc.b	smpsNoAttack, $01
00096C3D E10E                       	smpsAlterNote       $0E
00096C3F E701                       	dc.b	smpsNoAttack, $01
00096C41 E10F                       	smpsAlterNote       $0F
00096C43 E701                       	dc.b	smpsNoAttack, $01
00096C45 E10B                       	smpsAlterNote       $0B
00096C47 E701                       	dc.b	smpsNoAttack, $01
00096C49 E105                       	smpsAlterNote       $05
00096C4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C4F E108                       	smpsAlterNote       $08
00096C51 E701                       	dc.b	smpsNoAttack, $01
00096C53 E10E                       	smpsAlterNote       $0E
00096C55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C59 E108                       	smpsAlterNote       $08
00096C5B E701                       	dc.b	smpsNoAttack, $01
00096C5D E105                       	smpsAlterNote       $05
00096C5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C63 E10B                       	smpsAlterNote       $0B
00096C65 E701                       	dc.b	smpsNoAttack, $01
00096C67 E10F                       	smpsAlterNote       $0F
00096C69 E701                       	dc.b	smpsNoAttack, $01
00096C6B E10E                       	smpsAlterNote       $0E
00096C6D E701                       	dc.b	smpsNoAttack, $01
00096C6F E108                       	smpsAlterNote       $08
00096C71 E701                       	dc.b	smpsNoAttack, $01
00096C73 E104                       	smpsAlterNote       $04
00096C75 E701                       	dc.b	smpsNoAttack, $01
00096C77 E108                       	smpsAlterNote       $08
00096C79 E701                       	dc.b	smpsNoAttack, $01
00096C7B E10B                       	smpsAlterNote       $0B
00096C7D E701                       	dc.b	smpsNoAttack, $01
00096C7F E10F                       	smpsAlterNote       $0F
00096C81 E701                       	dc.b	smpsNoAttack, $01
00096C83 E10B                       	smpsAlterNote       $0B
00096C85 E701                       	dc.b	smpsNoAttack, $01
00096C87 E105                       	smpsAlterNote       $05
00096C89 E701                       	dc.b	smpsNoAttack, $01
00096C8B E104                       	smpsAlterNote       $04
00096C8D E701                       	dc.b	smpsNoAttack, $01
00096C8F E108                       	smpsAlterNote       $08
00096C91 E701                       	dc.b	smpsNoAttack, $01
00096C93 E10E                       	smpsAlterNote       $0E
00096C95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C99 E10B                       	smpsAlterNote       $0B
00096C9B E701                       	dc.b	smpsNoAttack, $01
00096C9D E105                       	smpsAlterNote       $05
00096C9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CA3 E10B                       	smpsAlterNote       $0B
00096CA5 E701                       	dc.b	smpsNoAttack, $01
00096CA7 E10E                       	smpsAlterNote       $0E
00096CA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CAD E108                       	smpsAlterNote       $08
00096CAF E701                       	dc.b	smpsNoAttack, $01
00096CB1 E104                       	smpsAlterNote       $04
00096CB3 E701                       	dc.b	smpsNoAttack, $01
00096CB5 E105                       	smpsAlterNote       $05
00096CB7 E701                       	dc.b	smpsNoAttack, $01
00096CB9 E10B                       	smpsAlterNote       $0B
00096CBB E701                       	dc.b	smpsNoAttack, $01
00096CBD E10F                       	smpsAlterNote       $0F
00096CBF E701                       	dc.b	smpsNoAttack, $01
00096CC1 E10B                       	smpsAlterNote       $0B
00096CC3 E701                       	dc.b	smpsNoAttack, $01
00096CC5 E108                       	smpsAlterNote       $08
00096CC7 E701                       	dc.b	smpsNoAttack, $01
00096CC9 E104                       	smpsAlterNote       $04
00096CCB E701                       	dc.b	smpsNoAttack, $01
00096CCD E108                       	smpsAlterNote       $08
00096CCF E701                       	dc.b	smpsNoAttack, $01
00096CD1 E10E                       	smpsAlterNote       $0E
00096CD3 E701                       	dc.b	smpsNoAttack, $01
00096CD5 E10F                       	smpsAlterNote       $0F
00096CD7 E701                       	dc.b	smpsNoAttack, $01
00096CD9 E10B                       	smpsAlterNote       $0B
00096CDB E701                       	dc.b	smpsNoAttack, $01
00096CDD E105                       	smpsAlterNote       $05
00096CDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CE3 E108                       	smpsAlterNote       $08
00096CE5 E701                       	dc.b	smpsNoAttack, $01
00096CE7 E10E                       	smpsAlterNote       $0E
00096CE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CED E108                       	smpsAlterNote       $08
00096CEF E701                       	dc.b	smpsNoAttack, $01
00096CF1 E105                       	smpsAlterNote       $05
00096CF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CF7 E10B                       	smpsAlterNote       $0B
00096CF9 E701                       	dc.b	smpsNoAttack, $01
00096CFB E10F                       	smpsAlterNote       $0F
00096CFD E701                       	dc.b	smpsNoAttack, $01
00096CFF E10E                       	smpsAlterNote       $0E
00096D01 E701                       	dc.b	smpsNoAttack, $01
00096D03 E108                       	smpsAlterNote       $08
00096D05 E701                       	dc.b	smpsNoAttack, $01
00096D07 E104                       	smpsAlterNote       $04
00096D09 E701                       	dc.b	smpsNoAttack, $01
00096D0B E108                       	smpsAlterNote       $08
00096D0D E701                       	dc.b	smpsNoAttack, $01
00096D0F E10B                       	smpsAlterNote       $0B
00096D11 E701                       	dc.b	smpsNoAttack, $01
00096D13 E10F                       	smpsAlterNote       $0F
00096D15 E701                       	dc.b	smpsNoAttack, $01
00096D17 E10B                       	smpsAlterNote       $0B
00096D19 E701                       	dc.b	smpsNoAttack, $01
00096D1B E105                       	smpsAlterNote       $05
00096D1D E701                       	dc.b	smpsNoAttack, $01
00096D1F E104                       	smpsAlterNote       $04
00096D21 E701                       	dc.b	smpsNoAttack, $01
00096D23 E105                       	smpsAlterNote       $05
00096D25 8001                       	dc.b	nRst, $01
00096D27 E10D                       	smpsAlterNote       $0D
00096D29 C20D                       	dc.b	nF5, $0D
00096D2B E107                       	smpsAlterNote       $07
00096D2D E701                       	dc.b	smpsNoAttack, $01
00096D2F E106                       	smpsAlterNote       $06
00096D31 E701                       	dc.b	smpsNoAttack, $01
00096D33 E10A                       	smpsAlterNote       $0A
00096D35 E701                       	dc.b	smpsNoAttack, $01
00096D37 E110                       	smpsAlterNote       $10
00096D39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D3D E10D                       	smpsAlterNote       $0D
00096D3F E701                       	dc.b	smpsNoAttack, $01
00096D41 E107                       	smpsAlterNote       $07
00096D43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D47 E10D                       	smpsAlterNote       $0D
00096D49 E701                       	dc.b	smpsNoAttack, $01
00096D4B E110                       	smpsAlterNote       $10
00096D4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D51 E10A                       	smpsAlterNote       $0A
00096D53 E701                       	dc.b	smpsNoAttack, $01
00096D55 E106                       	smpsAlterNote       $06
00096D57 E701                       	dc.b	smpsNoAttack, $01
00096D59 E107                       	smpsAlterNote       $07
00096D5B E701                       	dc.b	smpsNoAttack, $01
00096D5D E10D                       	smpsAlterNote       $0D
00096D5F E701                       	dc.b	smpsNoAttack, $01
00096D61 E111                       	smpsAlterNote       $11
00096D63 E701                       	dc.b	smpsNoAttack, $01
00096D65 E10D                       	smpsAlterNote       $0D
00096D67 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D6B E10C                       	smpsAlterNote       $0C
00096D6D C10D                       	dc.b	nE5, $0D
00096D6F E10D                       	smpsAlterNote       $0D
00096D71 C20A                       	dc.b	nF5, $0A
00096D73 E10C                       	smpsAlterNote       $0C
00096D75 C10E                       	dc.b	nE5, $0E
00096D77 E106                       	smpsAlterNote       $06
00096D79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D7D E10C                       	smpsAlterNote       $0C
00096D7F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D83 E10B                       	smpsAlterNote       $0B
00096D85 BF0D                       	dc.b	nD5, $0D
00096D87 E10C                       	smpsAlterNote       $0C
00096D89 C107                       	dc.b	nE5, $07
00096D8B E10D                       	smpsAlterNote       $0D
00096D8D C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00096D97 E110                       	smpsAlterNote       $10
00096D99 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00096D9F E10F                       	smpsAlterNote       $0F
00096DA1 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00096DA9 E10D                       	smpsAlterNote       $0D
00096DAB D003                       	dc.b	nG6, $03
00096DAF E0C0                       	smpsPan             panCenter, $00
00096DB1 E6FF                       	smpsAlterVol        $FF
00096DB3 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00096DBF 8001                       	dc.b	nRst, $01
00096DC1 E10C                       	smpsAlterNote       $0C
00096DC3 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00096DCD E604                       	smpsAlterVol        $04
00096DCF E10B                       	smpsAlterNote       $0B
00096DD1 B306 8001                  	dc.b	nD4, $06, nRst, $01
00096DD5 E10F                       	smpsAlterNote       $0F
00096DD7 AE03                       	dc.b	nA3, $03
00096DD9 E10D                       	smpsAlterNote       $0D
00096DDB B603 8001                  	dc.b	nF4, $03, nRst, $01
00096DDF E10C                       	smpsAlterNote       $0C
00096DE1 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096DE5 E10B                       	smpsAlterNote       $0B
00096DE7 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096DEB E10A                       	smpsAlterNote       $0A
00096DED B103                       	dc.b	nC4, $03
00096DEF E110                       	smpsAlterNote       $10
00096DF1 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00096DF5 E10F                       	smpsAlterNote       $0F
00096DF7 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00096DFB E080                       	smpsPan             panLeft, $00
00096DFD 01                         	dc.b	$01
00096E00 E6FB                       	smpsAlterVol        $FB
00096E02 E1E4                       	smpsAlterNote       $E4
00096E04 C501                       	dc.b	nAb5, $01
00096E06 E1F4                       	smpsAlterNote       $F4
00096E08 E701                       	dc.b	smpsNoAttack, $01
00096E0A E104                       	smpsAlterNote       $04
00096E0C E701                       	dc.b	smpsNoAttack, $01
00096E0E E114                       	smpsAlterNote       $14
00096E10 E701                       	dc.b	smpsNoAttack, $01
00096E12 E11C                       	smpsAlterNote       $1C
00096E14 E701                       	dc.b	smpsNoAttack, $01
00096E16 E1EF                       	smpsAlterNote       $EF
00096E18 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00096E1B E1FF                       	smpsAlterNote       $FF
00096E1D E701                       	dc.b	smpsNoAttack, $01
00096E1F E10F                       	smpsAlterNote       $0F
00096E21 C606                       	dc.b	nA5, $06
00096E23 E109                       	smpsAlterNote       $09
00096E25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E29 E10F                       	smpsAlterNote       $0F
00096E2B E701                       	dc.b	smpsNoAttack, $01
00096E2D E112                       	smpsAlterNote       $12
00096E2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E33 E10C                       	smpsAlterNote       $0C
00096E35 E701                       	dc.b	smpsNoAttack, $01
00096E37 E108                       	smpsAlterNote       $08
00096E39 E701                       	dc.b	smpsNoAttack, $01
00096E3B E109                       	smpsAlterNote       $09
00096E3D E701                       	dc.b	smpsNoAttack, $01
00096E3F E10F                       	smpsAlterNote       $0F
00096E41 E701                       	dc.b	smpsNoAttack, $01
00096E43 E113                       	smpsAlterNote       $13
00096E45 E701                       	dc.b	smpsNoAttack, $01
00096E47 E10F                       	smpsAlterNote       $0F
00096E49 E701                       	dc.b	smpsNoAttack, $01
00096E4B E10C                       	smpsAlterNote       $0C
00096E4D E701                       	dc.b	smpsNoAttack, $01
00096E4F E108                       	smpsAlterNote       $08
00096E51 E701                       	dc.b	smpsNoAttack, $01
00096E53 E10C                       	smpsAlterNote       $0C
00096E55 E701                       	dc.b	smpsNoAttack, $01
00096E57 E112                       	smpsAlterNote       $12
00096E59 E701                       	dc.b	smpsNoAttack, $01
00096E5B E113                       	smpsAlterNote       $13
00096E5D E701                       	dc.b	smpsNoAttack, $01
00096E5F E10F                       	smpsAlterNote       $0F
00096E61 E701                       	dc.b	smpsNoAttack, $01
00096E63 E109                       	smpsAlterNote       $09
00096E65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E69 E10C                       	smpsAlterNote       $0C
00096E6B E701                       	dc.b	smpsNoAttack, $01
00096E6D E112                       	smpsAlterNote       $12
00096E6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E73 E10C                       	smpsAlterNote       $0C
00096E75 E701                       	dc.b	smpsNoAttack, $01
00096E77 E109                       	smpsAlterNote       $09
00096E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E7D E10F                       	smpsAlterNote       $0F
00096E7F E701                       	dc.b	smpsNoAttack, $01
00096E81 E113                       	smpsAlterNote       $13
00096E83 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096E87 E10D                       	smpsAlterNote       $0D
00096E89 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00096E8F E10C                       	smpsAlterNote       $0C
00096E91 C102 8001                  	dc.b	nE5, $02, nRst, $01
00096E95 E10D                       	smpsAlterNote       $0D
00096E97 C201 8001                  	dc.b	nF5, $01, nRst, $01
00096E9B E10C                       	smpsAlterNote       $0C
00096E9D C102                       	dc.b	nE5, $02
00096E9F E10B                       	smpsAlterNote       $0B
00096EA1 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00096EA5 E10C                       	smpsAlterNote       $0C
00096EA7 C101 8001                  	dc.b	nE5, $01, nRst, $01
00096EAB E10B                       	smpsAlterNote       $0B
00096EAD BF02                       	dc.b	nD5, $02
00096EAF E10A                       	smpsAlterNote       $0A
00096EB1 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00096EBB E110                       	smpsAlterNote       $10
00096EBD BB02                       	dc.b	nBb4, $02
00096EBF E10A                       	smpsAlterNote       $0A
00096EC1 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00096EC5 E110                       	smpsAlterNote       $10
00096EC7 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00096ECB E10F                       	smpsAlterNote       $0F
00096ECD BA01 8001                  	dc.b	nA4, $01, nRst, $01
00096ED1 E110                       	smpsAlterNote       $10
00096ED3 BB02                       	dc.b	nBb4, $02
00096ED5 E10F                       	smpsAlterNote       $0F
00096ED7 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00096EE1 E10C                       	smpsAlterNote       $0C
00096EE3 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00096EEB E10B                       	smpsAlterNote       $0B
00096EED BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00096EF1 E10F                       	smpsAlterNote       $0F
00096EF3 BA02                       	dc.b	nA4, $02
00096EF7 E0C0                       	smpsPan             panCenter, $00
00096EF9 E601                       	smpsAlterVol        $01
00096EFB E109                       	smpsAlterNote       $09
00096EFD AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00096F09 E108                       	smpsAlterNote       $08
00096F0B A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00096F11 E107                       	smpsAlterNote       $07
00096F13 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00096F19 E109                       	smpsAlterNote       $09
00096F1B B603 8001                  	dc.b	nF4, $03, nRst, $01
00096F1F E108                       	smpsAlterNote       $08
00096F21 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096F25 E107                       	smpsAlterNote       $07
00096F27 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096F2B E106                       	smpsAlterNote       $06
00096F2D B103                       	dc.b	nC4, $03
00096F2F E10C                       	smpsAlterNote       $0C
00096F31 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00096F37 E080                       	smpsPan             panLeft, $00
00096F39 07                         	dc.b	$07
00096F3A E6FE                       	smpsAlterVol        $FE
00096F3C E10B                       	smpsAlterNote       $0B
00096F3E B20D                       	dc.b	nCs4, $0D
00096F40 E105                       	smpsAlterNote       $05
00096F42 E701                       	dc.b	smpsNoAttack, $01
00096F44 E104                       	smpsAlterNote       $04
00096F46 E701                       	dc.b	smpsNoAttack, $01
00096F48 E108                       	smpsAlterNote       $08
00096F4A E701                       	dc.b	smpsNoAttack, $01
00096F4C E10E                       	smpsAlterNote       $0E
00096F4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F52 E10B                       	smpsAlterNote       $0B
00096F54 E701                       	dc.b	smpsNoAttack, $01
00096F56 E105                       	smpsAlterNote       $05
00096F58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F5C E10B                       	smpsAlterNote       $0B
00096F5E E701                       	dc.b	smpsNoAttack, $01
00096F60 E10E                       	smpsAlterNote       $0E
00096F62 E701                       	dc.b	smpsNoAttack, $01
00096F64 E10F                       	smpsAlterNote       $0F
00096F66 8001                       	dc.b	nRst, $01
00096F68 E10B                       	smpsAlterNote       $0B
00096F6A B30D                       	dc.b	nD4, $0D
00096F6C E105                       	smpsAlterNote       $05
00096F6E E701                       	dc.b	smpsNoAttack, $01
00096F70 E104                       	smpsAlterNote       $04
00096F72 E701                       	dc.b	smpsNoAttack, $01
00096F74 E108                       	smpsAlterNote       $08
00096F76 E701                       	dc.b	smpsNoAttack, $01
00096F78 E10E                       	smpsAlterNote       $0E
00096F7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F7E E10B                       	smpsAlterNote       $0B
00096F80 E701                       	dc.b	smpsNoAttack, $01
00096F82 E105                       	smpsAlterNote       $05
00096F84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F88 E10B                       	smpsAlterNote       $0B
00096F8A E701                       	dc.b	smpsNoAttack, $01
00096F8C E10E                       	smpsAlterNote       $0E
00096F8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F92 E108                       	smpsAlterNote       $08
00096F94 E701                       	dc.b	smpsNoAttack, $01
00096F96 E104                       	smpsAlterNote       $04
00096F98 E701                       	dc.b	smpsNoAttack, $01
00096F9A E105                       	smpsAlterNote       $05
00096F9C E701                       	dc.b	smpsNoAttack, $01
00096F9E E10B                       	smpsAlterNote       $0B
00096FA0 E701                       	dc.b	smpsNoAttack, $01
00096FA2 E10F                       	smpsAlterNote       $0F
00096FA4 E701                       	dc.b	smpsNoAttack, $01
00096FA6 E10B                       	smpsAlterNote       $0B
00096FA8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096FAC E10C                       	smpsAlterNote       $0C
00096FAE B50D                       	dc.b	nE4, $0D
00096FB0 E106                       	smpsAlterNote       $06
00096FB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FB6 E10C                       	smpsAlterNote       $0C
00096FB8 E701                       	dc.b	smpsNoAttack, $01
00096FBA E10F                       	smpsAlterNote       $0F
00096FBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FC0 E109                       	smpsAlterNote       $09
00096FC2 E701                       	dc.b	smpsNoAttack, $01
00096FC4 E105                       	smpsAlterNote       $05
00096FC6 E701                       	dc.b	smpsNoAttack, $01
00096FC8 E106                       	smpsAlterNote       $06
00096FCA E701                       	dc.b	smpsNoAttack, $01
00096FCC E10C                       	smpsAlterNote       $0C
00096FCE E701                       	dc.b	smpsNoAttack, $01
00096FD0 E110                       	smpsAlterNote       $10
00096FD2 E701                       	dc.b	smpsNoAttack, $01
00096FD4 E10B                       	smpsAlterNote       $0B
00096FD6 B30E                       	dc.b	nD4, $0E
00096FD8 E105                       	smpsAlterNote       $05
00096FDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FDE E10B                       	smpsAlterNote       $0B
00096FE0 E701                       	dc.b	smpsNoAttack, $01
00096FE2 E10E                       	smpsAlterNote       $0E
00096FE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FE8 E108                       	smpsAlterNote       $08
00096FEA E701                       	dc.b	smpsNoAttack, $01
00096FEC E104                       	smpsAlterNote       $04
00096FEE E701                       	dc.b	smpsNoAttack, $01
00096FF0 E105                       	smpsAlterNote       $05
00096FF2 E701                       	dc.b	smpsNoAttack, $01
00096FF4 E10B                       	smpsAlterNote       $0B
00096FF6 E701                       	dc.b	smpsNoAttack, $01
00096FF8 E10F                       	smpsAlterNote       $0F
00096FFA E701                       	dc.b	smpsNoAttack, $01
00096FFC E10B                       	smpsAlterNote       $0B
00096FFE E701                       	dc.b	smpsNoAttack, $01
00097000 E108                       	smpsAlterNote       $08
00097002 E701                       	dc.b	smpsNoAttack, $01
00097004 E104                       	smpsAlterNote       $04
00097006 E701                       	dc.b	smpsNoAttack, $01
00097008 E108                       	smpsAlterNote       $08
0009700A E701                       	dc.b	smpsNoAttack, $01
0009700C E10E                       	smpsAlterNote       $0E
0009700E E701                       	dc.b	smpsNoAttack, $01
00097010 E10F                       	smpsAlterNote       $0F
00097012 E701                       	dc.b	smpsNoAttack, $01
00097014 E10B                       	smpsAlterNote       $0B
00097016 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009701A E108                       	smpsAlterNote       $08
0009701C E701                       	dc.b	smpsNoAttack, $01
0009701E E105                       	smpsAlterNote       $05
00097020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097024 E10B                       	smpsAlterNote       $0B
00097026 E701                       	dc.b	smpsNoAttack, $01
00097028 E10F                       	smpsAlterNote       $0F
0009702A E701                       	dc.b	smpsNoAttack, $01
0009702C E10E                       	smpsAlterNote       $0E
0009702E E701                       	dc.b	smpsNoAttack, $01
00097030 E108                       	smpsAlterNote       $08
00097032 E701                       	dc.b	smpsNoAttack, $01
00097034 E104                       	smpsAlterNote       $04
00097036 E701                       	dc.b	smpsNoAttack, $01
00097038 E108                       	smpsAlterNote       $08
0009703A E701                       	dc.b	smpsNoAttack, $01
0009703C E10B                       	smpsAlterNote       $0B
0009703E E701                       	dc.b	smpsNoAttack, $01
00097040 E10F                       	smpsAlterNote       $0F
00097042 E701                       	dc.b	smpsNoAttack, $01
00097044 E10B                       	smpsAlterNote       $0B
00097046 B30D                       	dc.b	nD4, $0D
00097048 E108                       	smpsAlterNote       $08
0009704A E701                       	dc.b	smpsNoAttack, $01
0009704C E105                       	smpsAlterNote       $05
0009704E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097052 E10B                       	smpsAlterNote       $0B
00097054 E701                       	dc.b	smpsNoAttack, $01
00097056 E10F                       	smpsAlterNote       $0F
00097058 E701                       	dc.b	smpsNoAttack, $01
0009705A E10E                       	smpsAlterNote       $0E
0009705C E701                       	dc.b	smpsNoAttack, $01
0009705E E108                       	smpsAlterNote       $08
00097060 E701                       	dc.b	smpsNoAttack, $01
00097062 E104                       	smpsAlterNote       $04
00097064 E701                       	dc.b	smpsNoAttack, $01
00097066 E108                       	smpsAlterNote       $08
00097068 E701                       	dc.b	smpsNoAttack, $01
0009706A E10B                       	smpsAlterNote       $0B
0009706C E701                       	dc.b	smpsNoAttack, $01
0009706E E10F                       	smpsAlterNote       $0F
00097070 E701                       	dc.b	smpsNoAttack, $01
00097072 E10B                       	smpsAlterNote       $0B
00097074 E701                       	dc.b	smpsNoAttack, $01
00097076 E105                       	smpsAlterNote       $05
00097078 E701                       	dc.b	smpsNoAttack, $01
0009707A E104                       	smpsAlterNote       $04
0009707C E701                       	dc.b	smpsNoAttack, $01
0009707E E108                       	smpsAlterNote       $08
00097080 E701                       	dc.b	smpsNoAttack, $01
00097082 E10E                       	smpsAlterNote       $0E
00097084 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097088 E10B                       	smpsAlterNote       $0B
0009708A 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009708E E108                       	smpsAlterNote       $08
00097090 E701                       	dc.b	smpsNoAttack, $01
00097092 E104                       	smpsAlterNote       $04
00097094 E701                       	dc.b	smpsNoAttack, $01
00097096 E108                       	smpsAlterNote       $08
00097098 E701                       	dc.b	smpsNoAttack, $01
0009709A E10B                       	smpsAlterNote       $0B
0009709C E701                       	dc.b	smpsNoAttack, $01
000970A0 E0C0                       	smpsPan             panCenter, $00
000970A2 E601                       	smpsAlterVol        $01
000970A4 E108                       	smpsAlterNote       $08
000970A6 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000970B2 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000970BA E080                       	smpsPan             panLeft, $00
000970BC 07                         	dc.b	$07
000970BD E6FF                       	smpsAlterVol        $FF
000970BF E10D                       	smpsAlterNote       $0D
000970C1 B60D                       	dc.b	nF4, $0D
000970C3 E10A                       	smpsAlterNote       $0A
000970C5 E701                       	dc.b	smpsNoAttack, $01
000970C7 E106                       	smpsAlterNote       $06
000970C9 E701                       	dc.b	smpsNoAttack, $01
000970CB E10A                       	smpsAlterNote       $0A
000970CD E701                       	dc.b	smpsNoAttack, $01
000970CF E110                       	smpsAlterNote       $10
000970D1 E701                       	dc.b	smpsNoAttack, $01
000970D3 E111                       	smpsAlterNote       $11
000970D5 E701                       	dc.b	smpsNoAttack, $01
000970D7 E10D                       	smpsAlterNote       $0D
000970D9 E701                       	dc.b	smpsNoAttack, $01
000970DB E107                       	smpsAlterNote       $07
000970DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970E1 E10A                       	smpsAlterNote       $0A
000970E3 E701                       	dc.b	smpsNoAttack, $01
000970E5 E110                       	smpsAlterNote       $10
000970E7 E701                       	dc.b	smpsNoAttack, $01
000970E9 E111                       	smpsAlterNote       $11
000970EB 8001                       	dc.b	nRst, $01
000970ED E10D                       	smpsAlterNote       $0D
000970EF B80D                       	dc.b	nG4, $0D
000970F1 E10A                       	smpsAlterNote       $0A
000970F3 E701                       	dc.b	smpsNoAttack, $01
000970F5 E106                       	smpsAlterNote       $06
000970F7 E701                       	dc.b	smpsNoAttack, $01
000970F9 E10A                       	smpsAlterNote       $0A
000970FB E701                       	dc.b	smpsNoAttack, $01
000970FD E110                       	smpsAlterNote       $10
000970FF E701                       	dc.b	smpsNoAttack, $01
00097101 E111                       	smpsAlterNote       $11
00097103 E701                       	dc.b	smpsNoAttack, $01
00097105 E10D                       	smpsAlterNote       $0D
00097107 E701                       	dc.b	smpsNoAttack, $01
00097109 E107                       	smpsAlterNote       $07
0009710B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009710F E10D                       	smpsAlterNote       $0D
00097111 E701                       	dc.b	smpsNoAttack, $01
00097113 E110                       	smpsAlterNote       $10
00097115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097119 E10A                       	smpsAlterNote       $0A
0009711B E701                       	dc.b	smpsNoAttack, $01
0009711D E106                       	smpsAlterNote       $06
0009711F E701                       	dc.b	smpsNoAttack, $01
00097121 E107                       	smpsAlterNote       $07
00097123 E701                       	dc.b	smpsNoAttack, $01
00097125 E10D                       	smpsAlterNote       $0D
00097127 E701                       	dc.b	smpsNoAttack, $01
00097129 E111                       	smpsAlterNote       $11
0009712B E701                       	dc.b	smpsNoAttack, $01
0009712D E10D                       	smpsAlterNote       $0D
0009712F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097133 E10F                       	smpsAlterNote       $0F
00097135 BA0D                       	dc.b	nA4, $0D
00097137 E109                       	smpsAlterNote       $09
00097139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009713D E10C                       	smpsAlterNote       $0C
0009713F E701                       	dc.b	smpsNoAttack, $01
00097141 E112                       	smpsAlterNote       $12
00097143 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097147 E10C                       	smpsAlterNote       $0C
00097149 E701                       	dc.b	smpsNoAttack, $01
0009714B E109                       	smpsAlterNote       $09
0009714D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097151 E10F                       	smpsAlterNote       $0F
00097153 E701                       	dc.b	smpsNoAttack, $01
00097155 E113                       	smpsAlterNote       $13
00097157 E701                       	dc.b	smpsNoAttack, $01
00097159 E112                       	smpsAlterNote       $12
0009715B E701                       	dc.b	smpsNoAttack, $01
0009715D E10C                       	smpsAlterNote       $0C
0009715F E701                       	dc.b	smpsNoAttack, $01
00097161 E108                       	smpsAlterNote       $08
00097163 E701                       	dc.b	smpsNoAttack, $01
00097165 E10C                       	smpsAlterNote       $0C
00097167 E701                       	dc.b	smpsNoAttack, $01
00097169 E10F                       	smpsAlterNote       $0F
0009716B E701                       	dc.b	smpsNoAttack, $01
0009716D E113                       	smpsAlterNote       $13
0009716F E701                       	dc.b	smpsNoAttack, $01
00097171 E10F                       	smpsAlterNote       $0F
00097173 E701                       	dc.b	smpsNoAttack, $01
00097175 E109                       	smpsAlterNote       $09
00097177 E701                       	dc.b	smpsNoAttack, $01
00097179 E108                       	smpsAlterNote       $08
0009717B E701                       	dc.b	smpsNoAttack, $01
0009717D E10C                       	smpsAlterNote       $0C
0009717F E701                       	dc.b	smpsNoAttack, $01
00097181 E112                       	smpsAlterNote       $12
00097183 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097187 E10F                       	smpsAlterNote       $0F
00097189 E701                       	dc.b	smpsNoAttack, $01
0009718B E109                       	smpsAlterNote       $09
0009718D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097191 E10F                       	smpsAlterNote       $0F
00097193 E701                       	dc.b	smpsNoAttack, $01
00097195 E112                       	smpsAlterNote       $12
00097197 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009719B E10C                       	smpsAlterNote       $0C
0009719D E701                       	dc.b	smpsNoAttack, $01
0009719F E108                       	smpsAlterNote       $08
000971A1 E701                       	dc.b	smpsNoAttack, $01
000971A3 E109                       	smpsAlterNote       $09
000971A5 E701                       	dc.b	smpsNoAttack, $01
000971A7 E10C                       	smpsAlterNote       $0C
000971A9 B50A                       	dc.b	nE4, $0A
000971AB E10D                       	smpsAlterNote       $0D
000971AD B60E                       	dc.b	nF4, $0E
000971AF E107                       	smpsAlterNote       $07
000971B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971B5 E10D                       	smpsAlterNote       $0D
000971B7 E701                       	dc.b	smpsNoAttack, $01
000971B9 E110                       	smpsAlterNote       $10
000971BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971BF E10A                       	smpsAlterNote       $0A
000971C1 E701                       	dc.b	smpsNoAttack, $01
000971C3 E106                       	smpsAlterNote       $06
000971C5 E701                       	dc.b	smpsNoAttack, $01
000971C7 E107                       	smpsAlterNote       $07
000971C9 E701                       	dc.b	smpsNoAttack, $01
000971CB E10D                       	smpsAlterNote       $0D
000971CD E701                       	dc.b	smpsNoAttack, $01
000971CF E111                       	smpsAlterNote       $11
000971D1 E701                       	dc.b	smpsNoAttack, $01
000971D3 E10D                       	smpsAlterNote       $0D
000971D5 B80D                       	dc.b	nG4, $0D
000971D7 E10A                       	smpsAlterNote       $0A
000971D9 E701                       	dc.b	smpsNoAttack, $01
000971DB E107                       	smpsAlterNote       $07
000971DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971E1 E10D                       	smpsAlterNote       $0D
000971E3 E701                       	dc.b	smpsNoAttack, $01
000971E5 E111                       	smpsAlterNote       $11
000971E7 E701                       	dc.b	smpsNoAttack, $01
000971E9 E110                       	smpsAlterNote       $10
000971EB E701                       	dc.b	smpsNoAttack, $01
000971ED E10A                       	smpsAlterNote       $0A
000971EF E701                       	dc.b	smpsNoAttack, $01
000971F1 E106                       	smpsAlterNote       $06
000971F3 E701                       	dc.b	smpsNoAttack, $01
000971F5 E10A                       	smpsAlterNote       $0A
000971F7 E701                       	dc.b	smpsNoAttack, $01
000971F9 E10D                       	smpsAlterNote       $0D
000971FB E701                       	dc.b	smpsNoAttack, $01
000971FD E111                       	smpsAlterNote       $11
000971FF E701                       	dc.b	smpsNoAttack, $01
00097201 E10D                       	smpsAlterNote       $0D
00097203 E701                       	dc.b	smpsNoAttack, $01
00097205 E107                       	smpsAlterNote       $07
00097207 E701                       	dc.b	smpsNoAttack, $01
00097209 E106                       	smpsAlterNote       $06
0009720B E701                       	dc.b	smpsNoAttack, $01
0009720D E10A                       	smpsAlterNote       $0A
0009720F E701                       	dc.b	smpsNoAttack, $01
00097211 E110                       	smpsAlterNote       $10
00097213 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097217 E10D                       	smpsAlterNote       $0D
00097219 E701                       	dc.b	smpsNoAttack, $01
0009721B E10F                       	smpsAlterNote       $0F
0009721D BA0D                       	dc.b	nA4, $0D
0009721F E10C                       	smpsAlterNote       $0C
00097221 E701                       	dc.b	smpsNoAttack, $01
00097223 E108                       	smpsAlterNote       $08
00097225 E701                       	dc.b	smpsNoAttack, $01
00097227 E109                       	smpsAlterNote       $09
00097229 E701                       	dc.b	smpsNoAttack, $01
0009722B E10F                       	smpsAlterNote       $0F
0009722D E701                       	dc.b	smpsNoAttack, $01
0009722F E113                       	smpsAlterNote       $13
00097231 E701                       	dc.b	smpsNoAttack, $01
00097233 E10F                       	smpsAlterNote       $0F
00097235 E701                       	dc.b	smpsNoAttack, $01
00097237 E10C                       	smpsAlterNote       $0C
00097239 E701                       	dc.b	smpsNoAttack, $01
0009723B E108                       	smpsAlterNote       $08
0009723D E701                       	dc.b	smpsNoAttack, $01
0009723F E10C                       	smpsAlterNote       $0C
00097241 E701                       	dc.b	smpsNoAttack, $01
00097243 E112                       	smpsAlterNote       $12
00097245 E701                       	dc.b	smpsNoAttack, $01
00097247 E113                       	smpsAlterNote       $13
00097249 E701                       	dc.b	smpsNoAttack, $01
0009724B E10F                       	smpsAlterNote       $0F
0009724D E701                       	dc.b	smpsNoAttack, $01
0009724F E109                       	smpsAlterNote       $09
00097251 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097255 E10C                       	smpsAlterNote       $0C
00097257 E701                       	dc.b	smpsNoAttack, $01
00097259 E112                       	smpsAlterNote       $12
0009725B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009725F E10C                       	smpsAlterNote       $0C
00097261 E701                       	dc.b	smpsNoAttack, $01
00097263 E109                       	smpsAlterNote       $09
00097265 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097269 E10F                       	smpsAlterNote       $0F
0009726B E701                       	dc.b	smpsNoAttack, $01
0009726D E113                       	smpsAlterNote       $13
0009726F E701                       	dc.b	smpsNoAttack, $01
00097271 E112                       	smpsAlterNote       $12
00097273 E701                       	dc.b	smpsNoAttack, $01
00097275 E10C                       	smpsAlterNote       $0C
00097277 E701                       	dc.b	smpsNoAttack, $01
00097279 E109                       	smpsAlterNote       $09
0009727B 8001                       	dc.b	nRst, $01
0009727D E10D                       	smpsAlterNote       $0D
0009727F B60A                       	dc.b	nF4, $0A
00097281 E10C                       	smpsAlterNote       $0C
00097283 B506 8001                  	dc.b	nE4, $06, nRst, $01
00097287 E10B                       	smpsAlterNote       $0B
00097289 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009728D E10C                       	smpsAlterNote       $0C
0009728F B503                       	dc.b	nE4, $03
00097291 E10D                       	smpsAlterNote       $0D
00097293 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009729D E10C                       	smpsAlterNote       $0C
0009729F E701                       	dc.b	smpsNoAttack, $01
000972A1 E108                       	smpsAlterNote       $08
000972A3 E701                       	dc.b	smpsNoAttack, $01
000972A5 E10C                       	smpsAlterNote       $0C
000972A7 E701                       	dc.b	smpsNoAttack, $01
000972A9 E112                       	smpsAlterNote       $12
000972AB E701                       	dc.b	smpsNoAttack, $01
000972AD E113                       	smpsAlterNote       $13
000972AF E701                       	dc.b	smpsNoAttack, $01
000972B1 E10F                       	smpsAlterNote       $0F
000972B3 E701                       	dc.b	smpsNoAttack, $01
000972B5 E109                       	smpsAlterNote       $09
000972B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972BB E10C                       	smpsAlterNote       $0C
000972BD E701                       	dc.b	smpsNoAttack, $01
000972BF E112                       	smpsAlterNote       $12
000972C1 E701                       	dc.b	smpsNoAttack, $01
000972C3 E113                       	smpsAlterNote       $13
000972C5 8001                       	dc.b	nRst, $01
000972C7 E10D                       	smpsAlterNote       $0D
000972C9 C20D                       	dc.b	nF5, $0D
000972CB E10A                       	smpsAlterNote       $0A
000972CD E701                       	dc.b	smpsNoAttack, $01
000972CF E106                       	smpsAlterNote       $06
000972D1 E701                       	dc.b	smpsNoAttack, $01
000972D3 E10A                       	smpsAlterNote       $0A
000972D5 E701                       	dc.b	smpsNoAttack, $01
000972D7 E110                       	smpsAlterNote       $10
000972D9 E701                       	dc.b	smpsNoAttack, $01
000972DB E111                       	smpsAlterNote       $11
000972DD E701                       	dc.b	smpsNoAttack, $01
000972DF E10D                       	smpsAlterNote       $0D
000972E1 E701                       	dc.b	smpsNoAttack, $01
000972E3 E107                       	smpsAlterNote       $07
000972E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972E9 E10A                       	smpsAlterNote       $0A
000972EB E701                       	dc.b	smpsNoAttack, $01
000972ED E110                       	smpsAlterNote       $10
000972EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972F3 E10A                       	smpsAlterNote       $0A
000972F5 E701                       	dc.b	smpsNoAttack, $01
000972F7 E107                       	smpsAlterNote       $07
000972F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972FD E10D                       	smpsAlterNote       $0D
000972FF E701                       	dc.b	smpsNoAttack, $01
00097301 E111                       	smpsAlterNote       $11
00097303 E701                       	dc.b	smpsNoAttack, $01
00097305 E110                       	smpsAlterNote       $10
00097307 E701                       	dc.b	smpsNoAttack, $01
00097309 E10A                       	smpsAlterNote       $0A
0009730B E701                       	dc.b	smpsNoAttack, $01
0009730D E106                       	smpsAlterNote       $06
0009730F E701                       	dc.b	smpsNoAttack, $01
00097311 E10A                       	smpsAlterNote       $0A
00097313 E701                       	dc.b	smpsNoAttack, $01
00097315 E10D                       	smpsAlterNote       $0D
00097317 E701                       	dc.b	smpsNoAttack, $01
00097319 E111                       	smpsAlterNote       $11
0009731B E701                       	dc.b	smpsNoAttack, $01
0009731D E10D                       	smpsAlterNote       $0D
0009731F E701                       	dc.b	smpsNoAttack, $01
00097321 E107                       	smpsAlterNote       $07
00097323 E701                       	dc.b	smpsNoAttack, $01
00097325 E106                       	smpsAlterNote       $06
00097327 E701                       	dc.b	smpsNoAttack, $01
00097329 E10A                       	smpsAlterNote       $0A
0009732B E701                       	dc.b	smpsNoAttack, $01
0009732D E110                       	smpsAlterNote       $10
0009732F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097333 E10D                       	smpsAlterNote       $0D
00097335 E701                       	dc.b	smpsNoAttack, $01
00097337 E107                       	smpsAlterNote       $07
00097339 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009733D E10D                       	smpsAlterNote       $0D
0009733F E701                       	dc.b	smpsNoAttack, $01
00097341 E110                       	smpsAlterNote       $10
00097343 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097347 E10A                       	smpsAlterNote       $0A
00097349 E701                       	dc.b	smpsNoAttack, $01
0009734B E106                       	smpsAlterNote       $06
0009734D E701                       	dc.b	smpsNoAttack, $01
0009734F E107                       	smpsAlterNote       $07
00097351 E701                       	dc.b	smpsNoAttack, $01
00097353 E10D                       	smpsAlterNote       $0D
00097355 E701                       	dc.b	smpsNoAttack, $01
00097357 E111                       	smpsAlterNote       $11
00097359 E701                       	dc.b	smpsNoAttack, $01
0009735B E10D                       	smpsAlterNote       $0D
0009735D E701                       	dc.b	smpsNoAttack, $01
0009735F E10A                       	smpsAlterNote       $0A
00097361 E701                       	dc.b	smpsNoAttack, $01
00097363 E107                       	smpsAlterNote       $07
00097365 8001                       	dc.b	nRst, $01
00097367 E10D                       	smpsAlterNote       $0D
00097369 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009736F E601                       	smpsAlterVol        $01
00097371 E110                       	smpsAlterNote       $10
00097373 BB0D                       	dc.b	nBb4, $0D
00097375 E10A                       	smpsAlterNote       $0A
00097377 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009737B E110                       	smpsAlterNote       $10
0009737D E701                       	dc.b	smpsNoAttack, $01
0009737F E113                       	smpsAlterNote       $13
00097381 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097385 E10D                       	smpsAlterNote       $0D
00097387 E701                       	dc.b	smpsNoAttack, $01
00097389 E109                       	smpsAlterNote       $09
0009738B E701                       	dc.b	smpsNoAttack, $01
0009738D E10A                       	smpsAlterNote       $0A
0009738F E701                       	dc.b	smpsNoAttack, $01
00097391 E110                       	smpsAlterNote       $10
00097393 E701                       	dc.b	smpsNoAttack, $01
00097395 E114                       	smpsAlterNote       $14
00097397 E701                       	dc.b	smpsNoAttack, $01
00097399 E110                       	smpsAlterNote       $10
0009739B E701                       	dc.b	smpsNoAttack, $01
0009739D E10D                       	smpsAlterNote       $0D
0009739F E701                       	dc.b	smpsNoAttack, $01
000973A1 E109                       	smpsAlterNote       $09
000973A3 E701                       	dc.b	smpsNoAttack, $01
000973A5 E10A                       	smpsAlterNote       $0A
000973A7 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000973AB E107                       	smpsAlterNote       $07
000973AD E701                       	dc.b	smpsNoAttack, $01
000973AF E103                       	smpsAlterNote       $03
000973B1 E701                       	dc.b	smpsNoAttack, $01
000973B3 E107                       	smpsAlterNote       $07
000973B5 E701                       	dc.b	smpsNoAttack, $01
000973B7 E10D                       	smpsAlterNote       $0D
000973B9 E701                       	dc.b	smpsNoAttack, $01
000973BB E10E                       	smpsAlterNote       $0E
000973BD E701                       	dc.b	smpsNoAttack, $01
000973BF E10A                       	smpsAlterNote       $0A
000973C1 E701                       	dc.b	smpsNoAttack, $01
000973C3 E104                       	smpsAlterNote       $04
000973C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973C9 E107                       	smpsAlterNote       $07
000973CB E701                       	dc.b	smpsNoAttack, $01
000973CD E10D                       	smpsAlterNote       $0D
000973CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973D3 E107                       	smpsAlterNote       $07
000973D5 E701                       	dc.b	smpsNoAttack, $01
000973D7 E104                       	smpsAlterNote       $04
000973D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973DD E10B                       	smpsAlterNote       $0B
000973DF BF0D                       	dc.b	nD5, $0D
000973E1 E108                       	smpsAlterNote       $08
000973E3 E701                       	dc.b	smpsNoAttack, $01
000973E5 E105                       	smpsAlterNote       $05
000973E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973EB E10B                       	smpsAlterNote       $0B
000973ED E701                       	dc.b	smpsNoAttack, $01
000973EF E10F                       	smpsAlterNote       $0F
000973F1 E701                       	dc.b	smpsNoAttack, $01
000973F3 E10E                       	smpsAlterNote       $0E
000973F5 E701                       	dc.b	smpsNoAttack, $01
000973F7 E108                       	smpsAlterNote       $08
000973F9 E701                       	dc.b	smpsNoAttack, $01
000973FB E104                       	smpsAlterNote       $04
000973FD E701                       	dc.b	smpsNoAttack, $01
000973FF E108                       	smpsAlterNote       $08
00097401 E701                       	dc.b	smpsNoAttack, $01
00097403 E10B                       	smpsAlterNote       $0B
00097405 E701                       	dc.b	smpsNoAttack, $01
00097407 E10F                       	smpsAlterNote       $0F
00097409 E701                       	dc.b	smpsNoAttack, $01
0009740B E10B                       	smpsAlterNote       $0B
0009740D E701                       	dc.b	smpsNoAttack, $01
0009740F E105                       	smpsAlterNote       $05
00097411 E701                       	dc.b	smpsNoAttack, $01
00097413 E104                       	smpsAlterNote       $04
00097415 E701                       	dc.b	smpsNoAttack, $01
00097417 E105                       	smpsAlterNote       $05
00097419 8001                       	dc.b	nRst, $01
0009741B E10C                       	smpsAlterNote       $0C
0009741D C10C                       	dc.b	nE5, $0C
0009741F E10D                       	smpsAlterNote       $0D
00097421 C201                       	dc.b	nF5, $01
00097423 E10E                       	smpsAlterNote       $0E
00097425 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00097429 E10D                       	smpsAlterNote       $0D
0009742B C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009742F E10A                       	smpsAlterNote       $0A
00097431 E701                       	dc.b	smpsNoAttack, $01
00097433 E106                       	smpsAlterNote       $06
00097435 E701                       	dc.b	smpsNoAttack, $01
00097437 E10A                       	smpsAlterNote       $0A
00097439 E701                       	dc.b	smpsNoAttack, $01
0009743B E10D                       	smpsAlterNote       $0D
0009743D E701                       	dc.b	smpsNoAttack, $01
0009743F E111                       	smpsAlterNote       $11
00097441 E701                       	dc.b	smpsNoAttack, $01
00097443 E10D                       	smpsAlterNote       $0D
00097445 E701                       	dc.b	smpsNoAttack, $01
00097447 E107                       	smpsAlterNote       $07
00097449 E701                       	dc.b	smpsNoAttack, $01
0009744B E106                       	smpsAlterNote       $06
0009744D E701                       	dc.b	smpsNoAttack, $01
0009744F E10A                       	smpsAlterNote       $0A
00097451 E701                       	dc.b	smpsNoAttack, $01
00097453 E110                       	smpsAlterNote       $10
00097455 E701                       	dc.b	smpsNoAttack, $01
00097457 E111                       	smpsAlterNote       $11
00097459 8001                       	dc.b	nRst, $01
0009745B E10D                       	smpsAlterNote       $0D
0009745D C40D                       	dc.b	nG5, $0D
0009745F E10A                       	smpsAlterNote       $0A
00097461 E701                       	dc.b	smpsNoAttack, $01
00097463 E106                       	smpsAlterNote       $06
00097465 E701                       	dc.b	smpsNoAttack, $01
00097467 E10A                       	smpsAlterNote       $0A
00097469 E701                       	dc.b	smpsNoAttack, $01
0009746B E10D                       	smpsAlterNote       $0D
0009746D E701                       	dc.b	smpsNoAttack, $01
0009746F E10C                       	smpsAlterNote       $0C
00097471 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009747D 8001                       	dc.b	nRst, $01
0009747F E10D                       	smpsAlterNote       $0D
00097481 C20D                       	dc.b	nF5, $0D
00097483 E10A                       	smpsAlterNote       $0A
00097485 E701                       	dc.b	smpsNoAttack, $01
00097487 E106                       	smpsAlterNote       $06
00097489 E701                       	dc.b	smpsNoAttack, $01
0009748B E10A                       	smpsAlterNote       $0A
0009748D E701                       	dc.b	smpsNoAttack, $01
0009748F E110                       	smpsAlterNote       $10
00097491 E701                       	dc.b	smpsNoAttack, $01
00097493 E111                       	smpsAlterNote       $11
00097495 E701                       	dc.b	smpsNoAttack, $01
00097497 E10D                       	smpsAlterNote       $0D
00097499 E701                       	dc.b	smpsNoAttack, $01
0009749B E107                       	smpsAlterNote       $07
0009749D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974A1 E10A                       	smpsAlterNote       $0A
000974A3 E701                       	dc.b	smpsNoAttack, $01
000974A5 E110                       	smpsAlterNote       $10
000974A7 E701                       	dc.b	smpsNoAttack, $01
000974A9 E111                       	smpsAlterNote       $11
000974AB 8001                       	dc.b	nRst, $01
000974AD E10F                       	smpsAlterNote       $0F
000974AF C60A                       	dc.b	nA5, $0A
000974B1 E10D                       	smpsAlterNote       $0D
000974B3 C406 8001                  	dc.b	nG5, $06, nRst, $01
000974B7 E10C                       	smpsAlterNote       $0C
000974B9 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000974C5 8001                       	dc.b	nRst, $01
000974C7 E10D                       	smpsAlterNote       $0D
000974C9 C20D                       	dc.b	nF5, $0D
000974CB E107                       	smpsAlterNote       $07
000974CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974D1 E10A                       	smpsAlterNote       $0A
000974D3 E701                       	dc.b	smpsNoAttack, $01
000974D5 E110                       	smpsAlterNote       $10
000974D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974DB E10A                       	smpsAlterNote       $0A
000974DD E701                       	dc.b	smpsNoAttack, $01
000974DF E107                       	smpsAlterNote       $07
000974E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974E5 E10D                       	smpsAlterNote       $0D
000974E7 E701                       	dc.b	smpsNoAttack, $01
000974E9 E111                       	smpsAlterNote       $11
000974EB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000974EF E10D                       	smpsAlterNote       $0D
000974F1 C40D                       	dc.b	nG5, $0D
000974F3 E107                       	smpsAlterNote       $07
000974F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974F9 E10A                       	smpsAlterNote       $0A
000974FB E701                       	dc.b	smpsNoAttack, $01
000974FD E10D                       	smpsAlterNote       $0D
000974FF 8001                       	dc.b	nRst, $01
00097501 E10C                       	smpsAlterNote       $0C
00097503 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009750F E10D                       	smpsAlterNote       $0D
00097511 C20E                       	dc.b	nF5, $0E
00097513 E107                       	smpsAlterNote       $07
00097515 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097519 E10D                       	smpsAlterNote       $0D
0009751B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097521 E0C0                       	smpsPan             panCenter, $00
00097523 E603                       	smpsAlterVol        $03
00097525 E108                       	smpsAlterNote       $08
00097527 B406                       	dc.b	nEb4, $06
00097529 E10C                       	smpsAlterNote       $0C
0009752B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009752F E108                       	smpsAlterNote       $08
00097531 B403                       	dc.b	nEb4, $03
00097533 E109                       	smpsAlterNote       $09
00097535 B803 8001                  	dc.b	nG4, $03, nRst, $01
00097539 E10C                       	smpsAlterNote       $0C
0009753B BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00097543 03                         	dc.b	$03
00097544 E6FD                       	smpsAlterVol        $FD
00097546 F6F1 F4                    	smpsJump            music84_Jump00
00097549                            
00097549                            ; PSG1 Data
00097549                            music84_PSG1:
00097549 E1FD                       	smpsAlterNote       $FD
0009754B EC04                       	smpsPSGAlterVol     $04
0009754D 9203                       	dc.b	nF1, $03
0009754F E1FE                       	smpsAlterNote       $FE
00097551 9603                       	dc.b	nA1, $03
00097553 EC04                       	smpsPSGAlterVol     $04
00097555 E701                       	dc.b	smpsNoAttack, $01
00097557 E1FF                       	smpsAlterNote       $FF
00097559 ECFC                       	smpsPSGAlterVol     $FC
0009755B 9B03                       	dc.b	nD2, $03
0009755D E1FD                       	smpsAlterNote       $FD
0009755F 9403                       	dc.b	nG1, $03
00097561 EC04                       	smpsPSGAlterVol     $04
00097563 E701                       	dc.b	smpsNoAttack, $01
00097565 E1FE                       	smpsAlterNote       $FE
00097567 ECFC                       	smpsPSGAlterVol     $FC
00097569 9703                       	dc.b	nBb1, $03
0009756B E1FF                       	smpsAlterNote       $FF
0009756D 9B03                       	dc.b	nD2, $03
0009756F EC04                       	smpsPSGAlterVol     $04
00097571 E701                       	dc.b	smpsNoAttack, $01
00097573 E1FE                       	smpsAlterNote       $FE
00097575 ECFC                       	smpsPSGAlterVol     $FC
00097577 A002                       	dc.b	nG2, $02
00097579 EC04                       	smpsPSGAlterVol     $04
0009757B E701                       	dc.b	smpsNoAttack, $01
0009757D E1FF                       	smpsAlterNote       $FF
0009757F ECFC                       	smpsPSGAlterVol     $FC
00097581 A203                       	dc.b	nA2, $03
00097583 EC0B                       	smpsPSGAlterVol     $0B
00097585 800A                       	dc.b	nRst, $0A
00097587 E105                       	smpsAlterNote       $05
00097589 01                         	dc.b	$01
0009758A E1FC                       	smpsAlterNote       $FC
0009758C 01                         	dc.b	$01
0009758D E105                       	smpsAlterNote       $05
0009758F 01                         	dc.b	$01
00097590 E1FD                       	smpsAlterNote       $FD
00097592 01                         	dc.b	$01
00097593 E105                       	smpsAlterNote       $05
00097595 01                         	dc.b	$01
00097596 E1FD                       	smpsAlterNote       $FD
00097598 01                         	dc.b	$01
00097599 E1FA                       	smpsAlterNote       $FA
0009759B 01                         	dc.b	$01
0009759C E1FC                       	smpsAlterNote       $FC
0009759E 01                         	dc.b	$01
0009759F E105                       	smpsAlterNote       $05
000975A1 01                         	dc.b	$01
000975A2 E108                       	smpsAlterNote       $08
000975A4 0101                       	dc.b	$01, $01
000975A6 E105                       	smpsAlterNote       $05
000975A8 01                         	dc.b	$01
000975A9 E1FA                       	smpsAlterNote       $FA
000975AB 0101                       	dc.b	$01, $01
000975AD E1FD                       	smpsAlterNote       $FD
000975AF 01                         	dc.b	$01
000975B0 E105                       	smpsAlterNote       $05
000975B2 01                         	dc.b	$01
000975B3 E108                       	smpsAlterNote       $08
000975B5 01                         	dc.b	$01
000975B6 E105                       	smpsAlterNote       $05
000975B8 01                         	dc.b	$01
000975B9 E1FC                       	smpsAlterNote       $FC
000975BB 01                         	dc.b	$01
000975BC E105                       	smpsAlterNote       $05
000975BE 01                         	dc.b	$01
000975BF E1FD                       	smpsAlterNote       $FD
000975C1 01                         	dc.b	$01
000975C2                            
000975C2                            music84_Jump07:
000975C2 E105                       	smpsAlterNote       $05
000975C4 8001                       	dc.b	nRst, $01
000975C6 E1FD                       	smpsAlterNote       $FD
000975C8 01                         	dc.b	$01
000975C9 E1FA                       	smpsAlterNote       $FA
000975CB 01                         	dc.b	$01
000975CC E1FC                       	smpsAlterNote       $FC
000975CE 01                         	dc.b	$01
000975CF E1FD                       	smpsAlterNote       $FD
000975D1 ECF5                       	smpsPSGAlterVol     $F5
000975D3 9206                       	dc.b	nF1, $06
000975D5 EC04                       	smpsPSGAlterVol     $04
000975D7 E701                       	dc.b	smpsNoAttack, $01
000975D9 EC07                       	smpsPSGAlterVol     $07
000975DB 8003                       	dc.b	nRst, $03
000975DD ECF5                       	smpsPSGAlterVol     $F5
000975DF 9206                       	dc.b	nF1, $06
000975E1 EC04                       	smpsPSGAlterVol     $04
000975E3 E701                       	dc.b	smpsNoAttack, $01
000975E5 EC07                       	smpsPSGAlterVol     $07
000975E7 8006                       	dc.b	nRst, $06
000975E9 E100                       	smpsAlterNote       $00
000975EB 01                         	dc.b	$01
000975EC E104                       	smpsAlterNote       $04
000975EE 01                         	dc.b	$01
000975EF E100                       	smpsAlterNote       $00
000975F1 01                         	dc.b	$01
000975F2 E1FB                       	smpsAlterNote       $FB
000975F4 01                         	dc.b	$01
000975F5 E1FD                       	smpsAlterNote       $FD
000975F7 ECF5                       	smpsPSGAlterVol     $F5
000975F9 9406                       	dc.b	nG1, $06
000975FB EC04                       	smpsPSGAlterVol     $04
000975FD E701                       	dc.b	smpsNoAttack, $01
000975FF EC07                       	smpsPSGAlterVol     $07
00097601 8003                       	dc.b	nRst, $03
00097603 ECF5                       	smpsPSGAlterVol     $F5
00097605 9407                       	dc.b	nG1, $07
00097607 EC0B                       	smpsPSGAlterVol     $0B
00097609 8006                       	dc.b	nRst, $06
0009760B E100                       	smpsAlterNote       $00
0009760D 01                         	dc.b	$01
0009760E E103                       	smpsAlterNote       $03
00097610 0101                       	dc.b	$01, $01
00097612 E1FD                       	smpsAlterNote       $FD
00097614 01                         	dc.b	$01
00097615 ECF5                       	smpsPSGAlterVol     $F5
00097617 9207                       	dc.b	nF1, $07
00097619 EC0B                       	smpsPSGAlterVol     $0B
0009761B 8004                       	dc.b	nRst, $04
0009761D ECF5                       	smpsPSGAlterVol     $F5
0009761F 9206                       	dc.b	nF1, $06
00097621 EC04                       	smpsPSGAlterVol     $04
00097623 E701                       	dc.b	smpsNoAttack, $01
00097625 EC07                       	smpsPSGAlterVol     $07
00097627 8006                       	dc.b	nRst, $06
00097629 E103                       	smpsAlterNote       $03
0009762B 01                         	dc.b	$01
0009762C E104                       	smpsAlterNote       $04
0009762E 01                         	dc.b	$01
0009762F E100                       	smpsAlterNote       $00
00097631 01                         	dc.b	$01
00097632 E1FA                       	smpsAlterNote       $FA
00097634 01                         	dc.b	$01
00097635 E1FD                       	smpsAlterNote       $FD
00097637 ECF5                       	smpsPSGAlterVol     $F5
00097639 9206                       	dc.b	nF1, $06
0009763B EC04                       	smpsPSGAlterVol     $04
0009763D E701                       	dc.b	smpsNoAttack, $01
0009763F EC07                       	smpsPSGAlterVol     $07
00097641 8003                       	dc.b	nRst, $03
00097643 ECF5                       	smpsPSGAlterVol     $F5
00097645 9106                       	dc.b	nE1, $06
00097647 EC04                       	smpsPSGAlterVol     $04
00097649 E701                       	dc.b	smpsNoAttack, $01
0009764B EC07                       	smpsPSGAlterVol     $07
0009764D 8006                       	dc.b	nRst, $06
0009764F E100                       	smpsAlterNote       $00
00097651 01                         	dc.b	$01
00097652 E104                       	smpsAlterNote       $04
00097654 01                         	dc.b	$01
00097655 E100                       	smpsAlterNote       $00
00097657 01                         	dc.b	$01
00097658 E1FD                       	smpsAlterNote       $FD
0009765A 01                         	dc.b	$01
0009765B ECF5                       	smpsPSGAlterVol     $F5
0009765D 9206                       	dc.b	nF1, $06
0009765F EC04                       	smpsPSGAlterVol     $04
00097661 E701                       	dc.b	smpsNoAttack, $01
00097663 EC07                       	smpsPSGAlterVol     $07
00097665 8003                       	dc.b	nRst, $03
00097667 ECF5                       	smpsPSGAlterVol     $F5
00097669 9207                       	dc.b	nF1, $07
0009766B EC0B                       	smpsPSGAlterVol     $0B
0009766D 8007                       	dc.b	nRst, $07
0009766F E103                       	smpsAlterNote       $03
00097671 0101                       	dc.b	$01, $01
00097673 E1FD                       	smpsAlterNote       $FD
00097675 01                         	dc.b	$01
00097676 E1FB                       	smpsAlterNote       $FB
00097678 01                         	dc.b	$01
00097679 E1FD                       	smpsAlterNote       $FD
0009767B ECF5                       	smpsPSGAlterVol     $F5
0009767D 9406                       	dc.b	nG1, $06
0009767F EC0B                       	smpsPSGAlterVol     $0B
00097681 8004                       	dc.b	nRst, $04
00097683 ECF5                       	smpsPSGAlterVol     $F5
00097685 9406                       	dc.b	nG1, $06
00097687 EC04                       	smpsPSGAlterVol     $04
00097689 E701                       	dc.b	smpsNoAttack, $01
0009768B EC07                       	smpsPSGAlterVol     $07
0009768D 8006                       	dc.b	nRst, $06
0009768F E100                       	smpsAlterNote       $00
00097691 01                         	dc.b	$01
00097692 E104                       	smpsAlterNote       $04
00097694 01                         	dc.b	$01
00097695 E100                       	smpsAlterNote       $00
00097697 01                         	dc.b	$01
00097698 E1F9                       	smpsAlterNote       $F9
0009769A 01                         	dc.b	$01
0009769B E1FD                       	smpsAlterNote       $FD
0009769D ECF5                       	smpsPSGAlterVol     $F5
0009769F 9206                       	dc.b	nF1, $06
000976A1 EC04                       	smpsPSGAlterVol     $04
000976A3 E701                       	dc.b	smpsNoAttack, $01
000976A5 EC07                       	smpsPSGAlterVol     $07
000976A7 8003                       	dc.b	nRst, $03
000976A9 ECF5                       	smpsPSGAlterVol     $F5
000976AB 9207                       	dc.b	nF1, $07
000976AD EC0B                       	smpsPSGAlterVol     $0B
000976AF 8006                       	dc.b	nRst, $06
000976B1 E100                       	smpsAlterNote       $00
000976B3 01                         	dc.b	$01
000976B4 E104                       	smpsAlterNote       $04
000976B6 01                         	dc.b	$01
000976B7 E103                       	smpsAlterNote       $03
000976B9 01                         	dc.b	$01
000976BA E1FD                       	smpsAlterNote       $FD
000976BC 01                         	dc.b	$01
000976BD ECF5                       	smpsPSGAlterVol     $F5
000976BF 9207                       	dc.b	nF1, $07
000976C1 EC0B                       	smpsPSGAlterVol     $0B
000976C3 8004                       	dc.b	nRst, $04
000976C5 ECF5                       	smpsPSGAlterVol     $F5
000976C7 9206                       	dc.b	nF1, $06
000976C9 EC0B                       	smpsPSGAlterVol     $0B
000976CB 8007                       	dc.b	nRst, $07
000976CD E103                       	smpsAlterNote       $03
000976CF 0101                       	dc.b	$01, $01
000976D1 E100                       	smpsAlterNote       $00
000976D3 01                         	dc.b	$01
000976D4 E1FA                       	smpsAlterNote       $FA
000976D6 01                         	dc.b	$01
000976D7 E1FD                       	smpsAlterNote       $FD
000976D9 ECF5                       	smpsPSGAlterVol     $F5
000976DB 9206                       	dc.b	nF1, $06
000976DD EC04                       	smpsPSGAlterVol     $04
000976DF E701                       	dc.b	smpsNoAttack, $01
000976E1 EC07                       	smpsPSGAlterVol     $07
000976E3 8003                       	dc.b	nRst, $03
000976E5 ECF5                       	smpsPSGAlterVol     $F5
000976E7 9206                       	dc.b	nF1, $06
000976E9 EC04                       	smpsPSGAlterVol     $04
000976EB E701                       	dc.b	smpsNoAttack, $01
000976ED EC07                       	smpsPSGAlterVol     $07
000976EF 8006                       	dc.b	nRst, $06
000976F1 E100                       	smpsAlterNote       $00
000976F3 01                         	dc.b	$01
000976F4 E104                       	smpsAlterNote       $04
000976F6 01                         	dc.b	$01
000976F7 E100                       	smpsAlterNote       $00
000976F9 01                         	dc.b	$01
000976FA E1FD                       	smpsAlterNote       $FD
000976FC 01                         	dc.b	$01
000976FD ECF5                       	smpsPSGAlterVol     $F5
000976FF 9206                       	dc.b	nF1, $06
00097701 EC04                       	smpsPSGAlterVol     $04
00097703 E701                       	dc.b	smpsNoAttack, $01
00097705 EC07                       	smpsPSGAlterVol     $07
00097707 8003                       	dc.b	nRst, $03
00097709 ECF5                       	smpsPSGAlterVol     $F5
0009770B 9207                       	dc.b	nF1, $07
0009770D EC0B                       	smpsPSGAlterVol     $0B
0009770F 8007                       	dc.b	nRst, $07
00097711 E103                       	smpsAlterNote       $03
00097713 0101                       	dc.b	$01, $01
00097715 E1FD                       	smpsAlterNote       $FD
00097717 01                         	dc.b	$01
00097718 E1FA                       	smpsAlterNote       $FA
0009771A 01                         	dc.b	$01
0009771B E1FD                       	smpsAlterNote       $FD
0009771D ECF5                       	smpsPSGAlterVol     $F5
0009771F 9206                       	dc.b	nF1, $06
00097721 EC0B                       	smpsPSGAlterVol     $0B
00097723 8004                       	dc.b	nRst, $04
00097725 ECF5                       	smpsPSGAlterVol     $F5
00097727 9206                       	dc.b	nF1, $06
00097729 EC04                       	smpsPSGAlterVol     $04
0009772B E701                       	dc.b	smpsNoAttack, $01
0009772D EC07                       	smpsPSGAlterVol     $07
0009772F 8006                       	dc.b	nRst, $06
00097731 E103                       	smpsAlterNote       $03
00097733 01                         	dc.b	$01
00097734 E104                       	smpsAlterNote       $04
00097736 01                         	dc.b	$01
00097737 E100                       	smpsAlterNote       $00
00097739 01                         	dc.b	$01
0009773A E1FA                       	smpsAlterNote       $FA
0009773C 01                         	dc.b	$01
0009773D E1FD                       	smpsAlterNote       $FD
0009773F ECF5                       	smpsPSGAlterVol     $F5
00097741 9206                       	dc.b	nF1, $06
00097743 EC04                       	smpsPSGAlterVol     $04
00097745 E701                       	dc.b	smpsNoAttack, $01
00097747 EC07                       	smpsPSGAlterVol     $07
00097749 8003                       	dc.b	nRst, $03
0009774B ECF5                       	smpsPSGAlterVol     $F5
0009774D 9206                       	dc.b	nF1, $06
0009774F EC04                       	smpsPSGAlterVol     $04
00097751 E701                       	dc.b	smpsNoAttack, $01
00097753 EC07                       	smpsPSGAlterVol     $07
00097755 8006                       	dc.b	nRst, $06
00097757 E100                       	smpsAlterNote       $00
00097759 01                         	dc.b	$01
0009775A E104                       	smpsAlterNote       $04
0009775C 01                         	dc.b	$01
0009775D E103                       	smpsAlterNote       $03
0009775F 01                         	dc.b	$01
00097760 E1FD                       	smpsAlterNote       $FD
00097762 01                         	dc.b	$01
00097763 ECF5                       	smpsPSGAlterVol     $F5
00097765 9107                       	dc.b	nE1, $07
00097767 EC0B                       	smpsPSGAlterVol     $0B
00097769 8004                       	dc.b	nRst, $04
0009776B ECF5                       	smpsPSGAlterVol     $F5
0009776D 9106                       	dc.b	nE1, $06
0009776F EC0B                       	smpsPSGAlterVol     $0B
00097771 8007                       	dc.b	nRst, $07
00097773 E103                       	smpsAlterNote       $03
00097775 0101                       	dc.b	$01, $01
00097777 E100                       	smpsAlterNote       $00
00097779 01                         	dc.b	$01
0009777A E1FA                       	smpsAlterNote       $FA
0009777C 01                         	dc.b	$01
0009777D E1FD                       	smpsAlterNote       $FD
0009777F ECF5                       	smpsPSGAlterVol     $F5
00097781 9106                       	dc.b	nE1, $06
00097783 EC04                       	smpsPSGAlterVol     $04
00097785 E701                       	dc.b	smpsNoAttack, $01
00097787 EC07                       	smpsPSGAlterVol     $07
00097789 8003                       	dc.b	nRst, $03
0009778B ECF5                       	smpsPSGAlterVol     $F5
0009778D 9106                       	dc.b	nE1, $06
0009778F EC04                       	smpsPSGAlterVol     $04
00097791 E701                       	dc.b	smpsNoAttack, $01
00097793 EC07                       	smpsPSGAlterVol     $07
00097795 8006                       	dc.b	nRst, $06
00097797 E100                       	smpsAlterNote       $00
00097799 01                         	dc.b	$01
0009779A E104                       	smpsAlterNote       $04
0009779C 01                         	dc.b	$01
0009779D E100                       	smpsAlterNote       $00
0009779F 01                         	dc.b	$01
000977A0 E1FA                       	smpsAlterNote       $FA
000977A2 01                         	dc.b	$01
000977A3 E1FD                       	smpsAlterNote       $FD
000977A5 ECF5                       	smpsPSGAlterVol     $F5
000977A7 9106                       	dc.b	nE1, $06
000977A9 EC04                       	smpsPSGAlterVol     $04
000977AB E701                       	dc.b	smpsNoAttack, $01
000977AD EC07                       	smpsPSGAlterVol     $07
000977AF 8003                       	dc.b	nRst, $03
000977B1 ECF5                       	smpsPSGAlterVol     $F5
000977B3 9107 9106                  	dc.b	nE1, $07, nE1, $06
000977B7 EC04                       	smpsPSGAlterVol     $04
000977B9 E701                       	dc.b	smpsNoAttack, $01
000977BB ECFC                       	smpsPSGAlterVol     $FC
000977BD 9103 9103                  	dc.b	nE1, $03, nE1, $03
000977C1 EC04                       	smpsPSGAlterVol     $04
000977C3 E701                       	dc.b	smpsNoAttack, $01
000977C5 ECFC                       	smpsPSGAlterVol     $FC
000977C7 9106                       	dc.b	nE1, $06
000977C9 EC04                       	smpsPSGAlterVol     $04
000977CB E701                       	dc.b	smpsNoAttack, $01
000977CD EC07                       	smpsPSGAlterVol     $07
000977CF 8006                       	dc.b	nRst, $06
000977D1 E100                       	smpsAlterNote       $00
000977D3 01                         	dc.b	$01
000977D4 E104                       	smpsAlterNote       $04
000977D6 01                         	dc.b	$01
000977D7 E100                       	smpsAlterNote       $00
000977D9 01                         	dc.b	$01
000977DA E1FA                       	smpsAlterNote       $FA
000977DC 01                         	dc.b	$01
000977DD E1F9                       	smpsAlterNote       $F9
000977DF 01                         	dc.b	$01
000977E0 E1FD                       	smpsAlterNote       $FD
000977E2 01                         	dc.b	$01
000977E3 E103                       	smpsAlterNote       $03
000977E5 01                         	dc.b	$01
000977E6 E104                       	smpsAlterNote       $04
000977E8 01                         	dc.b	$01
000977E9 E100                       	smpsAlterNote       $00
000977EB 01                         	dc.b	$01
000977EC E1FA                       	smpsAlterNote       $FA
000977EE 0101                       	dc.b	$01, $01
000977F0 E1FD                       	smpsAlterNote       $FD
000977F2 ECF5                       	smpsPSGAlterVol     $F5
000977F4 9206                       	dc.b	nF1, $06
000977F6 EC04                       	smpsPSGAlterVol     $04
000977F8 E701                       	dc.b	smpsNoAttack, $01
000977FA EC07                       	smpsPSGAlterVol     $07
000977FC 8003                       	dc.b	nRst, $03
000977FE ECF5                       	smpsPSGAlterVol     $F5
00097800 9206                       	dc.b	nF1, $06
00097802 EC04                       	smpsPSGAlterVol     $04
00097804 E701                       	dc.b	smpsNoAttack, $01
00097806 EC07                       	smpsPSGAlterVol     $07
00097808 8006                       	dc.b	nRst, $06
0009780A E100                       	smpsAlterNote       $00
0009780C 01                         	dc.b	$01
0009780D E104                       	smpsAlterNote       $04
0009780F 01                         	dc.b	$01
00097810 E103                       	smpsAlterNote       $03
00097812 01                         	dc.b	$01
00097813 E1FD                       	smpsAlterNote       $FD
00097815 01                         	dc.b	$01
00097816 ECF5                       	smpsPSGAlterVol     $F5
00097818 9407                       	dc.b	nG1, $07
0009781A EC0B                       	smpsPSGAlterVol     $0B
0009781C 8004                       	dc.b	nRst, $04
0009781E ECF5                       	smpsPSGAlterVol     $F5
00097820 9406                       	dc.b	nG1, $06
00097822 EC0B                       	smpsPSGAlterVol     $0B
00097824 8007                       	dc.b	nRst, $07
00097826 E103                       	smpsAlterNote       $03
00097828 0101                       	dc.b	$01, $01
0009782A E1FD                       	smpsAlterNote       $FD
0009782C 01                         	dc.b	$01
0009782D E1F9                       	smpsAlterNote       $F9
0009782F 01                         	dc.b	$01
00097830 E1FD                       	smpsAlterNote       $FD
00097832 ECF5                       	smpsPSGAlterVol     $F5
00097834 9206                       	dc.b	nF1, $06
00097836 EC04                       	smpsPSGAlterVol     $04
00097838 E701                       	dc.b	smpsNoAttack, $01
0009783A EC07                       	smpsPSGAlterVol     $07
0009783C 8003                       	dc.b	nRst, $03
0009783E ECF5                       	smpsPSGAlterVol     $F5
00097840 9206                       	dc.b	nF1, $06
00097842 EC04                       	smpsPSGAlterVol     $04
00097844 E701                       	dc.b	smpsNoAttack, $01
00097846 EC07                       	smpsPSGAlterVol     $07
00097848 8006                       	dc.b	nRst, $06
0009784A E100                       	smpsAlterNote       $00
0009784C 01                         	dc.b	$01
0009784D E104                       	smpsAlterNote       $04
0009784F 01                         	dc.b	$01
00097850 E100                       	smpsAlterNote       $00
00097852 01                         	dc.b	$01
00097853 E1FA                       	smpsAlterNote       $FA
00097855 01                         	dc.b	$01
00097856 E1FD                       	smpsAlterNote       $FD
00097858 ECF5                       	smpsPSGAlterVol     $F5
0009785A 9206                       	dc.b	nF1, $06
0009785C EC04                       	smpsPSGAlterVol     $04
0009785E E701                       	dc.b	smpsNoAttack, $01
00097860 EC07                       	smpsPSGAlterVol     $07
00097862 8003                       	dc.b	nRst, $03
00097864 ECF5                       	smpsPSGAlterVol     $F5
00097866 9107                       	dc.b	nE1, $07
00097868 EC0B                       	smpsPSGAlterVol     $0B
0009786A 8006                       	dc.b	nRst, $06
0009786C E100                       	smpsAlterNote       $00
0009786E 01                         	dc.b	$01
0009786F E103                       	smpsAlterNote       $03
00097871 0101                       	dc.b	$01, $01
00097873 E1FD                       	smpsAlterNote       $FD
00097875 01                         	dc.b	$01
00097876 ECF5                       	smpsPSGAlterVol     $F5
00097878 9207                       	dc.b	nF1, $07
0009787A EC0B                       	smpsPSGAlterVol     $0B
0009787C 8004                       	dc.b	nRst, $04
0009787E ECF5                       	smpsPSGAlterVol     $F5
00097880 9206                       	dc.b	nF1, $06
00097882 EC04                       	smpsPSGAlterVol     $04
00097884 E701                       	dc.b	smpsNoAttack, $01
00097886 EC07                       	smpsPSGAlterVol     $07
00097888 8006                       	dc.b	nRst, $06
0009788A E103                       	smpsAlterNote       $03
0009788C 01                         	dc.b	$01
0009788D E104                       	smpsAlterNote       $04
0009788F 01                         	dc.b	$01
00097890 E100                       	smpsAlterNote       $00
00097892 01                         	dc.b	$01
00097893 E1FB                       	smpsAlterNote       $FB
00097895 01                         	dc.b	$01
00097896 E1FD                       	smpsAlterNote       $FD
00097898 ECF5                       	smpsPSGAlterVol     $F5
0009789A 9406                       	dc.b	nG1, $06
0009789C EC04                       	smpsPSGAlterVol     $04
0009789E E701                       	dc.b	smpsNoAttack, $01
000978A0 EC07                       	smpsPSGAlterVol     $07
000978A2 8003                       	dc.b	nRst, $03
000978A4 ECF5                       	smpsPSGAlterVol     $F5
000978A6 9406                       	dc.b	nG1, $06
000978A8 EC04                       	smpsPSGAlterVol     $04
000978AA E701                       	dc.b	smpsNoAttack, $01
000978AC EC07                       	smpsPSGAlterVol     $07
000978AE 8006                       	dc.b	nRst, $06
000978B0 E100                       	smpsAlterNote       $00
000978B2 01                         	dc.b	$01
000978B3 E104                       	smpsAlterNote       $04
000978B5 01                         	dc.b	$01
000978B6 E100                       	smpsAlterNote       $00
000978B8 01                         	dc.b	$01
000978B9 E1FD                       	smpsAlterNote       $FD
000978BB 01                         	dc.b	$01
000978BC ECF5                       	smpsPSGAlterVol     $F5
000978BE 9206                       	dc.b	nF1, $06
000978C0 EC04                       	smpsPSGAlterVol     $04
000978C2 E701                       	dc.b	smpsNoAttack, $01
000978C4 EC07                       	smpsPSGAlterVol     $07
000978C6 8003                       	dc.b	nRst, $03
000978C8 ECF5                       	smpsPSGAlterVol     $F5
000978CA 9207                       	dc.b	nF1, $07
000978CC EC0B                       	smpsPSGAlterVol     $0B
000978CE 8007                       	dc.b	nRst, $07
000978D0 E103                       	smpsAlterNote       $03
000978D2 0101                       	dc.b	$01, $01
000978D4 E1FD                       	smpsAlterNote       $FD
000978D6 01                         	dc.b	$01
000978D7 E1FA                       	smpsAlterNote       $FA
000978D9 01                         	dc.b	$01
000978DA E1FD                       	smpsAlterNote       $FD
000978DC ECF5                       	smpsPSGAlterVol     $F5
000978DE 9206                       	dc.b	nF1, $06
000978E0 EC0B                       	smpsPSGAlterVol     $0B
000978E2 8004                       	dc.b	nRst, $04
000978E4 ECF5                       	smpsPSGAlterVol     $F5
000978E6 9206                       	dc.b	nF1, $06
000978E8 EC04                       	smpsPSGAlterVol     $04
000978EA E701                       	dc.b	smpsNoAttack, $01
000978EC EC07                       	smpsPSGAlterVol     $07
000978EE 8006                       	dc.b	nRst, $06
000978F0 E100                       	smpsAlterNote       $00
000978F2 01                         	dc.b	$01
000978F3 E104                       	smpsAlterNote       $04
000978F5 01                         	dc.b	$01
000978F6 E100                       	smpsAlterNote       $00
000978F8 01                         	dc.b	$01
000978F9 E1FA                       	smpsAlterNote       $FA
000978FB 01                         	dc.b	$01
000978FC E1FD                       	smpsAlterNote       $FD
000978FE ECF5                       	smpsPSGAlterVol     $F5
00097900 9206                       	dc.b	nF1, $06
00097902 EC04                       	smpsPSGAlterVol     $04
00097904 E704                       	dc.b	smpsNoAttack, $04
00097906 ECFC                       	smpsPSGAlterVol     $FC
00097908 9207                       	dc.b	nF1, $07
0009790A EC0B                       	smpsPSGAlterVol     $0B
0009790C 8006                       	dc.b	nRst, $06
0009790E E100                       	smpsAlterNote       $00
00097910 01                         	dc.b	$01
00097911 E104                       	smpsAlterNote       $04
00097913 01                         	dc.b	$01
00097914 E103                       	smpsAlterNote       $03
00097916 01                         	dc.b	$01
00097917 E1FD                       	smpsAlterNote       $FD
00097919 01                         	dc.b	$01
0009791A ECF5                       	smpsPSGAlterVol     $F5
0009791C 9207                       	dc.b	nF1, $07
0009791E EC0B                       	smpsPSGAlterVol     $0B
00097920 8004                       	dc.b	nRst, $04
00097922 ECF5                       	smpsPSGAlterVol     $F5
00097924 9206                       	dc.b	nF1, $06
00097926 EC0B                       	smpsPSGAlterVol     $0B
00097928 8007                       	dc.b	nRst, $07
0009792A E103                       	smpsAlterNote       $03
0009792C 0101                       	dc.b	$01, $01
0009792E E100                       	smpsAlterNote       $00
00097930 01                         	dc.b	$01
00097931 E1FA                       	smpsAlterNote       $FA
00097933 01                         	dc.b	$01
00097934 E1FD                       	smpsAlterNote       $FD
00097936 ECF5                       	smpsPSGAlterVol     $F5
00097938 9206                       	dc.b	nF1, $06
0009793A EC04                       	smpsPSGAlterVol     $04
0009793C E704                       	dc.b	smpsNoAttack, $04
0009793E ECFC                       	smpsPSGAlterVol     $FC
00097940 9206                       	dc.b	nF1, $06
00097942 EC04                       	smpsPSGAlterVol     $04
00097944 E701                       	dc.b	smpsNoAttack, $01
00097946 EC07                       	smpsPSGAlterVol     $07
00097948 8006                       	dc.b	nRst, $06
0009794A E100                       	smpsAlterNote       $00
0009794C 01                         	dc.b	$01
0009794D E104                       	smpsAlterNote       $04
0009794F 01                         	dc.b	$01
00097950 E100                       	smpsAlterNote       $00
00097952 01                         	dc.b	$01
00097953 E1FD                       	smpsAlterNote       $FD
00097955 01                         	dc.b	$01
00097956 ECF5                       	smpsPSGAlterVol     $F5
00097958 9206                       	dc.b	nF1, $06
0009795A EC04                       	smpsPSGAlterVol     $04
0009795C E701                       	dc.b	smpsNoAttack, $01
0009795E EC07                       	smpsPSGAlterVol     $07
00097960 8003                       	dc.b	nRst, $03
00097962 ECF5                       	smpsPSGAlterVol     $F5
00097964 9207                       	dc.b	nF1, $07
00097966 EC0B                       	smpsPSGAlterVol     $0B
00097968 8007                       	dc.b	nRst, $07
0009796A E103                       	smpsAlterNote       $03
0009796C 0101                       	dc.b	$01, $01
0009796E E1FD                       	smpsAlterNote       $FD
00097970 01                         	dc.b	$01
00097971 E1FA                       	smpsAlterNote       $FA
00097973 01                         	dc.b	$01
00097974 E1FD                       	smpsAlterNote       $FD
00097976 ECF5                       	smpsPSGAlterVol     $F5
00097978 9106                       	dc.b	nE1, $06
0009797A EC0B                       	smpsPSGAlterVol     $0B
0009797C 8004                       	dc.b	nRst, $04
0009797E ECF5                       	smpsPSGAlterVol     $F5
00097980 9106                       	dc.b	nE1, $06
00097982 EC04                       	smpsPSGAlterVol     $04
00097984 E701                       	dc.b	smpsNoAttack, $01
00097986 EC07                       	smpsPSGAlterVol     $07
00097988 8006                       	dc.b	nRst, $06
0009798A E100                       	smpsAlterNote       $00
0009798C 01                         	dc.b	$01
0009798D E104                       	smpsAlterNote       $04
0009798F 01                         	dc.b	$01
00097990 E100                       	smpsAlterNote       $00
00097992 01                         	dc.b	$01
00097993 E1FA                       	smpsAlterNote       $FA
00097995 01                         	dc.b	$01
00097996 E1FD                       	smpsAlterNote       $FD
00097998 ECF5                       	smpsPSGAlterVol     $F5
0009799A 9106                       	dc.b	nE1, $06
0009799C EC04                       	smpsPSGAlterVol     $04
0009799E E701                       	dc.b	smpsNoAttack, $01
000979A0 EC07                       	smpsPSGAlterVol     $07
000979A2 8003                       	dc.b	nRst, $03
000979A4 ECF5                       	smpsPSGAlterVol     $F5
000979A6 9106                       	dc.b	nE1, $06
000979A8 EC04                       	smpsPSGAlterVol     $04
000979AA E701                       	dc.b	smpsNoAttack, $01
000979AC EC07                       	smpsPSGAlterVol     $07
000979AE 8006                       	dc.b	nRst, $06
000979B0 E100                       	smpsAlterNote       $00
000979B2 01                         	dc.b	$01
000979B3 E104                       	smpsAlterNote       $04
000979B5 01                         	dc.b	$01
000979B6 E103                       	smpsAlterNote       $03
000979B8 01                         	dc.b	$01
000979B9 E1FD                       	smpsAlterNote       $FD
000979BB 01                         	dc.b	$01
000979BC ECF5                       	smpsPSGAlterVol     $F5
000979BE 9107                       	dc.b	nE1, $07
000979C0 EC0B                       	smpsPSGAlterVol     $0B
000979C2 8004                       	dc.b	nRst, $04
000979C4 ECF5                       	smpsPSGAlterVol     $F5
000979C6 9106                       	dc.b	nE1, $06
000979C8 EC0B                       	smpsPSGAlterVol     $0B
000979CA 8007                       	dc.b	nRst, $07
000979CC E103                       	smpsAlterNote       $03
000979CE 0101                       	dc.b	$01, $01
000979D0 E100                       	smpsAlterNote       $00
000979D2 01                         	dc.b	$01
000979D3 E1FA                       	smpsAlterNote       $FA
000979D5 01                         	dc.b	$01
000979D6 E1FD                       	smpsAlterNote       $FD
000979D8 ECF5                       	smpsPSGAlterVol     $F5
000979DA 9106                       	dc.b	nE1, $06
000979DC EC04                       	smpsPSGAlterVol     $04
000979DE E701                       	dc.b	smpsNoAttack, $01
000979E0 EC07                       	smpsPSGAlterVol     $07
000979E2 8003                       	dc.b	nRst, $03
000979E4 ECF5                       	smpsPSGAlterVol     $F5
000979E6 9106                       	dc.b	nE1, $06
000979E8 EC04                       	smpsPSGAlterVol     $04
000979EA E701                       	dc.b	smpsNoAttack, $01
000979EC EC07                       	smpsPSGAlterVol     $07
000979EE 8003                       	dc.b	nRst, $03
000979F0 ECF5                       	smpsPSGAlterVol     $F5
000979F2 9207                       	dc.b	nF1, $07
000979F4 EC0B                       	smpsPSGAlterVol     $0B
000979F6 8006                       	dc.b	nRst, $06
000979F8 E100                       	smpsAlterNote       $00
000979FA 01                         	dc.b	$01
000979FB E104                       	smpsAlterNote       $04
000979FD 01                         	dc.b	$01
000979FE E103                       	smpsAlterNote       $03
00097A00 01                         	dc.b	$01
00097A01 E1FD                       	smpsAlterNote       $FD
00097A03 01                         	dc.b	$01
00097A04 E1F9                       	smpsAlterNote       $F9
00097A06 01                         	dc.b	$01
00097A07 E1FD                       	smpsAlterNote       $FD
00097A09 01                         	dc.b	$01
00097A0A E100                       	smpsAlterNote       $00
00097A0C 01                         	dc.b	$01
00097A0D E104                       	smpsAlterNote       $04
00097A0F 01                         	dc.b	$01
00097A10 E1FD                       	smpsAlterNote       $FD
00097A12 ECF5                       	smpsPSGAlterVol     $F5
00097A14 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097A18 EC04                       	smpsPSGAlterVol     $04
00097A1A E701                       	dc.b	smpsNoAttack, $01
00097A1C EC07                       	smpsPSGAlterVol     $07
00097A1E 8009                       	dc.b	nRst, $09
00097A20 E100                       	smpsAlterNote       $00
00097A22 01                         	dc.b	$01
00097A23 E104                       	smpsAlterNote       $04
00097A25 01                         	dc.b	$01
00097A26 E103                       	smpsAlterNote       $03
00097A28 01                         	dc.b	$01
00097A29 E1FD                       	smpsAlterNote       $FD
00097A2B 01                         	dc.b	$01
00097A2C E1F9                       	smpsAlterNote       $F9
00097A2E 01                         	dc.b	$01
00097A2F E1FD                       	smpsAlterNote       $FD
00097A31 01                         	dc.b	$01
00097A32 E100                       	smpsAlterNote       $00
00097A34 01                         	dc.b	$01
00097A35 E104                       	smpsAlterNote       $04
00097A37 01                         	dc.b	$01
00097A38 E100                       	smpsAlterNote       $00
00097A3A 01                         	dc.b	$01
00097A3B E1FA                       	smpsAlterNote       $FA
00097A3D 01                         	dc.b	$01
00097A3E E1F9                       	smpsAlterNote       $F9
00097A40 01                         	dc.b	$01
00097A41 E1FD                       	smpsAlterNote       $FD
00097A43 01                         	dc.b	$01
00097A44 E103                       	smpsAlterNote       $03
00097A46 0101                       	dc.b	$01, $01
00097A48 E100                       	smpsAlterNote       $00
00097A4A 01                         	dc.b	$01
00097A4B E1FD                       	smpsAlterNote       $FD
00097A4D ECF5                       	smpsPSGAlterVol     $F5
00097A4F 9202                       	dc.b	nF1, $02
00097A51 EC04                       	smpsPSGAlterVol     $04
00097A53 E701                       	dc.b	smpsNoAttack, $01
00097A55 ECFC                       	smpsPSGAlterVol     $FC
00097A57 9106                       	dc.b	nE1, $06
00097A59 EC04                       	smpsPSGAlterVol     $04
00097A5B E701                       	dc.b	smpsNoAttack, $01
00097A5D EC07                       	smpsPSGAlterVol     $07
00097A5F 8006                       	dc.b	nRst, $06
00097A61 E100                       	smpsAlterNote       $00
00097A63 01                         	dc.b	$01
00097A64 E104                       	smpsAlterNote       $04
00097A66 01                         	dc.b	$01
00097A67 E100                       	smpsAlterNote       $00
00097A69 01                         	dc.b	$01
00097A6A E1FD                       	smpsAlterNote       $FD
00097A6C 01                         	dc.b	$01
00097A6D E1F9                       	smpsAlterNote       $F9
00097A6F 01                         	dc.b	$01
00097A70 E1FD                       	smpsAlterNote       $FD
00097A72 01                         	dc.b	$01
00097A73 E103                       	smpsAlterNote       $03
00097A75 01                         	dc.b	$01
00097A76 E104                       	smpsAlterNote       $04
00097A78 01                         	dc.b	$01
00097A79 E1FD                       	smpsAlterNote       $FD
00097A7B ECF5                       	smpsPSGAlterVol     $F5
00097A7D 9102                       	dc.b	nE1, $02
00097A7F EC04                       	smpsPSGAlterVol     $04
00097A81 E701                       	dc.b	smpsNoAttack, $01
00097A83 ECFC                       	smpsPSGAlterVol     $FC
00097A85 920D                       	dc.b	nF1, $0D
00097A87 E100                       	smpsAlterNote       $00
00097A89 E701                       	dc.b	smpsNoAttack, $01
00097A8B E104                       	smpsAlterNote       $04
00097A8D E701                       	dc.b	smpsNoAttack, $01
00097A8F E100                       	smpsAlterNote       $00
00097A91 E701                       	dc.b	smpsNoAttack, $01
00097A93 E1FD                       	smpsAlterNote       $FD
00097A95 E701                       	dc.b	smpsNoAttack, $01
00097A97 E1F9                       	smpsAlterNote       $F9
00097A99 E701                       	dc.b	smpsNoAttack, $01
00097A9B E1FD                       	smpsAlterNote       $FD
00097A9D E701                       	dc.b	smpsNoAttack, $01
00097A9F E103                       	smpsAlterNote       $03
00097AA1 E701                       	dc.b	smpsNoAttack, $01
00097AA3 E104                       	smpsAlterNote       $04
00097AA5 E701                       	dc.b	smpsNoAttack, $01
00097AA7 E100                       	smpsAlterNote       $00
00097AA9 E701                       	dc.b	smpsNoAttack, $01
00097AAB E1FA                       	smpsAlterNote       $FA
00097AAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AB1 E1FD                       	smpsAlterNote       $FD
00097AB3 E701                       	dc.b	smpsNoAttack, $01
00097AB5 E103                       	smpsAlterNote       $03
00097AB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097ABB E1FD                       	smpsAlterNote       $FD
00097ABD E701                       	dc.b	smpsNoAttack, $01
00097ABF E1F9                       	smpsAlterNote       $F9
00097AC1 E701                       	dc.b	smpsNoAttack, $01
00097AC3 E1FA                       	smpsAlterNote       $FA
00097AC5 E701                       	dc.b	smpsNoAttack, $01
00097AC7 E100                       	smpsAlterNote       $00
00097AC9 EC04                       	smpsPSGAlterVol     $04
00097ACB E701                       	dc.b	smpsNoAttack, $01
00097ACD EC07                       	smpsPSGAlterVol     $07
00097ACF E104                       	smpsAlterNote       $04
00097AD1 8001                       	dc.b	nRst, $01
00097AD3 E100                       	smpsAlterNote       $00
00097AD5 01                         	dc.b	$01
00097AD6 E1FD                       	smpsAlterNote       $FD
00097AD8 01                         	dc.b	$01
00097AD9 E1F9                       	smpsAlterNote       $F9
00097ADB 01                         	dc.b	$01
00097ADC E1FD                       	smpsAlterNote       $FD
00097ADE 01                         	dc.b	$01
00097ADF E103                       	smpsAlterNote       $03
00097AE1 01                         	dc.b	$01
00097AE2 E104                       	smpsAlterNote       $04
00097AE4 01                         	dc.b	$01
00097AE5 E1FD                       	smpsAlterNote       $FD
00097AE7 ECF5                       	smpsPSGAlterVol     $F5
00097AE9 9106                       	dc.b	nE1, $06
00097AEB EC04                       	smpsPSGAlterVol     $04
00097AED E701                       	dc.b	smpsNoAttack, $01
00097AEF EC07                       	smpsPSGAlterVol     $07
00097AF1 8003                       	dc.b	nRst, $03
00097AF3 ECF5                       	smpsPSGAlterVol     $F5
00097AF5 9106                       	dc.b	nE1, $06
00097AF7 EC04                       	smpsPSGAlterVol     $04
00097AF9 E701                       	dc.b	smpsNoAttack, $01
00097AFB EC07                       	smpsPSGAlterVol     $07
00097AFD 8006                       	dc.b	nRst, $06
00097AFF E100                       	smpsAlterNote       $00
00097B01 01                         	dc.b	$01
00097B02 E104                       	smpsAlterNote       $04
00097B04 01                         	dc.b	$01
00097B05 E100                       	smpsAlterNote       $00
00097B07 01                         	dc.b	$01
00097B08 E1FA                       	smpsAlterNote       $FA
00097B0A 01                         	dc.b	$01
00097B0B E1FD                       	smpsAlterNote       $FD
00097B0D ECF5                       	smpsPSGAlterVol     $F5
00097B0F 9206                       	dc.b	nF1, $06
00097B11 EC04                       	smpsPSGAlterVol     $04
00097B13 E701                       	dc.b	smpsNoAttack, $01
00097B15 EC07                       	smpsPSGAlterVol     $07
00097B17 8003                       	dc.b	nRst, $03
00097B19 ECF5                       	smpsPSGAlterVol     $F5
00097B1B 9207                       	dc.b	nF1, $07
00097B1D EC0B                       	smpsPSGAlterVol     $0B
00097B1F 8006                       	dc.b	nRst, $06
00097B21 E100                       	smpsAlterNote       $00
00097B23 01                         	dc.b	$01
00097B24 E103                       	smpsAlterNote       $03
00097B26 0101                       	dc.b	$01, $01
00097B28 E1FD                       	smpsAlterNote       $FD
00097B2A 01                         	dc.b	$01
00097B2B ECF5                       	smpsPSGAlterVol     $F5
00097B2D 9107                       	dc.b	nE1, $07
00097B2F EC0B                       	smpsPSGAlterVol     $0B
00097B31 8004                       	dc.b	nRst, $04
00097B33 ECF5                       	smpsPSGAlterVol     $F5
00097B35 9106                       	dc.b	nE1, $06
00097B37 EC04                       	smpsPSGAlterVol     $04
00097B39 E701                       	dc.b	smpsNoAttack, $01
00097B3B EC07                       	smpsPSGAlterVol     $07
00097B3D 8006                       	dc.b	nRst, $06
00097B3F E103                       	smpsAlterNote       $03
00097B41 01                         	dc.b	$01
00097B42 E104                       	smpsAlterNote       $04
00097B44 01                         	dc.b	$01
00097B45 E100                       	smpsAlterNote       $00
00097B47 01                         	dc.b	$01
00097B48 E1FA                       	smpsAlterNote       $FA
00097B4A 01                         	dc.b	$01
00097B4B E1FD                       	smpsAlterNote       $FD
00097B4D ECF5                       	smpsPSGAlterVol     $F5
00097B4F 9106                       	dc.b	nE1, $06
00097B51 EC04                       	smpsPSGAlterVol     $04
00097B53 E701                       	dc.b	smpsNoAttack, $01
00097B55 EC07                       	smpsPSGAlterVol     $07
00097B57 8003                       	dc.b	nRst, $03
00097B59 ECF5                       	smpsPSGAlterVol     $F5
00097B5B 9106                       	dc.b	nE1, $06
00097B5D EC04                       	smpsPSGAlterVol     $04
00097B5F E701                       	dc.b	smpsNoAttack, $01
00097B61 EC07                       	smpsPSGAlterVol     $07
00097B63 8003                       	dc.b	nRst, $03
00097B65 ECF5                       	smpsPSGAlterVol     $F5
00097B67 9207                       	dc.b	nF1, $07
00097B69 EC0B                       	smpsPSGAlterVol     $0B
00097B6B 8006                       	dc.b	nRst, $06
00097B6D E100                       	smpsAlterNote       $00
00097B6F 01                         	dc.b	$01
00097B70 E103                       	smpsAlterNote       $03
00097B72 0101                       	dc.b	$01, $01
00097B74 E1FD                       	smpsAlterNote       $FD
00097B76 01                         	dc.b	$01
00097B77 E1F9                       	smpsAlterNote       $F9
00097B79 01                         	dc.b	$01
00097B7A E1FA                       	smpsAlterNote       $FA
00097B7C 01                         	dc.b	$01
00097B7D E100                       	smpsAlterNote       $00
00097B7F 01                         	dc.b	$01
00097B80 E104                       	smpsAlterNote       $04
00097B82 01                         	dc.b	$01
00097B83 E1FD                       	smpsAlterNote       $FD
00097B85 ECF5                       	smpsPSGAlterVol     $F5
00097B87 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097B8B EC04                       	smpsPSGAlterVol     $04
00097B8D E701                       	dc.b	smpsNoAttack, $01
00097B8F EC07                       	smpsPSGAlterVol     $07
00097B91 8009                       	dc.b	nRst, $09
00097B93 E100                       	smpsAlterNote       $00
00097B95 01                         	dc.b	$01
00097B96 E103                       	smpsAlterNote       $03
00097B98 0101                       	dc.b	$01, $01
00097B9A E1FD                       	smpsAlterNote       $FD
00097B9C 01                         	dc.b	$01
00097B9D E1F9                       	smpsAlterNote       $F9
00097B9F 01                         	dc.b	$01
00097BA0 E1FA                       	smpsAlterNote       $FA
00097BA2 01                         	dc.b	$01
00097BA3 E100                       	smpsAlterNote       $00
00097BA5 01                         	dc.b	$01
00097BA6 E104                       	smpsAlterNote       $04
00097BA8 01                         	dc.b	$01
00097BA9 E100                       	smpsAlterNote       $00
00097BAB 01                         	dc.b	$01
00097BAC E1FD                       	smpsAlterNote       $FD
00097BAE 01                         	dc.b	$01
00097BAF E1F9                       	smpsAlterNote       $F9
00097BB1 01                         	dc.b	$01
00097BB2 E1FD                       	smpsAlterNote       $FD
00097BB4 01                         	dc.b	$01
00097BB5 E103                       	smpsAlterNote       $03
00097BB7 01                         	dc.b	$01
00097BB8 E104                       	smpsAlterNote       $04
00097BBA 01                         	dc.b	$01
00097BBB E100                       	smpsAlterNote       $00
00097BBD 01                         	dc.b	$01
00097BBE E1FD                       	smpsAlterNote       $FD
00097BC0 ECF5                       	smpsPSGAlterVol     $F5
00097BC2 9203 9106                  	dc.b	nF1, $03, nE1, $06
00097BC6 EC04                       	smpsPSGAlterVol     $04
00097BC8 E701                       	dc.b	smpsNoAttack, $01
00097BCA EC07                       	smpsPSGAlterVol     $07
00097BCC 8006                       	dc.b	nRst, $06
00097BCE E100                       	smpsAlterNote       $00
00097BD0 01                         	dc.b	$01
00097BD1 E104                       	smpsAlterNote       $04
00097BD3 01                         	dc.b	$01
00097BD4 E103                       	smpsAlterNote       $03
00097BD6 01                         	dc.b	$01
00097BD7 E1FD                       	smpsAlterNote       $FD
00097BD9 01                         	dc.b	$01
00097BDA E1F9                       	smpsAlterNote       $F9
00097BDC 01                         	dc.b	$01
00097BDD E1FD                       	smpsAlterNote       $FD
00097BDF 01                         	dc.b	$01
00097BE0 E100                       	smpsAlterNote       $00
00097BE2 01                         	dc.b	$01
00097BE3 E104                       	smpsAlterNote       $04
00097BE5 01                         	dc.b	$01
00097BE6 E1FD                       	smpsAlterNote       $FD
00097BE8 ECF5                       	smpsPSGAlterVol     $F5
00097BEA 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00097BEE E100                       	smpsAlterNote       $00
00097BF0 E701                       	dc.b	smpsNoAttack, $01
00097BF2 E104                       	smpsAlterNote       $04
00097BF4 E701                       	dc.b	smpsNoAttack, $01
00097BF6 E100                       	smpsAlterNote       $00
00097BF8 E701                       	dc.b	smpsNoAttack, $01
00097BFA E1FD                       	smpsAlterNote       $FD
00097BFC E701                       	dc.b	smpsNoAttack, $01
00097BFE E1F9                       	smpsAlterNote       $F9
00097C00 E701                       	dc.b	smpsNoAttack, $01
00097C02 E1FD                       	smpsAlterNote       $FD
00097C04 E701                       	dc.b	smpsNoAttack, $01
00097C06 E103                       	smpsAlterNote       $03
00097C08 E701                       	dc.b	smpsNoAttack, $01
00097C0A E104                       	smpsAlterNote       $04
00097C0C E701                       	dc.b	smpsNoAttack, $01
00097C0E E100                       	smpsAlterNote       $00
00097C10 E701                       	dc.b	smpsNoAttack, $01
00097C12 E1FA                       	smpsAlterNote       $FA
00097C14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C18 E1FD                       	smpsAlterNote       $FD
00097C1A E701                       	dc.b	smpsNoAttack, $01
00097C1C E103                       	smpsAlterNote       $03
00097C1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C22 E100                       	smpsAlterNote       $00
00097C24 E701                       	dc.b	smpsNoAttack, $01
00097C26 E1FA                       	smpsAlterNote       $FA
00097C28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C2C E100                       	smpsAlterNote       $00
00097C2E EC04                       	smpsPSGAlterVol     $04
00097C30 E701                       	dc.b	smpsNoAttack, $01
00097C32 EC07                       	smpsPSGAlterVol     $07
00097C34 E104                       	smpsAlterNote       $04
00097C36 8001                       	dc.b	nRst, $01
00097C38 E103                       	smpsAlterNote       $03
00097C3A 01                         	dc.b	$01
00097C3B E1FD                       	smpsAlterNote       $FD
00097C3D 01                         	dc.b	$01
00097C3E E1F9                       	smpsAlterNote       $F9
00097C40 01                         	dc.b	$01
00097C41 E1FD                       	smpsAlterNote       $FD
00097C43 01                         	dc.b	$01
00097C44 E100                       	smpsAlterNote       $00
00097C46 01                         	dc.b	$01
00097C47 E104                       	smpsAlterNote       $04
00097C49 01                         	dc.b	$01
00097C4A E1FD                       	smpsAlterNote       $FD
00097C4C ECF5                       	smpsPSGAlterVol     $F5
00097C4E 9106                       	dc.b	nE1, $06
00097C50 EC04                       	smpsPSGAlterVol     $04
00097C52 E701                       	dc.b	smpsNoAttack, $01
00097C54 EC07                       	smpsPSGAlterVol     $07
00097C56 8003                       	dc.b	nRst, $03
00097C58 ECF5                       	smpsPSGAlterVol     $F5
00097C5A 9106                       	dc.b	nE1, $06
00097C5C EC04                       	smpsPSGAlterVol     $04
00097C5E E701                       	dc.b	smpsNoAttack, $01
00097C60 EC07                       	smpsPSGAlterVol     $07
00097C62 8006                       	dc.b	nRst, $06
00097C64 E100                       	smpsAlterNote       $00
00097C66 01                         	dc.b	$01
00097C67 E104                       	smpsAlterNote       $04
00097C69 01                         	dc.b	$01
00097C6A E100                       	smpsAlterNote       $00
00097C6C 01                         	dc.b	$01
00097C6D E1FD                       	smpsAlterNote       $FD
00097C6F 01                         	dc.b	$01
00097C70 ECF5                       	smpsPSGAlterVol     $F5
00097C72 9206                       	dc.b	nF1, $06
00097C74 EC04                       	smpsPSGAlterVol     $04
00097C76 E701                       	dc.b	smpsNoAttack, $01
00097C78 EC07                       	smpsPSGAlterVol     $07
00097C7A 8003                       	dc.b	nRst, $03
00097C7C ECF5                       	smpsPSGAlterVol     $F5
00097C7E 9207                       	dc.b	nF1, $07
00097C80 EC0B                       	smpsPSGAlterVol     $0B
00097C82 8007                       	dc.b	nRst, $07
00097C84 E103                       	smpsAlterNote       $03
00097C86 0101                       	dc.b	$01, $01
00097C88 E1FD                       	smpsAlterNote       $FD
00097C8A 01                         	dc.b	$01
00097C8B E1FA                       	smpsAlterNote       $FA
00097C8D 01                         	dc.b	$01
00097C8E E1FD                       	smpsAlterNote       $FD
00097C90 ECF5                       	smpsPSGAlterVol     $F5
00097C92 9106                       	dc.b	nE1, $06
00097C94 EC0B                       	smpsPSGAlterVol     $0B
00097C96 8004                       	dc.b	nRst, $04
00097C98 ECF5                       	smpsPSGAlterVol     $F5
00097C9A 9106                       	dc.b	nE1, $06
00097C9C EC04                       	smpsPSGAlterVol     $04
00097C9E E701                       	dc.b	smpsNoAttack, $01
00097CA0 EC07                       	smpsPSGAlterVol     $07
00097CA2 8006                       	dc.b	nRst, $06
00097CA4 E100                       	smpsAlterNote       $00
00097CA6 01                         	dc.b	$01
00097CA7 E104                       	smpsAlterNote       $04
00097CA9 01                         	dc.b	$01
00097CAA E100                       	smpsAlterNote       $00
00097CAC 01                         	dc.b	$01
00097CAD E1FA                       	smpsAlterNote       $FA
00097CAF 01                         	dc.b	$01
00097CB0 E1FD                       	smpsAlterNote       $FD
00097CB2 ECF5                       	smpsPSGAlterVol     $F5
00097CB4 9206                       	dc.b	nF1, $06
00097CB6 EC04                       	smpsPSGAlterVol     $04
00097CB8 E701                       	dc.b	smpsNoAttack, $01
00097CBA EC07                       	smpsPSGAlterVol     $07
00097CBC 8003                       	dc.b	nRst, $03
00097CBE ECF5                       	smpsPSGAlterVol     $F5
00097CC0 9206                       	dc.b	nF1, $06
00097CC2 EC04                       	smpsPSGAlterVol     $04
00097CC4 E701                       	dc.b	smpsNoAttack, $01
00097CC6 EC07                       	smpsPSGAlterVol     $07
00097CC8 8006                       	dc.b	nRst, $06
00097CCA E100                       	smpsAlterNote       $00
00097CCC 01                         	dc.b	$01
00097CCD E104                       	smpsAlterNote       $04
00097CCF 01                         	dc.b	$01
00097CD0 E103                       	smpsAlterNote       $03
00097CD2 01                         	dc.b	$01
00097CD3 E1FD                       	smpsAlterNote       $FD
00097CD5 01                         	dc.b	$01
00097CD6 ECF5                       	smpsPSGAlterVol     $F5
00097CD8 9107                       	dc.b	nE1, $07
00097CDA EC0B                       	smpsPSGAlterVol     $0B
00097CDC 8004                       	dc.b	nRst, $04
00097CDE ECF5                       	smpsPSGAlterVol     $F5
00097CE0 9106                       	dc.b	nE1, $06
00097CE2 EC0B                       	smpsPSGAlterVol     $0B
00097CE4 8007                       	dc.b	nRst, $07
00097CE6 E103                       	smpsAlterNote       $03
00097CE8 0101                       	dc.b	$01, $01
00097CEA E100                       	smpsAlterNote       $00
00097CEC 01                         	dc.b	$01
00097CED E1FA                       	smpsAlterNote       $FA
00097CEF 01                         	dc.b	$01
00097CF0 E1FD                       	smpsAlterNote       $FD
00097CF2 ECF5                       	smpsPSGAlterVol     $F5
00097CF4 9206                       	dc.b	nF1, $06
00097CF6 EC04                       	smpsPSGAlterVol     $04
00097CF8 E701                       	dc.b	smpsNoAttack, $01
00097CFA EC07                       	smpsPSGAlterVol     $07
00097CFC 8003                       	dc.b	nRst, $03
00097CFE ECF5                       	smpsPSGAlterVol     $F5
00097D00 9206                       	dc.b	nF1, $06
00097D02 EC04                       	smpsPSGAlterVol     $04
00097D04 E701                       	dc.b	smpsNoAttack, $01
00097D06 EC07                       	smpsPSGAlterVol     $07
00097D08 8006                       	dc.b	nRst, $06
00097D0A E100                       	smpsAlterNote       $00
00097D0C 01                         	dc.b	$01
00097D0D E104                       	smpsAlterNote       $04
00097D0F 01                         	dc.b	$01
00097D10 E100                       	smpsAlterNote       $00
00097D12 01                         	dc.b	$01
00097D13 E1FD                       	smpsAlterNote       $FD
00097D15 01                         	dc.b	$01
00097D16 ECF5                       	smpsPSGAlterVol     $F5
00097D18 9106                       	dc.b	nE1, $06
00097D1A EC04                       	smpsPSGAlterVol     $04
00097D1C E701                       	dc.b	smpsNoAttack, $01
00097D1E EC07                       	smpsPSGAlterVol     $07
00097D20 8003                       	dc.b	nRst, $03
00097D22 ECF5                       	smpsPSGAlterVol     $F5
00097D24 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097D28 EC04                       	smpsPSGAlterVol     $04
00097D2A E701                       	dc.b	smpsNoAttack, $01
00097D2C ECFC                       	smpsPSGAlterVol     $FC
00097D2E 9103                       	dc.b	nE1, $03
00097D30 EC04                       	smpsPSGAlterVol     $04
00097D32 E701                       	dc.b	smpsNoAttack, $01
00097D34 ECFC                       	smpsPSGAlterVol     $FC
00097D36 9102                       	dc.b	nE1, $02
00097D38 EC04                       	smpsPSGAlterVol     $04
00097D3A E701                       	dc.b	smpsNoAttack, $01
00097D3C ECFC                       	smpsPSGAlterVol     $FC
00097D3E 9103                       	dc.b	nE1, $03
00097D40 EC0B                       	smpsPSGAlterVol     $0B
00097D42 800A                       	dc.b	nRst, $0A
00097D44 E100                       	smpsAlterNote       $00
00097D46 01                         	dc.b	$01
00097D47 E104                       	smpsAlterNote       $04
00097D49 01                         	dc.b	$01
00097D4A E100                       	smpsAlterNote       $00
00097D4C 01                         	dc.b	$01
00097D4D E1FA                       	smpsAlterNote       $FA
00097D4F 01                         	dc.b	$01
00097D50 E1F9                       	smpsAlterNote       $F9
00097D52 01                         	dc.b	$01
00097D53 E1FD                       	smpsAlterNote       $FD
00097D55 01                         	dc.b	$01
00097D56 E103                       	smpsAlterNote       $03
00097D58 0101                       	dc.b	$01, $01
00097D5A E100                       	smpsAlterNote       $00
00097D5C 01                         	dc.b	$01
00097D5D E1FA                       	smpsAlterNote       $FA
00097D5F 0101                       	dc.b	$01, $01
00097D61 E1FD                       	smpsAlterNote       $FD
00097D63 ECF5                       	smpsPSGAlterVol     $F5
00097D65 9206                       	dc.b	nF1, $06
00097D67 EC04                       	smpsPSGAlterVol     $04
00097D69 E704                       	dc.b	smpsNoAttack, $04
00097D6B ECFC                       	smpsPSGAlterVol     $FC
00097D6D 9206                       	dc.b	nF1, $06
00097D6F EC04                       	smpsPSGAlterVol     $04
00097D71 E701                       	dc.b	smpsNoAttack, $01
00097D73 EC07                       	smpsPSGAlterVol     $07
00097D75 8006                       	dc.b	nRst, $06
00097D77 E100                       	smpsAlterNote       $00
00097D79 01                         	dc.b	$01
00097D7A E104                       	smpsAlterNote       $04
00097D7C 01                         	dc.b	$01
00097D7D E103                       	smpsAlterNote       $03
00097D7F 01                         	dc.b	$01
00097D80 E1FD                       	smpsAlterNote       $FD
00097D82 01                         	dc.b	$01
00097D83 ECF5                       	smpsPSGAlterVol     $F5
00097D85 9407                       	dc.b	nG1, $07
00097D87 EC0B                       	smpsPSGAlterVol     $0B
00097D89 8004                       	dc.b	nRst, $04
00097D8B ECF5                       	smpsPSGAlterVol     $F5
00097D8D 9406                       	dc.b	nG1, $06
00097D8F EC0B                       	smpsPSGAlterVol     $0B
00097D91 8007                       	dc.b	nRst, $07
00097D93 E103                       	smpsAlterNote       $03
00097D95 0101                       	dc.b	$01, $01
00097D97 E1FD                       	smpsAlterNote       $FD
00097D99 01                         	dc.b	$01
00097D9A E1F9                       	smpsAlterNote       $F9
00097D9C 01                         	dc.b	$01
00097D9D E1FD                       	smpsAlterNote       $FD
00097D9F ECF5                       	smpsPSGAlterVol     $F5
00097DA1 9206                       	dc.b	nF1, $06
00097DA3 EC04                       	smpsPSGAlterVol     $04
00097DA5 E701                       	dc.b	smpsNoAttack, $01
00097DA7 EC07                       	smpsPSGAlterVol     $07
00097DA9 8003                       	dc.b	nRst, $03
00097DAB ECF5                       	smpsPSGAlterVol     $F5
00097DAD 9206                       	dc.b	nF1, $06
00097DAF EC04                       	smpsPSGAlterVol     $04
00097DB1 E701                       	dc.b	smpsNoAttack, $01
00097DB3 EC07                       	smpsPSGAlterVol     $07
00097DB5 8006                       	dc.b	nRst, $06
00097DB7 E100                       	smpsAlterNote       $00
00097DB9 01                         	dc.b	$01
00097DBA E104                       	smpsAlterNote       $04
00097DBC 01                         	dc.b	$01
00097DBD E100                       	smpsAlterNote       $00
00097DBF 01                         	dc.b	$01
00097DC0 E1FA                       	smpsAlterNote       $FA
00097DC2 01                         	dc.b	$01
00097DC3 E1FD                       	smpsAlterNote       $FD
00097DC5 ECF5                       	smpsPSGAlterVol     $F5
00097DC7 9206                       	dc.b	nF1, $06
00097DC9 EC04                       	smpsPSGAlterVol     $04
00097DCB E701                       	dc.b	smpsNoAttack, $01
00097DCD EC07                       	smpsPSGAlterVol     $07
00097DCF 8003                       	dc.b	nRst, $03
00097DD1 ECF5                       	smpsPSGAlterVol     $F5
00097DD3 9107                       	dc.b	nE1, $07
00097DD5 EC0B                       	smpsPSGAlterVol     $0B
00097DD7 8006                       	dc.b	nRst, $06
00097DD9 E100                       	smpsAlterNote       $00
00097DDB 01                         	dc.b	$01
00097DDC E103                       	smpsAlterNote       $03
00097DDE 0101                       	dc.b	$01, $01
00097DE0 E1FD                       	smpsAlterNote       $FD
00097DE2 01                         	dc.b	$01
00097DE3 ECF5                       	smpsPSGAlterVol     $F5
00097DE5 9207                       	dc.b	nF1, $07
00097DE7 EC0B                       	smpsPSGAlterVol     $0B
00097DE9 8004                       	dc.b	nRst, $04
00097DEB ECF5                       	smpsPSGAlterVol     $F5
00097DED 9206                       	dc.b	nF1, $06
00097DEF EC04                       	smpsPSGAlterVol     $04
00097DF1 E701                       	dc.b	smpsNoAttack, $01
00097DF3 EC07                       	smpsPSGAlterVol     $07
00097DF5 8006                       	dc.b	nRst, $06
00097DF7 E103                       	smpsAlterNote       $03
00097DF9 01                         	dc.b	$01
00097DFA E104                       	smpsAlterNote       $04
00097DFC 01                         	dc.b	$01
00097DFD E100                       	smpsAlterNote       $00
00097DFF 01                         	dc.b	$01
00097E00 E1FB                       	smpsAlterNote       $FB
00097E02 01                         	dc.b	$01
00097E03 E1FD                       	smpsAlterNote       $FD
00097E05 ECF5                       	smpsPSGAlterVol     $F5
00097E07 9406                       	dc.b	nG1, $06
00097E09 EC04                       	smpsPSGAlterVol     $04
00097E0B E701                       	dc.b	smpsNoAttack, $01
00097E0D EC07                       	smpsPSGAlterVol     $07
00097E0F 8003                       	dc.b	nRst, $03
00097E11 ECF5                       	smpsPSGAlterVol     $F5
00097E13 9406                       	dc.b	nG1, $06
00097E15 EC04                       	smpsPSGAlterVol     $04
00097E17 E701                       	dc.b	smpsNoAttack, $01
00097E19 EC07                       	smpsPSGAlterVol     $07
00097E1B 8006                       	dc.b	nRst, $06
00097E1D E100                       	smpsAlterNote       $00
00097E1F 01                         	dc.b	$01
00097E20 E104                       	smpsAlterNote       $04
00097E22 01                         	dc.b	$01
00097E23 E100                       	smpsAlterNote       $00
00097E25 01                         	dc.b	$01
00097E26 E1FD                       	smpsAlterNote       $FD
00097E28 01                         	dc.b	$01
00097E29 ECF5                       	smpsPSGAlterVol     $F5
00097E2B 9206                       	dc.b	nF1, $06
00097E2D EC04                       	smpsPSGAlterVol     $04
00097E2F E701                       	dc.b	smpsNoAttack, $01
00097E31 EC07                       	smpsPSGAlterVol     $07
00097E33 8003                       	dc.b	nRst, $03
00097E35 ECF5                       	smpsPSGAlterVol     $F5
00097E37 9207                       	dc.b	nF1, $07
00097E39 EC0B                       	smpsPSGAlterVol     $0B
00097E3B 8007                       	dc.b	nRst, $07
00097E3D E103                       	smpsAlterNote       $03
00097E3F 0101                       	dc.b	$01, $01
00097E41 E1FD                       	smpsAlterNote       $FD
00097E43 01                         	dc.b	$01
00097E44 E1FA                       	smpsAlterNote       $FA
00097E46 01                         	dc.b	$01
00097E47 E1FD                       	smpsAlterNote       $FD
00097E49 ECF5                       	smpsPSGAlterVol     $F5
00097E4B 9206                       	dc.b	nF1, $06
00097E4D EC0B                       	smpsPSGAlterVol     $0B
00097E4F 8004                       	dc.b	nRst, $04
00097E51 ECF5                       	smpsPSGAlterVol     $F5
00097E53 9206                       	dc.b	nF1, $06
00097E55 EC04                       	smpsPSGAlterVol     $04
00097E57 E701                       	dc.b	smpsNoAttack, $01
00097E59 EC07                       	smpsPSGAlterVol     $07
00097E5B 8006                       	dc.b	nRst, $06
00097E5D E100                       	smpsAlterNote       $00
00097E5F 01                         	dc.b	$01
00097E60 E104                       	smpsAlterNote       $04
00097E62 01                         	dc.b	$01
00097E63 E100                       	smpsAlterNote       $00
00097E65 01                         	dc.b	$01
00097E66 E1FA                       	smpsAlterNote       $FA
00097E68 01                         	dc.b	$01
00097E69 E1FD                       	smpsAlterNote       $FD
00097E6B ECF5                       	smpsPSGAlterVol     $F5
00097E6D 9206                       	dc.b	nF1, $06
00097E6F EC04                       	smpsPSGAlterVol     $04
00097E71 E701                       	dc.b	smpsNoAttack, $01
00097E73 EC07                       	smpsPSGAlterVol     $07
00097E75 8003                       	dc.b	nRst, $03
00097E77 ECF5                       	smpsPSGAlterVol     $F5
00097E79 9207                       	dc.b	nF1, $07
00097E7B EC0B                       	smpsPSGAlterVol     $0B
00097E7D 8006                       	dc.b	nRst, $06
00097E7F E100                       	smpsAlterNote       $00
00097E81 01                         	dc.b	$01
00097E82 E103                       	smpsAlterNote       $03
00097E84 0101                       	dc.b	$01, $01
00097E86 E1FD                       	smpsAlterNote       $FD
00097E88 01                         	dc.b	$01
00097E89 ECF5                       	smpsPSGAlterVol     $F5
00097E8B 9207                       	dc.b	nF1, $07
00097E8D EC0B                       	smpsPSGAlterVol     $0B
00097E8F 8004                       	dc.b	nRst, $04
00097E91 ECF5                       	smpsPSGAlterVol     $F5
00097E93 9206                       	dc.b	nF1, $06
00097E95 EC0B                       	smpsPSGAlterVol     $0B
00097E97 8007                       	dc.b	nRst, $07
00097E99 E103                       	smpsAlterNote       $03
00097E9B 0101                       	dc.b	$01, $01
00097E9D E100                       	smpsAlterNote       $00
00097E9F 01                         	dc.b	$01
00097EA0 E1FA                       	smpsAlterNote       $FA
00097EA2 01                         	dc.b	$01
00097EA3 E1FD                       	smpsAlterNote       $FD
00097EA5 ECF5                       	smpsPSGAlterVol     $F5
00097EA7 9206                       	dc.b	nF1, $06
00097EA9 EC04                       	smpsPSGAlterVol     $04
00097EAB E701                       	dc.b	smpsNoAttack, $01
00097EAD EC07                       	smpsPSGAlterVol     $07
00097EAF 8003                       	dc.b	nRst, $03
00097EB1 ECF5                       	smpsPSGAlterVol     $F5
00097EB3 9206                       	dc.b	nF1, $06
00097EB5 EC04                       	smpsPSGAlterVol     $04
00097EB7 E701                       	dc.b	smpsNoAttack, $01
00097EB9 EC07                       	smpsPSGAlterVol     $07
00097EBB 8006                       	dc.b	nRst, $06
00097EBD E100                       	smpsAlterNote       $00
00097EBF 01                         	dc.b	$01
00097EC0 E104                       	smpsAlterNote       $04
00097EC2 01                         	dc.b	$01
00097EC3 E100                       	smpsAlterNote       $00
00097EC5 01                         	dc.b	$01
00097EC6 E1FD                       	smpsAlterNote       $FD
00097EC8 01                         	dc.b	$01
00097EC9 ECF5                       	smpsPSGAlterVol     $F5
00097ECB 9206                       	dc.b	nF1, $06
00097ECD EC04                       	smpsPSGAlterVol     $04
00097ECF E701                       	dc.b	smpsNoAttack, $01
00097ED1 EC07                       	smpsPSGAlterVol     $07
00097ED3 8003                       	dc.b	nRst, $03
00097ED5 ECF5                       	smpsPSGAlterVol     $F5
00097ED7 9207                       	dc.b	nF1, $07
00097ED9 EC0B                       	smpsPSGAlterVol     $0B
00097EDB 8007                       	dc.b	nRst, $07
00097EDD E104                       	smpsAlterNote       $04
00097EDF 0101                       	dc.b	$01, $01
00097EE1 E1FB                       	smpsAlterNote       $FB
00097EE3 01                         	dc.b	$01
00097EE4 E1F6                       	smpsAlterNote       $F6
00097EE6 0101                       	dc.b	$01, $01
00097EE8 E1FF                       	smpsAlterNote       $FF
00097EEA 01                         	dc.b	$01
00097EEB E105                       	smpsAlterNote       $05
00097EED 01                         	dc.b	$01
00097EEE E104                       	smpsAlterNote       $04
00097EF0 01                         	dc.b	$01
00097EF1 E1FB                       	smpsAlterNote       $FB
00097EF3 01                         	dc.b	$01
00097EF4 E1F5                       	smpsAlterNote       $F5
00097EF6 01                         	dc.b	$01
00097EF7 E1FC                       	smpsAlterNote       $FC
00097EF9 ECF5                       	smpsPSGAlterVol     $F5
00097EFB 8B0E                       	dc.b	nBb0, $0E
00097EFD E102                       	smpsAlterNote       $02
00097EFF EC0B                       	smpsPSGAlterVol     $0B
00097F01 8001                       	dc.b	nRst, $01
00097F03 E101                       	smpsAlterNote       $01
00097F05 01                         	dc.b	$01
00097F06 E1FC                       	smpsAlterNote       $FC
00097F08 01                         	dc.b	$01
00097F09 E1F9                       	smpsAlterNote       $F9
00097F0B 0101                       	dc.b	$01, $01
00097F0D E1FF                       	smpsAlterNote       $FF
00097F0F 01                         	dc.b	$01
00097F10 E102                       	smpsAlterNote       $02
00097F12 01                         	dc.b	$01
00097F13 E1FF                       	smpsAlterNote       $FF
00097F15 01                         	dc.b	$01
00097F16 E1FC                       	smpsAlterNote       $FC
00097F18 01                         	dc.b	$01
00097F19 E1F8                       	smpsAlterNote       $F8
00097F1B 01                         	dc.b	$01
00097F1C E1FC                       	smpsAlterNote       $FC
00097F1E 01                         	dc.b	$01
00097F1F E101                       	smpsAlterNote       $01
00097F21 01                         	dc.b	$01
00097F22 E102                       	smpsAlterNote       $02
00097F24 01                         	dc.b	$01
00097F25 E1FF                       	smpsAlterNote       $FF
00097F27 01                         	dc.b	$01
00097F28 E1FB                       	smpsAlterNote       $FB
00097F2A ECF5                       	smpsPSGAlterVol     $F5
00097F2C 8D0D                       	dc.b	nC1, $0D
00097F2E E101                       	smpsAlterNote       $01
00097F30 EC0B                       	smpsPSGAlterVol     $0B
00097F32 8001                       	dc.b	nRst, $01
00097F34 E102                       	smpsAlterNote       $02
00097F36 01                         	dc.b	$01
00097F37 E1FF                       	smpsAlterNote       $FF
00097F39 01                         	dc.b	$01
00097F3A E1F9                       	smpsAlterNote       $F9
00097F3C 0101                       	dc.b	$01, $01
00097F3E E1FC                       	smpsAlterNote       $FC
00097F40 01                         	dc.b	$01
00097F41 E101                       	smpsAlterNote       $01
00097F43 0101                       	dc.b	$01, $01
00097F45 E1FC                       	smpsAlterNote       $FC
00097F47 01                         	dc.b	$01
00097F48 E1F9                       	smpsAlterNote       $F9
00097F4A 0101                       	dc.b	$01, $01
00097F4C E1FF                       	smpsAlterNote       $FF
00097F4E 01                         	dc.b	$01
00097F4F E102                       	smpsAlterNote       $02
00097F51 01                         	dc.b	$01
00097F52 E101                       	smpsAlterNote       $01
00097F54 01                         	dc.b	$01
00097F55 E1FC                       	smpsAlterNote       $FC
00097F57 ECF5                       	smpsPSGAlterVol     $F5
00097F59 8F0D                       	dc.b	nD1, $0D
00097F5B E1FF                       	smpsAlterNote       $FF
00097F5D EC04                       	smpsPSGAlterVol     $04
00097F5F E701                       	dc.b	smpsNoAttack, $01
00097F61 EC07                       	smpsPSGAlterVol     $07
00097F63 E103                       	smpsAlterNote       $03
00097F65 8001                       	dc.b	nRst, $01
00097F67 E102                       	smpsAlterNote       $02
00097F69 01                         	dc.b	$01
00097F6A E1FD                       	smpsAlterNote       $FD
00097F6C 01                         	dc.b	$01
00097F6D E1F9                       	smpsAlterNote       $F9
00097F6F 01                         	dc.b	$01
00097F70 E1FD                       	smpsAlterNote       $FD
00097F72 01                         	dc.b	$01
00097F73 E100                       	smpsAlterNote       $00
00097F75 01                         	dc.b	$01
00097F76 E103                       	smpsAlterNote       $03
00097F78 01                         	dc.b	$01
00097F79 E100                       	smpsAlterNote       $00
00097F7B 01                         	dc.b	$01
00097F7C E1FA                       	smpsAlterNote       $FA
00097F7E 01                         	dc.b	$01
00097F7F E1F9                       	smpsAlterNote       $F9
00097F81 01                         	dc.b	$01
00097F82 E1FD                       	smpsAlterNote       $FD
00097F84 01                         	dc.b	$01
00097F85 E102                       	smpsAlterNote       $02
00097F87 0101                       	dc.b	$01, $01
00097F89 E100                       	smpsAlterNote       $00
00097F8B 01                         	dc.b	$01
00097F8C E1FD                       	smpsAlterNote       $FD
00097F8E ECF5                       	smpsPSGAlterVol     $F5
00097F90 910D                       	dc.b	nE1, $0D
00097F92 E103                       	smpsAlterNote       $03
00097F94 EC0B                       	smpsPSGAlterVol     $0B
00097F96 8001 01                    	dc.b	nRst, $01, $01
00097F99 E100                       	smpsAlterNote       $00
00097F9B 01                         	dc.b	$01
00097F9C E1FA                       	smpsAlterNote       $FA
00097F9E 0101                       	dc.b	$01, $01
00097FA0 E100                       	smpsAlterNote       $00
00097FA2 01                         	dc.b	$01
00097FA3 E103                       	smpsAlterNote       $03
00097FA5 01                         	dc.b	$01
00097FA6 E1FD                       	smpsAlterNote       $FD
00097FA8 ECF5                       	smpsPSGAlterVol     $F5
00097FAA 9206                       	dc.b	nF1, $06
00097FAC EC04                       	smpsPSGAlterVol     $04
00097FAE E701                       	dc.b	smpsNoAttack, $01
00097FB0 EC07                       	smpsPSGAlterVol     $07
00097FB2 8003                       	dc.b	nRst, $03
00097FB4 ECF5                       	smpsPSGAlterVol     $F5
00097FB6 9207                       	dc.b	nF1, $07
00097FB8 EC0B                       	smpsPSGAlterVol     $0B
00097FBA 8006                       	dc.b	nRst, $06
00097FBC E100                       	smpsAlterNote       $00
00097FBE 01                         	dc.b	$01
00097FBF E103                       	smpsAlterNote       $03
00097FC1 0101                       	dc.b	$01, $01
00097FC3 E1FD                       	smpsAlterNote       $FD
00097FC5 01                         	dc.b	$01
00097FC6 ECF5                       	smpsPSGAlterVol     $F5
00097FC8 9407                       	dc.b	nG1, $07
00097FCA EC0B                       	smpsPSGAlterVol     $0B
00097FCC 8004                       	dc.b	nRst, $04
00097FCE ECF5                       	smpsPSGAlterVol     $F5
00097FD0 9406                       	dc.b	nG1, $06
00097FD2 EC04                       	smpsPSGAlterVol     $04
00097FD4 E701                       	dc.b	smpsNoAttack, $01
00097FD6 EC07                       	smpsPSGAlterVol     $07
00097FD8 8006                       	dc.b	nRst, $06
00097FDA E103                       	smpsAlterNote       $03
00097FDC 01                         	dc.b	$01
00097FDD E104                       	smpsAlterNote       $04
00097FDF 01                         	dc.b	$01
00097FE0 E100                       	smpsAlterNote       $00
00097FE2 01                         	dc.b	$01
00097FE3 E1F9                       	smpsAlterNote       $F9
00097FE5 01                         	dc.b	$01
00097FE6 E1FD                       	smpsAlterNote       $FD
00097FE8 ECF5                       	smpsPSGAlterVol     $F5
00097FEA 9206                       	dc.b	nF1, $06
00097FEC EC04                       	smpsPSGAlterVol     $04
00097FEE E701                       	dc.b	smpsNoAttack, $01
00097FF0 EC07                       	smpsPSGAlterVol     $07
00097FF2 8003                       	dc.b	nRst, $03
00097FF4 ECF5                       	smpsPSGAlterVol     $F5
00097FF6 9206                       	dc.b	nF1, $06
00097FF8 EC04                       	smpsPSGAlterVol     $04
00097FFA E701                       	dc.b	smpsNoAttack, $01
00097FFC EC07                       	smpsPSGAlterVol     $07
00097FFE 8006                       	dc.b	nRst, $06
00098000 E100                       	smpsAlterNote       $00
00098002 01                         	dc.b	$01
00098003 E104                       	smpsAlterNote       $04
00098005 01                         	dc.b	$01
00098006 E103                       	smpsAlterNote       $03
00098008 01                         	dc.b	$01
00098009 E1FD                       	smpsAlterNote       $FD
0009800B 01                         	dc.b	$01
0009800C ECF5                       	smpsPSGAlterVol     $F5
0009800E 9407                       	dc.b	nG1, $07
00098010 EC0B                       	smpsPSGAlterVol     $0B
00098012 8004                       	dc.b	nRst, $04
00098014 ECF5                       	smpsPSGAlterVol     $F5
00098016 9406                       	dc.b	nG1, $06
00098018 EC0B                       	smpsPSGAlterVol     $0B
0009801A 8007                       	dc.b	nRst, $07
0009801C E103                       	smpsAlterNote       $03
0009801E 0101                       	dc.b	$01, $01
00098020 E100                       	smpsAlterNote       $00
00098022 01                         	dc.b	$01
00098023 E1F9                       	smpsAlterNote       $F9
00098025 01                         	dc.b	$01
00098026 E1FD                       	smpsAlterNote       $FD
00098028 ECF5                       	smpsPSGAlterVol     $F5
0009802A 9206                       	dc.b	nF1, $06
0009802C EC04                       	smpsPSGAlterVol     $04
0009802E E701                       	dc.b	smpsNoAttack, $01
00098030 EC07                       	smpsPSGAlterVol     $07
00098032 8003                       	dc.b	nRst, $03
00098034 ECF5                       	smpsPSGAlterVol     $F5
00098036 9206                       	dc.b	nF1, $06
00098038 EC04                       	smpsPSGAlterVol     $04
0009803A E701                       	dc.b	smpsNoAttack, $01
0009803C EC07                       	smpsPSGAlterVol     $07
0009803E 8006                       	dc.b	nRst, $06
00098040 E100                       	smpsAlterNote       $00
00098042 01                         	dc.b	$01
00098043 E104                       	smpsAlterNote       $04
00098045 01                         	dc.b	$01
00098046 E100                       	smpsAlterNote       $00
00098048 01                         	dc.b	$01
00098049 E1FB                       	smpsAlterNote       $FB
0009804B 01                         	dc.b	$01
0009804C E1FD                       	smpsAlterNote       $FD
0009804E ECF5                       	smpsPSGAlterVol     $F5
00098050 9406                       	dc.b	nG1, $06
00098052 EC04                       	smpsPSGAlterVol     $04
00098054 E701                       	dc.b	smpsNoAttack, $01
00098056 EC07                       	smpsPSGAlterVol     $07
00098058 8003                       	dc.b	nRst, $03
0009805A ECF5                       	smpsPSGAlterVol     $F5
0009805C 9407                       	dc.b	nG1, $07
0009805E EC0B                       	smpsPSGAlterVol     $0B
00098060 8006                       	dc.b	nRst, $06
00098062 E100                       	smpsAlterNote       $00
00098064 01                         	dc.b	$01
00098065 E103                       	smpsAlterNote       $03
00098067 0101                       	dc.b	$01, $01
00098069 E1FD                       	smpsAlterNote       $FD
0009806B 01                         	dc.b	$01
0009806C ECF5                       	smpsPSGAlterVol     $F5
0009806E 9207                       	dc.b	nF1, $07
00098070 EC0B                       	smpsPSGAlterVol     $0B
00098072 8004                       	dc.b	nRst, $04
00098074 ECF5                       	smpsPSGAlterVol     $F5
00098076 9206                       	dc.b	nF1, $06
00098078 EC04                       	smpsPSGAlterVol     $04
0009807A E701                       	dc.b	smpsNoAttack, $01
0009807C ECFC                       	smpsPSGAlterVol     $FC
0009807E E1FC                       	smpsAlterNote       $FC
00098080 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00098084 EC04                       	smpsPSGAlterVol     $04
00098086 E701                       	dc.b	smpsNoAttack, $01
00098088 ECFC                       	smpsPSGAlterVol     $FC
0009808A 9003                       	dc.b	nEb1, $03
0009808C E1FD                       	smpsAlterNote       $FD
0009808E 9403                       	dc.b	nG1, $03
00098090 EC04                       	smpsPSGAlterVol     $04
00098092 E701                       	dc.b	smpsNoAttack, $01
00098094 E1FE                       	smpsAlterNote       $FE
00098096 ECFC                       	smpsPSGAlterVol     $FC
00098098 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009809C EC04                       	smpsPSGAlterVol     $04
0009809E E701                       	dc.b	smpsNoAttack, $01
000980A0 EC07                       	smpsPSGAlterVol     $07
000980A2 8009                       	dc.b	nRst, $09
000980A4 E100                       	smpsAlterNote       $00
000980A6 01                         	dc.b	$01
000980A7 F6F5 19                    	smpsJump            music84_Jump07
000980AA                            
000980AA                            ; PSG2 Data
000980AA                            music84_PSG2:
000980AA E1FC                       	smpsAlterNote       $FC
000980AC EC04                       	smpsPSGAlterVol     $04
000980AE 8F03                       	dc.b	nD1, $03
000980B0 E1FD                       	smpsAlterNote       $FD
000980B2 9203                       	dc.b	nF1, $03
000980B4 EC04                       	smpsPSGAlterVol     $04
000980B6 E701                       	dc.b	smpsNoAttack, $01
000980B8 E1FE                       	smpsAlterNote       $FE
000980BA ECFC                       	smpsPSGAlterVol     $FC
000980BC 9603                       	dc.b	nA1, $03
000980BE E1FD                       	smpsAlterNote       $FD
000980C0 9103                       	dc.b	nE1, $03
000980C2 EC04                       	smpsPSGAlterVol     $04
000980C4 E701                       	dc.b	smpsNoAttack, $01
000980C6 ECFC                       	smpsPSGAlterVol     $FC
000980C8 9403                       	dc.b	nG1, $03
000980CA E1FE                       	smpsAlterNote       $FE
000980CC 9703                       	dc.b	nBb1, $03
000980CE EC04                       	smpsPSGAlterVol     $04
000980D0 E701                       	dc.b	smpsNoAttack, $01
000980D2 E1FF                       	smpsAlterNote       $FF
000980D4 ECFC                       	smpsPSGAlterVol     $FC
000980D6 9B02                       	dc.b	nD2, $02
000980D8 EC04                       	smpsPSGAlterVol     $04
000980DA E701                       	dc.b	smpsNoAttack, $01
000980DC ECFC                       	smpsPSGAlterVol     $FC
000980DE E1FE                       	smpsAlterNote       $FE
000980E0 9A03                       	dc.b	nCs2, $03
000980E2 EC0B                       	smpsPSGAlterVol     $0B
000980E4 800A                       	dc.b	nRst, $0A
000980E6 E102                       	smpsAlterNote       $02
000980E8 01                         	dc.b	$01
000980E9 E10A                       	smpsAlterNote       $0A
000980EB 01                         	dc.b	$01
000980EC E102                       	smpsAlterNote       $02
000980EE 01                         	dc.b	$01
000980EF E1FC                       	smpsAlterNote       $FC
000980F1 01                         	dc.b	$01
000980F2 E10A                       	smpsAlterNote       $0A
000980F4 01                         	dc.b	$01
000980F5 E1FC                       	smpsAlterNote       $FC
000980F7 01                         	dc.b	$01
000980F8 E108                       	smpsAlterNote       $08
000980FA 01                         	dc.b	$01
000980FB E10A                       	smpsAlterNote       $0A
000980FD 01                         	dc.b	$01
000980FE E102                       	smpsAlterNote       $02
00098100 01                         	dc.b	$01
00098101 E1F7                       	smpsAlterNote       $F7
00098103 0101                       	dc.b	$01, $01
00098105 E102                       	smpsAlterNote       $02
00098107 01                         	dc.b	$01
00098108 E108                       	smpsAlterNote       $08
0009810A 0101                       	dc.b	$01, $01
0009810C E1FC                       	smpsAlterNote       $FC
0009810E 01                         	dc.b	$01
0009810F E10A                       	smpsAlterNote       $0A
00098111 01                         	dc.b	$01
00098112 E1F7                       	smpsAlterNote       $F7
00098114 01                         	dc.b	$01
00098115 E102                       	smpsAlterNote       $02
00098117 01                         	dc.b	$01
00098118 E10A                       	smpsAlterNote       $0A
0009811A 01                         	dc.b	$01
0009811B E102                       	smpsAlterNote       $02
0009811D 01                         	dc.b	$01
0009811E E1FC                       	smpsAlterNote       $FC
00098120 01                         	dc.b	$01
00098121                            
00098121                            music84_Jump06:
00098121 E10A                       	smpsAlterNote       $0A
00098123 8001                       	dc.b	nRst, $01
00098125 E1FC                       	smpsAlterNote       $FC
00098127 01                         	dc.b	$01
00098128 E108                       	smpsAlterNote       $08
0009812A 01                         	dc.b	$01
0009812B E10A                       	smpsAlterNote       $0A
0009812D 01                         	dc.b	$01
0009812E E1FC                       	smpsAlterNote       $FC
00098130 ECF5                       	smpsPSGAlterVol     $F5
00098132 8F06                       	dc.b	nD1, $06
00098134 EC04                       	smpsPSGAlterVol     $04
00098136 E701                       	dc.b	smpsNoAttack, $01
00098138 EC07                       	smpsPSGAlterVol     $07
0009813A 8003                       	dc.b	nRst, $03
0009813C ECF5                       	smpsPSGAlterVol     $F5
0009813E 8F06                       	dc.b	nD1, $06
00098140 EC04                       	smpsPSGAlterVol     $04
00098142 E701                       	dc.b	smpsNoAttack, $01
00098144 EC07                       	smpsPSGAlterVol     $07
00098146 8006                       	dc.b	nRst, $06
00098148 E1FF                       	smpsAlterNote       $FF
0009814A 01                         	dc.b	$01
0009814B E102                       	smpsAlterNote       $02
0009814D 01                         	dc.b	$01
0009814E E1FF                       	smpsAlterNote       $FF
00098150 01                         	dc.b	$01
00098151 E1F9                       	smpsAlterNote       $F9
00098153 01                         	dc.b	$01
00098154 E1FC                       	smpsAlterNote       $FC
00098156 ECF5                       	smpsPSGAlterVol     $F5
00098158 9006                       	dc.b	nEb1, $06
0009815A EC04                       	smpsPSGAlterVol     $04
0009815C E701                       	dc.b	smpsNoAttack, $01
0009815E EC07                       	smpsPSGAlterVol     $07
00098160 8003                       	dc.b	nRst, $03
00098162 ECF5                       	smpsPSGAlterVol     $F5
00098164 9007                       	dc.b	nEb1, $07
00098166 EC0B                       	smpsPSGAlterVol     $0B
00098168 8006                       	dc.b	nRst, $06
0009816A E1FF                       	smpsAlterNote       $FF
0009816C 01                         	dc.b	$01
0009816D E103                       	smpsAlterNote       $03
0009816F 0101                       	dc.b	$01, $01
00098171 E1FC                       	smpsAlterNote       $FC
00098173 01                         	dc.b	$01
00098174 ECF5                       	smpsPSGAlterVol     $F5
00098176 8F07                       	dc.b	nD1, $07
00098178 EC0B                       	smpsPSGAlterVol     $0B
0009817A 8004                       	dc.b	nRst, $04
0009817C ECF5                       	smpsPSGAlterVol     $F5
0009817E 8F06                       	dc.b	nD1, $06
00098180 EC04                       	smpsPSGAlterVol     $04
00098182 E701                       	dc.b	smpsNoAttack, $01
00098184 EC07                       	smpsPSGAlterVol     $07
00098186 8006                       	dc.b	nRst, $06
00098188 E102                       	smpsAlterNote       $02
0009818A 01                         	dc.b	$01
0009818B E103                       	smpsAlterNote       $03
0009818D 01                         	dc.b	$01
0009818E E1FF                       	smpsAlterNote       $FF
00098190 01                         	dc.b	$01
00098191 E1F9                       	smpsAlterNote       $F9
00098193 01                         	dc.b	$01
00098194 E1FC                       	smpsAlterNote       $FC
00098196 ECF5                       	smpsPSGAlterVol     $F5
00098198 8F06                       	dc.b	nD1, $06
0009819A EC04                       	smpsPSGAlterVol     $04
0009819C E701                       	dc.b	smpsNoAttack, $01
0009819E EC07                       	smpsPSGAlterVol     $07
000981A0 8003                       	dc.b	nRst, $03
000981A2 ECF5                       	smpsPSGAlterVol     $F5
000981A4 8F06                       	dc.b	nD1, $06
000981A6 EC04                       	smpsPSGAlterVol     $04
000981A8 E701                       	dc.b	smpsNoAttack, $01
000981AA EC07                       	smpsPSGAlterVol     $07
000981AC 8006                       	dc.b	nRst, $06
000981AE E1FF                       	smpsAlterNote       $FF
000981B0 01                         	dc.b	$01
000981B1 E103                       	smpsAlterNote       $03
000981B3 01                         	dc.b	$01
000981B4 E1FF                       	smpsAlterNote       $FF
000981B6 01                         	dc.b	$01
000981B7 E1FC                       	smpsAlterNote       $FC
000981B9 01                         	dc.b	$01
000981BA ECF5                       	smpsPSGAlterVol     $F5
000981BC 8F06                       	dc.b	nD1, $06
000981BE EC04                       	smpsPSGAlterVol     $04
000981C0 E701                       	dc.b	smpsNoAttack, $01
000981C2 EC07                       	smpsPSGAlterVol     $07
000981C4 8003                       	dc.b	nRst, $03
000981C6 ECF5                       	smpsPSGAlterVol     $F5
000981C8 8F07                       	dc.b	nD1, $07
000981CA EC0B                       	smpsPSGAlterVol     $0B
000981CC 8007                       	dc.b	nRst, $07
000981CE E101                       	smpsAlterNote       $01
000981D0 0101                       	dc.b	$01, $01
000981D2 E1FC                       	smpsAlterNote       $FC
000981D4 01                         	dc.b	$01
000981D5 E1F9                       	smpsAlterNote       $F9
000981D7 01                         	dc.b	$01
000981D8 E1FC                       	smpsAlterNote       $FC
000981DA ECF5                       	smpsPSGAlterVol     $F5
000981DC 9006                       	dc.b	nEb1, $06
000981DE EC0B                       	smpsPSGAlterVol     $0B
000981E0 8004                       	dc.b	nRst, $04
000981E2 ECF5                       	smpsPSGAlterVol     $F5
000981E4 9006                       	dc.b	nEb1, $06
000981E6 EC04                       	smpsPSGAlterVol     $04
000981E8 E701                       	dc.b	smpsNoAttack, $01
000981EA EC07                       	smpsPSGAlterVol     $07
000981EC 8006                       	dc.b	nRst, $06
000981EE E100                       	smpsAlterNote       $00
000981F0 01                         	dc.b	$01
000981F1 E102                       	smpsAlterNote       $02
000981F3 01                         	dc.b	$01
000981F4 E100                       	smpsAlterNote       $00
000981F6 01                         	dc.b	$01
000981F7 E1FD                       	smpsAlterNote       $FD
000981F9 01                         	dc.b	$01
000981FA E1FF                       	smpsAlterNote       $FF
000981FC ECF5                       	smpsPSGAlterVol     $F5
000981FE 9B06                       	dc.b	nD2, $06
00098200 EC04                       	smpsPSGAlterVol     $04
00098202 E701                       	dc.b	smpsNoAttack, $01
00098204 EC07                       	smpsPSGAlterVol     $07
00098206 8003                       	dc.b	nRst, $03
00098208 ECF5                       	smpsPSGAlterVol     $F5
0009820A 9B07                       	dc.b	nD2, $07
0009820C EC0B                       	smpsPSGAlterVol     $0B
0009820E 8006                       	dc.b	nRst, $06
00098210 E102                       	smpsAlterNote       $02
00098212 01                         	dc.b	$01
00098213 E106                       	smpsAlterNote       $06
00098215 01                         	dc.b	$01
00098216 E105                       	smpsAlterNote       $05
00098218 01                         	dc.b	$01
00098219 E1FF                       	smpsAlterNote       $FF
0009821B 01                         	dc.b	$01
0009821C ECF5                       	smpsPSGAlterVol     $F5
0009821E 9B07                       	dc.b	nD2, $07
00098220 EC0B                       	smpsPSGAlterVol     $0B
00098222 8004                       	dc.b	nRst, $04
00098224 ECF5                       	smpsPSGAlterVol     $F5
00098226 9B06                       	dc.b	nD2, $06
00098228 EC0B                       	smpsPSGAlterVol     $0B
0009822A 8007                       	dc.b	nRst, $07
0009822C E105                       	smpsAlterNote       $05
0009822E 0101                       	dc.b	$01, $01
00098230 E102                       	smpsAlterNote       $02
00098232 01                         	dc.b	$01
00098233 E1FC                       	smpsAlterNote       $FC
00098235 01                         	dc.b	$01
00098236 E1FF                       	smpsAlterNote       $FF
00098238 ECF5                       	smpsPSGAlterVol     $F5
0009823A 9B06                       	dc.b	nD2, $06
0009823C EC04                       	smpsPSGAlterVol     $04
0009823E E701                       	dc.b	smpsNoAttack, $01
00098240 EC07                       	smpsPSGAlterVol     $07
00098242 8003                       	dc.b	nRst, $03
00098244 ECF5                       	smpsPSGAlterVol     $F5
00098246 9B06                       	dc.b	nD2, $06
00098248 EC04                       	smpsPSGAlterVol     $04
0009824A E701                       	dc.b	smpsNoAttack, $01
0009824C EC07                       	smpsPSGAlterVol     $07
0009824E 8006                       	dc.b	nRst, $06
00098250 E102                       	smpsAlterNote       $02
00098252 01                         	dc.b	$01
00098253 E106                       	smpsAlterNote       $06
00098255 01                         	dc.b	$01
00098256 E102                       	smpsAlterNote       $02
00098258 01                         	dc.b	$01
00098259 E1FF                       	smpsAlterNote       $FF
0009825B 01                         	dc.b	$01
0009825C ECF5                       	smpsPSGAlterVol     $F5
0009825E 9B06                       	dc.b	nD2, $06
00098260 EC04                       	smpsPSGAlterVol     $04
00098262 E701                       	dc.b	smpsNoAttack, $01
00098264 EC07                       	smpsPSGAlterVol     $07
00098266 8003                       	dc.b	nRst, $03
00098268 ECF5                       	smpsPSGAlterVol     $F5
0009826A 9B07                       	dc.b	nD2, $07
0009826C EC0B                       	smpsPSGAlterVol     $0B
0009826E 8007                       	dc.b	nRst, $07
00098270 E105                       	smpsAlterNote       $05
00098272 0101                       	dc.b	$01, $01
00098274 E1FF                       	smpsAlterNote       $FF
00098276 01                         	dc.b	$01
00098277 E1FC                       	smpsAlterNote       $FC
00098279 01                         	dc.b	$01
0009827A E1FF                       	smpsAlterNote       $FF
0009827C ECF5                       	smpsPSGAlterVol     $F5
0009827E 9B06                       	dc.b	nD2, $06
00098280 EC0B                       	smpsPSGAlterVol     $0B
00098282 8004                       	dc.b	nRst, $04
00098284 ECF5                       	smpsPSGAlterVol     $F5
00098286 9B06                       	dc.b	nD2, $06
00098288 EC04                       	smpsPSGAlterVol     $04
0009828A E701                       	dc.b	smpsNoAttack, $01
0009828C EC07                       	smpsPSGAlterVol     $07
0009828E 8006                       	dc.b	nRst, $06
00098290 E105                       	smpsAlterNote       $05
00098292 01                         	dc.b	$01
00098293 E106                       	smpsAlterNote       $06
00098295 01                         	dc.b	$01
00098296 E102                       	smpsAlterNote       $02
00098298 01                         	dc.b	$01
00098299 E1FC                       	smpsAlterNote       $FC
0009829B 01                         	dc.b	$01
0009829C E1FF                       	smpsAlterNote       $FF
0009829E ECF5                       	smpsPSGAlterVol     $F5
000982A0 9B06                       	dc.b	nD2, $06
000982A2 EC04                       	smpsPSGAlterVol     $04
000982A4 E701                       	dc.b	smpsNoAttack, $01
000982A6 EC07                       	smpsPSGAlterVol     $07
000982A8 8003                       	dc.b	nRst, $03
000982AA ECF5                       	smpsPSGAlterVol     $F5
000982AC 9B06                       	dc.b	nD2, $06
000982AE EC04                       	smpsPSGAlterVol     $04
000982B0 E701                       	dc.b	smpsNoAttack, $01
000982B2 EC07                       	smpsPSGAlterVol     $07
000982B4 8006                       	dc.b	nRst, $06
000982B6 E102                       	smpsAlterNote       $02
000982B8 01                         	dc.b	$01
000982B9 E106                       	smpsAlterNote       $06
000982BB 01                         	dc.b	$01
000982BC E105                       	smpsAlterNote       $05
000982BE 01                         	dc.b	$01
000982BF E1FF                       	smpsAlterNote       $FF
000982C1 01                         	dc.b	$01
000982C2 ECF5                       	smpsPSGAlterVol     $F5
000982C4 9B07                       	dc.b	nD2, $07
000982C6 EC0B                       	smpsPSGAlterVol     $0B
000982C8 8004                       	dc.b	nRst, $04
000982CA ECF5                       	smpsPSGAlterVol     $F5
000982CC 9B06                       	dc.b	nD2, $06
000982CE EC0B                       	smpsPSGAlterVol     $0B
000982D0 8007                       	dc.b	nRst, $07
000982D2 E105                       	smpsAlterNote       $05
000982D4 0101                       	dc.b	$01, $01
000982D6 E102                       	smpsAlterNote       $02
000982D8 01                         	dc.b	$01
000982D9 E1FC                       	smpsAlterNote       $FC
000982DB 01                         	dc.b	$01
000982DC E1FF                       	smpsAlterNote       $FF
000982DE ECF5                       	smpsPSGAlterVol     $F5
000982E0 9B06                       	dc.b	nD2, $06
000982E2 EC04                       	smpsPSGAlterVol     $04
000982E4 E701                       	dc.b	smpsNoAttack, $01
000982E6 EC07                       	smpsPSGAlterVol     $07
000982E8 8003                       	dc.b	nRst, $03
000982EA ECF5                       	smpsPSGAlterVol     $F5
000982EC 9B06                       	dc.b	nD2, $06
000982EE EC04                       	smpsPSGAlterVol     $04
000982F0 E701                       	dc.b	smpsNoAttack, $01
000982F2 EC07                       	smpsPSGAlterVol     $07
000982F4 8006                       	dc.b	nRst, $06
000982F6 E102                       	smpsAlterNote       $02
000982F8 01                         	dc.b	$01
000982F9 E106                       	smpsAlterNote       $06
000982FB 01                         	dc.b	$01
000982FC E102                       	smpsAlterNote       $02
000982FE 01                         	dc.b	$01
000982FF E1FF                       	smpsAlterNote       $FF
00098301 01                         	dc.b	$01
00098302 ECF5                       	smpsPSGAlterVol     $F5
00098304 9B06                       	dc.b	nD2, $06
00098306 EC04                       	smpsPSGAlterVol     $04
00098308 E701                       	dc.b	smpsNoAttack, $01
0009830A EC07                       	smpsPSGAlterVol     $07
0009830C 8003                       	dc.b	nRst, $03
0009830E ECF5                       	smpsPSGAlterVol     $F5
00098310 9B07                       	dc.b	nD2, $07
00098312 E1FE                       	smpsAlterNote       $FE
00098314 9706                       	dc.b	nBb1, $06
00098316 EC04                       	smpsPSGAlterVol     $04
00098318 E701                       	dc.b	smpsNoAttack, $01
0009831A ECFC                       	smpsPSGAlterVol     $FC
0009831C 9703                       	dc.b	nBb1, $03
0009831E EC04                       	smpsPSGAlterVol     $04
00098320 E701                       	dc.b	smpsNoAttack, $01
00098322 ECFC                       	smpsPSGAlterVol     $FC
00098324 9702                       	dc.b	nBb1, $02
00098326 EC04                       	smpsPSGAlterVol     $04
00098328 E701                       	dc.b	smpsNoAttack, $01
0009832A ECFC                       	smpsPSGAlterVol     $FC
0009832C 9606                       	dc.b	nA1, $06
0009832E EC04                       	smpsPSGAlterVol     $04
00098330 E701                       	dc.b	smpsNoAttack, $01
00098332 EC07                       	smpsPSGAlterVol     $07
00098334 8006                       	dc.b	nRst, $06
00098336 E101                       	smpsAlterNote       $01
00098338 01                         	dc.b	$01
00098339 E107                       	smpsAlterNote       $07
0009833B 01                         	dc.b	$01
0009833C E101                       	smpsAlterNote       $01
0009833E 01                         	dc.b	$01
0009833F E1F8                       	smpsAlterNote       $F8
00098341 01                         	dc.b	$01
00098342 E1F7                       	smpsAlterNote       $F7
00098344 01                         	dc.b	$01
00098345 E1FC                       	smpsAlterNote       $FC
00098347 01                         	dc.b	$01
00098348 E106                       	smpsAlterNote       $06
0009834A 01                         	dc.b	$01
0009834B E107                       	smpsAlterNote       $07
0009834D 01                         	dc.b	$01
0009834E E101                       	smpsAlterNote       $01
00098350 01                         	dc.b	$01
00098351 E1F8                       	smpsAlterNote       $F8
00098353 0101                       	dc.b	$01, $01
00098355 E1FC                       	smpsAlterNote       $FC
00098357 ECF5                       	smpsPSGAlterVol     $F5
00098359 8F06                       	dc.b	nD1, $06
0009835B EC04                       	smpsPSGAlterVol     $04
0009835D E701                       	dc.b	smpsNoAttack, $01
0009835F EC07                       	smpsPSGAlterVol     $07
00098361 8003                       	dc.b	nRst, $03
00098363 ECF5                       	smpsPSGAlterVol     $F5
00098365 8F06                       	dc.b	nD1, $06
00098367 EC04                       	smpsPSGAlterVol     $04
00098369 E701                       	dc.b	smpsNoAttack, $01
0009836B EC07                       	smpsPSGAlterVol     $07
0009836D 8006                       	dc.b	nRst, $06
0009836F E1FF                       	smpsAlterNote       $FF
00098371 01                         	dc.b	$01
00098372 E102                       	smpsAlterNote       $02
00098374 01                         	dc.b	$01
00098375 E101                       	smpsAlterNote       $01
00098377 01                         	dc.b	$01
00098378 E1FC                       	smpsAlterNote       $FC
0009837A 01                         	dc.b	$01
0009837B ECF5                       	smpsPSGAlterVol     $F5
0009837D 9007                       	dc.b	nEb1, $07
0009837F EC0B                       	smpsPSGAlterVol     $0B
00098381 8004                       	dc.b	nRst, $04
00098383 ECF5                       	smpsPSGAlterVol     $F5
00098385 9006                       	dc.b	nEb1, $06
00098387 EC0B                       	smpsPSGAlterVol     $0B
00098389 8007                       	dc.b	nRst, $07
0009838B E103                       	smpsAlterNote       $03
0009838D 0101                       	dc.b	$01, $01
0009838F E1FC                       	smpsAlterNote       $FC
00098391 01                         	dc.b	$01
00098392 E1F9                       	smpsAlterNote       $F9
00098394 01                         	dc.b	$01
00098395 E1FC                       	smpsAlterNote       $FC
00098397 ECF5                       	smpsPSGAlterVol     $F5
00098399 8F06                       	dc.b	nD1, $06
0009839B EC04                       	smpsPSGAlterVol     $04
0009839D E701                       	dc.b	smpsNoAttack, $01
0009839F EC07                       	smpsPSGAlterVol     $07
000983A1 8003                       	dc.b	nRst, $03
000983A3 ECF5                       	smpsPSGAlterVol     $F5
000983A5 8F06                       	dc.b	nD1, $06
000983A7 EC04                       	smpsPSGAlterVol     $04
000983A9 E701                       	dc.b	smpsNoAttack, $01
000983AB EC07                       	smpsPSGAlterVol     $07
000983AD 8006                       	dc.b	nRst, $06
000983AF E1FF                       	smpsAlterNote       $FF
000983B1 01                         	dc.b	$01
000983B2 E103                       	smpsAlterNote       $03
000983B4 01                         	dc.b	$01
000983B5 E1FF                       	smpsAlterNote       $FF
000983B7 01                         	dc.b	$01
000983B8 E1F9                       	smpsAlterNote       $F9
000983BA 01                         	dc.b	$01
000983BB E1FC                       	smpsAlterNote       $FC
000983BD ECF5                       	smpsPSGAlterVol     $F5
000983BF 8F06                       	dc.b	nD1, $06
000983C1 EC04                       	smpsPSGAlterVol     $04
000983C3 E701                       	dc.b	smpsNoAttack, $01
000983C5 EC07                       	smpsPSGAlterVol     $07
000983C7 8003                       	dc.b	nRst, $03
000983C9 ECF5                       	smpsPSGAlterVol     $F5
000983CB 8F07                       	dc.b	nD1, $07
000983CD EC0B                       	smpsPSGAlterVol     $0B
000983CF 8006                       	dc.b	nRst, $06
000983D1 E1FF                       	smpsAlterNote       $FF
000983D3 01                         	dc.b	$01
000983D4 E102                       	smpsAlterNote       $02
000983D6 0101                       	dc.b	$01, $01
000983D8 E1FC                       	smpsAlterNote       $FC
000983DA 01                         	dc.b	$01
000983DB ECF5                       	smpsPSGAlterVol     $F5
000983DD 8F07                       	dc.b	nD1, $07
000983DF EC0B                       	smpsPSGAlterVol     $0B
000983E1 8004                       	dc.b	nRst, $04
000983E3 ECF5                       	smpsPSGAlterVol     $F5
000983E5 8F06                       	dc.b	nD1, $06
000983E7 EC04                       	smpsPSGAlterVol     $04
000983E9 E701                       	dc.b	smpsNoAttack, $01
000983EB EC07                       	smpsPSGAlterVol     $07
000983ED 8006                       	dc.b	nRst, $06
000983EF E101                       	smpsAlterNote       $01
000983F1 01                         	dc.b	$01
000983F2 E102                       	smpsAlterNote       $02
000983F4 01                         	dc.b	$01
000983F5 E1FF                       	smpsAlterNote       $FF
000983F7 01                         	dc.b	$01
000983F8 E1F9                       	smpsAlterNote       $F9
000983FA 01                         	dc.b	$01
000983FB E1FC                       	smpsAlterNote       $FC
000983FD ECF5                       	smpsPSGAlterVol     $F5
000983FF 9006                       	dc.b	nEb1, $06
00098401 EC04                       	smpsPSGAlterVol     $04
00098403 E701                       	dc.b	smpsNoAttack, $01
00098405 EC07                       	smpsPSGAlterVol     $07
00098407 8003                       	dc.b	nRst, $03
00098409 ECF5                       	smpsPSGAlterVol     $F5
0009840B 9006                       	dc.b	nEb1, $06
0009840D EC04                       	smpsPSGAlterVol     $04
0009840F E701                       	dc.b	smpsNoAttack, $01
00098411 EC07                       	smpsPSGAlterVol     $07
00098413 8006                       	dc.b	nRst, $06
00098415 E100                       	smpsAlterNote       $00
00098417 01                         	dc.b	$01
00098418 E102                       	smpsAlterNote       $02
0009841A 01                         	dc.b	$01
0009841B E100                       	smpsAlterNote       $00
0009841D 01                         	dc.b	$01
0009841E E1FF                       	smpsAlterNote       $FF
00098420 01                         	dc.b	$01
00098421 ECF5                       	smpsPSGAlterVol     $F5
00098423 9B06                       	dc.b	nD2, $06
00098425 EC04                       	smpsPSGAlterVol     $04
00098427 E701                       	dc.b	smpsNoAttack, $01
00098429 EC07                       	smpsPSGAlterVol     $07
0009842B 8003                       	dc.b	nRst, $03
0009842D ECF5                       	smpsPSGAlterVol     $F5
0009842F 9B07                       	dc.b	nD2, $07
00098431 EC0B                       	smpsPSGAlterVol     $0B
00098433 8007                       	dc.b	nRst, $07
00098435 E105                       	smpsAlterNote       $05
00098437 0101                       	dc.b	$01, $01
00098439 E1FF                       	smpsAlterNote       $FF
0009843B 01                         	dc.b	$01
0009843C E1FC                       	smpsAlterNote       $FC
0009843E 01                         	dc.b	$01
0009843F E1FF                       	smpsAlterNote       $FF
00098441 ECF5                       	smpsPSGAlterVol     $F5
00098443 9B06                       	dc.b	nD2, $06
00098445 EC0B                       	smpsPSGAlterVol     $0B
00098447 8004                       	dc.b	nRst, $04
00098449 ECF5                       	smpsPSGAlterVol     $F5
0009844B 9B06                       	dc.b	nD2, $06
0009844D EC04                       	smpsPSGAlterVol     $04
0009844F E701                       	dc.b	smpsNoAttack, $01
00098451 EC07                       	smpsPSGAlterVol     $07
00098453 8006                       	dc.b	nRst, $06
00098455 E102                       	smpsAlterNote       $02
00098457 01                         	dc.b	$01
00098458 E106                       	smpsAlterNote       $06
0009845A 01                         	dc.b	$01
0009845B E102                       	smpsAlterNote       $02
0009845D 01                         	dc.b	$01
0009845E E1FC                       	smpsAlterNote       $FC
00098460 01                         	dc.b	$01
00098461 E1FF                       	smpsAlterNote       $FF
00098463 ECF5                       	smpsPSGAlterVol     $F5
00098465 9B06                       	dc.b	nD2, $06
00098467 EC04                       	smpsPSGAlterVol     $04
00098469 E701                       	dc.b	smpsNoAttack, $01
0009846B EC07                       	smpsPSGAlterVol     $07
0009846D 8003                       	dc.b	nRst, $03
0009846F ECF5                       	smpsPSGAlterVol     $F5
00098471 9B07                       	dc.b	nD2, $07
00098473 EC0B                       	smpsPSGAlterVol     $0B
00098475 8006                       	dc.b	nRst, $06
00098477 E102                       	smpsAlterNote       $02
00098479 01                         	dc.b	$01
0009847A E105                       	smpsAlterNote       $05
0009847C 0101                       	dc.b	$01, $01
0009847E E1FF                       	smpsAlterNote       $FF
00098480 01                         	dc.b	$01
00098481 ECF5                       	smpsPSGAlterVol     $F5
00098483 9B07                       	dc.b	nD2, $07
00098485 EC0B                       	smpsPSGAlterVol     $0B
00098487 8004                       	dc.b	nRst, $04
00098489 ECF5                       	smpsPSGAlterVol     $F5
0009848B 9B06                       	dc.b	nD2, $06
0009848D EC0B                       	smpsPSGAlterVol     $0B
0009848F 8007                       	dc.b	nRst, $07
00098491 E105                       	smpsAlterNote       $05
00098493 0101                       	dc.b	$01, $01
00098495 E102                       	smpsAlterNote       $02
00098497 01                         	dc.b	$01
00098498 E1FC                       	smpsAlterNote       $FC
0009849A 01                         	dc.b	$01
0009849B E1FF                       	smpsAlterNote       $FF
0009849D ECF5                       	smpsPSGAlterVol     $F5
0009849F 9B06                       	dc.b	nD2, $06
000984A1 EC04                       	smpsPSGAlterVol     $04
000984A3 E701                       	dc.b	smpsNoAttack, $01
000984A5 EC07                       	smpsPSGAlterVol     $07
000984A7 8003                       	dc.b	nRst, $03
000984A9 ECF5                       	smpsPSGAlterVol     $F5
000984AB 9B06                       	dc.b	nD2, $06
000984AD EC04                       	smpsPSGAlterVol     $04
000984AF E701                       	dc.b	smpsNoAttack, $01
000984B1 EC07                       	smpsPSGAlterVol     $07
000984B3 8006                       	dc.b	nRst, $06
000984B5 E102                       	smpsAlterNote       $02
000984B7 01                         	dc.b	$01
000984B8 E106                       	smpsAlterNote       $06
000984BA 01                         	dc.b	$01
000984BB E102                       	smpsAlterNote       $02
000984BD 01                         	dc.b	$01
000984BE E1FF                       	smpsAlterNote       $FF
000984C0 01                         	dc.b	$01
000984C1 ECF5                       	smpsPSGAlterVol     $F5
000984C3 9B06                       	dc.b	nD2, $06
000984C5 EC04                       	smpsPSGAlterVol     $04
000984C7 E701                       	dc.b	smpsNoAttack, $01
000984C9 EC07                       	smpsPSGAlterVol     $07
000984CB 8003                       	dc.b	nRst, $03
000984CD ECF5                       	smpsPSGAlterVol     $F5
000984CF 9B07                       	dc.b	nD2, $07
000984D1 EC0B                       	smpsPSGAlterVol     $0B
000984D3 8007                       	dc.b	nRst, $07
000984D5 E105                       	smpsAlterNote       $05
000984D7 0101                       	dc.b	$01, $01
000984D9 E1FF                       	smpsAlterNote       $FF
000984DB 01                         	dc.b	$01
000984DC E1FC                       	smpsAlterNote       $FC
000984DE 01                         	dc.b	$01
000984DF E1FF                       	smpsAlterNote       $FF
000984E1 ECF5                       	smpsPSGAlterVol     $F5
000984E3 9B06                       	dc.b	nD2, $06
000984E5 EC0B                       	smpsPSGAlterVol     $0B
000984E7 8004                       	dc.b	nRst, $04
000984E9 ECF5                       	smpsPSGAlterVol     $F5
000984EB 9B06                       	dc.b	nD2, $06
000984ED EC04                       	smpsPSGAlterVol     $04
000984EF E701                       	dc.b	smpsNoAttack, $01
000984F1 EC07                       	smpsPSGAlterVol     $07
000984F3 8006                       	dc.b	nRst, $06
000984F5 E102                       	smpsAlterNote       $02
000984F7 01                         	dc.b	$01
000984F8 E106                       	smpsAlterNote       $06
000984FA 01                         	dc.b	$01
000984FB E102                       	smpsAlterNote       $02
000984FD 01                         	dc.b	$01
000984FE E1FC                       	smpsAlterNote       $FC
00098500 01                         	dc.b	$01
00098501 E1FF                       	smpsAlterNote       $FF
00098503 ECF5                       	smpsPSGAlterVol     $F5
00098505 9B06                       	dc.b	nD2, $06
00098507 EC04                       	smpsPSGAlterVol     $04
00098509 E701                       	dc.b	smpsNoAttack, $01
0009850B EC07                       	smpsPSGAlterVol     $07
0009850D 8003                       	dc.b	nRst, $03
0009850F ECF5                       	smpsPSGAlterVol     $F5
00098511 9B06                       	dc.b	nD2, $06
00098513 EC04                       	smpsPSGAlterVol     $04
00098515 E701                       	dc.b	smpsNoAttack, $01
00098517 EC07                       	smpsPSGAlterVol     $07
00098519 8006                       	dc.b	nRst, $06
0009851B E102                       	smpsAlterNote       $02
0009851D 01                         	dc.b	$01
0009851E E106                       	smpsAlterNote       $06
00098520 01                         	dc.b	$01
00098521 E105                       	smpsAlterNote       $05
00098523 01                         	dc.b	$01
00098524 E1FF                       	smpsAlterNote       $FF
00098526 01                         	dc.b	$01
00098527 ECF5                       	smpsPSGAlterVol     $F5
00098529 9B07                       	dc.b	nD2, $07
0009852B EC0B                       	smpsPSGAlterVol     $0B
0009852D 8004                       	dc.b	nRst, $04
0009852F ECF5                       	smpsPSGAlterVol     $F5
00098531 9B06                       	dc.b	nD2, $06
00098533 EC0B                       	smpsPSGAlterVol     $0B
00098535 8007                       	dc.b	nRst, $07
00098537 E105                       	smpsAlterNote       $05
00098539 0101                       	dc.b	$01, $01
0009853B E101                       	smpsAlterNote       $01
0009853D 01                         	dc.b	$01
0009853E E1FB                       	smpsAlterNote       $FB
00098540 01                         	dc.b	$01
00098541 E1FE                       	smpsAlterNote       $FE
00098543 ECF5                       	smpsPSGAlterVol     $F5
00098545 9A06                       	dc.b	nCs2, $06
00098547 EC04                       	smpsPSGAlterVol     $04
00098549 E701                       	dc.b	smpsNoAttack, $01
0009854B EC07                       	smpsPSGAlterVol     $07
0009854D 8003                       	dc.b	nRst, $03
0009854F ECF5                       	smpsPSGAlterVol     $F5
00098551 9A06                       	dc.b	nCs2, $06
00098553 EC04                       	smpsPSGAlterVol     $04
00098555 E701                       	dc.b	smpsNoAttack, $01
00098557 EC07                       	smpsPSGAlterVol     $07
00098559 8003                       	dc.b	nRst, $03
0009855B E1FC                       	smpsAlterNote       $FC
0009855D ECF5                       	smpsPSGAlterVol     $F5
0009855F 8F07                       	dc.b	nD1, $07
00098561 EC0B                       	smpsPSGAlterVol     $0B
00098563 8006                       	dc.b	nRst, $06
00098565 E1FF                       	smpsAlterNote       $FF
00098567 01                         	dc.b	$01
00098568 E103                       	smpsAlterNote       $03
0009856A 01                         	dc.b	$01
0009856B E102                       	smpsAlterNote       $02
0009856D 01                         	dc.b	$01
0009856E E1FC                       	smpsAlterNote       $FC
00098570 01                         	dc.b	$01
00098571 E1F8                       	smpsAlterNote       $F8
00098573 01                         	dc.b	$01
00098574 E1FC                       	smpsAlterNote       $FC
00098576 01                         	dc.b	$01
00098577 E1FF                       	smpsAlterNote       $FF
00098579 01                         	dc.b	$01
0009857A E103                       	smpsAlterNote       $03
0009857C 01                         	dc.b	$01
0009857D E1FC                       	smpsAlterNote       $FC
0009857F ECF5                       	smpsPSGAlterVol     $F5
00098581 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098585 EC04                       	smpsPSGAlterVol     $04
00098587 E701                       	dc.b	smpsNoAttack, $01
00098589 EC07                       	smpsPSGAlterVol     $07
0009858B 8009                       	dc.b	nRst, $09
0009858D E1FF                       	smpsAlterNote       $FF
0009858F 01                         	dc.b	$01
00098590 E103                       	smpsAlterNote       $03
00098592 01                         	dc.b	$01
00098593 E102                       	smpsAlterNote       $02
00098595 01                         	dc.b	$01
00098596 E1FC                       	smpsAlterNote       $FC
00098598 01                         	dc.b	$01
00098599 E1F8                       	smpsAlterNote       $F8
0009859B 01                         	dc.b	$01
0009859C E1FC                       	smpsAlterNote       $FC
0009859E 01                         	dc.b	$01
0009859F E1FF                       	smpsAlterNote       $FF
000985A1 01                         	dc.b	$01
000985A2 E103                       	smpsAlterNote       $03
000985A4 01                         	dc.b	$01
000985A5 E1FF                       	smpsAlterNote       $FF
000985A7 01                         	dc.b	$01
000985A8 E1F9                       	smpsAlterNote       $F9
000985AA 01                         	dc.b	$01
000985AB E1F8                       	smpsAlterNote       $F8
000985AD 01                         	dc.b	$01
000985AE E1FC                       	smpsAlterNote       $FC
000985B0 01                         	dc.b	$01
000985B1 E102                       	smpsAlterNote       $02
000985B3 0101                       	dc.b	$01, $01
000985B5 E1FF                       	smpsAlterNote       $FF
000985B7 01                         	dc.b	$01
000985B8 E1FC                       	smpsAlterNote       $FC
000985BA ECF5                       	smpsPSGAlterVol     $F5
000985BC 8F02                       	dc.b	nD1, $02
000985BE EC04                       	smpsPSGAlterVol     $04
000985C0 E701                       	dc.b	smpsNoAttack, $01
000985C2 ECFC                       	smpsPSGAlterVol     $FC
000985C4 E1FB                       	smpsAlterNote       $FB
000985C6 8D06                       	dc.b	nC1, $06
000985C8 EC04                       	smpsPSGAlterVol     $04
000985CA E701                       	dc.b	smpsNoAttack, $01
000985CC EC07                       	smpsPSGAlterVol     $07
000985CE 8006                       	dc.b	nRst, $06
000985D0 E1FE                       	smpsAlterNote       $FE
000985D2 01                         	dc.b	$01
000985D3 E102                       	smpsAlterNote       $02
000985D5 01                         	dc.b	$01
000985D6 E1FE                       	smpsAlterNote       $FE
000985D8 01                         	dc.b	$01
000985D9 E1FB                       	smpsAlterNote       $FB
000985DB 01                         	dc.b	$01
000985DC E1F7                       	smpsAlterNote       $F7
000985DE 01                         	dc.b	$01
000985DF E1FB                       	smpsAlterNote       $FB
000985E1 01                         	dc.b	$01
000985E2 E101                       	smpsAlterNote       $01
000985E4 01                         	dc.b	$01
000985E5 E102                       	smpsAlterNote       $02
000985E7 01                         	dc.b	$01
000985E8 E1FB                       	smpsAlterNote       $FB
000985EA ECF5                       	smpsPSGAlterVol     $F5
000985EC 8D02                       	dc.b	nC1, $02
000985EE EC04                       	smpsPSGAlterVol     $04
000985F0 E701                       	dc.b	smpsNoAttack, $01
000985F2 E1FC                       	smpsAlterNote       $FC
000985F4 ECFC                       	smpsPSGAlterVol     $FC
000985F6 8F0D                       	dc.b	nD1, $0D
000985F8 E1FF                       	smpsAlterNote       $FF
000985FA E701                       	dc.b	smpsNoAttack, $01
000985FC E103                       	smpsAlterNote       $03
000985FE E701                       	dc.b	smpsNoAttack, $01
00098600 E1FF                       	smpsAlterNote       $FF
00098602 E701                       	dc.b	smpsNoAttack, $01
00098604 E1FC                       	smpsAlterNote       $FC
00098606 E701                       	dc.b	smpsNoAttack, $01
00098608 E1F8                       	smpsAlterNote       $F8
0009860A E701                       	dc.b	smpsNoAttack, $01
0009860C E1FC                       	smpsAlterNote       $FC
0009860E E701                       	dc.b	smpsNoAttack, $01
00098610 E102                       	smpsAlterNote       $02
00098612 E701                       	dc.b	smpsNoAttack, $01
00098614 E103                       	smpsAlterNote       $03
00098616 E701                       	dc.b	smpsNoAttack, $01
00098618 E1FF                       	smpsAlterNote       $FF
0009861A E701                       	dc.b	smpsNoAttack, $01
0009861C E1F9                       	smpsAlterNote       $F9
0009861E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098622 E1FC                       	smpsAlterNote       $FC
00098624 E701                       	dc.b	smpsNoAttack, $01
00098626 E102                       	smpsAlterNote       $02
00098628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009862C E1FC                       	smpsAlterNote       $FC
0009862E E701                       	dc.b	smpsNoAttack, $01
00098630 E1F9                       	smpsAlterNote       $F9
00098632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098636 E1FF                       	smpsAlterNote       $FF
00098638 EC04                       	smpsPSGAlterVol     $04
0009863A E701                       	dc.b	smpsNoAttack, $01
0009863C EC07                       	smpsPSGAlterVol     $07
0009863E E103                       	smpsAlterNote       $03
00098640 8001                       	dc.b	nRst, $01
00098642 E102                       	smpsAlterNote       $02
00098644 01                         	dc.b	$01
00098645 E1FB                       	smpsAlterNote       $FB
00098647 01                         	dc.b	$01
00098648 E1F7                       	smpsAlterNote       $F7
0009864A 01                         	dc.b	$01
0009864B E1FB                       	smpsAlterNote       $FB
0009864D 01                         	dc.b	$01
0009864E E102                       	smpsAlterNote       $02
00098650 01                         	dc.b	$01
00098651 E103                       	smpsAlterNote       $03
00098653 01                         	dc.b	$01
00098654 E1FB                       	smpsAlterNote       $FB
00098656 ECF5                       	smpsPSGAlterVol     $F5
00098658 8E06                       	dc.b	nCs1, $06
0009865A EC04                       	smpsPSGAlterVol     $04
0009865C E701                       	dc.b	smpsNoAttack, $01
0009865E EC07                       	smpsPSGAlterVol     $07
00098660 8003                       	dc.b	nRst, $03
00098662 ECF5                       	smpsPSGAlterVol     $F5
00098664 8E06                       	dc.b	nCs1, $06
00098666 EC04                       	smpsPSGAlterVol     $04
00098668 E701                       	dc.b	smpsNoAttack, $01
0009866A EC07                       	smpsPSGAlterVol     $07
0009866C 8006                       	dc.b	nRst, $06
0009866E E1FE                       	smpsAlterNote       $FE
00098670 01                         	dc.b	$01
00098671 E102                       	smpsAlterNote       $02
00098673 01                         	dc.b	$01
00098674 E1FE                       	smpsAlterNote       $FE
00098676 01                         	dc.b	$01
00098677 E1F9                       	smpsAlterNote       $F9
00098679 01                         	dc.b	$01
0009867A E1FC                       	smpsAlterNote       $FC
0009867C ECF5                       	smpsPSGAlterVol     $F5
0009867E 8F06                       	dc.b	nD1, $06
00098680 EC04                       	smpsPSGAlterVol     $04
00098682 E701                       	dc.b	smpsNoAttack, $01
00098684 EC07                       	smpsPSGAlterVol     $07
00098686 8003                       	dc.b	nRst, $03
00098688 ECF5                       	smpsPSGAlterVol     $F5
0009868A 8F07                       	dc.b	nD1, $07
0009868C EC0B                       	smpsPSGAlterVol     $0B
0009868E 8006                       	dc.b	nRst, $06
00098690 E1FF                       	smpsAlterNote       $FF
00098692 01                         	dc.b	$01
00098693 E102                       	smpsAlterNote       $02
00098695 0101                       	dc.b	$01, $01
00098697 E1FB                       	smpsAlterNote       $FB
00098699 01                         	dc.b	$01
0009869A ECF5                       	smpsPSGAlterVol     $F5
0009869C 8E07                       	dc.b	nCs1, $07
0009869E EC0B                       	smpsPSGAlterVol     $0B
000986A0 8004                       	dc.b	nRst, $04
000986A2 ECF5                       	smpsPSGAlterVol     $F5
000986A4 8E06                       	dc.b	nCs1, $06
000986A6 EC04                       	smpsPSGAlterVol     $04
000986A8 E701                       	dc.b	smpsNoAttack, $01
000986AA EC07                       	smpsPSGAlterVol     $07
000986AC 8006                       	dc.b	nRst, $06
000986AE E101                       	smpsAlterNote       $01
000986B0 01                         	dc.b	$01
000986B1 E102                       	smpsAlterNote       $02
000986B3 01                         	dc.b	$01
000986B4 E1FE                       	smpsAlterNote       $FE
000986B6 01                         	dc.b	$01
000986B7 E1F8                       	smpsAlterNote       $F8
000986B9 01                         	dc.b	$01
000986BA E1FB                       	smpsAlterNote       $FB
000986BC ECF5                       	smpsPSGAlterVol     $F5
000986BE 8E06                       	dc.b	nCs1, $06
000986C0 EC04                       	smpsPSGAlterVol     $04
000986C2 E701                       	dc.b	smpsNoAttack, $01
000986C4 EC07                       	smpsPSGAlterVol     $07
000986C6 8003                       	dc.b	nRst, $03
000986C8 ECF5                       	smpsPSGAlterVol     $F5
000986CA 8E06                       	dc.b	nCs1, $06
000986CC EC04                       	smpsPSGAlterVol     $04
000986CE E701                       	dc.b	smpsNoAttack, $01
000986D0 EC07                       	smpsPSGAlterVol     $07
000986D2 8004                       	dc.b	nRst, $04
000986D4 E1FC                       	smpsAlterNote       $FC
000986D6 ECF5                       	smpsPSGAlterVol     $F5
000986D8 8F06                       	dc.b	nD1, $06
000986DA EC0B                       	smpsPSGAlterVol     $0B
000986DC 8006                       	dc.b	nRst, $06
000986DE E1FF                       	smpsAlterNote       $FF
000986E0 01                         	dc.b	$01
000986E1 E102                       	smpsAlterNote       $02
000986E3 0101                       	dc.b	$01, $01
000986E5 E1FC                       	smpsAlterNote       $FC
000986E7 01                         	dc.b	$01
000986E8 E1F8                       	smpsAlterNote       $F8
000986EA 01                         	dc.b	$01
000986EB E1F9                       	smpsAlterNote       $F9
000986ED 01                         	dc.b	$01
000986EE E1FF                       	smpsAlterNote       $FF
000986F0 01                         	dc.b	$01
000986F1 E103                       	smpsAlterNote       $03
000986F3 01                         	dc.b	$01
000986F4 E1FC                       	smpsAlterNote       $FC
000986F6 ECF5                       	smpsPSGAlterVol     $F5
000986F8 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000986FC EC04                       	smpsPSGAlterVol     $04
000986FE E701                       	dc.b	smpsNoAttack, $01
00098700 EC07                       	smpsPSGAlterVol     $07
00098702 8009                       	dc.b	nRst, $09
00098704 E1FF                       	smpsAlterNote       $FF
00098706 01                         	dc.b	$01
00098707 E102                       	smpsAlterNote       $02
00098709 0101                       	dc.b	$01, $01
0009870B E1FC                       	smpsAlterNote       $FC
0009870D 01                         	dc.b	$01
0009870E E1F8                       	smpsAlterNote       $F8
00098710 01                         	dc.b	$01
00098711 E1F9                       	smpsAlterNote       $F9
00098713 01                         	dc.b	$01
00098714 E1FF                       	smpsAlterNote       $FF
00098716 01                         	dc.b	$01
00098717 E103                       	smpsAlterNote       $03
00098719 01                         	dc.b	$01
0009871A E1FF                       	smpsAlterNote       $FF
0009871C 01                         	dc.b	$01
0009871D E1FC                       	smpsAlterNote       $FC
0009871F 01                         	dc.b	$01
00098720 E1F8                       	smpsAlterNote       $F8
00098722 01                         	dc.b	$01
00098723 E1FC                       	smpsAlterNote       $FC
00098725 01                         	dc.b	$01
00098726 E102                       	smpsAlterNote       $02
00098728 01                         	dc.b	$01
00098729 E103                       	smpsAlterNote       $03
0009872B 01                         	dc.b	$01
0009872C E1FF                       	smpsAlterNote       $FF
0009872E 01                         	dc.b	$01
0009872F E1FC                       	smpsAlterNote       $FC
00098731 ECF5                       	smpsPSGAlterVol     $F5
00098733 8F03                       	dc.b	nD1, $03
00098735 E1FB                       	smpsAlterNote       $FB
00098737 8D06                       	dc.b	nC1, $06
00098739 EC04                       	smpsPSGAlterVol     $04
0009873B E701                       	dc.b	smpsNoAttack, $01
0009873D EC07                       	smpsPSGAlterVol     $07
0009873F 8006                       	dc.b	nRst, $06
00098741 E1FE                       	smpsAlterNote       $FE
00098743 01                         	dc.b	$01
00098744 E102                       	smpsAlterNote       $02
00098746 01                         	dc.b	$01
00098747 E101                       	smpsAlterNote       $01
00098749 01                         	dc.b	$01
0009874A E1FB                       	smpsAlterNote       $FB
0009874C 01                         	dc.b	$01
0009874D E1F7                       	smpsAlterNote       $F7
0009874F 01                         	dc.b	$01
00098750 E1FB                       	smpsAlterNote       $FB
00098752 01                         	dc.b	$01
00098753 E1FE                       	smpsAlterNote       $FE
00098755 01                         	dc.b	$01
00098756 E102                       	smpsAlterNote       $02
00098758 01                         	dc.b	$01
00098759 E1FB                       	smpsAlterNote       $FB
0009875B ECF5                       	smpsPSGAlterVol     $F5
0009875D 8D03                       	dc.b	nC1, $03
0009875F E1FC                       	smpsAlterNote       $FC
00098761 8F0D                       	dc.b	nD1, $0D
00098763 E1FF                       	smpsAlterNote       $FF
00098765 E701                       	dc.b	smpsNoAttack, $01
00098767 E103                       	smpsAlterNote       $03
00098769 E701                       	dc.b	smpsNoAttack, $01
0009876B E1FF                       	smpsAlterNote       $FF
0009876D E701                       	dc.b	smpsNoAttack, $01
0009876F E1FC                       	smpsAlterNote       $FC
00098771 E701                       	dc.b	smpsNoAttack, $01
00098773 E1F8                       	smpsAlterNote       $F8
00098775 E701                       	dc.b	smpsNoAttack, $01
00098777 E1FC                       	smpsAlterNote       $FC
00098779 E701                       	dc.b	smpsNoAttack, $01
0009877B E102                       	smpsAlterNote       $02
0009877D E701                       	dc.b	smpsNoAttack, $01
0009877F E103                       	smpsAlterNote       $03
00098781 E701                       	dc.b	smpsNoAttack, $01
00098783 E1FF                       	smpsAlterNote       $FF
00098785 E701                       	dc.b	smpsNoAttack, $01
00098787 E1F9                       	smpsAlterNote       $F9
00098789 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009878D E1FC                       	smpsAlterNote       $FC
0009878F E701                       	dc.b	smpsNoAttack, $01
00098791 E102                       	smpsAlterNote       $02
00098793 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098797 E1FF                       	smpsAlterNote       $FF
00098799 E701                       	dc.b	smpsNoAttack, $01
0009879B E1F9                       	smpsAlterNote       $F9
0009879D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987A1 E1FF                       	smpsAlterNote       $FF
000987A3 EC04                       	smpsPSGAlterVol     $04
000987A5 E701                       	dc.b	smpsNoAttack, $01
000987A7 EC07                       	smpsPSGAlterVol     $07
000987A9 E103                       	smpsAlterNote       $03
000987AB 8001                       	dc.b	nRst, $01
000987AD E102                       	smpsAlterNote       $02
000987AF 01                         	dc.b	$01
000987B0 E1FB                       	smpsAlterNote       $FB
000987B2 01                         	dc.b	$01
000987B3 E1F7                       	smpsAlterNote       $F7
000987B5 01                         	dc.b	$01
000987B6 E1FB                       	smpsAlterNote       $FB
000987B8 01                         	dc.b	$01
000987B9 E1FF                       	smpsAlterNote       $FF
000987BB 01                         	dc.b	$01
000987BC E103                       	smpsAlterNote       $03
000987BE 01                         	dc.b	$01
000987BF E1FB                       	smpsAlterNote       $FB
000987C1 ECF5                       	smpsPSGAlterVol     $F5
000987C3 8E06                       	dc.b	nCs1, $06
000987C5 EC04                       	smpsPSGAlterVol     $04
000987C7 E701                       	dc.b	smpsNoAttack, $01
000987C9 EC07                       	smpsPSGAlterVol     $07
000987CB 8003                       	dc.b	nRst, $03
000987CD ECF5                       	smpsPSGAlterVol     $F5
000987CF 8E06                       	dc.b	nCs1, $06
000987D1 EC04                       	smpsPSGAlterVol     $04
000987D3 E701                       	dc.b	smpsNoAttack, $01
000987D5 EC07                       	smpsPSGAlterVol     $07
000987D7 8006                       	dc.b	nRst, $06
000987D9 E1FE                       	smpsAlterNote       $FE
000987DB 01                         	dc.b	$01
000987DC E102                       	smpsAlterNote       $02
000987DE 01                         	dc.b	$01
000987DF E1FE                       	smpsAlterNote       $FE
000987E1 01                         	dc.b	$01
000987E2 E1FC                       	smpsAlterNote       $FC
000987E4 01                         	dc.b	$01
000987E5 ECF5                       	smpsPSGAlterVol     $F5
000987E7 8F06                       	dc.b	nD1, $06
000987E9 EC04                       	smpsPSGAlterVol     $04
000987EB E701                       	dc.b	smpsNoAttack, $01
000987ED EC07                       	smpsPSGAlterVol     $07
000987EF 8003                       	dc.b	nRst, $03
000987F1 ECF5                       	smpsPSGAlterVol     $F5
000987F3 8F07                       	dc.b	nD1, $07
000987F5 EC0B                       	smpsPSGAlterVol     $0B
000987F7 8007                       	dc.b	nRst, $07
000987F9 E102                       	smpsAlterNote       $02
000987FB 0101                       	dc.b	$01, $01
000987FD E1FB                       	smpsAlterNote       $FB
000987FF 01                         	dc.b	$01
00098800 E1F8                       	smpsAlterNote       $F8
00098802 01                         	dc.b	$01
00098803 E1FB                       	smpsAlterNote       $FB
00098805 ECF5                       	smpsPSGAlterVol     $F5
00098807 8E06                       	dc.b	nCs1, $06
00098809 EC0B                       	smpsPSGAlterVol     $0B
0009880B 8004                       	dc.b	nRst, $04
0009880D ECF5                       	smpsPSGAlterVol     $F5
0009880F 8E06                       	dc.b	nCs1, $06
00098811 EC04                       	smpsPSGAlterVol     $04
00098813 E701                       	dc.b	smpsNoAttack, $01
00098815 EC07                       	smpsPSGAlterVol     $07
00098817 8006                       	dc.b	nRst, $06
00098819 E1FE                       	smpsAlterNote       $FE
0009881B 01                         	dc.b	$01
0009881C E102                       	smpsAlterNote       $02
0009881E 01                         	dc.b	$01
0009881F E1FE                       	smpsAlterNote       $FE
00098821 01                         	dc.b	$01
00098822 E1F9                       	smpsAlterNote       $F9
00098824 01                         	dc.b	$01
00098825 E1FC                       	smpsAlterNote       $FC
00098827 ECF5                       	smpsPSGAlterVol     $F5
00098829 8F06                       	dc.b	nD1, $06
0009882B EC04                       	smpsPSGAlterVol     $04
0009882D E701                       	dc.b	smpsNoAttack, $01
0009882F EC07                       	smpsPSGAlterVol     $07
00098831 8003                       	dc.b	nRst, $03
00098833 ECF5                       	smpsPSGAlterVol     $F5
00098835 8F06                       	dc.b	nD1, $06
00098837 EC04                       	smpsPSGAlterVol     $04
00098839 E701                       	dc.b	smpsNoAttack, $01
0009883B EC07                       	smpsPSGAlterVol     $07
0009883D 8006                       	dc.b	nRst, $06
0009883F E1FF                       	smpsAlterNote       $FF
00098841 01                         	dc.b	$01
00098842 E103                       	smpsAlterNote       $03
00098844 01                         	dc.b	$01
00098845 E102                       	smpsAlterNote       $02
00098847 01                         	dc.b	$01
00098848 E1FB                       	smpsAlterNote       $FB
0009884A 01                         	dc.b	$01
0009884B ECF5                       	smpsPSGAlterVol     $F5
0009884D 8E07                       	dc.b	nCs1, $07
0009884F EC0B                       	smpsPSGAlterVol     $0B
00098851 8004                       	dc.b	nRst, $04
00098853 ECF5                       	smpsPSGAlterVol     $F5
00098855 8E06                       	dc.b	nCs1, $06
00098857 EC0B                       	smpsPSGAlterVol     $0B
00098859 8007                       	dc.b	nRst, $07
0009885B E101                       	smpsAlterNote       $01
0009885D 0101                       	dc.b	$01, $01
0009885F E1FE                       	smpsAlterNote       $FE
00098861 01                         	dc.b	$01
00098862 E1F9                       	smpsAlterNote       $F9
00098864 01                         	dc.b	$01
00098865 E1FC                       	smpsAlterNote       $FC
00098867 ECF5                       	smpsPSGAlterVol     $F5
00098869 8F06                       	dc.b	nD1, $06
0009886B EC04                       	smpsPSGAlterVol     $04
0009886D E701                       	dc.b	smpsNoAttack, $01
0009886F EC07                       	smpsPSGAlterVol     $07
00098871 8003                       	dc.b	nRst, $03
00098873 ECF5                       	smpsPSGAlterVol     $F5
00098875 8F06                       	dc.b	nD1, $06
00098877 EC04                       	smpsPSGAlterVol     $04
00098879 E701                       	dc.b	smpsNoAttack, $01
0009887B EC07                       	smpsPSGAlterVol     $07
0009887D 8006                       	dc.b	nRst, $06
0009887F E1FF                       	smpsAlterNote       $FF
00098881 01                         	dc.b	$01
00098882 E103                       	smpsAlterNote       $03
00098884 01                         	dc.b	$01
00098885 E1FF                       	smpsAlterNote       $FF
00098887 01                         	dc.b	$01
00098888 E1FB                       	smpsAlterNote       $FB
0009888A 01                         	dc.b	$01
0009888B ECF5                       	smpsPSGAlterVol     $F5
0009888D 8E06                       	dc.b	nCs1, $06
0009888F EC04                       	smpsPSGAlterVol     $04
00098891 E701                       	dc.b	smpsNoAttack, $01
00098893 EC07                       	smpsPSGAlterVol     $07
00098895 8003                       	dc.b	nRst, $03
00098897 ECF5                       	smpsPSGAlterVol     $F5
00098899 8E07                       	dc.b	nCs1, $07
0009889B E1FF                       	smpsAlterNote       $FF
0009889D 9B06                       	dc.b	nD2, $06
0009889F EC04                       	smpsPSGAlterVol     $04
000988A1 E701                       	dc.b	smpsNoAttack, $01
000988A3 ECFC                       	smpsPSGAlterVol     $FC
000988A5 9B03                       	dc.b	nD2, $03
000988A7 EC04                       	smpsPSGAlterVol     $04
000988A9 E701                       	dc.b	smpsNoAttack, $01
000988AB ECFC                       	smpsPSGAlterVol     $FC
000988AD 9B02                       	dc.b	nD2, $02
000988AF EC04                       	smpsPSGAlterVol     $04
000988B1 E701                       	dc.b	smpsNoAttack, $01
000988B3 ECFC                       	smpsPSGAlterVol     $FC
000988B5 E1FE                       	smpsAlterNote       $FE
000988B7 9A03                       	dc.b	nCs2, $03
000988B9 EC0B                       	smpsPSGAlterVol     $0B
000988BB 800A                       	dc.b	nRst, $0A
000988BD E102                       	smpsAlterNote       $02
000988BF 01                         	dc.b	$01
000988C0 E10A                       	smpsAlterNote       $0A
000988C2 01                         	dc.b	$01
000988C3 E102                       	smpsAlterNote       $02
000988C5 01                         	dc.b	$01
000988C6 E1F7                       	smpsAlterNote       $F7
000988C8 01                         	dc.b	$01
000988C9 E10A                       	smpsAlterNote       $0A
000988CB 01                         	dc.b	$01
000988CC E1FC                       	smpsAlterNote       $FC
000988CE 01                         	dc.b	$01
000988CF E108                       	smpsAlterNote       $08
000988D1 0101                       	dc.b	$01, $01
000988D3 E102                       	smpsAlterNote       $02
000988D5 01                         	dc.b	$01
000988D6 E1F7                       	smpsAlterNote       $F7
000988D8 0101                       	dc.b	$01, $01
000988DA E1FC                       	smpsAlterNote       $FC
000988DC ECF5                       	smpsPSGAlterVol     $F5
000988DE 8F06                       	dc.b	nD1, $06
000988E0 EC04                       	smpsPSGAlterVol     $04
000988E2 E701                       	dc.b	smpsNoAttack, $01
000988E4 EC07                       	smpsPSGAlterVol     $07
000988E6 8003                       	dc.b	nRst, $03
000988E8 ECF5                       	smpsPSGAlterVol     $F5
000988EA 8F06                       	dc.b	nD1, $06
000988EC EC04                       	smpsPSGAlterVol     $04
000988EE E701                       	dc.b	smpsNoAttack, $01
000988F0 EC07                       	smpsPSGAlterVol     $07
000988F2 8006                       	dc.b	nRst, $06
000988F4 E1FF                       	smpsAlterNote       $FF
000988F6 01                         	dc.b	$01
000988F7 E102                       	smpsAlterNote       $02
000988F9 01                         	dc.b	$01
000988FA E101                       	smpsAlterNote       $01
000988FC 01                         	dc.b	$01
000988FD E1FC                       	smpsAlterNote       $FC
000988FF 01                         	dc.b	$01
00098900 ECF5                       	smpsPSGAlterVol     $F5
00098902 9007                       	dc.b	nEb1, $07
00098904 EC0B                       	smpsPSGAlterVol     $0B
00098906 8004                       	dc.b	nRst, $04
00098908 ECF5                       	smpsPSGAlterVol     $F5
0009890A 9006                       	dc.b	nEb1, $06
0009890C EC0B                       	smpsPSGAlterVol     $0B
0009890E 8007                       	dc.b	nRst, $07
00098910 E103                       	smpsAlterNote       $03
00098912 0101                       	dc.b	$01, $01
00098914 E1FF                       	smpsAlterNote       $FF
00098916 01                         	dc.b	$01
00098917 E1F9                       	smpsAlterNote       $F9
00098919 01                         	dc.b	$01
0009891A E1FC                       	smpsAlterNote       $FC
0009891C ECF5                       	smpsPSGAlterVol     $F5
0009891E 8F06                       	dc.b	nD1, $06
00098920 EC04                       	smpsPSGAlterVol     $04
00098922 E701                       	dc.b	smpsNoAttack, $01
00098924 EC07                       	smpsPSGAlterVol     $07
00098926 8003                       	dc.b	nRst, $03
00098928 ECF5                       	smpsPSGAlterVol     $F5
0009892A 8F06                       	dc.b	nD1, $06
0009892C EC04                       	smpsPSGAlterVol     $04
0009892E E701                       	dc.b	smpsNoAttack, $01
00098930 EC07                       	smpsPSGAlterVol     $07
00098932 8006                       	dc.b	nRst, $06
00098934 E1FF                       	smpsAlterNote       $FF
00098936 01                         	dc.b	$01
00098937 E103                       	smpsAlterNote       $03
00098939 01                         	dc.b	$01
0009893A E1FF                       	smpsAlterNote       $FF
0009893C 01                         	dc.b	$01
0009893D E1F9                       	smpsAlterNote       $F9
0009893F 01                         	dc.b	$01
00098940 E1FC                       	smpsAlterNote       $FC
00098942 ECF5                       	smpsPSGAlterVol     $F5
00098944 8F06                       	dc.b	nD1, $06
00098946 EC04                       	smpsPSGAlterVol     $04
00098948 E701                       	dc.b	smpsNoAttack, $01
0009894A EC07                       	smpsPSGAlterVol     $07
0009894C 8003                       	dc.b	nRst, $03
0009894E ECF5                       	smpsPSGAlterVol     $F5
00098950 8F07                       	dc.b	nD1, $07
00098952 EC0B                       	smpsPSGAlterVol     $0B
00098954 8006                       	dc.b	nRst, $06
00098956 E1FF                       	smpsAlterNote       $FF
00098958 01                         	dc.b	$01
00098959 E102                       	smpsAlterNote       $02
0009895B 0101                       	dc.b	$01, $01
0009895D E1FC                       	smpsAlterNote       $FC
0009895F 01                         	dc.b	$01
00098960 ECF5                       	smpsPSGAlterVol     $F5
00098962 8F07                       	dc.b	nD1, $07
00098964 EC0B                       	smpsPSGAlterVol     $0B
00098966 8004                       	dc.b	nRst, $04
00098968 ECF5                       	smpsPSGAlterVol     $F5
0009896A 8F06                       	dc.b	nD1, $06
0009896C EC04                       	smpsPSGAlterVol     $04
0009896E E701                       	dc.b	smpsNoAttack, $01
00098970 EC07                       	smpsPSGAlterVol     $07
00098972 8006                       	dc.b	nRst, $06
00098974 E101                       	smpsAlterNote       $01
00098976 01                         	dc.b	$01
00098977 E102                       	smpsAlterNote       $02
00098979 01                         	dc.b	$01
0009897A E1FF                       	smpsAlterNote       $FF
0009897C 01                         	dc.b	$01
0009897D E1F9                       	smpsAlterNote       $F9
0009897F 01                         	dc.b	$01
00098980 E1FC                       	smpsAlterNote       $FC
00098982 ECF5                       	smpsPSGAlterVol     $F5
00098984 9006                       	dc.b	nEb1, $06
00098986 EC04                       	smpsPSGAlterVol     $04
00098988 E701                       	dc.b	smpsNoAttack, $01
0009898A EC07                       	smpsPSGAlterVol     $07
0009898C 8003                       	dc.b	nRst, $03
0009898E ECF5                       	smpsPSGAlterVol     $F5
00098990 9006                       	dc.b	nEb1, $06
00098992 EC04                       	smpsPSGAlterVol     $04
00098994 E701                       	dc.b	smpsNoAttack, $01
00098996 EC07                       	smpsPSGAlterVol     $07
00098998 8006                       	dc.b	nRst, $06
0009899A E100                       	smpsAlterNote       $00
0009899C 01                         	dc.b	$01
0009899D E102                       	smpsAlterNote       $02
0009899F 01                         	dc.b	$01
000989A0 E100                       	smpsAlterNote       $00
000989A2 01                         	dc.b	$01
000989A3 E1FF                       	smpsAlterNote       $FF
000989A5 01                         	dc.b	$01
000989A6 ECF5                       	smpsPSGAlterVol     $F5
000989A8 9B06                       	dc.b	nD2, $06
000989AA EC04                       	smpsPSGAlterVol     $04
000989AC E701                       	dc.b	smpsNoAttack, $01
000989AE EC07                       	smpsPSGAlterVol     $07
000989B0 8003                       	dc.b	nRst, $03
000989B2 ECF5                       	smpsPSGAlterVol     $F5
000989B4 9B07                       	dc.b	nD2, $07
000989B6 EC0B                       	smpsPSGAlterVol     $0B
000989B8 8007                       	dc.b	nRst, $07
000989BA E105                       	smpsAlterNote       $05
000989BC 0101                       	dc.b	$01, $01
000989BE E1FF                       	smpsAlterNote       $FF
000989C0 01                         	dc.b	$01
000989C1 E1FC                       	smpsAlterNote       $FC
000989C3 01                         	dc.b	$01
000989C4 E1FF                       	smpsAlterNote       $FF
000989C6 ECF5                       	smpsPSGAlterVol     $F5
000989C8 9B06                       	dc.b	nD2, $06
000989CA EC0B                       	smpsPSGAlterVol     $0B
000989CC 8004                       	dc.b	nRst, $04
000989CE ECF5                       	smpsPSGAlterVol     $F5
000989D0 9B06                       	dc.b	nD2, $06
000989D2 EC04                       	smpsPSGAlterVol     $04
000989D4 E701                       	dc.b	smpsNoAttack, $01
000989D6 EC07                       	smpsPSGAlterVol     $07
000989D8 8006                       	dc.b	nRst, $06
000989DA E102                       	smpsAlterNote       $02
000989DC 01                         	dc.b	$01
000989DD E106                       	smpsAlterNote       $06
000989DF 01                         	dc.b	$01
000989E0 E102                       	smpsAlterNote       $02
000989E2 01                         	dc.b	$01
000989E3 E1FC                       	smpsAlterNote       $FC
000989E5 01                         	dc.b	$01
000989E6 E1FF                       	smpsAlterNote       $FF
000989E8 ECF5                       	smpsPSGAlterVol     $F5
000989EA 9B06                       	dc.b	nD2, $06
000989EC EC04                       	smpsPSGAlterVol     $04
000989EE E701                       	dc.b	smpsNoAttack, $01
000989F0 EC07                       	smpsPSGAlterVol     $07
000989F2 8003                       	dc.b	nRst, $03
000989F4 ECF5                       	smpsPSGAlterVol     $F5
000989F6 9B07                       	dc.b	nD2, $07
000989F8 EC0B                       	smpsPSGAlterVol     $0B
000989FA 8006                       	dc.b	nRst, $06
000989FC E102                       	smpsAlterNote       $02
000989FE 01                         	dc.b	$01
000989FF E105                       	smpsAlterNote       $05
00098A01 0101                       	dc.b	$01, $01
00098A03 E1FF                       	smpsAlterNote       $FF
00098A05 01                         	dc.b	$01
00098A06 ECF5                       	smpsPSGAlterVol     $F5
00098A08 9B07                       	dc.b	nD2, $07
00098A0A EC0B                       	smpsPSGAlterVol     $0B
00098A0C 8004                       	dc.b	nRst, $04
00098A0E ECF5                       	smpsPSGAlterVol     $F5
00098A10 9B06                       	dc.b	nD2, $06
00098A12 EC04                       	smpsPSGAlterVol     $04
00098A14 E701                       	dc.b	smpsNoAttack, $01
00098A16 EC07                       	smpsPSGAlterVol     $07
00098A18 8006                       	dc.b	nRst, $06
00098A1A E105                       	smpsAlterNote       $05
00098A1C 0101                       	dc.b	$01, $01
00098A1E E102                       	smpsAlterNote       $02
00098A20 01                         	dc.b	$01
00098A21 E1FC                       	smpsAlterNote       $FC
00098A23 01                         	dc.b	$01
00098A24 E1FF                       	smpsAlterNote       $FF
00098A26 ECF5                       	smpsPSGAlterVol     $F5
00098A28 9B06                       	dc.b	nD2, $06
00098A2A EC04                       	smpsPSGAlterVol     $04
00098A2C E701                       	dc.b	smpsNoAttack, $01
00098A2E EC07                       	smpsPSGAlterVol     $07
00098A30 8003                       	dc.b	nRst, $03
00098A32 ECF5                       	smpsPSGAlterVol     $F5
00098A34 9B06                       	dc.b	nD2, $06
00098A36 EC04                       	smpsPSGAlterVol     $04
00098A38 E701                       	dc.b	smpsNoAttack, $01
00098A3A EC07                       	smpsPSGAlterVol     $07
00098A3C 8006                       	dc.b	nRst, $06
00098A3E E102                       	smpsAlterNote       $02
00098A40 01                         	dc.b	$01
00098A41 E106                       	smpsAlterNote       $06
00098A43 01                         	dc.b	$01
00098A44 E102                       	smpsAlterNote       $02
00098A46 01                         	dc.b	$01
00098A47 E1FF                       	smpsAlterNote       $FF
00098A49 01                         	dc.b	$01
00098A4A ECF5                       	smpsPSGAlterVol     $F5
00098A4C 9B06                       	dc.b	nD2, $06
00098A4E EC04                       	smpsPSGAlterVol     $04
00098A50 E701                       	dc.b	smpsNoAttack, $01
00098A52 EC07                       	smpsPSGAlterVol     $07
00098A54 8003                       	dc.b	nRst, $03
00098A56 ECF5                       	smpsPSGAlterVol     $F5
00098A58 9B07                       	dc.b	nD2, $07
00098A5A EC0B                       	smpsPSGAlterVol     $0B
00098A5C 8007                       	dc.b	nRst, $07
00098A5E E107                       	smpsAlterNote       $07
00098A60 0101                       	dc.b	$01, $01
00098A62 E1FE                       	smpsAlterNote       $FE
00098A64 01                         	dc.b	$01
00098A65 E1FA                       	smpsAlterNote       $FA
00098A67 0101                       	dc.b	$01, $01
00098A69 E103                       	smpsAlterNote       $03
00098A6B 01                         	dc.b	$01
00098A6C E109                       	smpsAlterNote       $09
00098A6E 01                         	dc.b	$01
00098A6F E107                       	smpsAlterNote       $07
00098A71 01                         	dc.b	$01
00098A72 E1FE                       	smpsAlterNote       $FE
00098A74 01                         	dc.b	$01
00098A75 E108                       	smpsAlterNote       $08
00098A77 01                         	dc.b	$01
00098A78 E1FD                       	smpsAlterNote       $FD
00098A7A ECF5                       	smpsPSGAlterVol     $F5
00098A7C 940E                       	dc.b	nG1, $0E
00098A7E E103                       	smpsAlterNote       $03
00098A80 EC0B                       	smpsPSGAlterVol     $0B
00098A82 8001 01                    	dc.b	nRst, $01, $01
00098A85 E1FD                       	smpsAlterNote       $FD
00098A87 01                         	dc.b	$01
00098A88 E1FB                       	smpsAlterNote       $FB
00098A8A 0101                       	dc.b	$01, $01
00098A8C E100                       	smpsAlterNote       $00
00098A8E 01                         	dc.b	$01
00098A8F E103                       	smpsAlterNote       $03
00098A91 01                         	dc.b	$01
00098A92 E100                       	smpsAlterNote       $00
00098A94 01                         	dc.b	$01
00098A95 E1FD                       	smpsAlterNote       $FD
00098A97 01                         	dc.b	$01
00098A98 E1FA                       	smpsAlterNote       $FA
00098A9A 01                         	dc.b	$01
00098A9B E1FD                       	smpsAlterNote       $FD
00098A9D 01                         	dc.b	$01
00098A9E E103                       	smpsAlterNote       $03
00098AA0 0101                       	dc.b	$01, $01
00098AA2 E100                       	smpsAlterNote       $00
00098AA4 01                         	dc.b	$01
00098AA5 E1FE                       	smpsAlterNote       $FE
00098AA7 ECF5                       	smpsPSGAlterVol     $F5
00098AA9 960D                       	dc.b	nA1, $0D
00098AAB E104                       	smpsAlterNote       $04
00098AAD EC0B                       	smpsPSGAlterVol     $0B
00098AAF 8001 01                    	dc.b	nRst, $01, $01
00098AB2 E101                       	smpsAlterNote       $01
00098AB4 01                         	dc.b	$01
00098AB5 E1FB                       	smpsAlterNote       $FB
00098AB7 0101                       	dc.b	$01, $01
00098AB9 E1FE                       	smpsAlterNote       $FE
00098ABB 01                         	dc.b	$01
00098ABC E104                       	smpsAlterNote       $04
00098ABE 0101                       	dc.b	$01, $01
00098AC0 E1FE                       	smpsAlterNote       $FE
00098AC2 01                         	dc.b	$01
00098AC3 E1FB                       	smpsAlterNote       $FB
00098AC5 0101                       	dc.b	$01, $01
00098AC7 E101                       	smpsAlterNote       $01
00098AC9 01                         	dc.b	$01
00098ACA E104                       	smpsAlterNote       $04
00098ACC 0101                       	dc.b	$01, $01
00098ACE E1FE                       	smpsAlterNote       $FE
00098AD0 ECF5                       	smpsPSGAlterVol     $F5
00098AD2 970D                       	dc.b	nBb1, $0D
00098AD4 E101                       	smpsAlterNote       $01
00098AD6 EC04                       	smpsPSGAlterVol     $04
00098AD8 E701                       	dc.b	smpsNoAttack, $01
00098ADA EC07                       	smpsPSGAlterVol     $07
00098ADC E104                       	smpsAlterNote       $04
00098ADE 8001                       	dc.b	nRst, $01
00098AE0 E103                       	smpsAlterNote       $03
00098AE2 01                         	dc.b	$01
00098AE3 E1FE                       	smpsAlterNote       $FE
00098AE5 01                         	dc.b	$01
00098AE6 E1FA                       	smpsAlterNote       $FA
00098AE8 01                         	dc.b	$01
00098AE9 E1FE                       	smpsAlterNote       $FE
00098AEB 01                         	dc.b	$01
00098AEC E101                       	smpsAlterNote       $01
00098AEE 01                         	dc.b	$01
00098AEF E104                       	smpsAlterNote       $04
00098AF1 01                         	dc.b	$01
00098AF2 E101                       	smpsAlterNote       $01
00098AF4 01                         	dc.b	$01
00098AF5 E1FB                       	smpsAlterNote       $FB
00098AF7 01                         	dc.b	$01
00098AF8 E1FA                       	smpsAlterNote       $FA
00098AFA 01                         	dc.b	$01
00098AFB E1FE                       	smpsAlterNote       $FE
00098AFD 01                         	dc.b	$01
00098AFE E103                       	smpsAlterNote       $03
00098B00 0101                       	dc.b	$01, $01
00098B02 E101                       	smpsAlterNote       $01
00098B04 01                         	dc.b	$01
00098B05 E1FE                       	smpsAlterNote       $FE
00098B07 ECF5                       	smpsPSGAlterVol     $F5
00098B09 990D                       	dc.b	nC2, $0D
00098B0B E104                       	smpsAlterNote       $04
00098B0D EC0B                       	smpsPSGAlterVol     $0B
00098B0F 8001 01                    	dc.b	nRst, $01, $01
00098B12 E102                       	smpsAlterNote       $02
00098B14 01                         	dc.b	$01
00098B15 E1FC                       	smpsAlterNote       $FC
00098B17 0101                       	dc.b	$01, $01
00098B19 E102                       	smpsAlterNote       $02
00098B1B 01                         	dc.b	$01
00098B1C E104                       	smpsAlterNote       $04
00098B1E 01                         	dc.b	$01
00098B1F E1FF                       	smpsAlterNote       $FF
00098B21 ECF5                       	smpsPSGAlterVol     $F5
00098B23 9B06                       	dc.b	nD2, $06
00098B25 EC04                       	smpsPSGAlterVol     $04
00098B27 E701                       	dc.b	smpsNoAttack, $01
00098B29 EC07                       	smpsPSGAlterVol     $07
00098B2B 8003                       	dc.b	nRst, $03
00098B2D ECF5                       	smpsPSGAlterVol     $F5
00098B2F 9B07                       	dc.b	nD2, $07
00098B31 EC0B                       	smpsPSGAlterVol     $0B
00098B33 8006                       	dc.b	nRst, $06
00098B35 E101                       	smpsAlterNote       $01
00098B37 01                         	dc.b	$01
00098B38 E104                       	smpsAlterNote       $04
00098B3A 0101                       	dc.b	$01, $01
00098B3C E1FE                       	smpsAlterNote       $FE
00098B3E 01                         	dc.b	$01
00098B3F E1FC                       	smpsAlterNote       $FC
00098B41 01                         	dc.b	$01
00098B42 E1FE                       	smpsAlterNote       $FE
00098B44 ECF5                       	smpsPSGAlterVol     $F5
00098B46 9C06                       	dc.b	nEb2, $06
00098B48 EC0B                       	smpsPSGAlterVol     $0B
00098B4A 8004                       	dc.b	nRst, $04
00098B4C ECF5                       	smpsPSGAlterVol     $F5
00098B4E 9C06                       	dc.b	nEb2, $06
00098B50 EC04                       	smpsPSGAlterVol     $04
00098B52 E701                       	dc.b	smpsNoAttack, $01
00098B54 EC07                       	smpsPSGAlterVol     $07
00098B56 8006                       	dc.b	nRst, $06
00098B58 E105                       	smpsAlterNote       $05
00098B5A 01                         	dc.b	$01
00098B5B E106                       	smpsAlterNote       $06
00098B5D 01                         	dc.b	$01
00098B5E E102                       	smpsAlterNote       $02
00098B60 01                         	dc.b	$01
00098B61 E1FB                       	smpsAlterNote       $FB
00098B63 01                         	dc.b	$01
00098B64 E1FF                       	smpsAlterNote       $FF
00098B66 ECF5                       	smpsPSGAlterVol     $F5
00098B68 9B06                       	dc.b	nD2, $06
00098B6A EC04                       	smpsPSGAlterVol     $04
00098B6C E701                       	dc.b	smpsNoAttack, $01
00098B6E EC07                       	smpsPSGAlterVol     $07
00098B70 8003                       	dc.b	nRst, $03
00098B72 ECF5                       	smpsPSGAlterVol     $F5
00098B74 9B06                       	dc.b	nD2, $06
00098B76 EC04                       	smpsPSGAlterVol     $04
00098B78 E701                       	dc.b	smpsNoAttack, $01
00098B7A EC07                       	smpsPSGAlterVol     $07
00098B7C 8006                       	dc.b	nRst, $06
00098B7E E101                       	smpsAlterNote       $01
00098B80 01                         	dc.b	$01
00098B81 E105                       	smpsAlterNote       $05
00098B83 01                         	dc.b	$01
00098B84 E104                       	smpsAlterNote       $04
00098B86 01                         	dc.b	$01
00098B87 E1FE                       	smpsAlterNote       $FE
00098B89 01                         	dc.b	$01
00098B8A ECF5                       	smpsPSGAlterVol     $F5
00098B8C 9C07                       	dc.b	nEb2, $07
00098B8E EC0B                       	smpsPSGAlterVol     $0B
00098B90 8004                       	dc.b	nRst, $04
00098B92 ECF5                       	smpsPSGAlterVol     $F5
00098B94 9C06                       	dc.b	nEb2, $06
00098B96 EC0B                       	smpsPSGAlterVol     $0B
00098B98 8007                       	dc.b	nRst, $07
00098B9A E105                       	smpsAlterNote       $05
00098B9C 0101                       	dc.b	$01, $01
00098B9E E102                       	smpsAlterNote       $02
00098BA0 01                         	dc.b	$01
00098BA1 E1FB                       	smpsAlterNote       $FB
00098BA3 01                         	dc.b	$01
00098BA4 E1FF                       	smpsAlterNote       $FF
00098BA6 ECF5                       	smpsPSGAlterVol     $F5
00098BA8 9B06                       	dc.b	nD2, $06
00098BAA EC04                       	smpsPSGAlterVol     $04
00098BAC E701                       	dc.b	smpsNoAttack, $01
00098BAE EC07                       	smpsPSGAlterVol     $07
00098BB0 8003                       	dc.b	nRst, $03
00098BB2 ECF5                       	smpsPSGAlterVol     $F5
00098BB4 9B06                       	dc.b	nD2, $06
00098BB6 EC04                       	smpsPSGAlterVol     $04
00098BB8 E701                       	dc.b	smpsNoAttack, $01
00098BBA EC07                       	smpsPSGAlterVol     $07
00098BBC 8006                       	dc.b	nRst, $06
00098BBE E101                       	smpsAlterNote       $01
00098BC0 01                         	dc.b	$01
00098BC1 E105                       	smpsAlterNote       $05
00098BC3 01                         	dc.b	$01
00098BC4 E101                       	smpsAlterNote       $01
00098BC6 01                         	dc.b	$01
00098BC7 E1FC                       	smpsAlterNote       $FC
00098BC9 01                         	dc.b	$01
00098BCA E1FE                       	smpsAlterNote       $FE
00098BCC ECF5                       	smpsPSGAlterVol     $F5
00098BCE 9C06                       	dc.b	nEb2, $06
00098BD0 EC04                       	smpsPSGAlterVol     $04
00098BD2 E701                       	dc.b	smpsNoAttack, $01
00098BD4 EC07                       	smpsPSGAlterVol     $07
00098BD6 8003                       	dc.b	nRst, $03
00098BD8 ECF5                       	smpsPSGAlterVol     $F5
00098BDA 9C07                       	dc.b	nEb2, $07
00098BDC EC0B                       	smpsPSGAlterVol     $0B
00098BDE 8006                       	dc.b	nRst, $06
00098BE0 E102                       	smpsAlterNote       $02
00098BE2 01                         	dc.b	$01
00098BE3 E105                       	smpsAlterNote       $05
00098BE5 0101                       	dc.b	$01, $01
00098BE7 E1FF                       	smpsAlterNote       $FF
00098BE9 01                         	dc.b	$01
00098BEA ECF5                       	smpsPSGAlterVol     $F5
00098BEC 9B07                       	dc.b	nD2, $07
00098BEE EC0B                       	smpsPSGAlterVol     $0B
00098BF0 8004                       	dc.b	nRst, $04
00098BF2 ECF5                       	smpsPSGAlterVol     $F5
00098BF4 9B06                       	dc.b	nD2, $06
00098BF6 EC04                       	smpsPSGAlterVol     $04
00098BF8 E701                       	dc.b	smpsNoAttack, $01
00098BFA EC07                       	smpsPSGAlterVol     $07
00098BFC 8002                       	dc.b	nRst, $02
00098BFE E1FC                       	smpsAlterNote       $FC
00098C00 ECF5                       	smpsPSGAlterVol     $F5
00098C02 9006                       	dc.b	nEb1, $06
00098C04 EC04                       	smpsPSGAlterVol     $04
00098C06 E701                       	dc.b	smpsNoAttack, $01
00098C08 ECFC                       	smpsPSGAlterVol     $FC
00098C0A 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00098C0E EC04                       	smpsPSGAlterVol     $04
00098C10 E701                       	dc.b	smpsNoAttack, $01
00098C12 E1FD                       	smpsAlterNote       $FD
00098C14 ECFC                       	smpsPSGAlterVol     $FC
00098C16 9402                       	dc.b	nG1, $02
00098C18 EC04                       	smpsPSGAlterVol     $04
00098C1A E701                       	dc.b	smpsNoAttack, $01
00098C1C E1FE                       	smpsAlterNote       $FE
00098C1E ECFC                       	smpsPSGAlterVol     $FC
00098C20 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098C24 EC04                       	smpsPSGAlterVol     $04
00098C26 E701                       	dc.b	smpsNoAttack, $01
00098C28 EC07                       	smpsPSGAlterVol     $07
00098C2A 8008                       	dc.b	nRst, $08
00098C2C F6F4 F3                    	smpsJump            music84_Jump06
00098C2F                            
00098C2F                            ; PSG3 Data
00098C2F                            music84_PSG3:
00098C2F F500                       	smpsPSGvoice        $00
00098C31 E1FF                       	smpsAlterNote       $FF
00098C33 EC0F                       	smpsPSGAlterVol     $0F
00098C35 803A                       	dc.b	nRst, $3A
00098C37                            
00098C37                            music84_Jump05:
00098C37 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00098C43 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00098C4D F6FF E8                    	smpsJump            music84_Jump05
00098C50                            
00098C50                            ; DAC Data
00098C50                            music84_DAC:
00098C50 E0C0                       	smpsPan             panCenter, $00
00098C52 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00098C5E 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00098C6A 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00098C76 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098C82 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098C8E 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00098C9A 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098CA6 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00098CB2 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098CBE 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00098CCA 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098CD6 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00098CE2 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098CEE 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098CFA 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00098D06 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00098D12 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00098D1E 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00098D2A 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00098D36 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098D42 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098D4E 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098D5A 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00098D66 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098D72 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00098D7E 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00098D8A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00098D96 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098DA2 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098DAE 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00098DBA 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098DC6 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098DD2 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00098DDE 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00098DEA 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00098DF6 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098E02 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00098E0E 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00098E1A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098E26 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00098E32 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00098E3E 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00098E4A 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098E56 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098E62 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00098E6E 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098E7A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098E86 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00098E92 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00098E9E 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00098EAA 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00098EB6 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00098EC2 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00098ECE 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00098EDA 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098EE6 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00098EF2 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00098EFE 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098F0A 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098F16 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098F22 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00098F2E 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00098F3A 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00098F46 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00098F52 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00098F5E 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00098F6A 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00098F76 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00098F82 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00098F8E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098F9A 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00098FA6 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098FB2 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00098FBE 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00098FCA 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00098FD6 E0C0                       	smpsPan             panCenter, $00
00098FD8 F2                         	smpsStop
00098FD9                            
00098FD9                            music84_Voices:
00098FD9                            ;	Voice $00
00098FD9                            ;	$3D
00098FD9                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00098FD9                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00098FD9                            	smpsVcAlgorithm     $05
00098FD9                            	smpsVcFeedback      $07
00098FD9                            	smpsVcUnusedBits    $00
00098FD9                            	smpsVcDetune        $05, $04, $03, $04
00098FD9                            	smpsVcCoarseFreq    $01, $01, $01, $01
00098FD9                            	smpsVcRateScale     $00, $00, $00, $00
00098FD9                            	smpsVcAttackRate    $11, $11, $11, $11
00098FD9                            	smpsVcAmpMod        $00, $00, $00, $00
00098FD9                            	smpsVcDecayRate1    $00, $00, $00, $0A
00098FD9                            	smpsVcDecayRate2    $00, $00, $00, $0B
00098FD9                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00098FD9                            	smpsVcReleaseRate   $08, $08, $08, $07
00098FD9 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00098FF2                            
00098FF2                            ;	Voice $01
00098FF2                            ;	$04
00098FF2                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00098FF2                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00098FF2                            	smpsVcAlgorithm     $04
00098FF2                            	smpsVcFeedback      $00
00098FF2                            	smpsVcUnusedBits    $00
00098FF2                            	smpsVcDetune        $04, $03, $04, $05
00098FF2                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00098FF2                            	smpsVcRateScale     $00, $01, $00, $01
00098FF2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00098FF2                            	smpsVcAmpMod        $00, $00, $00, $00
00098FF2                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00098FF2                            	smpsVcDecayRate2    $05, $00, $05, $00
00098FF2                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00098FF2                            	smpsVcReleaseRate   $06, $06, $06, $06
00098FF2 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0009900B                            
0009900B                            ;	Voice $02
0009900B                            ;	$30
0009900B                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0009900B                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0009900B                            	smpsVcAlgorithm     $00
0009900B                            	smpsVcFeedback      $06
0009900B                            	smpsVcUnusedBits    $00
0009900B                            	smpsVcDetune        $04, $02, $00, $06
0009900B                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0009900B                            	smpsVcRateScale     $00, $00, $00, $00
0009900B                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0009900B                            	smpsVcAmpMod        $00, $00, $00, $00
0009900B                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0009900B                            	smpsVcDecayRate2    $01, $01, $01, $01
0009900B                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0009900B                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0009900B 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00099024                            
00099024                            ;	Voice $03
00099024                            ;	$3A
00099024                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00099024                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00099024                            	smpsVcAlgorithm     $02
00099024                            	smpsVcFeedback      $07
00099024                            	smpsVcUnusedBits    $00
00099024                            	smpsVcDetune        $04, $06, $02, $00
00099024                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099024                            	smpsVcRateScale     $00, $00, $00, $00
00099024                            	smpsVcAttackRate    $18, $19, $14, $14
00099024                            	smpsVcAmpMod        $00, $00, $00, $00
00099024                            	smpsVcDecayRate1    $09, $0D, $09, $09
00099024                            	smpsVcDecayRate2    $00, $00, $00, $00
00099024                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00099024                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00099024 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009903D                            
0009903D                            ;	Voice $04
0009903D                            ;	$3C
0009903D                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009903D                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009903D                            	smpsVcAlgorithm     $04
0009903D                            	smpsVcFeedback      $07
0009903D                            	smpsVcUnusedBits    $00
0009903D                            	smpsVcDetune        $07, $00, $00, $03
0009903D                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009903D                            	smpsVcRateScale     $00, $00, $00, $00
0009903D                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009903D                            	smpsVcAmpMod        $00, $00, $00, $00
0009903D                            	smpsVcDecayRate1    $00, $00, $00, $00
0009903D                            	smpsVcDecayRate2    $00, $00, $00, $00
0009903D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009903D                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009903D 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00099056                            
00099056                            ;	Voice $05
00099056                            ;	$38
00099056                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00099056                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00099056                            	smpsVcAlgorithm     $00
00099056                            	smpsVcFeedback      $07
00099056                            	smpsVcUnusedBits    $00
00099056                            	smpsVcDetune        $04, $06, $02, $00
00099056                            	smpsVcCoarseFreq    $01, $01, $01, $00
00099056                            	smpsVcRateScale     $00, $00, $00, $00
00099056                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00099056                            	smpsVcAmpMod        $00, $00, $00, $00
00099056                            	smpsVcDecayRate1    $00, $03, $00, $17
00099056                            	smpsVcDecayRate2    $00, $08, $08, $0B
00099056                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00099056                            	smpsVcReleaseRate   $08, $05, $05, $05
00099056 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009906F                            
0009906F                            
00099070 00                         		even
00099070                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D280                            		even
0009D280                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A0DD8 00                         		even
000A0DD8                            Music87:	include	sound\music87.asm; Invincibility
000A0DD8                            triple_Header:
000A0DD8 =00000001                  smpsHeaderStartSong = 1
000A0DD8 0000                       	smpsHeaderVoice     triple_Voices
000A0DDA 0501                       	smpsHeaderChan      $05, $01
000A0DDC 0200                       	smpsHeaderTempo     $02, $00
000A0DDE                            
000A0DE2 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A0DE6 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A0DEA 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A0DEE 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A0DF2 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A0DF8                            
000A0DF8                            ; DAC Data
000A0DF8                            triple_DAC:
000A0DF8 E0C0                       	smpsPan             panCenter, $00
000A0DFA 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A0E00                            
000A0E00                            triple_Loop01:
000A0E00 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A0E03                            
000A0E03                            triple_Loop00:
000A0E03 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A0E0F 06                         	dc.b	$06
000A0E10 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A0E15 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A0E21 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A0E28 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A0E2D 0303 1B                    	dc.b	$03, $03, $1B
000A0E30 E0C0                       	smpsPan             panCenter, $00
000A0E32 F6FF C4                    	smpsJump triple_DAC
000A0E35                            
000A0E35                            ; FM1 Data
000A0E35                            triple_FM1:
000A0E35 E0C0                       	smpsPan             panCenter, $00
000A0E39 8018                       	dc.b	nRst, $18
000A0E3B                            
000A0E3B                            triple_Loop0B:
000A0E3B AC06 B8                    	dc.b	nG3, $06, nG4
000A0E3E F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A0E43                            
000A0E43                            triple_Loop0C:
000A0E43 A7B3                       	dc.b	nD3, nD4
000A0E45 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A0E4A                            
000A0E4A                            triple_Loop0D:
000A0E4A A9B5                       	dc.b	nE3, nE4
000A0E4C F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A0E51 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A0E59 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A0E5E A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A0E6A 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A0E76 AD                         	dc.b	nAb3
000A0E77 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A0E7C 8018                       	dc.b	nRst, $18
000A0E7E E0C0                       	smpsPan             panCenter, $00
000A0E82 F6FF B1                    	smpsJump triple_FM1
000A0E85                            
000A0E85                            ; FM2 Data
000A0E85                            triple_FM2:
000A0E85 E0C0                       	smpsPan             panCenter, $00
000A0E89 8018                       	dc.b	nRst, $18
000A0E8B                            
000A0E8B                            triple_Loop07:
000A0E8B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0E97 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0EA3 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A0EA8 8003                       	dc.b	nRst, $03
000A0EAA                            
000A0EAA                            triple_Loop08:
000A0EAA B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0EB0 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A0EB5 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A0EBB                            
000A0EBB                            triple_Loop09:
000A0EBB C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0EC7 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0ED3 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A0ED8 8003                       	dc.b	nRst, $03
000A0EDA                            
000A0EDA                            triple_Loop0A:
000A0EDA B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0EE0 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A0EE5 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A0EEB E0C0                       	smpsPan             panCenter, $00
000A0EEF F6FF 94                    	smpsJump triple_FM2
000A0EF2                            
000A0EF2                            ; FM3 Data
000A0EF2                            triple_FM3:
000A0EF2 E0C0                       	smpsPan             panCenter, $00
000A0EF6 8018                       	dc.b	nRst, $18
000A0EF8                            
000A0EF8                            triple_Loop06:
000A0EF8 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A0EFF F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A0F04 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A0F10 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A0F1C C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A0F1F F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A0F24 8018                       	dc.b	nRst, $18
000A0F26 E0C0                       	smpsPan             panCenter, $00
000A0F2A F6FF C6                    	smpsJump triple_FM3
000A0F2D                            
000A0F2D                            ; FM4 Data
000A0F2D                            triple_FM4:
000A0F2D E103                       	smpsAlterNote       $03
000A0F31 E0C0                       	smpsPan             panCenter, $00
000A0F33 8018                       	dc.b	nRst, $18
000A0F35                            
000A0F35                            triple_Loop02:
000A0F35 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0F41 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0F4D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A0F52 8003                       	dc.b	nRst, $03
000A0F54                            
000A0F54                            triple_Loop03:
000A0F54 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0F5A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A0F5F B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A0F65                            
000A0F65                            triple_Loop04:
000A0F65 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0F71 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0F7D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A0F82 8003                       	dc.b	nRst, $03
000A0F84                            
000A0F84                            triple_Loop05:
000A0F84 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0F8A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A0F8F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A0F95 E0C0                       	smpsPan             panCenter, $00
000A0F97 F6FF 94                    	smpsJump triple_FM4
000A0F9A                            
000A0F9A                            ; PSG1 Data
000A0F9A                            triple_PSG1:
000A0F9A 8018                       	dc.b	nRst, $18
000A0F9C                            
000A0F9C                            triple_Loop0E:
000A0F9C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A0FA8 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A0FB4 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A0FC0 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A0FC4 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A0FC9 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A0FD5 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A0FE1 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A0FED 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A0FF1                            
000A0FF1                            triple_Loop0F:
000A0FF1 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A0FF7 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A0FFC 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A1002                            
000A1002                            triple_Loop10:
000A1002 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A100E 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A101A 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1026 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A102A F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A102F A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A103B 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1047 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1053 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1057                            
000A1057                            triple_Loop11:
000A1057 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A105D F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A1062 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1068 F500                       	smpsPSGvoice        $00
000A106A F6FF 2E                    	smpsJump triple_PSG1
000A106D                            
000A106D                            triple_Voices:
000A106D                            ;	Voice $00
000A106D                            ;	$3A
000A106D                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A106D                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A106D                            	smpsVcAlgorithm     $02
000A106D                            	smpsVcFeedback      $07
000A106D                            	smpsVcUnusedBits    $00
000A106D                            	smpsVcDetune        $00, $00, $00, $00
000A106D                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A106D                            	smpsVcRateScale     $01, $02, $02, $02
000A106D                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A106D                            	smpsVcAmpMod        $00, $00, $00, $00
000A106D                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A106D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A106D                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A106D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A106D 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A1086                            
000A1086                            ;	Voice $01
000A1086                            ;	$20
000A1086                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A1086                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A1086                            	smpsVcAlgorithm     $00
000A1086                            	smpsVcFeedback      $04
000A1086                            	smpsVcUnusedBits    $00
000A1086                            	smpsVcDetune        $00, $00, $03, $07
000A1086                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A1086                            	smpsVcRateScale     $03, $03, $03, $02
000A1086                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A1086                            	smpsVcAmpMod        $00, $00, $00, $00
000A1086                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A1086                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A1086                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A1086                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1086 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1086 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A10A0 00                         		even
000A10A0                            Music88:	incbin	sound\music88.bin; Extra Life
000A118E                            		even
000A118E                            Music89:	incbin	sound\music89.bin; Special Stage
000A5056 00                         		even
000A5056                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A5220                            		even
000A5220                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A54BA                            		even
000A54BA                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5758                            		even
000A5758                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A5974                            		even
000A5974                            Music8E:	include	sound\fle.asm ;		Act Clear
000A5974                            fle_Header:
000A5974 =00000001                  smpsHeaderStartSong = 1
000A5974 0000                       	smpsHeaderVoice     fle_Voices
000A5976 0603                       	smpsHeaderChan      $06, $03
000A5978 0100                       	smpsHeaderTempo     $01, $00
000A597A                            
000A597E 0000 0000                  	smpsHeaderFM        fle_FM1,	$00, $00
000A5982 0000 0000                  	smpsHeaderFM        fle_FM2,	$00, $00
000A5986 0000 0000                  	smpsHeaderFM        fle_FM3,	$00, $00
000A598A 0000 0000                  	smpsHeaderFM        fle_FM4,	$00, $00
000A598E 0000 0000                  	smpsHeaderFM        fle_FM5,	$00, $00
000A5992 0000 0000 0000             	smpsHeaderPSG       fle_PSG1,	$00, $00, $00, $00
000A5998 0000 0000 0000             	smpsHeaderPSG       fle_PSG2,	$00, $00, $00, $00
000A599E 0000 0000 0000             	smpsHeaderPSG       fle_PSG3,	$00, $00, $00, $00
000A59A4                            
000A59A4                            ; FM1 Data
000A59A4                            fle_FM1:
000A59A4                            ; FM2 Data
000A59A4                            fle_FM2:
000A59A4                            ; FM3 Data
000A59A4                            fle_FM3:
000A59A4 F2                         	smpsStop
000A59A5                            
000A59A5                            ; FM4 Data
000A59A5                            fle_FM4:
000A59A5 E0C0                       	smpsPan             panCenter, $00
000A59A7 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A59AE E60F                       	smpsAlterVol        $0F
000A59B0 A704                       	dc.b	nD3, $04
000A59B2 E606                       	smpsAlterVol        $06
000A59B4 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A59B9 E6FA                       	smpsAlterVol        $FA
000A59BB A705                       	dc.b	nD3, $05
000A59BD E606                       	smpsAlterVol        $06
000A59BF A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A59C4 E6FA                       	smpsAlterVol        $FA
000A59C6 A704                       	dc.b	nD3, $04
000A59C8 E606                       	smpsAlterVol        $06
000A59CA A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A59D0 E6FA                       	smpsAlterVol        $FA
000A59D2 A7                         	dc.b	nD3
000A59D3 E606                       	smpsAlterVol        $06
000A59D5 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A59DA E6FA                       	smpsAlterVol        $FA
000A59DC A704                       	dc.b	nD3, $04
000A59DE E606                       	smpsAlterVol        $06
000A59E0 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A59E6 E6FA                       	smpsAlterVol        $FA
000A59E8 A7                         	dc.b	nD3
000A59E9 E606                       	smpsAlterVol        $06
000A59EB A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A59F1 E6FA                       	smpsAlterVol        $FA
000A59F3 A705                       	dc.b	nD3, $05
000A59F5 E606                       	smpsAlterVol        $06
000A59F7 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A59FC E6FA                       	smpsAlterVol        $FA
000A59FE A7                         	dc.b	nD3
000A59FF E606                       	smpsAlterVol        $06
000A5A01 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5A07 E6FA                       	smpsAlterVol        $FA
000A5A09 A705                       	dc.b	nD3, $05
000A5A0B E606                       	smpsAlterVol        $06
000A5A0D A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5A12 E6FA                       	smpsAlterVol        $FA
000A5A14 A704                       	dc.b	nD3, $04
000A5A16 E606                       	smpsAlterVol        $06
000A5A18 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5A1D E6FA                       	smpsAlterVol        $FA
000A5A1F A705                       	dc.b	nD3, $05
000A5A21 E606                       	smpsAlterVol        $06
000A5A23 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5A28 E6FA                       	smpsAlterVol        $FA
000A5A2A A704                       	dc.b	nD3, $04
000A5A2C E606                       	smpsAlterVol        $06
000A5A2E A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5A33 E6FA                       	smpsAlterVol        $FA
000A5A35 A705                       	dc.b	nD3, $05
000A5A37 E606                       	smpsAlterVol        $06
000A5A39 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5A3E E6FA                       	smpsAlterVol        $FA
000A5A40 A704                       	dc.b	nD3, $04
000A5A42 E606                       	smpsAlterVol        $06
000A5A44 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5A4A E6FA                       	smpsAlterVol        $FA
000A5A4C A7                         	dc.b	nD3
000A5A4D E606                       	smpsAlterVol        $06
000A5A4F A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5A55 E6FA                       	smpsAlterVol        $FA
000A5A57 A705                       	dc.b	nD3, $05
000A5A59 E606                       	smpsAlterVol        $06
000A5A5B A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5A60 E6FA                       	smpsAlterVol        $FA
000A5A62 A7                         	dc.b	nD3
000A5A63 E606                       	smpsAlterVol        $06
000A5A65 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5A6B E6FA                       	smpsAlterVol        $FA
000A5A6D A705                       	dc.b	nD3, $05
000A5A6F E606                       	smpsAlterVol        $06
000A5A71 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5A76 E6FA                       	smpsAlterVol        $FA
000A5A78 A704                       	dc.b	nD3, $04
000A5A7A E606                       	smpsAlterVol        $06
000A5A7C A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5A81 E6FA                       	smpsAlterVol        $FA
000A5A83 A705                       	dc.b	nD3, $05
000A5A85 E606                       	smpsAlterVol        $06
000A5A87 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5A8C E6FA                       	smpsAlterVol        $FA
000A5A8E A704                       	dc.b	nD3, $04
000A5A90 E606                       	smpsAlterVol        $06
000A5A92 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5A97 E6FA                       	smpsAlterVol        $FA
000A5A99 A705                       	dc.b	nD3, $05
000A5A9B E606                       	smpsAlterVol        $06
000A5A9D A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5AA2 E6FA                       	smpsAlterVol        $FA
000A5AA4 A704                       	dc.b	nD3, $04
000A5AA6 E606                       	smpsAlterVol        $06
000A5AA8 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5AAE E6FA                       	smpsAlterVol        $FA
000A5AB0 A7                         	dc.b	nD3
000A5AB1 E606                       	smpsAlterVol        $06
000A5AB3 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5AB8 E6FA                       	smpsAlterVol        $FA
000A5ABA A704                       	dc.b	nD3, $04
000A5ABC E606                       	smpsAlterVol        $06
000A5ABE A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5AC4 E6FA                       	smpsAlterVol        $FA
000A5AC6 A7                         	dc.b	nD3
000A5AC7 E606                       	smpsAlterVol        $06
000A5AC9 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5ACF E6FA                       	smpsAlterVol        $FA
000A5AD1 A705                       	dc.b	nD3, $05
000A5AD3 E606                       	smpsAlterVol        $06
000A5AD5 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5ADA E6FA                       	smpsAlterVol        $FA
000A5ADC A704                       	dc.b	nD3, $04
000A5ADE E606                       	smpsAlterVol        $06
000A5AE0 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5AE5 E6FA                       	smpsAlterVol        $FA
000A5AE7 A705                       	dc.b	nD3, $05
000A5AE9 E606                       	smpsAlterVol        $06
000A5AEB A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5AF0 E6FA                       	smpsAlterVol        $FA
000A5AF2 A704                       	dc.b	nD3, $04
000A5AF4 E606                       	smpsAlterVol        $06
000A5AF6 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5AFB E6FA                       	smpsAlterVol        $FA
000A5AFD A705                       	dc.b	nD3, $05
000A5AFF E606                       	smpsAlterVol        $06
000A5B01 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5B06 E6FA                       	smpsAlterVol        $FA
000A5B08 A704                       	dc.b	nD3, $04
000A5B0A E606                       	smpsAlterVol        $06
000A5B0C A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A5B13 F2                         	smpsStop
000A5B14                            
000A5B14                            ; FM5 Data
000A5B14                            fle_FM5:
000A5B14 E0C0                       	smpsPan             panCenter, $00
000A5B16 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A5B1E E610                       	smpsAlterVol        $10
000A5B20 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A5B29 F2                         	smpsStop
000A5B2A                            
000A5B2A                            ; PSG1 Data
000A5B2A                            fle_PSG1:
000A5B2A 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A5B32 EC02                       	smpsPSGAlterVol     $02
000A5B34 B7                         	dc.b	nFs4
000A5B35 EC03                       	smpsPSGAlterVol     $03
000A5B37 B7                         	dc.b	nFs4
000A5B38 EC03                       	smpsPSGAlterVol     $03
000A5B3A B7                         	dc.b	nFs4
000A5B3B EC03                       	smpsPSGAlterVol     $03
000A5B3D B7                         	dc.b	nFs4
000A5B3E ECF5                       	smpsPSGAlterVol     $F5
000A5B40 B7                         	dc.b	nFs4
000A5B41 EC02                       	smpsPSGAlterVol     $02
000A5B43 B7                         	dc.b	nFs4
000A5B44 EC03                       	smpsPSGAlterVol     $03
000A5B46 B7                         	dc.b	nFs4
000A5B47 EC03                       	smpsPSGAlterVol     $03
000A5B49 B7                         	dc.b	nFs4
000A5B4A ECF8                       	smpsPSGAlterVol     $F8
000A5B4C B7                         	dc.b	nFs4
000A5B4D EC02                       	smpsPSGAlterVol     $02
000A5B4F B7                         	dc.b	nFs4
000A5B50 EC03                       	smpsPSGAlterVol     $03
000A5B52 B7                         	dc.b	nFs4
000A5B53 EC03                       	smpsPSGAlterVol     $03
000A5B55 B7                         	dc.b	nFs4
000A5B56 EC03                       	smpsPSGAlterVol     $03
000A5B58 B7                         	dc.b	nFs4
000A5B59 ECF5                       	smpsPSGAlterVol     $F5
000A5B5B B7                         	dc.b	nFs4
000A5B5C EC02                       	smpsPSGAlterVol     $02
000A5B5E B7                         	dc.b	nFs4
000A5B5F EC03                       	smpsPSGAlterVol     $03
000A5B61 B7                         	dc.b	nFs4
000A5B62 EC03                       	smpsPSGAlterVol     $03
000A5B64 B7                         	dc.b	nFs4
000A5B65 EC03                       	smpsPSGAlterVol     $03
000A5B67 B7                         	dc.b	nFs4
000A5B68 ECF5                       	smpsPSGAlterVol     $F5
000A5B6A B7                         	dc.b	nFs4
000A5B6B EC02                       	smpsPSGAlterVol     $02
000A5B6D B7                         	dc.b	nFs4
000A5B6E EC06                       	smpsPSGAlterVol     $06
000A5B70 B7                         	dc.b	nFs4
000A5B71 EC03                       	smpsPSGAlterVol     $03
000A5B73 B7                         	dc.b	nFs4
000A5B74 ECF5                       	smpsPSGAlterVol     $F5
000A5B76 B7                         	dc.b	nFs4
000A5B77 EC02                       	smpsPSGAlterVol     $02
000A5B79 B7                         	dc.b	nFs4
000A5B7A EC03                       	smpsPSGAlterVol     $03
000A5B7C B7                         	dc.b	nFs4
000A5B7D EC03                       	smpsPSGAlterVol     $03
000A5B7F B7                         	dc.b	nFs4
000A5B80 EC03                       	smpsPSGAlterVol     $03
000A5B82 B7                         	dc.b	nFs4
000A5B83 ECF5                       	smpsPSGAlterVol     $F5
000A5B85 B7                         	dc.b	nFs4
000A5B86 EC02                       	smpsPSGAlterVol     $02
000A5B88 B7                         	dc.b	nFs4
000A5B89 EC03                       	smpsPSGAlterVol     $03
000A5B8B B7                         	dc.b	nFs4
000A5B8C EC03                       	smpsPSGAlterVol     $03
000A5B8E B7                         	dc.b	nFs4
000A5B8F EC03                       	smpsPSGAlterVol     $03
000A5B91 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A5B95 ECF7                       	smpsPSGAlterVol     $F7
000A5B97 A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A5BA3 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A5BAF A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A5BBB A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A5BC7 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A5BD3 F2                         	smpsStop
000A5BD4                            
000A5BD4                            ; PSG2 Data
000A5BD4                            fle_PSG2:
000A5BD4 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A5BDB EC02                       	smpsPSGAlterVol     $02
000A5BDD A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A5BE9 E101                       	smpsAlterNote       $01
000A5BEB AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A5BEF E101                       	smpsAlterNote       $01
000A5BF1 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5BF5 E101                       	smpsAlterNote       $01
000A5BF7 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5BFB E101                       	smpsAlterNote       $01
000A5BFD AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5C01 E101                       	smpsAlterNote       $01
000A5C03 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A5C07 E101                       	smpsAlterNote       $01
000A5C09 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5C0D E101                       	smpsAlterNote       $01
000A5C0F AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A5C13 E101                       	smpsAlterNote       $01
000A5C15 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5C19 E101                       	smpsAlterNote       $01
000A5C1B AB04 80                    	dc.b	nFs3, $04, nRst
000A5C1E E101                       	smpsAlterNote       $01
000A5C20 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5C24 E101                       	smpsAlterNote       $01
000A5C26 AB04 80                    	dc.b	nFs3, $04, nRst
000A5C29 E101                       	smpsAlterNote       $01
000A5C2B AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A5C31 F2                         	smpsStop
000A5C32                            
000A5C32                            ; PSG3 Data
000A5C32                            fle_PSG3:
000A5C32 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A5C38 F3E7                       	smpsPSGform         $E7
000A5C3A E108                       	smpsAlterNote       $08
000A5C3C 0002                       	dc.b	nMaxPSG, $02
000A5C3E EC01                       	smpsPSGAlterVol     $01
000A5C40 E108                       	smpsAlterNote       $08
000A5C42 0005                       	dc.b	nMaxPSG, $05
000A5C44 EC01                       	smpsPSGAlterVol     $01
000A5C46 E108                       	smpsAlterNote       $08
000A5C48 0008                       	dc.b	nMaxPSG, $08
000A5C4A EC01                       	smpsPSGAlterVol     $01
000A5C4C E108                       	smpsAlterNote       $08
000A5C4E 00                         	dc.b	nMaxPSG
000A5C4F EC01                       	smpsPSGAlterVol     $01
000A5C51 E108                       	smpsAlterNote       $08
000A5C53 00                         	dc.b	nMaxPSG
000A5C54 EC01                       	smpsPSGAlterVol     $01
000A5C56 E108                       	smpsAlterNote       $08
000A5C58 0007                       	dc.b	nMaxPSG, $07
000A5C5A EC01                       	smpsPSGAlterVol     $01
000A5C5C E108                       	smpsAlterNote       $08
000A5C5E 0005                       	dc.b	nMaxPSG, $05
000A5C60 EC01                       	smpsPSGAlterVol     $01
000A5C62 E108                       	smpsAlterNote       $08
000A5C64 0007                       	dc.b	nMaxPSG, $07
000A5C66 EC01                       	smpsPSGAlterVol     $01
000A5C68 E108                       	smpsAlterNote       $08
000A5C6A 0004                       	dc.b	nMaxPSG, $04
000A5C6C EC01                       	smpsPSGAlterVol     $01
000A5C6E E108                       	smpsAlterNote       $08
000A5C70 0007                       	dc.b	nMaxPSG, $07
000A5C72 EC01                       	smpsPSGAlterVol     $01
000A5C74 E108                       	smpsAlterNote       $08
000A5C76 0006                       	dc.b	nMaxPSG, $06
000A5C78 EC01                       	smpsPSGAlterVol     $01
000A5C7A E108                       	smpsAlterNote       $08
000A5C7C 0009                       	dc.b	nMaxPSG, $09
000A5C7E EC01                       	smpsPSGAlterVol     $01
000A5C80 E108                       	smpsAlterNote       $08
000A5C82 0007                       	dc.b	nMaxPSG, $07
000A5C84 EC01                       	smpsPSGAlterVol     $01
000A5C86 E108                       	smpsAlterNote       $08
000A5C88 0001                       	dc.b	nMaxPSG, $01
000A5C8A ECFF                       	smpsPSGAlterVol     $FF
000A5C8C E108                       	smpsAlterNote       $08
000A5C8E 00                         	dc.b	nMaxPSG
000A5C8F EC01                       	smpsPSGAlterVol     $01
000A5C91 E108                       	smpsAlterNote       $08
000A5C93 0009                       	dc.b	nMaxPSG, $09
000A5C95 EC01                       	smpsPSGAlterVol     $01
000A5C97 E108                       	smpsAlterNote       $08
000A5C99 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A5CA0 F2                         	smpsStop
000A5CA1                            
000A5CA1                            ; DAC Data
000A5CA1                            fle_DAC:
000A5CA1 8913 8306 8B0D 8389 8989+  	dc.b	dMidTimpani, $13, dTimpani, $06, dVLowTimpani, $0D, dTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dTimpani
000A5CAD 0D83 8319 890D 8888 1A89+  	dc.b	$0D, dTimpani, dTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dTimpani
000A5CB9 068B 0D83 8989 8983 0C83+  	dc.b	$06, dVLowTimpani, $0D, dTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dTimpani, $0C, dTimpani, $0D, dTimpani
000A5CC5 8983 8534 890E 8304 8B09+  	dc.b	dMidTimpani, dTimpani, $85, $34, dMidTimpani, $0E, dTimpani, $04, dVLowTimpani, $09, dTimpani, $0A
000A5CD1 8909 8989 850A 8309 8383+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, $85, $0A, dTimpani, $09, dTimpani, dTimpani, $84, dMidTimpani
000A5CDD 0A88 0988 8289 0581 0983+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dTimpani, $05, dVLowTimpani
000A5CE9 0983 8989 0A89 0983 8805+  	dc.b	$09, dTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dTimpani, dHiTimpani, $05, dMidTimpani, $04
000A5CF5 830A 8909 8382 0182 0482+  	dc.b	dTimpani, $0A, dMidTimpani, $09, dTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A5D01 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A5D0D 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A5D19 0489 0582 0482 0583 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dTimpani, $04, dVLowTimpani, $05, dSnare
000A5D25 8304 8205 8904 8205 8982+  	dc.b	dTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A5D31 0582 8504 8205 8304 8205+  	dc.b	$05, dSnare, $85, $04, dSnare, $05, dTimpani, $04, dSnare, $05, dTimpani, dSnare
000A5D3D 0483 0582 0486 0582 8904+  	dc.b	$04, dTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A5D49 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A5D55 8205 8204 8305 8B82 0483+  	dc.b	dSnare, $05, dSnare, $04, dTimpani, $05, dVLowTimpani, dSnare, $04, dTimpani, $05, dSnare
000A5D61 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dTimpani, $09
000A5D6D 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A5D79 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A5D85 0488 0189 0389 0189 0483+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dTimpani, $01, dTimpani
000A5D91 0383 018B 048B 018B 0482+  	dc.b	$03, dTimpani, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A5D9D 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A5DA9 19                         	dc.b	$19
000A5DAA F2                         	smpsStop
000A5DAB                            
000A5DAB                            fle_Voices:
000A5DAB                            ;	Voice $00
000A5DAB                            ;	$00
000A5DAB                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A5DAB                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A5DAB                            	smpsVcAlgorithm     $00
000A5DAB                            	smpsVcFeedback      $00
000A5DAB                            	smpsVcUnusedBits    $00
000A5DAB                            	smpsVcDetune        $07, $07, $07, $07
000A5DAB                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A5DAB                            	smpsVcRateScale     $00, $00, $00, $00
000A5DAB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A5DAB                            	smpsVcAmpMod        $00, $00, $00, $00
000A5DAB                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A5DAB                            	smpsVcDecayRate2    $12, $00, $00, $00
000A5DAB                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A5DAB                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A5DAB 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5DC4                            
000A5DC4                            ;	Voice $01
000A5DC4                            ;	$25
000A5DC4                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A5DC4                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A5DC4                            	smpsVcAlgorithm     $05
000A5DC4                            	smpsVcFeedback      $04
000A5DC4                            	smpsVcUnusedBits    $00
000A5DC4                            	smpsVcDetune        $07, $00, $00, $00
000A5DC4                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A5DC4                            	smpsVcRateScale     $00, $00, $00, $00
000A5DC4                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A5DC4                            	smpsVcAmpMod        $00, $00, $00, $00
000A5DC4                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A5DC4                            	smpsVcDecayRate2    $00, $00, $00, $00
000A5DC4                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A5DC4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A5DC4 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A5DDD                            
000A5DDD                            
000A5DDE 00                         		even
000A5DDE                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A641E 00                         		even
000A641E                            Music90:	incbin	sound\music90.bin ; Continue
000A67B8 00                         		even
000A67B8                            Music91:	incbin	sound\music91.bin ; Credits
000A7A86                            		even
000A7A86                            Music92:	incbin	sound\music92.bin ; Drowning
000A7DC8 00                         		even
000A7DC8                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A7E98                            		even
000A7E98                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A8B6E 00                         		even
000A8B6E                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A8CBE 00                         		even
000A8CBE                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A8CF8 00                         		even
000A8CF8                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A8D32 00                         		even
000A8D32                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A8D6C 00                         		even
000A8D6C                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A8DA6 00                         		even
000A8DA6                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A8DE0 00                         		even
000A8DE0                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A8E1A 00                         		even
000A8E1A                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A8E54 00                         		even
000A8E54                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A8E8E 00                         		even
000A8E8E                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A937E                            		even
000A937E                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A937E                            GentleBreeze_Header:
000A937E =00000001                  smpsHeaderStartSong = 1
000A937E 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A9380 0603                       	smpsHeaderChan      $06, $03
000A9382 0100                       	smpsHeaderTempo     $01, $00
000A9384                            
000A9388 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A938C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A9390 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A9394 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A9398 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A939C 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A93A2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A93A8 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A93AE                            
000A93AE                            ; PSG3 Data
000A93AE                            GentleBreeze_PSG3:
000A93AE F2                         	smpsStop
000A93AF                            
000A93AF                            ; FM1 Data
000A93AF                            GentleBreeze_FM1:
000A93B1 E0C0                       	smpsPan             panCenter, $00
000A93B3 E1FF                       	smpsAlterNote       $FF
000A93B5 C410                       	dc.b	nG5, $10
000A93B7 E60F                       	smpsAlterVol        $0F
000A93B9 C4                         	dc.b	nG5
000A93BA E6F1                       	smpsAlterVol        $F1
000A93BC E100                       	smpsAlterNote       $00
000A93BE C2                         	dc.b	nF5
000A93BF E60F                       	smpsAlterVol        $0F
000A93C1 08                         	dc.b	$08
000A93C2 E6F1                       	smpsAlterVol        $F1
000A93C4 C010                       	dc.b	nEb5, $10
000A93C6 E60F                       	smpsAlterVol        $0F
000A93C8 C0                         	dc.b	nEb5
000A93C9 E6F1                       	smpsAlterVol        $F1
000A93CB BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A93D1 E60F                       	smpsAlterVol        $0F
000A93D3 C9                         	dc.b	nC6
000A93D4 E6F1                       	smpsAlterVol        $F1
000A93D6 C5                         	dc.b	nAb5
000A93D7 E60F                       	smpsAlterVol        $0F
000A93D9 08                         	dc.b	$08
000A93DA E6F1                       	smpsAlterVol        $F1
000A93DC C010                       	dc.b	nEb5, $10
000A93DE E60F                       	smpsAlterVol        $0F
000A93E0 C0                         	dc.b	nEb5
000A93E1 E6F1                       	smpsAlterVol        $F1
000A93E3 C208                       	dc.b	nF5, $08
000A93E5 E1FF                       	smpsAlterNote       $FF
000A93E7 C410                       	dc.b	nG5, $10
000A93E9 E100                       	smpsAlterNote       $00
000A93EB C5C7                       	dc.b	nAb5, nBb5
000A93ED E60F                       	smpsAlterVol        $0F
000A93EF C7                         	dc.b	nBb5
000A93F0 E6F1                       	smpsAlterVol        $F1
000A93F2 C5                         	dc.b	nAb5
000A93F3 E60F                       	smpsAlterVol        $0F
000A93F5 08                         	dc.b	$08
000A93F6 E6F1                       	smpsAlterVol        $F1
000A93F8 E1FF                       	smpsAlterNote       $FF
000A93FA C410                       	dc.b	nG5, $10
000A93FC E60F                       	smpsAlterVol        $0F
000A93FE C4                         	dc.b	nG5
000A93FF E6F1                       	smpsAlterVol        $F1
000A9401 C4                         	dc.b	nG5
000A9402 E100                       	smpsAlterNote       $00
000A9404 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9409 E60F                       	smpsAlterVol        $0F
000A940B C2                         	dc.b	nF5
000A940C E6F1                       	smpsAlterVol        $F1
000A940E E1FF                       	smpsAlterNote       $FF
000A9410 C4                         	dc.b	nG5
000A9411 E60F                       	smpsAlterVol        $0F
000A9413 08                         	dc.b	$08
000A9414 E6F1                       	smpsAlterVol        $F1
000A9416 10                         	dc.b	$10
000A9417 E60F                       	smpsAlterVol        $0F
000A9419 38                         	dc.b	$38
000A941A E6F1                       	smpsAlterVol        $F1
000A941C 10                         	dc.b	$10
000A941D E60F                       	smpsAlterVol        $0F
000A941F C4                         	dc.b	nG5
000A9420 E6F1                       	smpsAlterVol        $F1
000A9422 E100                       	smpsAlterNote       $00
000A9424 C2                         	dc.b	nF5
000A9425 E60F                       	smpsAlterVol        $0F
000A9427 08                         	dc.b	$08
000A9428 E6F1                       	smpsAlterVol        $F1
000A942A C010                       	dc.b	nEb5, $10
000A942C E60F                       	smpsAlterVol        $0F
000A942E C0                         	dc.b	nEb5
000A942F E6F1                       	smpsAlterVol        $F1
000A9431 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9437 E60F                       	smpsAlterVol        $0F
000A9439 C9                         	dc.b	nC6
000A943A E6F1                       	smpsAlterVol        $F1
000A943C C5                         	dc.b	nAb5
000A943D E60F                       	smpsAlterVol        $0F
000A943F 08                         	dc.b	$08
000A9440 E6F1                       	smpsAlterVol        $F1
000A9442 C010                       	dc.b	nEb5, $10
000A9444 E60F                       	smpsAlterVol        $0F
000A9446 C0                         	dc.b	nEb5
000A9447 E6F1                       	smpsAlterVol        $F1
000A9449 C208                       	dc.b	nF5, $08
000A944B E1FF                       	smpsAlterNote       $FF
000A944D C410                       	dc.b	nG5, $10
000A944F E100                       	smpsAlterNote       $00
000A9451 C5C7                       	dc.b	nAb5, nBb5
000A9453 E60F                       	smpsAlterVol        $0F
000A9455 C7                         	dc.b	nBb5
000A9456 E6F1                       	smpsAlterVol        $F1
000A9458 C5                         	dc.b	nAb5
000A9459 E60F                       	smpsAlterVol        $0F
000A945B 08                         	dc.b	$08
000A945C E6F1                       	smpsAlterVol        $F1
000A945E E1FF                       	smpsAlterNote       $FF
000A9460 C410                       	dc.b	nG5, $10
000A9462 E60F                       	smpsAlterVol        $0F
000A9464 C4                         	dc.b	nG5
000A9465 E6F1                       	smpsAlterVol        $F1
000A9467 C4                         	dc.b	nG5
000A9468 E100                       	smpsAlterNote       $00
000A946A C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A946F E60F                       	smpsAlterVol        $0F
000A9471 28                         	dc.b	$28
000A9472 E6F1                       	smpsAlterVol        $F1
000A9474 C008 10                    	dc.b	nEb5, $08, $10
000A9477 E60F                       	smpsAlterVol        $0F
000A9479 21                         	dc.b	$21
000A947A                            
000A947A                            GentleBreeze_Loop12:
000A947A E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A947D F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A9482 E717                       	dc.b	smpsNoAttack, $17
000A9484 E6F1                       	smpsAlterVol        $F1
000A9486 E1FF                       	smpsAlterNote       $FF
000A9488 C410                       	dc.b	nG5, $10
000A948A E60F                       	smpsAlterVol        $0F
000A948C C4                         	dc.b	nG5
000A948D E6F1                       	smpsAlterVol        $F1
000A948F E100                       	smpsAlterNote       $00
000A9491 C2                         	dc.b	nF5
000A9492 E60F                       	smpsAlterVol        $0F
000A9494 08                         	dc.b	$08
000A9495 E6F1                       	smpsAlterVol        $F1
000A9497 C010                       	dc.b	nEb5, $10
000A9499 E60F                       	smpsAlterVol        $0F
000A949B C0                         	dc.b	nEb5
000A949C E6F1                       	smpsAlterVol        $F1
000A949E BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A94A4 E60F                       	smpsAlterVol        $0F
000A94A6 C9                         	dc.b	nC6
000A94A7 E6F1                       	smpsAlterVol        $F1
000A94A9 C5                         	dc.b	nAb5
000A94AA E60F                       	smpsAlterVol        $0F
000A94AC 08                         	dc.b	$08
000A94AD E6F1                       	smpsAlterVol        $F1
000A94AF C010                       	dc.b	nEb5, $10
000A94B1 E60F                       	smpsAlterVol        $0F
000A94B3 C0                         	dc.b	nEb5
000A94B4 E6F1                       	smpsAlterVol        $F1
000A94B6 C208                       	dc.b	nF5, $08
000A94B8 E1FF                       	smpsAlterNote       $FF
000A94BA C410                       	dc.b	nG5, $10
000A94BC E100                       	smpsAlterNote       $00
000A94BE C5C7                       	dc.b	nAb5, nBb5
000A94C0 E60F                       	smpsAlterVol        $0F
000A94C2 C7                         	dc.b	nBb5
000A94C3 E6F1                       	smpsAlterVol        $F1
000A94C5 C5                         	dc.b	nAb5
000A94C6 E60F                       	smpsAlterVol        $0F
000A94C8 08                         	dc.b	$08
000A94C9 E6F1                       	smpsAlterVol        $F1
000A94CB E1FF                       	smpsAlterNote       $FF
000A94CD C410                       	dc.b	nG5, $10
000A94CF E60F                       	smpsAlterVol        $0F
000A94D1 C4                         	dc.b	nG5
000A94D2 E6F1                       	smpsAlterVol        $F1
000A94D4 C4                         	dc.b	nG5
000A94D5 E100                       	smpsAlterNote       $00
000A94D7 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A94DC E60F                       	smpsAlterVol        $0F
000A94DE C2                         	dc.b	nF5
000A94DF E6F1                       	smpsAlterVol        $F1
000A94E1 E1FF                       	smpsAlterNote       $FF
000A94E3 C4                         	dc.b	nG5
000A94E4 E60F                       	smpsAlterVol        $0F
000A94E6 08                         	dc.b	$08
000A94E7 E6F1                       	smpsAlterVol        $F1
000A94E9 10                         	dc.b	$10
000A94EA E60F                       	smpsAlterVol        $0F
000A94EC 38                         	dc.b	$38
000A94ED E6F1                       	smpsAlterVol        $F1
000A94EF 10                         	dc.b	$10
000A94F0 E60F                       	smpsAlterVol        $0F
000A94F2 C4                         	dc.b	nG5
000A94F3 E6F1                       	smpsAlterVol        $F1
000A94F5 E100                       	smpsAlterNote       $00
000A94F7 C2                         	dc.b	nF5
000A94F8 E60F                       	smpsAlterVol        $0F
000A94FA 08                         	dc.b	$08
000A94FB E6F1                       	smpsAlterVol        $F1
000A94FD C010                       	dc.b	nEb5, $10
000A94FF E60F                       	smpsAlterVol        $0F
000A9501 C0                         	dc.b	nEb5
000A9502 E6F1                       	smpsAlterVol        $F1
000A9504 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A950A E60F                       	smpsAlterVol        $0F
000A950C C9                         	dc.b	nC6
000A950D E6F1                       	smpsAlterVol        $F1
000A950F C5                         	dc.b	nAb5
000A9510 E60F                       	smpsAlterVol        $0F
000A9512 08                         	dc.b	$08
000A9513 E6F1                       	smpsAlterVol        $F1
000A9515 C010                       	dc.b	nEb5, $10
000A9517 E60F                       	smpsAlterVol        $0F
000A9519 C0                         	dc.b	nEb5
000A951A E6F1                       	smpsAlterVol        $F1
000A951C C208                       	dc.b	nF5, $08
000A951E E1FF                       	smpsAlterNote       $FF
000A9520 C410                       	dc.b	nG5, $10
000A9522 E100                       	smpsAlterNote       $00
000A9524 C5C7                       	dc.b	nAb5, nBb5
000A9526 E60F                       	smpsAlterVol        $0F
000A9528 C7                         	dc.b	nBb5
000A9529 E6F1                       	smpsAlterVol        $F1
000A952B C5                         	dc.b	nAb5
000A952C E60F                       	smpsAlterVol        $0F
000A952E 08                         	dc.b	$08
000A952F E6F1                       	smpsAlterVol        $F1
000A9531 E1FF                       	smpsAlterNote       $FF
000A9533 C410                       	dc.b	nG5, $10
000A9535 E60F                       	smpsAlterVol        $0F
000A9537 C4                         	dc.b	nG5
000A9538 E6F1                       	smpsAlterVol        $F1
000A953A C4                         	dc.b	nG5
000A953B E100                       	smpsAlterNote       $00
000A953D C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9542 E60F                       	smpsAlterVol        $0F
000A9544 28                         	dc.b	$28
000A9545 E6F1                       	smpsAlterVol        $F1
000A9547 C008 10                    	dc.b	nEb5, $08, $10
000A954A E60F                       	smpsAlterVol        $0F
000A954C 21                         	dc.b	$21
000A954D E0C0                       	smpsPan             panCenter, $00
000A954F F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A9552                            
000A9552                            ; FM2 Data
000A9552                            GentleBreeze_FM2:
000A9554 E60C                       	smpsAlterVol        $0C
000A9556 E0C0                       	smpsPan             panCenter, $00
000A9558 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9564 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A9570 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A957C 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9588 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9594 A039                       	dc.b	nG2, $39
000A9596                            
000A9596                            GentleBreeze_Jump04:
000A9596 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A9599                            
000A9599                            GentleBreeze_Loop11:
000A9599 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A95A5 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A95B1 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A95BD 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A95C9 A3                         	dc.b	nBb2
000A95CA F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A95CF 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A95DB A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A95E7 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A95F3 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A95FF 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A960B A039                       	dc.b	nG2, $39
000A960D E0C0                       	smpsPan             panCenter, $00
000A960F F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A9612                            
000A9612                            ; FM3 Data
000A9612                            GentleBreeze_FM3:
000A9614 E0C0                       	smpsPan             panCenter, $00
000A9616 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A961E E616                       	smpsAlterVol        $16
000A9620 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9625                            
000A9625                            GentleBreeze_Loop0F:
000A9625 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9629 E1FF                       	smpsAlterNote       $FF
000A962B C4                         	dc.b	nG5
000A962C E100                       	smpsAlterNote       $00
000A962E C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9633 E608                       	smpsAlterVol        $08
000A9635 C080 08                    	dc.b	nEb5, nRst, $08
000A9638 E6F8                       	smpsAlterVol        $F8
000A963A C7                         	dc.b	nBb5
000A963B E1FF                       	smpsAlterNote       $FF
000A963D C4                         	dc.b	nG5
000A963E E100                       	smpsAlterNote       $00
000A9640 C0BB                       	dc.b	nEb5, nBb4
000A9642 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A9647 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A964A E1FF                       	smpsAlterNote       $FF
000A964C C4                         	dc.b	nG5
000A964D E100                       	smpsAlterNote       $00
000A964F C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9654 E608                       	smpsAlterVol        $08
000A9656 C080 08                    	dc.b	nEb5, nRst, $08
000A9659 E6F8                       	smpsAlterVol        $F8
000A965B E1FF                       	smpsAlterNote       $FF
000A965D C4                         	dc.b	nG5
000A965E E100                       	smpsAlterNote       $00
000A9660 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9667 E1FF                       	smpsAlterNote       $FF
000A9669 C4                         	dc.b	nG5
000A966A E100                       	smpsAlterNote       $00
000A966C C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9671 E1FF                       	smpsAlterNote       $FF
000A9673 C4                         	dc.b	nG5
000A9674 E100                       	smpsAlterNote       $00
000A9676 C7                         	dc.b	nBb5
000A9677 E1FF                       	smpsAlterNote       $FF
000A9679 C4                         	dc.b	nG5
000A967A E100                       	smpsAlterNote       $00
000A967C C2C0 01                    	dc.b	nF5, nEb5, $01
000A967F                            
000A967F                            GentleBreeze_Jump03:
000A967F E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A9686 E6FA                       	smpsAlterVol        $FA
000A9688 F4                         	smpsModOff
000A9689 E1FF                       	smpsAlterNote       $FF
000A968B B850                       	dc.b	nG4, $50
000A968D E100                       	smpsAlterNote       $00
000A968F B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A969B E1FF                       	smpsAlterNote       $FF
000A969D B810                       	dc.b	nG4, $10
000A969F E100                       	smpsAlterNote       $00
000A96A1 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A96A6 E1FF                       	smpsAlterNote       $FF
000A96A8 B8                         	dc.b	nG4
000A96A9 E100                       	smpsAlterNote       $00
000A96AB B610                       	dc.b	nF4, $10
000A96AD E1FF                       	smpsAlterNote       $FF
000A96AF B850                       	dc.b	nG4, $50
000A96B1 E100                       	smpsAlterNote       $00
000A96B3 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A96BB E1FF                       	smpsAlterNote       $FF
000A96BD AC08                       	dc.b	nG3, $08
000A96BF E100                       	smpsAlterNote       $00
000A96C1 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A96C6 E1FF                       	smpsAlterNote       $FF
000A96C8 B850                       	dc.b	nG4, $50
000A96CA E100                       	smpsAlterNote       $00
000A96CC BB08                       	dc.b	nBb4, $08
000A96CE E1FF                       	smpsAlterNote       $FF
000A96D0 B8                         	dc.b	nG4
000A96D1 E100                       	smpsAlterNote       $00
000A96D3 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A96D6 E1FF                       	smpsAlterNote       $FF
000A96D8 B810 08                    	dc.b	nG4, $10, $08
000A96DB E100                       	smpsAlterNote       $00
000A96DD B6                         	dc.b	nF4
000A96DE E1FF                       	smpsAlterNote       $FF
000A96E0 B880                       	dc.b	nG4, nRst
000A96E2 E100                       	smpsAlterNote       $00
000A96E4 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A96E7 E1FF                       	smpsAlterNote       $FF
000A96E9 B810                       	dc.b	nG4, $10
000A96EB E100                       	smpsAlterNote       $00
000A96ED B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A96F4 E1FF                       	smpsAlterNote       $FF
000A96F6 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A9704 E606                       	smpsAlterVol        $06
000A9706 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A970B E100                       	smpsAlterNote       $00
000A970D                            
000A970D                            GentleBreeze_Loop10:
000A970D C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9711 E1FF                       	smpsAlterNote       $FF
000A9713 C4                         	dc.b	nG5
000A9714 E100                       	smpsAlterNote       $00
000A9716 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A971B E608                       	smpsAlterVol        $08
000A971D C080 08                    	dc.b	nEb5, nRst, $08
000A9720 E6F8                       	smpsAlterVol        $F8
000A9722 C7                         	dc.b	nBb5
000A9723 E1FF                       	smpsAlterNote       $FF
000A9725 C4                         	dc.b	nG5
000A9726 E100                       	smpsAlterNote       $00
000A9728 C0BB                       	dc.b	nEb5, nBb4
000A972A F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A972F C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9732 E1FF                       	smpsAlterNote       $FF
000A9734 C4                         	dc.b	nG5
000A9735 E100                       	smpsAlterNote       $00
000A9737 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A973C E608                       	smpsAlterVol        $08
000A973E C080 08                    	dc.b	nEb5, nRst, $08
000A9741 E6F8                       	smpsAlterVol        $F8
000A9743 E1FF                       	smpsAlterNote       $FF
000A9745 C4                         	dc.b	nG5
000A9746 E100                       	smpsAlterNote       $00
000A9748 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A974F E1FF                       	smpsAlterNote       $FF
000A9751 C4                         	dc.b	nG5
000A9752 E100                       	smpsAlterNote       $00
000A9754 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9759 E1FF                       	smpsAlterNote       $FF
000A975B C4                         	dc.b	nG5
000A975C E100                       	smpsAlterNote       $00
000A975E C7                         	dc.b	nBb5
000A975F E1FF                       	smpsAlterNote       $FF
000A9761 C4                         	dc.b	nG5
000A9762 E100                       	smpsAlterNote       $00
000A9764 C2C0 01                    	dc.b	nF5, nEb5, $01
000A9767 E0C0                       	smpsPan             panCenter, $00
000A9769 F1                         	smpsModOn
000A976A F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A976D                            
000A976D                            ; FM4 Data
000A976D                            GentleBreeze_FM4:
000A976F E0C0                       	smpsPan             panCenter, $00
000A9771 80                         	dc.b	nRst
000A9772                            
000A9772                            GentleBreeze_Loop0D:
000A9772 7F                         	dc.b	$7F
000A9773 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A9778 77                         	dc.b	$77
000A977B E609                       	smpsAlterVol        $09
000A977D C001                       	dc.b	nEb5, $01
000A977F                            
000A977F                            GentleBreeze_Jump02:
000A977F E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A9784 E607                       	smpsAlterVol        $07
000A9786 E1FF                       	smpsAlterNote       $FF
000A9788 C450                       	dc.b	nG5, $50
000A978A E100                       	smpsAlterNote       $00
000A978C C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A9798 E1FF                       	smpsAlterNote       $FF
000A979A C410                       	dc.b	nG5, $10
000A979C E100                       	smpsAlterNote       $00
000A979E C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A97A3 E1FF                       	smpsAlterNote       $FF
000A97A5 C4                         	dc.b	nG5
000A97A6 E100                       	smpsAlterNote       $00
000A97A8 C210                       	dc.b	nF5, $10
000A97AA E1FF                       	smpsAlterNote       $FF
000A97AC C450                       	dc.b	nG5, $50
000A97AE E100                       	smpsAlterNote       $00
000A97B0 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A97B8 E1FF                       	smpsAlterNote       $FF
000A97BA B808                       	dc.b	nG4, $08
000A97BC E100                       	smpsAlterNote       $00
000A97BE BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A97C3 E1FF                       	smpsAlterNote       $FF
000A97C5 C450                       	dc.b	nG5, $50
000A97C7 E100                       	smpsAlterNote       $00
000A97C9 C708                       	dc.b	nBb5, $08
000A97CB E1FF                       	smpsAlterNote       $FF
000A97CD C4                         	dc.b	nG5
000A97CE E100                       	smpsAlterNote       $00
000A97D0 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A97D3 E1FF                       	smpsAlterNote       $FF
000A97D5 C410 08                    	dc.b	nG5, $10, $08
000A97D8 E100                       	smpsAlterNote       $00
000A97DA C2                         	dc.b	nF5
000A97DB E1FF                       	smpsAlterNote       $FF
000A97DD C480                       	dc.b	nG5, nRst
000A97DF E100                       	smpsAlterNote       $00
000A97E1 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A97E4 E1FF                       	smpsAlterNote       $FF
000A97E6 C410                       	dc.b	nG5, $10
000A97E8 E100                       	smpsAlterNote       $00
000A97EA BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A97F1 E1FF                       	smpsAlterNote       $FF
000A97F3 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A97FB                            
000A97FB                            GentleBreeze_Loop0E:
000A97FB 7F                         	dc.b	$7F
000A97FC F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A9801 77                         	dc.b	$77
000A9802 E100                       	smpsAlterNote       $00
000A9804 C001                       	dc.b	nEb5, $01
000A9806 E6F9                       	smpsAlterVol        $F9
000A9808 E0C0                       	smpsPan             panCenter, $00
000A980A E100                       	smpsAlterNote       $00
000A980C F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A980F                            
000A980F                            ; FM5 Data
000A980F                            GentleBreeze_FM5:
000A9811 E0C0                       	smpsPan             panCenter, $00
000A9813 A5                         	dc.b	nC3
000A9814                            
000A9814                            GentleBreeze_Loop06:
000A9814 10                         	dc.b	$10
000A9815 E607                       	smpsAlterVol        $07
000A9817 A5                         	dc.b	nC3
000A9818 E6F9                       	smpsAlterVol        $F9
000A981A 08                         	dc.b	$08
000A981B E607                       	smpsAlterVol        $07
000A981D A5                         	dc.b	nC3
000A981E E608                       	smpsAlterVol        $08
000A9820 A5                         	dc.b	nC3
000A9821 E6F1                       	smpsAlterVol        $F1
000A9823 18                         	dc.b	$18
000A9824 E607                       	smpsAlterVol        $07
000A9826 10                         	dc.b	$10
000A9827 E608                       	smpsAlterVol        $08
000A9829 A5                         	dc.b	nC3
000A982A E6F1                       	smpsAlterVol        $F1
000A982C A5                         	dc.b	nC3
000A982D F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A9832 A5                         	dc.b	nC3
000A9833                            
000A9833                            GentleBreeze_Loop07:
000A9833 E607                       	smpsAlterVol        $07
000A9835 A5                         	dc.b	nC3
000A9836 E6F9                       	smpsAlterVol        $F9
000A9838 08                         	dc.b	$08
000A9839 E607                       	smpsAlterVol        $07
000A983B A5                         	dc.b	nC3
000A983C E608                       	smpsAlterVol        $08
000A983E A5                         	dc.b	nC3
000A983F E6F1                       	smpsAlterVol        $F1
000A9841 10                         	dc.b	$10
000A9842 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A9847                            
000A9847                            GentleBreeze_Loop08:
000A9847 A5                         	dc.b	nC3
000A9848 E607                       	smpsAlterVol        $07
000A984A A5                         	dc.b	nC3
000A984B E6F9                       	smpsAlterVol        $F9
000A984D 08                         	dc.b	$08
000A984E E607                       	smpsAlterVol        $07
000A9850 A5                         	dc.b	nC3
000A9851 E608                       	smpsAlterVol        $08
000A9853 A5                         	dc.b	nC3
000A9854 E6F1                       	smpsAlterVol        $F1
000A9856 18                         	dc.b	$18
000A9857 E607                       	smpsAlterVol        $07
000A9859 10                         	dc.b	$10
000A985A E608                       	smpsAlterVol        $08
000A985C A5                         	dc.b	nC3
000A985D E6F1                       	smpsAlterVol        $F1
000A985F A5                         	dc.b	nC3
000A9860 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A9865 A5                         	dc.b	nC3
000A9866 E607                       	smpsAlterVol        $07
000A9868 A5                         	dc.b	nC3
000A9869 E6F9                       	smpsAlterVol        $F9
000A986B 08                         	dc.b	$08
000A986C E607                       	smpsAlterVol        $07
000A986E A5                         	dc.b	nC3
000A986F E608                       	smpsAlterVol        $08
000A9871 A5                         	dc.b	nC3
000A9872 E6F1                       	smpsAlterVol        $F1
000A9874 10                         	dc.b	$10
000A9875 E607                       	smpsAlterVol        $07
000A9877 A5                         	dc.b	nC3
000A9878 E6F9                       	smpsAlterVol        $F9
000A987A 08                         	dc.b	$08
000A987B E607                       	smpsAlterVol        $07
000A987D A5                         	dc.b	nC3
000A987E E608                       	smpsAlterVol        $08
000A9880 A5                         	dc.b	nC3
000A9881 E6F1                       	smpsAlterVol        $F1
000A9883 01                         	dc.b	$01
000A9884                            
000A9884                            GentleBreeze_Jump01:
000A9884 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A9887 E607                       	smpsAlterVol        $07
000A9889                            
000A9889                            GentleBreeze_Loop09:
000A9889 10                         	dc.b	$10
000A988A E608                       	smpsAlterVol        $08
000A988C A5                         	dc.b	nC3
000A988D E6F1                       	smpsAlterVol        $F1
000A988F 08                         	dc.b	$08
000A9890 E60F                       	smpsAlterVol        $0F
000A9892 18                         	dc.b	$18
000A9893 E6F8                       	smpsAlterVol        $F8
000A9895 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A989A 10                         	dc.b	$10
000A989B E608                       	smpsAlterVol        $08
000A989D A5                         	dc.b	nC3
000A989E E6F1                       	smpsAlterVol        $F1
000A98A0 08                         	dc.b	$08
000A98A1 E60F                       	smpsAlterVol        $0F
000A98A3 18                         	dc.b	$18
000A98A4 E6F1                       	smpsAlterVol        $F1
000A98A6                            
000A98A6                            GentleBreeze_Loop0A:
000A98A6 10                         	dc.b	$10
000A98A7 E607                       	smpsAlterVol        $07
000A98A9 A5                         	dc.b	nC3
000A98AA E6F9                       	smpsAlterVol        $F9
000A98AC 08                         	dc.b	$08
000A98AD E607                       	smpsAlterVol        $07
000A98AF A5                         	dc.b	nC3
000A98B0 E608                       	smpsAlterVol        $08
000A98B2 A5                         	dc.b	nC3
000A98B3 E6F1                       	smpsAlterVol        $F1
000A98B5 18                         	dc.b	$18
000A98B6 E607                       	smpsAlterVol        $07
000A98B8 10                         	dc.b	$10
000A98B9 E608                       	smpsAlterVol        $08
000A98BB A5                         	dc.b	nC3
000A98BC E6F1                       	smpsAlterVol        $F1
000A98BE A5                         	dc.b	nC3
000A98BF F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A98C4 A5                         	dc.b	nC3
000A98C5                            
000A98C5                            GentleBreeze_Loop0B:
000A98C5 E607                       	smpsAlterVol        $07
000A98C7 A5                         	dc.b	nC3
000A98C8 E6F9                       	smpsAlterVol        $F9
000A98CA 08                         	dc.b	$08
000A98CB E607                       	smpsAlterVol        $07
000A98CD A5                         	dc.b	nC3
000A98CE E608                       	smpsAlterVol        $08
000A98D0 A5                         	dc.b	nC3
000A98D1 E6F1                       	smpsAlterVol        $F1
000A98D3 10                         	dc.b	$10
000A98D4 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A98D9                            
000A98D9                            GentleBreeze_Loop0C:
000A98D9 A5                         	dc.b	nC3
000A98DA E607                       	smpsAlterVol        $07
000A98DC A5                         	dc.b	nC3
000A98DD E6F9                       	smpsAlterVol        $F9
000A98DF 08                         	dc.b	$08
000A98E0 E607                       	smpsAlterVol        $07
000A98E2 A5                         	dc.b	nC3
000A98E3 E608                       	smpsAlterVol        $08
000A98E5 A5                         	dc.b	nC3
000A98E6 E6F1                       	smpsAlterVol        $F1
000A98E8 18                         	dc.b	$18
000A98E9 E607                       	smpsAlterVol        $07
000A98EB 10                         	dc.b	$10
000A98EC E608                       	smpsAlterVol        $08
000A98EE A5                         	dc.b	nC3
000A98EF E6F1                       	smpsAlterVol        $F1
000A98F1 A5                         	dc.b	nC3
000A98F2 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A98F7 A5                         	dc.b	nC3
000A98F8 E607                       	smpsAlterVol        $07
000A98FA A5                         	dc.b	nC3
000A98FB E6F9                       	smpsAlterVol        $F9
000A98FD 08                         	dc.b	$08
000A98FE E607                       	smpsAlterVol        $07
000A9900 A5                         	dc.b	nC3
000A9901 E608                       	smpsAlterVol        $08
000A9903 A5                         	dc.b	nC3
000A9904 E6F1                       	smpsAlterVol        $F1
000A9906 10                         	dc.b	$10
000A9907 E607                       	smpsAlterVol        $07
000A9909 A5                         	dc.b	nC3
000A990A E6F9                       	smpsAlterVol        $F9
000A990C 08                         	dc.b	$08
000A990D E607                       	smpsAlterVol        $07
000A990F A5                         	dc.b	nC3
000A9910 E608                       	smpsAlterVol        $08
000A9912 A5                         	dc.b	nC3
000A9913 E6F1                       	smpsAlterVol        $F1
000A9915 01                         	dc.b	$01
000A9916 E0C0                       	smpsPan             panCenter, $00
000A9918 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A991B                            
000A991B                            ; DAC Data
000A991B                            GentleBreeze_DAC:
000A991B 81                         	dc.b	dKick
000A991C                            
000A991C                            GentleBreeze_Loop00:
000A991C 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9922 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A9927 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9932                            
000A9932                            GentleBreeze_Loop01:
000A9932 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9938 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A993D 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9947                            
000A9947                            GentleBreeze_Jump00:
000A9947 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A994B                            
000A994B                            GentleBreeze_Loop02:
000A994B 81                         	dc.b	dKick
000A994C                            
000A994C                            GentleBreeze_Loop03:
000A994C 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A9958 088A                       	dc.b	$08, dLowTimpani
000A995A F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A995F 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A996B 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A9970 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A9975                            
000A9975                            GentleBreeze_Loop04:
000A9975 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A997B F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A9980 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A998B                            
000A998B                            GentleBreeze_Loop05:
000A998B 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9991 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A9996 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A99A0 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A99A3                            
000A99A3                            ; PSG 1 Data
000A99A3                            GentleBreeze_PSG1:
000A99A3 80                         	dc.b	nRst
000A99A4                            
000A99A4                            GentleBreeze_LoopPSG02:
000A99A4 7F                         	dc.b	$7F
000A99A5 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A99AA 08                         	dc.b	$08
000A99AB EC04                       	smpsPSGAlterVol     $04
000A99AD                            
000A99AD                            GentleBreeze_JumpPSG01:
000A99AD A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A99B9 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A99C1                            
000A99C1                            GentleBreeze_LoopPSG03:
000A99C1 7F                         	dc.b	$7F
000A99C2 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A99C7 08A3 01                    	dc.b	$08, nBb2, $01
000A99CA F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A99CD                            
000A99CD                            ; PSG2 Data
000A99CD                            GentleBreeze_PSG2:
000A99CD 80                         	dc.b	nRst
000A99CE                            
000A99CE                            GentleBreeze_LoopPSG00:
000A99CE 7F                         	dc.b	$7F
000A99CF F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A99D4 08                         	dc.b	$08
000A99D5 EC04                       	smpsPSGAlterVol     $04
000A99D7                            
000A99D7                            GentleBreeze_JumpPSG00:
000A99D7 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A99E3 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A99EB                            
000A99EB                            GentleBreeze_LoopPSG01:
000A99EB 7F                         	dc.b	$7F
000A99EC F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A99F1 08A8 01                    	dc.b	$08, nEb3, $01
000A99F4 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A99F7                            
000A99F7                            GentleBreeze_Voices:
000A99F7                            ;	Voice $00
000A99F7                            ;	$0C
000A99F7                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A99F7                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A99F7                            	smpsVcAlgorithm     $04
000A99F7                            	smpsVcFeedback      $01
000A99F7                            	smpsVcUnusedBits    $00
000A99F7                            	smpsVcDetune        $07, $02, $07, $02
000A99F7                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A99F7                            	smpsVcRateScale     $00, $00, $00, $00
000A99F7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A99F7                            	smpsVcAmpMod        $00, $00, $00, $00
000A99F7                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A99F7                            	smpsVcDecayRate2    $01, $00, $00, $00
000A99F7                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A99F7                            	smpsVcReleaseRate   $09, $01, $04, $03
000A99F7 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A9A10                            
000A9A10                            ;	Voice $01
000A9A10                            ;	$38
000A9A10                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A9A10                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A9A10                            	smpsVcAlgorithm     $00
000A9A10                            	smpsVcFeedback      $07
000A9A10                            	smpsVcUnusedBits    $00
000A9A10                            	smpsVcDetune        $03, $07, $01, $05
000A9A10                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A9A10                            	smpsVcRateScale     $00, $02, $00, $02
000A9A10                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9A10                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A10                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A9A10                            	smpsVcDecayRate2    $00, $00, $10, $00
000A9A10                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9A10                            	smpsVcReleaseRate   $08, $05, $05, $05
000A9A10 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A9A29                            
000A9A29                            ;	Voice $02
000A9A29                            ;	$00
000A9A29                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9A29                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9A29                            	smpsVcAlgorithm     $00
000A9A29                            	smpsVcFeedback      $00
000A9A29                            	smpsVcUnusedBits    $00
000A9A29                            	smpsVcDetune        $00, $00, $00, $00
000A9A29                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9A29                            	smpsVcRateScale     $00, $00, $00, $00
000A9A29                            	smpsVcAttackRate    $00, $00, $00, $00
000A9A29                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A29                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9A29                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9A29                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9A29                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9A29 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9A42                            
000A9A42                            ;	Voice $03
000A9A42                            ;	$36
000A9A42                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A9A42                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A9A42                            	smpsVcAlgorithm     $06
000A9A42                            	smpsVcFeedback      $06
000A9A42                            	smpsVcUnusedBits    $00
000A9A42                            	smpsVcDetune        $00, $00, $00, $00
000A9A42                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A9A42                            	smpsVcRateScale     $00, $00, $00, $00
000A9A42                            	smpsVcAttackRate    $1F, $00, $18, $16
000A9A42                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A42                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A9A42                            	smpsVcDecayRate2    $00, $00, $12, $00
000A9A42                            	smpsVcDecayLevel    $04, $04, $02, $00
000A9A42                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A9A42 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A9A5B                            
000A9A5B                            ;	Voice $04
000A9A5B                            ;	$07
000A9A5B                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A9A5B                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A9A5B                            	smpsVcAlgorithm     $07
000A9A5B                            	smpsVcFeedback      $00
000A9A5B                            	smpsVcUnusedBits    $00
000A9A5B                            	smpsVcDetune        $07, $06, $05, $00
000A9A5B                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A9A5B                            	smpsVcRateScale     $00, $01, $01, $01
000A9A5B                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A9A5B                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A5B                            	smpsVcDecayRate1    $17, $17, $17, $17
000A9A5B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9A5B                            	smpsVcDecayLevel    $02, $02, $02, $02
000A9A5B                            	smpsVcReleaseRate   $06, $06, $06, $06
000A9A5B 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9A74                            
000A9A74                            ;	Voice $05
000A9A74                            ;	$3C
000A9A74                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A9A74                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A9A74                            	smpsVcAlgorithm     $04
000A9A74                            	smpsVcFeedback      $07
000A9A74                            	smpsVcUnusedBits    $00
000A9A74                            	smpsVcDetune        $06, $06, $02, $02
000A9A74                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A9A74                            	smpsVcRateScale     $00, $00, $00, $00
000A9A74                            	smpsVcAttackRate    $0E, $14, $10, $13
000A9A74                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A74                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A9A74                            	smpsVcDecayRate2    $04, $04, $04, $04
000A9A74                            	smpsVcDecayLevel    $02, $01, $01, $01
000A9A74                            	smpsVcReleaseRate   $07, $07, $07, $07
000A9A74 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A9A8D                            
000A9A8D                            
000A9A8E 00                         		even
000A9A8E                            ; ---------------------------------------------------------------------------
000A9A8E                            ; Sound	effect pointers
000A9A8E                            ; ---------------------------------------------------------------------------
000A9A8E 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A9A9A 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A9AA6 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A9AB2 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A9ABE 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A9ACA 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A9AD6 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A9AE2 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A9AEE 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A9AFA 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A9B06 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A9B12 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A9B1E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A9B2A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A9B36 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A9B42 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A9B4E 0000 0000                  SoundD0Index:	dc.l SoundD0
000A9B52                            SoundA0:	include	sound\jump.asm
000A9B52                            jump_Header:
000A9B52 =00000001                  smpsHeaderStartSong = 1
000A9B52 0000                       	smpsHeaderVoice     jump_Voices
000A9B54 01                         	smpsHeaderTempoSFX  $01
000A9B55 01                         	smpsHeaderChanSFX   $01
000A9B56                            
000A9B62                            
000A9B62                            ; FM4 Data
000A9B62                            jump_FM4:
000A9B64 E000                       	smpsPan             panNone, $00
000A9B66 E607                       	smpsAlterVol        $07
000A9B68 E0C0                       	smpsPan             panCenter, $00
000A9B6A 9903 B1                    	dc.b	nC2, $03, nC4
000A9B6D E607                       	smpsAlterVol        $07
000A9B6F E040                       	smpsPan             panRight, $00
000A9B71 99B1                       	dc.b	nC2, nC4
000A9B73 E60A                       	smpsAlterVol        $0A
000A9B75 E080                       	smpsPan             panLeft, $00
000A9B77 99B1                       	dc.b	nC2, nC4
000A9B79 E603                       	smpsAlterVol        $03
000A9B7B E0C0                       	smpsPan             panCenter, $00
000A9B7D 99B1                       	dc.b	nC2, nC4
000A9B7F E000                       	smpsPan             panNone, $00
000A9B81 803D                       	dc.b	nRst, $3D
000A9B83 F2                         	smpsStop
000A9B84                            
000A9B84                            ; PSG3 Data
000A9B84                            jump_PSG3:
000A9B84 F3E7                       	smpsPSGform         $E7
000A9B86 8056                       	dc.b	nRst, $56
000A9B88 F2                         	smpsStop
000A9B89                            
000A9B89                            jump_Voices:
000A9B89                            ;	Voice $00
000A9B89                            ;	$3C
000A9B89                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A9B89                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A9B89                            	smpsVcAlgorithm     $04
000A9B89                            	smpsVcFeedback      $07
000A9B89                            	smpsVcUnusedBits    $00
000A9B89                            	smpsVcDetune        $00, $00, $00, $00
000A9B89                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A9B89                            	smpsVcRateScale     $00, $00, $00, $00
000A9B89                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9B89                            	smpsVcAmpMod        $00, $00, $00, $00
000A9B89                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A9B89                            	smpsVcDecayRate2    $11, $00, $11, $00
000A9B89                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A9B89                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9B89 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9BA2                            
000A9BA2                            
000A9BA2                            		even
000A9BA2                            SoundA1:	incbin	sound\soundA1.bin
000A9BCC                            		even
000A9BCC                            SoundA2:	incbin	sound\soundA2.bin
000A9BEC                            		even
000A9BEC                            SoundA3:	incbin	sound\soundA3.bin
000A9C1E                            		even
000A9C1E                            SoundA4:	incbin	sound\soundA4.bin
000A9C54                            		even
000A9C54                            SoundA5:	include	sound\fart.asm
000A9C54                            Fart_Header:
000A9C54 =00000001                  smpsHeaderStartSong = 1
000A9C54 0000                       	smpsHeaderVoice     Fart_Voices
000A9C56 01                         	smpsHeaderTempoSFX  $01
000A9C57 04                         	smpsHeaderChanSFX   $04
000A9C58                            
000A9C70                            
000A9C70                            Fart_FM3:
000A9C72 E607                       	smpsAlterVol        $07
000A9C74 E0C0                       	smpsPan             panCenter, $00
000A9C76 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9C7B A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A9C7E E1FE                       	smpsAlterNote       $FE
000A9C80 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A9C83 E100                       	smpsAlterNote       $00
000A9C85 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A9C8A F2                         	smpsStop
000A9C8B                            
000A9C8B                            ; FM4 Data
000A9C8B                            Fart_FM4:
000A9C8D E0C0                       	smpsPan             panCenter, $00
000A9C8F 8006                       	dc.b	nRst, $06
000A9C93 E616                       	smpsAlterVol        $16
000A9C95 E080                       	smpsPan             panLeft, $00
000A9C97 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9C9C A212                       	dc.b	nA2, $12
000A9C9E E60A                       	smpsAlterVol        $0A
000A9CA0 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CA3 E603                       	smpsAlterVol        $03
000A9CA5 E7A2                       	dc.b	smpsNoAttack, nA2
000A9CA7 E603                       	smpsAlterVol        $03
000A9CA9 E7A2                       	dc.b	smpsNoAttack, nA2
000A9CAB E604                       	smpsAlterVol        $04
000A9CAD E7A2                       	dc.b	smpsNoAttack, nA2
000A9CAF E606                       	smpsAlterVol        $06
000A9CB1 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A9CB4 E610                       	smpsAlterVol        $10
000A9CB6 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CB9 E610                       	smpsAlterVol        $10
000A9CBB E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A9CC0 F2                         	smpsStop
000A9CC1                            
000A9CC1                            ; FM5 Data
000A9CC1                            Fart_FM5:
000A9CC3 E0C0                       	smpsPan             panCenter, $00
000A9CC5 8009                       	dc.b	nRst, $09
000A9CC9 E616                       	smpsAlterVol        $16
000A9CCB E040                       	smpsPan             panRight, $00
000A9CCD F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9CD2 A215                       	dc.b	nA2, $15
000A9CD4 E60A                       	smpsAlterVol        $0A
000A9CD6 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CD9 E603                       	smpsAlterVol        $03
000A9CDB E7A2                       	dc.b	smpsNoAttack, nA2
000A9CDD E603                       	smpsAlterVol        $03
000A9CDF E7A2                       	dc.b	smpsNoAttack, nA2
000A9CE1 E604                       	smpsAlterVol        $04
000A9CE3 E7A2                       	dc.b	smpsNoAttack, nA2
000A9CE5 E606                       	smpsAlterVol        $06
000A9CE7 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A9CEA E610                       	smpsAlterVol        $10
000A9CEC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CEF E610                       	smpsAlterVol        $10
000A9CF1 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A9CF6 F2                         	smpsStop
000A9CF7                            
000A9CF7                            ; PSG3 Data
000A9CF7                            Fart_PSG3:
000A9CF7 F2                         	smpsStop
000A9CF8                            
000A9CF8                            ; FM Voices
000A9CF8                            Fart_Voices:
000A9CF8                            ;	Voice $00
000A9CF8                            ;	$39
000A9CF8                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A9CF8                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A9CF8                            	smpsVcAlgorithm     $01
000A9CF8                            	smpsVcFeedback      $07
000A9CF8                            	smpsVcUnusedBits    $00
000A9CF8                            	smpsVcDetune        $00, $07, $03, $07
000A9CF8                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A9CF8                            	smpsVcRateScale     $00, $03, $03, $03
000A9CF8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9CF8                            	smpsVcAmpMod        $00, $00, $00, $00
000A9CF8                            	smpsVcDecayRate1    $00, $00, $00, $04
000A9CF8                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A9CF8                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A9CF8                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A9CF8 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A9D11                            
000A9D11                            ;	Voice $01
000A9D11                            ;	$00
000A9D11                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9D11                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9D11                            	smpsVcAlgorithm     $00
000A9D11                            	smpsVcFeedback      $00
000A9D11                            	smpsVcUnusedBits    $00
000A9D11                            	smpsVcDetune        $00, $00, $00, $00
000A9D11                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9D11                            	smpsVcRateScale     $00, $00, $00, $00
000A9D11                            	smpsVcAttackRate    $00, $00, $00, $00
000A9D11                            	smpsVcAmpMod        $00, $00, $00, $00
000A9D11                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9D11                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9D11                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9D11                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9D11 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9D11 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9D2A                            		even
000A9D2A                            SoundA6:	incbin	sound\soundA6.bin
000A9D5A                            		even
000A9D5A                            SoundA7:	incbin	sound\soundA7.bin
000A9D8A                            		even
000A9D8A                            SoundA8:	incbin	sound\soundA8.bin
000A9DBE                            		even
000A9DBE                            SoundA9:	incbin	sound\soundA9.bin
000A9DD0                            		even
000A9DD0                            SoundAA:	incbin	sound\soundAA.bin
000A9E12                            		even
000A9E12                            SoundAB:	incbin	sound\soundAB.bin
000A9E32                            		even
000A9E32                            SoundAC:	incbin	sound\soundAC.bin
000A9E66                            		even
000A9E66                            SoundAD:	incbin	sound\soundAD.bin
000A9E9C                            		even
000A9E9C                            SoundAE:	incbin	sound\soundAE.bin
000A9EE6                            		even
000A9EE6                            SoundAF:	incbin	sound\soundAF.bin
000A9F14                            		even
000A9F14                            SoundB0:	incbin	sound\soundB0.bin
000A9F46                            		even
000A9F46                            SoundB1:	incbin	sound\soundB1.bin
000A9F72                            		even
000A9F72                            SoundB2:	incbin	sound\soundB2.bin
000A9FC2                            		even
000A9FC2                            SoundB3:	incbin	sound\soundB3.bin
000AA00C                            		even
000AA00C                            SoundB4:	include	sound\soundB4.asm
000AA00C                            SndB4_Bumper_Header:
000AA00C =00000001                  smpsHeaderStartSong = 1
000AA00C 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA00E 01                         	smpsHeaderTempoSFX  $01
000AA00F 03                         	smpsHeaderChanSFX   $03
000AA010                            
000AA022                            
000AA022                            ; FM5 Data
000AA022                            SndB4_Bumper_FM5:
000AA024 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA027                            
000AA027                            ; FM4 Data
000AA027                            SndB4_Bumper_FM4:
000AA027 F2                         	smpsStop
000AA028                            
000AA028                            SndB4_Bumper_Jump00:
000AA028 A020                       	dc.b	nG2, $20
000AA02A F2                         	smpsStop
000AA02B                            
000AA02B                            ; FM3 Data
000AA02B                            SndB4_Bumper_FM3:
000AA02B F2                         	smpsStop
000AA02C                            
000AA02C                            SndB4_Bumper_Voices:
000AA02C                            ;	Voice $00
000AA02C                            ;	$32
000AA02C                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA02C                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA02C                            	smpsVcAlgorithm     $02
000AA02C                            	smpsVcFeedback      $06
000AA02C                            	smpsVcUnusedBits    $00
000AA02C                            	smpsVcDetune        $07, $07, $02, $00
000AA02C                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA02C                            	smpsVcRateScale     $00, $00, $00, $00
000AA02C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA02C                            	smpsVcAmpMod        $00, $00, $00, $00
000AA02C                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA02C                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA02C                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA02C                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA02C 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA02C 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA046 00                         		even
000AA046                            SoundB5:	incbin	sound\soundB5.bin
000AA064 00                         		even
000AA064                            SoundB6:	incbin	sound\soundB6.bin
000AA082                            		even
000AA082                            SoundB7:	incbin	sound\soundB7.bin
000AA0BE                            		even
000AA0BE                            SoundB8:	incbin	sound\soundB8.bin
000AA0DC                            		even
000AA0DC                            SoundB9:	incbin	sound\soundB9.bin
000AA140                            		even
000AA140                            SoundBA:	incbin	sound\soundBA.bin
000AA168                            		even
000AA168                            SoundBB:	incbin	sound\soundBB.bin
000AA194                            		even
000AA194                            SoundBC:	incbin	sound\soundBC.bin
000AA1D6                            		even
000AA1D6                            SoundBD:	incbin	sound\soundBD.bin
000AA22A                            		even
000AA22A                            SoundBE:	incbin	sound\soundBE.bin
000AA264                            		even
000AA264                            SoundBF:	incbin	sound\soundBF.bin
000AA2D6                            		even
000AA2D6                            SoundC0:	incbin	sound\soundC0.bin
000AA304                            		even
000AA304                            SoundC1:	incbin	sound\soundC1.bin
000AA35E                            		even
000AA35E                            SoundC2:	incbin	sound\soundC2.bin
000AA388                            		even
000AA388                            SoundC3:	incbin	sound\soundC3.bin
000AA402                            		even
000AA402                            SoundC4:	incbin	sound\soundC4.bin
000AA500                            		even
000AA500                            SoundC5:	incbin	sound\soundC5.bin
000AA568                            		even
000AA568                            SoundC6:	incbin	sound\soundC6.bin
000AA5AA                            		even
000AA5AA                            SoundC7:	incbin	sound\soundC7.bin
000AA5D8                            		even
000AA5D8                            SoundC8:	incbin	sound\soundC8.bin
000AA5EA                            		even
000AA5EA                            SoundC9:	incbin	sound\soundC9.bin
000AA618                            		even
000AA618                            SoundCA:	incbin	sound\soundCA.bin
000AA646                            		even
000AA646                            SoundCB:	incbin	sound\soundCB.bin
000AA692                            		even
000AA692                            SoundCC:	incbin	sound\C9.ssf
000AA6C0                            		even
000AA6C0                            SoundCD:	incbin	sound\soundCD.bin
000AA6EC                            		even
000AA6EC                            SoundCE:	incbin	sound\soundCE.bin
000AA70A 00                         		even
000AA70A                            SoundCF:	incbin	sound\soundCF.bin
000AA742                            		even
000AA742                            SoundD0:	incbin	sound\soundD0.bin
000AA77C                            		even
000AA77C                            SegaPCM:	incbin	sound\segapcm.bin
000C48D2                            SegaPCM_end:	even
000C48D2                            
000C48D2                            IdiotPCM:	incbin	sound\youare.bin
000CE9A4 00                         IdiotPCM_end:	even
000CE9A4                            
000CE9A4                            Minecraft:	include	minecraft\code\main.asm
000CE9A4                            ; Minecraft: Very Legacy Console Edition
000CE9A4                            ; Main file
000CE9A4                            
000CE9A4                            ;	align	$20000
000CE9A4                            	opt	l.
000CE9A4                            	include	"minecraft\code\variables.asm"
000CE9A4                            ; Minecraft: Very Legacy Console Edition
000CE9A4                            ; Variable Definitions
000CE9A4                            
000CE9A4 =00000040                  MAP_HEIGHT	equ	64
000CE9A4 =00000100                  MAP_WIDTH	equ	256
000CE9A4                            
000CE9A4                            		rsset	$FF0000
000CE9A4 =00FF0000                  mcRAM		rs.b	0
000CE9A4 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CE9A4 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CE9A4                            
000CE9A4                            		rsset	$FFFF8000
000CE9A4 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CE9A4 =FFFF8E80                  planeBuffer_End	rs.b	0
000CE9A4 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000CE9A4                            
000CE9A4 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CE9A4 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CE9A4 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CE9A4 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CE9A4                            
000CE9A4                            		rsset	__rs&$FFFFFF
000CE9A4 =00FF8E88                  mcRAM_End	rs.b	0
000CE9A4 =00FF8E88                  mcRAM_End	rs.b	0
000CE9A4                            	include	"minecraft\code\macros.asm"
000CE9A4                            ; =========================================================================================================================================================
000CE9A4                            ; MegaDrive macros
000CE9A4                            ; =========================================================================================================================================================
000CE9A4                            clrRAM		macro	starta, enda
000CE9A4                            		local	endaddr
000CE9A4                            		if narg<2
000CE9A4                            endaddr			EQUS	"\starta\_End"
000CE9A4                            		else
000CE9A4                            endaddr			EQUS	"\enda"
000CE9A4                            		endif
000CE9A4                            
000CE9A4                            		moveq	#0,d0
000CE9A4                            
000CE9A4                            		if ((\starta)&$8000)=0
000CE9A4                            			lea	\starta,a1
000CE9A4                            		else
000CE9A4                            			lea	(\starta).w,a1
000CE9A4                            		endif
000CE9A4                            		if (\starta)&1
000CE9A4                            			move.b	d0,(a1)+
000CE9A4                            		endif
000CE9A4                            
000CE9A4                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000CE9A4                            .Clear\@:	move.l	d0,(a1)+
000CE9A4                            		dbf	d1,.Clear\@
000CE9A4                            
000CE9A4                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000CE9A4                            			move.w	d0,(a1)+
000CE9A4                            		endif
000CE9A4                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000CE9A4                            			move.b	d0,(a1)+
000CE9A4                            		endif
000CE9A4                            		endm
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; Disable interrupts
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; ARGUMENTS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; RETURNS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            intsOff		macros
000CE9A4                            		ori	#$700,sr
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; Enable interrupts
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; ARGUMENTS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; RETURNS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            intsOn		macros
000CE9A4                            		andi	#$F8FF,sr
000CE9A4                            
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; VDP command instruction
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; ARGUMENTS:
000CE9A4                            ;	addr	- Address in VDP memory
000CE9A4                            ;	type	- Type of VDP memory
000CE9A4                            ;	rwd	- VDP command
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; RETURNS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4 =00000021                  VRAM		EQU	%100001		; VRAM
000CE9A4 =0000002B                  CRAM		EQU	%101011		; CRAM
000CE9A4 =00000025                  VSRAM		EQU	%100101		; VSRAM
000CE9A4 =0000000C                  READ		EQU	%001100		; VDP read
000CE9A4 =00000007                  WRITE		EQU	%000111		; VDP write
000CE9A4 =00000027                  DMA		EQU	%100111		; VDP DMA
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000CE9A4                            		if narg=5
000CE9A4                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000CE9A4                            		elseif narg>=6
000CE9A4                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000CE9A4                            		else
000CE9A4                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000CE9A4                            		endif
000CE9A4                            		endm
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; VDP DMA from 68000 memory to VDP memory
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; ARGUMENTS:
000CE9A4                            ;	src	- Source address in 68000 memory
000CE9A4                            ;	dest	- Destination address in VDP memory
000CE9A4                            ;	len	- Length of data in bytes
000CE9A4                            ;	type	- Type of VDP memory
000CE9A4                            ;	a6.l	- VDP control port
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; RETURNS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            dma68k		macro	src, dest, len, type
000CE9A4                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000CE9A4                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000CE9A4                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000CE9A4                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000CE9A4                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000CE9A4                            		move.w	(sp)+,(a6)
000CE9A4                            		endm
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; Fill VRAM with byte
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; ARGUMENTS:
000CE9A4                            ;	byte	- Byte to fill VRAM with
000CE9A4                            ;	addr	- Address in VRAM
000CE9A4                            ;	len	- Length of fill in bytes
000CE9A4                            ;	a6.l	- VDP control port
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; RETURNS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            dmaFill		macro	byte, addr, len
000CE9A4                            		move.w	#$8F01,(a6)
000CE9A4                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CE9A4                            		move.w	#$9780,(a6)
000CE9A4                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000CE9A4                            		move.w	#(\byte)<<8,-4(a6)
000CE9A4                            		waitDMA	(a6)
000CE9A4                            		move.w	#$8F02,(a6)
000CE9A4                            		endm
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; Copy a region of VRAM to a location in VRAM
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; ARGUMENTS:
000CE9A4                            ;	src	- Source address in VRAM
000CE9A4                            ;	dest	- Destination address in VRAM
000CE9A4                            ;	len	- Length of copy in bytes
000CE9A4                            ;	a6.l	- VDP control port
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            ; RETURNS:
000CE9A4                            ;	Nothing
000CE9A4                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9A4                            dmaCopy		macro	src, dest, len
000CE9A4                            		move.w	#$8F01,(a6)
000CE9A4                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CE9A4                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000CE9A4                            		move.w	#$97C0,(a6)
000CE9A4                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000CE9A4                            		waitDMA	(a6)
000CE9A4                            		move.w	#$8F02,(a6)
000CE9A4                            		endm
000CE9A4                            		endm
000CE9A4                            
000CE9A4                            MC_Init:
000CE9A4 007C 0700                  		intsOff						; disable CPU interrupts
000CE9A8 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000CE9B0                            
000CE9B0 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000CE9B6 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000CE9BA                            
000CE9BA 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000CE9BE 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000CE9C2 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000CE9C6 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000CE9CA                            		
000CE9CA 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000CE9CE 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000CE9D2 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000CE9D6 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CE9DA 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000CE9DE                            
000CE9F0 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000CE9F4                            
000CE9F4                            .waitVBlank:	
000CE9F4 44D6                       		move.w	(a6),ccr				; is v-blank active?
000CE9F6 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000CE9F8                            
000CEA2C                            
000CEA2C 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000CEA30 027C F8FF                  		intsOn						; enable CPU interrupts
000CEA34                            
000CEA34 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEA38 43F8 8000                  		lea	(planeBuffer).w,a1
000CEA3C 7E2E                       		moveq	#$2F-1,d7
000CEA3E                            
000CEA3E                            .loopLo:
000CEA3E 32D8                       		move.w	(a0)+,(a1)+
000CEA40 51CF FFFC                  		dbf	d7,.loopLo
000CEA44                            
000CEA44 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEA48 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000CEA4C 7E2E                       		moveq	#$2F-1,d7
000CEA4E                            
000CEA4E                            .loopHi:
000CEA4E 303C 8000                  		move.w	#$8000,d0
000CEA52 8058                       		or.w	(a0)+,d0
000CEA54 32C0                       		move.w	d0,(a1)+
000CEA56 51CF FFF6                  		dbf	d7,.loopHi
000CEA5A                            
000CEA5A 6000 FFFE                  		bra.w	*					; spin infinitely
000CEA5E                            
000CEA5E                            ; ===========================================================================
000CEA5E                            ; ---------------------------------------------------------------------------
000CEA5E                            ; Clear The Screen
000CEA5E                            ; ---------------------------------------------------------------------------
000CEA5E                            MC_ClearScreen:
000CEA5E 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000CEA62                            
000CEA62 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000CEA68 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEA6C 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000CEA72 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEA78                            
000CEA78 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEA7A 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000CEA7C                            
000CEA7C 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000CEA82 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEA86 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000CEA8C 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEA92                            
000CEA92 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEA94 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000CEA96                            
000CEA96 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000CEA9C 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEAA0 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000CEAA6 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEAAC                            
000CEAAC 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEAAE 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000CEAB0                            
000CEAB0 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CEAB4 4E75                       		rts						; return
000CEAB6                            ; ---------------------------------------------------------------------------
000CEAB6                            
000CEAB6                            ; ===========================================================================
000CEAB6                            ; ---------------------------------------------------------------------------
000CEAB6                            ; VBlank Interrupt
000CEAB6                            ; ---------------------------------------------------------------------------
000CEAB6                            MC_VInt:
000CEAD0                            
000CEAD0 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000CEADA 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000CEAE0                            
000CEAE0                            
000CEAE0 4E73                       		rte						; return
000CEAE2                            ; ---------------------------------------------------------------------------
000CEAE2                            
000CEAE2                            block_entry	macro	tileID, palLine, priority
000CEAE2                            	if (narg<3)
000CEAE2                            		dc.w	(palLine<<13)|tileID
000CEAE2                            	else
000CEAE2                            		dc.w	$8000|(palLine<<13)|tileID
000CEAE2                            	endif
000CEAE2                            		endm
000CEAE2                            
000CEAE2                            MC_BlockRender:
000CEB22                            
000CEB40                            
000CEB40                            ; ---------------------------------------------------------------------------
000CEB40                            MC_Palette:
000CEB40 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000CEB60 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000CEB80 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000CEBA0 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CEBC0                            ; ---------------------------------------------------------------------------
000CEBC0                            MC_Terrain:
000CEBC0                            	incbin	"minecraft\assets\bin\terrain.bin"
000CF040                            MC_Terrain_End:
000CF040                            ; ---------------------------------------------------------------------------
000CF040                            ; ---------------------------------------------------------------------------
000CF040                            ; end of 'ROM'
000CF040                            EndOfRom:
000CF040                            
000CF040                            
