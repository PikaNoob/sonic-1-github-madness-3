00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003594                            		
00003594 4EB9 0000 0000             		jsr		ShowNow_Playing
0000359A 60BA                       		bra.s	LevelSelect
0000359C                            ; ===========================================================================
0000359C                            
0000359C                            LevSel_Ending:				; XREF: LevelSelect
0000359C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035A2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A8 4E75                       		rts	
000035AA                            ; ===========================================================================
000035AA                            
000035AA                            LevSel_Credits:				; XREF: LevelSelect
000035AA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035B0 103C 0091                  		move.b	#$91,d0
000035B4 6100 E006                  		bsr.w	PlaySound_Special ; play credits music
000035B8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035BE 4E75                       		rts	
000035C0                            ; ===========================================================================
000035C0                            
000035C0                            LevSel_Level_SS:			; XREF: LevelSelect
000035C0 D040                       		add.w	d0,d0
000035C2 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C6 6B00 FF8E                  		bmi.w	LevelSelect
000035CA 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035CE 6600                       		bne.s	LevSel_Level	; if not, branch
000035D0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035DA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035E0 7000                       		moveq	#0,d0
000035E2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035EA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Level:				; XREF: LevSel_Level_SS
000035F0 0240 3FFF                  		andi.w	#$3FFF,d0
000035F4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F8                            
000035F8                            PlayLevel:				; XREF: ROM:00003246j ...
000035F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035FE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003604 7000                       		moveq	#0,d0
00003606 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000360A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000360E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003612 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003616 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000361A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000361E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003622 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003626 103C 00E0                  		move.b	#$E0,d0
0000362A 6100 DF90                  		bsr.w	PlaySound_Special ; fade out music
0000362E 4E75                       		rts	
00003630                            ; ===========================================================================
00003630                            ; ---------------------------------------------------------------------------
00003630                            ; Level	select - level pointers
00003630                            ; ---------------------------------------------------------------------------
00003630                            LSelectPointers:
00003630                            		incbin	misc\ls_point.bin
0000365A                            		even
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            ; Level	select codes
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            LevelSelectCode_J:
0000365A                            		incbin	misc\ls_jcode.bin
00003660                            		even
00003660                            
00003660                            LevelSelectCode_US:
00003660                            		incbin	misc\ls_ucode.bin
00003666                            		even
00003666                            ; ===========================================================================
00003666                            
00003666                            ; ---------------------------------------------------------------------------
00003666                            ; Demo mode
00003666                            ; ---------------------------------------------------------------------------
00003666                            
00003666                            Demo:					; XREF: TitleScreen
00003666 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000366C                            
0000366C                            loc_33B6:				; XREF: loc_33E4
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F57C                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	DeformBgLayer
0000367A 6100 E4E0                  		bsr.w	PalCycle_Load
0000367E 6100 E18C                  		bsr.w	RunPLC_RAM
00003682 3038 D008                  		move.w	($FFFFD008).w,d0
00003686 5440                       		addq.w	#2,d0
00003688 31C0 D008                  		move.w	d0,($FFFFD008).w
0000368C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003690 6500                       		bcs.s	loc_33E4
00003692 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_33E4:				; XREF: Demo
0000369A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036A0 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036A4 4A78 F614                  		tst.w	($FFFFF614).w
000036A8 6600 FFC2                  		bne.w	loc_33B6
000036AC 103C 00E0                  		move.b	#$E0,d0
000036B0 6100 DF0A                  		bsr.w	PlaySound_Special ; fade out music
000036B4 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B8 0240 0007                  		andi.w	#7,d0
000036BC D040                       		add.w	d0,d0
000036BE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036CA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036D0 6500                       		bcs.s	loc_3422	; if yes, branch
000036D2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D8                            
000036D8                            loc_3422:
000036D8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036DE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036E4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E8 6600                       		bne.s	Demo_Level	; if not, branch
000036EA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036F0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036F4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F8                            
000036F8                            Demo_Level:
000036F8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000036FE 7000                       		moveq	#0,d0
00003700 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003704 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003708 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Levels used in demos
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003716                            		even
00003716                            
00003716                            ; ---------------------------------------------------------------------------
00003716                            ; Subroutine to	change what you're selecting in the level select
00003716                            ; ---------------------------------------------------------------------------
00003716                            
00003716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003716                            
00003716                            
00003716                            LevSelControls:				; XREF: LevelSelect
00003716 1238 F605                  		move.b	($FFFFF605).w,d1
0000371A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000371E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003720 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003724 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003726                            
00003726                            LevSel_UpDown:
00003726 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000372C 1238 F604                  		move.b	($FFFFF604).w,d1
00003730 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003734 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003736 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000373A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000373E 6700                       		beq.s	LevSel_Down	; if not, branch
00003740 5346                       		subq.w	#1,d6		; move up 1 selection
00003742 6400                       		bcc.s	LevSel_Down
00003744 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003746                            
00003746                            LevSel_Down:
00003746 0801 0001                  		btst	#1,d1		; is down pressed?
0000374A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000374C 5246                       		addq.w	#1,d6		; move down 1 selection
0000374E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003752 6500                       		bcs.s	LevSel_Refresh
00003754 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003756 6000                       		bra.s	LevSel_Refresh
00003758                            		
00003758                            LevSel_GoLR:
00003758 0801 0002                  		btst	#2,d1		; is left pressed?
0000375C 6700                       		beq.s	LevSel_GoRight	; if not, branch
0000375E 0446 0000                  		sub.w	#lsrow2size,d6
00003762 64E2                       		bcc.s	LevSel_Down
00003764 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003768 6000                       		bra.s	LevSel_Refresh
0000376A                            LevSel_GoRight:
0000376A 0646 0000                  		add.w	#lsrow1size,d6
0000376E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003772 6500                       		bcs.s	LevSel_Refresh
00003774 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003778                            ; ===========================================================================
00003778                            LevSel_Refresh:
00003778 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000377C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003780 363C C65F                  		move.w	#$C680-$21,d3
00003784 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003788 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000378C 4E75                       		rts	
0000378E                            		
0000378E                            LevSel_SndTest:				; XREF: LevSelControls
0000378E 1238 F605                  		move.b	($FFFFF605).w,d1
00003792 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003796 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003798 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
0000379E 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037A0                            		
000037A0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037A4 0801 0002                  		btst	#2,d1		; is left pressed?
000037A8 6700                       		beq.s	LevSel_Right	; if not, branch
000037AA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000037AC 6400                       		bcc.s	LevSel_Right
000037AE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000037B0                            
000037B0                            LevSel_Right:
000037B0 0801 0003                  		btst	#3,d1		; is right pressed?
000037B4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000037B6 5240                       		addq.w	#1,d0		; add 1	to sound test
000037B8 0C40 0050                  		cmpi.w	#$50,d0
000037BC 6500                       		bcs.s	LevSel_Refresh2
000037BE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000037C0                            
000037C0                            LevSel_Refresh2:
000037C0 363C C65F                  		move.w	#$C680-$21,d3
000037C4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037C8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037CC                            
000037CC                            LevSel_NoMove:
000037CC 4E75                       		rts	
000037CE                            ; End of function LevSelControls
000037CE                            
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            ; Subroutine to load level select text
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            
000037CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CE =60860003                  lsscrpos = $60860003
000037CE =00240000                  lsoff = $240000
000037CE =64C00003                  lsstpos = lsscrpos+$43A0000
000037CE                            
000037CE                            LevSelTextLoad_loop:
000037CE 2D44 0004                  		move.l	d4,4(a6)
000037D2 6100 0000                  		bsr.w	LevSel_ChgLine
000037D6 0684 0080 0000             		addi.l	#$800000,d4
000037DC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037E0 4E75                       		rts
000037E2                            LevSelTextLoad:				; XREF: TitleScreen
000037E2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037F2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F8                            		
000037F8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037FC 61D0                       		bsr.s	LevSelTextLoad_loop
000037FE                            		
000037FE                            		
000037FE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003804 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003808 61C4                       		bsr.s	LevSelTextLoad_loop
0000380A 363C C65F                  		move.w	#$C680-$21,d3
0000380E                            		
0000380E                            LevSelHighlightCode:
0000380E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003814 7000                       		moveq	#0,d0
00003816 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000381A 3200                       		move.w	d0,d1
0000381C 283C 6086 0003             		move.l	#lsscrpos,d4
00003822                            		
00003822 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003826 6D00                       		blt.s	@notsecond
00003828                            		
00003828 0440 0000                  		sub.w	#lsrow1size,d0
0000382C 0684 0024 0000             		addi.l	#lsoff,d4
00003832                            	@notsecond:
00003832 EF48                       		lsl.w	#7,d0
00003834 4840                       		swap	d0
00003836 D880                       		add.l	d0,d4
00003838 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383E E749                       		lsl.w	#3,d1
00003840 D241                       		add.w	d1,d1
00003842 D2C1                       		adda.w	d1,a1
00003844 2D44 0004                  		move.l	d4,4(a6)
00003848 6100 0000                  		bsr.w	LevSel_ChgLine
0000384C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003852 6700                       		beq.s	LevSelSndTest
00003854 4E75                       		rts
00003856                            
00003856                            LevSelSndTest:
00003856 0643 0030                  		add.w	#$30,d3
0000385A 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003864 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003868 0640 0080                  		addi.w	#$80,d0
0000386C 1400                       		move.b	d0,d2
0000386E E808                       		lsr.b	#4,d0
00003870 6100 0000                  		bsr.w	LevSel_ChgSnd
00003874 1002                       		move.b	d2,d0
00003876 6100 0000                  		bsr.w	LevSel_ChgSnd
0000387A 4E75                       		rts	
0000387C                            ; End of function LevSelTextLoad
0000387C                            
0000387C                            
0000387C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000387C                            
0000387C                            
0000387C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000387C 0240 000F                  		andi.w	#$F,d0
00003880 0C00 000A                  		cmpi.b	#$A,d0
00003884 6500                       		bcs.s	loc_3580
00003886 5E00                       		addi.b	#7,d0
00003888                            
00003888                            loc_3580:
00003888 D043                       		add.w	d3,d0
0000388A 3C80                       		move.w	d0,(a6)
0000388C 4E75                       		rts	
0000388E                            ; End of function LevSel_ChgSnd
0000388E                            
0000388E                            
0000388E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000388E                            
0000388E                            
0000388E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000388E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003890                            
00003890                            @loop:
00003890 7000                       		moveq	#0,d0
00003892 1019                       		move.b	(a1)+,d0
00003894 0C00 0020                  		cmpi.b	#$20,d0
00003898 6E00                       		bgt.s	@draw
0000389A 3CBC 0000                  		move.w	#0,(a6)
0000389E 51CA FFF0                  		dbf	d2,@loop
000038A2 4E75                       		rts	
000038A4                            ; ===========================================================================
000038A4                            
000038A4                            @draw:				; XREF: LevSel_ChgLine
000038A4 D043                       		add.w	d3,d0
000038A6 3C80                       		move.w	d0,(a6)
000038A8 51CA FFE6                  		dbf	d2,@loop
000038AC 4E75                       		rts	
000038AE                            ; End of function LevSel_ChgLine
000038AE                            		
000038AE                            CStringSlop_draw:
000038AE D043                       		add.w	d3,d0
000038B0 3C80                       		move.w	d0,(a6)
000038B2                            CStringSlop:				; XREF: LevSelTextLoad
000038B2 7000                       		moveq	#0,d0
000038B4 1019                       		move.b	(a1)+,d0
000038B6 0C00 0020                  		cmpi.b	#$20,d0
000038BA 6EF2                       		bgt.s	CStringSlop_draw
000038BC 4A00                       		tst.b	d0
000038BE 6700                       		beq.s	@end
000038C0 3CBC 0000                  		move.w	#0,(a6)
000038C4 60EC                       		bra.s	CStringSlop
000038C6                            	@end:
000038C6 4E75                       		rts
000038C8                            ; End of function LevSel_ChgLine
000038C8                            
000038C8                            ; ===========================================================================
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            LevelMenuText:	
000038C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000038E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003908 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003918 2020 2020 2020 2020 2020+          dc.b    "               3"
00003928 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003968 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988                            LMTSecondRow:
00003988 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003998 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039C8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039F8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A38                            LMTSelectableEnd:
00003A38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A48                            LMTEnd:
00003A48                            
00003A48                            
00003A48 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A48 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A48 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A48                            ; just to not break these
00003A48 =00000014                  lssndtest = lsrow2size+8
00003A48 =00000015                  lswifi = lsrow2size+9
00003A48                            
00003A48 =6C820003                  nppos = $6C820003
00003A48                            Now_Playing:
00003A48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A58                            		even
00003A58                            NP_Track:
00003A58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A60                            		even
00003A60                            NP_SFX:
00003A60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A68                            		even
00003A68                            
00003A68                            ShowNow_Playing:
00003A68 1C00                       		move.b	d0,d6
00003A6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A78 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A80 6100 FE30                  		bsr.w	CStringSlop
00003A84                            		
00003A84 43FA FFD2                  		lea	NP_Track(pc),a1
00003A88 0C06 00A0                  		cmpi.b	#$A0,d6
00003A8C 6D00                       		blt.s	@track
00003A8E                            		
00003A8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A92                            	@track:
00003A92 6100 FE1E                  		bsr.w	CStringSlop
00003A96                            		
00003A96 0643 0030                  		add.w	#$30,d3
00003A9A 1006                       		move.b	d6,d0
00003A9C 1400                       		move.b	d0,d2
00003A9E E808                       		lsr.b	#4,d0
00003AA0 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AA4 1002                       		move.b	d2,d0
00003AA6 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AAA 4E75                       		rts	
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            ; Music	playlist
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            MusicList1:	incbin	misc\muslist1.bin
00003AB4                            		even
00003AB4                            MusicList2:	incbin	misc\muslist2.bin
00003ABA                            		even
00003ABA                            MusicList3:	incbin	misc\muslist3.bin
00003AC0                            		even
00003AC0                            MusicList4:	incbin	misc\muslist4.bin
00003AC6                            		even
00003AC6                            ; ===========================================================================
00003AC6                            
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            ; Level
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            
00003AC6                            Level:					; XREF: GameModeArray
00003AC6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003ACC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AD0 6B00                       		bmi.s	loc_37B6
00003AD2 103C 00E0                  		move.b	#$E0,d0
00003AD6 6100 DAE4                  		bsr.w	PlaySound_Special ; fade out music
00003ADA                            
00003ADA                            loc_37B6:
00003ADA 6100 DD22                  		bsr.w	ClearPLC
00003ADE 6100 E592                  		bsr.w	Pal_FadeFrom
00003AE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE6 6B00                       		bmi.s	Level_ClrRam
00003AE8 46FC 2700                  		move	#$2700,sr
00003AEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003AF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AFC 6100 DB62                  		bsr.w	NemDec
00003B00 46FC 2300                  		move	#$2300,sr
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A E948                       		lsl.w	#4,d0
00003B0C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B12 45F2 0000                  		lea	(a2,d0.w),a2
00003B16 7000                       		moveq	#0,d0
00003B18 1012                       		move.b	(a2),d0
00003B1A 6700                       		beq.s	loc_37FC
00003B1C 6100 DC82                  		bsr.w	LoadPLC		; load level patterns
00003B20                            
00003B20                            loc_37FC:
00003B20 7001                       		moveq	#1,d0
00003B22 6100 DC7C                  		bsr.w	LoadPLC		; load standard	patterns
00003B26                            
00003B26                            Level_ClrRam:
00003B26 43F8 D000                  		lea	($FFFFD000).w,a1
00003B2A 7000                       		moveq	#0,d0
00003B2C 323C 07FF                  		move.w	#$7FF,d1
00003B30                            
00003B30                            Level_ClrObjRam:
00003B30 22C0                       		move.l	d0,(a1)+
00003B32 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B36                            
00003B36 43F8 F628                  		lea	($FFFFF628).w,a1
00003B3A 7000                       		moveq	#0,d0
00003B3C 323C 0015                  		move.w	#$15,d1
00003B40                            
00003B40                            Level_ClrVars:
00003B40 22C0                       		move.l	d0,(a1)+
00003B42 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B46                            
00003B46 43F8 F700                  		lea	($FFFFF700).w,a1
00003B4A 7000                       		moveq	#0,d0
00003B4C 323C 003F                  		move.w	#$3F,d1
00003B50                            
00003B50                            Level_ClrVars2:
00003B50 22C0                       		move.l	d0,(a1)+
00003B52 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B56                            
00003B56 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B5A 7000                       		moveq	#0,d0
00003B5C 323C 0047                  		move.w	#$47,d1
00003B60                            
00003B60                            Level_ClrVars3:
00003B60 22C0                       		move.l	d0,(a1)+
00003B62 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B66                            
00003B66 46FC 2700                  		move	#$2700,sr
00003B6A 6100 D978                  		bsr.w	ClearScreen
00003B6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B74 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B78 3CBC 8230                  		move.w	#$8230,(a6)
00003B7C 3CBC 8407                  		move.w	#$8407,(a6)
00003B80 3CBC 857C                  		move.w	#$857C,(a6)
00003B84 3CBC 9001                  		move.w	#$9001,(a6)
00003B88 3CBC 8004                  		move.w	#$8004,(a6)
00003B8C 3CBC 8720                  		move.w	#$8720,(a6)
00003B90 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B96 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BA0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BA2 3CBC 8014                  		move.w	#$8014,(a6)
00003BA6 7000                       		moveq	#0,d0
00003BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BAC D040                       		add.w	d0,d0
00003BAE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003BB4 3031 0000                  		move.w	(a1,d0.w),d0
00003BB8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003BBC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003BC0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003BC4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003BCC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003BD2                            
00003BD2                            Level_LoadPal:
00003BD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003BD8 46FC 2300                  		move	#$2300,sr
00003BDC 7003                       		moveq	#3,d0
00003BDE 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BE8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BEA 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BF2 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BF4 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BF6                            
00003BF6                            Level_WaterPal:
00003BF6 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BFA 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BFE 6700                       		beq.s	Level_GetBgm
00003C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C06                            
00003C06                            ; NineKode begins here - How to play different songs on different acts
00003C06                             
00003C06                            Level_GetBgm:
00003C06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C0A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C14                             
00003C14 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C1A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C1C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C22 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C24                             
00003C24                            Level_GetBgm2:
00003C24 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C2A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C2C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C32 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C34                             
00003C34                            Level_GetBgm3:
00003C34 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C3A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C3C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C42 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C44                             
00003C44                            Level_GetBgm4:
00003C44 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C4A 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C4C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C52                             
00003C52                            Level_PlayBgm:
00003C52 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C56 6100 D95E                  		bsr.w	PlaySound	; play music
00003C5A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C60                             
00003C60                            ; NineKode ends here
00003C60                            
00003C60                            Level_TtlCard:
00003C60 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C66 6100 EF88                  		bsr.w	DelayProgram
00003C6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C70 4EB9 0000 0000             		jsr	BuildSprites
00003C76 6100 DB94                  		bsr.w	RunPLC_RAM
00003C7A 3038 D108                  		move.w	($FFFFD108).w,d0
00003C7E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C82 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C84 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C88 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C8A 4EB9 0000 0000             		jsr	Hud_Base
00003C90                            
00003C90                            loc_3946:
00003C90 7003                       		moveq	#3,d0
00003C92 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C96 6100 0000                  		bsr.w	LevelSizeLoad
00003C9A 6100 0000                  		bsr.w	DeformBgLayer
00003C9E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003CA4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003CA8 6100 0000                  		bsr.w	LoadTilesFromStart
00003CAC 4EB9 0000 0000             		jsr	FloorLog_Unk
00003CB2 6100 0000                  		bsr.w	ColIndexLoad
00003CB6 6100 0000                  		bsr.w	LZWaterEffects
00003CBA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003CC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC4 6B00                       		bmi.s	Level_ChkDebug
00003CC6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003CCC                            
00003CCC                            Level_ChkDebug:
00003CCC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003CD0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003CD8 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CDA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CE0                            
00003CE0                            Level_ChkWater:
00003CE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CE6 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CF2 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CF4 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CFA 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D00 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D06 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D0C                            
00003D0C                            Level_LoadObj:
00003D0C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D12 4EB9 0000 0000             		jsr	ObjectsLoad
00003D18 4EB9 0000 0000             		jsr	BuildSprites
00003D1E 7000                       		moveq	#0,d0
00003D20 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D24 6600                       		bne.s	loc_39E8	; if yes, branch
00003D26 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D2E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D32                            
00003D32                            loc_39E8:
00003D32 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D42                            		; move.b	d0,($FFFFFE2F).w
00003D42 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D48 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D4C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D50 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D54 6100 0000                  		bsr.w	OscillateNumInit
00003D58 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D5E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D64 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D70 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C E548                       		lsl.w	#2,d0
00003D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00003D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D86 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D92 5340                       		subq.w	#1,d0
00003D94 E548                       		lsl.w	#2,d0
00003D96 2271 0000                  		movea.l	(a1,d0.w),a1
00003D9A                            
00003D9A                            Level_Demo:
00003D9A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003DA0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003DA4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAE 6A00                       		bpl.s	Level_ChkWaterPal
00003DB0 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003DBC 6600                       		bne.s	Level_ChkWaterPal
00003DBE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003DC4                            
00003DC4                            Level_ChkWaterPal:
00003DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003DCA 6600                       		bne.s	Level_Delay	; if not, branch
00003DCC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003DCE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003DD4 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003DD6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003DD8                            
00003DD8                            Level_WaterPal2:
00003DD8 6100 E592                  		bsr.w	PalLoad4_Water
00003DDC                            
00003DDC                            Level_Delay:
00003DDC 323C 0003                  		move.w	#3,d1
00003DE0                            
00003DE0                            Level_DelayLoop:
00003DE0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DE6 6100 EE08                  		bsr.w	DelayProgram
00003DEA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DEE                            
00003DEE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DF4 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFC 6B00                       		bmi.s	Level_ClrCardArt
00003DFE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E02 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E06 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E0A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E0E 6000                       		bra.s	Level_StartGame
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            Level_ClrCardArt:
00003E10 7002                       		moveq	#2,d0
00003E12 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E18 7000                       		moveq	#0,d0
00003E1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1E 0640 0015                  		addi.w	#$15,d0
00003E22 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E28                            
00003E28                            Level_StartGame:
00003E28 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            Level_MainLoop:
00003E2E 6100 D798                  		bsr.w	PauseGame
00003E32 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E38 6100 EDB6                  		bsr.w	DelayProgram
00003E3C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E40 6100 0000                  		bsr.w	MoveSonicInDemo
00003E44 6100 0000                  		bsr.w	LZWaterEffects
00003E48 4EB9 0000 0000             		jsr	ObjectsLoad
00003E4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E52 6600                       		bne.s	loc_3B10
00003E54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E5A 6400                       		bcc.s	loc_3B14
00003E5C                            
00003E5C                            loc_3B10:
00003E5C 6100 0000                  		bsr.w	DeformBgLayer
00003E60                            
00003E60                            loc_3B14:
00003E60 4EB9 0000 0000             		jsr	BuildSprites
00003E66 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6C 6100 DCEE                  		bsr.w	PalCycle_Load
00003E70 6100 D99A                  		bsr.w	RunPLC_RAM
00003E74 6100 0000                  		bsr.w	OscillateNumDo
00003E78 6100 0000                  		bsr.w	ChangeRingFrame
00003E7C 6100 0000                  		bsr.w	SignpostArtLoad
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E86 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E8C 6600 FC38                  		bne.w	Level		; if yes, branch
00003E90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E96 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E9A 4E75                       		rts	
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E9C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003EA0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003EA6 6700                       		beq.s	Level_EndDemo	; if not, branch
00003EA8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EAE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003EB2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EB8 4E75                       		rts	
00003EBA                            ; ===========================================================================
00003EBA                            
00003EBA                            Level_EndDemo:				; XREF: Level_ChkDemo
00003EBA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003EC0 6600                       		bne.s	loc_3B88	; if not, branch
00003EC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ECC 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003ECE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003ED4                            
00003ED4                            loc_3B88:
00003ED4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EDA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EE0 4278 F794                  		clr.w	($FFFFF794).w
00003EE4                            
00003EE4                            loc_3B98:
00003EE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EEA 6100 ED04                  		bsr.w	DelayProgram
00003EEE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EF2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EF8 4EB9 0000 0000             		jsr	BuildSprites
00003EFE 4EB9 0000 0000             		jsr	ObjPosLoad
00003F04 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F08 6A00                       		bpl.s	loc_3BC8
00003F0A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F10 6100 E180                  		bsr.w	Pal_FadeOut
00003F14                            
00003F14                            loc_3BC8:
00003F14 4A78 F614                  		tst.w	($FFFFF614).w
00003F18 66CA                       		bne.s	loc_3B98
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            
00003F1C                            LZWaterEffects:				; XREF: Level
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F22 6600                       		bne.s	locret_3C28	; if not, branch
00003F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F2A 6400                       		bcc.s	LZMoveWater
00003F2C 6100 0000                  		bsr.w	LZWindTunnels
00003F30 6100 0000                  		bsr.w	LZWaterSlides
00003F34 6100 0000                  		bsr.w	LZDynamicWater
00003F38                            
00003F38                            LZMoveWater:
00003F38 4238 F64E                  		clr.b	($FFFFF64E).w
00003F3C 7000                       		moveq	#0,d0
00003F3E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 D078 F648                  		add.w	($FFFFF648).w,d0
00003F48 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F4C 3038 F646                  		move.w	($FFFFF646).w,d0
00003F50 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F54 6400                       		bcc.s	loc_3C1A
00003F56 4A40                       		tst.w	d0
00003F58 6A00                       		bpl.s	loc_3C1A
00003F5A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F60 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F66                            
00003F66                            loc_3C1A:
00003F66 0C40 00DF                  		cmpi.w	#$DF,d0
00003F6A 6500                       		bcs.s	loc_3C24
00003F6C 303C 00DF                  		move.w	#$DF,d0
00003F70                            
00003F70                            loc_3C24:
00003F70 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F74                            
00003F74                            locret_3C28:
00003F74 4E75                       		rts	
00003F76                            ; ===========================================================================
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            ; Labyrinth default water heights
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F7E                            		even
00003F7E                            ; ===========================================================================
00003F7E                            
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            ; Labyrinth dynamic water routines
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            
00003F7E                            LZDynamicWater:				; XREF: LZWaterEffects
00003F7E 7000                       		moveq	#0,d0
00003F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F84 D040                       		add.w	d0,d0
00003F86 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F8A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F8E 7200                       		moveq	#0,d1
00003F90 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F94 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F98 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F9C 6700                       		beq.s	locret_3C5A
00003F9E 6400                       		bcc.s	loc_3C56
00003FA0 4441                       		neg.w	d1
00003FA2                            
00003FA2                            loc_3C56:
00003FA2 D378 F648                  		add.w	d1,($FFFFF648).w
00003FA6                            
00003FA6                            locret_3C5A:
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003FAA 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003FAC 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003FAE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003FB0                            ; ===========================================================================
00003FB0                            
00003FB0                            DynWater_LZ1:				; XREF: DynWater_Index
00003FB0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FB4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FB8 6600                       		bne.s	loc_3CD0
00003FBA 323C 00B8                  		move.w	#$B8,d1
00003FBE 0C40 0600                  		cmpi.w	#$600,d0
00003FC2 6500                       		bcs.s	loc_3CB4
00003FC4 323C 0108                  		move.w	#$108,d1
00003FC8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003FCE 6500                       		bcs.s	loc_3CBA
00003FD0 0C40 0C00                  		cmpi.w	#$C00,d0
00003FD4 6500                       		bcs.s	loc_3CB4
00003FD6 323C 0318                  		move.w	#$318,d1
00003FDA 0C40 1080                  		cmpi.w	#$1080,d0
00003FDE 6500                       		bcs.s	loc_3CB4
00003FE0 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FE6 323C 05C8                  		move.w	#$5C8,d1
00003FEA 0C40 1380                  		cmpi.w	#$1380,d0
00003FEE 6500                       		bcs.s	loc_3CB4
00003FF0 323C 03A8                  		move.w	#$3A8,d1
00003FF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FF8 6600                       		bne.s	loc_3CB4
00003FFA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004000                            
00004000                            loc_3CB4:
00004000 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3CBA:				; XREF: DynWater_LZ1
00004006 0C40 0C80                  		cmpi.w	#$C80,d0
0000400A 65F4                       		bcs.s	loc_3CB4
0000400C 323C 00E8                  		move.w	#$E8,d1
00004010 0C40 1500                  		cmpi.w	#$1500,d0
00004014 65EA                       		bcs.s	loc_3CB4
00004016 323C 0108                  		move.w	#$108,d1
0000401A 60E4                       		bra.s	loc_3CB4
0000401C                            ; ===========================================================================
0000401C                            
0000401C                            loc_3CD0:				; XREF: DynWater_LZ1
0000401C 5302                       		subq.b	#1,d2
0000401E 6600                       		bne.s	locret_3CF4
00004020 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004026 6400                       		bcc.s	locret_3CF4
00004028 323C 03A8                  		move.w	#$3A8,d1
0000402C 0C40 1300                  		cmpi.w	#$1300,d0
00004030 6500                       		bcs.s	loc_3CF0
00004032 323C 0108                  		move.w	#$108,d1
00004036 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000403C                            
0000403C                            loc_3CF0:
0000403C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004040                            
00004040                            locret_3CF4:
00004040 4E75                       		rts	
00004042                            ; ===========================================================================
00004042                            
00004042                            DynWater_LZ2:				; XREF: DynWater_Index
00004042 3038 F700                  		move.w	($FFFFF700).w,d0
00004046 323C 0328                  		move.w	#$328,d1
0000404A 0C40 0500                  		cmpi.w	#$500,d0
0000404E 6500                       		bcs.s	loc_3D12
00004050 323C 03C8                  		move.w	#$3C8,d1
00004054 0C40 0B00                  		cmpi.w	#$B00,d0
00004058 6500                       		bcs.s	loc_3D12
0000405A 323C 0428                  		move.w	#$428,d1
0000405E                            
0000405E                            loc_3D12:
0000405E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004062 4E75                       		rts	
00004064                            ; ===========================================================================
00004064                            
00004064                            DynWater_LZ3:				; XREF: DynWater_Index
00004064 3038 F700                  		move.w	($FFFFF700).w,d0
00004068 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000406C 6600                       		bne.s	loc_3D5E
0000406E 323C 0900                  		move.w	#$900,d1
00004072 0C40 0600                  		cmpi.w	#$600,d0
00004076 6500                       		bcs.s	loc_3D54
00004078 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000407E 6500                       		bcs.s	loc_3D54
00004080 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004086 6400                       		bcc.s	loc_3D54
00004088 323C 04C8                  		move.w	#$4C8,d1
0000408C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004092 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004098 303C 00B7                  		move.w	#$B7,d0
0000409C 6100 D51E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000040A0                            
000040A0                            loc_3D54:
000040A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 4E75                       		rts	
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            loc_3D5E:				; XREF: DynWater_LZ3
000040AA 5302                       		subq.b	#1,d2
000040AC 6600                       		bne.s	loc_3DA8
000040AE 323C 04C8                  		move.w	#$4C8,d1
000040B2 0C40 0770                  		cmpi.w	#$770,d0
000040B6 6500                       		bcs.s	loc_3DA2
000040B8 323C 0308                  		move.w	#$308,d1
000040BC 0C40 1400                  		cmpi.w	#$1400,d0
000040C0 6500                       		bcs.s	loc_3DA2
000040C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000040C8 6700                       		beq.s	loc_3D8E
000040CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040D0 6400                       		bcc.s	loc_3D8E
000040D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000040D8 6400                       		bcc.s	loc_3DA2
000040DA                            
000040DA                            loc_3D8E:
000040DA 323C 0508                  		move.w	#$508,d1
000040DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000040E2 0C40 1770                  		cmpi.w	#$1770,d0
000040E6 6500                       		bcs.s	loc_3DA2
000040E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040EE                            
000040EE                            loc_3DA2:
000040EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3DA8:
000040F4 5302                       		subq.b	#1,d2
000040F6 6600                       		bne.s	loc_3DD2
000040F8 323C 0508                  		move.w	#$508,d1
000040FC 0C40 1860                  		cmpi.w	#$1860,d0
00004100 6500                       		bcs.s	loc_3DCC
00004102 323C 0188                  		move.w	#$188,d1
00004106 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000410A 6400                       		bcc.s	loc_3DC6
0000410C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004110 6600                       		bne.s	loc_3DCC
00004112                            
00004112                            loc_3DC6:
00004112 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004118                            
00004118                            loc_3DCC:
00004118 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411C 4E75                       		rts	
0000411E                            ; ===========================================================================
0000411E                            
0000411E                            loc_3DD2:
0000411E 5302                       		subq.b	#1,d2
00004120 6600                       		bne.s	loc_3E0E
00004122 323C 0188                  		move.w	#$188,d1
00004126 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000412A 6500                       		bcs.s	loc_3E04
0000412C 323C 0900                  		move.w	#$900,d1
00004130 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004134 6500                       		bcs.s	loc_3E04
00004136 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000413C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004142 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004148 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3E04:
00004150 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004154 31C1 F648                  		move.w	d1,($FFFFF648).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3E0E:
0000415A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000415E 6500                       		bcs.s	locret_3E1A
00004160 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004166                            
00004166                            locret_3E1A:
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_SBZ3:				; XREF: DynWater_Index
00004168 323C 0228                  		move.w	#$228,d1
0000416C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004172 6500                       		bcs.s	loc_3E2C
00004174 323C 04C8                  		move.w	#$4C8,d1
00004178                            
00004178                            loc_3E2C:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts
0000417E                            
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            
0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            
0000417E                            
0000417E                            LZWindTunnels:				; XREF: LZWaterEffects
0000417E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004182 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004186 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000418C 7000                       		moveq	#0,d0
0000418E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004192 E748                       		lsl.w	#3,d0
00004194 D4C0                       		adda.w	d0,a2
00004196 7200                       		moveq	#0,d1
00004198 4A38 FE11                  		tst.b	($FFFFFE11).w
0000419C 6600                       		bne.s	loc_3E56
0000419E 7201                       		moveq	#1,d1
000041A0 514A                       		subq.w	#8,a2
000041A2                            
000041A2                            loc_3E56:
000041A2 43F8 D000                  		lea	($FFFFD000).w,a1
000041A6                            
000041A6                            LZWind_Loop:
000041A6 3029 0008                  		move.w	8(a1),d0
000041AA B052                       		cmp.w	(a2),d0
000041AC 6500 0000                  		bcs.w	loc_3EF4
000041B0 B06A 0004                  		cmp.w	4(a2),d0
000041B4 6400 0000                  		bcc.w	loc_3EF4
000041B8 3429 000C                  		move.w	$C(a1),d2
000041BC B46A 0002                  		cmp.w	2(a2),d2
000041C0 6500                       		bcs.s	loc_3EF4
000041C2 B46A 0006                  		cmp.w	6(a2),d2
000041C6 6400                       		bcc.s	loc_3EF4
000041C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041CC 0200 003F                  		andi.b	#$3F,d0
000041D0 6600                       		bne.s	loc_3E90
000041D2 303C 00D0                  		move.w	#$D0,d0
000041D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041DC                            
000041DC                            loc_3E90:
000041DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041E0 6600 0000                  		bne.w	locret_3F0A
000041E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041EA 6400                       		bcc.s	loc_3F06
000041EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041F2 0440 0080                  		subi.w	#$80,d0
000041F6 B052                       		cmp.w	(a2),d0
000041F8 6400                       		bcc.s	LZWind_Move
000041FA 7002                       		moveq	#2,d0
000041FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004202 6600                       		bne.s	loc_3EBA
00004204 4440                       		neg.w	d0
00004206                            
00004206                            loc_3EBA:
00004206 D169 000C                  		add.w	d0,$C(a1)
0000420A                            
0000420A                            LZWind_Move:
0000420A 5869 0008                  		addq.w	#4,8(a1)
0000420E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004214 337C 0000 0012             		move.w	#0,$12(a1)
0000421A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004220 08E9 0001 0022             		bset	#1,$22(a1)
00004226 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000422C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000422E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004232                            
00004232                            LZWind_MoveDown:
00004232 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004238 6700                       		beq.s	locret_3EF2	; if not, branch
0000423A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000423E                            
0000423E                            locret_3EF2:
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3EF4:				; XREF: LZWindTunnels
00004240 504A                       		addq.w	#8,a2
00004242 51C9 FF62                  		dbf	d1,LZWind_Loop
00004246 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000424A 6700                       		beq.s	locret_3F0A
0000424C 137C 0000 001C             		move.b	#0,$1C(a1)
00004252                            
00004252                            loc_3F06:
00004252 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004256                            
00004256                            locret_3F0A:
00004256 4E75                       		rts	
00004258                            ; End of function LZWindTunnels
00004258                            
00004258                            ; ===========================================================================
00004258 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004260 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004272 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004280                            					; XREF: LZWindTunnels
00004280                            		even
00004280                            
00004280                            ; ---------------------------------------------------------------------------
00004280                            ; Labyrinth Zone water slide subroutine
00004280                            ; ---------------------------------------------------------------------------
00004280                            
00004280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004280                            
00004280                            
00004280                            LZWaterSlides:				; XREF: LZWaterEffects
00004280 43F8 D000                  		lea	($FFFFD000).w,a1
00004284 0829 0001 0022             		btst	#1,$22(a1)
0000428A 6600                       		bne.s	loc_3F6A
0000428C 3029 000C                  		move.w	$C(a1),d0
00004290 E248                       		lsr.w	#1,d0
00004292 0240 0380                  		andi.w	#$380,d0
00004296 1229 0008                  		move.b	8(a1),d1
0000429A 0241 007F                  		andi.w	#$7F,d1
0000429E D041                       		add.w	d1,d0
000042A0 45F8 A400                  		lea	($FFFFA400).w,a2
000042A4 1032 0000                  		move.b	(a2,d0.w),d0
000042A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000042AC 7206                       		moveq	#6,d1
000042AE                            
000042AE                            loc_3F62:
000042AE B022                       		cmp.b	-(a2),d0
000042B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000042B4 6700                       		beq.s	LZSlide_Move
000042B6                            
000042B6                            loc_3F6A:
000042B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000042BA 6700                       		beq.s	locret_3F7A
000042BC 337C 0005 003E             		move.w	#5,$3E(a1)
000042C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000042C6                            
000042C6                            locret_3F7A:
000042C6 4E75                       		rts	
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            LZSlide_Move:				; XREF: LZWaterSlides
000042C8 0C41 0003                  		cmpi.w	#3,d1
000042CC 6400                       		bcc.s	loc_3F84
000042CE 4E71                       		nop	
000042D0                            
000042D0                            loc_3F84:
000042D0 08A9 0000 0022             		bclr	#0,$22(a1)
000042D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042DA 1340 0014                  		move.b	d0,$14(a1)
000042DE 6A00                       		bpl.s	loc_3F9A
000042E0 08E9 0000 0022             		bset	#0,$22(a1)
000042E6                            
000042E6                            loc_3F9A:
000042E6 4229 0015                  		clr.b	$15(a1)
000042EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042FA 0200 001F                  		andi.b	#$1F,d0
000042FE 6600                       		bne.s	locret_3FBE
00004300 303C 00D0                  		move.w	#$D0,d0
00004304 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000430A                            
0000430A                            locret_3FBE:
0000430A 4E75                       		rts	
0000430C                            ; End of function LZWaterSlides
0000430C                            
0000430C                            ; ===========================================================================
0000430C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000431B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000431C                            		even
0000431C                            
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to	move Sonic in demo mode
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000431C                            
0000431C                            
0000431C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000431C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004320 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            ; This is an unused subroutine for recording a demo
00004324                            
00004324                            MoveDemo_Record:
00004324 43F9 0008 0000             		lea	($80000).l,a1
0000432A 3038 F790                  		move.w	($FFFFF790).w,d0
0000432E D2C0                       		adda.w	d0,a1
00004330 1038 F604                  		move.b	($FFFFF604).w,d0
00004334 B011                       		cmp.b	(a1),d0
00004336 6600                       		bne.s	loc_3FFA
00004338 5229 0001                  		addq.b	#1,1(a1)
0000433C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004342 6700                       		beq.s	loc_3FFA
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3FFA:				; XREF: MoveDemo_Record
00004346 1340 0002                  		move.b	d0,2(a1)
0000434A 137C 0000 0003             		move.b	#0,3(a1)
00004350 5478 F790                  		addq.w	#2,($FFFFF790).w
00004354 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000435C 4A38 F604                  		tst.b	($FFFFF604).w
00004360 6A00                       		bpl.s	loc_4022
00004362 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004366 6B00                       		bmi.s	loc_4022
00004368 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000436E                            
0000436E                            loc_4022:
0000436E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004374 7000                       		moveq	#0,d0
00004376 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004380 6600                       		bne.s	loc_4038
00004382 7006                       		moveq	#6,d0
00004384                            
00004384                            loc_4038:
00004384 E548                       		lsl.w	#2,d0
00004386 2271 0000                  		movea.l	(a1,d0.w),a1
0000438A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000438E 6A00                       		bpl.s	loc_4056
00004390 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004396 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000439A 5340                       		subq.w	#1,d0
0000439C E548                       		lsl.w	#2,d0
0000439E 2271 0000                  		movea.l	(a1,d0.w),a1
000043A2                            
000043A2                            loc_4056:
000043A2 3038 F790                  		move.w	($FFFFF790).w,d0
000043A6 D2C0                       		adda.w	d0,a1
000043A8 1011                       		move.b	(a1),d0
000043AA 41F8 F604                  		lea	($FFFFF604).w,a0
000043AE 1200                       		move.b	d0,d1
000043B0 1410                       		move.b	(a0),d2
000043B2 B500                       		eor.b	d2,d0
000043B4 10C1                       		move.b	d1,(a0)+
000043B6 C001                       		and.b	d1,d0
000043B8 10C0                       		move.b	d0,(a0)+
000043BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000043BE 6400                       		bcc.s	locret_407E
000043C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000043C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CA                            
000043CA                            locret_407E:
000043CA 4E75                       		rts	
000043CC                            ; End of function MoveSonicInDemo
000043CC                            
000043CC                            ; ===========================================================================
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            Demo_Index:
000043CC                            	include "_inc\Demo pointers for intro.asm"
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC 0000 0000                  	dc.l Demo_GHZ
000043D0 0000 0000                  	dc.l Demo_GHZ
000043D4 0000 0000                  	dc.l Demo_MZ
000043D8 0000 0000                  	dc.l Demo_MZ
000043DC 0000 0000                  	dc.l Demo_SYZ
000043E0 0000 0000                  	dc.l Demo_SYZ
000043E4 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043EC                            
000043EC                            Demo_EndIndex:
000043EC                            	include "_inc\Demo pointers for ending.asm"
000043EC                            ; ---------------------------------------------------------------------------
000043EC                            ; Demo (ending) sequence pointers
000043EC                            ; ---------------------------------------------------------------------------
000043EC 0000 0000                  	dc.l Demo_EndGHZ1
000043F0 0000 0000                  	dc.l Demo_EndMZ
000043F4 0000 0000                  	dc.l Demo_EndSYZ
000043F8 0000 0000                  	dc.l Demo_EndLZ
000043FC 0000 0000                  	dc.l Demo_EndSLZ
00004400 0000 0000                  	dc.l Demo_EndSBZ1
00004404 0000 0000                  	dc.l Demo_EndSBZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
0000440C                            
0000440C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000441C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000442C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000443C                            		even
0000443C                            
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            ; Collision index loading subroutine
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            
0000443C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000443C                            
0000443C                            
0000443C                            ColIndexLoad:				; XREF: Level
0000443C 7000                       		moveq	#0,d0
0000443E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004442 E548                       		lsl.w	#2,d0
00004444 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000444A 4E75                       		rts	
0000444C                            ; End of function ColIndexLoad
0000444C                            
0000444C                            ; ===========================================================================
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ColPointers:
0000444C                            	include "_inc\Collision index pointers.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Col_GHZ
00004450 0000 0000                  	dc.l Col_LZ
00004454 0000 0000                  	dc.l Col_MZ
00004458 0000 0000                  	dc.l Col_SLZ
0000445C 0000 0000                  	dc.l Col_SYZ
00004460 0000 0000                  	dc.l Col_SBZ
00004460 0000 0000                  	dc.l Col_SBZ
00004464                            
00004464                            ; ---------------------------------------------------------------------------
00004464                            ; Oscillating number subroutine
00004464                            ; ---------------------------------------------------------------------------
00004464                            
00004464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004464                            
00004464                            
00004464                            OscillateNumInit:			; XREF: Level
00004464 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004468 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000446E 7220                       		moveq	#$20,d1
00004470                            
00004470                            Osc_Loop:
00004470 32DA                       		move.w	(a2)+,(a1)+
00004472 51C9 FFFC                  		dbf	d1,Osc_Loop
00004476 4E75                       		rts	
00004478                            ; End of function OscillateNumInit
00004478                            
00004478                            ; ===========================================================================
00004478 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000447C 0000 0080                  		dc.w 0,	$80
00004480 0000 0080                  		dc.w 0,	$80
00004484 0000 0080                  		dc.w 0,	$80
00004488 0000 0080                  		dc.w 0,	$80
0000448C 0000 0080                  		dc.w 0,	$80
00004490 0000 0080                  		dc.w 0,	$80
00004494 0000 0080                  		dc.w 0,	$80
00004498 0000 0080                  		dc.w 0,	$80
0000449C 0000 50F0                  		dc.w 0,	$50F0
000044A0 011E 2080                  		dc.w $11E, $2080
000044A4 00B4 3080                  		dc.w $B4, $3080
000044A8 010E 5080                  		dc.w $10E, $5080
000044AC 01C2 7080                  		dc.w $1C2, $7080
000044B0 0276 0080                  		dc.w $276, $80
000044B4 0000 0080                  		dc.w 0,	$80
000044B8 0000                       		dc.w 0
000044BA                            		even
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            OscillateNumDo:				; XREF: Level
000044BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000044C0 6400                       		bcc.s	locret_41C4
000044C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000044CC 3619                       		move.w	(a1)+,d3
000044CE 720F                       		moveq	#$F,d1
000044D0                            
000044D0                            loc_4184:
000044D0 341A                       		move.w	(a2)+,d2
000044D2 381A                       		move.w	(a2)+,d4
000044D4 0303                       		btst	d1,d3
000044D6 6600                       		bne.s	loc_41A4
000044D8 3029 0002                  		move.w	2(a1),d0
000044DC D042                       		add.w	d2,d0
000044DE 3340 0002                  		move.w	d0,2(a1)
000044E2 D151                       		add.w	d0,0(a1)
000044E4 B811                       		cmp.b	0(a1),d4
000044E6 6200                       		bhi.s	loc_41BA
000044E8 03C3                       		bset	d1,d3
000044EA 6000                       		bra.s	loc_41BA
000044EC                            ; ===========================================================================
000044EC                            
000044EC                            loc_41A4:				; XREF: OscillateNumDo
000044EC 3029 0002                  		move.w	2(a1),d0
000044F0 9042                       		sub.w	d2,d0
000044F2 3340 0002                  		move.w	d0,2(a1)
000044F6 D151                       		add.w	d0,0(a1)
000044F8 B811                       		cmp.b	0(a1),d4
000044FA 6300                       		bls.s	loc_41BA
000044FC 0383                       		bclr	d1,d3
000044FE                            
000044FE                            loc_41BA:
000044FE 5849                       		addq.w	#4,a1
00004500 51C9 FFCE                  		dbf	d1,loc_4184
00004504 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004508                            
00004508                            locret_41C4:
00004508 4E75                       		rts	
0000450A                            ; End of function OscillateNumDo
0000450A                            
0000450A                            ; ===========================================================================
0000450A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000450E 0002 0018                  		dc.w 2,	$18
00004512 0002 0020                  		dc.w 2,	$20
00004516 0002 0030                  		dc.w 2,	$30
0000451A 0004 0020                  		dc.w 4,	$20
0000451E 0008 0008                  		dc.w 8,	8
00004522 0008 0040                  		dc.w 8,	$40
00004526 0004 0040                  		dc.w 4,	$40
0000452A 0002 0050                  		dc.w 2,	$50
0000452E 0002 0050                  		dc.w 2,	$50
00004532 0002 0020                  		dc.w 2,	$20
00004536 0003 0030                  		dc.w 3,	$30
0000453A 0005 0050                  		dc.w 5,	$50
0000453E 0007 0070                  		dc.w 7,	$70
00004542 0002 0010                  		dc.w 2,	$10
00004546 0002 0010                  		dc.w 2,	$10
0000454A                            		even
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454A                            
0000454A                            
0000454A                            ChangeRingFrame:			; XREF: Level
0000454A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000454E 6A00                       		bpl.s	loc_421C
00004550 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004556 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000455A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004560                            
00004560                            loc_421C:
00004560 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004564 6A00                       		bpl.s	loc_4232
00004566 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000456C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004570 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004576                            
00004576                            loc_4232:
00004576 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000457A 6A00                       		bpl.s	loc_4250
0000457C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004582 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004586 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000458C 6500                       		bcs.s	loc_4250
0000458E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004594                            
00004594                            loc_4250:
00004594 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004598 6700                       		beq.s	locret_4272
0000459A 7000                       		moveq	#0,d0
0000459C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000045A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000045A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000045A8 EF58                       		rol.w	#7,d0
000045AA 0240 0003                  		andi.w	#3,d0
000045AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000045B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000045B6                            
000045B6                            locret_4272:
000045B6 4E75                       		rts	
000045B8                            ; End of function ChangeRingFrame
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; End-of-act signpost pattern loading subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            SignpostArtLoad:			; XREF: Level
000045B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000045BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000045C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000045C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000045C8 3038 F700                  		move.w	($FFFFF700).w,d0
000045CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000045D0 0441 0100                  		subi.w	#$100,d1
000045D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000045D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000045D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045DC 6700                       		beq.s	Signpost_Exit
000045DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000045E2 6700                       		beq.s	Signpost_Exit
000045E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045E8 7012                       		moveq	#$12,d0
000045EA 6000 D1E6                  		bra.w	LoadPLC2	; load signpost	patterns
000045EE                            ; ===========================================================================
000045EE                            
000045EE                            Signpost_Exit:
000045EE 4E75                       		rts	
000045F0                            ; End of function SignpostArtLoad
000045F0                            
000045F0                            ; ===========================================================================
000045F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004670                            Demo_MZ:	incbin	demodata\i_mz.bin
000047A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004820                            Demo_SS:	incbin	demodata\i_ss.bin
00004920                            ; ===========================================================================
00004920                            
00004920                            ; ---------------------------------------------------------------------------
00004920                            ; Special Stage
00004920                            ; ---------------------------------------------------------------------------
00004920                            
00004920                            SpecialStage:				; XREF: GameModeArray
00004920 303C 00CA                  		move.w	#$CA,d0
00004924 6100 CC96                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004928 6100 D872                  		bsr.w	Pal_MakeFlash
0000492C 46FC 2700                  		move	#$2700,sr
00004930 4DF9 00C0 0004             		lea	($C00004).l,a6
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)
0000493A 3CBC 8004                  		move.w	#$8004,(a6)
0000493E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004944 3CBC 9011                  		move.w	#$9011,(a6)
00004948 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000494C 0200 00BF                  		andi.b	#$BF,d0
00004950 33C0 00C0 0004             		move.w	d0,($C00004).l
00004956 6100 CB8C                  		bsr.w	ClearScreen
0000495A 46FC 2300                  		move	#$2300,sr
0000495E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004964 3ABC 8F01                  		move.w	#$8F01,(a5)
00004968 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000496E 3ABC 9780                  		move.w	#$9780,(a5)
00004972 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004978 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004980                            
00004980                            loc_463C:
00004980 3215                       		move.w	(a5),d1
00004982 0801 0001                  		btst	#1,d1
00004986 66F8                       		bne.s	loc_463C
00004988 3ABC 8F02                  		move.w	#$8F02,(a5)
0000498C 6100 0000                  		bsr.w	SS_BGLoad
00004990 7014                       		moveq	#$14,d0
00004992 6100 CF78                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_ClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000049A6                            
000049A6 43F8 F700                  		lea	($FFFFF700).w,a1
000049AA 7000                       		moveq	#0,d0
000049AC 323C 003F                  		move.w	#$3F,d1
000049B0                            
000049B0                            SS_ClrRam:
000049B0 22C0                       		move.l	d0,(a1)+
000049B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000049B6                            
000049B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000049BA 7000                       		moveq	#0,d0
000049BC 323C 0027                  		move.w	#$27,d1
000049C0                            
000049C0                            SS_ClrRam2:
000049C0 22C0                       		move.l	d0,(a1)+
000049C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000049C6                            
000049C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000049CA 7000                       		moveq	#0,d0
000049CC 323C 007F                  		move.w	#$7F,d1
000049D0                            
000049D0                            SS_ClrNemRam:
000049D0 22C0                       		move.l	d0,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000049D6                            
000049D6 4238 F64E                  		clr.b	($FFFFF64E).w
000049DA 4278 FE02                  		clr.w	($FFFFFE02).w
000049DE 700A                       		moveq	#$A,d0
000049E0 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049E4 4EB9 0000 0000             		jsr	SS_Load
000049EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A00 6100 0000                  		bsr.w	PalCycle_SS
00004A04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A0E 303C 0089                  		move.w	#$89,d0
00004A12 6100 CBA2                  		bsr.w	PlaySound	; play special stage BG	music
00004A16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A1C 43F9 0000 43CC             		lea	(Demo_Index).l,a1
00004A22 7006                       		moveq	#6,d0
00004A24 E548                       		lsl.w	#2,d0
00004A26 2271 0000                  		movea.l	(a1,d0.w),a1
00004A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A34 4278 FE20                  		clr.w	($FFFFFE20).w
00004A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A48 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A54 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A56 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A5C                            
00004A5C                            SS_NoDebug:
00004A5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A60 0000 0040                  		ori.b	#$40,d0
00004A64 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6A 6100 D684                  		bsr.w	Pal_MakeWhite
00004A6E                            
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            ; Main Special Stage loop
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            
00004A6E                            SS_MainLoop:
00004A6E 6100 CB58                  		bsr.w	PauseGame
00004A72 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A78 6100 E176                  		bsr.w	DelayProgram
00004A7C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A86 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8C 4EB9 0000 0000             		jsr	BuildSprites
00004A92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A98 6100 0000                  		bsr.w	SS_BGAnimate
00004A9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004AA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004AA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004AAA                            
00004AAA                            SS_ChkEnd:
00004AAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004AB0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004AB4                            
00004AB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004ABC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004AC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004AC8 6500                       		bcs.s	SS_End		; if not, branch
00004ACA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004ACE                            
00004ACE                            SS_End:
00004ACE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004AD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004ADA 4278 F794                  		clr.w	($FFFFF794).w
00004ADE                            
00004ADE                            SS_EndLoop:
00004ADE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AE4 6100 E10A                  		bsr.w	DelayProgram
00004AE8 6100 F832                  		bsr.w	MoveSonicInDemo
00004AEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004AF8 4EB9 0000 0000             		jsr	BuildSprites
00004AFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B04 6100 0000                  		bsr.w	SS_BGAnimate
00004B08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B0C 6A00                       		bpl.s	loc_47D4
00004B0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B14 6100 D6A6                  		bsr.w	Pal_ToWhite
00004B18                            
00004B18                            loc_47D4:
00004B18 4A78 F614                  		tst.w	($FFFFF614).w
00004B1C 66C0                       		bne.s	SS_EndLoop
00004B1E                            
00004B1E 46FC 2700                  		move	#$2700,sr
00004B22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B28 3CBC 8230                  		move.w	#$8230,(a6)
00004B2C 3CBC 8407                  		move.w	#$8407,(a6)
00004B30 3CBC 9001                  		move.w	#$9001,(a6)
00004B34 6100 C9AE                  		bsr.w	ClearScreen
00004B38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B48 6100 CB16                  		bsr.w	NemDec
00004B4C 4EB9 0000 0000             		jsr	Hud_Base
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 7011                       		moveq	#$11,d0
00004B58 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B5C 7000                       		moveq	#0,d0
00004B5E 6100 CC72                  		bsr.w	LoadPLC2
00004B62 701B                       		moveq	#$1B,d0
00004B64 6100 CC3A                  		bsr.w	LoadPLC		; load results screen patterns
00004B68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B80 303C 008E                  		move.w	#$8E,d0
00004B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_EndClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B9A                            
00004B9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004BA0                            
00004BA0                            SS_NormalExit:
00004BA0 6100 CA26                  		bsr.w	PauseGame
00004BA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004BAA 6100 E044                  		bsr.w	DelayProgram
00004BAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004BB4 4EB9 0000 0000             		jsr	BuildSprites
00004BBA 6100 CC50                  		bsr.w	RunPLC_RAM
00004BBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004BC2 67DC                       		beq.s	SS_NormalExit
00004BC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004BC8 66D6                       		bne.s	SS_NormalExit
00004BCA 303C 00CA                  		move.w	#$CA,d0
00004BCE 6100 C9EC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004BD2 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004BD6 4E75                       		rts	
00004BD8                            ; ===========================================================================
00004BD8                            
00004BD8                            SS_ToSegaScreen:
00004BD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BDE 4E75                       		rts
00004BE0                            
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            ; Special stage	background loading subroutine
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            SS_BGLoad:				; XREF: SpecialStage
00004BE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BEC 303C 4051                  		move.w	#$4051,d0
00004BF0 6100 CD4C                  		bsr.w	EniDec
00004BF4 263C 5000 0001             		move.l	#$50000001,d3
00004BFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C00 7E06                       		moveq	#6,d7
00004C02                            
00004C02                            loc_48BE:
00004C02 2003                       		move.l	d3,d0
00004C04 7C03                       		moveq	#3,d6
00004C06 7800                       		moveq	#0,d4
00004C08 0C47 0003                  		cmpi.w	#3,d7
00004C0C 6400                       		bcc.s	loc_48CC
00004C0E 7801                       		moveq	#1,d4
00004C10                            
00004C10                            loc_48CC:
00004C10 7A07                       		moveq	#7,d5
00004C12                            
00004C12                            loc_48CE:
00004C12 224A                       		movea.l	a2,a1
00004C14 0A04 0001                  		eori.b	#1,d4
00004C18 6600                       		bne.s	loc_48E2
00004C1A 0C47 0006                  		cmpi.w	#6,d7
00004C1E 6600                       		bne.s	loc_48F2
00004C20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C26                            
00004C26                            loc_48E2:
00004C26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C2A 7207                       		moveq	#7,d1
00004C2C 7407                       		moveq	#7,d2
00004C2E 6100 CA10                  		bsr.w	ShowVDPGraphics
00004C32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C36                            
00004C36                            loc_48F2:
00004C36 0680 0010 0000             		addi.l	#$100000,d0
00004C3C 51CD FFD4                  		dbf	d5,loc_48CE
00004C40 0680 0380 0000             		addi.l	#$3800000,d0
00004C46 0A04 0001                  		eori.b	#1,d4
00004C4A 51CE FFC4                  		dbf	d6,loc_48CC
00004C4E 0683 1000 0000             		addi.l	#$10000000,d3
00004C54 6A00                       		bpl.s	loc_491C
00004C56 4843                       		swap	d3
00004C58 0683 0000 C000             		addi.l	#$C000,d3
00004C5E 4843                       		swap	d3
00004C60                            
00004C60                            loc_491C:
00004C60 D4FC 0080                  		adda.w	#$80,a2
00004C64 51CF FF9C                  		dbf	d7,loc_48BE
00004C68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C74 303C 4000                  		move.w	#$4000,d0
00004C78 6100 CCC4                  		bsr.w	EniDec
00004C7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C82 203C 4000 0003             		move.l	#$40000003,d0
00004C88 723F                       		moveq	#$3F,d1
00004C8A 741F                       		moveq	#$1F,d2
00004C8C 6100 C9B2                  		bsr.w	ShowVDPGraphics
00004C90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C96 203C 5000 0003             		move.l	#$50000003,d0
00004C9C 723F                       		moveq	#$3F,d1
00004C9E 743F                       		moveq	#$3F,d2
00004CA0 6100 C99E                  		bsr.w	ShowVDPGraphics
00004CA4 4E75                       		rts	
00004CA6                            ; End of function SS_BGLoad
00004CA6                            
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            ; Pallet cycling routine - special stage
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            
00004CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CA6                            
00004CA6                            
00004CA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004CA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004CAA 6600                       		bne.s	locret_49E6
00004CAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004CB0 6A00                       		bpl.s	locret_49E6
00004CB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004CBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004CC0 0240 001F                  		andi.w	#$1F,d0
00004CC4 E548                       		lsl.w	#2,d0
00004CC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004CCC D0C0                       		adda.w	d0,a0
00004CCE 1018                       		move.b	(a0)+,d0
00004CD0 6A00                       		bpl.s	loc_4992
00004CD2 303C 01FF                  		move.w	#$1FF,d0
00004CD6                            
00004CD6                            loc_4992:
00004CD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CDA 7000                       		moveq	#0,d0
00004CDC 1018                       		move.b	(a0)+,d0
00004CDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CE8 43F1 0000                  		lea	(a1,d0.w),a1
00004CEC 303C 8200                  		move.w	#-$7E00,d0
00004CF0 1019                       		move.b	(a1)+,d0
00004CF2 3C80                       		move.w	d0,(a6)
00004CF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CF8 303C 8400                  		move.w	#-$7C00,d0
00004CFC 1018                       		move.b	(a0)+,d0
00004CFE 3C80                       		move.w	d0,(a6)
00004D00 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D0A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D12 7000                       		moveq	#0,d0
00004D14 1018                       		move.b	(a0)+,d0
00004D16 6B00                       		bmi.s	loc_49E8
00004D18 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D1E D2C0                       		adda.w	d0,a1
00004D20 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D24 24D9                       		move.l	(a1)+,(a2)+
00004D26 24D9                       		move.l	(a1)+,(a2)+
00004D28 24D9                       		move.l	(a1)+,(a2)+
00004D2A                            
00004D2A                            locret_49E6:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            loc_49E8:				; XREF: PalCycle_SS
00004D2C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D30 0C40 008A                  		cmpi.w	#$8A,d0
00004D34 6500                       		bcs.s	loc_49F4
00004D36 5241                       		addq.w	#1,d1
00004D38                            
00004D38                            loc_49F4:
00004D38 C2FC 002A                  		mulu.w	#$2A,d1
00004D3C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D42 D2C1                       		adda.w	d1,a1
00004D44 0240 007F                  		andi.w	#$7F,d0
00004D48 0880 0000                  		bclr	#0,d0
00004D4C 6700                       		beq.s	loc_4A18
00004D4E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D52 24D1                       		move.l	(a1),(a2)+
00004D54 24E9 0004                  		move.l	4(a1),(a2)+
00004D58 24E9 0008                  		move.l	8(a1),(a2)+
00004D5C                            
00004D5C                            loc_4A18:
00004D5C D2FC 000C                  		adda.w	#$C,a1
00004D60 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D64 0C40 000A                  		cmpi.w	#$A,d0
00004D68 6500                       		bcs.s	loc_4A2E
00004D6A 0440 000A                  		subi.w	#$A,d0
00004D6E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D72                            
00004D72                            loc_4A2E:
00004D72 3200                       		move.w	d0,d1
00004D74 D040                       		add.w	d0,d0
00004D76 D041                       		add.w	d1,d0
00004D78 D2C0                       		adda.w	d0,a1
00004D7A 24D9                       		move.l	(a1)+,(a2)+
00004D7C 34D9                       		move.w	(a1)+,(a2)+
00004D7E 4E75                       		rts	
00004D80                            ; End of function PalCycle_SS
00004D80                            
00004D80                            ; ===========================================================================
00004D80 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D90                            					; XREF: PalCycle_SS
00004D90 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004DA0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004DB0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004DC0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004DD0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DE0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DF0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E00                            		even
00004E00 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E0E                            					; XREF: PalCycle_SS
00004E0E                            		even
00004E0E                            
00004E0E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E56                            		even
00004E56                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F28                            		even
00004F28                            
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            ; Subroutine to	make the special stage background animated
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            
00004F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F28                            
00004F28                            
00004F28                            SS_BGAnimate:				; XREF: SpecialStage
00004F28 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F2C 6600                       		bne.s	loc_4BF6
00004F2E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F3A                            
00004F3A                            loc_4BF6:
00004F3A 0C40 0008                  		cmpi.w	#8,d0
00004F3E 6400                       		bcc.s	loc_4C4E
00004F40 0C40 0006                  		cmpi.w	#6,d0
00004F44 6600                       		bne.s	loc_4C10
00004F46 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F4A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F54                            
00004F54                            loc_4C10:
00004F54 7000                       		moveq	#0,d0
00004F56 3038 F708                  		move.w	($FFFFF708).w,d0
00004F5A 4440                       		neg.w	d0
00004F5C 4840                       		swap	d0
00004F5E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F68 7609                       		moveq	#9,d3
00004F6A                            
00004F6A                            loc_4C26:
00004F6A 302B 0002                  		move.w	2(a3),d0
00004F6E 6100 DCB2                  		bsr.w	CalcSine
00004F72 7400                       		moveq	#0,d2
00004F74 1419                       		move.b	(a1)+,d2
00004F76 C1C2                       		muls.w	d2,d0
00004F78 E080                       		asr.l	#8,d0
00004F7A 36C0                       		move.w	d0,(a3)+
00004F7C 1419                       		move.b	(a1)+,d2
00004F7E 4882                       		ext.w	d2
00004F80 D55B                       		add.w	d2,(a3)+
00004F82 51CB FFE6                  		dbf	d3,loc_4C26
00004F86 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F8A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F90 6000                       		bra.s	loc_4C7E
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            loc_4C4E:				; XREF: SS_BGAnimate
00004F92 0C40 000C                  		cmpi.w	#$C,d0
00004F96 6600                       		bne.s	loc_4C74
00004F98 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F9C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FA0 243C 0001 8000             		move.l	#$18000,d2
00004FA6 7206                       		moveq	#6,d1
00004FA8                            
00004FA8                            loc_4C64:
00004FA8 2013                       		move.l	(a3),d0
00004FAA 9082                       		sub.l	d2,d0
00004FAC 26C0                       		move.l	d0,(a3)+
00004FAE 0482 0000 2000             		subi.l	#$2000,d2
00004FB4 51C9 FFF2                  		dbf	d1,loc_4C64
00004FB8                            
00004FB8                            loc_4C74:
00004FB8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FBC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004FC2                            
00004FC2                            loc_4C7E:
00004FC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004FC6 3038 F718                  		move.w	($FFFFF718).w,d0
00004FCA 4440                       		neg.w	d0
00004FCC 4840                       		swap	d0
00004FCE 7600                       		moveq	#0,d3
00004FD0 161A                       		move.b	(a2)+,d3
00004FD2 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004FD6 4442                       		neg.w	d2
00004FD8 0242 00FF                  		andi.w	#$FF,d2
00004FDC E54A                       		lsl.w	#2,d2
00004FDE                            
00004FDE                            loc_4C9A:
00004FDE 301B                       		move.w	(a3)+,d0
00004FE0 544B                       		addq.w	#2,a3
00004FE2 7200                       		moveq	#0,d1
00004FE4 121A                       		move.b	(a2)+,d1
00004FE6 5341                       		subq.w	#1,d1
00004FE8                            
00004FE8                            loc_4CA4:
00004FE8 2380 2000                  		move.l	d0,(a1,d2.w)
00004FEC 5842                       		addq.w	#4,d2
00004FEE 0242 03FC                  		andi.w	#$3FC,d2
00004FF2 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FF6 51CB FFE6                  		dbf	d3,loc_4C9A
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGAnimate
00004FFC                            
00004FFC                            ; ===========================================================================
00004FFC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005008                            		even
00005008 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005010                            		even
00005010 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005024                            		even
00005024                            					; XREF: SS_BGAnimate
00005024                            ; ===========================================================================
00005024                            
00005024                            ; ---------------------------------------------------------------------------
00005024                            ; Continue screen
00005024                            ; ---------------------------------------------------------------------------
00005024                            
00005024                            ContinueScreen:				; XREF: GameModeArray
00005024 6100 D04C                  		bsr.w	Pal_FadeFrom
00005028 46FC 2700                  		move	#$2700,sr
0000502C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005030 0200 00BF                  		andi.b	#$BF,d0
00005034 33C0 00C0 0004             		move.w	d0,($C00004).l
0000503A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005040 3CBC 8004                  		move.w	#$8004,(a6)
00005044 3CBC 8700                  		move.w	#$8700,(a6)
00005048 6100 C49A                  		bsr.w	ClearScreen
0000504C 43F8 D000                  		lea	($FFFFD000).w,a1
00005050 7000                       		moveq	#0,d0
00005052 323C 07FF                  		move.w	#$7FF,d1
00005056                            
00005056                            Cont_ClrObjRam:
00005056 22C0                       		move.l	d0,(a1)+
00005058 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000505C                            
0000505C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005066 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000506C 6100 C5F2                  		bsr.w	NemDec
00005070 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000507A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005080 6100 C5DE                  		bsr.w	NemDec
00005084 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000508E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005094 6100 C5CA                  		bsr.w	NemDec
00005098 720A                       		moveq	#10,d1
0000509A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000050A0 7012                       		moveq	#$12,d0
000050A2 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
000050A6 103C 0090                  		move.b	#$90,d0
000050AA 6100 C50A                  		bsr.w	PlaySound	; play continue	music
000050AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000050B4 42B8 F700                  		clr.l	($FFFFF700).w
000050B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000050C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000050C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000050CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000050D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000050D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050EA 4EB9 0000 0000             		jsr	ObjectsLoad
000050F0 4EB9 0000 0000             		jsr	BuildSprites
000050F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050FA 0000 0040                  		ori.b	#$40,d0
000050FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005104 6100 CEC6                  		bsr.w	Pal_FadeTo
00005108                            
00005108                            ; ---------------------------------------------------------------------------
00005108                            ; Continue screen main loop
00005108                            ; ---------------------------------------------------------------------------
00005108                            
00005108                            Cont_MainLoop:
00005108 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000510E 6100 DAE0                  		bsr.w	DelayProgram
00005112 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005118 6400                       		bcc.s	loc_4DF2
0000511A 46FC 2700                  		move	#$2700,sr
0000511E 3238 F614                  		move.w	($FFFFF614).w,d1
00005122 82FC 003C                  		divu.w	#$3C,d1
00005126 0281 0000 000F             		andi.l	#$F,d1
0000512C 4EB9 0000 0000             		jsr	ContScrCounter
00005132 46FC 2300                  		move	#$2300,sr
00005136                            
00005136                            loc_4DF2:
00005136 4EB9 0000 0000             		jsr	ObjectsLoad
0000513C 4EB9 0000 0000             		jsr	BuildSprites
00005142 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005148 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000514A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005150 64B6                       		bcc.s	Cont_MainLoop
00005152 4A78 F614                  		tst.w	($FFFFF614).w
00005156 6600 FFB0                  		bne.w	Cont_MainLoop
0000515A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005160 4E75                       		rts	
00005162                            ; ===========================================================================
00005162                            
00005162                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005162 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005168 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000516E 7000                       		moveq	#0,d0
00005170 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005174 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005178 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000517C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005180 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Object 80 - Continue screen elements
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Obj80:					; XREF: Obj_Index
00005186 7000                       		moveq	#0,d0
00005188 1028 0024                  		move.b	$24(a0),d0
0000518C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005190 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005194                            ; ===========================================================================
00005194 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005196 0000                       		dc.w Obj80_Display-Obj80_Index
00005198 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000519A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000519C                            ; ===========================================================================
0000519C                            
0000519C                            Obj80_Main:				; XREF: Obj80_Index
0000519C 5428 0024                  		addq.b	#2,$24(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A8 317C 8500 0002             		move.w	#$8500,2(a0)
000051AE 117C 0000 0001             		move.b	#0,1(a0)
000051B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000051BA 317C 0120 0008             		move.w	#$120,8(a0)
000051C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000051C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000051CC                            
000051CC                            Obj80_Display:				; XREF: Obj80_Index
000051CC 4EF9 0000 0000             		jmp	DisplaySprite
000051D2                            ; ===========================================================================
000051D2                            Obj80_MiniSonicPos:
000051D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051F0 2248                       		movea.l	a0,a1
000051F2 45F9 0000 51D2             		lea	(Obj80_MiniSonicPos).l,a2
000051F8 7200                       		moveq	#0,d1
000051FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051FE 5501                       		subq.b	#2,d1
00005200 6400                       		bcc.s	loc_4EC4
00005202 4EF9 0000 0000             		jmp	DeleteObject
00005208                            ; ===========================================================================
00005208                            
00005208                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005208 7601                       		moveq	#1,d3
0000520A 0C01 000E                  		cmpi.b	#$E,d1
0000520E 6500                       		bcs.s	loc_4ED0
00005210 7600                       		moveq	#0,d3
00005212 720E                       		moveq	#$E,d1
00005214                            
00005214                            loc_4ED0:
00005214 1401                       		move.b	d1,d2
00005216 0202 0001                  		andi.b	#1,d2
0000521A                            
0000521A                            Obj80_MiniSonLoop:
0000521A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000521E 335A 0008                  		move.w	(a2)+,8(a1)
00005222 4A02                       		tst.b	d2
00005224 6700                       		beq.s	loc_4EEA
00005226 0469 000A 0008             		subi.w	#$A,8(a1)
0000522C                            
0000522C                            loc_4EEA:
0000522C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005232 137C 0006 001A             		move.b	#6,$1A(a1)
00005238 137C 0006 0024             		move.b	#6,$24(a1)
0000523E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005246 337C 8551 0002             		move.w	#$8551,2(a1)
0000524C 137C 0000 0001             		move.b	#0,1(a1)
00005252 43E9 0040                  		lea	$40(a1),a1
00005256 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000525A 43E9 FFC0                  		lea	-$40(a1),a1
0000525E 1343 0028                  		move.b	d3,$28(a1)
00005262                            
00005262                            Obj80_ChkType:				; XREF: Obj80_Index
00005262 4A28 0028                  		tst.b	$28(a0)
00005266 6700                       		beq.s	loc_4F40
00005268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526E 6500                       		bcs.s	loc_4F40
00005270 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005274 0200 0001                  		andi.b	#1,d0
00005278 6600                       		bne.s	loc_4F40
0000527A 4A78 D010                  		tst.w	($FFFFD010).w
0000527E 6600                       		bne.s	Obj80_Delete
00005280 4E75                       		rts	
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4F40:				; XREF: Obj80_ChkType
00005282 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005286 0200 000F                  		andi.b	#$F,d0
0000528A 6600                       		bne.s	Obj80_Display2
0000528C 0868 0000 001A             		bchg	#0,$1A(a0)
00005292                            
00005292                            Obj80_Display2:
00005292 4EF9 0000 0000             		jmp	DisplaySprite
00005298                            ; ===========================================================================
00005298                            
00005298                            Obj80_Delete:				; XREF: Obj80_ChkType
00005298 4EF9 0000 0000             		jmp	DeleteObject
0000529E                            ; ===========================================================================
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Object 81 - Sonic on the continue screen
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Obj81:					; XREF: Obj_Index
0000529E 7000                       		moveq	#0,d0
000052A0 1028 0024                  		move.b	$24(a0),d0
000052A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000052A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000052AC 4EF9 0000 0000             		jmp	DisplaySprite
000052B2                            ; ===========================================================================
000052B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000052B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000052B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000052B8 0000                       		dc.w Obj81_Run-Obj81_Index
000052BA                            ; ===========================================================================
000052BA                            
000052BA                            Obj81_Main:				; XREF: Obj81_Index
000052BA 5428 0024                  		addq.b	#2,$24(a0)
000052BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000052C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000052CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052D2 317C 0780 0002             		move.w	#$780,2(a0)
000052D8 117C 0004 0001             		move.b	#4,1(a0)
000052DE 117C 0002 0018             		move.b	#2,$18(a0)
000052E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052F0                            
000052F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000052F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052F8 5428 0024                  		addq.b	#2,$24(a0)
000052FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005300 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005308 317C 8500 0002             		move.w	#$8500,2(a0)
0000530E 117C 0000 001C             		move.b	#0,$1C(a0)
00005314 6000                       		bra.s	Obj81_Animate
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005316 4EB9 0000 0000             		jsr	SpeedToPos
0000531C 4EB9 0000 0000             		jsr	Sonic_Animate
00005322 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005328                            ; ===========================================================================
00005328                            
00005328                            Obj81_Animate:				; XREF: Obj81_Index
00005328 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000532C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000532E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005334 4EF9 0000 0000             		jmp	AnimateSprite
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000533A 5428 0024                  		addq.b	#2,$24(a0)
0000533E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005346 317C 0780 0002             		move.w	#$780,2(a0)
0000534C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005352 4268 0014                  		clr.w	$14(a0)
00005356 5168 000C                  		subq.w	#8,$C(a0)
0000535A 103C 00E0                  		move.b	#$E0,d0
0000535E 6100 C25C                  		bsr.w	PlaySound_Special ; fade out music
00005362                            
00005362                            Obj81_Run:				; XREF: Obj81_Index
00005362 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005368 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000536A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005370 6000                       		bra.s	Obj81_ShowRun
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005372 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005378                            
00005378                            Obj81_ShowRun:				; XREF: Obj81_Run
00005378 4EB9 0000 0000             		jsr	SpeedToPos
0000537E 4EB9 0000 0000             		jsr	Sonic_Animate
00005384 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000538A                            ; ===========================================================================
0000538A                            Ani_obj81:
0000538A                            	include "_anim\obj81.asm"
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Animation script - Sonic on the continue screen
0000538A                            ; ---------------------------------------------------------------------------
0000538A 0000                       		dc.w byte_504A-Ani_obj81
0000538C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005398 00                         		even
00005398 00                         		even
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            Map_obj80:
00005398                            	include "_maps\obj80.asm"
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000539C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000053A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000053A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000053A8 0B                         byte_5066:	dc.b $B
000053A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000053AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000053B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000053B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000053BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000053C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000053C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000053CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000053D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000053D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053E0 03                         byte_509E:	dc.b 3
000053E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053F0 03                         byte_50AE:	dc.b 3
000053F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005400 03                         byte_50BE:	dc.b 3
00005401 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005406 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000540B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005410 02                         byte_50CE:	dc.b 2
00005411 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005416 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000541B 01                         byte_50D9:	dc.b 1
0000541C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005421 01                         byte_50DF:	dc.b 1
00005422 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005428 00                         		even
00005428 00                         		even
00005428                            
00005428                            ; ===========================================================================
00005428                            ; ---------------------------------------------------------------------------
00005428                            ; Ending sequence in Green Hill	Zone
00005428                            ; ---------------------------------------------------------------------------
00005428                            
00005428                            EndingSequence:				; XREF: GameModeArray
00005428 103C 00E4                  		move.b	#$E4,d0
0000542C 6100 C18E                  		bsr.w	PlaySound_Special ; stop music
00005430 6100 CC40                  		bsr.w	Pal_FadeFrom
00005434 43F8 D000                  		lea	($FFFFD000).w,a1
00005438 7000                       		moveq	#0,d0
0000543A 323C 07FF                  		move.w	#$7FF,d1
0000543E                            
0000543E                            End_ClrObjRam:
0000543E 22C0                       		move.l	d0,(a1)+
00005440 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005444                            
00005444 43F8 F628                  		lea	($FFFFF628).w,a1
00005448 7000                       		moveq	#0,d0
0000544A 323C 0015                  		move.w	#$15,d1
0000544E                            
0000544E                            End_ClrRam:
0000544E 22C0                       		move.l	d0,(a1)+
00005450 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005454                            
00005454 43F8 F700                  		lea	($FFFFF700).w,a1
00005458 7000                       		moveq	#0,d0
0000545A 323C 003F                  		move.w	#$3F,d1
0000545E                            
0000545E                            End_ClrRam2:
0000545E 22C0                       		move.l	d0,(a1)+
00005460 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005464                            
00005464 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005468 7000                       		moveq	#0,d0
0000546A 323C 0047                  		move.w	#$47,d1
0000546E                            
0000546E                            End_ClrRam3:
0000546E 22C0                       		move.l	d0,(a1)+
00005470 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005474                            
00005474 46FC 2700                  		move	#$2700,sr
00005478 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000547C 0200 00BF                  		andi.b	#$BF,d0
00005480 33C0 00C0 0004             		move.w	d0,($C00004).l
00005486 6100 C05C                  		bsr.w	ClearScreen
0000548A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005490 3CBC 8B03                  		move.w	#$8B03,(a6)
00005494 3CBC 8230                  		move.w	#$8230,(a6)
00005498 3CBC 8407                  		move.w	#$8407,(a6)
0000549C 3CBC 857C                  		move.w	#$857C,(a6)
000054A0 3CBC 9001                  		move.w	#$9001,(a6)
000054A4 3CBC 8004                  		move.w	#$8004,(a6)
000054A8 3CBC 8720                  		move.w	#$8720,(a6)
000054AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000054B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000054B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000054BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000054C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000054C8 6700                       		beq.s	End_LoadData	; if yes, branch
000054CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000054D0                            
000054D0                            End_LoadData:
000054D0 701C                       		moveq	#$1C,d0
000054D2 6100 C438                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000054D6 4EB9 0000 0000             		jsr	Hud_Base
000054DC 6100 0000                  		bsr.w	LevelSizeLoad
000054E0 6100 0000                  		bsr.w	DeformBgLayer
000054E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000054EE 6100 0000                  		bsr.w	LoadTilesFromStart
000054F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054FA 46FC 2300                  		move	#$2300,sr
000054FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005504 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005508 6100 C5B2                  		bsr.w	KosDec
0000550C 7003                       		moveq	#3,d0
0000550E 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005512 303C 008B                  		move.w	#$8B,d0
00005516 6100 C09E                  		bsr.w	PlaySound	; play ending sequence music
0000551A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005520 6700                       		beq.s	End_LoadSonic	; if not, branch
00005522 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005528                            
00005528                            End_LoadSonic:
00005528 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000552E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005534 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000553A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005540 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005546 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000554C 4EB9 0000 0000             		jsr	ObjPosLoad
00005552 4EB9 0000 0000             		jsr	ObjectsLoad
00005558 4EB9 0000 0000             		jsr	BuildSprites
0000555E 7000                       		moveq	#0,d0
00005560 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005564 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005568 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000556C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005570 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005574 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005578 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000557C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005580 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005584 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005588 6100 EEDA                  		bsr.w	OscillateNumInit
0000558C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005592 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005598 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000559E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000055A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055AA 6100 D644                  		bsr.w	DelayProgram
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0000 0040                  		ori.b	#$40,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055C2 6100 CA08                  		bsr.w	Pal_FadeTo
000055C6                            
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            ; Main ending sequence loop
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            
000055C6                            End_MainLoop:
000055C6 6100 C000                  		bsr.w	PauseGame
000055CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055D0 6100 D61E                  		bsr.w	DelayProgram
000055D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055D8 6100 0000                  		bsr.w	End_MoveSonic
000055DC 4EB9 0000 0000             		jsr	ObjectsLoad
000055E2 6100 0000                  		bsr.w	DeformBgLayer
000055E6 4EB9 0000 0000             		jsr	BuildSprites
000055EC 4EB9 0000 0000             		jsr	ObjPosLoad
000055F2 6100 C568                  		bsr.w	PalCycle_Load
000055F6 6100 EEC2                  		bsr.w	OscillateNumDo
000055FA 6100 EF4E                  		bsr.w	ChangeRingFrame
000055FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005604 6700                       		beq.s	loc_52DA	; if yes, branch
00005606 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000560C 103C 0091                  		move.b	#$91,d0
00005610 6100 BFAA                  		bsr.w	PlaySound_Special ; play credits music
00005614 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000561A 4E75                       		rts	
0000561C                            ; ===========================================================================
0000561C                            
0000561C                            loc_52DA:
0000561C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005620 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005624                            
00005624 4278 FE02                  		clr.w	($FFFFFE02).w
00005628 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000562E 4278 F794                  		clr.w	($FFFFF794).w
00005632                            
00005632                            End_AllEmlds:				; XREF: loc_5334
00005632 6100 BF94                  		bsr.w	PauseGame
00005636 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000563C 6100 D5B2                  		bsr.w	DelayProgram
00005640 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005644 6100 0000                  		bsr.w	End_MoveSonic
00005648 4EB9 0000 0000             		jsr	ObjectsLoad
0000564E 6100 0000                  		bsr.w	DeformBgLayer
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 4EB9 0000 0000             		jsr	ObjPosLoad
0000565E 6100 EE5A                  		bsr.w	OscillateNumDo
00005662 6100 EEE6                  		bsr.w	ChangeRingFrame
00005666 5378 F794                  		subq.w	#1,($FFFFF794).w
0000566A 6A00                       		bpl.s	loc_5334
0000566C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005672 6100 CB48                  		bsr.w	Pal_ToWhite
00005676                            
00005676                            loc_5334:
00005676 4A78 FE02                  		tst.w	($FFFFFE02).w
0000567A 6700 FFB6                  		beq.w	End_AllEmlds
0000567E 4278 FE02                  		clr.w	($FFFFFE02).w
00005682 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000568E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005694 47F8 F700                  		lea	($FFFFF700).w,a3
00005698 49F8 A400                  		lea	($FFFFA400).w,a4
0000569C 343C 4000                  		move.w	#$4000,d2
000056A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000056A4 7013                       		moveq	#$13,d0
000056A6 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
000056AA 6100 CA44                  		bsr.w	Pal_MakeWhite
000056AE 6000 FF16                  		bra.w	End_MainLoop
000056B2                            
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Subroutine controlling Sonic on the ending sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            
000056B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B2                            
000056B2                            
000056B2                            End_MoveSonic:				; XREF: End_MainLoop
000056B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000056B6 6600                       		bne.s	End_MoveSonic2
000056B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000056BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000056C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000056CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000056D2 5500                       		subq.b	#2,d0
000056D4 6600                       		bne.s	End_MoveSonic3
000056D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056E2 7000                       		moveq	#0,d0
000056E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000056F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005702 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005708 4E75                       		rts	
0000570A                            ; ===========================================================================
0000570A                            
0000570A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000570A 5500                       		subq.b	#2,d0
0000570C 6600                       		bne.s	End_MoveSonExit
0000570E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005712 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005718 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000571E 4278 D024                  		clr.w	($FFFFD024).w
00005722                            
00005722                            End_MoveSonExit:
00005722 4E75                       		rts	
00005724                            ; End of function End_MoveSonic
00005724                            
00005724                            ; ===========================================================================
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Object 87 - Sonic on ending sequence
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            Obj87:					; XREF: Obj_Index
00005724 7000                       		moveq	#0,d0
00005726 1028 0025                  		move.b	$25(a0),d0
0000572A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000572E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005732 4EF9 0000 0000             		jmp	DisplaySprite
00005738                            ; ===========================================================================
00005738 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000573C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005740 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005744 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005748 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_Main:				; XREF: Obj87_Index
0000574C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005752 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005754 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000575A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005760 4E75                       		rts	
00005762                            ; ===========================================================================
00005762                            
00005762                            Obj87_Main2:				; XREF: Obj87_Main
00005762 5428 0025                  		addq.b	#2,$25(a0)
00005766 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000576E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005774 117C 0004 0001             		move.b	#4,1(a0)
0000577A 4228 0022                  		clr.b	$22(a0)
0000577E 117C 0002 0018             		move.b	#2,$18(a0)
00005784 117C 0000 001A             		move.b	#0,$1A(a0)
0000578A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005790                            
00005790                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005794 6600                       		bne.s	Obj87_Wait
00005796 5428 0025                  		addq.b	#2,$25(a0)
0000579A 317C 0001 001C             		move.w	#1,$1C(a0)
000057A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000057A6                            
000057A6                            Obj87_Wait:
000057A6 4E75                       		rts	
000057A8                            ; ===========================================================================
000057A8                            
000057A8                            Obj87_LookUp:				; XREF: Obj87_Index
000057A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000057B0 6600                       		bne.s	locret_5480
000057B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000057B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000057BE 5428 0025                  		addq.b	#2,$25(a0)
000057C2                            
000057C2                            locret_5480:
000057C2 4E75                       		rts	
000057C4                            ; ===========================================================================
000057C4                            
000057C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000057C4 5368 0030                  		subq.w	#1,$30(a0)
000057C8 6600                       		bne.s	Obj87_Wait2
000057CA 43F8 D400                  		lea	($FFFFD400).w,a1
000057CE 323C 00FF                  		move.w	#$FF,d1
000057D2                            
000057D2                            Obj87_ClrLoop:
000057D2 4299                       		clr.l	(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000057D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057DE 5428 0025                  		addq.b	#2,$25(a0)
000057E2 117C 0001 001C             		move.b	#1,$1C(a0)
000057E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000057EE                            
000057EE                            Obj87_Wait2:
000057EE 4E75                       		rts	
000057F0                            ; ===========================================================================
000057F0                            
000057F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)
000057F4 6600                       		bne.s	Obj87_Wait3
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005800 117C 0002 001C             		move.b	#2,$1C(a0)
00005806 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000580C                            
0000580C                            Obj87_Wait3:
0000580C 4E75                       		rts	
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj87_Animate:				; XREF: Obj87_Index
0000580E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005814 4EF9 0000 0000             		jmp	AnimateSprite
0000581A                            ; ===========================================================================
0000581A                            
0000581A                            Obj87_Leap:				; XREF: Obj87_Index
0000581A 5368 0030                  		subq.w	#1,$30(a0)
0000581E 6600                       		bne.s	Obj87_Wait4
00005820 5428 0025                  		addq.b	#2,$25(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000582C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005832 117C 0004 0001             		move.b	#4,1(a0)
00005838 4228 0022                  		clr.b	$22(a0)
0000583C 117C 0002 0018             		move.b	#2,$18(a0)
00005842 117C 0005 001A             		move.b	#5,$1A(a0)
00005848 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000584E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005854 60B8                       		bra.s	Obj87_Animate
00005856                            ; ===========================================================================
00005856                            
00005856                            Obj87_Wait4:				; XREF: Obj87_Leap
00005856 4E75                       		rts	
00005858                            ; ===========================================================================
00005858                            Ani_obj87:
00005858                            	include "_anim\obj87.asm"
00005858                            ; ---------------------------------------------------------------------------
00005858                            ; Animation script - Sonic on the ending sequence
00005858                            ; ---------------------------------------------------------------------------
00005858 0000                       		dc.w byte_551C-Ani_obj87
0000585A 0000                       		dc.w byte_552A-Ani_obj87
0000585C 0000                       		dc.w byte_5534-Ani_obj87
0000585E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000586C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005876 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000587E                            		even
0000587E                            		even
0000587E                            
0000587E                            ; ===========================================================================
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            ; Object 88 - chaos emeralds on	the ending sequence
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            
0000587E                            Obj88:					; XREF: Obj_Index
0000587E 7000                       		moveq	#0,d0
00005880 1028 0024                  		move.b	$24(a0),d0
00005884 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005888 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000588C 4EF9 0000 0000             		jmp	DisplaySprite
00005892                            ; ===========================================================================
00005892 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005894 0000                       		dc.w Obj88_Move-Obj88_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj88_Main:				; XREF: Obj88_Index
00005896 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000589C 6700                       		beq.s	Obj88_Main2
0000589E 588F                       		addq.l	#4,sp
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj88_Main2:				; XREF: Obj88_Main
000058A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000058A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000058AE 2248                       		movea.l	a0,a1
000058B0 7600                       		moveq	#0,d3
000058B2 7401                       		moveq	#1,d2
000058B4 7205                       		moveq	#5,d1
000058B6                            
000058B6                            Obj88_MainLoop:
000058B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000058BA 5429 0024                  		addq.b	#2,$24(a1)
000058BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000058C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000058CC 137C 0004 0001             		move.b	#4,1(a1)
000058D2 137C 0001 0018             		move.b	#1,$18(a1)
000058D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000058DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058E4 1342 001C                  		move.b	d2,$1C(a1)
000058E8 1342 001A                  		move.b	d2,$1A(a1)
000058EC 5202                       		addq.b	#1,d2
000058EE 1343 0026                  		move.b	d3,$26(a1)
000058F2 0603 002A                  		addi.b	#$2A,d3
000058F6 43E9 0040                  		lea	$40(a1),a1
000058FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058FE                            
000058FE                            Obj88_Move:				; XREF: Obj88_Index
000058FE 3028 003E                  		move.w	$3E(a0),d0
00005902 D168 0026                  		add.w	d0,$26(a0)
00005906 1028 0026                  		move.b	$26(a0),d0
0000590A 4EB9 0000 2C22             		jsr	(CalcSine).l
00005910 7800                       		moveq	#0,d4
00005912 1828 003C                  		move.b	$3C(a0),d4
00005916 C3C4                       		muls.w	d4,d1
00005918 E081                       		asr.l	#8,d1
0000591A C1C4                       		muls.w	d4,d0
0000591C E080                       		asr.l	#8,d0
0000591E D268 0038                  		add.w	$38(a0),d1
00005922 D068 003A                  		add.w	$3A(a0),d0
00005926 3141 0008                  		move.w	d1,8(a0)
0000592A 3140 000C                  		move.w	d0,$C(a0)
0000592E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005934 6700                       		beq.s	loc_55FA
00005936 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000593C                            
0000593C                            loc_55FA:
0000593C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005942 6700                       		beq.s	loc_5608
00005944 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000594A                            
0000594A                            loc_5608:
0000594A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005950 6700                       		beq.s	locret_5614
00005952 5368 003A                  		subq.w	#1,$3A(a0)
00005956                            
00005956                            locret_5614:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            ; ---------------------------------------------------------------------------
00005958                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005958                            ; ---------------------------------------------------------------------------
00005958                            
00005958                            Obj89:					; XREF: Obj_Index
00005958 7000                       		moveq	#0,d0
0000595A 1028 0024                  		move.b	$24(a0),d0
0000595E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005962 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005966                            ; ===========================================================================
00005966 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005968 0000                       		dc.w Obj89_Move-Obj89_Index
0000596A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000596C                            ; ===========================================================================
0000596C                            
0000596C                            Obj89_Main:				; XREF: Obj89_Index
0000596C 5428 0024                  		addq.b	#2,$24(a0)
00005970 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005976 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000597C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005984 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000598A 117C 0000 0001             		move.b	#0,1(a0)
00005990 117C 0000 0018             		move.b	#0,$18(a0)
00005996                            
00005996                            Obj89_Move:				; XREF: Obj89_Index
00005996 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000599C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000599E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000059A4 4EB9 0000 0000             		jsr	DisplaySprite
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj89_Delay:				; XREF: Obj89_Move
000059AA 5428 0024                  		addq.b	#2,$24(a0)
000059AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000059B4                            
000059B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B8 6A00                       		bpl.s	Obj89_Display
000059BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000059C0                            
000059C0                            Obj89_Display:
000059C0 4EB9 0000 0000             		jsr	DisplaySprite
000059C6                            ; ===========================================================================
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            Map_obj87:
000059C6                            	include "_maps\obj87.asm"
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000059CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000059CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000059D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000059D6 02                         byte_5690:	dc.b 2
000059D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059E1 03                         byte_569B:	dc.b 3
000059E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059F1 02                         byte_56AB:	dc.b 2
000059F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059FC 02                         byte_56B6:	dc.b 2
000059FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A07 02                         byte_56C1:	dc.b 2
00005A08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A12 03                         byte_56CC:	dc.b 3
00005A13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A22 07                         byte_56DC:	dc.b 7
00005A23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A46 18                         byte_5700:	dc.b $18
00005A47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005AA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005AA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005AAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005AB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005AB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005ABA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005AC0 00                         		even
00005AC0 00                         		even
00005AC0                            
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj88:
00005AC0                            	include "_maps\obj88.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005AC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005AC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005ACC 0000                       		dc.w byte_57AC-Map_obj88
00005ACE 01                         byte_5788:	dc.b 1
00005ACF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005AD4 01                         byte_578E:	dc.b 1
00005AD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005ADA 01                         byte_5794:	dc.b 1
00005ADB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AE0 01                         byte_579A:	dc.b 1
00005AE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AE6 01                         byte_57A0:	dc.b 1
00005AE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AEC 01                         byte_57A6:	dc.b 1
00005AED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AF2 01                         byte_57AC:	dc.b 1
00005AF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005AF8                            		even
00005AF8                            		even
00005AF8                            
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            Map_obj89:
00005AF8                            	include "_maps\obj89.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_57B4-Map_obj89
00005AFA 03                         byte_57B4:	dc.b 3
00005AFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B0A                            		even
00005B0A                            		even
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Credits ending sequence
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            
00005B0A                            Credits:				; XREF: GameModeArray
00005B0A 6100 BCF2                  		bsr.w	ClearPLC
00005B0E 6100 C562                  		bsr.w	Pal_FadeFrom
00005B12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B18 3CBC 8004                  		move.w	#$8004,(a6)
00005B1C 3CBC 8230                  		move.w	#$8230,(a6)
00005B20 3CBC 8407                  		move.w	#$8407,(a6)
00005B24 3CBC 9001                  		move.w	#$9001,(a6)
00005B28 3CBC 9200                  		move.w	#$9200,(a6)
00005B2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B30 3CBC 8720                  		move.w	#$8720,(a6)
00005B34 4238 F64E                  		clr.b	($FFFFF64E).w
00005B38 6100 B9AA                  		bsr.w	ClearScreen
00005B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005B40 7000                       		moveq	#0,d0
00005B42 323C 07FF                  		move.w	#$7FF,d1
00005B46                            
00005B46                            Cred_ClrObjRam:
00005B46 22C0                       		move.l	d0,(a1)+
00005B48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B4C                            
00005B4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B5C 6100 BB02                  		bsr.w	NemDec
00005B60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 001F                  		move.w	#$1F,d1
00005B6A                            
00005B6A                            Cred_ClrPallet:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B70                            
00005B70 7003                       		moveq	#3,d0
00005B72 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005B82 4EB9 0000 0000             		jsr	BuildSprites
00005B88 6100 0000                  		bsr.w	EndingDemoLoad
00005B8C 7000                       		moveq	#0,d0
00005B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B92 E948                       		lsl.w	#4,d0
00005B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B9A 45F2 0000                  		lea	(a2,d0.w),a2
00005B9E 7000                       		moveq	#0,d0
00005BA0 1012                       		move.b	(a2),d0
00005BA2 6700                       		beq.s	loc_5862
00005BA4 6100 BBFA                  		bsr.w	LoadPLC		; load level patterns
00005BA8                            
00005BA8                            loc_5862:
00005BA8 7001                       		moveq	#1,d0
00005BAA 6100 BBF4                  		bsr.w	LoadPLC		; load standard	level patterns
00005BAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005BB4 6100 C416                  		bsr.w	Pal_FadeTo
00005BB8                            
00005BB8                            Cred_WaitLoop:
00005BB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BBE 6100 D030                  		bsr.w	DelayProgram
00005BC2 6100 BC48                  		bsr.w	RunPLC_RAM
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005BCA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005BCC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005BD0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005BD2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005BD8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BDC 4E75                       		rts	
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; Ending sequence demo loading subroutine
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            
00005BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDE                            
00005BDE                            
00005BDE                            EndingDemoLoad:				; XREF: Credits
00005BDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BE2 0240 000F                  		andi.w	#$F,d0
00005BE6 D040                       		add.w	d0,d0
00005BE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C08 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005C0E 7000                       		moveq	#0,d0
00005C10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C32 303C 0008                  		move.w	#8,d0
00005C36                            
00005C36                            EndDemo_LampLoad:
00005C36 24D9                       		move.l	(a1)+,(a2)+
00005C38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C3C                            
00005C3C                            EndDemo_Exit:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function EndingDemoLoad
00005C3E                            
00005C3E                            ; ===========================================================================
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Levels used in the end sequence demos
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            EndDemo_LampVar:
00005C4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C56 0000 0000                  		dc.l 0
00005C5A 0000                       		dc.b 0,	0
00005C5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C70 0101                       		dc.b 1,	1
00005C72                            ; ===========================================================================
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            ; "TRY AGAIN" and "END"	screens
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            
00005C72                            TryAgainEnd:				; XREF: Credits
00005C72 6100 BB8A                  		bsr.w	ClearPLC
00005C76 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C80 3CBC 8004                  		move.w	#$8004,(a6)
00005C84 3CBC 8230                  		move.w	#$8230,(a6)
00005C88 3CBC 8407                  		move.w	#$8407,(a6)
00005C8C 3CBC 9001                  		move.w	#$9001,(a6)
00005C90 3CBC 9200                  		move.w	#$9200,(a6)
00005C94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C98 3CBC 8720                  		move.w	#$8720,(a6)
00005C9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005CA0 6100 B842                  		bsr.w	ClearScreen
00005CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005CA8 7000                       		moveq	#0,d0
00005CAA 323C 07FF                  		move.w	#$7FF,d1
00005CAE                            
00005CAE                            TryAg_ClrObjRam:
00005CAE 22C0                       		move.l	d0,(a1)+
00005CB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005CB4                            
00005CB4 701D                       		moveq	#$1D,d0
00005CB6 6100 BC54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005CBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CBE 7000                       		moveq	#0,d0
00005CC0 323C 001F                  		move.w	#$1F,d1
00005CC4                            
00005CC4                            TryAg_ClrPallet:
00005CC4 22C0                       		move.l	d0,(a1)+
00005CC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005CCA                            
00005CCA 7013                       		moveq	#$13,d0
00005CCC 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005CD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005CD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE0 4EB9 0000 0000             		jsr	BuildSprites
00005CE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CEC 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screen main loop
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            TryAg_MainLoop:
00005CF0 6100 B8D6                  		bsr.w	PauseGame
00005CF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CFA 6100 CEF4                  		bsr.w	DelayProgram
00005CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00005D04 4EB9 0000 0000             		jsr	BuildSprites
00005D0A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D10 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D12 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D16 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D18 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D1E 67D0                       		beq.s	TryAg_MainLoop
00005D20                            
00005D20                            TryAg_Exit:
00005D20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ===========================================================================
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            Obj8B:					; XREF: Obj_Index
00005D28 7000                       		moveq	#0,d0
00005D2A 1028 0024                  		move.b	$24(a0),d0
00005D2E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D32 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D36 4EF9 0000 0000             		jmp	DisplaySprite
00005D3C                            ; ===========================================================================
00005D3C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D3E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D40 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D42 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj8B_Main:				; XREF: Obj8B_Index
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 317C 0120 0008             		move.w	#$120,8(a0)
00005D4E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D54 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D62 117C 0000 0001             		move.b	#0,1(a0)
00005D68 117C 0002 0018             		move.b	#2,$18(a0)
00005D6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D7A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D7C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D82 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D88 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D94                            
00005D94                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D94 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D9A 4EF9 0000 0000             		jmp	AnimateSprite
00005DA0                            ; ===========================================================================
00005DA0                            
00005DA0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005DA0 5428 0024                  		addq.b	#2,$24(a0)
00005DA4 7002                       		moveq	#2,d0
00005DA6 0828 0000 001C             		btst	#0,$1C(a0)
00005DAC 6700                       		beq.s	loc_5A6A
00005DAE 4440                       		neg.w	d0
00005DB0                            
00005DB0                            loc_5A6A:
00005DB0 43F8 D800                  		lea	($FFFFD800).w,a1
00005DB4 7205                       		moveq	#5,d1
00005DB6                            
00005DB6                            loc_5A70:
00005DB6 1340 003E                  		move.b	d0,$3E(a1)
00005DBA 3400                       		move.w	d0,d2
00005DBC E742                       		asl.w	#3,d2
00005DBE D529 0026                  		add.b	d2,$26(a1)
00005DC2 43E9 0040                  		lea	$40(a1),a1
00005DC6 51C9 FFEE                  		dbf	d1,loc_5A70
00005DCA 5228 001A                  		addq.b	#1,$1A(a0)
00005DCE 317C 0070 0030             		move.w	#112,$30(a0)
00005DD4                            
00005DD4                            loc_5A8E:				; XREF: Obj8B_Index
00005DD4 5368 0030                  		subq.w	#1,$30(a0)
00005DD8 6A00                       		bpl.s	locret_5AA0
00005DDA 0868 0000 001C             		bchg	#0,$1C(a0)
00005DE0 117C 0002 0024             		move.b	#2,$24(a0)
00005DE6                            
00005DE6                            locret_5AA0:
00005DE6 4E75                       		rts	
00005DE8                            ; ===========================================================================
00005DE8                            Ani_obj8B:
00005DE8                            	include "_anim\obj8B.asm"
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DEA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DEC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DEE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DF2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DF6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E08                            		even
00005E08                            		even
00005E08                            
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            Obj8C:					; XREF: Obj_Index
00005E08 7000                       		moveq	#0,d0
00005E0A 1028 0024                  		move.b	$24(a0),d0
00005E0E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E12 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E16 4EF9 0000 0000             		jmp	DisplaySprite
00005E1C                            ; ===========================================================================
00005E1C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E1E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E20                            ; ===========================================================================
00005E20                            
00005E20                            Obj8C_Main:				; XREF: Obj8C_Index
00005E20 2248                       		movea.l	a0,a1
00005E22 7400                       		moveq	#0,d2
00005E24 7600                       		moveq	#0,d3
00005E26 7205                       		moveq	#5,d1
00005E28 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E2C                            
00005E2C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E2C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E30 5429 0024                  		addq.b	#2,$24(a1)
00005E34 237C 0000 5AC0 0004        		move.l	#Map_obj88,4(a1)
00005E3C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E42 137C 0000 0001             		move.b	#0,1(a1)
00005E48 137C 0001 0018             		move.b	#1,$18(a1)
00005E4E 337C 0104 0008             		move.w	#$104,8(a1)
00005E54 337C 0120 0038             		move.w	#$120,$38(a1)
00005E5A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E60 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E66 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E6C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E70                            
00005E70                            Obj8C_ChkEms:
00005E70 7000                       		moveq	#0,d0
00005E72 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E76 5340                       		subq.w	#1,d0
00005E78 6500                       		bcs.s	loc_5B42
00005E7A                            
00005E7A                            Obj8C_ChkEmLoop:
00005E7A B433 0000                  		cmp.b	(a3,d0.w),d2
00005E7E 6600                       		bne.s	loc_5B3E
00005E80 5202                       		addq.b	#1,d2
00005E82 60EC                       		bra.s	Obj8C_ChkEms
00005E84                            ; ===========================================================================
00005E84                            
00005E84                            loc_5B3E:
00005E84 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E88                            
00005E88                            loc_5B42:
00005E88 1342 001A                  		move.b	d2,$1A(a1)
00005E8C 5229 001A                  		addq.b	#1,$1A(a1)
00005E90 5202                       		addq.b	#1,d2
00005E92 137C 0080 0026             		move.b	#$80,$26(a1)
00005E98 1343 001E                  		move.b	d3,$1E(a1)
00005E9C 1343 001F                  		move.b	d3,$1F(a1)
00005EA0 0643 000A                  		addi.w	#$A,d3
00005EA4 43E9 0040                  		lea	$40(a1),a1
00005EA8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005EAC                            
00005EAC                            Obj8C_Move:				; XREF: Obj8C_Index
00005EAC 4A68 003E                  		tst.w	$3E(a0)
00005EB0 6700                       		beq.s	locret_5BBA
00005EB2 4A28 001E                  		tst.b	$1E(a0)
00005EB6 6700                       		beq.s	loc_5B78
00005EB8 5328 001E                  		subq.b	#1,$1E(a0)
00005EBC 6600                       		bne.s	loc_5B80
00005EBE                            
00005EBE                            loc_5B78:
00005EBE 3028 003E                  		move.w	$3E(a0),d0
00005EC2 D168 0026                  		add.w	d0,$26(a0)
00005EC6                            
00005EC6                            loc_5B80:
00005EC6 1028 0026                  		move.b	$26(a0),d0
00005ECA 6700                       		beq.s	loc_5B8C
00005ECC 0C00 0080                  		cmpi.b	#$80,d0
00005ED0 6600                       		bne.s	loc_5B96
00005ED2                            
00005ED2                            loc_5B8C:
00005ED2 4268 003E                  		clr.w	$3E(a0)
00005ED6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EDC                            
00005EDC                            loc_5B96:
00005EDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00005EE2 7800                       		moveq	#0,d4
00005EE4 1828 003C                  		move.b	$3C(a0),d4
00005EE8 C3C4                       		muls.w	d4,d1
00005EEA E081                       		asr.l	#8,d1
00005EEC C1C4                       		muls.w	d4,d0
00005EEE E080                       		asr.l	#8,d0
00005EF0 D268 0038                  		add.w	$38(a0),d1
00005EF4 D068 003A                  		add.w	$3A(a0),d0
00005EF8 3141 0008                  		move.w	d1,8(a0)
00005EFC 3140 000A                  		move.w	d0,$A(a0)
00005F00                            
00005F00                            locret_5BBA:
00005F00 4E75                       		rts	
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            Map_obj8B:
00005F02                            	include "_maps\obj8B.asm"
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F06 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F0A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F0E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F12 08                         byte_5BCC:	dc.b 8
00005F13 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F18 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F1D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F22 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F3B 08                         byte_5BF5:	dc.b 8
00005F3C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F41 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F46 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F4B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F64 08                         byte_5C1E:	dc.b 8
00005F65 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F6A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F6F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F74 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F79 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F7E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F83 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F88 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F8D 08                         byte_5C47:	dc.b 8
00005F8E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F93 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F98 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F9D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005FA2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FA7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FAC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB6 0C                         byte_5C70:	dc.b $C
00005FB7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005FBC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005FC1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005FC6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005FCB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005FD0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005FD5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FDA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FDF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FE4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FE9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FEE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF3 0A                         byte_5CAD:	dc.b $A
00005FF4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FF9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FFE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006003 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006008 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000600D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006012 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006017 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000601C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006021 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006026 0A                         byte_5CE0:	dc.b $A
00006027 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000602C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006031 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006036 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000603B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006040 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006045 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000604A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000604F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006054 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006059 0C                         byte_5D13:	dc.b $C
0000605A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000605F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006064 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006069 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000606E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006073 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006078 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000607D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006082 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006087 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000608C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006091 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006096                            		even
00006096                            		even
00006096                            
00006096                            ; ---------------------------------------------------------------------------
00006096                            ; Ending sequence demos
00006096                            ; ---------------------------------------------------------------------------
00006096                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000060C4                            		even
000060C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006104                            		even
00006104                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006134                            		even
00006134                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006164                            		even
00006164                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006184                            		even
00006184                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000061A4                            		even
000061A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000061D4                            		even
000061D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006204                            		even
00006204                            
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Subroutine to	load level boundaries and start	locations
00006204                            ; ---------------------------------------------------------------------------
00006204                            
00006204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006204                            
00006204                            
00006204                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006204 7000                       		moveq	#0,d0
00006206 11C0 F740                  		move.b	d0,($FFFFF740).w
0000620A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000620E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006212 11C0 F748                  		move.b	d0,($FFFFF748).w
00006216 11C0 F742                  		move.b	d0,($FFFFF742).w
0000621A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000621E ED08                       		lsl.b	#6,d0
00006220 E848                       		lsr.w	#4,d0
00006222 3200                       		move.w	d0,d1
00006224 D040                       		add.w	d0,d0
00006226 D041                       		add.w	d1,d0
00006228 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000622C 3018                       		move.w	(a0)+,d0
0000622E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006232 2018                       		move.l	(a0)+,d0
00006234 21C0 F728                  		move.l	d0,($FFFFF728).w
00006238 21C0 F720                  		move.l	d0,($FFFFF720).w
0000623C 2018                       		move.l	(a0)+,d0
0000623E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006242 21C0 F724                  		move.l	d0,($FFFFF724).w
00006246 3038 F728                  		move.w	($FFFFF728).w,d0
0000624A 0640 0240                  		addi.w	#$240,d0
0000624E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006252 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006258 3018                       		move.w	(a0)+,d0
0000625A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000625E 6000 0000                  		bra.w	LevSz_ChkLamp
00006262                            ; ===========================================================================
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Level size array and ending start location array
00006262                            ; ---------------------------------------------------------------------------
00006262                            LevelSizeArray:	incbin	misc\lvl_size.bin
000063B2                            		even
000063B2                            
000063B2                            EndingStLocArray:
000063B2                            		incbin	misc\sloc_end.bin
000063D2                            		even
000063D2                            
000063D2                            ; ===========================================================================
000063D2                            
000063D2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000063D6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000063D8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063DE 3238 D008                  		move.w	($FFFFD008).w,d1
000063E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063E6 6000                       		bra.s	loc_60D0
000063E8                            ; ===========================================================================
000063E8                            
000063E8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EC ED08                       		lsl.b	#6,d0
000063EE E848                       		lsr.w	#4,d0
000063F0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063F8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063FA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FE 5340                       		subq.w	#1,d0
00006400 E548                       		lsl.w	#2,d0
00006402 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006406                            
00006406                            LevSz_SonicPos:
00006406 7200                       		moveq	#0,d1
00006408 3219                       		move.w	(a1)+,d1
0000640A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000640E 7000                       		moveq	#0,d0
00006410 3011                       		move.w	(a1),d0
00006412 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006416                            
00006416                            loc_60D0:				; XREF: LevSz_ChkLamp
00006416 0441 00A0                  		subi.w	#$A0,d1
0000641A 6400                       		bcc.s	loc_60D8
0000641C 7200                       		moveq	#0,d1
0000641E                            
0000641E                            loc_60D8:
0000641E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006422 B242                       		cmp.w	d2,d1
00006424 6500                       		bcs.s	loc_60E2
00006426 3202                       		move.w	d2,d1
00006428                            
00006428                            loc_60E2:
00006428 31C1 F700                  		move.w	d1,($FFFFF700).w
0000642C 0440 0060                  		subi.w	#$60,d0
00006430 6400                       		bcc.s	loc_60EE
00006432 7000                       		moveq	#0,d0
00006434                            
00006434                            loc_60EE:
00006434 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006438 6D00                       		blt.s	loc_60F8
0000643A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000643E                            
0000643E                            loc_60F8:
0000643E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006442 6100 0000                  		bsr.w	BgScrollSpeed
00006446 7000                       		moveq	#0,d0
00006448 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000644C E508                       		lsl.b	#2,d0
0000644E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006454 6000 0000                  		bra.w	LevSz_Unk
00006458                            ; ===========================================================================
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Sonic	start location array
00006458                            ; ---------------------------------------------------------------------------
00006458                            StartLocArray:	incbin	misc\sloc_lev.bin
000064C8                            		even
000064C8                            
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Which	256x256	tiles contain loops or roll-tunnels
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000064C8                            ; loop,	loop, tunnel, tunnel
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            LoopTileNums:	incbin	misc\loopnums.bin
000064E4                            		even
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            LevSz_Unk:				; XREF: LevelSizeLoad
000064E4 7000                       		moveq	#0,d0
000064E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064EA E748                       		lsl.w	#3,d0
000064EC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064F0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064F4 24D9                       		move.l	(a1)+,(a2)+
000064F6 24D9                       		move.l	(a1)+,(a2)+
000064F8 4E75                       		rts	
000064FA                            ; End of function LevelSizeLoad
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006502 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000650A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006512 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000651A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006522 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000652A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006532                            
00006532                            ; ---------------------------------------------------------------------------
00006532                            ; Subroutine to	set scroll speed of some backgrounds
00006532                            ; ---------------------------------------------------------------------------
00006532                            
00006532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006532                            
00006532                            
00006532                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006532 4A38 FE30                  		tst.b	($FFFFFE30).w
00006536 6600                       		bne.s	loc_6206
00006538 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006540 31C1 F708                  		move.w	d1,($FFFFF708).w
00006544 31C1 F710                  		move.w	d1,($FFFFF710).w
00006548 31C1 F718                  		move.w	d1,($FFFFF718).w
0000654C                            
0000654C                            loc_6206:
0000654C 7400                       		moveq	#0,d2
0000654E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006552 D442                       		add.w	d2,d2
00006554 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006558 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000655C                            ; End of function BgScrollSpeed
0000655C                            
0000655C                            ; ===========================================================================
0000655C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006560 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006564 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006568 0000                       		dc.w BgScroll_End-BgScroll_Index
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000656A 6000 0000                  		bra.w	Deform_GHZ
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000656E E280                       		asr.l	#1,d0
00006570 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            BgScroll_MZ:				; XREF: BgScroll_Index
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578                            
00006578                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006578 E280                       		asr.l	#1,d0
0000657A 0640 00C0                  		addi.w	#$C0,d0
0000657E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006584 E980                       		asl.l	#4,d0
00006586 2400                       		move.l	d0,d2
00006588 E380                       		asl.l	#1,d0
0000658A D082                       		add.l	d2,d0
0000658C E080                       		asr.l	#8,d0
0000658E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006592 31C0 F714                  		move.w	d0,($FFFFF714).w
00006596 4E75                       		rts	
00006598                            ; ===========================================================================
00006598                            
00006598                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006598 E980                       		asl.l	#4,d0
0000659A E380                       		asl.l	#1,d0
0000659C E080                       		asr.l	#8,d0
0000659E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065A2 4E75                       		rts	
000065A4                            ; ===========================================================================
000065A4                            
000065A4                            BgScroll_End:				; XREF: BgScroll_Index
000065A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065AA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065B0 4E75                       		rts	
000065B2                            ; ===========================================================================
000065B2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000065B8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065BE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000065C4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065CA 4E75                       		rts
000065CC                            
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            ; Background layer deformation subroutines
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            
000065CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CC                            
000065CC                            
000065CC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000065CC 4A38 F744                  		tst.b	($FFFFF744).w
000065D0 6700                       		beq.s	loc_628E
000065D2 4E75                       		rts	
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            loc_628E:
000065D4 4278 F754                  		clr.w	($FFFFF754).w
000065D8 4278 F756                  		clr.w	($FFFFF756).w
000065DC 4278 F758                  		clr.w	($FFFFF758).w
000065E0 4278 F75A                  		clr.w	($FFFFF75A).w
000065E4 6100 0000                  		bsr.w	ScrollHoriz
000065E8 6100 0000                  		bsr.w	ScrollVertical
000065EC 6100 0000                  		bsr.w	DynScrResizeLoad
000065F0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065F6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065FC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006608 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000660E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006614 7000                       		moveq	#0,d0
00006616 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661A D040                       		add.w	d0,d0
0000661C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006620 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006624                            ; End of function DeformBgLayer
00006624                            
00006624                            ; ===========================================================================
00006624                            ; ---------------------------------------------------------------------------
00006624                            ; Offset index for background layer deformation	code
00006624                            ; ---------------------------------------------------------------------------
00006624 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006628 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000662C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006630 0000                       		dc.w Deform_GHZ-Deform_Index
00006632                            ; ---------------------------------------------------------------------------
00006632                            ; Green	Hill Zone background layer deformation code
00006632                            ; ---------------------------------------------------------------------------
00006632                            
00006632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006632                            
00006632                            
00006632                            Deform_GHZ:				; XREF: Deform_Index
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006636 48C4                       		ext.l	d4
00006638 EB84                       		asl.l	#5,d4
0000663A 2204                       		move.l	d4,d1
0000663C E384                       		asl.l	#1,d4
0000663E D881                       		add.l	d1,d4
00006640 7A00                       		moveq	#0,d5
00006642 6100 0000                  		bsr.w	ScrollBlock1
00006646 6100 0000                  		bsr.w	ScrollBlock4
0000664A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000664E 3038 F704                  		move.w	($FFFFF704).w,d0
00006652 0240 07FF                  		andi.w	#$7FF,d0
00006656 EA48                       		lsr.w	#5,d0
00006658 4440                       		neg.w	d0
0000665A 0640 0026                  		addi.w	#$26,d0
0000665E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006662 3800                       		move.w	d0,d4
00006664 6100 0000                  		bsr.w	ScrollBlock3
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 323C 006F                  		move.w	#$6F,d1
00006672 9244                       		sub.w	d4,d1
00006674 3038 F700                  		move.w	($FFFFF700).w,d0
00006678 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000667E 6600                       		bne.s	loc_633C
00006680 7000                       		moveq	#0,d0
00006682                            
00006682                            loc_633C:
00006682 4440                       		neg.w	d0
00006684 4840                       		swap	d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0
0000668A 4440                       		neg.w	d0
0000668C                            
0000668C                            loc_6346:
0000668C 22C0                       		move.l	d0,(a1)+
0000668E 51C9 FFFC                  		dbf	d1,loc_6346
00006692 323C 0027                  		move.w	#$27,d1
00006696 3038 F710                  		move.w	($FFFFF710).w,d0
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            loc_6356:
0000669C 22C0                       		move.l	d0,(a1)+
0000669E 51C9 FFFC                  		dbf	d1,loc_6356
000066A2 3038 F710                  		move.w	($FFFFF710).w,d0
000066A6 0640 0000                  		addi.w	#0,d0
000066AA 3438 F700                  		move.w	($FFFFF700).w,d2
000066AE 0642 FE00                  		addi.w	#-$200,d2
000066B2 9440                       		sub.w	d0,d2
000066B4 48C2                       		ext.l	d2
000066B6 E182                       		asl.l	#8,d2
000066B8 85FC 0068                  		divs.w	#$68,d2
000066BC 48C2                       		ext.l	d2
000066BE E182                       		asl.l	#8,d2
000066C0 7600                       		moveq	#0,d3
000066C2 3600                       		move.w	d0,d3
000066C4 323C 0047                  		move.w	#$47,d1
000066C8 D244                       		add.w	d4,d1
000066CA                            
000066CA                            loc_6384:
000066CA 3003                       		move.w	d3,d0
000066CC 4440                       		neg.w	d0
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 4843                       		swap	d3
000066D2 D682                       		add.l	d2,d3
000066D4 4843                       		swap	d3
000066D6 51C9 FFF2                  		dbf	d1,loc_6384
000066DA 4E75                       		rts	
000066DC                            ; End of function Deform_GHZ
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone background layer deformation code
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            Deform_LZ:				; XREF: Deform_Index
000066DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E0 48C4                       		ext.l	d4
000066E2 EF84                       		asl.l	#7,d4
000066E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066E8 48C5                       		ext.l	d5
000066EA EF85                       		asl.l	#7,d5
000066EC 6100 0000                  		bsr.w	ScrollBlock1
000066F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066FA 323C 00DF                  		move.w	#$DF,d1
000066FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006702 4440                       		neg.w	d0
00006704 4840                       		swap	d0
00006706 3038 F708                  		move.w	($FFFFF708).w,d0
0000670A 4440                       		neg.w	d0
0000670C                            
0000670C                            loc_63C6:
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 51C9 FFFC                  		dbf	d1,loc_63C6
00006712 3038 F646                  		move.w	($FFFFF646).w,d0
00006716 9078 F704                  		sub.w	($FFFFF704).w,d0
0000671A 4E75                       		rts	
0000671C                            ; End of function Deform_LZ
0000671C                            
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            ; Marble Zone background layer deformation code
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            
0000671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671C                            
0000671C                            
0000671C                            Deform_MZ:				; XREF: Deform_Index
0000671C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006720 48C4                       		ext.l	d4
00006722 ED84                       		asl.l	#6,d4
00006724 2204                       		move.l	d4,d1
00006726 E384                       		asl.l	#1,d4
00006728 D881                       		add.l	d1,d4
0000672A 7A00                       		moveq	#0,d5
0000672C 6100 0000                  		bsr.w	ScrollBlock1
00006730 303C 0200                  		move.w	#$200,d0
00006734 3238 F704                  		move.w	($FFFFF704).w,d1
00006738 0441 01C8                  		subi.w	#$1C8,d1
0000673C 6500                       		bcs.s	loc_6402
0000673E 3401                       		move.w	d1,d2
00006740 D241                       		add.w	d1,d1
00006742 D242                       		add.w	d2,d1
00006744 E441                       		asr.w	#2,d1
00006746 D041                       		add.w	d1,d0
00006748                            
00006748                            loc_6402:
00006748 31C0 F714                  		move.w	d0,($FFFFF714).w
0000674C 6100 0000                  		bsr.w	ScrollBlock3
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_6426:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_6426
00006772 4E75                       		rts	
00006774                            ; End of function Deform_MZ
00006774                            
00006774                            ; ---------------------------------------------------------------------------
00006774                            ; Star Light Zone background layer deformation code
00006774                            ; ---------------------------------------------------------------------------
00006774                            
00006774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006774                            
00006774                            
00006774                            Deform_SLZ:				; XREF: Deform_Index
00006774 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006778 48C4                       		ext.l	d4
0000677A EB84                       		asl.l	#5,d4
0000677C 2204                       		move.l	d4,d1
0000677E E384                       		asl.l	#1,d4
00006780 D881                       		add.l	d1,d4
00006782 7A00                       		moveq	#0,d5
00006784 6100 0000                  		bsr.w	ScrollBlock1
00006788 6100 0000                  		bsr.w	ScrollBlock3
0000678C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006790                            	;	move.w	($FFFFF704).w,d0
00006790                            	;	andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E                            	;	bsr.w	ScrollBlock3
0000679E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000067A4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000067A8                            
000067A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067AC 4440                       		neg.w	d0			; negate (positive to negative)
000067AE 4840                       		swap	d0			; send to the left side of d0
000067B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067B4 45F8 A800                  		lea	($FFFFA800).w,a2
000067B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000067BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000067C4 3038 A800                  		move.w	($FFFFA800).w,d0
000067C8 4440                       		neg.w	d0			; negate (positive to negative)
000067CA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000067CC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067D0                            slz_DeformLoop_1:
000067D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000067D6                            
000067D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067DA 4440                       		neg.w	d0			; negate (positive to negative)
000067DC 4840                       		swap	d0			; send to the left side of d0
000067DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067E2 45F8 A800                  		lea	($FFFFA800).w,a2
000067E6 069A 0000 5000             		addi.l	#$5000,(a2)+
000067EC 069A 0000 C000             		addi.l	#$C000,(a2)+
000067F2 3038 A800                  		move.w	($FFFFA800).w,d0
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067FA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_2:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 45F8 A800                  		lea	($FFFFA800).w,a2
00006814 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006820 3038 A800                  		move.w	($FFFFA800).w,d0
00006824 4440                       		neg.w	d0			; negate (positive to negative)
00006826 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006828 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682C                            slz_DeformLoop_3:
0000682C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000682E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006832                            
00006832 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006836 4440                       		neg.w	d0			; negate (positive to negative)
00006838 4840                       		swap	d0			; send to the left side of d0
0000683A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000683E 45F8 A800                  		lea	($FFFFA800).w,a2
00006842 069A 0000 5000             		addi.l	#$5000,(a2)+
00006848 069A 0000 C000             		addi.l	#$C000,(a2)+
0000684E 3038 A800                  		move.w	($FFFFA800).w,d0
00006852 4440                       		neg.w	d0			; negate (positive to negative)
00006854 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006856 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685A                            slz_DeformLoop_4:
0000685A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000685C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006860                            
00006860 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006864 4440                       		neg.w	d0			; negate (positive to negative)
00006866 4840                       		swap	d0			; send to the left side of d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000686C 45F8 A800                  		lea	($FFFFA800).w,a2
00006870 069A 0000 5000             		addi.l	#$5000,(a2)+
00006876 069A 0000 C000             		addi.l	#$C000,(a2)+
0000687C 3038 A800                  		move.w	($FFFFA800).w,d0
00006880 4440                       		neg.w	d0			; negate (positive to negative)
00006882 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006884 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006888                            slz_DeformLoop_5:
00006888 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000688E                            
0000688E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 4840                       		swap	d0			; send to the left side of d0
00006896 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689A 4440                       		neg.w	d0			; negate (positive to negative)
0000689C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000689E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A2                            slz_DeformLoop_6:
000068A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000068A8                            
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE 4840                       		swap	d0			; send to the left side of d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000068B8 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BC                            slz_DeformLoop_7:
000068BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000068C2                            
000068C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C6 4440                       		neg.w	d0			; negate (positive to negative)
000068C8 4840                       		swap	d0			; send to the left side of d0
000068CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CE 4440                       		neg.w	d0			; negate (positive to negative)
000068D0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000068D2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D6                            slz_DeformLoop_8:
000068D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068DC                            
000068DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 4840                       		swap	d0			; send to the left side of d0
000068E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068EC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F0                            slz_DeformLoop_9:
000068F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068F6                            
000068F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC 4840                       		swap	d0			; send to the left side of d0
000068FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006906 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_10:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_11:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_12:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 4440                       		neg.w	d0			; negate (positive to negative)
00006952 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006954 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006958                            slz_DeformLoop_13:
00006958 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000695E 4E75                       		rts	
00006960                            ; End of function Deform_SLZ
00006960 4E75                       		rts	
00006962                            ; End of function Deform_SLZ_2
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Spring Yard Zone background layer deformation	code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SYZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 ED84                       		asl.l	#6,d4
0000696A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000696E 48C5                       		ext.l	d5
00006970 E985                       		asl.l	#4,d5
00006972 2205                       		move.l	d5,d1
00006974 E385                       		asl.l	#1,d5
00006976 DA81                       		add.l	d1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_653C:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_653C
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SYZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Scrap	Brain Zone background layer deformation	code
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            Deform_SBZ:				; XREF: Deform_Index
000069A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A4 48C4                       		ext.l	d4
000069A6 ED84                       		asl.l	#6,d4
000069A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069AC 48C5                       		ext.l	d5
000069AE E985                       		asl.l	#4,d5
000069B0 E385                       		asl.l	#1,d5
000069B2 6100 0000                  		bsr.w	ScrollBlock1
000069B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C0 323C 00DF                  		move.w	#$DF,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6576:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6576
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SBZ
000069DA                            
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            
000069DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DA                            
000069DA                            
000069DA                            ScrollHoriz:				; XREF: DeformBgLayer
000069DA 3838 F700                  		move.w	($FFFFF700).w,d4
000069DE 6100                       		bsr.s	ScrollHoriz2
000069E0 3038 F700                  		move.w	($FFFFF700).w,d0
000069E4 0240 0010                  		andi.w	#$10,d0
000069E8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069EC B300                       		eor.b	d1,d0
000069EE 6600                       		bne.s	locret_65B0
000069F0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0
000069FA 9044                       		sub.w	d4,d0
000069FC 6A00                       		bpl.s	loc_65AA
000069FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A04 4E75                       		rts	
00006A06                            ; ===========================================================================
00006A06                            
00006A06                            loc_65AA:
00006A06 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A0C                            
00006A0C                            locret_65B0:
00006A0C 4E75                       		rts	
00006A0E                            ; End of function ScrollHoriz
00006A0E                            
00006A0E                            
00006A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A0E                            
00006A0E                            
00006A0E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A12 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A16 0440 0090                  		subi.w	#$90,d0
00006A1A 6500                       		bcs.s	loc_65F6
00006A1C 0440 0010                  		subi.w	#$10,d0
00006A20 6400                       		bcc.s	loc_65CC
00006A22 4278 F73A                  		clr.w	($FFFFF73A).w
00006A26 4E75                       		rts	
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_65CC:
00006A28 0C40 0010                  		cmpi.w	#$10,d0
00006A2C 6500                       		bcs.s	loc_65D6
00006A2E 303C 0010                  		move.w	#$10,d0
00006A32                            
00006A32                            loc_65D6:
00006A32 D078 F700                  		add.w	($FFFFF700).w,d0
00006A36 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A3A 6D00                       		blt.s	loc_65E4
00006A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A40                            
00006A40                            loc_65E4:
00006A40 3200                       		move.w	d0,d1
00006A42 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A46 E141                       		asl.w	#8,d1
00006A48 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A4C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A50 4E75                       		rts	
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_65F6:				; XREF: ScrollHoriz2
00006A52 D078 F700                  		add.w	($FFFFF700).w,d0
00006A56 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A5A 6EE4                       		bgt.s	loc_65E4
00006A5C 3038 F728                  		move.w	($FFFFF728).w,d0
00006A60 60DE                       		bra.s	loc_65E4
00006A62                            ; End of function ScrollHoriz2
00006A62                            
00006A62                            ; ===========================================================================
00006A62 4A40                       		tst.w	d0
00006A64 6A00                       		bpl.s	loc_6610
00006A66 303C FFFE                  		move.w	#-2,d0
00006A6A 60E6                       		bra.s	loc_65F6
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_6610:
00006A6C 303C 0002                  		move.w	#2,d0
00006A70 60B6                       		bra.s	loc_65CC
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            ScrollVertical:				; XREF: DeformBgLayer
00006A72 7200                       		moveq	#0,d1
00006A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A78 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A7C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A82 6700                       		beq.s	loc_662A
00006A84 5B40                       		subq.w	#5,d0
00006A86                            
00006A86                            loc_662A:
00006A86 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A8C 6700                       		beq.s	loc_664A
00006A8E 0640 0020                  		addi.w	#$20,d0
00006A92 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A96 6500                       		bcs.s	loc_6696
00006A98 0440 0040                  		subi.w	#$40,d0
00006A9C 6400                       		bcc.s	loc_6696
00006A9E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AA2 6600                       		bne.s	loc_66A8
00006AA4 6000                       		bra.s	loc_6656
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_664A:
00006AA6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AAA 6600                       		bne.s	loc_665C
00006AAC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AB0 6600                       		bne.s	loc_66A8
00006AB2                            
00006AB2                            loc_6656:
00006AB2 4278 F73C                  		clr.w	($FFFFF73C).w
00006AB6 4E75                       		rts	
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_665C:
00006AB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006ABE 6600                       		bne.s	loc_6684
00006AC0 3238 D014                  		move.w	($FFFFD014).w,d1
00006AC4 6A00                       		bpl.s	loc_666C
00006AC6 4441                       		neg.w	d1
00006AC8                            
00006AC8                            loc_666C:
00006AC8 0C41 0800                  		cmpi.w	#$800,d1
00006ACC 6400                       		bcc.s	loc_6696
00006ACE 323C 0600                  		move.w	#$600,d1
00006AD2 0C40 0006                  		cmpi.w	#6,d0
00006AD6 6E00                       		bgt.s	loc_66F6
00006AD8 0C40 FFFA                  		cmpi.w	#-6,d0
00006ADC 6D00                       		blt.s	loc_66C0
00006ADE 6000                       		bra.s	loc_66AE
00006AE0                            ; ===========================================================================
00006AE0                            
00006AE0                            loc_6684:
00006AE0 323C 0200                  		move.w	#$200,d1
00006AE4 0C40 0002                  		cmpi.w	#2,d0
00006AE8 6E00                       		bgt.s	loc_66F6
00006AEA 0C40 FFFE                  		cmpi.w	#-2,d0
00006AEE 6D00                       		blt.s	loc_66C0
00006AF0 6000                       		bra.s	loc_66AE
00006AF2                            ; ===========================================================================
00006AF2                            
00006AF2                            loc_6696:
00006AF2 323C 1000                  		move.w	#$1000,d1
00006AF6 0C40 0010                  		cmpi.w	#$10,d0
00006AFA 6E00                       		bgt.s	loc_66F6
00006AFC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B00 6D00                       		blt.s	loc_66C0
00006B02 6000                       		bra.s	loc_66AE
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66A8:
00006B04 7000                       		moveq	#0,d0
00006B06 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B0A                            
00006B0A                            loc_66AE:
00006B0A 7200                       		moveq	#0,d1
00006B0C 3200                       		move.w	d0,d1
00006B0E D278 F704                  		add.w	($FFFFF704).w,d1
00006B12 4A40                       		tst.w	d0
00006B14 6A00 0000                  		bpl.w	loc_6700
00006B18 6000 0000                  		bra.w	loc_66CC
00006B1C                            ; ===========================================================================
00006B1C                            
00006B1C                            loc_66C0:
00006B1C 4441                       		neg.w	d1
00006B1E 48C1                       		ext.l	d1
00006B20 E181                       		asl.l	#8,d1
00006B22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B26 4841                       		swap	d1
00006B28                            
00006B28                            loc_66CC:
00006B28 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B2C 6E00                       		bgt.s	loc_6724
00006B2E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B32 6E00                       		bgt.s	loc_66F0
00006B34 0241 07FF                  		andi.w	#$7FF,d1
00006B38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B3E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B4A 6000                       		bra.s	loc_6724
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_66F0:
00006B4C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B50 6000                       		bra.s	loc_6724
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_66F6:
00006B52 48C1                       		ext.l	d1
00006B54 E181                       		asl.l	#8,d1
00006B56 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B5A 4841                       		swap	d1
00006B5C                            
00006B5C                            loc_6700:
00006B5C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B60 6D00                       		blt.s	loc_6724
00006B62 0441 0800                  		subi.w	#$800,d1
00006B66 6500                       		bcs.s	loc_6720
00006B68 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B6E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B74 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B7A 6000                       		bra.s	loc_6724
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_6720:
00006B7C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B80                            
00006B80                            loc_6724:
00006B80 3838 F704                  		move.w	($FFFFF704).w,d4
00006B84 4841                       		swap	d1
00006B86 2601                       		move.l	d1,d3
00006B88 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B8C E09B                       		ror.l	#8,d3
00006B8E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B92 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B96 3038 F704                  		move.w	($FFFFF704).w,d0
00006B9A 0240 0010                  		andi.w	#$10,d0
00006B9E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006BA2 B300                       		eor.b	d1,d0
00006BA4 6600                       		bne.s	locret_6766
00006BA6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006BAC 3038 F704                  		move.w	($FFFFF704).w,d0
00006BB0 9044                       		sub.w	d4,d0
00006BB2 6A00                       		bpl.s	loc_6760
00006BB4 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006BBA 4E75                       		rts	
00006BBC                            ; ===========================================================================
00006BBC                            
00006BBC                            loc_6760:
00006BBC 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006BC2                            
00006BC2                            locret_6766:
00006BC2 4E75                       		rts	
00006BC4                            ; End of function ScrollVertical
00006BC4                            
00006BC4                            
00006BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC4                            
00006BC4                            
00006BC4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006BC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BC8 2002                       		move.l	d2,d0
00006BCA D084                       		add.l	d4,d0
00006BCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006BD0 2200                       		move.l	d0,d1
00006BD2 4841                       		swap	d1
00006BD4 0241 0010                  		andi.w	#$10,d1
00006BD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BDC B701                       		eor.b	d3,d1
00006BDE 6600                       		bne.s	loc_679C
00006BE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BE6 9082                       		sub.l	d2,d0
00006BE8 6A00                       		bpl.s	loc_6796
00006BEA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BF0 6000                       		bra.s	loc_679C
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_6796:
00006BF2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BF8                            
00006BF8                            loc_679C:
00006BF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BFC 2003                       		move.l	d3,d0
00006BFE D085                       		add.l	d5,d0
00006C00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C04 2200                       		move.l	d0,d1
00006C06 4841                       		swap	d1
00006C08 0241 0010                  		andi.w	#$10,d1
00006C0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C10 B501                       		eor.b	d2,d1
00006C12 6600                       		bne.s	locret_67D0
00006C14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C1A 9083                       		sub.l	d3,d0
00006C1C 6A00                       		bpl.s	loc_67CA
00006C1E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C24 4E75                       		rts	
00006C26                            ; ===========================================================================
00006C26                            
00006C26                            loc_67CA:
00006C26 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C2C                            
00006C2C                            locret_67D0:
00006C2C 4E75                       		rts	
00006C2E                            ; End of function ScrollBlock1
00006C2E                            
00006C2E                            
00006C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2E                            
00006C2E                            
00006C2E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C2E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C32 2002                       		move.l	d2,d0
00006C34 D084                       		add.l	d4,d0
00006C36 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C3A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C3E 2003                       		move.l	d3,d0
00006C40 D085                       		add.l	d5,d0
00006C42 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C46 2200                       		move.l	d0,d1
00006C48 4841                       		swap	d1
00006C4A 0241 0010                  		andi.w	#$10,d1
00006C4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C52 B501                       		eor.b	d2,d1
00006C54 6600                       		bne.s	locret_6812
00006C56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C5C 9083                       		sub.l	d3,d0
00006C5E 6A00                       		bpl.s	loc_680C
00006C60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_680C:
00006C68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C6E                            
00006C6E                            locret_6812:
00006C6E 4E75                       		rts	
00006C70                            ; End of function ScrollBlock2
00006C70                            
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C70 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C74 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C78 3200                       		move.w	d0,d1
00006C7A 0241 0010                  		andi.w	#$10,d1
00006C7E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C82 B501                       		eor.b	d2,d1
00006C84 6600                       		bne.s	locret_6842
00006C86 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C8C 9043                       		sub.w	d3,d0
00006C8E 6A00                       		bpl.s	loc_683C
00006C90 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C96 4E75                       		rts	
00006C98                            ; ===========================================================================
00006C98                            
00006C98                            loc_683C:
00006C98 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C9E                            
00006C9E                            locret_6842:
00006C9E 4E75                       		rts	
00006CA0                            ; End of function ScrollBlock3
00006CA0                            
00006CA0                            
00006CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA0                            
00006CA0                            
00006CA0                            ScrollBlock4:				; XREF: Deform_GHZ
00006CA0 3438 F710                  		move.w	($FFFFF710).w,d2
00006CA4 3638 F714                  		move.w	($FFFFF714).w,d3
00006CA8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006CAC 48C0                       		ext.l	d0
00006CAE EF80                       		asl.l	#7,d0
00006CB0 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006CB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006CB8 0240 0010                  		andi.w	#$10,d0
00006CBC 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006CC0 B300                       		eor.b	d1,d0
00006CC2 6600                       		bne.s	locret_6884
00006CC4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006CCA 3038 F710                  		move.w	($FFFFF710).w,d0
00006CCE 9042                       		sub.w	d2,d0
00006CD0 6A00                       		bpl.s	loc_687E
00006CD2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006CD8 6000                       		bra.s	locret_6884
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_687E:
00006CDA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CE0                            
00006CE0                            locret_6884:
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock4
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:				; XREF: loc_C44
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6954
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_69F4
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6954
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_69F4
00006D3A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D3E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D42 49F8 A400                  		lea	($FFFFA400).w,a4
00006D46 343C 4000                  		move.w	#$4000,d2
00006D4A 4A12                       		tst.b	(a2)
00006D4C 6700                       		beq.s	locret_6952
00006D4E 0892 0000                  		bclr	#0,(a2)
00006D52 6700                       		beq.s	loc_6908
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 6100 0000                  		bsr.w	sub_6C20
00006D5C 78F0                       		moveq	#-$10,d4
00006D5E 7AF0                       		moveq	#-$10,d5
00006D60 6100 0000                  		bsr.w	sub_6AD8
00006D64                            
00006D64                            loc_6908:
00006D64 0892 0001                  		bclr	#1,(a2)
00006D68 6700                       		beq.s	loc_6922
00006D6A 383C 00E0                  		move.w	#$E0,d4
00006D6E 7AF0                       		moveq	#-$10,d5
00006D70 6100 0000                  		bsr.w	sub_6C20
00006D74 383C 00E0                  		move.w	#$E0,d4
00006D78 7AF0                       		moveq	#-$10,d5
00006D7A 6100 0000                  		bsr.w	sub_6AD8
00006D7E                            
00006D7E                            loc_6922:
00006D7E 0892 0002                  		bclr	#2,(a2)
00006D82 6700                       		beq.s	loc_6938
00006D84 78F0                       		moveq	#-$10,d4
00006D86 7AF0                       		moveq	#-$10,d5
00006D88 6100 0000                  		bsr.w	sub_6C20
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7AF0                       		moveq	#-$10,d5
00006D90 6100 0000                  		bsr.w	sub_6B04
00006D94                            
00006D94                            loc_6938:
00006D94 0892 0003                  		bclr	#3,(a2)
00006D98 6700                       		beq.s	locret_6952
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 3A3C 0140                  		move.w	#$140,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 78F0                       		moveq	#-$10,d4
00006DA6 3A3C 0140                  		move.w	#$140,d5
00006DAA 6100 0000                  		bsr.w	sub_6B04
00006DAE                            
00006DAE                            locret_6952:
00006DAE 4E75                       		rts	
00006DB0                            ; End of function LoadTilesAsYouMove
00006DB0                            
00006DB0                            
00006DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB0                            
00006DB0                            
00006DB0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006DB0 4A12                       		tst.b	(a2)
00006DB2 6700 0000                  		beq.w	locret_69F2
00006DB6 0892 0000                  		bclr	#0,(a2)
00006DBA 6700                       		beq.s	loc_6972
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6C20
00006DC4 78F0                       		moveq	#-$10,d4
00006DC6 7AF0                       		moveq	#-$10,d5
00006DC8 7C1F                       		moveq	#$1F,d6
00006DCA 6100 0000                  		bsr.w	sub_6ADA
00006DCE                            
00006DCE                            loc_6972:
00006DCE 0892 0001                  		bclr	#1,(a2)
00006DD2 6700                       		beq.s	loc_698E
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6C20
00006DDE 383C 00E0                  		move.w	#$E0,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 7C1F                       		moveq	#$1F,d6
00006DE6 6100 0000                  		bsr.w	sub_6ADA
00006DEA                            
00006DEA                            loc_698E:
00006DEA 0892 0002                  		bclr	#2,(a2)
00006DEE 6700                       		beq.s	loc_69BE
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 78F0                       		moveq	#-$10,d4
00006DFA 7AF0                       		moveq	#-$10,d5
00006DFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9C41                       		sub.w	d1,d6
00006E0A 6D00                       		blt.s	loc_69BE
00006E0C E84E                       		lsr.w	#4,d6
00006E0E 0C46 000F                  		cmpi.w	#$F,d6
00006E12 6500                       		bcs.s	loc_69BA
00006E14 7C0F                       		moveq	#$F,d6
00006E16                            
00006E16                            loc_69BA:
00006E16 6100 0000                  		bsr.w	sub_6B06
00006E1A                            
00006E1A                            loc_69BE:
00006E1A 0892 0003                  		bclr	#3,(a2)
00006E1E 6700                       		beq.s	locret_69F2
00006E20 78F0                       		moveq	#-$10,d4
00006E22 3A3C 0140                  		move.w	#$140,d5
00006E26 6100 0000                  		bsr.w	sub_6C20
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 3A3C 0140                  		move.w	#$140,d5
00006E30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E34 322B 0004                  		move.w	4(a3),d1
00006E38 0241 FFF0                  		andi.w	#-$10,d1
00006E3C 9C41                       		sub.w	d1,d6
00006E3E 6D00                       		blt.s	locret_69F2
00006E40 E84E                       		lsr.w	#4,d6
00006E42 0C46 000F                  		cmpi.w	#$F,d6
00006E46 6500                       		bcs.s	loc_69EE
00006E48 7C0F                       		moveq	#$F,d6
00006E4A                            
00006E4A                            loc_69EE:
00006E4A 6100 0000                  		bsr.w	sub_6B06
00006E4E                            
00006E4E                            locret_69F2:
00006E4E 4E75                       		rts	
00006E50                            ; End of function sub_6954
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E50 4A12                       		tst.b	(a2)
00006E52 6700 0000                  		beq.w	locret_6A80
00006E56 0892 0002                  		bclr	#2,(a2)
00006E5A 6700                       		beq.s	loc_6A3E
00006E5C 0C53 0010                  		cmpi.w	#$10,(a3)
00006E60 6500                       		bcs.s	loc_6A3E
00006E62 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E66 322B 0004                  		move.w	4(a3),d1
00006E6A 0241 FFF0                  		andi.w	#-$10,d1
00006E6E 9841                       		sub.w	d1,d4
00006E70 3F04                       		move.w	d4,-(sp)
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6C20
00006E78 381F                       		move.w	(sp)+,d4
00006E7A 7AF0                       		moveq	#-$10,d5
00006E7C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E80 322B 0004                  		move.w	4(a3),d1
00006E84 0241 FFF0                  		andi.w	#-$10,d1
00006E88 9C41                       		sub.w	d1,d6
00006E8A 6D00                       		blt.s	loc_6A3E
00006E8C E84E                       		lsr.w	#4,d6
00006E8E 0446 000E                  		subi.w	#$E,d6
00006E92 6400                       		bcc.s	loc_6A3E
00006E94 4446                       		neg.w	d6
00006E96 6100 0000                  		bsr.w	sub_6B06
00006E9A                            
00006E9A                            loc_6A3E:
00006E9A 0892 0003                  		bclr	#3,(a2)
00006E9E 6700                       		beq.s	locret_6A80
00006EA0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EA4 322B 0004                  		move.w	4(a3),d1
00006EA8 0241 FFF0                  		andi.w	#-$10,d1
00006EAC 9841                       		sub.w	d1,d4
00006EAE 3F04                       		move.w	d4,-(sp)
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 6100 0000                  		bsr.w	sub_6C20
00006EB8 381F                       		move.w	(sp)+,d4
00006EBA 3A3C 0140                  		move.w	#$140,d5
00006EBE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EC2 322B 0004                  		move.w	4(a3),d1
00006EC6 0241 FFF0                  		andi.w	#-$10,d1
00006ECA 9C41                       		sub.w	d1,d6
00006ECC 6D00                       		blt.s	locret_6A80
00006ECE E84E                       		lsr.w	#4,d6
00006ED0 0446 000E                  		subi.w	#$E,d6
00006ED4 6400                       		bcc.s	locret_6A80
00006ED6 4446                       		neg.w	d6
00006ED8 6100 0000                  		bsr.w	sub_6B06
00006EDC                            
00006EDC                            locret_6A80:
00006EDC 4E75                       		rts	
00006EDE                            ; End of function sub_69F4
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE 4A12                       		tst.b	(a2)
00006EE0 6700                       		beq.s	locret_6AD6
00006EE2 0892 0002                  		bclr	#2,(a2)
00006EE6 6700                       		beq.s	loc_6AAC
00006EE8 383C 00D0                  		move.w	#$D0,d4
00006EEC 322B 0004                  		move.w	4(a3),d1
00006EF0 0241 FFF0                  		andi.w	#-$10,d1
00006EF4 9841                       		sub.w	d1,d4
00006EF6 3F04                       		move.w	d4,-(sp)
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C3C
00006EFE 381F                       		move.w	(sp)+,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C02                       		moveq	#2,d6
00006F04 6100 0000                  		bsr.w	sub_6B06
00006F08                            
00006F08                            loc_6AAC:
00006F08 0892 0003                  		bclr	#3,(a2)
00006F0C 6700                       		beq.s	locret_6AD6
00006F0E 383C 00D0                  		move.w	#$D0,d4
00006F12 322B 0004                  		move.w	4(a3),d1
00006F16 0241 FFF0                  		andi.w	#-$10,d1
00006F1A 9841                       		sub.w	d1,d4
00006F1C 3F04                       		move.w	d4,-(sp)
00006F1E 3A3C 0140                  		move.w	#$140,d5
00006F22 6100 0000                  		bsr.w	sub_6C3C
00006F26 381F                       		move.w	(sp)+,d4
00006F28 3A3C 0140                  		move.w	#$140,d5
00006F2C 7C02                       		moveq	#2,d6
00006F2E 6100 0000                  		bsr.w	sub_6B06
00006F32                            
00006F32                            locret_6AD6:
00006F32 4E75                       		rts	
00006F34                            
00006F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F34                            
00006F34                            
00006F34                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F34 7C15                       		moveq	#$15,d6
00006F36                            ; End of function sub_6AD8
00006F36                            
00006F36                            
00006F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F36                            
00006F36                            
00006F36                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F36 2E3C 0080 0000             		move.l	#$800000,d7
00006F3C 2200                       		move.l	d0,d1
00006F3E                            
00006F3E                            loc_6AE2:
00006F3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F42 6100 0000                  		bsr.w	sub_6BD6
00006F46 2001                       		move.l	d1,d0
00006F48 6100 0000                  		bsr.w	sub_6B32
00006F4C 5801                       		addq.b	#4,d1
00006F4E 0201 007F                  		andi.b	#$7F,d1
00006F52 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F56 0645 0010                  		addi.w	#$10,d5
00006F5A 51CE FFE2                  		dbf	d6,loc_6AE2
00006F5E 4E75                       		rts	
00006F60                            ; End of function sub_6ADA
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F60 7C0F                       		moveq	#$F,d6
00006F62                            ; End of function sub_6B04
00006F62                            
00006F62                            
00006F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F62                            
00006F62                            
00006F62                            sub_6B06:				; XREF: sub_6954
00006F62 2E3C 0080 0000             		move.l	#$800000,d7
00006F68 2200                       		move.l	d0,d1
00006F6A                            
00006F6A                            loc_6B0E:
00006F6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F6E 6100 0000                  		bsr.w	sub_6BD6
00006F72 2001                       		move.l	d1,d0
00006F74 6100 0000                  		bsr.w	sub_6B32
00006F78 0641 0100                  		addi.w	#$100,d1
00006F7C 0241 0FFF                  		andi.w	#$FFF,d1
00006F80 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F84 0644 0010                  		addi.w	#$10,d4
00006F88 51CE FFE0                  		dbf	d6,loc_6B0E
00006F8C 4E75                       		rts	
00006F8E                            ; End of function sub_6B06
00006F8E                            
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F8E 8042                       		or.w	d2,d0
00006F90 4840                       		swap	d0
00006F92 0810 0004                  		btst	#4,(a0)
00006F96 6600                       		bne.s	loc_6B6E
00006F98 0810 0003                  		btst	#3,(a0)
00006F9C 6600                       		bne.s	loc_6B4E
00006F9E 2A80                       		move.l	d0,(a5)
00006FA0 2C99                       		move.l	(a1)+,(a6)
00006FA2 D087                       		add.l	d7,d0
00006FA4 2A80                       		move.l	d0,(a5)
00006FA6 2C99                       		move.l	(a1)+,(a6)
00006FA8 4E75                       		rts	
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6B4E:
00006FAA 2A80                       		move.l	d0,(a5)
00006FAC 2819                       		move.l	(a1)+,d4
00006FAE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FB4 4844                       		swap	d4
00006FB6 2C84                       		move.l	d4,(a6)
00006FB8 D087                       		add.l	d7,d0
00006FBA 2A80                       		move.l	d0,(a5)
00006FBC 2819                       		move.l	(a1)+,d4
00006FBE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FC4 4844                       		swap	d4
00006FC6 2C84                       		move.l	d4,(a6)
00006FC8 4E75                       		rts	
00006FCA                            ; ===========================================================================
00006FCA                            
00006FCA                            loc_6B6E:
00006FCA 0810 0003                  		btst	#3,(a0)
00006FCE 6600                       		bne.s	loc_6B90
00006FD0 2A80                       		move.l	d0,(a5)
00006FD2 2A19                       		move.l	(a1)+,d5
00006FD4 2819                       		move.l	(a1)+,d4
00006FD6 0A84 1000 1000             		eori.l	#$10001000,d4
00006FDC 2C84                       		move.l	d4,(a6)
00006FDE D087                       		add.l	d7,d0
00006FE0 2A80                       		move.l	d0,(a5)
00006FE2 0A85 1000 1000             		eori.l	#$10001000,d5
00006FE8 2C85                       		move.l	d5,(a6)
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            loc_6B90:
00006FEC 2A80                       		move.l	d0,(a5)
00006FEE 2A19                       		move.l	(a1)+,d5
00006FF0 2819                       		move.l	(a1)+,d4
00006FF2 0A84 1800 1800             		eori.l	#$18001800,d4
00006FF8 4844                       		swap	d4
00006FFA 2C84                       		move.l	d4,(a6)
00006FFC D087                       		add.l	d7,d0
00006FFE 2A80                       		move.l	d0,(a5)
00007000 0A85 1800 1800             		eori.l	#$18001800,d5
00007006 4845                       		swap	d5
00007008 2C85                       		move.l	d5,(a6)
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B32
0000700C                            
0000700C                            ; ===========================================================================
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E 2A80                       		move.l	d0,(a5)
00007010 3A3C 2000                  		move.w	#$2000,d5
00007014 3819                       		move.w	(a1)+,d4
00007016 D845                       		add.w	d5,d4
00007018 3C84                       		move.w	d4,(a6)
0000701A 3819                       		move.w	(a1)+,d4
0000701C D845                       		add.w	d5,d4
0000701E 3C84                       		move.w	d4,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 3819                       		move.w	(a1)+,d4
00007026 D845                       		add.w	d5,d4
00007028 3C84                       		move.w	d4,(a6)
0000702A 3819                       		move.w	(a1)+,d4
0000702C D845                       		add.w	d5,d4
0000702E 3C84                       		move.w	d4,(a6)
00007030 4E75                       		rts	
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007032 43F8 B000                  		lea	($FFFFB000).w,a1
00007036 D86B 0004                  		add.w	4(a3),d4
0000703A DA53                       		add.w	(a3),d5
0000703C 3604                       		move.w	d4,d3
0000703E E24B                       		lsr.w	#1,d3
00007040 0243 0380                  		andi.w	#$380,d3
00007044 E64D                       		lsr.w	#3,d5
00007046 3005                       		move.w	d5,d0
00007048 EA48                       		lsr.w	#5,d0
0000704A 0240 007F                  		andi.w	#$7F,d0
0000704E D043                       		add.w	d3,d0
00007050 76FF                       		moveq	#-1,d3
00007052 1634 0000                  		move.b	(a4,d0.w),d3
00007056 6700                       		beq.s	locret_6C1E
00007058 5303                       		subq.b	#1,d3
0000705A 0243 007F                  		andi.w	#$7F,d3
0000705E EE5B                       		ror.w	#7,d3
00007060 D844                       		add.w	d4,d4
00007062 0244 01E0                  		andi.w	#$1E0,d4
00007066 0245 001E                  		andi.w	#$1E,d5
0000706A D644                       		add.w	d4,d3
0000706C D645                       		add.w	d5,d3
0000706E 2043                       		movea.l	d3,a0
00007070 3610                       		move.w	(a0),d3
00007072 0243 03FF                  		andi.w	#$3FF,d3
00007076 E74B                       		lsl.w	#3,d3
00007078 D2C3                       		adda.w	d3,a1
0000707A                            
0000707A                            locret_6C1E:
0000707A 4E75                       		rts	
0000707C                            ; End of function sub_6BD6
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000707C D86B 0004                  		add.w	4(a3),d4
00007080 DA53                       		add.w	(a3),d5
00007082 0244 00F0                  		andi.w	#$F0,d4
00007086 0245 01F0                  		andi.w	#$1F0,d5
0000708A E94C                       		lsl.w	#4,d4
0000708C E44D                       		lsr.w	#2,d5
0000708E D845                       		add.w	d5,d4
00007090 7003                       		moveq	#3,d0
00007092 4840                       		swap	d0
00007094 3004                       		move.w	d4,d0
00007096 4E75                       		rts	
00007098                            ; End of function sub_6C20
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            ; not used
00007098                            
00007098                            
00007098                            sub_6C3C:
00007098 D86B 0004                  		add.w	4(a3),d4
0000709C DA53                       		add.w	(a3),d5
0000709E 0244 00F0                  		andi.w	#$F0,d4
000070A2 0245 01F0                  		andi.w	#$1F0,d5
000070A6 E94C                       		lsl.w	#4,d4
000070A8 E44D                       		lsr.w	#2,d5
000070AA D845                       		add.w	d5,d4
000070AC 7002                       		moveq	#2,d0
000070AE 4840                       		swap	d0
000070B0 3004                       		move.w	d4,d0
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6C3C
000070B4                            
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            ; Subroutine to	load tiles as soon as the level	appears
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000070B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000070BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000070C0 47F8 F700                  		lea	($FFFFF700).w,a3
000070C4 49F8 A400                  		lea	($FFFFA400).w,a4
000070C8 343C 4000                  		move.w	#$4000,d2
000070CC 6100                       		bsr.s	LoadTilesFromStart2
000070CE 47F8 F708                  		lea	($FFFFF708).w,a3
000070D2 49F8 A440                  		lea	($FFFFA440).w,a4
000070D6 343C 6000                  		move.w	#$6000,d2
000070DA                            ; End of function LoadTilesFromStart
000070DA                            
000070DA                            
000070DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DA                            
000070DA                            
000070DA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070DA 78F0                       		moveq	#-$10,d4
000070DC 7C0F                       		moveq	#$F,d6
000070DE                            
000070DE                            loc_6C82:
000070DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070E2 7A00                       		moveq	#0,d5
000070E4 3204                       		move.w	d4,d1
000070E6 6100 FF94                  		bsr.w	sub_6C20
000070EA 3801                       		move.w	d1,d4
000070EC 7A00                       		moveq	#0,d5
000070EE 7C1F                       		moveq	#$1F,d6
000070F0 6100 FE44                  		bsr.w	sub_6ADA
000070F4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070F8 0644 0010                  		addi.w	#$10,d4
000070FC 51CE FFE0                  		dbf	d6,loc_6C82
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesFromStart2
00007102                            
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Main Load Block loading subroutine
00007102                            ; ---------------------------------------------------------------------------
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007102 7000                       		moveq	#0,d0
00007104 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007108 E948                       		lsl.w	#4,d0
0000710A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007110 45F2 0000                  		lea	(a2,d0.w),a2
00007114 2F0A                       		move.l	a2,-(sp)
00007116 588A                       		addq.l	#4,a2
00007118 205A                       		movea.l	(a2)+,a0
0000711A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000711E 303C 0000                  		move.w	#0,d0
00007122 6100 A81A                  		bsr.w	EniDec
00007126 205A                       		movea.l	(a2)+,a0
00007128 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000712E 6100 A98C                  		bsr.w	KosDec
00007132 6100 0000                  		bsr.w	LevelLayoutLoad
00007136 301A                       		move.w	(a2)+,d0
00007138 3012                       		move.w	(a2),d0
0000713A 0240 00FF                  		andi.w	#$FF,d0
0000713E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007144 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007146 700C                       		moveq	#$C,d0		; use SB3 pallet
00007148                            
00007148                            MLB_ChkSBZPal:
00007148 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000714E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007150 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007156 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007158                            
00007158                            MLB_UsePal0E:
00007158 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000715A                            
0000715A                            MLB_NormalPal:
0000715A 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000715E 245F                       		movea.l	(sp)+,a2
00007160 584A                       		addq.w	#4,a2
00007162 7000                       		moveq	#0,d0
00007164 1012                       		move.b	(a2),d0
00007166 6700                       		beq.s	locret_6D10
00007168 6100 A636                  		bsr.w	LoadPLC		; load pattern load cues
0000716C                            
0000716C                            locret_6D10:
0000716C 4E75                       		rts	
0000716E                            ; End of function MainLoadBlockLoad
0000716E                            
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            ; Level	layout loading subroutine
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            
0000716E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716E                            
0000716E                            
0000716E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000716E 47F8 A400                  		lea	($FFFFA400).w,a3
00007172 323C 01FF                  		move.w	#$1FF,d1
00007176 7000                       		moveq	#0,d0
00007178                            
00007178                            LevLoad_ClrRam:
00007178 26C0                       		move.l	d0,(a3)+
0000717A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000717E                            
0000717E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007182 7200                       		moveq	#0,d1
00007184 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007188 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000718C 7202                       		moveq	#2,d1
0000718E                            ; End of function LevelLayoutLoad
0000718E                            
0000718E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000718E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007192 ED08                       		lsl.b	#6,d0
00007194 EA48                       		lsr.w	#5,d0
00007196 3400                       		move.w	d0,d2
00007198 D040                       		add.w	d0,d0
0000719A D042                       		add.w	d2,d0
0000719C D041                       		add.w	d1,d0
0000719E 43F9 0000 0000             		lea	(Level_Index).l,a1
000071A4 3031 0000                  		move.w	(a1,d0.w),d0
000071A8 43F1 0000                  		lea	(a1,d0.w),a1
000071AC 7200                       		moveq	#0,d1
000071AE 3401                       		move.w	d1,d2
000071B0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000071B2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000071B4                            
000071B4                            LevLoad_NumRows:
000071B4 3001                       		move.w	d1,d0
000071B6 204B                       		movea.l	a3,a0
000071B8                            
000071B8                            LevLoad_Row:
000071B8 10D9                       		move.b	(a1)+,(a0)+
000071BA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000071BE 47EB 0080                  		lea	$80(a3),a3	; do next row
000071C2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000071C6 4E75                       		rts	
000071C8                            ; End of function LevelLayoutLoad2
000071C8                            
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Dynamic screen resize	loading	subroutine
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000071C8 7000                       		moveq	#0,d0
000071CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000071CE D040                       		add.w	d0,d0
000071D0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000071D4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000071D8 7202                       		moveq	#2,d1
000071DA 3038 F726                  		move.w	($FFFFF726).w,d0
000071DE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071E2 6700                       		beq.s	locret_6DAA
000071E4 6400                       		bcc.s	loc_6DAC
000071E6 4441                       		neg.w	d1
000071E8 3038 F704                  		move.w	($FFFFF704).w,d0
000071EC B078 F726                  		cmp.w	($FFFFF726).w,d0
000071F0 6300                       		bls.s	loc_6DA0
000071F2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071F6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071FC                            
000071FC                            loc_6DA0:
000071FC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007200 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007206                            
00007206                            locret_6DAA:
00007206 4E75                       		rts	
00007208                            ; ===========================================================================
00007208                            
00007208                            loc_6DAC:				; XREF: DynScrResizeLoad
00007208 3038 F704                  		move.w	($FFFFF704).w,d0
0000720C 5040                       		addq.w	#8,d0
0000720E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007212 6500                       		bcs.s	loc_6DC4
00007214 0838 0001 D022             		btst	#1,($FFFFD022).w
0000721A 6700                       		beq.s	loc_6DC4
0000721C D241                       		add.w	d1,d1
0000721E D241                       		add.w	d1,d1
00007220                            
00007220                            loc_6DC4:
00007220 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007224 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000722A 4E75                       		rts	
0000722C                            ; End of function DynScrResizeLoad
0000722C                            
0000722C                            ; ===========================================================================
0000722C                            ; ---------------------------------------------------------------------------
0000722C                            ; Offset index for dynamic screen resizing
0000722C                            ; ---------------------------------------------------------------------------
0000722C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007230 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007234 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007238 0000                       		dc.w Resize_Ending-Resize_Index
0000723A                            ; ===========================================================================
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            ; Green	Hill Zone dynamic screen resizing
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            
0000723A                            Resize_GHZ:				; XREF: Resize_Index
0000723A 7000                       		moveq	#0,d0
0000723C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007240 D040                       		add.w	d0,d0
00007242 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000724C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000724E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007250                            ; ===========================================================================
00007250                            
00007250                            Resize_GHZ1:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007256 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000725C 6500                       		bcs.s	locret_6E08	; if not, branch
0000725E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007264                            
00007264                            locret_6E08:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_GHZ2:
00007266 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000726C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007272 6500                       		bcs.s	locret_6E3A
00007274 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000727A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007280 6500                       		bcs.s	locret_6E3A
00007282 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007288 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000728E 6500                       		bcs.s	locret_6E3A
00007290 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007296                            
00007296                            locret_6E3A:
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            Resize_GHZ3:
00007298 7000                       		moveq	#0,d0
0000729A 1038 F742                  		move.b	($FFFFF742).w,d0
0000729E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000072A2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000072A6                            ; ===========================================================================
000072A6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000072A8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000072AA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_GHZ3main:
000072AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072B2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000072B8 6500                       		bcs.s	locret_6E96
000072BA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000072C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_6E96
000072C8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000072CE 6500                       		bcs.s	loc_6E98
000072D0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072D6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072DC 6400                       		bcc.s	loc_6E8E
000072DE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072E4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072EA                            
000072EA                            loc_6E8E:
000072EA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072F0 6400                       		bcc.s	loc_6E98
000072F2                            
000072F2                            locret_6E96:
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6E98:
000072F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FE 4E75                       		rts	
00007300                            ; ===========================================================================
00007300                            
00007300                            Resize_GHZ3boss:
00007300 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007306 6400                       		bcc.s	loc_6EB0
00007308 5538 F742                  		subq.b	#2,($FFFFF742).w
0000730C                            
0000730C                            loc_6EB0:
0000730C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6EE8
00007314 6100 0000                  		bsr.w	SingleObjLoad
00007318 6600                       		bne.s	loc_6ED0
0000731A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000731E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007324 337C 0280 000C             		move.w	#$280,$C(a1)
0000732A                            
0000732A                            loc_6ED0:
0000732A 303C 008C                  		move.w	#$8C,d0
0000732E 6100 A286                  		bsr.w	PlaySound	; play boss music
00007332 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007338 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A460                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_6EE8:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_GHZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Labyrinth Zone dynamic screen	resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_LZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000735E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007360 0000                       		dc.w Resize_LZ3-Resize_LZx
00007362 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_LZ12:
00007364 4E75                       		rts	
00007366                            ; ===========================================================================
00007366                            
00007366                            Resize_LZ3:
00007366 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000736A 6700                       		beq.s	loc_6F28	; if not, branch
0000736C 43F8 A506                  		lea	($FFFFA506).w,a1
00007370 0C11 0007                  		cmpi.b	#7,(a1)
00007374 6700                       		beq.s	loc_6F28
00007376 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000737A 303C 00B7                  		move.w	#$B7,d0
0000737E 6100 A23C                  		bsr.w	PlaySound_Special ; play rumbling sound
00007382                            
00007382                            loc_6F28:
00007382 4A38 F742                  		tst.b	($FFFFF742).w
00007386 6600                       		bne.s	locret_6F64
00007388 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000738E 6500                       		bcs.s	locret_6F62
00007390 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007396 6400                       		bcc.s	locret_6F62
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6F4A
0000739E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000073A2                            
000073A2                            loc_6F4A:
000073A2 303C 008C                  		move.w	#$8C,d0
000073A6 6100 A20E                  		bsr.w	PlaySound	; play boss music
000073AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B4 7011                       		moveq	#$11,d0
000073B6 6000 A3E8                  		bra.w	LoadPLC		; load boss patterns
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            locret_6F62:
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6F64:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ3:
000073BE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6F8C
000073C6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000073CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000073CE 4238 FE30                  		clr.b	($FFFFFE30).w
000073D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000073D8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073E4                            
000073E4                            locret_6F8C:
000073E4 4E75                       		rts	
000073E6                            ; ===========================================================================
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            ; Marble Zone dynamic screen resizing
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            
000073E6                            Resize_MZ:				; XREF: Resize_Index
000073E6 7000                       		moveq	#0,d0
000073E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073EC D040                       		add.w	d0,d0
000073EE 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073F2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073F6                            ; ===========================================================================
000073F6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073F8 0000                       		dc.w Resize_MZ2-Resize_MZx
000073FA 0000                       		dc.w Resize_MZ3-Resize_MZx
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_MZ1:
000073FC 7000                       		moveq	#0,d0
000073FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007402 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007406 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000740A                            ; ===========================================================================
0000740A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000740C 0000                       		dc.w loc_6FEA-off_6FB2
0000740E 0000                       		dc.w loc_702E-off_6FB2
00007410 0000                       		dc.w loc_7050-off_6FB2
00007412                            ; ===========================================================================
00007412                            
00007412                            loc_6FBA:
00007412 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007418 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_6FE8
00007420 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007426 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000742C 6500                       		bcs.s	locret_6FE8
0000742E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007434 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000743A 6500                       		bcs.s	locret_6FE8
0000743C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007440                            
00007440                            locret_6FE8:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            loc_6FEA:
00007442 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007448 6400                       		bcc.s	loc_6FF8
0000744A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000744E 4E75                       		rts	
00007450                            ; ===========================================================================
00007450                            
00007450                            loc_6FF8:
00007450 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007456 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000745C 6400                       		bcc.s	locret_702C
0000745E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007464 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000746A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007470 6400                       		bcc.s	locret_702C
00007472 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007478 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000747E 6500                       		bcs.s	locret_702C
00007480 5438 F742                  		addq.b	#2,($FFFFF742).w
00007484                            
00007484                            locret_702C:
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            
00007486                            loc_702E:
00007486 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000748C 6400                       		bcc.s	loc_703C
0000748E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            loc_703C:
00007494 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_704E
0000749C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000074A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            locret_704E:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_7050:
000074A8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_7072
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074BC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_7072
000074C4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CA                            
000074CA                            locret_7072:
000074CA 4E75                       		rts	
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_MZ2:
000074CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6500                       		bcs.s	locret_7088
000074DA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074E0                            
000074E0                            locret_7088:
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            
000074E2                            Resize_MZ3:
000074E2 7000                       		moveq	#0,d0
000074E4 1038 F742                  		move.b	($FFFFF742).w,d0
000074E8 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074F2 0000                       		dc.w Resize_MZ3end-off_7098
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            Resize_MZ3boss:
000074F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074FA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007500 6500                       		bcs.s	locret_70E8
00007502 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007508 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_70E8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_70D0
00007516 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000751A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007520 337C 022C 000C             		move.w	#$22C,$C(a1)
00007526                            
00007526                            loc_70D0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A08A                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A264                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_70E8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_MZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Star Light Zone dynamic screen resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_SLZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000755A 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000755C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            Resize_SLZ12:
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_SLZ3:
00007560 7000                       		moveq	#0,d0
00007562 1038 F742                  		move.b	($FFFFF742).w,d0
00007566 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000756A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000756E                            ; ===========================================================================
0000756E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007570 0000                       		dc.w Resize_SLZ3boss-off_7118
00007572 0000                       		dc.w Resize_SLZ3end-off_7118
00007574                            ; ===========================================================================
00007574                            
00007574                            Resize_SLZ3main:
00007574 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000757A 6500                       		bcs.s	locret_7130
0000757C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007582 5438 F742                  		addq.b	#2,($FFFFF742).w
00007586                            
00007586                            locret_7130:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            
00007588                            Resize_SLZ3boss:
00007588 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000758E 6500                       		bcs.s	locret_715C
00007590 6100 0000                  		bsr.w	SingleObjLoad
00007594 6600                       		bne.s	loc_7144
00007596 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000759A                            
0000759A                            loc_7144:
0000759A 303C 008C                  		move.w	#$8C,d0
0000759E 6100 A016                  		bsr.w	PlaySound	; play boss music
000075A2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075AC 7011                       		moveq	#$11,d0
000075AE 6000 A1F0                  		bra.w	LoadPLC		; load boss patterns
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            locret_715C:
000075B2 4E75                       		rts	
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            Resize_SLZ3end:
000075B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075BA 4E75                       		rts
000075BC 4E75                       		rts
000075BE                            ; ===========================================================================
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            ; Spring Yard Zone dynamic screen resizing
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            
000075BE                            Resize_SYZ:				; XREF: Resize_Index
000075BE 7000                       		moveq	#0,d0
000075C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C4 D040                       		add.w	d0,d0
000075C6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000075CA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000075CE                            ; ===========================================================================
000075CE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000075D0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075D2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Resize_SYZ1:
000075D4 4E75                       		rts	
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            Resize_SYZ2:
000075D6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075DC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_71A2
000075E4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075EA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075F0 6500                       		bcs.s	locret_71A2
000075F2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075F8                            
000075F8                            locret_71A2:
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SYZ3:
000075FA 7000                       		moveq	#0,d0
000075FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007600 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007604 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007608                            ; ===========================================================================
00007608 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000760A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000760C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_SYZ3main:
0000760E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007614 6500                       		bcs.s	locret_71CE
00007616 6100 0000                  		bsr.w	SingleObjLoad
0000761A 6600                       		bne.s	locret_71CE
0000761C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007620 5438 F742                  		addq.b	#2,($FFFFF742).w
00007624                            
00007624                            locret_71CE:
00007624 4E75                       		rts	
00007626                            ; ===========================================================================
00007626                            
00007626                            Resize_SYZ3boss:
00007626 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000762C 6500                       		bcs.s	locret_7200
0000762E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007634 6100 0000                  		bsr.w	SingleObjLoad
00007638 6600                       		bne.s	loc_71EC
0000763A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000763E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007642                            
00007642                            loc_71EC:
00007642 303C 008C                  		move.w	#$8C,d0
00007646 6100 9F6E                  		bsr.w	PlaySound	; play boss music
0000764A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007650 7011                       		moveq	#$11,d0
00007652 6000 A14C                  		bra.w	LoadPLC		; load boss patterns
00007656                            ; ===========================================================================
00007656                            
00007656                            locret_7200:
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SYZ3end:
00007658 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            ; ---------------------------------------------------------------------------
00007660                            ; Scrap	Brain Zone dynamic screen resizing
00007660                            ; ---------------------------------------------------------------------------
00007660                            
00007660                            Resize_SBZ:				; XREF: Resize_Index
00007660 7000                       		moveq	#0,d0
00007662 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007666 D040                       		add.w	d0,d0
00007668 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000766C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007670                            ; ===========================================================================
00007670 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007672 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007674 0000                       		dc.w Resize_FZ-Resize_SBZx
00007676                            ; ===========================================================================
00007676                            
00007676                            Resize_SBZ1:
00007676 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000767C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007682 6500                       		bcs.s	locret_7242
00007684 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000768A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7242
00007692 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007698                            
00007698                            locret_7242:
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_SBZ2:
0000769A 7000                       		moveq	#0,d0
0000769C 1038 F742                  		move.b	($FFFFF742).w,d0
000076A0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000076A4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000076A8                            ; ===========================================================================
000076A8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000076AA 0000                       		dc.w Resize_SBZ2boss-off_7252
000076AC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000076AE 0000                       		dc.w Resize_SBZ2end-off_7252
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            Resize_SBZ2main:
000076B0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000076B6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000076BC 6500                       		bcs.s	locret_727A
000076BE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000076C4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000076CA 6500                       		bcs.s	locret_727A
000076CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D0                            
000076D0                            locret_727A:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SBZ2boss:
000076D2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_7298
000076DA 6100 0000                  		bsr.w	SingleObjLoad
000076DE 6600                       		bne.s	locret_7298
000076E0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E8 701E                       		moveq	#$1E,d0
000076EA 6000 A0B4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            locret_7298:
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            
000076F0                            Resize_SBZ2boss2:
000076F0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076F6 6500                       		bcs.s	loc_72B6
000076F8 6100 0000                  		bsr.w	SingleObjLoad
000076FC 6600                       		bne.s	loc_72B0
000076FE 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007702 5438 F742                  		addq.b	#2,($FFFFF742).w
00007706                            
00007706                            loc_72B0:
00007706 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000770C                            
0000770C                            loc_72B6:
0000770C 6000                       		bra.s	loc_72C2
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_SBZ2end:
0000770E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007714 6500                       		bcs.s	loc_72C2
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            loc_72C2:
00007718 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_FZ:
00007720 7000                       		moveq	#0,d0
00007722 1038 F742                  		move.b	($FFFFF742).w,d0
00007726 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000772A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000772E                            ; ===========================================================================
0000772E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007732 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007736 0000                       		dc.w Resize_FZend2-off_72D8
00007738                            ; ===========================================================================
00007738                            
00007738                            Resize_FZmain:
00007738 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000773E 6500                       		bcs.s	loc_72F4
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744 701F                       		moveq	#$1F,d0
00007746 6100 A058                  		bsr.w	LoadPLC		; load FZ boss patterns
0000774A                            
0000774A                            loc_72F4:
0000774A 60CC                       		bra.s	loc_72C2
0000774C                            ; ===========================================================================
0000774C                            
0000774C                            Resize_FZboss:
0000774C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007752 6500                       		bcs.s	loc_7312
00007754 6100 0000                  		bsr.w	SingleObjLoad
00007758 6600                       		bne.s	loc_7312
0000775A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000775E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007762 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007768                            
00007768                            loc_7312:
00007768 60AE                       		bra.s	loc_72C2
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_FZend:
0000776A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007770 6500                       		bcs.s	loc_7320
00007772 5438 F742                  		addq.b	#2,($FFFFF742).w
00007776                            
00007776                            loc_7320:
00007776 60A0                       		bra.s	loc_72C2
00007778                            ; ===========================================================================
00007778                            
00007778                            locret_7322:
00007778 4E75                       		rts	
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            Resize_FZend2:
0000777A 609C                       		bra.s	loc_72C2
0000777C                            ; ===========================================================================
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            ; Ending sequence dynamic screen resizing (empty)
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            
0000777C                            Resize_Ending:				; XREF: Resize_Index
0000777C 4E75                       		rts	
0000777E                            ; ===========================================================================
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            ; Object 11 - GHZ bridge
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            
0000777E                            Obj11:					; XREF: Obj_Index
0000777E 7000                       		moveq	#0,d0
00007780 1028 0024                  		move.b	$24(a0),d0
00007784 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007788 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000778C                            ; ===========================================================================
0000778C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007790 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007794 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007798                            ; ===========================================================================
00007798                            
00007798                            Obj11_Main:				; XREF: Obj11_Index
00007798 5428 0024                  		addq.b	#2,$24(a0)
0000779C 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000077A4 317C 438E 0002             		move.w	#$438E,2(a0)
000077AA 117C 0004 0001             		move.b	#4,1(a0)
000077B0 117C 0003 0018             		move.b	#3,$18(a0)
000077B6 117C 0080 0019             		move.b	#$80,$19(a0)
000077BC 3428 000C                  		move.w	$C(a0),d2
000077C0 3628 0008                  		move.w	8(a0),d3
000077C4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000077C6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000077CA 7200                       		moveq	#0,d1
000077CC 1212                       		move.b	(a2),d1		; copy a2 to d1
000077CE 14FC 0000                  		move.b	#0,(a2)+
000077D2 3001                       		move.w	d1,d0
000077D4 E248                       		lsr.w	#1,d0
000077D6 E948                       		lsl.w	#4,d0
000077D8 9640                       		sub.w	d0,d3
000077DA 5501                       		subq.b	#2,d1
000077DC 6500                       		bcs.s	Obj11_Action
000077DE                            
000077DE                            Obj11_MakeBdg:
000077DE 6100 0000                  		bsr.w	SingleObjLoad
000077E2 6600                       		bne.s	Obj11_Action
000077E4 5228 0028                  		addq.b	#1,$28(a0)
000077E8 B668 0008                  		cmp.w	8(a0),d3
000077EC 6600                       		bne.s	loc_73B8
000077EE 0643 0010                  		addi.w	#$10,d3
000077F2 3142 000C                  		move.w	d2,$C(a0)
000077F6 3142 003C                  		move.w	d2,$3C(a0)
000077FA 3A08                       		move.w	a0,d5
000077FC 0445 D000                  		subi.w	#-$3000,d5
00007800 EC4D                       		lsr.w	#6,d5
00007802 0245 007F                  		andi.w	#$7F,d5
00007806 14C5                       		move.b	d5,(a2)+
00007808 5228 0028                  		addq.b	#1,$28(a0)
0000780C                            
0000780C                            loc_73B8:				; XREF: ROM:00007398j
0000780C 3A09                       		move.w	a1,d5
0000780E 0445 D000                  		subi.w	#-$3000,d5
00007812 EC4D                       		lsr.w	#6,d5
00007814 0245 007F                  		andi.w	#$7F,d5
00007818 14C5                       		move.b	d5,(a2)+
0000781A 137C 000A 0024             		move.b	#$A,$24(a1)
00007820 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007822 3342 000C                  		move.w	d2,$C(a1)
00007826 3342 003C                  		move.w	d2,$3C(a1)
0000782A 3343 0008                  		move.w	d3,8(a1)
0000782E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007836 337C 438E 0002             		move.w	#$438E,2(a1)
0000783C 137C 0004 0001             		move.b	#4,1(a1)
00007842 137C 0003 0018             		move.b	#3,$18(a1)
00007848 137C 0008 0019             		move.b	#8,$19(a1)
0000784E 0643 0010                  		addi.w	#$10,d3
00007852 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007856                            
00007856                            Obj11_Action:				; XREF: Obj11_Index
00007856 6100                       		bsr.s	Obj11_Solid
00007858 4A28 003E                  		tst.b	$3E(a0)
0000785C 6700                       		beq.s	Obj11_Display
0000785E 5928 003E                  		subq.b	#4,$3E(a0)
00007862 6100 0000                  		bsr.w	Obj11_Bend
00007866                            
00007866                            Obj11_Display:
00007866 6100 0000                  		bsr.w	DisplaySprite
0000786A 6000 0000                  		bra.w	Obj11_ChkDel
0000786E                            
0000786E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000786E                            
0000786E                            
0000786E                            Obj11_Solid:				; XREF: Obj11_Action
0000786E 7200                       		moveq	#0,d1
00007870 1228 0028                  		move.b	$28(a0),d1
00007874 E749                       		lsl.w	#3,d1
00007876 3401                       		move.w	d1,d2
00007878 5041                       		addq.w	#8,d1
0000787A D442                       		add.w	d2,d2
0000787C 43F8 D000                  		lea	($FFFFD000).w,a1
00007880 4A69 0012                  		tst.w	$12(a1)
00007884 6B00 0000                  		bmi.w	locret_751E
00007888 3029 0008                  		move.w	8(a1),d0
0000788C 9068 0008                  		sub.w	8(a0),d0
00007890 D041                       		add.w	d1,d0
00007892 6B00 0000                  		bmi.w	locret_751E
00007896 B042                       		cmp.w	d2,d0
00007898 6400 0000                  		bcc.w	locret_751E
0000789C 6000                       		bra.s	Platform2
0000789E                            ; End of function Obj11_Solid
0000789E                            
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            ; Platform subroutine
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            
0000789E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789E                            
0000789E                            
0000789E                            PlatformObject:
0000789E 43F8 D000                  		lea	($FFFFD000).w,a1
000078A2 4A69 0012                  		tst.w	$12(a1)
000078A6 6B00 0000                  		bmi.w	locret_751E
000078AA 3029 0008                  		move.w	8(a1),d0
000078AE 9068 0008                  		sub.w	8(a0),d0
000078B2 D041                       		add.w	d1,d0
000078B4 6B00 0000                  		bmi.w	locret_751E
000078B8 D241                       		add.w	d1,d1
000078BA B041                       		cmp.w	d1,d0
000078BC 6400 0000                  		bcc.w	locret_751E
000078C0                            
000078C0                            Platform2:
000078C0 3028 000C                  		move.w	$C(a0),d0
000078C4 5140                       		subq.w	#8,d0
000078C6                            
000078C6                            Platform3:
000078C6 3429 000C                  		move.w	$C(a1),d2
000078CA 1229 0016                  		move.b	$16(a1),d1
000078CE 4881                       		ext.w	d1
000078D0 D242                       		add.w	d2,d1
000078D2 5841                       		addq.w	#4,d1
000078D4 9041                       		sub.w	d1,d0
000078D6 6200 0000                  		bhi.w	locret_751E
000078DA 0C40 FFF0                  		cmpi.w	#-$10,d0
000078DE 6500 0000                  		bcs.w	locret_751E
000078E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078E6 6B00 0000                  		bmi.w	locret_751E
000078EA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078F0 6400 0000                  		bcc.w	locret_751E
000078F4 D440                       		add.w	d0,d2
000078F6 5642                       		addq.w	#3,d2
000078F8 3342 000C                  		move.w	d2,$C(a1)
000078FC 5428 0024                  		addq.b	#2,$24(a0)
00007900                            
00007900                            loc_74AE:
00007900 0829 0003 0022             		btst	#3,$22(a1)
00007906 6700                       		beq.s	loc_74DC
00007908 7000                       		moveq	#0,d0
0000790A 1029 003D                  		move.b	$3D(a1),d0
0000790E ED48                       		lsl.w	#6,d0
00007910 0680 00FF D000             		addi.l	#$FFD000,d0
00007916 2440                       		movea.l	d0,a2
00007918 08AA 0003 0022             		bclr	#3,$22(a2)
0000791E 422A 0025                  		clr.b	$25(a2)
00007922 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007928 6600                       		bne.s	loc_74DC
0000792A 552A 0024                  		subq.b	#2,$24(a2)
0000792E                            
0000792E                            loc_74DC:
0000792E 3008                       		move.w	a0,d0
00007930 0440 D000                  		subi.w	#-$3000,d0
00007934 EC48                       		lsr.w	#6,d0
00007936 0240 007F                  		andi.w	#$7F,d0
0000793A 1340 003D                  		move.b	d0,$3D(a1)
0000793E 137C 0000 0026             		move.b	#0,$26(a1)
00007944 337C 0000 0012             		move.w	#0,$12(a1)
0000794A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007950 0829 0001 0022             		btst	#1,$22(a1)
00007956 6700                       		beq.s	loc_7512
00007958 2F08                       		move.l	a0,-(sp)
0000795A 2049                       		movea.l	a1,a0
0000795C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007962 205F                       		movea.l	(sp)+,a0
00007964                            
00007964                            loc_7512:
00007964 08E9 0003 0022             		bset	#3,$22(a1)
0000796A 08E8 0003 0022             		bset	#3,$22(a0)
00007970                            
00007970                            locret_751E:
00007970 4E75                       		rts	
00007972                            ; End of function PlatformObject
00007972                            
00007972                            ; ---------------------------------------------------------------------------
00007972                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007972                            ; ---------------------------------------------------------------------------
00007972                            
00007972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007972                            
00007972                            
00007972                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007972 43F8 D000                  		lea	($FFFFD000).w,a1
00007976 4A69 0012                  		tst.w	$12(a1)
0000797A 6B00 FFF4                  		bmi.w	locret_751E
0000797E 3029 0008                  		move.w	8(a1),d0
00007982 9068 0008                  		sub.w	8(a0),d0
00007986 D041                       		add.w	d1,d0
00007988 6BE6                       		bmi.s	locret_751E
0000798A D241                       		add.w	d1,d1
0000798C B041                       		cmp.w	d1,d0
0000798E 64E0                       		bcc.s	locret_751E
00007990 0828 0000 0001             		btst	#0,1(a0)
00007996 6700                       		beq.s	loc_754A
00007998 4640                       		not.w	d0
0000799A D041                       		add.w	d1,d0
0000799C                            
0000799C                            loc_754A:
0000799C E248                       		lsr.w	#1,d0
0000799E 7600                       		moveq	#0,d3
000079A0 1632 0000                  		move.b	(a2,d0.w),d3
000079A4 3028 000C                  		move.w	$C(a0),d0
000079A8 9043                       		sub.w	d3,d0
000079AA 6000 FF1A                  		bra.w	Platform3
000079AE                            ; End of function SlopeObject
000079AE                            
000079AE                            
000079AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AE                            
000079AE                            
000079AE                            Obj15_Solid:				; XREF: Obj15_SetSolid
000079AE 43F8 D000                  		lea	($FFFFD000).w,a1
000079B2 4A69 0012                  		tst.w	$12(a1)
000079B6 6B00 FFB8                  		bmi.w	locret_751E
000079BA 3029 0008                  		move.w	8(a1),d0
000079BE 9068 0008                  		sub.w	8(a0),d0
000079C2 D041                       		add.w	d1,d0
000079C4 6B00 FFAA                  		bmi.w	locret_751E
000079C8 D241                       		add.w	d1,d1
000079CA B041                       		cmp.w	d1,d0
000079CC 6400 FFA2                  		bcc.w	locret_751E
000079D0 3028 000C                  		move.w	$C(a0),d0
000079D4 9043                       		sub.w	d3,d0
000079D6 6000 FEEE                  		bra.w	Platform3
000079DA                            ; End of function Obj15_Solid
000079DA                            
000079DA                            ; ===========================================================================
000079DA                            
000079DA                            Obj11_Action2:				; XREF: Obj11_Index
000079DA 6100                       		bsr.s	Obj11_WalkOff
000079DC 6100 0000                  		bsr.w	DisplaySprite
000079E0 6000 0000                  		bra.w	Obj11_ChkDel
000079E4                            
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            ; Subroutine allowing Sonic to walk off a bridge
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            
000079E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E4                            
000079E4                            
000079E4                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079E4 7200                       		moveq	#0,d1
000079E6 1228 0028                  		move.b	$28(a0),d1
000079EA E749                       		lsl.w	#3,d1
000079EC 3401                       		move.w	d1,d2
000079EE 5041                       		addq.w	#8,d1
000079F0 6100                       		bsr.s	ExitPlatform2
000079F2 6400                       		bcc.s	locret_75BE
000079F4 E848                       		lsr.w	#4,d0
000079F6 1140 003F                  		move.b	d0,$3F(a0)
000079FA 1028 003E                  		move.b	$3E(a0),d0
000079FE 0C00 0040                  		cmpi.b	#$40,d0
00007A02 6700                       		beq.s	loc_75B6
00007A04 5828 003E                  		addq.b	#4,$3E(a0)
00007A08                            
00007A08                            loc_75B6:
00007A08 6100 0000                  		bsr.w	Obj11_Bend
00007A0C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A10                            
00007A10                            locret_75BE:
00007A10 4E75                       		rts	
00007A12                            ; End of function Obj11_WalkOff
00007A12                            
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            
00007A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A12                            
00007A12                            
00007A12                            ExitPlatform:
00007A12 3401                       		move.w	d1,d2
00007A14                            
00007A14                            ExitPlatform2:
00007A14 D442                       		add.w	d2,d2
00007A16 43F8 D000                  		lea	($FFFFD000).w,a1
00007A1A 0829 0001 0022             		btst	#1,$22(a1)
00007A20 6600                       		bne.s	loc_75E0
00007A22 3029 0008                  		move.w	8(a1),d0
00007A26 9068 0008                  		sub.w	8(a0),d0
00007A2A D041                       		add.w	d1,d0
00007A2C 6B00                       		bmi.s	loc_75E0
00007A2E B042                       		cmp.w	d2,d0
00007A30 6500                       		bcs.s	locret_75F2
00007A32                            
00007A32                            loc_75E0:
00007A32 08A9 0003 0022             		bclr	#3,$22(a1)
00007A38 117C 0002 0024             		move.b	#2,$24(a0)
00007A3E 08A8 0003 0022             		bclr	#3,$22(a0)
00007A44                            
00007A44                            locret_75F2:
00007A44 4E75                       		rts	
00007A46                            ; End of function ExitPlatform
00007A46                            
00007A46                            
00007A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A46                            
00007A46                            
00007A46                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A46 7000                       		moveq	#0,d0
00007A48 1028 003F                  		move.b	$3F(a0),d0
00007A4C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A50 ED48                       		lsl.w	#6,d0
00007A52 0680 00FF D000             		addi.l	#$FFD000,d0
00007A58 2440                       		movea.l	d0,a2
00007A5A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A5E 302A 000C                  		move.w	$C(a2),d0
00007A62 5140                       		subq.w	#8,d0
00007A64 7200                       		moveq	#0,d1
00007A66 1229 0016                  		move.b	$16(a1),d1
00007A6A 9041                       		sub.w	d1,d0
00007A6C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A70 4E75                       		rts	
00007A72                            ; End of function Obj11_MoveSonic
00007A72                            
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A72 1028 003E                  		move.b	$3E(a0),d0
00007A76 6100 B1AA                  		bsr.w	CalcSine
00007A7A 3800                       		move.w	d0,d4
00007A7C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A82 7000                       		moveq	#0,d0
00007A84 1028 0028                  		move.b	$28(a0),d0
00007A88 E948                       		lsl.w	#4,d0
00007A8A 7600                       		moveq	#0,d3
00007A8C 1628 003F                  		move.b	$3F(a0),d3
00007A90 3403                       		move.w	d3,d2
00007A92 D640                       		add.w	d0,d3
00007A94 7A00                       		moveq	#0,d5
00007A96 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007A9C 1A35 3000                  		move.b	(a5,d3.w),d5
00007AA0 0243 000F                  		andi.w	#$F,d3
00007AA4 E94B                       		lsl.w	#4,d3
00007AA6 47F4 3000                  		lea	(a4,d3.w),a3
00007AAA 45E8 0029                  		lea	$29(a0),a2
00007AAE                            
00007AAE                            loc_765C:
00007AAE 7000                       		moveq	#0,d0
00007AB0 101A                       		move.b	(a2)+,d0
00007AB2 ED48                       		lsl.w	#6,d0
00007AB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007ABA 2240                       		movea.l	d0,a1
00007ABC 7000                       		moveq	#0,d0
00007ABE 101B                       		move.b	(a3)+,d0
00007AC0 5240                       		addq.w	#1,d0
00007AC2 C0C5                       		mulu.w	d5,d0
00007AC4 C0C4                       		mulu.w	d4,d0
00007AC6 4840                       		swap	d0
00007AC8 D069 003C                  		add.w	$3C(a1),d0
00007ACC 3340 000C                  		move.w	d0,$C(a1)
00007AD0 51CA FFDC                  		dbf	d2,loc_765C
00007AD4 7000                       		moveq	#0,d0
00007AD6 1028 0028                  		move.b	$28(a0),d0
00007ADA 7600                       		moveq	#0,d3
00007ADC 1628 003F                  		move.b	$3F(a0),d3
00007AE0 5203                       		addq.b	#1,d3
00007AE2 9600                       		sub.b	d0,d3
00007AE4 4403                       		neg.b	d3
00007AE6 6B00                       		bmi.s	locret_76CA
00007AE8 3403                       		move.w	d3,d2
00007AEA E94B                       		lsl.w	#4,d3
00007AEC 47F4 3000                  		lea	(a4,d3.w),a3
00007AF0 D6C2                       		adda.w	d2,a3
00007AF2 5342                       		subq.w	#1,d2
00007AF4 6500                       		bcs.s	locret_76CA
00007AF6                            
00007AF6                            loc_76A4:
00007AF6 7000                       		moveq	#0,d0
00007AF8 101A                       		move.b	(a2)+,d0
00007AFA ED48                       		lsl.w	#6,d0
00007AFC 0680 00FF D000             		addi.l	#$FFD000,d0
00007B02 2240                       		movea.l	d0,a1
00007B04 7000                       		moveq	#0,d0
00007B06 1023                       		move.b	-(a3),d0
00007B08 5240                       		addq.w	#1,d0
00007B0A C0C5                       		mulu.w	d5,d0
00007B0C C0C4                       		mulu.w	d4,d0
00007B0E 4840                       		swap	d0
00007B10 D069 003C                  		add.w	$3C(a1),d0
00007B14 3340 000C                  		move.w	d0,$C(a1)
00007B18 51CA FFDC                  		dbf	d2,loc_76A4
00007B1C                            
00007B1C                            locret_76CA:
00007B1C 4E75                       		rts	
00007B1E                            ; End of function Obj11_Bend
00007B1E                            
00007B1E                            ; ===========================================================================
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            ; GHZ bridge-bending data
00007B1E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C2E                            		even
00007C2E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D2E                            		even
00007D2E                            
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D2E 3028 0008                  		move.w	8(a0),d0
00007D32 0240 FF80                  		andi.w	#$FF80,d0
00007D36 3238 F700                  		move.w	($FFFFF700).w,d1
00007D3A 0441 0080                  		subi.w	#$80,d1
00007D3E 0241 FF80                  		andi.w	#$FF80,d1
00007D42 9041                       		sub.w	d1,d0
00007D44 0C40 0280                  		cmpi.w	#$280,d0
00007D48 6200 0000                  		bhi.w	Obj11_DelAll
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D4E 7400                       		moveq	#0,d2
00007D50 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D54 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D56 5302                       		subq.b	#1,d2		; subtract 1
00007D58 6500                       		bcs.s	Obj11_Delete
00007D5A                            
00007D5A                            Obj11_DelLoop:
00007D5A 7000                       		moveq	#0,d0
00007D5C 101A                       		move.b	(a2)+,d0
00007D5E ED48                       		lsl.w	#6,d0
00007D60 0680 00FF D000             		addi.l	#$FFD000,d0
00007D66 2240                       		movea.l	d0,a1
00007D68 B048                       		cmp.w	a0,d0
00007D6A 6700                       		beq.s	loc_791E
00007D6C 6100 0000                  		bsr.w	DeleteObject2
00007D70                            
00007D70                            loc_791E:
00007D70 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D74                            
00007D74                            Obj11_Delete:
00007D74 6100 0000                  		bsr.w	DeleteObject
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Obj11_Delete2:				; XREF: Obj11_Index
00007D7A 6100 0000                  		bsr.w	DeleteObject
00007D7E 4E75                       		rts	
00007D80                            ; ===========================================================================
00007D80                            
00007D80                            Obj11_Display2:				; XREF: Obj11_Index
00007D80 6100 0000                  		bsr.w	DisplaySprite
00007D84 4E75                       		rts	
00007D86                            ; ===========================================================================
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            Map_obj11:
00007D86                            	include "_maps\obj11.asm"
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D8A 0000                       		dc.w byte_794B-Map_obj11
00007D8C 01                         byte_793A:	dc.b 1
00007D8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D92 02                         byte_7940:	dc.b 2
00007D93 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007D98 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007D9D 01                         byte_794B:	dc.b 1
00007D9E FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007DA4                            ;	    - spiked ball on a chain (SBZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj15:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007DB6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007DBA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007DBE 0000                       		dc.w Obj15_Action-Obj15_Index
00007DC0                            ; ===========================================================================
00007DC0                            
00007DC0                            Obj15_Main:				; XREF: Obj15_Index
00007DC0 5428 0024                  		addq.b	#2,$24(a0)
00007DC4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007DCC 317C 4380 0002             		move.w	#$4380,2(a0)
00007DD2 117C 0004 0001             		move.b	#4,1(a0)
00007DD8 117C 0003 0018             		move.b	#3,$18(a0)
00007DDE 117C 0018 0019             		move.b	#$18,$19(a0)
00007DE4 117C 0008 0016             		move.b	#8,$16(a0)
00007DEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DF0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DF6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007DFC 6600                       		bne.s	Obj15_NotSLZ
00007DFE 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E06 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E0C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E12 117C 0010 0016             		move.b	#$10,$16(a0)
00007E18 117C 0099 0020             		move.b	#$99,$20(a0)
00007E1E                            
00007E1E                            Obj15_NotSLZ:
00007E1E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E24 6600                       		bne.s	Obj15_SetLength
00007E26 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E2E 317C 0391 0002             		move.w	#$391,2(a0)
00007E34 117C 0018 0019             		move.b	#$18,$19(a0)
00007E3A 117C 0018 0016             		move.b	#$18,$16(a0)
00007E40 117C 0086 0020             		move.b	#$86,$20(a0)
00007E46 117C 000C 0024             		move.b	#$C,$24(a0)
00007E4C                            
00007E4C                            Obj15_SetLength:
00007E4C 1810                       		move.b	0(a0),d4
00007E4E 7200                       		moveq	#0,d1
00007E50 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E54 1212                       		move.b	(a2),d1		; move a2 to d1
00007E56 3F01                       		move.w	d1,-(sp)
00007E58 0241 000F                  		andi.w	#$F,d1
00007E5C 14FC 0000                  		move.b	#0,(a2)+
00007E60 3601                       		move.w	d1,d3
00007E62 E94B                       		lsl.w	#4,d3
00007E64 5003                       		addq.b	#8,d3
00007E66 1143 003C                  		move.b	d3,$3C(a0)
00007E6A 5103                       		subq.b	#8,d3
00007E6C 4A28 001A                  		tst.b	$1A(a0)
00007E70 6700                       		beq.s	Obj15_MakeChain
00007E72 5003                       		addq.b	#8,d3
00007E74 5341                       		subq.w	#1,d1
00007E76                            
00007E76                            Obj15_MakeChain:
00007E76 6100 0000                  		bsr.w	SingleObjLoad
00007E7A 6600                       		bne.s	loc_7A92
00007E7C 5228 0028                  		addq.b	#1,$28(a0)
00007E80 3A09                       		move.w	a1,d5
00007E82 0445 D000                  		subi.w	#-$3000,d5
00007E86 EC4D                       		lsr.w	#6,d5
00007E88 0245 007F                  		andi.w	#$7F,d5
00007E8C 14C5                       		move.b	d5,(a2)+
00007E8E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E94 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E96 2368 0004 0004             		move.l	4(a0),4(a1)
00007E9C 3368 0002 0002             		move.w	2(a0),2(a1)
00007EA2 08A9 0006 0002             		bclr	#6,2(a1)
00007EA8 137C 0004 0001             		move.b	#4,1(a1)
00007EAE 137C 0004 0018             		move.b	#4,$18(a1)
00007EB4 137C 0008 0019             		move.b	#8,$19(a1)
00007EBA 137C 0001 001A             		move.b	#1,$1A(a1)
00007EC0 1343 003C                  		move.b	d3,$3C(a1)
00007EC4 0403 0010                  		subi.b	#$10,d3
00007EC8 6400                       		bcc.s	loc_7A8E
00007ECA 137C 0002 001A             		move.b	#2,$1A(a1)
00007ED0 137C 0003 0018             		move.b	#3,$18(a1)
00007ED6 08E9 0006 0002             		bset	#6,2(a1)
00007EDC                            
00007EDC                            loc_7A8E:
00007EDC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EE0                            
00007EE0                            loc_7A92:
00007EE0 3A08                       		move.w	a0,d5
00007EE2 0445 D000                  		subi.w	#-$3000,d5
00007EE6 EC4D                       		lsr.w	#6,d5
00007EE8 0245 007F                  		andi.w	#$7F,d5
00007EEC 14C5                       		move.b	d5,(a2)+
00007EEE 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EF4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007EFA 321F                       		move.w	(sp)+,d1
00007EFC 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F00 6700                       		beq.s	loc_7AD4	; if not, branch
00007F02 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F0A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F10 117C 0001 001A             		move.b	#1,$1A(a0)
00007F16 117C 0002 0018             		move.b	#2,$18(a0)
00007F1C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F22                            
00007F22                            loc_7AD4:
00007F22 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F28 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F2A                            
00007F2A                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F2A 7200                       		moveq	#0,d1
00007F2C 1228 0019                  		move.b	$19(a0),d1
00007F30 7600                       		moveq	#0,d3
00007F32 1628 0016                  		move.b	$16(a0),d3
00007F36 6100 FA76                  		bsr.w	Obj15_Solid
00007F3A                            
00007F3A                            Obj15_Action:				; XREF: Obj15_Index
00007F3A 6100 0000                  		bsr.w	Obj15_Move
00007F3E 6100 0000                  		bsr.w	DisplaySprite
00007F42 6000 0000                  		bra.w	Obj15_ChkDel
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj15_Action2:				; XREF: Obj15_Index
00007F46 7200                       		moveq	#0,d1
00007F48 1228 0019                  		move.b	$19(a0),d1
00007F4C 6100 FAC4                  		bsr.w	ExitPlatform
00007F50 3F28 0008                  		move.w	8(a0),-(sp)
00007F54 6100 0000                  		bsr.w	Obj15_Move
00007F58 341F                       		move.w	(sp)+,d2
00007F5A 7600                       		moveq	#0,d3
00007F5C 1628 0016                  		move.b	$16(a0),d3
00007F60 5203                       		addq.b	#1,d3
00007F62 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F66 6100 0000                  		bsr.w	DisplaySprite
00007F6A 6000 0000                  		bra.w	Obj15_ChkDel
00007F6E                            
00007F6E 4E75                       		rts
00007F70                            
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Subroutine to	change Sonic's position with a platform
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            
00007F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F70                            
00007F70                            
00007F70                            MvSonicOnPtfm:
00007F70 43F8 D000                  		lea	($FFFFD000).w,a1
00007F74 3028 000C                  		move.w	$C(a0),d0
00007F78 9043                       		sub.w	d3,d0
00007F7A 6000                       		bra.s	MvSonic2
00007F7C                            ; End of function MvSonicOnPtfm
00007F7C                            
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            ; Subroutine to	change Sonic's position with a platform
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            
00007F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            
00007F7C                            MvSonicOnPtfm2:
00007F7C 43F8 D000                  		lea	($FFFFD000).w,a1
00007F80 3028 000C                  		move.w	$C(a0),d0
00007F84 0440 0009                  		subi.w	#9,d0
00007F88                            
00007F88                            MvSonic2:
00007F88 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F8C 6B00                       		bmi.s	locret_7B62
00007F8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F94 6400                       		bcc.s	locret_7B62
00007F96 4A78 FE08                  		tst.w	($FFFFFE08).w
00007F9A 6600                       		bne.s	locret_7B62
00007F9C 7200                       		moveq	#0,d1
00007F9E 1229 0016                  		move.b	$16(a1),d1
00007FA2 9041                       		sub.w	d1,d0
00007FA4 3340 000C                  		move.w	d0,$C(a1)
00007FA8 9468 0008                  		sub.w	8(a0),d2
00007FAC 9569 0008                  		sub.w	d2,8(a1)
00007FB0                            
00007FB0                            locret_7B62:
00007FB0 4E75                       		rts	
00007FB2                            ; End of function MvSonicOnPtfm2
00007FB2                            
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007FB2 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007FB6 323C 0080                  		move.w	#$80,d1
00007FBA 0828 0000 0022             		btst	#0,$22(a0)
00007FC0 6700                       		beq.s	loc_7B78
00007FC2 4440                       		neg.w	d0
00007FC4 D041                       		add.w	d1,d0
00007FC6                            
00007FC6                            loc_7B78:
00007FC6 6000                       		bra.s	Obj15_Move2
00007FC8                            ; End of function Obj15_Move
00007FC8                            
00007FC8                            
00007FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC8                            
00007FC8                            
00007FC8                            Obj48_Move:				; XREF: Obj48_Display2
00007FC8 4A28 003D                  		tst.b	$3D(a0)
00007FCC 6600                       		bne.s	loc_7B9C
00007FCE 3028 003E                  		move.w	$3E(a0),d0
00007FD2 5040                       		addq.w	#8,d0
00007FD4 3140 003E                  		move.w	d0,$3E(a0)
00007FD8 D168 0026                  		add.w	d0,$26(a0)
00007FDC 0C40 0200                  		cmpi.w	#$200,d0
00007FE0 6600                       		bne.s	loc_7BB6
00007FE2 117C 0001 003D             		move.b	#1,$3D(a0)
00007FE8 6000                       		bra.s	loc_7BB6
00007FEA                            ; ===========================================================================
00007FEA                            
00007FEA                            loc_7B9C:
00007FEA 3028 003E                  		move.w	$3E(a0),d0
00007FEE 5140                       		subq.w	#8,d0
00007FF0 3140 003E                  		move.w	d0,$3E(a0)
00007FF4 D168 0026                  		add.w	d0,$26(a0)
00007FF8 0C40 FE00                  		cmpi.w	#-$200,d0
00007FFC 6600                       		bne.s	loc_7BB6
00007FFE 117C 0000 003D             		move.b	#0,$3D(a0)
00008004                            
00008004                            loc_7BB6:
00008004 1028 0026                  		move.b	$26(a0),d0
00008008                            ; End of function Obj48_Move
00008008                            
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008008 6100 AC18                  		bsr.w	CalcSine
0000800C 3428 0038                  		move.w	$38(a0),d2
00008010 3628 003A                  		move.w	$3A(a0),d3
00008014 45E8 0028                  		lea	$28(a0),a2
00008018 7C00                       		moveq	#0,d6
0000801A 1C1A                       		move.b	(a2)+,d6
0000801C                            
0000801C                            loc_7BCE:
0000801C 7800                       		moveq	#0,d4
0000801E 181A                       		move.b	(a2)+,d4
00008020 ED4C                       		lsl.w	#6,d4
00008022 0684 00FF D000             		addi.l	#$FFD000,d4
00008028 2244                       		movea.l	d4,a1
0000802A 7800                       		moveq	#0,d4
0000802C 1829 003C                  		move.b	$3C(a1),d4
00008030 2A04                       		move.l	d4,d5
00008032 C9C0                       		muls.w	d0,d4
00008034 E084                       		asr.l	#8,d4
00008036 CBC1                       		muls.w	d1,d5
00008038 E085                       		asr.l	#8,d5
0000803A D842                       		add.w	d2,d4
0000803C DA43                       		add.w	d3,d5
0000803E 3344 000C                  		move.w	d4,$C(a1)
00008042 3345 0008                  		move.w	d5,8(a1)
00008046 51CE FFD4                  		dbf	d6,loc_7BCE
0000804A 4E75                       		rts	
0000804C                            ; End of function Obj15_Move2
0000804C                            
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000804C 3028 003A                  		move.w	$3A(a0),d0
00008050 0240 FF80                  		andi.w	#$FF80,d0
00008054 3238 F700                  		move.w	($FFFFF700).w,d1
00008058 0441 0080                  		subi.w	#$80,d1
0000805C 0241 FF80                  		andi.w	#$FF80,d1
00008060 9041                       		sub.w	d1,d0
00008062 0C40 0280                  		cmpi.w	#$280,d0
00008066 6200 0000                  		bhi.w	Obj15_DelAll
0000806A 4E75                       		rts	
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000806C 7400                       		moveq	#0,d2
0000806E 45E8 0028                  		lea	$28(a0),a2
00008072 141A                       		move.b	(a2)+,d2
00008074                            
00008074                            Obj15_DelLoop:
00008074 7000                       		moveq	#0,d0
00008076 101A                       		move.b	(a2)+,d0
00008078 ED48                       		lsl.w	#6,d0
0000807A 0680 00FF D000             		addi.l	#$FFD000,d0
00008080 2240                       		movea.l	d0,a1
00008082 6100 0000                  		bsr.w	DeleteObject2
00008086 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000808A 4E75                       		rts	
0000808C                            ; ===========================================================================
0000808C                            
0000808C                            Obj15_Delete:				; XREF: Obj15_Index
0000808C 6100 0000                  		bsr.w	DeleteObject
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            
00008092                            Obj15_Display:				; XREF: Obj15_Index
00008092 6000 0000                  		bra.w	DisplaySprite
00008096                            ; ===========================================================================
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096                            Map_obj15:
00008096                            	include "_maps\obj15ghz.asm"
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096 0000                       		dc.w byte_7C4E-Map_obj15
00008098 0000                       		dc.w byte_7C59-Map_obj15
0000809A 0000                       		dc.w byte_7C5F-Map_obj15
0000809C 02                         byte_7C4E:	dc.b 2
0000809D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000080A2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000080A7 01                         byte_7C59:	dc.b 1
000080A8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080AD 01                         byte_7C5F:	dc.b 1
000080AE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000080B4 00                         		even
000080B4 00                         		even
000080B4                            
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            Map_obj15a:
000080B4                            	include "_maps\obj15slz.asm"
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4 0000                       		dc.w byte_7C6C-Map_obj15a
000080B6 0000                       		dc.w byte_7C95-Map_obj15a
000080B8 0000                       		dc.w byte_7C9B-Map_obj15a
000080BA 08                         byte_7C6C:	dc.b 8
000080BB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000080C0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000080C5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000080CA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000080CF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080D4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080D9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080DE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080E3 01                         byte_7C95:	dc.b 1
000080E4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080E9 01                         byte_7C9B:	dc.b 1
000080EA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080F0 00                         		even
000080F0 00                         		even
000080F0                            
000080F0                            ; ===========================================================================
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            
000080F0                            Obj17:					; XREF: Obj_Index
000080F0 7000                       		moveq	#0,d0
000080F2 1028 0024                  		move.b	$24(a0),d0
000080F6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000080FA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000080FE                            ; ===========================================================================
000080FE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008100 0000                       		dc.w Obj17_Action-Obj17_Index
00008102 0000                       		dc.w Obj17_Action-Obj17_Index
00008104 0000                       		dc.w Obj17_Delete-Obj17_Index
00008106 0000                       		dc.w Obj17_Display-Obj17_Index
00008108                            ; ===========================================================================
00008108                            
00008108                            Obj17_Main:				; XREF: Obj17_Index
00008108 5428 0024                  		addq.b	#2,$24(a0)
0000810C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008114 317C 4398 0002             		move.w	#$4398,2(a0)
0000811A 117C 0007 0022             		move.b	#7,$22(a0)
00008120 117C 0004 0001             		move.b	#4,1(a0)
00008126 117C 0003 0018             		move.b	#3,$18(a0)
0000812C 117C 0008 0019             		move.b	#8,$19(a0)
00008132 3428 000C                  		move.w	$C(a0),d2
00008136 3628 0008                  		move.w	8(a0),d3
0000813A 1810                       		move.b	0(a0),d4
0000813C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008140 7200                       		moveq	#0,d1
00008142 1212                       		move.b	(a2),d1		; move a2 to d1
00008144 14FC 0000                  		move.b	#0,(a2)+
00008148 3001                       		move.w	d1,d0
0000814A E248                       		lsr.w	#1,d0
0000814C E948                       		lsl.w	#4,d0
0000814E 9640                       		sub.w	d0,d3
00008150 5501                       		subq.b	#2,d1
00008152 6500                       		bcs.s	Obj17_Action
00008154 7C00                       		moveq	#0,d6
00008156                            
00008156                            Obj17_MakeHelix:
00008156 6100 0000                  		bsr.w	SingleObjLoad
0000815A 6600                       		bne.s	Obj17_Action
0000815C 5228 0028                  		addq.b	#1,$28(a0)
00008160 3A09                       		move.w	a1,d5
00008162 0445 D000                  		subi.w	#$D000,d5
00008166 EC4D                       		lsr.w	#6,d5
00008168 0245 007F                  		andi.w	#$7F,d5
0000816C 14C5                       		move.b	d5,(a2)+
0000816E 137C 0008 0024             		move.b	#8,$24(a1)
00008174 1284                       		move.b	d4,0(a1)
00008176 3342 000C                  		move.w	d2,$C(a1)
0000817A 3343 0008                  		move.w	d3,8(a1)
0000817E 2368 0004 0004             		move.l	4(a0),4(a1)
00008184 337C 4398 0002             		move.w	#$4398,2(a1)
0000818A 137C 0004 0001             		move.b	#4,1(a1)
00008190 137C 0003 0018             		move.b	#3,$18(a1)
00008196 137C 0008 0019             		move.b	#8,$19(a1)
0000819C 1346 003E                  		move.b	d6,$3E(a1)
000081A0 5206                       		addq.b	#1,d6
000081A2 0206 0007                  		andi.b	#7,d6
000081A6 0643 0010                  		addi.w	#$10,d3
000081AA B668 0008                  		cmp.w	8(a0),d3
000081AE 6600                       		bne.s	loc_7D78
000081B0 1146 003E                  		move.b	d6,$3E(a0)
000081B4 5206                       		addq.b	#1,d6
000081B6 0206 0007                  		andi.b	#7,d6
000081BA 0643 0010                  		addi.w	#$10,d3
000081BE 5228 0028                  		addq.b	#1,$28(a0)
000081C2                            
000081C2                            loc_7D78:
000081C2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000081C6                            
000081C6                            Obj17_Action:				; XREF: Obj17_Index
000081C6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000081CA 6100 0000                  		bsr.w	DisplaySprite
000081CE 6000 0000                  		bra.w	Obj17_ChkDel
000081D2                            
000081D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081D2                            
000081D2                            
000081D2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081D2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081D6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081DC D028 003E                  		add.b	$3E(a0),d0
000081E0 0200 0007                  		andi.b	#7,d0
000081E4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081E8 6600                       		bne.s	locret_7DA6
000081EA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081F0                            
000081F0                            locret_7DA6:
000081F0 4E75                       		rts	
000081F2                            ; End of function Obj17_RotateSpikes
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Obj17_ChkDel:				; XREF: Obj17_Action
000081F2 3028 0008                  		move.w	8(a0),d0
000081F6 0240 FF80                  		andi.w	#$FF80,d0
000081FA 3238 F700                  		move.w	($FFFFF700).w,d1
000081FE 0441 0080                  		subi.w	#$80,d1
00008202 0241 FF80                  		andi.w	#$FF80,d1
00008206 9041                       		sub.w	d1,d0
00008208 0C40 0280                  		cmpi.w	#$280,d0
0000820C 6200 0000                  		bhi.w	Obj17_DelAll
00008210 4E75                       		rts	
00008212                            ; ===========================================================================
00008212                            
00008212                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008212 7400                       		moveq	#0,d2
00008214 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008218 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000821A 5502                       		subq.b	#2,d2
0000821C 6500                       		bcs.s	Obj17_Delete
0000821E                            
0000821E                            Obj17_DelLoop:
0000821E 7000                       		moveq	#0,d0
00008220 101A                       		move.b	(a2)+,d0
00008222 ED48                       		lsl.w	#6,d0
00008224 0680 00FF D000             		addi.l	#$FFD000,d0
0000822A 2240                       		movea.l	d0,a1
0000822C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008230 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008234                            
00008234                            Obj17_Delete:				; XREF: Obj17_Index
00008234 6100 0000                  		bsr.w	DeleteObject
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            
0000823A                            Obj17_Display:				; XREF: Obj17_Index
0000823A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000823E 6000 0000                  		bra.w	DisplaySprite
00008242                            ; ===========================================================================
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242                            Map_obj17:
00008242                            	include "_maps\obj17.asm"
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008246 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000824A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000824E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008252 01                         byte_7E08:	dc.b 1
00008253 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008258 01                         byte_7E0E:	dc.b 1
00008259 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000825E 01                         byte_7E14:	dc.b 1
0000825F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008264 01                         byte_7E1A:	dc.b 1
00008265 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000826A 01                         byte_7E20:	dc.b 1
0000826B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008270 01                         byte_7E26:	dc.b 1
00008271 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008276 01                         byte_7E2C:	dc.b 1
00008277 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000827C                            		even
0000827C                            		even
0000827C                            
0000827C                            ; ===========================================================================
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            
0000827C                            Obj18:					; XREF: Obj_Index
0000827C 7000                       		moveq	#0,d0
0000827E 1028 0024                  		move.b	$24(a0),d0
00008282 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008286 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000828A                            ; ===========================================================================
0000828A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000828C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000828E 0000                       		dc.w Obj18_Action2-Obj18_Index
00008290 0000                       		dc.w Obj18_Delete-Obj18_Index
00008292 0000                       		dc.w Obj18_Action-Obj18_Index
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj18_Main:				; XREF: Obj18_Index
00008294 5428 0024                  		addq.b	#2,$24(a0)
00008298 317C 4000 0002             		move.w	#$4000,2(a0)
0000829E 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000082A6 117C 0020 0019             		move.b	#$20,$19(a0)
000082AC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000082B2 6600                       		bne.s	Obj18_NotSYZ
000082B4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000082BC 117C 0020 0019             		move.b	#$20,$19(a0)
000082C2                            
000082C2                            Obj18_NotSYZ:
000082C2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000082C8 6600                       		bne.s	Obj18_NotSLZ
000082CA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082D2 117C 0020 0019             		move.b	#$20,$19(a0)
000082D8 317C 4000 0002             		move.w	#$4000,2(a0)
000082DE 117C 0003 0028             		move.b	#3,$28(a0)
000082E4                            
000082E4                            Obj18_NotSLZ:
000082E4 117C 0004 0001             		move.b	#4,1(a0)
000082EA 117C 0004 0018             		move.b	#4,$18(a0)
000082F0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000082FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00008302 317C 0080 0026             		move.w	#$80,$26(a0)
00008308 7200                       		moveq	#0,d1
0000830A 1028 0028                  		move.b	$28(a0),d0
0000830E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008312 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008314 5201                       		addq.b	#1,d1		; use frame #1
00008316 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000831C                            
0000831C                            Obj18_SetFrame:
0000831C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008320                            
00008320                            Obj18_Solid:				; XREF: Obj18_Index
00008320 4A28 0038                  		tst.b	$38(a0)
00008324 6700                       		beq.s	loc_7EE0
00008326 5928 0038                  		subq.b	#4,$38(a0)
0000832A                            
0000832A                            loc_7EE0:
0000832A 7200                       		moveq	#0,d1
0000832C 1228 0019                  		move.b	$19(a0),d1
00008330 6100 F56C                  		bsr.w	PlatformObject
00008334                            
00008334                            Obj18_Action:				; XREF: Obj18_Index
00008334 6100 0000                  		bsr.w	Obj18_Move
00008338 6100 0000                  		bsr.w	Obj18_Nudge
0000833C 6100 0000                  		bsr.w	DisplaySprite
00008340 6000 0000                  		bra.w	Obj18_ChkDel
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj18_Action2:				; XREF: Obj18_Index
00008344 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000834A 6700                       		beq.s	loc_7F06
0000834C 5828 0038                  		addq.b	#4,$38(a0)
00008350                            
00008350                            loc_7F06:
00008350 7200                       		moveq	#0,d1
00008352 1228 0019                  		move.b	$19(a0),d1
00008356 6100 F6BA                  		bsr.w	ExitPlatform
0000835A 3F28 0008                  		move.w	8(a0),-(sp)
0000835E 6100 0000                  		bsr.w	Obj18_Move
00008362 6100 0000                  		bsr.w	Obj18_Nudge
00008366 341F                       		move.w	(sp)+,d2
00008368 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000836C 6100 0000                  		bsr.w	DisplaySprite
00008370 6000 0000                  		bra.w	Obj18_ChkDel
00008374                            
00008374 4E75                       		rts
00008376                            
00008376                            ; ---------------------------------------------------------------------------
00008376                            ; Subroutine to	move platform slightly when you	stand on it
00008376                            ; ---------------------------------------------------------------------------
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008376 1028 0038                  		move.b	$38(a0),d0
0000837A 6100 A8A6                  		bsr.w	CalcSine
0000837E 323C 0400                  		move.w	#$400,d1
00008382 C1C1                       		muls.w	d1,d0
00008384 4840                       		swap	d0
00008386 D068 002C                  		add.w	$2C(a0),d0
0000838A 3140 000C                  		move.w	d0,$C(a0)
0000838E 4E75                       		rts	
00008390                            ; End of function Obj18_Nudge
00008390                            
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Subroutine to	move platforms
00008390                            ; ---------------------------------------------------------------------------
00008390                            
00008390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008390                            
00008390                            
00008390                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008390 7000                       		moveq	#0,d0
00008392 1028 0028                  		move.b	$28(a0),d0
00008396 0240 000F                  		andi.w	#$F,d0
0000839A D040                       		add.w	d0,d0
0000839C 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000083A0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000083A4                            ; End of function Obj18_Move
000083A4                            
000083A4                            ; ===========================================================================
000083A4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000083A8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000083AC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000083B0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000083B4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000083B8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000083BC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Obj18_Type00:
000083BE 4E75                       		rts			; platform 00 doesn't move
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj18_Type05:
000083C0 3028 0032                  		move.w	$32(a0),d0
000083C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083C8 4401                       		neg.b	d1		; reverse platform-motion
000083CA 0601 0040                  		addi.b	#$40,d1
000083CE 6000                       		bra.s	Obj18_01_Move
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Obj18_Type01:
000083D0 3028 0032                  		move.w	$32(a0),d0
000083D4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083D8 0401 0040                  		subi.b	#$40,d1
000083DC                            
000083DC                            Obj18_01_Move:
000083DC 4881                       		ext.w	d1
000083DE D041                       		add.w	d1,d0
000083E0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083E4 6000 0000                  		bra.w	Obj18_ChgMotion
000083E8                            ; ===========================================================================
000083E8                            
000083E8                            Obj18_Type0C:
000083E8 3028 0034                  		move.w	$34(a0),d0
000083EC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083F0 4401                       		neg.b	d1		; reverse platform-motion
000083F2 0601 0030                  		addi.b	#$30,d1
000083F6 6000                       		bra.s	Obj18_02_Move
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj18_Type0B:
000083F8 3028 0034                  		move.w	$34(a0),d0
000083FC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008400 0401 0030                  		subi.b	#$30,d1
00008404 6000                       		bra.s	Obj18_02_Move
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj18_Type06:
00008406 3028 0034                  		move.w	$34(a0),d0
0000840A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000840E 4401                       		neg.b	d1		; reverse platform-motion
00008410 0601 0040                  		addi.b	#$40,d1
00008414 6000                       		bra.s	Obj18_02_Move
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj18_Type02:
00008416 3028 0034                  		move.w	$34(a0),d0
0000841A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000841E 0401 0040                  		subi.b	#$40,d1
00008422                            
00008422                            Obj18_02_Move:
00008422 4881                       		ext.w	d1
00008424 D041                       		add.w	d1,d0
00008426 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000842A 6000 0000                  		bra.w	Obj18_ChgMotion
0000842E                            ; ===========================================================================
0000842E                            
0000842E                            Obj18_Type03:
0000842E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008432 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008434 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000843A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000843C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008442                            
00008442                            Obj18_03_NoMove:
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj18_03_Wait:
00008444 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008448 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000844A 317C 0020 003A             		move.w	#32,$3A(a0)
00008450 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj18_Type04:
00008456 4A68 003A                  		tst.w	$3A(a0)
0000845A 6700                       		beq.s	loc_8048
0000845C 5368 003A                  		subq.w	#1,$3A(a0)
00008460 6600                       		bne.s	loc_8048
00008462 0828 0003 0022             		btst	#3,$22(a0)
00008468 6700                       		beq.s	loc_8042
0000846A 08E9 0001 0022             		bset	#1,$22(a1)
00008470 08A9 0003 0022             		bclr	#3,$22(a1)
00008476 137C 0002 0024             		move.b	#2,$24(a1)
0000847C 08A8 0003 0022             		bclr	#3,$22(a0)
00008482 4228 0025                  		clr.b	$25(a0)
00008486 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000848C                            
0000848C                            loc_8042:
0000848C 117C 0008 0024             		move.b	#8,$24(a0)
00008492                            
00008492                            loc_8048:
00008492 2628 002C                  		move.l	$2C(a0),d3
00008496 3028 0012                  		move.w	$12(a0),d0
0000849A 48C0                       		ext.l	d0
0000849C E180                       		asl.l	#8,d0
0000849E D680                       		add.l	d0,d3
000084A0 2143 002C                  		move.l	d3,$2C(a0)
000084A4 0668 0038 0012             		addi.w	#$38,$12(a0)
000084AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000084AE 0640 00E0                  		addi.w	#$E0,d0
000084B2 B068 002C                  		cmp.w	$2C(a0),d0
000084B6 6400                       		bcc.s	locret_8074
000084B8 117C 0006 0024             		move.b	#6,$24(a0)
000084BE                            
000084BE                            locret_8074:
000084BE 4E75                       		rts	
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj18_Type07:
000084C0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084C4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000084C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000084CA 7000                       		moveq	#0,d0
000084CC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000084D0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084D2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084D6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084DE                            
000084DE                            Obj18_07_NoMove:
000084DE 4E75                       		rts	
000084E0                            ; ===========================================================================
000084E0                            
000084E0                            Obj18_07_Wait:
000084E0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084E4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084E6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084EA 4E75                       		rts	
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            Obj18_Type08:
000084EC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084F0 3028 0034                  		move.w	$34(a0),d0
000084F4 0440 0200                  		subi.w	#$200,d0
000084F8 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000084FC 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000084FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008502                            
00008502                            Obj18_08_NoStop:
00008502 4E75                       		rts	
00008504                            ; ===========================================================================
00008504                            
00008504                            Obj18_Type0A:
00008504 3028 0034                  		move.w	$34(a0),d0
00008508 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000850C 0401 0040                  		subi.b	#$40,d1
00008510 4881                       		ext.w	d1
00008512 E241                       		asr.w	#1,d1
00008514 D041                       		add.w	d1,d0
00008516 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000851A                            
0000851A                            Obj18_ChgMotion:
0000851A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008520 4E75                       		rts	
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008522 3028 0032                  		move.w	$32(a0),d0
00008526 0240 FF80                  		andi.w	#$FF80,d0
0000852A 3238 F700                  		move.w	($FFFFF700).w,d1
0000852E 0441 0080                  		subi.w	#$80,d1
00008532 0241 FF80                  		andi.w	#$FF80,d1
00008536 9041                       		sub.w	d1,d0
00008538 0C40 0280                  		cmpi.w	#$280,d0
0000853C 6200                       		bhi.s	Obj18_Delete
0000853E 4E75                       		rts	
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_Delete:				; XREF: Obj18_Index
00008540 6000 0000                  		bra.w	DeleteObject
00008544                            ; ===========================================================================
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544                            Map_obj18x:
00008544                            	include "_maps\obj18x.asm"
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544 0000                       		dc.w byte_80FE-Map_obj18x
00008546 0000                       		dc.w byte_8109-Map_obj18x
00008548 02                         byte_80FE:	dc.b 2
00008549 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000854E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008553 0A                         byte_8109:	dc.b $A
00008554 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008559 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000855E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008563 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008568 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000856D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008572 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008577 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000857C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008581 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008586                            		even
00008586                            		even
00008586                            
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586                            Map_obj18:
00008586                            	include "_maps\obj18ghz.asm"
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586 0000                       		dc.w byte_8140-Map_obj18
00008588 0000                       		dc.w byte_8155-Map_obj18
0000858A 04                         byte_8140:	dc.b 4
0000858B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008590 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008595 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000859A F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000859F 0A                         byte_8155:	dc.b $A
000085A0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000085A5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000085AA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000085AF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000085B4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000085B9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000085BE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000085C3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000085C8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000085CD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085D2                            		even
000085D2                            		even
000085D2                            
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            Map_obj18a:
000085D2                            	include "_maps\obj18syz.asm"
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2 0000                       		dc.w byte_818A-Map_obj18a
000085D4 03                         byte_818A:	dc.b 3
000085D5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085DA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085DF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085E4                            		even
000085E4                            		even
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            Map_obj18b:
000085E4                            	include "_maps\obj18slz.asm"
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4 0000                       		dc.w byte_819C-Map_obj18b
000085E6 02                         byte_819C:	dc.b 2
000085E7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085EC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085F2 00                         		even
000085F2 00                         		even
000085F2                            
000085F2                            ; ===========================================================================
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            ; Object 19 - blank
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            
000085F2                            Obj19:					; XREF: Obj_Index
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            Map_obj48:
000085F4                            	include "_maps\obj48.asm"
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000085F8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000085FC 06                         byte_81B2:	dc.b 6
000085FD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008602 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008607 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000860C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008611 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008616 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000861B 04                         byte_81D1:	dc.b 4
0000861C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008621 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008626 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000862B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008630 04                         byte_81E6:	dc.b 4
00008631 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008636 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000863B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008640 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008645 04                         byte_81FB:	dc.b 4
00008646 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000864B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008650 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008655 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000865A                            		even
0000865A                            		even
0000865A                            
0000865A                            ; ===========================================================================
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            ; Object 1A - GHZ collapsing ledge
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            
0000865A                            Obj1A:					; XREF: Obj_Index
0000865A 7000                       		moveq	#0,d0
0000865C 1028 0024                  		move.b	$24(a0),d0
00008660 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008664 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008668                            ; ===========================================================================
00008668 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000866C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008670 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008674                            ; ===========================================================================
00008674                            
00008674                            Obj1A_Main:				; XREF: Obj1A_Index
00008674 5428 0024                  		addq.b	#2,$24(a0)
00008678 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008680 317C 4000 0002             		move.w	#$4000,2(a0)
00008686 0028 0004 0001             		ori.b	#4,1(a0)
0000868C 117C 0004 0018             		move.b	#4,$18(a0)
00008692 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008698 117C 0064 0019             		move.b	#$64,$19(a0)
0000869E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000086A4 117C 0038 0016             		move.b	#$38,$16(a0)
000086AA 08E8 0004 0001             		bset	#4,1(a0)
000086B0                            
000086B0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000086B0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000086B4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000086B6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000086BA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000086BE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086C2                            
000086C2                            Obj1A_Slope:
000086C2 323C 0030                  		move.w	#$30,d1
000086C6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086CC 6100 F2A4                  		bsr.w	SlopeObject
000086D0 6000 0000                  		bra.w	MarkObjGone
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            Obj1A_Touch:				; XREF: Obj1A_Index
000086D4 4A28 0038                  		tst.b	$38(a0)
000086D8 6700 0000                  		beq.w	loc_847A
000086DC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086E2 5328 0038                  		subq.b	#1,$38(a0)
000086E6                            
000086E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E6                            
000086E6                            
000086E6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086E6 323C 0030                  		move.w	#$30,d1
000086EA 6100 F326                  		bsr.w	ExitPlatform
000086EE 323C 0030                  		move.w	#$30,d1
000086F2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086F8 3428 0008                  		move.w	8(a0),d2
000086FC 6100 0000                  		bsr.w	SlopeObject2
00008700 6000 0000                  		bra.w	MarkObjGone
00008704                            ; End of function Obj1A_WalkOff
00008704                            
00008704                            ; ===========================================================================
00008704                            
00008704                            Obj1A_Display:				; XREF: Obj1A_Index
00008704 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008708 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000870A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000870E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008712 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008716 6000 0000                  		bra.w	DisplaySprite
0000871A                            ; ===========================================================================
0000871A                            
0000871A                            loc_82D0:				; XREF: Obj1A_Display
0000871A 5328 0038                  		subq.b	#1,$38(a0)
0000871E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008722 43F8 D000                  		lea	($FFFFD000).w,a1
00008726 0829 0003 0022             		btst	#3,$22(a1)
0000872C 6700                       		beq.s	loc_82FC
0000872E 4A28 0038                  		tst.b	$38(a0)
00008732 6600                       		bne.s	locret_8308
00008734 08A9 0003 0022             		bclr	#3,$22(a1)
0000873A 08A9 0005 0022             		bclr	#5,$22(a1)
00008740 137C 0001 001D             		move.b	#1,$1D(a1)
00008746                            
00008746                            loc_82FC:
00008746 117C 0000 003A             		move.b	#0,$3A(a0)
0000874C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008752                            
00008752                            locret_8308:
00008752 4E75                       		rts	
00008754                            ; ===========================================================================
00008754                            
00008754                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008754 6100 0000                  		bsr.w	ObjectFall
00008758 6100 0000                  		bsr.w	DisplaySprite
0000875C 4A28 0001                  		tst.b	1(a0)
00008760 6A00                       		bpl.s	Obj1A_Delete
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            
00008764                            Obj1A_Delete:				; XREF: Obj1A_Index
00008764 6100 0000                  		bsr.w	DeleteObject
00008768 4E75                       		rts	
0000876A                            ; ===========================================================================
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            Obj53:					; XREF: Obj_Index
0000876A 7000                       		moveq	#0,d0
0000876C 1028 0024                  		move.b	$24(a0),d0
00008770 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008774 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008778                            ; ===========================================================================
00008778 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000877C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008780 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj53_Main:				; XREF: Obj53_Index
00008784 5428 0024                  		addq.b	#2,$24(a0)
00008788 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008790 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008796 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000879C 6600                       		bne.s	Obj53_NotSLZ
0000879E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000087A4 5428 001A                  		addq.b	#2,$1A(a0)
000087A8                            
000087A8                            Obj53_NotSLZ:
000087A8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000087AE 6600                       		bne.s	Obj53_NotSBZ
000087B0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000087B6                            
000087B6                            Obj53_NotSBZ:
000087B6 0028 0004 0001             		ori.b	#4,1(a0)
000087BC 117C 0004 0018             		move.b	#4,$18(a0)
000087C2 117C 0007 0038             		move.b	#7,$38(a0)
000087C8 117C 0044 0019             		move.b	#$44,$19(a0)
000087CE                            
000087CE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000087CE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087D2 6700                       		beq.s	Obj53_Solid	; if not, branch
000087D4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087D8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087DC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087E0                            
000087E0                            Obj53_Solid:
000087E0 323C 0020                  		move.w	#$20,d1
000087E4 6100 F0B8                  		bsr.w	PlatformObject
000087E8 4A28 0028                  		tst.b	$28(a0)
000087EC 6A00                       		bpl.s	Obj53_MarkAsGone
000087EE 0829 0003 0022             		btst	#3,$22(a1)
000087F4 6700                       		beq.s	Obj53_MarkAsGone
000087F6 08A8 0000 0001             		bclr	#0,1(a0)
000087FC 3029 0008                  		move.w	8(a1),d0
00008800 9068 0008                  		sub.w	8(a0),d0
00008804 6400                       		bcc.s	Obj53_MarkAsGone
00008806 08E8 0000 0001             		bset	#0,1(a0)
0000880C                            
0000880C                            Obj53_MarkAsGone:
0000880C 6000 0000                  		bra.w	MarkObjGone
00008810                            ; ===========================================================================
00008810                            
00008810                            Obj53_Touch:				; XREF: Obj53_Index
00008810 4A28 0038                  		tst.b	$38(a0)
00008814 6700 0000                  		beq.w	loc_8458
00008818 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000881E 5328 0038                  		subq.b	#1,$38(a0)
00008822                            
00008822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008822                            
00008822                            
00008822                            Obj53_WalkOff:				; XREF: Obj53_Index
00008822 323C 0020                  		move.w	#$20,d1
00008826 6100 F1EA                  		bsr.w	ExitPlatform
0000882A 3428 0008                  		move.w	8(a0),d2
0000882E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008832 6000 0000                  		bra.w	MarkObjGone
00008836                            ; End of function Obj53_WalkOff
00008836                            
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj53_Display:				; XREF: Obj53_Index
00008836 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000883A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000883C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008840 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008844 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008848 6000 0000                  		bra.w	DisplaySprite
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            loc_8402:
0000884C 5328 0038                  		subq.b	#1,$38(a0)
00008850 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008854 43F8 D000                  		lea	($FFFFD000).w,a1
00008858 0829 0003 0022             		btst	#3,$22(a1)
0000885E 6700                       		beq.s	loc_842E
00008860 4A28 0038                  		tst.b	$38(a0)
00008864 6600                       		bne.s	locret_843A
00008866 08A9 0003 0022             		bclr	#3,$22(a1)
0000886C 08A9 0005 0022             		bclr	#5,$22(a1)
00008872 137C 0001 001D             		move.b	#1,$1D(a1)
00008878                            
00008878                            loc_842E:
00008878 117C 0000 003A             		move.b	#0,$3A(a0)
0000887E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008884                            
00008884                            locret_843A:
00008884 4E75                       		rts	
00008886                            ; ===========================================================================
00008886                            
00008886                            Obj53_TimeZero:				; XREF: Obj53_Display
00008886 6100 0000                  		bsr.w	ObjectFall
0000888A 6100 0000                  		bsr.w	DisplaySprite
0000888E 4A28 0001                  		tst.b	1(a0)
00008892 6A00                       		bpl.s	Obj53_Delete
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Delete:				; XREF: Obj53_Index
00008896 6100 0000                  		bsr.w	DeleteObject
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000889C 117C 0000 003A             		move.b	#0,$3A(a0)
000088A2                            
000088A2                            loc_8458:				; XREF: Obj53_Touch
000088A2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000088A8 0828 0000 0028             		btst	#0,$28(a0)
000088AE 6700                       		beq.s	loc_846C
000088B0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000088B6                            
000088B6                            loc_846C:
000088B6 7207                       		moveq	#7,d1
000088B8 5228 001A                  		addq.b	#1,$1A(a0)
000088BC 6000                       		bra.s	loc_8486
000088BE                            ; ===========================================================================
000088BE                            
000088BE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000088BE 117C 0000 003A             		move.b	#0,$3A(a0)
000088C4                            
000088C4                            loc_847A:				; XREF: Obj1A_Touch
000088C4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000088CA 7218                       		moveq	#$18,d1
000088CC 5428 001A                  		addq.b	#2,$1A(a0)
000088D0                            
000088D0                            loc_8486:				; XREF: Obj53_Collapse
000088D0 7000                       		moveq	#0,d0
000088D2 1028 001A                  		move.b	$1A(a0),d0
000088D6 D040                       		add.w	d0,d0
000088D8 2668 0004                  		movea.l	4(a0),a3
000088DC D6F3 0000                  		adda.w	(a3,d0.w),a3
000088E0 524B                       		addq.w	#1,a3
000088E2 08E8 0005 0001             		bset	#5,1(a0)
000088E8 1810                       		move.b	0(a0),d4
000088EA 1A28 0001                  		move.b	1(a0),d5
000088EE 2248                       		movea.l	a0,a1
000088F0 6000                       		bra.s	loc_84B2
000088F2                            ; ===========================================================================
000088F2                            
000088F2                            loc_84AA:
000088F2 6100 0000                  		bsr.w	SingleObjLoad
000088F6 6600                       		bne.s	loc_84F2
000088F8 5A4B                       		addq.w	#5,a3
000088FA                            
000088FA                            loc_84B2:
000088FA 137C 0006 0024             		move.b	#6,$24(a1)
00008900 1284                       		move.b	d4,0(a1)
00008902 234B 0004                  		move.l	a3,4(a1)
00008906 1345 0001                  		move.b	d5,1(a1)
0000890A 3368 0008 0008             		move.w	8(a0),8(a1)
00008910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008916 3368 0002 0002             		move.w	2(a0),2(a1)
0000891C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008922 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008928 135C 0038                  		move.b	(a4)+,$38(a1)
0000892C B3C8                       		cmpa.l	a0,a1
0000892E 6400                       		bcc.s	loc_84EE
00008930 6100 0000                  		bsr.w	DisplaySprite2
00008934                            
00008934                            loc_84EE:
00008934 51C9 FFBC                  		dbf	d1,loc_84AA
00008938                            
00008938                            loc_84F2:
00008938 6100 0000                  		bsr.w	DisplaySprite
0000893C 303C 00B9                  		move.w	#$B9,d0
00008940 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008946                            ; ===========================================================================
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008946                            ; ---------------------------------------------------------------------------
00008946 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008956 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008960 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008968 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008970                            
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008970                            
00008970                            
00008970                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008970 43F8 D000                  		lea	($FFFFD000).w,a1
00008974 0829 0003 0022             		btst	#3,$22(a1)
0000897A 6700                       		beq.s	locret_856E
0000897C 3029 0008                  		move.w	8(a1),d0
00008980 9068 0008                  		sub.w	8(a0),d0
00008984 D041                       		add.w	d1,d0
00008986 E248                       		lsr.w	#1,d0
00008988 0828 0000 0001             		btst	#0,1(a0)
0000898E 6700                       		beq.s	loc_854E
00008990 4640                       		not.w	d0
00008992 D041                       		add.w	d1,d0
00008994                            
00008994                            loc_854E:
00008994 7200                       		moveq	#0,d1
00008996 1232 0000                  		move.b	(a2,d0.w),d1
0000899A 3028 000C                  		move.w	$C(a0),d0
0000899E 9041                       		sub.w	d1,d0
000089A0 7200                       		moveq	#0,d1
000089A2 1229 0016                  		move.b	$16(a1),d1
000089A6 9041                       		sub.w	d1,d0
000089A8 3340 000C                  		move.w	d0,$C(a1)
000089AC 9468 0008                  		sub.w	8(a0),d2
000089B0 9569 0008                  		sub.w	d2,8(a1)
000089B4                            
000089B4                            locret_856E:
000089B4 4E75                       		rts	
000089B6                            ; End of function SlopeObject2
000089B6                            
000089B6                            ; ===========================================================================
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            ; Collision data for GHZ collapsing ledge
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            Obj1A_SlopeData:
000089B6                            		incbin	misc\ghzledge.bin
000089E6                            		even
000089E6                            
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            Map_obj1A:
000089E6                            	include "_maps\obj1A.asm"
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089EA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089EE 10                         byte_85A8:	dc.b $10
000089EF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089F4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089F9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089FE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A0D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A12 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A21 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A26 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A2B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A30 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A35 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A3A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A3F 10                         byte_85F9:	dc.b $10
00008A40 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A45 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A4A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A4F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A54 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A59 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A5E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A63 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A68 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A6D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A72 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A7C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A81 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A86 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A90 19                         byte_864A:	dc.b $19
00008A91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008AB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008AB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ABE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008AC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ACD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ADC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AFA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B0E 19                         byte_86C8:	dc.b $19
00008B0F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B14 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B19 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B1E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B23 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B28 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B2D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B32 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B37 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B3C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B41 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B46 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B4B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B50 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B55 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B5A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B5F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B64 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B69 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B6E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B73 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B78 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B7D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B82 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B8C                            		even
00008B8C                            		even
00008B8C                            
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            Map_obj53:
00008B8C                            	include "_maps\obj53.asm"
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B90 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B94 04                         byte_874E:	dc.b 4
00008B95 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008B9A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008B9F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BA4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008BA9 08                         byte_8763:	dc.b 8
00008BAA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BAF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008BB4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BB9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008BBE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008BC3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008BC8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008BCD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BD2 04                         byte_878C:	dc.b 4
00008BD3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BD8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BDD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BE2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BE7 08                         byte_87A1:	dc.b 8
00008BE8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BED F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BF2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BF7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008BFC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C01 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C06 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C0B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C10                            		even
00008C10                            		even
00008C10                            
00008C10                            ; ===========================================================================
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            
00008C10                            Obj1C:					; XREF: Obj_Index
00008C10 7000                       		moveq	#0,d0
00008C12 1028 0024                  		move.b	$24(a0),d0
00008C16 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C1A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C1E                            ; ===========================================================================
00008C1E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C20 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C22                            ; ===========================================================================
00008C22                            
00008C22                            Obj1C_Main:				; XREF: Obj1C_Index
00008C22 5428 0024                  		addq.b	#2,$24(a0)
00008C26 7000                       		moveq	#0,d0
00008C28 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C2C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C30 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C34 2159 0004                  		move.l	(a1)+,4(a0)
00008C38 3159 0002                  		move.w	(a1)+,2(a0)
00008C3C 0028 0004 0001             		ori.b	#4,1(a0)
00008C42 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C46 1159 0019                  		move.b	(a1)+,$19(a0)
00008C4A 1159 0018                  		move.b	(a1)+,$18(a0)
00008C4E 1159 0020                  		move.b	(a1)+,$20(a0)
00008C52                            
00008C52                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C52 3028 0008                  		move.w	8(a0),d0
00008C56 0240 FF80                  		andi.w	#$FF80,d0
00008C5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008C5E 0441 0080                  		subi.w	#$80,d1
00008C62 0241 FF80                  		andi.w	#$FF80,d1
00008C66 9041                       		sub.w	d1,d0
00008C68 0C40 0280                  		cmpi.w	#$280,d0
00008C6C 6200 0000                  		bhi.w	DeleteObject
00008C70 6000 0000                  		bra.w	DisplaySprite
00008C74                            ; ===========================================================================
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Variables for	object $1C are stored in an array
00008C74                            ; ---------------------------------------------------------------------------
00008C74 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C78 44D8                       		dc.w $44D8		; VRAM setting
00008C7A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C7E 0000 0000                  		dc.l Map_obj1C
00008C82 44D8                       		dc.w $44D8
00008C84 0008 0200                  		dc.b 0,	8, 2, 0
00008C88 0000 0000                  		dc.l Map_obj1C
00008C8C 44D8                       		dc.w $44D8
00008C8E 0008 0200                  		dc.b 0,	8, 2, 0
00008C92 0000 7D86                  		dc.l Map_obj11
00008C96 438E                       		dc.w $438E
00008C98 0110 0100                  		dc.b 1,	$10, 1,	0
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            Map_obj1C:
00008C9C                            	include "_maps\obj1C.asm"
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C 0000                       		dc.w byte_8858-Map_obj1C
00008C9E 01                         byte_8858:	dc.b 1
00008C9F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008CA4                            		even
00008CA4                            		even
00008CA4                            
00008CA4                            ; ===========================================================================
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Object 1D - switch that activates when Sonic touches it
00008CA4                            ; (this	is not used anywhere in	the game)
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            
00008CA4                            Obj1D:					; XREF: Obj_Index
00008CA4 7000                       		moveq	#0,d0
00008CA6 1028 0024                  		move.b	$24(a0),d0
00008CAA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008CAE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008CB2                            ; ===========================================================================
00008CB2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008CB4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008CB6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            Obj1D_Main:				; XREF: Obj1D_Index
00008CB8 5428 0024                  		addq.b	#2,$24(a0)
00008CBC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008CC4 317C 4000 0002             		move.w	#$4000,2(a0)
00008CCA 117C 0004 0001             		move.b	#4,1(a0)
00008CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CD6 117C 0010 0019             		move.b	#$10,$19(a0)
00008CDC 117C 0005 0018             		move.b	#5,$18(a0)
00008CE2                            
00008CE2                            Obj1D_Action:				; XREF: Obj1D_Index
00008CE2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CE8 323C 0010                  		move.w	#$10,d1
00008CEC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CF0 6700                       		beq.s	Obj1D_ChkDel
00008CF2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CF6 7001                       		moveq	#1,d0
00008CF8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008CFC                            
00008CFC                            Obj1D_ChkDel:
00008CFC 6100 0000                  		bsr.w	DisplaySprite
00008D00 3028 0008                  		move.w	8(a0),d0
00008D04 0240 FF80                  		andi.w	#$FF80,d0
00008D08 3238 F700                  		move.w	($FFFFF700).w,d1
00008D0C 0441 0080                  		subi.w	#$80,d1
00008D10 0241 FF80                  		andi.w	#$FF80,d1
00008D14 9041                       		sub.w	d1,d0
00008D16 0C40 0280                  		cmpi.w	#$280,d0
00008D1A 6200 0000                  		bhi.w	Obj1D_Delete
00008D1E 4E75                       		rts	
00008D20                            ; ===========================================================================
00008D20                            
00008D20                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D20 6100 0000                  		bsr.w	DeleteObject
00008D24 4E75                       		rts	
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            ; Subroutine to	check if Sonic touches the object
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D26 43F8 D000                  		lea	($FFFFD000).w,a1
00008D2A 3029 0008                  		move.w	8(a1),d0
00008D2E 9068 0008                  		sub.w	8(a0),d0
00008D32 D041                       		add.w	d1,d0
00008D34 6B00                       		bmi.s	loc_8918
00008D36 D241                       		add.w	d1,d1
00008D38 B041                       		cmp.w	d1,d0
00008D3A 6400                       		bcc.s	loc_8918
00008D3C 3429 000C                  		move.w	$C(a1),d2
00008D40 1229 0016                  		move.b	$16(a1),d1
00008D44 4881                       		ext.w	d1
00008D46 D242                       		add.w	d2,d1
00008D48 3028 000C                  		move.w	$C(a0),d0
00008D4C 0440 0010                  		subi.w	#$10,d0
00008D50 9041                       		sub.w	d1,d0
00008D52 6200                       		bhi.s	loc_8918
00008D54 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D58 6500                       		bcs.s	loc_8918
00008D5A 70FF                       		moveq	#-1,d0
00008D5C 4E75                       		rts	
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            loc_8918:
00008D5E 7000                       		moveq	#0,d0
00008D60 4E75                       		rts	
00008D62                            ; End of function Obj1D_ChkTouch
00008D62                            
00008D62                            ; ===========================================================================
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            Map_obj1D:
00008D62                            	include "_maps\obj1D.asm"
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62 0000                       		dc.w byte_891E-Map_obj1D
00008D64 04                         byte_891E:	dc.b 4
00008D65 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D6A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D6F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D74 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D7A 00                         		even
00008D7A 00                         		even
00008D7A                            
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Object 2A - doors (SBZ)
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            Obj2A:					; XREF: Obj_Index
00008D7A 7000                       		moveq	#0,d0
00008D7C 1028 0024                  		move.b	$24(a0),d0
00008D80 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D84 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D88                            ; ===========================================================================
00008D88 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D8A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D8C                            ; ===========================================================================
00008D8C                            
00008D8C                            Obj2A_Main:				; XREF: Obj2A_Index
00008D8C 5428 0024                  		addq.b	#2,$24(a0)
00008D90 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008D98 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008D9E 0028 0004 0001             		ori.b	#4,1(a0)
00008DA4 117C 0008 0019             		move.b	#8,$19(a0)
00008DAA 117C 0004 0018             		move.b	#4,$18(a0)
00008DB0                            
00008DB0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008DB0 323C 0040                  		move.w	#$40,d1
00008DB4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008DB8 3038 D008                  		move.w	($FFFFD008).w,d0
00008DBC D041                       		add.w	d1,d0
00008DBE B068 0008                  		cmp.w	8(a0),d0
00008DC2 6500                       		bcs.s	Obj2A_Animate
00008DC4 9041                       		sub.w	d1,d0
00008DC6 9041                       		sub.w	d1,d0
00008DC8 B068 0008                  		cmp.w	8(a0),d0
00008DCC 6400                       		bcc.s	Obj2A_Animate
00008DCE D041                       		add.w	d1,d0
00008DD0 B068 0008                  		cmp.w	8(a0),d0
00008DD4 6400                       		bcc.s	loc_899A
00008DD6 0828 0000 0022             		btst	#0,$22(a0)
00008DDC 6600                       		bne.s	Obj2A_Animate
00008DDE 6000                       		bra.s	Obj2A_Open
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_899A:				; XREF: Obj2A_OpenShut
00008DE0 0828 0000 0022             		btst	#0,$22(a0)
00008DE6 6700                       		beq.s	Obj2A_Animate
00008DE8                            
00008DE8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DE8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DEE                            
00008DEE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DEE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DF4 6100 0000                  		bsr.w	AnimateSprite
00008DF8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008DFC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008DFE 323C 0011                  		move.w	#$11,d1
00008E02 343C 0020                  		move.w	#$20,d2
00008E06 3602                       		move.w	d2,d3
00008E08 5243                       		addq.w	#1,d3
00008E0A 3828 0008                  		move.w	8(a0),d4
00008E0E 6100 0000                  		bsr.w	SolidObject
00008E12                            
00008E12                            Obj2A_MarkAsUsed:
00008E12 6000 0000                  		bra.w	MarkObjGone
00008E16                            ; ===========================================================================
00008E16                            Ani_obj2A:
00008E16                            	include "_anim\obj2A.asm"
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Animation script - doors (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E18 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E1A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E26 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E32                            		even
00008E32                            		even
00008E32                            
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            Map_obj2A:
00008E32                            	include "_maps\obj2A.asm"
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E36 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E3A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E3E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E42 0000                       		dc.w byte_8A56-Map_obj2A
00008E44 02                         byte_89FE:	dc.b 2
00008E45 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E4A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E4F 02                         byte_8A09:	dc.b 2
00008E50 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E55 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E5A 02                         byte_8A14:	dc.b 2
00008E5B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E60 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E65 02                         byte_8A1F:	dc.b 2
00008E66 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E6B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E70 02                         byte_8A2A:	dc.b 2
00008E71 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E76 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E7B 02                         byte_8A35:	dc.b 2
00008E7C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E81 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E86 02                         byte_8A40:	dc.b 2
00008E87 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E8C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E91 02                         byte_8A4B:	dc.b 2
00008E92 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E97 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008E9C 02                         byte_8A56:	dc.b 2
00008E9D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008EA2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008EA8 00                         		even
00008EA8 00                         		even
00008EA8                            
00008EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA8                            
00008EA8                            
00008EA8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008EA8 6100 0000                  		bsr.w	Obj44_SolidWall2
00008EAC 6700                       		beq.s	loc_8AA8
00008EAE 6B00 0000                  		bmi.w	loc_8AC4
00008EB2 4A40                       		tst.w	d0
00008EB4 6700 0000                  		beq.w	loc_8A92
00008EB8 6B00                       		bmi.s	loc_8A7C
00008EBA 4A69 0010                  		tst.w	$10(a1)
00008EBE 6B00                       		bmi.s	loc_8A92
00008EC0 6000                       		bra.s	loc_8A82
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            loc_8A7C:
00008EC2 4A69 0010                  		tst.w	$10(a1)
00008EC6 6A00                       		bpl.s	loc_8A92
00008EC8                            
00008EC8                            loc_8A82:
00008EC8 9169 0008                  		sub.w	d0,8(a1)
00008ECC 337C 0000 0014             		move.w	#0,$14(a1)
00008ED2 337C 0000 0010             		move.w	#0,$10(a1)
00008ED8                            
00008ED8                            loc_8A92:
00008ED8 0829 0001 0022             		btst	#1,$22(a1)
00008EDE 6600                       		bne.s	loc_8AB6
00008EE0 08E9 0005 0022             		bset	#5,$22(a1)
00008EE6 08E8 0005 0022             		bset	#5,$22(a0)
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            loc_8AA8:
00008EEE 0828 0005 0022             		btst	#5,$22(a0)
00008EF4 6700                       		beq.s	locret_8AC2
00008EF6 337C 0001 001C             		move.w	#1,$1C(a1)
00008EFC                            
00008EFC                            loc_8AB6:
00008EFC 08A8 0005 0022             		bclr	#5,$22(a0)
00008F02 08A9 0005 0022             		bclr	#5,$22(a1)
00008F08                            
00008F08                            locret_8AC2:
00008F08 4E75                       		rts	
00008F0A                            ; ===========================================================================
00008F0A                            
00008F0A                            loc_8AC4:
00008F0A 4A69 0012                  		tst.w	$12(a1)
00008F0E 6A00                       		bpl.s	locret_8AD8
00008F10 4A43                       		tst.w	d3
00008F12 6A00                       		bpl.s	locret_8AD8
00008F14 9769 000C                  		sub.w	d3,$C(a1)
00008F18 337C 0000 0012             		move.w	#0,$12(a1)
00008F1E                            
00008F1E                            locret_8AD8:
00008F1E 4E75                       		rts	
00008F20                            ; End of function Obj44_SolidWall
00008F20                            
00008F20                            
00008F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F20                            
00008F20                            
00008F20                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F20 43F8 D000                  		lea	($FFFFD000).w,a1
00008F24 3029 0008                  		move.w	8(a1),d0
00008F28 9068 0008                  		sub.w	8(a0),d0
00008F2C D041                       		add.w	d1,d0
00008F2E 6B00                       		bmi.s	loc_8B48
00008F30 3601                       		move.w	d1,d3
00008F32 D643                       		add.w	d3,d3
00008F34 B043                       		cmp.w	d3,d0
00008F36 6200                       		bhi.s	loc_8B48
00008F38 1629 0016                  		move.b	$16(a1),d3
00008F3C 4883                       		ext.w	d3
00008F3E D443                       		add.w	d3,d2
00008F40 3629 000C                  		move.w	$C(a1),d3
00008F44 9668 000C                  		sub.w	$C(a0),d3
00008F48 D642                       		add.w	d2,d3
00008F4A 6B00                       		bmi.s	loc_8B48
00008F4C 3802                       		move.w	d2,d4
00008F4E D844                       		add.w	d4,d4
00008F50 B644                       		cmp.w	d4,d3
00008F52 6400                       		bcc.s	loc_8B48
00008F54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F58 6B00                       		bmi.s	loc_8B48
00008F5A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F60 6400                       		bcc.s	loc_8B48
00008F62 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F66 6600                       		bne.s	loc_8B48
00008F68 3A00                       		move.w	d0,d5
00008F6A B240                       		cmp.w	d0,d1
00008F6C 6400                       		bcc.s	loc_8B30
00008F6E D241                       		add.w	d1,d1
00008F70 9041                       		sub.w	d1,d0
00008F72 3A00                       		move.w	d0,d5
00008F74 4445                       		neg.w	d5
00008F76                            
00008F76                            loc_8B30:
00008F76 3203                       		move.w	d3,d1
00008F78 B443                       		cmp.w	d3,d2
00008F7A 6400                       		bcc.s	loc_8B3C
00008F7C 9644                       		sub.w	d4,d3
00008F7E 3203                       		move.w	d3,d1
00008F80 4441                       		neg.w	d1
00008F82                            
00008F82                            loc_8B3C:
00008F82 BA41                       		cmp.w	d1,d5
00008F84 6200                       		bhi.s	loc_8B44
00008F86 7801                       		moveq	#1,d4
00008F88 4E75                       		rts	
00008F8A                            ; ===========================================================================
00008F8A                            
00008F8A                            loc_8B44:
00008F8A 78FF                       		moveq	#-1,d4
00008F8C 4E75                       		rts	
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            loc_8B48:
00008F8E 7800                       		moveq	#0,d4
00008F90 4E75                       		rts	
00008F92                            ; End of function Obj44_SolidWall2
00008F92                            
00008F92                            ; ===========================================================================
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Object 1E - Ball Hog enemy (SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            
00008F92                            Obj1E:					; XREF: Obj_Index
00008F92 7000                       		moveq	#0,d0
00008F94 1028 0024                  		move.b	$24(a0),d0
00008F98 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008F9C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008FA0                            ; ===========================================================================
00008FA0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008FA2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008FA4                            ; ===========================================================================
00008FA4                            
00008FA4                            Obj1E_Main:				; XREF: Obj1E_Index
00008FA4 117C 0013 0016             		move.b	#$13,$16(a0)
00008FAA 117C 0008 0017             		move.b	#8,$17(a0)
00008FB0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FB8 317C 2302 0002             		move.w	#$2302,2(a0)
00008FBE 117C 0004 0001             		move.b	#4,1(a0)
00008FC4 117C 0004 0018             		move.b	#4,$18(a0)
00008FCA 117C 0005 0020             		move.b	#5,$20(a0)
00008FD0 117C 000C 0019             		move.b	#$C,$19(a0)
00008FD6 6100 0000                  		bsr.w	ObjectFall
00008FDA 4EB9 0000 0000             		jsr	ObjHitFloor
00008FE0 4A41                       		tst.w	d1
00008FE2 6A00                       		bpl.s	locret_8BAC
00008FE4 D368 000C                  		add.w	d1,$C(a0)
00008FE8 317C 0000 0012             		move.w	#0,$12(a0)
00008FEE 5428 0024                  		addq.b	#2,$24(a0)
00008FF2                            
00008FF2                            locret_8BAC:
00008FF2 4E75                       		rts	
00008FF4                            ; ===========================================================================
00008FF4                            
00008FF4                            Obj1E_Action:				; XREF: Obj1E_Index
00008FF4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008FFA 6100 0000                  		bsr.w	AnimateSprite
00008FFE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009004 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009006 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000900A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000900C 6000                       		bra.s	Obj1E_MarkAsGone
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000900E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009012                            
00009012                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009012 6000 0000                  		bra.w	MarkObjGone
00009016                            ; ===========================================================================
00009016                            
00009016                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009016 117C 0001 0032             		move.b	#1,$32(a0)
0000901C 6100 0000                  		bsr.w	SingleObjLoad
00009020 6600                       		bne.s	loc_8C1A
00009022 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009026 3368 0008 0008             		move.w	8(a0),8(a1)
0000902C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009032 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009038 337C 0000 0012             		move.w	#0,$12(a1)
0000903E 70FC                       		moveq	#-4,d0
00009040 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009046 6700                       		beq.s	loc_8C0A	; if not, branch
00009048 4440                       		neg.w	d0
0000904A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000904E                            
0000904E                            loc_8C0A:
0000904E D169 0008                  		add.w	d0,8(a1)
00009052 0669 000C 000C             		addi.w	#$C,$C(a1)
00009058 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000905E                            
0000905E                            loc_8C1A:
0000905E 60B2                       		bra.s	Obj1E_MarkAsGone
00009060                            ; ===========================================================================
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009060                            ; ---------------------------------------------------------------------------
00009060                            
00009060                            Obj20:					; XREF: Obj_Index
00009060 7000                       		moveq	#0,d0
00009062 1028 0024                  		move.b	$24(a0),d0
00009066 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000906A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000906E                            ; ===========================================================================
0000906E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009070 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj20_Main:				; XREF: Obj20_Index
00009072 5428 0024                  		addq.b	#2,$24(a0)
00009076 117C 0007 0016             		move.b	#7,$16(a0)
0000907C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009084 317C 2302 0002             		move.w	#$2302,2(a0)
0000908A 117C 0004 0001             		move.b	#4,1(a0)
00009090 117C 0003 0018             		move.b	#3,$18(a0)
00009096 117C 0087 0020             		move.b	#$87,$20(a0)
0000909C 117C 0008 0019             		move.b	#8,$19(a0)
000090A2 7000                       		moveq	#0,d0
000090A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000090A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000090AC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000090B0 117C 0004 001A             		move.b	#4,$1A(a0)
000090B6                            
000090B6                            Obj20_Bounce:				; XREF: Obj20_Index
000090B6 4EB9 0000 0000             		jsr	ObjectFall
000090BC 4A68 0012                  		tst.w	$12(a0)
000090C0 6B00                       		bmi.s	Obj20_ChkExplode
000090C2 4EB9 0000 0000             		jsr	ObjHitFloor
000090C8 4A41                       		tst.w	d1
000090CA 6A00                       		bpl.s	Obj20_ChkExplode
000090CC D368 000C                  		add.w	d1,$C(a0)
000090D0 317C FD00 0012             		move.w	#-$300,$12(a0)
000090D6 4A03                       		tst.b	d3
000090D8 6700                       		beq.s	Obj20_ChkExplode
000090DA 6B00                       		bmi.s	loc_8CA4
000090DC 4A68 0010                  		tst.w	$10(a0)
000090E0 6A00                       		bpl.s	Obj20_ChkExplode
000090E2 4468 0010                  		neg.w	$10(a0)
000090E6 6000                       		bra.s	Obj20_ChkExplode
000090E8                            ; ===========================================================================
000090E8                            
000090E8                            loc_8CA4:				; XREF: Obj20_Bounce
000090E8 4A68 0010                  		tst.w	$10(a0)
000090EC 6B00                       		bmi.s	Obj20_ChkExplode
000090EE 4468 0010                  		neg.w	$10(a0)
000090F2                            
000090F2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090F6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000090F8 10BC 0024                  		move.b	#$24,0(a0)
000090FC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009100 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009106 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000910A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000910E 6A00                       		bpl.s	Obj20_Display
00009110 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009116 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000911C                            
0000911C                            Obj20_Display:
0000911C 6100 0000                  		bsr.w	DisplaySprite
00009120 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009124 0640 00E0                  		addi.w	#$E0,d0
00009128 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000912C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            ; ---------------------------------------------------------------------------
00009132                            ; Object 24 - explosion	from a destroyed monitor
00009132                            ; ---------------------------------------------------------------------------
00009132                            
00009132                            Obj24:					; XREF: Obj_Index
00009132 7000                       		moveq	#0,d0
00009134 1028 0024                  		move.b	$24(a0),d0
00009138 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000913C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009140                            ; ===========================================================================
00009140 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009142 0000                       		dc.w Obj24_Animate-Obj24_Index
00009144                            ; ===========================================================================
00009144                            
00009144                            Obj24_Main:				; XREF: Obj24_Index
00009144 5428 0024                  		addq.b	#2,$24(a0)
00009148 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009150 317C 041C 0002             		move.w	#$41C,2(a0)
00009156 117C 0004 0001             		move.b	#4,1(a0)
0000915C 117C 0001 0018             		move.b	#1,$18(a0)
00009162 117C 0000 0020             		move.b	#0,$20(a0)
00009168 117C 000C 0019             		move.b	#$C,$19(a0)
0000916E 117C 0009 001E             		move.b	#9,$1E(a0)
00009174 117C 0000 001A             		move.b	#0,$1A(a0)
0000917A 303C 00A5                  		move.w	#$A5,d0
0000917E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009184                            
00009184                            Obj24_Animate:				; XREF: Obj24_Index
00009184 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009188 6A00                       		bpl.s	Obj24_Display
0000918A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009190 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009194 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000919A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000919E                            
0000919E                            Obj24_Display:
0000919E 6000 0000                  		bra.w	DisplaySprite
000091A2                            ; ===========================================================================
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Object 27 - explosion	from a destroyed enemy
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            
000091A2                            Obj27:					; XREF: Obj_Index
000091A2 7000                       		moveq	#0,d0
000091A4 1028 0024                  		move.b	$24(a0),d0
000091A8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000091AC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000091B0                            ; ===========================================================================
000091B0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000091B2 0000                       		dc.w Obj27_Main-Obj27_Index
000091B4 0000                       		dc.w Obj27_Animate-Obj27_Index
000091B6                            ; ===========================================================================
000091B6                            
000091B6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000091B6 5428 0024                  		addq.b	#2,$24(a0)
000091BA 6100 0000                  		bsr.w	SingleObjLoad
000091BE 6600                       		bne.s	Obj27_Main
000091C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000091C4 3368 0008 0008             		move.w	8(a0),8(a1)
000091CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091D6                            
000091D6                            Obj27_Main:				; XREF: Obj27_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091E8 117C 0004 0001             		move.b	#4,1(a0)
000091EE 117C 0001 0018             		move.b	#1,$18(a0)
000091F4 117C 0000 0020             		move.b	#0,$20(a0)
000091FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009200                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009200 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009206 117C 0000 001A             		move.b	#0,$1A(a0)
0000920C 303C 00C1                  		move.w	#$C1,d0
00009210 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009216                            
00009216 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000921C 1028 0028                  		move.b	$28(a0),d0
00009220 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009226 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000922C                            
0000922C                            Obj27_Animate:				; XREF: Obj27_Index
0000922C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009230 6A00                       		bpl.s	Obj27_Display
00009232                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009232 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009238 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000923C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009242 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009246                            
00009246                            Obj27_Display:
00009246 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000924C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009252 6000 0000                  		bra.w	DisplaySprite
00009256                            ; ===========================================================================
00009256                            ; ---------------------------------------------------------------------------
00009256                            Obj27_ExplosionXYSpd:
00009256                            		; dc.w	-$350, -$300	; Left
00009256                            		; dc.w	-$200, -$450	; Near middle (left)
00009256                            		; dc.w	0, -$500	; Middle
00009256                            		; dc.w	$200, -$450	; Near middle (right)
00009256                            		; dc.w	$350, -$300	; Right
00009256                            
00009256 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000925A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000925E 0000 FA00                  		dc.w	0, -$600	; Middle
00009262 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009266 0150 FC00                  		dc.w	$150, -$400	; Right
0000926A                            
0000926A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009284                            ; ---------------------------------------------------------------------------
00009284                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009284                            ; ---------------------------------------------------------------------------
00009284                            
00009284                            Obj3F:					; XREF: Obj_Index
00009284 7000                       		moveq	#0,d0
00009286 1028 0024                  		move.b	$24(a0),d0
0000928A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000928E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009292                            ; ===========================================================================
00009292 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009294 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj3F_Main:				; XREF: Obj3F_Index
00009296 5428 0024                  		addq.b	#2,$24(a0)
0000929A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000092A2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092A8 117C 0004 0001             		move.b	#4,1(a0)
000092AE 117C 0001 0018             		move.b	#1,$18(a0)
000092B4 117C 0000 0020             		move.b	#0,$20(a0)
000092BA 117C 000C 0019             		move.b	#$C,$19(a0)
000092C0 117C 0007 001E             		move.b	#7,$1E(a0)
000092C6 117C 0000 001A             		move.b	#0,$1A(a0)
000092CC 303C 00C4                  		move.w	#$C4,d0
000092D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092D6                            ; ===========================================================================
000092D6                            Ani_obj1E:
000092D6                            	include "_anim\obj1E.asm"
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Animation script - doors (SBZ)
000092D6                            ; ---------------------------------------------------------------------------
000092D6 0000                       		dc.w byte_8E4A-Ani_obj1E
000092D8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092F0 00                         		even
000092F0 00                         		even
000092F0                            
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_obj1E:
000092F0                            	include "_maps\obj1E.asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092F4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000092F8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000092FC 02                         byte_8E6E:	dc.b 2
000092FD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009302 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009307 02                         byte_8E79:	dc.b 2
00009308 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000930D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009312 02                         byte_8E84:	dc.b 2
00009313 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009318 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000931D 02                         byte_8E8F:	dc.b 2
0000931E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009323 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009328 01                         byte_8E9A:	dc.b 1
00009329 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000932E 01                         byte_8EA0:	dc.b 1
0000932F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009334                            		even
00009334                            		even
00009334                            
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334                            Map_obj24:
00009334                            	include "_maps\obj24.asm"
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009338 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000933C 01                         byte_8EAE:	dc.b 1
0000933D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009342 01                         byte_8EB4:	dc.b 1
00009343 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009348 01                         byte_8EBA:	dc.b 1
00009349 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000934E 01                         byte_8EC0:	dc.b 1
0000934F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009354                            		even
00009354                            		even
00009354                            
00009354                            ; ---------------------------------------------------------------------------
00009354                            ; Sprite mappings - explosion
00009354                            ; ---------------------------------------------------------------------------
00009354 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009358 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000935C 0000                       		dc.w byte_8EF7-Map_obj27
0000935E 01                         byte_8ED0:	dc.b 1
0000935F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009364 01                         byte_8ED6:	dc.b 1
00009365 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000936A 01                         byte_8EDC:	dc.b 1
0000936B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009370 04                         byte_8EE2:	dc.b 4
00009371 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009376 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000937B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009380 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009385 04                         byte_8EF7:	dc.b 4
00009386 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000938B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009390 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009395 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000939A                            		even
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000939A                            ; ---------------------------------------------------------------------------
0000939A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000939C 0000                       		dc.w byte_8F16-Map_obj3F
0000939E 0000                       		dc.w byte_8F1C-Map_obj3F
000093A0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000093A2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000093A4 01                         byte_8F16:	dc.b 1
000093A5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000093AA 01                         byte_8F1C:	dc.b 1
000093AB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000093B0                            		even
000093B0                            ; ===========================================================================
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            ; Object 28 - animals
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            
000093B0                            Obj28:					; XREF: Obj_Index
000093B0 7000                       		moveq	#0,d0
000093B2 1028 0024                  		move.b	$24(a0),d0
000093B6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000093BA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000093BE                            ; ===========================================================================
000093BE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000093C2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093C6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000093CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093CE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093D2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093D6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093DA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093DE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093E2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093E6 0000                       		dc.w loc_92D6-Obj28_Index
000093E8                            
000093E8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093F4                            
000093F4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000093F8 0000 0000                  		dc.l Map_obj28
000093FC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009400 0000 0000                  		dc.l Map_obj28a		; mappings address
00009404 FE80 FD00                  		dc.w $FE80, $FD00
00009408 0000 0000                  		dc.l Map_obj28
0000940C FEC0 FE80                  		dc.w $FEC0, $FE80
00009410 0000 0000                  		dc.l Map_obj28a
00009414 FE40 FD00                  		dc.w $FE40, $FD00
00009418 0000 0000                  		dc.l Map_obj28b
0000941C FD00 FC00                  		dc.w $FD00, $FC00
00009420 0000 0000                  		dc.l Map_obj28a
00009424 FD80 FC80                  		dc.w $FD80, $FC80
00009428 0000 0000                  		dc.l Map_obj28b
0000942C                            
0000942C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000943C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000944C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009458                            
00009458 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000946C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009480 0000 0000                  		dc.l Map_obj28b
00009484                            
00009484 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009496 0565 05B3                  		dc.w $565, $5B3
0000949A                            ; ===========================================================================
0000949A                            
0000949A                            Obj28_Ending:				; XREF: Obj28_Index
0000949A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000949E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A8 D040                       		add.w	d0,d0		; multiply d0 by 2
000094AA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000094AE 0440 0014                  		subi.w	#$14,d0
000094B2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000094B8 D040                       		add.w	d0,d0
000094BA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000094C0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000094C4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000094CA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000094D0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094D6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094DC 117C 000C 0016             		move.b	#$C,$16(a0)
000094E2 117C 0004 0001             		move.b	#4,1(a0)
000094E8 08E8 0000 0001             		bset	#0,1(a0)
000094EE 117C 0006 0018             		move.b	#6,$18(a0)
000094F4 117C 0008 0019             		move.b	#8,$19(a0)
000094FA 117C 0007 001E             		move.b	#7,$1E(a0)
00009500 6000 0000                  		bra.w	DisplaySprite
00009504                            ; ===========================================================================
00009504                            
00009504                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009504 5428 0024                  		addq.b	#2,$24(a0)
00009508 6100 96F2                  		bsr.w	RandomNumber
0000950C 0240 0001                  		andi.w	#1,d0
00009510 7200                       		moveq	#0,d1
00009512 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009516 D241                       		add.w	d1,d1
00009518 D240                       		add.w	d0,d1
0000951A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000951E 1031 1000                  		move.b	(a1,d1.w),d0
00009522 1140 0030                  		move.b	d0,$30(a0)
00009526 E748                       		lsl.w	#3,d0
00009528 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000952C D2C0                       		adda.w	d0,a1
0000952E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009532 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009536 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000953A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009540 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009546 6700                       		beq.s	loc_90C0	; if yes, branch
00009548 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000954E                            
0000954E                            loc_90C0:
0000954E 117C 000C 0016             		move.b	#$C,$16(a0)
00009554 117C 0004 0001             		move.b	#4,1(a0)
0000955A 08E8 0000 0001             		bset	#0,1(a0)
00009560 117C 0006 0018             		move.b	#6,$18(a0)
00009566 117C 0008 0019             		move.b	#8,$19(a0)
0000956C 117C 0007 001E             		move.b	#7,$1E(a0)
00009572 117C 0002 001A             		move.b	#2,$1A(a0)
00009578 317C FC00 0012             		move.w	#-$400,$12(a0)
0000957E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009582 6600                       		bne.s	loc_911C
00009584 6100 0000                  		bsr.w	SingleObjLoad
00009588 6600                       		bne.s	Obj28_Display
0000958A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000958E 3368 0008 0008             		move.w	8(a0),8(a1)
00009594 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000959A 3028 003E                  		move.w	$3E(a0),d0
0000959E E248                       		lsr.w	#1,d0
000095A0 1340 001A                  		move.b	d0,$1A(a1)
000095A4                            
000095A4                            Obj28_Display:
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            loc_911C:
000095A8 117C 0012 0024             		move.b	#$12,$24(a0)
000095AE 4268 0010                  		clr.w	$10(a0)
000095B2 6000 0000                  		bra.w	DisplaySprite
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            loc_912A:				; XREF: Obj28_Index
000095B6 4A28 0001                  		tst.b	1(a0)
000095BA 6A00 0000                  		bpl.w	DeleteObject
000095BE 6100 0000                  		bsr.w	ObjectFall
000095C2 4A68 0012                  		tst.w	$12(a0)
000095C6 6B00                       		bmi.s	loc_9180
000095C8 4EB9 0000 0000             		jsr	ObjHitFloor
000095CE 4A41                       		tst.w	d1
000095D0 6A00                       		bpl.s	loc_9180
000095D2 D368 000C                  		add.w	d1,$C(a0)
000095D6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095E2 117C 0001 001A             		move.b	#1,$1A(a0)
000095E8 1028 0030                  		move.b	$30(a0),d0
000095EC D000                       		add.b	d0,d0
000095EE 5800                       		addq.b	#4,d0
000095F0 1140 0024                  		move.b	d0,$24(a0)
000095F4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095F8 6700                       		beq.s	loc_9180
000095FA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009600 6700                       		beq.s	loc_9180
00009602 4468 0010                  		neg.w	$10(a0)
00009606 0868 0000 0001             		bchg	#0,1(a0)
0000960C                            
0000960C                            loc_9180:
0000960C 6000 0000                  		bra.w	DisplaySprite
00009610                            ; ===========================================================================
00009610                            
00009610                            loc_9184:				; XREF: Obj28_Index
00009610 6100 0000                  		bsr.w	ObjectFall
00009614 117C 0001 001A             		move.b	#1,$1A(a0)
0000961A 4A68 0012                  		tst.w	$12(a0)
0000961E 6B00                       		bmi.s	loc_91AE
00009620 117C 0000 001A             		move.b	#0,$1A(a0)
00009626 4EB9 0000 0000             		jsr	ObjHitFloor
0000962C 4A41                       		tst.w	d1
0000962E 6A00                       		bpl.s	loc_91AE
00009630 D368 000C                  		add.w	d1,$C(a0)
00009634 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000963A                            
0000963A                            loc_91AE:
0000963A 4A28 0028                  		tst.b	$28(a0)
0000963E 6600                       		bne.s	loc_9224
00009640 4A28 0001                  		tst.b	1(a0)
00009644 6A00 0000                  		bpl.w	DeleteObject
00009648 6000 0000                  		bra.w	DisplaySprite
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            loc_91C0:				; XREF: Obj28_Index
0000964C 6100 0000                  		bsr.w	SpeedToPos
00009650 0668 0018 0012             		addi.w	#$18,$12(a0)
00009656 4A68 0012                  		tst.w	$12(a0)
0000965A 6B00                       		bmi.s	loc_91FC
0000965C 4EB9 0000 0000             		jsr	ObjHitFloor
00009662 4A41                       		tst.w	d1
00009664 6A00                       		bpl.s	loc_91FC
00009666 D368 000C                  		add.w	d1,$C(a0)
0000966A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009670 4A28 0028                  		tst.b	$28(a0)
00009674 6700                       		beq.s	loc_91FC
00009676 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000967C 6700                       		beq.s	loc_91FC
0000967E 4468 0010                  		neg.w	$10(a0)
00009682 0868 0000 0001             		bchg	#0,1(a0)
00009688                            
00009688                            loc_91FC:
00009688 5328 001E                  		subq.b	#1,$1E(a0)
0000968C 6A00                       		bpl.s	loc_9212
0000968E 117C 0001 001E             		move.b	#1,$1E(a0)
00009694 5228 001A                  		addq.b	#1,$1A(a0)
00009698 0228 0001 001A             		andi.b	#1,$1A(a0)
0000969E                            
0000969E                            loc_9212:
0000969E 4A28 0028                  		tst.b	$28(a0)
000096A2 6600                       		bne.s	loc_9224
000096A4 4A28 0001                  		tst.b	1(a0)
000096A8 6A00 0000                  		bpl.w	DeleteObject
000096AC 6000 0000                  		bra.w	DisplaySprite
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            loc_9224:				; XREF: Obj28_Index
000096B0 3028 0008                  		move.w	8(a0),d0
000096B4 9078 D008                  		sub.w	($FFFFD008).w,d0
000096B8 6500                       		bcs.s	loc_923C
000096BA 0440 0180                  		subi.w	#$180,d0
000096BE 6A00                       		bpl.s	loc_923C
000096C0 4A28 0001                  		tst.b	1(a0)
000096C4 6A00 0000                  		bpl.w	DeleteObject
000096C8                            
000096C8                            loc_923C:
000096C8 6000 0000                  		bra.w	DisplaySprite
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            loc_9240:				; XREF: Obj28_Index
000096CC 4A28 0001                  		tst.b	1(a0)
000096D0 6A00 0000                  		bpl.w	DeleteObject
000096D4 5368 0036                  		subq.w	#1,$36(a0)
000096D8 6600 0000                  		bne.w	loc_925C
000096DC 117C 0002 0024             		move.b	#2,$24(a0)
000096E2 117C 0003 0018             		move.b	#3,$18(a0)
000096E8                            
000096E8                            loc_925C:
000096E8 6000 0000                  		bra.w	DisplaySprite
000096EC                            ; ===========================================================================
000096EC                            
000096EC                            loc_9260:				; XREF: Obj28_Index
000096EC 6100 0000                  		bsr.w	sub_9404
000096F0 6400                       		bcc.s	loc_927C
000096F2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096F8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FE 117C 000E 0024             		move.b	#$E,$24(a0)
00009704 6000 FF46                  		bra.w	loc_91C0
00009708                            ; ===========================================================================
00009708                            
00009708                            loc_927C:
00009708 6000 FFA6                  		bra.w	loc_9224
0000970C                            ; ===========================================================================
0000970C                            
0000970C                            loc_9280:				; XREF: Obj28_Index
0000970C 6100 0000                  		bsr.w	sub_9404
00009710 6A00                       		bpl.s	loc_92B6
00009712 4268 0010                  		clr.w	$10(a0)
00009716 4268 0032                  		clr.w	$32(a0)
0000971A 6100 0000                  		bsr.w	SpeedToPos
0000971E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009724 6100 0000                  		bsr.w	loc_93C4
00009728 6100 0000                  		bsr.w	loc_93EC
0000972C 5328 001E                  		subq.b	#1,$1E(a0)
00009730 6A00                       		bpl.s	loc_92B6
00009732 117C 0001 001E             		move.b	#1,$1E(a0)
00009738 5228 001A                  		addq.b	#1,$1A(a0)
0000973C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009742                            
00009742                            loc_92B6:
00009742 6000 FF6C                  		bra.w	loc_9224
00009746                            ; ===========================================================================
00009746                            
00009746                            loc_92BA:				; XREF: Obj28_Index
00009746 6100 0000                  		bsr.w	sub_9404
0000974A 6A00                       		bpl.s	loc_9310
0000974C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009752 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009758 117C 0004 0024             		move.b	#4,$24(a0)
0000975E 6000 FEB0                  		bra.w	loc_9184
00009762                            ; ===========================================================================
00009762                            
00009762                            loc_92D6:				; XREF: Obj28_Index
00009762 6100 0000                  		bsr.w	ObjectFall
00009766 117C 0001 001A             		move.b	#1,$1A(a0)
0000976C 4A68 0012                  		tst.w	$12(a0)
00009770 6B00                       		bmi.s	loc_9310
00009772 117C 0000 001A             		move.b	#0,$1A(a0)
00009778 4EB9 0000 0000             		jsr	ObjHitFloor
0000977E 4A41                       		tst.w	d1
00009780 6A00                       		bpl.s	loc_9310
00009782 4628 0029                  		not.b	$29(a0)
00009786 6600                       		bne.s	loc_9306
00009788 4468 0010                  		neg.w	$10(a0)
0000978C 0868 0000 0001             		bchg	#0,1(a0)
00009792                            
00009792                            loc_9306:
00009792 D368 000C                  		add.w	d1,$C(a0)
00009796 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000979C                            
0000979C                            loc_9310:
0000979C 6000 FF12                  		bra.w	loc_9224
000097A0                            ; ===========================================================================
000097A0                            
000097A0                            loc_9314:				; XREF: Obj28_Index
000097A0 6100 0000                  		bsr.w	sub_9404
000097A4 6A00                       		bpl.s	loc_932E
000097A6 4268 0010                  		clr.w	$10(a0)
000097AA 4268 0032                  		clr.w	$32(a0)
000097AE 6100 0000                  		bsr.w	ObjectFall
000097B2 6100 0000                  		bsr.w	loc_93C4
000097B6 6100 0000                  		bsr.w	loc_93EC
000097BA                            
000097BA                            loc_932E:
000097BA 6000 FEF4                  		bra.w	loc_9224
000097BE                            ; ===========================================================================
000097BE                            
000097BE                            loc_9332:				; XREF: Obj28_Index
000097BE 6100 0000                  		bsr.w	sub_9404
000097C2 6A00                       		bpl.s	loc_936C
000097C4 6100 0000                  		bsr.w	ObjectFall
000097C8 117C 0001 001A             		move.b	#1,$1A(a0)
000097CE 4A68 0012                  		tst.w	$12(a0)
000097D2 6B00                       		bmi.s	loc_936C
000097D4 117C 0000 001A             		move.b	#0,$1A(a0)
000097DA 4EB9 0000 0000             		jsr	ObjHitFloor
000097E0 4A41                       		tst.w	d1
000097E2 6A00                       		bpl.s	loc_936C
000097E4 4468 0010                  		neg.w	$10(a0)
000097E8 0868 0000 0001             		bchg	#0,1(a0)
000097EE D368 000C                  		add.w	d1,$C(a0)
000097F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097F8                            
000097F8                            loc_936C:
000097F8 6000 FEB6                  		bra.w	loc_9224
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            loc_9370:				; XREF: Obj28_Index
000097FC 6100 0000                  		bsr.w	sub_9404
00009800 6A00                       		bpl.s	loc_93C0
00009802 6100 0000                  		bsr.w	SpeedToPos
00009806 0668 0018 0012             		addi.w	#$18,$12(a0)
0000980C 4A68 0012                  		tst.w	$12(a0)
00009810 6B00                       		bmi.s	loc_93AA
00009812 4EB9 0000 0000             		jsr	ObjHitFloor
00009818 4A41                       		tst.w	d1
0000981A 6A00                       		bpl.s	loc_93AA
0000981C 4628 0029                  		not.b	$29(a0)
00009820 6600                       		bne.s	loc_93A0
00009822 4468 0010                  		neg.w	$10(a0)
00009826 0868 0000 0001             		bchg	#0,1(a0)
0000982C                            
0000982C                            loc_93A0:
0000982C D368 000C                  		add.w	d1,$C(a0)
00009830 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009836                            
00009836                            loc_93AA:
00009836 5328 001E                  		subq.b	#1,$1E(a0)
0000983A 6A00                       		bpl.s	loc_93C0
0000983C 117C 0001 001E             		move.b	#1,$1E(a0)
00009842 5228 001A                  		addq.b	#1,$1A(a0)
00009846 0228 0001 001A             		andi.b	#1,$1A(a0)
0000984C                            
0000984C                            loc_93C0:
0000984C 6000 FE62                  		bra.w	loc_9224
00009850                            ; ===========================================================================
00009850                            
00009850                            loc_93C4:
00009850 117C 0001 001A             		move.b	#1,$1A(a0)
00009856 4A68 0012                  		tst.w	$12(a0)
0000985A 6B00                       		bmi.s	locret_93EA
0000985C 117C 0000 001A             		move.b	#0,$1A(a0)
00009862 4EB9 0000 0000             		jsr	ObjHitFloor
00009868 4A41                       		tst.w	d1
0000986A 6A00                       		bpl.s	locret_93EA
0000986C D368 000C                  		add.w	d1,$C(a0)
00009870 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009876                            
00009876                            locret_93EA:
00009876 4E75                       		rts	
00009878                            ; ===========================================================================
00009878                            
00009878                            loc_93EC:
00009878 08E8 0000 0001             		bset	#0,1(a0)
0000987E 3028 0008                  		move.w	8(a0),d0
00009882 9078 D008                  		sub.w	($FFFFD008).w,d0
00009886 6400                       		bcc.s	locret_9402
00009888 08A8 0000 0001             		bclr	#0,1(a0)
0000988E                            
0000988E                            locret_9402:
0000988E 4E75                       		rts	
00009890                            
00009890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009890                            
00009890                            
00009890                            sub_9404:
00009890 3038 D008                  		move.w	($FFFFD008).w,d0
00009894 9068 0008                  		sub.w	8(a0),d0
00009898 0440 00B8                  		subi.w	#$B8,d0
0000989C 4E75                       		rts	
0000989E                            ; End of function sub_9404
0000989E                            
0000989E                            ; ===========================================================================
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            ; Object 29 - points that appear when you destroy something
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            
0000989E                            Obj29:					; XREF: Obj_Index
0000989E 7000                       		moveq	#0,d0
000098A0 1028 0024                  		move.b	$24(a0),d0
000098A4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000098A8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000098AC 6000 0000                  		bra.w	DisplaySprite
000098B0                            ; ===========================================================================
000098B0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000098B2 0000                       		dc.w Obj29_Slower-Obj29_Index
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj29_Main:				; XREF: Obj29_Index
000098B4 5428 0024                  		addq.b	#2,$24(a0)
000098B8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000098C0 317C 2797 0002             		move.w	#$2797,2(a0)
000098C6 117C 0004 0001             		move.b	#4,1(a0)
000098CC 117C 0001 0018             		move.b	#1,$18(a0)
000098D2 117C 0008 0019             		move.b	#8,$19(a0)
000098D8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098DE                            
000098DE                            Obj29_Slower:				; XREF: Obj29_Index
000098DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098E2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098E6 6100 0000                  		bsr.w	SpeedToPos
000098EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098F0 4E75                       		rts	
000098F2                            ; ===========================================================================
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            Map_obj28:
000098F2                            	include "_maps\obj28.asm"
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2 0000                       		dc.w byte_9472-Map_obj28
000098F4 0000                       		dc.w byte_9478-Map_obj28
000098F6 0000                       		dc.w byte_946C-Map_obj28
000098F8 01                         byte_946C:	dc.b 1
000098F9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098FE 01                         byte_9472:	dc.b 1
000098FF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009904 01                         byte_9478:	dc.b 1
00009905 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000990A                            		even
0000990A                            		even
0000990A                            
0000990A                            Map_obj28a:
0000990A                            	include "_maps\obj28a.asm"
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            ; Sprite mappings - animals
0000990A                            ; ---------------------------------------------------------------------------
0000990A 0000                       		dc.w byte_948A-Map_obj28a
0000990C 0000                       		dc.w byte_9490-Map_obj28a
0000990E 0000                       		dc.w byte_9484-Map_obj28a
00009910 01                         byte_9484:	dc.b 1
00009911 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009916 01                         byte_948A:	dc.b 1
00009917 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000991C 01                         byte_9490:	dc.b 1
0000991D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009922                            		even
00009922                            		even
00009922                            
00009922                            Map_obj28b:
00009922                            	include "_maps\obj28b.asm"
00009922                            ; ---------------------------------------------------------------------------
00009922                            ; Sprite mappings - animals
00009922                            ; ---------------------------------------------------------------------------
00009922 0000                       		dc.w byte_94A2-Map_obj28b
00009924 0000                       		dc.w byte_94A8-Map_obj28b
00009926 0000                       		dc.w byte_949C-Map_obj28b
00009928 01                         byte_949C:	dc.b 1
00009929 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000992E 01                         byte_94A2:	dc.b 1
0000992F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009934 01                         byte_94A8:	dc.b 1
00009935 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000993A                            		even
0000993A                            		even
0000993A                            
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            Map_obj29:
0000993A                            	include "_maps\obj29.asm"
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000993E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009942 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009946 0000                       		dc.w byte_94E5-Map_obj29
00009948 01                         byte_94BC:	dc.b 1
00009949 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000994E 01                         byte_94C2:	dc.b 1
0000994F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009954 01                         byte_94C8:	dc.b 1
00009955 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000995A 01                         byte_94CE:	dc.b 1
0000995B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009960 01                         byte_94D4:	dc.b 1
00009961 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009966 02                         byte_94DA:	dc.b 2
00009967 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000996C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009971 02                         byte_94E5:	dc.b 2
00009972 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009977 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000997C                            		even
0000997C                            		even
0000997C                            
0000997C                            ; ===========================================================================
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            
0000997C                            Obj1F:					; XREF: Obj_Index
0000997C 7000                       		moveq	#0,d0
0000997E 1028 0024                  		move.b	$24(a0),d0
00009982 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009986 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000998A                            ; ===========================================================================
0000998A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000998C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000998E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009990 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009992 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009994                            ; ===========================================================================
00009994                            
00009994                            Obj1F_Main:				; XREF: Obj1F_Index
00009994 117C 0010 0016             		move.b	#$10,$16(a0)
0000999A 117C 0008 0017             		move.b	#8,$17(a0)
000099A0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099A8 317C 0400 0002             		move.w	#$400,2(a0)
000099AE 117C 0004 0001             		move.b	#4,1(a0)
000099B4 117C 0003 0018             		move.b	#3,$18(a0)
000099BA 117C 0006 0020             		move.b	#6,$20(a0)
000099C0 117C 0015 0019             		move.b	#$15,$19(a0)
000099C6 6100 0000                  		bsr.w	ObjectFall
000099CA 4EB9 0000 0000             		jsr	ObjHitFloor
000099D0 4A41                       		tst.w	d1
000099D2 6A00                       		bpl.s	locret_955A
000099D4 D368 000C                  		add.w	d1,$C(a0)
000099D8 1143 0026                  		move.b	d3,$26(a0)
000099DC 317C 0000 0012             		move.w	#0,$12(a0)
000099E2 5428 0024                  		addq.b	#2,$24(a0)
000099E6                            
000099E6                            locret_955A:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj1F_Action:				; XREF: Obj1F_Index
000099E8 7000                       		moveq	#0,d0
000099EA 1028 0025                  		move.b	$25(a0),d0
000099EE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099F2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099F6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000099FC 6100 0000                  		bsr.w	AnimateSprite
00009A00 6000 0000                  		bra.w	MarkObjGone
00009A04                            ; ===========================================================================
00009A04 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A06 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A08                            ; ===========================================================================
00009A08                            
00009A08                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A0C 6A00                       		bpl.s	locret_95B6
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00                       		bpl.s	Obj1F_Move
00009A14 0868 0001 0032             		bchg	#1,$32(a0)
00009A1A 6600                       		bne.s	Obj1F_MakeFire
00009A1C                            
00009A1C                            Obj1F_Move:
00009A1C 5428 0025                  		addq.b	#2,$25(a0)
00009A20 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A26 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A2C 6100 0000                  		bsr.w	Obj1F_SetAni
00009A30 5600                       		addq.b	#3,d0
00009A32 1140 001C                  		move.b	d0,$1C(a0)
00009A36 0868 0000 0022             		bchg	#0,$22(a0)
00009A3C 6600                       		bne.s	locret_95B6
00009A3E 4468 0010                  		neg.w	$10(a0)		; change direction
00009A42                            
00009A42                            locret_95B6:
00009A42 4E75                       		rts	
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A44 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A4A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A50 6100 0000                  		bsr.w	SingleObjLoad
00009A54 6600                       		bne.s	Obj1F_MakeFire2
00009A56 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A5A 137C 0006 0024             		move.b	#6,$24(a1)
00009A60 3368 0008 0008             		move.w	8(a0),8(a1)
00009A66 0469 0010 0008             		subi.w	#$10,8(a1)
00009A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A72 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A78                            
00009A78                            Obj1F_MakeFire2:
00009A78 6100 0000                  		bsr.w	SingleObjLoad
00009A7C 6600                       		bne.s	locret_9618
00009A7E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A82 137C 0006 0024             		move.b	#6,$24(a1)
00009A88 3368 0008 0008             		move.w	8(a0),8(a1)
00009A8E 0669 0010 0008             		addi.w	#$10,8(a1)
00009A94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A9A 337C 0100 0010             		move.w	#$100,$10(a1)
00009AA0                            
00009AA0                            locret_9618:
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            
00009AA2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009AA2 5368 0030                  		subq.w	#1,$30(a0)
00009AA6 6B00                       		bmi.s	loc_966E
00009AA8 6100 0000                  		bsr.w	SpeedToPos
00009AAC 0868 0000 0032             		bchg	#0,$32(a0)
00009AB2 6600                       		bne.s	loc_9654
00009AB4 3628 0008                  		move.w	8(a0),d3
00009AB8 0643 0010                  		addi.w	#$10,d3
00009ABC 0828 0000 0022             		btst	#0,$22(a0)
00009AC2 6700                       		beq.s	loc_9640
00009AC4 0443 0020                  		subi.w	#$20,d3
00009AC8                            
00009AC8                            loc_9640:
00009AC8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ACE 0C41 FFF8                  		cmpi.w	#-8,d1
00009AD2 6D00                       		blt.s	loc_966E
00009AD4 0C41 000C                  		cmpi.w	#$C,d1
00009AD8 6C00                       		bge.s	loc_966E
00009ADA 4E75                       		rts	
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009ADC 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE2 D368 000C                  		add.w	d1,$C(a0)
00009AE6 1143 0026                  		move.b	d3,$26(a0)
00009AEA 6100 0000                  		bsr.w	Obj1F_SetAni
00009AEE 5600                       		addq.b	#3,d0
00009AF0 1140 001C                  		move.b	d0,$1C(a0)
00009AF4 4E75                       		rts	
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AF6 5528 0025                  		subq.b	#2,$25(a0)
00009AFA 317C 003B 0030             		move.w	#59,$30(a0)
00009B00 317C 0000 0010             		move.w	#0,$10(a0)
00009B06 6100 0000                  		bsr.w	Obj1F_SetAni
00009B0A 1140 001C                  		move.b	d0,$1C(a0)
00009B0E 4E75                       		rts	
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            
00009B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B10                            
00009B10                            
00009B10                            Obj1F_SetAni:				; XREF: loc_966E
00009B10 7000                       		moveq	#0,d0
00009B12 1628 0026                  		move.b	$26(a0),d3
00009B16 6B00                       		bmi.s	loc_96A4
00009B18 0C03 0006                  		cmpi.b	#6,d3
00009B1C 6500                       		bcs.s	locret_96A2
00009B1E 7001                       		moveq	#1,d0
00009B20 0828 0000 0022             		btst	#0,$22(a0)
00009B26 6600                       		bne.s	locret_96A2
00009B28 7002                       		moveq	#2,d0
00009B2A                            
00009B2A                            locret_96A2:
00009B2A 4E75                       		rts	
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            loc_96A4:				; XREF: Obj1F_SetAni
00009B2C 0C03 00FA                  		cmpi.b	#-6,d3
00009B30 6200                       		bhi.s	locret_96B6
00009B32 7002                       		moveq	#2,d0
00009B34 0828 0000 0022             		btst	#0,$22(a0)
00009B3A 6600                       		bne.s	locret_96B6
00009B3C 7001                       		moveq	#1,d0
00009B3E                            
00009B3E                            locret_96B6:
00009B3E 4E75                       		rts	
00009B40                            ; End of function Obj1F_SetAni
00009B40                            
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B40 6100 0000                  		bsr.w	DeleteObject
00009B44 4E75                       		rts	
00009B46                            ; ===========================================================================
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            ; Sub-object - missile that the	Crabmeat throws
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            
00009B46                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B46 5428 0024                  		addq.b	#2,$24(a0)
00009B4A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B52 317C 0400 0002             		move.w	#$400,2(a0)
00009B58 117C 0004 0001             		move.b	#4,1(a0)
00009B5E 117C 0003 0018             		move.b	#3,$18(a0)
00009B64 117C 0087 0020             		move.b	#$87,$20(a0)
00009B6A 117C 0008 0019             		move.b	#8,$19(a0)
00009B70 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B76 117C 0007 001C             		move.b	#7,$1C(a0)
00009B7C                            
00009B7C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B82 6100 0000                  		bsr.w	AnimateSprite
00009B86 6100 0000                  		bsr.w	ObjectFall
00009B8A 6100 0000                  		bsr.w	DisplaySprite
00009B8E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B92 0640 00E0                  		addi.w	#$E0,d0
00009B96 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B9A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            Obj1F_Delete2:
00009B9E 6000 0000                  		bra.w	DeleteObject
00009BA2                            ; ===========================================================================
00009BA2                            Ani_obj1F:
00009BA2                            	include "_anim\obj1F.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Animation script - Crabmeat enemy
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009BA8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009BAE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009BB2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009BB6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009BBA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009BBE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009BC4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009BCA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009BD0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BD4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BD8                            		even
00009BD8                            		even
00009BD8                            
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            Map_obj1F:
00009BD8                            	include "_maps\obj1F.asm"
00009BD8                            Map_1514:
00009BD8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009BDA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009BDC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009BDE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009BE0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009BE2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009BE4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009BE6 03                         Map_1514_E: 	dc.b $3
00009BE7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BEC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BF1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BF6 03                         Map_1514_1E: 	dc.b $3
00009BF7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BFC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C01 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C06 03                         Map_1514_2E: 	dc.b $3
00009C07 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C0C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C11 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C16 03                         Map_1514_3E: 	dc.b $3
00009C17 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C1C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C21 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C26 03                         Map_1514_4E: 	dc.b $3
00009C27 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C2C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C31 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C36 01                         Map_1514_5E: 	dc.b $1
00009C37 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009C3C 01                         Map_1514_64: 	dc.b $1
00009C3D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009C42                            	even
00009C42                            	even
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            
00009C42                            Obj22:					; XREF: Obj_Index
00009C42 7000                       		moveq	#0,d0
00009C44 1028 0024                  		move.b	$24(a0),d0
00009C48 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C4C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C50                            ; ===========================================================================
00009C50 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C52 0000                       		dc.w Obj22_Action-Obj22_Index
00009C54 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            Obj22_Main:				; XREF: Obj22_Index
00009C56 5428 0024                  		addq.b	#2,$24(a0)
00009C5A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C62 317C 0444 0002             		move.w	#$444,2(a0)
00009C68 117C 0004 0001             		move.b	#4,1(a0)
00009C6E 117C 0003 0018             		move.b	#3,$18(a0)
00009C74 117C 0008 0020             		move.b	#8,$20(a0)
00009C7A 117C 0018 0019             		move.b	#$18,$19(a0)
00009C80                            
00009C80                            Obj22_Action:				; XREF: Obj22_Index
00009C80 7000                       		moveq	#0,d0
00009C82 1028 0025                  		move.b	$25(a0),d0
00009C86 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009C8A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009C8E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009C94 6100 0000                  		bsr.w	AnimateSprite
00009C98 6000 0000                  		bra.w	MarkObjGone
00009C9C                            ; ===========================================================================
00009C9C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009C9E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj22_Move:				; XREF: Obj22_Index2
00009CA0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CA4 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009CA6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009CAC 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009CAE 5428 0025                  		addq.b	#2,$25(a0)
00009CB2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009CB8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009CBE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009CC4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CCA 6600                       		bne.s	locret_986C	; if not, branch
00009CCC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009CD0                            
00009CD0                            locret_986C:
00009CD0 4E75                       		rts	
00009CD2                            ; ===========================================================================
00009CD2                            
00009CD2                            Obj22_Fire:				; XREF: Obj22_Move
00009CD2 6100 0000                  		bsr.w	SingleObjLoad
00009CD6 6600                       		bne.s	locret_98D0
00009CD8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009CDC 3368 0008 0008             		move.w	8(a0),8(a1)
00009CE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CE8 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009CEE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009CF4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009CFA 303C 0018                  		move.w	#$18,d0
00009CFE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D04 6600                       		bne.s	loc_98AA	; if not, branch
00009D06 4440                       		neg.w	d0
00009D08 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D0C                            
00009D0C                            loc_98AA:
00009D0C D169 0008                  		add.w	d0,8(a1)
00009D10 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D16 337C 000E 0032             		move.w	#$E,$32(a1)
00009D1C 2348 003C                  		move.l	a0,$3C(a1)
00009D20 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D26 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D2C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D32                            
00009D32                            locret_98D0:
00009D32 4E75                       		rts	
00009D34                            ; ===========================================================================
00009D34                            
00009D34                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D34 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D38 6B00                       		bmi.s	Obj22_ChgDir
00009D3A 6100 0000                  		bsr.w	SpeedToPos
00009D3E 4A28 0034                  		tst.b	$34(a0)
00009D42 6600                       		bne.s	locret_992A
00009D44 3038 D008                  		move.w	($FFFFD008).w,d0
00009D48 9068 0008                  		sub.w	8(a0),d0
00009D4C 6A00                       		bpl.s	Obj22_SetNrSonic
00009D4E 4440                       		neg.w	d0
00009D50                            
00009D50                            Obj22_SetNrSonic:
00009D50 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D54 6400                       		bcc.s	locret_992A	; if not, branch
00009D56 4A28 0001                  		tst.b	1(a0)
00009D5A 6A00                       		bpl.s	locret_992A
00009D5C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D62 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D68 6000                       		bra.s	Obj22_Stop
00009D6A                            ; ===========================================================================
00009D6A                            
00009D6A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D6A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D70 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D76 317C 003B 0032             		move.w	#59,$32(a0)
00009D7C                            
00009D7C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009D7C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009D80 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009D86 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009D8C                            
00009D8C                            locret_992A:
00009D8C 4E75                       		rts	
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            Obj22_Delete:				; XREF: Obj22_Index
00009D8E 6100 0000                  		bsr.w	DeleteObject
00009D92 4E75                       		rts	
00009D94                            ; ===========================================================================
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            ; Object 23 - missile that Buzz	Bomber throws
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            
00009D94                            Obj23:					; XREF: Obj_Index
00009D94 7000                       		moveq	#0,d0
00009D96 1028 0024                  		move.b	$24(a0),d0
00009D9A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009D9E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009DA2                            ; ===========================================================================
00009DA2 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009DA4 0000                       		dc.w Obj23_Animate-Obj23_Index
00009DA6 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009DA8 0000                       		dc.w Obj23_Delete-Obj23_Index
00009DAA 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009DAC                            ; ===========================================================================
00009DAC                            
00009DAC                            Obj23_Main:				; XREF: Obj23_Index
00009DAC 5368 0032                  		subq.w	#1,$32(a0)
00009DB0 6A00                       		bpl.s	Obj23_ChkCancel
00009DB2 5428 0024                  		addq.b	#2,$24(a0)
00009DB6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009DBE 317C 2444 0002             		move.w	#$2444,2(a0)
00009DC4 117C 0004 0001             		move.b	#4,1(a0)
00009DCA 117C 0003 0018             		move.b	#3,$18(a0)
00009DD0 117C 0008 0019             		move.b	#8,$19(a0)
00009DD6 0228 0003 0022             		andi.b	#3,$22(a0)
00009DDC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009DE0 6700                       		beq.s	Obj23_Animate	; if not, branch
00009DE2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009DE8 117C 0087 0020             		move.b	#$87,$20(a0)
00009DEE 117C 0001 001C             		move.b	#1,$1C(a0)
00009DF4 6000                       		bra.s	Obj23_Animate2
00009DF6                            ; ===========================================================================
00009DF6                            
00009DF6                            Obj23_Animate:				; XREF: Obj23_Index
00009DF6 6100                       		bsr.s	Obj23_ChkCancel
00009DF8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DFE 6100 0000                  		bsr.w	AnimateSprite
00009E02 6000 0000                  		bra.w	DisplaySprite
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E06                            ; destroyed, and if it has, then cancel	the missile
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            
00009E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E06                            
00009E06                            
00009E06                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E06 2268 003C                  		movea.l	$3C(a0),a1
00009E0A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E0E 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E10 4E75                       		rts	
00009E12                            ; End of function Obj23_ChkCancel
00009E12                            
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E12 0828 0007 0022             		btst	#7,$22(a0)
00009E18 6600                       		bne.s	Obj23_Explode
00009E1A 117C 0087 0020             		move.b	#$87,$20(a0)
00009E20 117C 0001 001C             		move.b	#1,$1C(a0)
00009E26 6100 0000                  		bsr.w	SpeedToPos
00009E2A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E30 6100 0000                  		bsr.w	AnimateSprite
00009E34 6100 0000                  		bsr.w	DisplaySprite
00009E38 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E3C 0640 00E0                  		addi.w	#$E0,d0
00009E40 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E44 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E46 4E75                       		rts	
00009E48                            ; ===========================================================================
00009E48                            
00009E48                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E48 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E4C 117C 0000 0024             		move.b	#0,$24(a0)
00009E52 6000 F2DE                  		bra.w	Obj24
00009E56                            ; ===========================================================================
00009E56                            
00009E56                            Obj23_Delete:				; XREF: Obj23_Index
00009E56 6100 0000                  		bsr.w	DeleteObject
00009E5A 4E75                       		rts	
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E5C 4A28 0001                  		tst.b	1(a0)
00009E60 6AF4                       		bpl.s	Obj23_Delete
00009E62 6100 0000                  		bsr.w	SpeedToPos
00009E66                            
00009E66                            Obj23_Animate2:				; XREF: Obj23_Main
00009E66 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E6C 6100 0000                  		bsr.w	AnimateSprite
00009E70 6100 0000                  		bsr.w	DisplaySprite
00009E74 4E75                       		rts	
00009E76                            ; ===========================================================================
00009E76                            Ani_obj22:
00009E76                            	include "_anim\obj22.asm"
00009E76                            ; ---------------------------------------------------------------------------
00009E76                            ; Animation script - Buzz Bomber enemy
00009E76                            ; ---------------------------------------------------------------------------
00009E76 0000                       		dc.w byte_9A1E-Ani_obj22
00009E78 0000                       		dc.w byte_9A22-Ani_obj22
00009E7A 0000                       		dc.w byte_9A26-Ani_obj22
00009E7C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009E80 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009E84 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009E88                            		even
00009E88                            		even
00009E88                            
00009E88                            Ani_obj23:
00009E88                            	include "_anim\obj23.asm"
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            ; Animation script - missile that Buzz Bomber throws
00009E88                            ; ---------------------------------------------------------------------------
00009E88 0000                       		dc.w byte_9A2E-Ani_obj23
00009E8A 0000                       		dc.w byte_9A32-Ani_obj23
00009E8C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009E90 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009E94                            		even
00009E94                            		even
00009E94                            
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            ; Sprite mappings - Buzz Bomber	enemy
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            Map_obj22:
00009E94                            	include "_maps\obj22.asm"
00009E94                            Map_e97a:
00009E94 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009E96 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009E98 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009E9A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009E9C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009E9E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009EA0 06                         Map_e97a_C: 	dc.b $6
00009EA1 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EA6 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EAB 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EB0 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EB5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EBA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EBF 06                         Map_e97a_2B: 	dc.b $6
00009EC0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EC5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009ECA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009ECF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009ED4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009ED9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EDE 07                         Map_e97a_4A: 	dc.b $7
00009EDF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009EE4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EE9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EEE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EF3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EF8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EFD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F02 07                         Map_e97a_6E: 	dc.b $7
00009F03 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F08 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F0D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F12 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F17 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F1C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F21 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F26 06                         Map_e97a_92: 	dc.b $6
00009F27 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F2C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F31 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F36 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F3B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F40 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F45 04                         Map_e97a_B1: 	dc.b $4
00009F46 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F4B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F50 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F55 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F5A                            	even
00009F5A                            	even
00009F5A                            
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            Map_obj23:
00009F5A                            	include "_maps\obj23.asm"
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F5E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F62 01                         byte_9B0E:	dc.b 1
00009F63 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F68 01                         byte_9B14:	dc.b 1
00009F69 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F6E 01                         byte_9B1A:	dc.b 1
00009F6F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F74 01                         byte_9B20:	dc.b 1
00009F75 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F7A                            		even
00009F7A                            		even
00009F7A                            
00009F7A                            ; ===========================================================================
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            ; Object 25 - rings
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            
00009F7A                            Obj25:					; XREF: Obj_Index
00009F7A 7000                       		moveq	#0,d0
00009F7C 1028 0024                  		move.b	$24(a0),d0
00009F80 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009F84 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009F88                            ; ===========================================================================
00009F88 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009F8A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009F8C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009F8E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009F90 0000                       		dc.w Obj25_Delete-Obj25_Index
00009F92                            ; ---------------------------------------------------------------------------
00009F92                            ; Distances between rings (format: horizontal, vertical)
00009F92                            ; ---------------------------------------------------------------------------
00009F92 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009F94 1800                       		dc.b $18, 0		; horizontal normal
00009F96 2000                       		dc.b $20, 0		; horizontal wide
00009F98 0010                       		dc.b 0,	$10		; vertical tight
00009F9A 0018                       		dc.b 0,	$18		; vertical normal
00009F9C 0020                       		dc.b 0,	$20		; vertical wide
00009F9E 1010                       		dc.b $10, $10		; diagonal
00009FA0 1818                       		dc.b $18, $18
00009FA2 2020                       		dc.b $20, $20
00009FA4 F010                       		dc.b $F0, $10
00009FA6 E818                       		dc.b $E8, $18
00009FA8 E020                       		dc.b $E0, $20
00009FAA 1008                       		dc.b $10, 8
00009FAC 1810                       		dc.b $18, $10
00009FAE F008                       		dc.b $F0, 8
00009FB0 E810                       		dc.b $E8, $10
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj25_Main:				; XREF: Obj25_Index
00009FB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FB6 7000                       		moveq	#0,d0
00009FB8 1028 0023                  		move.b	$23(a0),d0
00009FBC 45F2 0002                  		lea	2(a2,d0.w),a2
00009FC0 1812                       		move.b	(a2),d4
00009FC2 1228 0028                  		move.b	$28(a0),d1
00009FC6 1001                       		move.b	d1,d0
00009FC8 0241 0007                  		andi.w	#7,d1
00009FCC 0C41 0007                  		cmpi.w	#7,d1
00009FD0 6600                       		bne.s	loc_9B80
00009FD2 7206                       		moveq	#6,d1
00009FD4                            
00009FD4                            loc_9B80:
00009FD4 4841                       		swap	d1
00009FD6 323C 0000                  		move.w	#0,d1
00009FDA E808                       		lsr.b	#4,d0
00009FDC D040                       		add.w	d0,d0
00009FDE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009FE2 4885                       		ext.w	d5
00009FE4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009FE8 4886                       		ext.w	d6
00009FEA 2248                       		movea.l	a0,a1
00009FEC 3428 0008                  		move.w	8(a0),d2
00009FF0 3628 000C                  		move.w	$C(a0),d3
00009FF4 E20C                       		lsr.b	#1,d4
00009FF6 6500                       		bcs.s	loc_9C02
00009FF8 0892 0007                  		bclr	#7,(a2)
00009FFC 6000                       		bra.s	loc_9BBA
00009FFE                            ; ===========================================================================
00009FFE                            
00009FFE                            Obj25_MakeRings:
00009FFE 4841                       		swap	d1
0000A000 E20C                       		lsr.b	#1,d4
0000A002 6500                       		bcs.s	loc_9C02
0000A004 0892 0007                  		bclr	#7,(a2)
0000A008 6100 0000                  		bsr.w	SingleObjLoad
0000A00C 6600                       		bne.s	loc_9C0E
0000A00E                            
0000A00E                            loc_9BBA:				; XREF: Obj25_Main
0000A00E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A012 5429 0024                  		addq.b	#2,$24(a1)
0000A016 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A01A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A020 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A024 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A02C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A032 137C 0004 0001             		move.b	#4,1(a1)
0000A038 137C 0002 0018             		move.b	#2,$18(a1)
0000A03E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A044 137C 0008 0019             		move.b	#8,$19(a1)
0000A04A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A050 1341 0034                  		move.b	d1,$34(a1)
0000A054                            
0000A054                            loc_9C02:
0000A054 5241                       		addq.w	#1,d1
0000A056 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A058 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A05A 4841                       		swap	d1
0000A05C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A060                            
0000A060                            loc_9C0E:
0000A060 0812 0000                  		btst	#0,(a2)
0000A064 6600 0000                  		bne.w	DeleteObject
0000A068                            
0000A068                            Obj25_Animate:				; XREF: Obj25_Index
0000A068 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A06E 6100 0000                  		bsr.w	DisplaySprite
0000A072 3028 0032                  		move.w	$32(a0),d0
0000A076 0240 FF80                  		andi.w	#$FF80,d0
0000A07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A07E 0441 0080                  		subi.w	#$80,d1
0000A082 0241 FF80                  		andi.w	#$FF80,d1
0000A086 9041                       		sub.w	d1,d0
0000A088 0C40 0280                  		cmpi.w	#$280,d0
0000A08C 6200                       		bhi.s	Obj25_Delete
0000A08E 4E75                       		rts	
0000A090                            ; ===========================================================================
0000A090                            
0000A090                            Obj25_Collect:				; XREF: Obj25_Index
0000A090 5428 0024                  		addq.b	#2,$24(a0)
0000A094 117C 0000 0020             		move.b	#0,$20(a0)
0000A09A 117C 0001 0018             		move.b	#1,$18(a0)
0000A0A0 6100 0000                  		bsr.w	CollectRing
0000A0A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0A8 7000                       		moveq	#0,d0
0000A0AA 1028 0023                  		move.b	$23(a0),d0
0000A0AE 1228 0034                  		move.b	$34(a0),d1
0000A0B2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A0B6                            
0000A0B6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A0B6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0BC 6100 0000                  		bsr.w	AnimateSprite
0000A0C0 6000 0000                  		bra.w	DisplaySprite
0000A0C4                            ; ===========================================================================
0000A0C4                            
0000A0C4                            Obj25_Delete:				; XREF: Obj25_Index
0000A0C4 6000 0000                  		bra.w	DeleteObject
0000A0C8                            
0000A0C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0C8                            
0000A0C8                            
0000A0C8                            CollectRing:				; XREF: Obj25_Collect
0000A0C8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A0CC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0D2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0D6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A0DC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0DE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A0E4 6700                       		beq.s	loc_9CA4
0000A0E6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A0EC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0EE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A0F4 6600                       		bne.s	Obj25_PlaySnd
0000A0F6                            
0000A0F6                            loc_9CA4:
0000A0F6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A0FA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A0FE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A102                            
0000A102                            Obj25_PlaySnd:
0000A102 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A108                            ; End of function CollectRing
0000A108                            
0000A108                            ; ===========================================================================
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            
0000A108                            Obj37:					; XREF: Obj_Index
0000A108 7000                       		moveq	#0,d0
0000A10A 1028 0024                  		move.b	$24(a0),d0
0000A10E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A112 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A116                            ; ===========================================================================
0000A116 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A118 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A11A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A11C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A11E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A120                            ; ===========================================================================
0000A120                            
0000A120                            Obj37_CountRings:			; XREF: Obj37_Index
0000A120 2248                       		movea.l	a0,a1
0000A122 7A00                       		moveq	#0,d5
0000A124 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A128 7020                       		moveq	#32,d0
0000A12A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A12C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A12E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A130                            
0000A130                            loc_9CDE:
0000A130 5345                       		subq.w	#1,d5
0000A132 383C 0288                  		move.w	#$288,d4
0000A136 6000                       		bra.s	Obj37_MakeRings
0000A138                            ; ===========================================================================
0000A138                            
0000A138                            Obj37_Loop:
0000A138 6100 0000                  		bsr.w	SingleObjLoad
0000A13C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A140                            
0000A140                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A140 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A144 5429 0024                  		addq.b	#2,$24(a1)
0000A148 137C 0008 0016             		move.b	#8,$16(a1)
0000A14E 137C 0008 0017             		move.b	#8,$17(a1)
0000A154 3368 0008 0008             		move.w	8(a0),8(a1)
0000A15A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A160 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A168 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A16E 137C 0004 0001             		move.b	#4,1(a1)
0000A174 137C 0003 0018             		move.b	#3,$18(a1)
0000A17A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A180 137C 0008 0019             		move.b	#8,$19(a1)
0000A186 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A18C 4A44                       		tst.w	d4
0000A18E 6B00                       		bmi.s	loc_9D62
0000A190 3004                       		move.w	d4,d0
0000A192 6100 8A8E                  		bsr.w	CalcSine
0000A196 3404                       		move.w	d4,d2
0000A198 E04A                       		lsr.w	#8,d2
0000A19A E560                       		asl.w	d2,d0
0000A19C E561                       		asl.w	d2,d1
0000A19E 3400                       		move.w	d0,d2
0000A1A0 3601                       		move.w	d1,d3
0000A1A2 0604 0010                  		addi.b	#$10,d4
0000A1A6 6400                       		bcc.s	loc_9D62
0000A1A8 0444 0080                  		subi.w	#$80,d4
0000A1AC 6400                       		bcc.s	loc_9D62
0000A1AE 383C 0288                  		move.w	#$288,d4
0000A1B2                            
0000A1B2                            loc_9D62:
0000A1B2 3342 0010                  		move.w	d2,$10(a1)
0000A1B6 3343 0012                  		move.w	d3,$12(a1)
0000A1BA 4442                       		neg.w	d2
0000A1BC 4444                       		neg.w	d4
0000A1BE 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A1C2                            
0000A1C2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A1C2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A1C8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A1CE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1D4 303C 00C6                  		move.w	#$C6,d0
0000A1D8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A1DE                            
0000A1DE                            Obj37_Bounce:				; XREF: Obj37_Index
0000A1DE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A1E4 6100 0000                  		bsr.w	SpeedToPos
0000A1E8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1EE 6B00                       		bmi.s	Obj37_ChkDel
0000A1F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A1F4 D007                       		add.b	d7,d0
0000A1F6 0200 0003                  		andi.b	#3,d0
0000A1FA 6600                       		bne.s	Obj37_ChkDel
0000A1FC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A202 4A41                       		tst.w	d1
0000A204 6A00                       		bpl.s	Obj37_ChkDel
0000A206 D368 000C                  		add.w	d1,$C(a0)
0000A20A 3028 0012                  		move.w	$12(a0),d0
0000A20E E440                       		asr.w	#2,d0
0000A210 9168 0012                  		sub.w	d0,$12(a0)
0000A214 4468 0012                  		neg.w	$12(a0)
0000A218                            
0000A218                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A218 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A21C 6700                       		beq.s	Obj37_Delete
0000A21E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A222 0640 00E0                  		addi.w	#$E0,d0
0000A226 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A22A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A22C 6000 0000                  		bra.w	DisplaySprite
0000A230                            ; ===========================================================================
0000A230                            
0000A230                            Obj37_Collect:				; XREF: Obj37_Index
0000A230 5428 0024                  		addq.b	#2,$24(a0)
0000A234 117C 0000 0020             		move.b	#0,$20(a0)
0000A23A 117C 0001 0018             		move.b	#1,$18(a0)
0000A240 6100 FE86                  		bsr.w	CollectRing
0000A244                            
0000A244                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A244 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A24A 6100 0000                  		bsr.w	AnimateSprite
0000A24E 6000 0000                  		bra.w	DisplaySprite
0000A252                            ; ===========================================================================
0000A252                            
0000A252                            Obj37_Delete:				; XREF: Obj37_Index
0000A252 6000 0000                  		bra.w	DeleteObject
0000A256                            ; ===========================================================================
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            ; Object 4B - giant ring for entry to special stage
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            
0000A256                            Obj4B:					; XREF: Obj_Index
0000A256 7000                       		moveq	#0,d0
0000A258 1028 0024                  		move.b	$24(a0),d0
0000A25C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A260 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A264                            ; ===========================================================================
0000A264 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A266 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A268 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A26A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            Obj4B_Main:				; XREF: Obj4B_Index
0000A26C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A274 317C 2400 0002             		move.w	#$2400,2(a0)
0000A27A 0028 0004 0001             		ori.b	#4,1(a0)
0000A280 117C 0040 0019             		move.b	#$40,$19(a0)
0000A286 4A28 0001                  		tst.b	1(a0)
0000A28A 6A00                       		bpl.s	Obj4B_Animate
0000A28C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A292 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A296 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A29C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A29E 4E75                       		rts	
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A2A0 5428 0024                  		addq.b	#2,$24(a0)
0000A2A4 117C 0002 0018             		move.b	#2,$18(a0)
0000A2AA 117C 0052 0020             		move.b	#$52,$20(a0)
0000A2B0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A2B6                            
0000A2B6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A2B6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A2BC 3028 0008                  		move.w	8(a0),d0
0000A2C0 0240 FF80                  		andi.w	#$FF80,d0
0000A2C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2C8 0441 0080                  		subi.w	#$80,d1
0000A2CC 0241 FF80                  		andi.w	#$FF80,d1
0000A2D0 9041                       		sub.w	d1,d0
0000A2D2 0C40 0280                  		cmpi.w	#$280,d0
0000A2D6 6200 0000                  		bhi.w	DeleteObject
0000A2DA 6000 0000                  		bra.w	DisplaySprite
0000A2DE                            ; ===========================================================================
0000A2DE                            
0000A2DE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A2DE 5528 0024                  		subq.b	#2,$24(a0)
0000A2E2 117C 0000 0020             		move.b	#0,$20(a0)
0000A2E8 6100 0000                  		bsr.w	SingleObjLoad
0000A2EC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A2F0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A2F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A300 2348 003C                  		move.l	a0,$3C(a1)
0000A304 3038 D008                  		move.w	($FFFFD008).w,d0
0000A308 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A30C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A30E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A314                            
0000A314                            Obj4B_PlaySnd:
0000A314 303C 00C3                  		move.w	#$C3,d0
0000A318 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A31E 6096                       		bra.s	Obj4B_Animate
0000A320                            ; ===========================================================================
0000A320                            
0000A320                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A320 6000 0000                  		bra.w	DeleteObject
0000A324                            ; ===========================================================================
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            ; Object 7C - flash effect when	you collect the	giant ring
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            
0000A324                            Obj7C:					; XREF: Obj_Index
0000A324 7000                       		moveq	#0,d0
0000A326 1028 0024                  		move.b	$24(a0),d0
0000A32A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A32E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A332                            ; ===========================================================================
0000A332 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A334 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A336 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A338                            ; ===========================================================================
0000A338                            
0000A338                            Obj7C_Main:				; XREF: Obj7C_Index
0000A338 5428 0024                  		addq.b	#2,$24(a0)
0000A33C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A344 317C 2462 0002             		move.w	#$2462,2(a0)
0000A34A 0028 0004 0001             		ori.b	#4,1(a0)
0000A350 117C 0000 0018             		move.b	#0,$18(a0)
0000A356 117C 0020 0019             		move.b	#$20,$19(a0)
0000A35C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A362                            
0000A362                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A362 6100                       		bsr.s	Obj7C_Collect
0000A364 3028 0008                  		move.w	8(a0),d0
0000A368 0240 FF80                  		andi.w	#$FF80,d0
0000A36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A370 0441 0080                  		subi.w	#$80,d1
0000A374 0241 FF80                  		andi.w	#$FF80,d1
0000A378 9041                       		sub.w	d1,d0
0000A37A 0C40 0280                  		cmpi.w	#$280,d0
0000A37E 6200 0000                  		bhi.w	DeleteObject
0000A382 6000 0000                  		bra.w	DisplaySprite
0000A386                            
0000A386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A386                            
0000A386                            
0000A386                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A386 5328 001E                  		subq.b	#1,$1E(a0)
0000A38A 6A00                       		bpl.s	locret_9F76
0000A38C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A392 5228 001A                  		addq.b	#1,$1A(a0)
0000A396 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A39C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A39E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A3A4 6600                       		bne.s	locret_9F76	; if not, branch
0000A3A6 2268 003C                  		movea.l	$3C(a0),a1
0000A3AA 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A3B0 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A3B6 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A3BC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A3C0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A3C4                            
0000A3C4                            locret_9F76:
0000A3C4 4E75                       		rts	
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            Obj7C_End:				; XREF: Obj7C_Collect
0000A3C6 5428 0024                  		addq.b	#2,$24(a0)
0000A3CA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A3D0 588F                       		addq.l	#4,sp
0000A3D2 4E75                       		rts	
0000A3D4                            ; End of function Obj7C_Collect
0000A3D4                            
0000A3D4                            ; ===========================================================================
0000A3D4                            
0000A3D4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3D4 6000 0000                  		bra.w	DeleteObject
0000A3D8                            ; ===========================================================================
0000A3D8                            Ani_obj25:
0000A3D8                            	include "_anim\obj25.asm"
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            ; Animation script - ring
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3DA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A3E0                            		even
0000A3E0                            		even
0000A3E0                            
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            Map_obj25:
0000A3E0                            	include "_maps\obj25.asm"
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A3E4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A3E8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A3EC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A3F0 01                         byte_9FA2:	dc.b 1
0000A3F1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A3F6 01                         byte_9FA8:	dc.b 1
0000A3F7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A3FC 01                         byte_9FAE:	dc.b 1
0000A3FD F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A402 01                         byte_9FB4:	dc.b 1
0000A403 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A408 01                         byte_9FBA:	dc.b 1
0000A409 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A40E 01                         byte_9FC0:	dc.b 1
0000A40F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A414 01                         byte_9FC6:	dc.b 1
0000A415 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A41A 01                         byte_9FCC:	dc.b 1
0000A41B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A420                            		even
0000A420                            		even
0000A420                            
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            Map_obj4B:
0000A420                            	include "_maps\obj4B.asm"
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A424 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A428 0A                         byte_9FDA:	dc.b $A
0000A429 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A42E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A433 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A438 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A43D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A442 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A447 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A44C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A451 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A456 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A45B 08                         byte_A00D:	dc.b 8
0000A45C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A461 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A466 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A46B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A470 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A475 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A47A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A47F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A484 04                         byte_A036:	dc.b 4
0000A485 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A48A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A48F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A494 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A499 08                         byte_A04B:	dc.b 8
0000A49A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A49F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A4A4 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A4A9 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A4AE F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A4B3 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A4B8 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A4BD 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A4C2                            		even
0000A4C2                            		even
0000A4C2                            
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            Map_obj7C:
0000A4C2                            	include "_maps\obj7C.asm"
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A4C6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A4CA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A4CE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4D2 02                         byte_A084:	dc.b 2
0000A4D3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4D8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A4DD 04                         byte_A08F:	dc.b 4
0000A4DE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A4E3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A4E8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A4ED 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A4F2 04                         byte_A0A4:	dc.b 4
0000A4F3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A4F8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A4FD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A502 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A507 04                         byte_A0B9:	dc.b 4
0000A508 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A50D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A512 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A517 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A51C 04                         byte_A0CE:	dc.b 4
0000A51D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A522 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A527 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A52C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A531 04                         byte_A0E3:	dc.b 4
0000A532 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A537 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A53C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A541 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A546 02                         byte_A0F8:	dc.b 2
0000A547 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A54C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A551 04                         byte_A103:	dc.b 4
0000A552 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A557 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A55C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A561 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A566                            		even
0000A566                            		even
0000A566                            
0000A566                            ; ===========================================================================
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Object 26 - monitors
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            
0000A566                            Obj26:					; XREF: Obj_Index
0000A566 7000                       		moveq	#0,d0
0000A568 1028 0024                  		move.b	$24(a0),d0
0000A56C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A570 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A574                            ; ===========================================================================
0000A574 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A576 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A578 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A57A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A57C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A57E                            ; ===========================================================================
0000A57E                            
0000A57E                            Obj26_Main:				; XREF: Obj26_Index
0000A57E 5428 0024                  		addq.b	#2,$24(a0)
0000A582 117C 000E 0016             		move.b	#$E,$16(a0)
0000A588 117C 000E 0017             		move.b	#$E,$17(a0)
0000A58E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A596 317C 0680 0002             		move.w	#$680,2(a0)
0000A59C 117C 0004 0001             		move.b	#4,1(a0)
0000A5A2 117C 0003 0018             		move.b	#3,$18(a0)
0000A5A8 117C 000F 0019             		move.b	#$F,$19(a0)
0000A5AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5B2 7000                       		moveq	#0,d0
0000A5B4 1028 0023                  		move.b	$23(a0),d0
0000A5B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A5BE 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A5C4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A5C6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A5CC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5D2 4E75                       		rts	
0000A5D4                            ; ===========================================================================
0000A5D4                            
0000A5D4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5D4 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5DA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A5E0                            
0000A5E0                            Obj26_Solid:				; XREF: Obj26_Index
0000A5E0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A5E4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A5E6 5500                       		subq.b	#2,d0
0000A5E8 6600                       		bne.s	Obj26_Fall
0000A5EA 7200                       		moveq	#0,d1
0000A5EC 1228 0019                  		move.b	$19(a0),d1
0000A5F0 0641 000B                  		addi.w	#$B,d1
0000A5F4 6100 D41C                  		bsr.w	ExitPlatform
0000A5F8 0829 0003 0022             		btst	#3,$22(a1)
0000A5FE 6600 0000                  		bne.w	loc_A1BC
0000A602 4228 0025                  		clr.b	$25(a0)
0000A606 6000 0000                  		bra.w	Obj26_Animate
0000A60A                            ; ===========================================================================
0000A60A                            
0000A60A                            loc_A1BC:				; XREF: Obj26_Solid
0000A60A 363C 0010                  		move.w	#$10,d3
0000A60E 3428 0008                  		move.w	8(a0),d2
0000A612 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A616 6000 0000                  		bra.w	Obj26_Animate
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A61A 6100 0000                  		bsr.w	ObjectFall
0000A61E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A624 4A41                       		tst.w	d1
0000A626 6A00 0000                  		bpl.w	Obj26_Animate
0000A62A D368 000C                  		add.w	d1,$C(a0)
0000A62E 4268 0012                  		clr.w	$12(a0)
0000A632 4228 0025                  		clr.b	$25(a0)
0000A636 6000 0000                  		bra.w	Obj26_Animate
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            loc_A1EC:				; XREF: Obj26_Solid
0000A63A 323C 001A                  		move.w	#$1A,d1
0000A63E 343C 000F                  		move.w	#$F,d2
0000A642 6100 0000                  		bsr.w	Obj26_SolidSides
0000A646 6700 0000                  		beq.w	loc_A25C
0000A64A 4A69 0012                  		tst.w	$12(a1)
0000A64E 6B00                       		bmi.s	loc_A20A
0000A650 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A656 6700                       		beq.s	loc_A25C	; if yes, branch
0000A658                            
0000A658                            loc_A20A:
0000A658 4A41                       		tst.w	d1
0000A65A 6A00                       		bpl.s	loc_A220
0000A65C 9769 000C                  		sub.w	d3,$C(a1)
0000A660 6100 D29E                  		bsr.w	loc_74AE
0000A664 117C 0002 0025             		move.b	#2,$25(a0)
0000A66A 6000 0000                  		bra.w	Obj26_Animate
0000A66E                            ; ===========================================================================
0000A66E                            
0000A66E                            loc_A220:
0000A66E 4A40                       		tst.w	d0
0000A670 6700 0000                  		beq.w	loc_A246
0000A674 6B00                       		bmi.s	loc_A230
0000A676 4A69 0010                  		tst.w	$10(a1)
0000A67A 6B00                       		bmi.s	loc_A246
0000A67C 6000                       		bra.s	loc_A236
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            loc_A230:
0000A67E 4A69 0010                  		tst.w	$10(a1)
0000A682 6A00                       		bpl.s	loc_A246
0000A684                            
0000A684                            loc_A236:
0000A684 9169 0008                  		sub.w	d0,8(a1)
0000A688 337C 0000 0014             		move.w	#0,$14(a1)
0000A68E 337C 0000 0010             		move.w	#0,$10(a1)
0000A694                            
0000A694                            loc_A246:
0000A694 0829 0001 0022             		btst	#1,$22(a1)
0000A69A 6600                       		bne.s	loc_A26A
0000A69C 08E9 0005 0022             		bset	#5,$22(a1)
0000A6A2 08E8 0005 0022             		bset	#5,$22(a0)
0000A6A8 6000                       		bra.s	Obj26_Animate
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            loc_A25C:
0000A6AA 0828 0005 0022             		btst	#5,$22(a0)
0000A6B0 6700                       		beq.s	Obj26_Animate
0000A6B2 337C 0001 001C             		move.w	#1,$1C(a1)
0000A6B8                            
0000A6B8                            loc_A26A:
0000A6B8 08A8 0005 0022             		bclr	#5,$22(a0)
0000A6BE 08A9 0005 0022             		bclr	#5,$22(a1)
0000A6C4                            
0000A6C4                            Obj26_Animate:				; XREF: Obj26_Index
0000A6C4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A6CA 6100 0000                  		bsr.w	AnimateSprite
0000A6CE                            
0000A6CE                            Obj26_Display:				; XREF: Obj26_Index
0000A6CE 6100 0000                  		bsr.w	DisplaySprite
0000A6D2 3028 0008                  		move.w	8(a0),d0
0000A6D6 0240 FF80                  		andi.w	#$FF80,d0
0000A6DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6DE 0441 0080                  		subi.w	#$80,d1
0000A6E2 0241 FF80                  		andi.w	#$FF80,d1
0000A6E6 9041                       		sub.w	d1,d0
0000A6E8 0C40 0280                  		cmpi.w	#$280,d0
0000A6EC 6200 0000                  		bhi.w	DeleteObject
0000A6F0 4E75                       		rts	
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A6F2 5428 0024                  		addq.b	#2,$24(a0)
0000A6F6 117C 0000 0020             		move.b	#0,$20(a0)
0000A6FC 6100 0000                  		bsr.w	SingleObjLoad
0000A700 6600                       		bne.s	Obj26_Explode
0000A702 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A706 3368 0008 0008             		move.w	8(a0),8(a1)
0000A70C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A712 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A718 7400                       		moveq	#0,d2	; GMZ
0000A71A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A71C                            
0000A71C                            Obj26_Explode:
0000A71C 6100 0000                  		bsr.w	SingleObjLoad
0000A720 6600                       		bne.s	Obj26_SetBroken
0000A722 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A726 5429 0024                  		addq.b	#2,$24(a1)
0000A72A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A72E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A734 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A73A                            
0000A73A                            Obj26_NextExplosion:
0000A73A 5802                       		addq.b	#4,d2
0000A73C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A740                            
0000A740                            Obj26_SetBroken:
0000A740 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A744 7000                       		moveq	#0,d0
0000A746 1028 0023                  		move.b	$23(a0),d0
0000A74A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A750 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A756 6000 0000                  		bra.w	DisplaySprite
0000A75A                            ; ===========================================================================
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            ; Object 2E - contents of monitors
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            
0000A75A                            Obj2E:					; XREF: Obj_Index
0000A75A 7000                       		moveq	#0,d0
0000A75C 1028 0024                  		move.b	$24(a0),d0
0000A760 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A764 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A768 6000 0000                  		bra.w	DisplaySprite
0000A76C                            ; ===========================================================================
0000A76C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A76E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A770 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A772                            ; ===========================================================================
0000A772                            
0000A772                            Obj2E_Main:				; XREF: Obj2E_Index
0000A772 5428 0024                  		addq.b	#2,$24(a0)
0000A776 317C 0680 0002             		move.w	#$680,2(a0)
0000A77C 117C 0024 0001             		move.b	#$24,1(a0)
0000A782 117C 0003 0018             		move.b	#3,$18(a0)
0000A788 117C 0008 0019             		move.b	#8,$19(a0)
0000A78E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A794 7000                       		moveq	#0,d0
0000A796 1028 001C                  		move.b	$1C(a0),d0
0000A79A 5400                       		addq.b	#2,d0
0000A79C 1140 001A                  		move.b	d0,$1A(a0)
0000A7A0 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A7A6 D000                       		add.b	d0,d0
0000A7A8 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A7AC 5249                       		addq.w	#1,a1
0000A7AE 2149 0004                  		move.l	a1,4(a0)
0000A7B2                            
0000A7B2                            Obj2E_Move:				; XREF: Obj2E_Index
0000A7B2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7B6 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A7BA 6100 0000                  		bsr.w	SpeedToPos
0000A7BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7C4 4E75                       		rts	
0000A7C6                            ; ===========================================================================
0000A7C6                            
0000A7C6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A7C6 5428 0024                  		addq.b	#2,$24(a0)
0000A7CA 317C 001D 001E             		move.w	#29,$1E(a0)
0000A7D0 1028 001C                  		move.b	$1C(a0),d0
0000A7D4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7D8 6600                       		bne.s	Obj2E_ChkSonic
0000A7DA 4E75                       		rts			; Eggman monitor does nothing
0000A7DC                            ; ===========================================================================
0000A7DC                            
0000A7DC                            Obj2E_ChkSonic:
0000A7DC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A7E0 6600                       		bne.s	Obj2E_ChkShoes
0000A7E2                            
0000A7E2                            ExtraLife:
0000A7E2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7E6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7EA 303C 0088                  		move.w	#$88,d0
0000A7EE 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Obj2E_ChkShoes:
0000A7F4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A7F8 6600                       		bne.s	Obj2E_ChkShield
0000A7FA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A800 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A806 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A80C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A812 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A818 303C 00E2                  		move.w	#$E2,d0
0000A81C 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A822                            ; ===========================================================================
0000A822                            
0000A822                            Obj2E_ChkShield:
0000A822 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A826 6600                       		bne.s	Obj2E_ChkInvinc
0000A828 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A82E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A834 303C 00AF                  		move.w	#$AF,d0
0000A838 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A83E                            ; ===========================================================================
0000A83E                            
0000A83E                            Obj2E_ChkInvinc:
0000A83E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A842 6600                       		bne.s	Obj2E_ChkRings
0000A844 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A84A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A850 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A856 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A85C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A862 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A868 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A86E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A874 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A87A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A880 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A884 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A886 303C 0087                  		move.w	#$87,d0
0000A88A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Obj2E_NoMusic:
0000A890 4E75                       		rts	
0000A892                            ; ===========================================================================
0000A892                            
0000A892                            Obj2E_ChkRings:
0000A892 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A896 6600                       		bne.s	Obj2E_ChkS
0000A898 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A89E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A8A4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A8AA 6500                       		bcs.s	Obj2E_RingSound
0000A8AC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A8B2 6700 FF2E                  		beq.w	ExtraLife
0000A8B6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A8BC 6500                       		bcs.s	Obj2E_RingSound
0000A8BE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A8C4 6700 FF1C                  		beq.w	ExtraLife
0000A8C8                            
0000A8C8                            Obj2E_RingSound:
0000A8C8 303C 00B5                  		move.w	#$B5,d0
0000A8CC 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8D2                            ; ===========================================================================
0000A8D2                            
0000A8D2                            Obj2E_ChkS:
0000A8D2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8D6 6600                       		bne.s	Obj2E_ChkEnd
0000A8D8                            		; nop	
0000A8D8 7201                       		moveq	#1,d1
0000A8DA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A8DE                            
0000A8DE                            Obj2E_ChkEnd:
0000A8DE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A8E0                            ; ===========================================================================
0000A8E0                            
0000A8E0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A8E0 5368 001E                  		subq.w	#1,$1E(a0)
0000A8E4 6B00 0000                  		bmi.w	DeleteObject
0000A8E8 4E75                       		rts	
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            ; Subroutine to	make the sides of a monitor solid
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            
0000A8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A8EA                            
0000A8EA                            
0000A8EA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A8EA 43F8 D000                  		lea	($FFFFD000).w,a1
0000A8EE 3029 0008                  		move.w	8(a1),d0
0000A8F2 9068 0008                  		sub.w	8(a0),d0
0000A8F6 D041                       		add.w	d1,d0
0000A8F8 6B00                       		bmi.s	loc_A4E6
0000A8FA 3601                       		move.w	d1,d3
0000A8FC D643                       		add.w	d3,d3
0000A8FE B043                       		cmp.w	d3,d0
0000A900 6200                       		bhi.s	loc_A4E6
0000A902 1629 0016                  		move.b	$16(a1),d3
0000A906 4883                       		ext.w	d3
0000A908 D443                       		add.w	d3,d2
0000A90A 3629 000C                  		move.w	$C(a1),d3
0000A90E 9668 000C                  		sub.w	$C(a0),d3
0000A912 D642                       		add.w	d2,d3
0000A914 6B00                       		bmi.s	loc_A4E6
0000A916 D442                       		add.w	d2,d2
0000A918 B642                       		cmp.w	d2,d3
0000A91A 6400                       		bcc.s	loc_A4E6
0000A91C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A920 6B00                       		bmi.s	loc_A4E6
0000A922 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A928 6400                       		bcc.s	loc_A4E6
0000A92A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A92E 6600                       		bne.s	loc_A4E6
0000A930 B240                       		cmp.w	d0,d1
0000A932 6400                       		bcc.s	loc_A4DC
0000A934 D241                       		add.w	d1,d1
0000A936 9041                       		sub.w	d1,d0
0000A938                            
0000A938                            loc_A4DC:
0000A938 0C43 0010                  		cmpi.w	#$10,d3
0000A93C 6500                       		bcs.s	loc_A4EA
0000A93E                            
0000A93E                            loc_A4E2:
0000A93E 7201                       		moveq	#1,d1
0000A940 4E75                       		rts	
0000A942                            ; ===========================================================================
0000A942                            
0000A942                            loc_A4E6:
0000A942 7200                       		moveq	#0,d1
0000A944 4E75                       		rts	
0000A946                            ; ===========================================================================
0000A946                            
0000A946                            loc_A4EA:
0000A946 7200                       		moveq	#0,d1
0000A948 1228 0019                  		move.b	$19(a0),d1
0000A94C 5841                       		addq.w	#4,d1
0000A94E 3401                       		move.w	d1,d2
0000A950 D442                       		add.w	d2,d2
0000A952 D269 0008                  		add.w	8(a1),d1
0000A956 9268 0008                  		sub.w	8(a0),d1
0000A95A 6BE2                       		bmi.s	loc_A4E2
0000A95C B242                       		cmp.w	d2,d1
0000A95E 64DE                       		bcc.s	loc_A4E2
0000A960 72FF                       		moveq	#-1,d1
0000A962 4E75                       		rts	
0000A964                            ; End of function Obj26_SolidSides
0000A964                            
0000A964                            ; ===========================================================================
0000A964                            Ani_obj26:
0000A964                            	include "_anim\obj26.asm"
0000A964                            ; ---------------------------------------------------------------------------
0000A964                            ; Animation script - monitors
0000A964                            ; ---------------------------------------------------------------------------
0000A964 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A96A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A970 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A976 0000                       		dc.w byte_A582-Ani_obj26
0000A978 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A97E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A98A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A996 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A9A2 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A9AE 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A9BA 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A9C6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9D2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A9DE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A9E6                            		even
0000A9E6                            		even
0000A9E6                            
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            ; Sprite mappings - monitors
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            Map_obj26:
0000A9E6                            	include "_maps\obj26.asm"
0000A9E6                            ; ================================================================================
0000A9E6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000A9E6                            ; ================================================================================
0000A9E6                            
0000A9E6                            DATAY1U343IF3L:
0000A9E6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000A9EA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000A9EE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000A9F2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000A9F6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000A9FA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000A9FE 05                         DATAY1U343IF3L_0: dc.b $5
0000A9FF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA04 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA09 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA0E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA13 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA18 06                         DATAY1U343IF3L_1: dc.b $6
0000AA19 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA1E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA23 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA28 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA2D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA32 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA37 05                         DATAY1U343IF3L_2: dc.b $5
0000AA38 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA3D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA42 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA47 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA4C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA51 05                         DATAY1U343IF3L_3: dc.b $5
0000AA52 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA57 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA5C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA61 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA66 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA6B 06                         DATAY1U343IF3L_4: dc.b $6
0000AA6C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA71 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA76 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA7B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA80 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA85 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA8A 06                         DATAY1U343IF3L_5: dc.b $6
0000AA8B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AA90 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA95 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA9A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA9F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAA4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAA9 06                         DATAY1U343IF3L_6: dc.b $6
0000AAAA F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AAAF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAB4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAB9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AABE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAC3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAC8 06                         DATAY1U343IF3L_7: dc.b $6
0000AAC9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AACE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAD8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AADD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAE7 06                         DATAY1U343IF3L_8: dc.b $6
0000AAE8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AAED E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAF7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAFC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB01 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB06 06                         DATAY1U343IF3L_9: dc.b $6
0000AB07 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB0C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB11 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB16 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB1B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB20 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB25 05                         DATAY1U343IF3L_A: dc.b $5
0000AB26 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB2B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB30 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB35 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB3A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB3F 01                         DATAY1U343IF3L_B: dc.b $1
0000AB40 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB46 00                         	even
0000AB46 00                         	even
0000AB46                            
0000AB46                            ; ===========================================================================
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            ; Object 0E - Sonic on the title screen
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            
0000AB46                            Obj0E:					; XREF: Obj_Index
0000AB46 7000                       		moveq	#0,d0
0000AB48 1028 0024                  		move.b	$24(a0),d0
0000AB4C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB50 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB54                            ; ===========================================================================
0000AB54 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB56 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB58 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB5A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB5C                            ; ===========================================================================
0000AB5C                            
0000AB5C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB5C 5428 0024                  		addq.b	#2,$24(a0)
0000AB60 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB66 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB6C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB74 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB7A 117C 0001 0018             		move.b	#1,$18(a0)
0000AB80 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AB86 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AB8C 6100 0000                  		bsr.w	AnimateSprite
0000AB90                            
0000AB90                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AB90 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AB94 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AB96 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AB9A 6000 0000                  		bra.w	DisplaySprite
0000AB9E                            ; ===========================================================================
0000AB9E                            
0000AB9E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AB9E 4E75                       		rts	
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            Obj0E_Move:				; XREF: Obj0E_Index
0000ABA0 5168 000A                  		subq.w	#8,$A(a0)
0000ABA4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ABAA 6600                       		bne.s	Obj0E_Display
0000ABAC 5428 0024                  		addq.b	#2,$24(a0)
0000ABB0                            
0000ABB0                            Obj0E_Display:
0000ABB0 6000 0000                  		bra.w	DisplaySprite
0000ABB4                            ; ===========================================================================
0000ABB4 4E75                       		rts	
0000ABB6                            ; ===========================================================================
0000ABB6                            
0000ABB6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ABB6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABBC 6100 0000                  		bsr.w	AnimateSprite
0000ABC0 6000 0000                  		bra.w	DisplaySprite
0000ABC4                            ; ===========================================================================
0000ABC4 4E75                       		rts	
0000ABC6                            ; ===========================================================================
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            
0000ABC6                            Obj0F:					; XREF: Obj_Index
0000ABC6 7000                       		moveq	#0,d0
0000ABC8 1028 0024                  		move.b	$24(a0),d0
0000ABCC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ABD0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABD4 6000 0000                  		bra.w	DisplaySprite
0000ABD8                            ; ===========================================================================
0000ABD8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABDA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ABDC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            Obj0F_Main:				; XREF: Obj0F_Index
0000ABDE 5428 0024                  		addq.b	#2,$24(a0)
0000ABE2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ABE8 317C 0130 000A             		move.w	#$130,$A(a0)
0000ABEE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ABF6 317C 0200 0002             		move.w	#$200,2(a0)
0000ABFC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC02 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC04 5428 0024                  		addq.b	#2,$24(a0)
0000AC08 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC0E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC10 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC16 317C 0170 0008             		move.w	#$170,8(a0)
0000AC1C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC22                            
0000AC22                            locret_A6F8:				; XREF: Obj0F_Index
0000AC22 4E75                       		rts	
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC24 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC2A 6000 0000                  		bra.w	AnimateSprite
0000AC2E                            ; ===========================================================================
0000AC2E                            Ani_obj0E:
0000AC2E                            	include "_anim\obj0E.asm"
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E                            ; Animation script - Sonic on the title screen
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E 0000                       		dc.w byte_A706-Ani_obj0E
0000AC30 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC3C                            		even
0000AC3C                            		even
0000AC3C                            
0000AC3C                            Ani_obj0F:
0000AC3C                            	include "_anim\obj0F.asm"
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C 0000                       		dc.w byte_A714-Ani_obj0F
0000AC3E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC42                            		even
0000AC42                            		even
0000AC42                            
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            ; Subroutine to	animate	a sprite using an animation script
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            
0000AC42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC42                            
0000AC42                            
0000AC42                            AnimateSprite:
0000AC42 7000                       		moveq	#0,d0
0000AC44 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC48 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC4C 6700                       		beq.s	Anim_Run	; if not, branch
0000AC4E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC52 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC58 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC5E                            
0000AC5E                            Anim_Run:
0000AC5E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC62 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC64 D040                       		add.w	d0,d0
0000AC66 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC6A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC6E 7200                       		moveq	#0,d1
0000AC70 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC74 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC78 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC7A                            
0000AC7A                            Anim_Next:
0000AC7A 1200                       		move.b	d0,d1
0000AC7C 0200 001F                  		andi.b	#$1F,d0
0000AC80 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AC84 1028 0022                  		move.b	$22(a0),d0
0000AC88 E719                       		rol.b	#3,d1
0000AC8A B101                       		eor.b	d0,d1
0000AC8C 0201 0003                  		andi.b	#3,d1
0000AC90 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AC96 8328 0001                  		or.b	d1,1(a0)
0000AC9A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AC9E                            
0000AC9E                            Anim_Wait:
0000AC9E 4E75                       		rts	
0000ACA0                            ; ===========================================================================
0000ACA0                            
0000ACA0                            Anim_End_FF:
0000ACA0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ACA2 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ACA4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ACAA 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ACAE 60CA                       		bra.s	Anim_Next
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            Anim_End_FE:
0000ACB0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ACB2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ACB4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ACB8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ACBC 9200                       		sub.b	d0,d1
0000ACBE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ACC2 60B6                       		bra.s	Anim_Next
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            Anim_End_FD:
0000ACC4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ACC6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ACC8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ACCE                            
0000ACCE                            Anim_End_FC:
0000ACCE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ACD0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACD2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACD6                            
0000ACD6                            Anim_End_FB:
0000ACD6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACD8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACDA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACE0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000ACE4                            
0000ACE4                            Anim_End_FA:
0000ACE4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000ACE6 6600                       		bne.s	Anim_End	; if not, branch
0000ACE8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000ACEC                            
0000ACEC                            Anim_End:
0000ACEC 4E75                       		rts	
0000ACEE                            ; End of function AnimateSprite
0000ACEE                            
0000ACEE                            ; ===========================================================================
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            Map_obj0F:
0000ACEE                            	include "_maps\obj0F.asm"
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE 0000                       		dc.w byte_A7CD-Map_obj0F
0000ACF0 0000                       		dc.w byte_A7CC-Map_obj0F
0000ACF2 0000                       		dc.w byte_A7EB-Map_obj0F
0000ACF4 0000                       		dc.w byte_A882-Map_obj0F
0000ACF6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ACF7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000ACFC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD01 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD06 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD0B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD10 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD15 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD16 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD1B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD20 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD25 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD34 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD39 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD3E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD43 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD48 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD4D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD52 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD57 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD5C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD61 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD66 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD6B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD70 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD75 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD7A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD7F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD84 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD89 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD8E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD93 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD98 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD9D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAC 01                         byte_A882:	dc.b 1			; "TM"
0000ADAD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000ADB2                            		even
0000ADB2                            		even
0000ADB2                            
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            ; Sprite mappings - Sonic on the title screen
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            Map_obj0E:
0000ADB2                            	include "_maps\obj0E.asm"
0000ADB2                            ; ================================================================================
0000ADB2                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 12:11:33 GMT-0500 (Central Daylight Time)
0000ADB2                            ; ================================================================================
0000ADB2                            
0000ADB2                            DATAV21JFHJ5PUP:
0000ADB2 0000 0000                  	dc.w DATAV21JFHJ5PUP_0-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_1-DATAV21JFHJ5PUP
0000ADB6 0000 0000                  	dc.w DATAV21JFHJ5PUP_2-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_3-DATAV21JFHJ5PUP
0000ADBA 0000 0000                  	dc.w DATAV21JFHJ5PUP_4-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_5-DATAV21JFHJ5PUP
0000ADBE 0000 0000                  	dc.w DATAV21JFHJ5PUP_6-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_7-DATAV21JFHJ5PUP
0000ADC2 08                         DATAV21JFHJ5PUP_0: dc.b $8
0000ADC3 0C0F 019F 08               	dc.b $C, $F, $1, $9F, $8
0000ADC8 2C0F 01AF 08               	dc.b $2C, $F, $1, $AF, $8
0000ADCD 4C0D 01BF 08               	dc.b $4C, $D, $1, $BF, $8
0000ADD2 0408 01C7 20               	dc.b $4, $8, $1, $C7, $20
0000ADD7 0C0B 01CA 28               	dc.b $C, $B, $1, $CA, $28
0000ADDC 2C0B 01D6 28               	dc.b $2C, $B, $1, $D6, $28
0000ADE1 4C05 01E2 28               	dc.b $4C, $5, $1, $E2, $28
0000ADE6 1407 01E6 40               	dc.b $14, $7, $1, $E6, $40
0000ADEB 0B                         DATAV21JFHJ5PUP_1: dc.b $B
0000ADEC 060F 01EE 01               	dc.b $6, $F, $1, $EE, $1
0000ADF1 060F 01FE 21               	dc.b $6, $F, $1, $FE, $21
0000ADF6 0607 020E 41               	dc.b $6, $7, $2, $E, $41
0000ADFB 260F 0216 01               	dc.b $26, $F, $2, $16, $1
0000AE00 260F 0226 21               	dc.b $26, $F, $2, $26, $21
0000AE05 2607 0236 41               	dc.b $26, $7, $2, $36, $41
0000AE0A 460C 023E 01               	dc.b $46, $C, $2, $3E, $1
0000AE0F 460E 0242 21               	dc.b $46, $E, $2, $42, $21
0000AE14 4606 024E 41               	dc.b $46, $6, $2, $4E, $41
0000AE19 4E08 0254 09               	dc.b $4E, $8, $2, $54, $9
0000AE1E 5604 0257 11               	dc.b $56, $4, $2, $57, $11
0000AE23 0B                         DATAV21JFHJ5PUP_2: dc.b $B
0000AE24 F20F 01EE 01               	dc.b $F2, $F, $1, $EE, $1
0000AE29 F20F 01FE 21               	dc.b $F2, $F, $1, $FE, $21
0000AE2E F207 020E 41               	dc.b $F2, $7, $2, $E, $41
0000AE33 120F 0216 01               	dc.b $12, $F, $2, $16, $1
0000AE38 120F 0226 21               	dc.b $12, $F, $2, $26, $21
0000AE3D 1207 0236 41               	dc.b $12, $7, $2, $36, $41
0000AE42 320C 023E 01               	dc.b $32, $C, $2, $3E, $1
0000AE47 320E 0242 21               	dc.b $32, $E, $2, $42, $21
0000AE4C 3206 024E 41               	dc.b $32, $6, $2, $4E, $41
0000AE51 3A08 0254 09               	dc.b $3A, $8, $2, $54, $9
0000AE56 4204 0257 11               	dc.b $42, $4, $2, $57, $11
0000AE5B 0D                         DATAV21JFHJ5PUP_3: dc.b $D
0000AE5C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AE61 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AE66 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AE6B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AE70 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AE75 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AE7A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AE7F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AE84 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AE89 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AE8E 3C01 004E 08               	dc.b $3C, $1, $0, $4E, $8
0000AE93 3C04 0050 28               	dc.b $3C, $4, $0, $50, $28
0000AE98 4400 0052 28               	dc.b $44, $0, $0, $52, $28
0000AE9D 10                         DATAV21JFHJ5PUP_4: dc.b $10
0000AE9E F80F 0259 09               	dc.b $F8, $F, $2, $59, $9
0000AEA3 F807 0269 29               	dc.b $F8, $7, $2, $69, $29
0000AEA8 0003 0271 01               	dc.b $0, $3, $2, $71, $1
0000AEAD 0003 0275 39               	dc.b $0, $3, $2, $75, $39
0000AEB2 1001 0279 F9               	dc.b $10, $1, $2, $79, $F9
0000AEB7 180D 027B 09               	dc.b $18, $D, $2, $7B, $9
0000AEBC 1807 0283 29               	dc.b $18, $7, $2, $83, $29
0000AEC1 1803 028B 41               	dc.b $18, $3, $2, $8B, $41
0000AEC6 2001 028F 01               	dc.b $20, $1, $2, $8F, $1
0000AECB 2003 0291 39               	dc.b $20, $3, $2, $91, $39
0000AED0 2808 0295 11               	dc.b $28, $8, $2, $95, $11
0000AED5 3007 0298 19               	dc.b $30, $7, $2, $98, $19
0000AEDA 3801 02A0 11               	dc.b $38, $1, $2, $A0, $11
0000AEDF 3806 02A2 29               	dc.b $38, $6, $2, $A2, $29
0000AEE4 3801 02A8 41               	dc.b $38, $1, $2, $A8, $41
0000AEE9 4001 02AA 39               	dc.b $40, $1, $2, $AA, $39
0000AEEE 13                         DATAV21JFHJ5PUP_5: dc.b $13
0000AEEF 280E 00B2 38               	dc.b $28, $E, $0, $B2, $38
0000AEF4 1805 00BE 48               	dc.b $18, $5, $0, $BE, $48
0000AEF9 4008 00C2 38               	dc.b $40, $8, $0, $C2, $38
0000AEFE 4804 00C5 38               	dc.b $48, $4, $0, $C5, $38
0000AF03 100F 0053 10               	dc.b $10, $F, $0, $53, $10
0000AF08 0804 0063 20               	dc.b $8, $4, $0, $63, $20
0000AF0D 000B 0065 30               	dc.b $0, $B, $0, $65, $30
0000AF12 0800 0071 48               	dc.b $8, $0, $0, $71, $48
0000AF17 1800 0072 48               	dc.b $18, $0, $0, $72, $48
0000AF1C 1805 0073 00               	dc.b $18, $5, $0, $73, $0
0000AF21 2802 0077 08               	dc.b $28, $2, $0, $77, $8
0000AF26 300F 007A 10               	dc.b $30, $F, $0, $7A, $10
0000AF2B 200D 008A 30               	dc.b $20, $D, $0, $8A, $30
0000AF30 2001 0092 50               	dc.b $20, $1, $0, $92, $50
0000AF35 3008 0094 30               	dc.b $30, $8, $0, $94, $30
0000AF3A 380E 0097 30               	dc.b $38, $E, $0, $97, $30
0000AF3F 500D 00A3 08               	dc.b $50, $D, $0, $A3, $8
0000AF44 500C 00AB 28               	dc.b $50, $C, $0, $AB, $28
0000AF49 5808 00AF 28               	dc.b $58, $8, $0, $AF, $28
0000AF4E 0F                         DATAV21JFHJ5PUP_6: dc.b $F
0000AF4F EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AF54 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AF59 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AF5E EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AF63 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AF68 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AF6D EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AF72 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AF77 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AF7C EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AF81 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AF86 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AF8B EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AF90 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AF95 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AF9A 0F                         DATAV21JFHJ5PUP_7: dc.b $F
0000AF9B EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AFA0 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AFA5 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AFAA EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AFAF 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AFB4 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AFB9 EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AFBE 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AFC3 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AFC8 EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AFCD 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AFD2 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AFD7 EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AFDC 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AFE1 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AFE6                            	even
0000AFE6                            	even
0000AFE6                            
0000AFE6                            ; ===========================================================================
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            ; Object 2B - Chopper enemy (GHZ)
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            
0000AFE6                            Obj2B:					; XREF: Obj_Index
0000AFE6 7000                       		moveq	#0,d0
0000AFE8 1028 0024                  		move.b	$24(a0),d0
0000AFEC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AFF0 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AFF4 6000 0000                  		bra.w	MarkObjGone
0000AFF8                            ; ===========================================================================
0000AFF8 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AFFA 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AFFC                            ; ===========================================================================
0000AFFC                            
0000AFFC                            Obj2B_Main:				; XREF: Obj2B_Index
0000AFFC 5428 0024                  		addq.b	#2,$24(a0)
0000B000 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B008 317C 047B 0002             		move.w	#$47B,2(a0)
0000B00E 117C 0004 0001             		move.b	#4,1(a0)
0000B014 117C 0004 0018             		move.b	#4,$18(a0)
0000B01A 117C 0009 0020             		move.b	#9,$20(a0)
0000B020 117C 0010 0019             		move.b	#$10,$19(a0)
0000B026 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B02C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B032                            
0000B032                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B032 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B038 6100 FC08                  		bsr.w	AnimateSprite
0000B03C 6100 0000                  		bsr.w	SpeedToPos
0000B040 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B046 3028 0030                  		move.w	$30(a0),d0
0000B04A B068 000C                  		cmp.w	$C(a0),d0
0000B04E 6400                       		bcc.s	Obj2B_ChgAni
0000B050 3140 000C                  		move.w	d0,$C(a0)
0000B054 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B05A                            
0000B05A                            Obj2B_ChgAni:
0000B05A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B060 0440 00C0                  		subi.w	#$C0,d0
0000B064 B068 000C                  		cmp.w	$C(a0),d0
0000B068 6400                       		bcc.s	locret_ABB6
0000B06A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B070 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B074 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B076 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B07C                            
0000B07C                            locret_ABB6:
0000B07C 4E75                       		rts	
0000B07E                            ; ===========================================================================
0000B07E                            Ani_obj2B:
0000B07E                            	include "_anim\obj2B.asm"
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E                            ; Animation script - Chopper enemy
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B080 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B082 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B084 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B088 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B08C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B090 00                         		even
0000B090 00                         		even
0000B090                            
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            ; Sprite mappings - Chopper enemy (GHZ)
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            Map_obj2B:
0000B090                            	include "_maps\obj2B.asm"
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            ; Sprite mappings - Chopper enemy (GHZ)
0000B090                            ; ---------------------------------------------------------------------------
0000B090 0000                       		dc.w byte_ABCE-Map_obj2B
0000B092 0000                       		dc.w byte_ABD4-Map_obj2B
0000B094 01                         byte_ABCE:	dc.b 1
0000B095 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B09A 01                         byte_ABD4:	dc.b 1
0000B09B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0A0                            		even
0000B0A0                            		even
0000B0A0                            
0000B0A0                            ; ===========================================================================
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            ; Object 2C - Jaws enemy (LZ)
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            
0000B0A0                            Obj2C:					; XREF: Obj_Index
0000B0A0 7000                       		moveq	#0,d0
0000B0A2 1028 0024                  		move.b	$24(a0),d0
0000B0A6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B0AA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B0AE                            ; ===========================================================================
0000B0AE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B0B0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B0B2                            ; ===========================================================================
0000B0B2                            
0000B0B2                            Obj2C_Main:				; XREF: Obj2C_Index
0000B0B2 5428 0024                  		addq.b	#2,$24(a0)
0000B0B6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B0BE 317C 2486 0002             		move.w	#$2486,2(a0)
0000B0C4 0028 0004 0001             		ori.b	#4,1(a0)
0000B0CA 117C 000A 0020             		move.b	#$A,$20(a0)
0000B0D0 117C 0004 0018             		move.b	#4,$18(a0)
0000B0D6 117C 0010 0019             		move.b	#$10,$19(a0)
0000B0DC 7000                       		moveq	#0,d0
0000B0DE 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B0E2 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B0E4 5340                       		subq.w	#1,d0
0000B0E6 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B0EA 3140 0032                  		move.w	d0,$32(a0)
0000B0EE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B0F4 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B0FA 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B0FC 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B100                            
0000B100                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B100 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B104 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B106 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B10C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B110 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B116 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B11C                            
0000B11C                            Obj2C_Animate:
0000B11C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B122 6100 FB1E                  		bsr.w	AnimateSprite
0000B126 6100 0000                  		bsr.w	SpeedToPos
0000B12A 6000 0000                  		bra.w	MarkObjGone
0000B12E                            ; ===========================================================================
0000B12E                            Ani_obj2C:
0000B12E                            	include "_anim\obj2C.asm"
0000B12E                            ; ---------------------------------------------------------------------------
0000B12E                            ; Animation script - Jaws enemy
0000B12E                            ; ---------------------------------------------------------------------------
0000B12E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B130 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B136                            		even
0000B136                            		even
0000B136                            
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            ; Sprite mappings - Jaws enemy (LZ)
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            Map_obj2C:
0000B136                            	include "_maps\obj2C.asm"
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            ; Sprite mappings - Jaws enemy (LZ)
0000B136                            ; ---------------------------------------------------------------------------
0000B136 0000                       		dc.w byte_AC78-Map_obj2C
0000B138 0000                       		dc.w byte_AC83-Map_obj2C
0000B13A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B13C 0000                       		dc.w byte_AC99-Map_obj2C
0000B13E 02                         byte_AC78:	dc.b 2
0000B13F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B144 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B149 02                         byte_AC83:	dc.b 2
0000B14A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B14F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B154 02                         byte_AC8E:	dc.b 2
0000B155 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B15A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B15F 02                         byte_AC99:	dc.b 2
0000B160 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B165 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B16A                            		even
0000B16A                            		even
0000B16A                            
0000B16A                            ; ===========================================================================
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            ; Object 2D - Burrobot enemy (LZ)
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            
0000B16A                            Obj2D:					; XREF: Obj_Index
0000B16A 7000                       		moveq	#0,d0
0000B16C 1028 0024                  		move.b	$24(a0),d0
0000B170 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B174 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B178                            ; ===========================================================================
0000B178 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B17A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B17C                            ; ===========================================================================
0000B17C                            
0000B17C                            Obj2D_Main:				; XREF: Obj2D_Index
0000B17C 5428 0024                  		addq.b	#2,$24(a0)
0000B180 117C 0013 0016             		move.b	#$13,$16(a0)
0000B186 117C 0008 0017             		move.b	#8,$17(a0)
0000B18C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B194 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B19A 0028 0004 0001             		ori.b	#4,1(a0)
0000B1A0 117C 0004 0018             		move.b	#4,$18(a0)
0000B1A6 117C 0005 0020             		move.b	#5,$20(a0)
0000B1AC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B1B2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B1B6 117C 0002 001C             		move.b	#2,$1C(a0)
0000B1BC                            
0000B1BC                            Obj2D_Action:				; XREF: Obj2D_Index
0000B1BC 7000                       		moveq	#0,d0
0000B1BE 1028 0025                  		move.b	$25(a0),d0
0000B1C2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B1C6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B1CA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B1D0 6100 FA70                  		bsr.w	AnimateSprite
0000B1D4 6000 0000                  		bra.w	MarkObjGone
0000B1D8                            ; ===========================================================================
0000B1D8 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B1DA 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B1DC 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B1DE 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B1E0                            ; ===========================================================================
0000B1E0                            
0000B1E0                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B1E0 5368 0030                  		subq.w	#1,$30(a0)
0000B1E4 6A00                       		bpl.s	locret_AD42
0000B1E6 5428 0025                  		addq.b	#2,$25(a0)
0000B1EA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B1F0 317C 0080 0010             		move.w	#$80,$10(a0)
0000B1F6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B1FC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B202 6700                       		beq.s	locret_AD42
0000B204 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B208                            
0000B208                            locret_AD42:
0000B208 4E75                       		rts	
0000B20A                            ; ===========================================================================
0000B20A                            
0000B20A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B20A 5368 0030                  		subq.w	#1,$30(a0)
0000B20E 6B00                       		bmi.s	loc_AD84
0000B210 6100 0000                  		bsr.w	SpeedToPos
0000B214 0868 0000 0032             		bchg	#0,$32(a0)
0000B21A 6600                       		bne.s	loc_AD78
0000B21C 3628 0008                  		move.w	8(a0),d3
0000B220 0643 000C                  		addi.w	#$C,d3
0000B224 0828 0000 0022             		btst	#0,$22(a0)
0000B22A 6600                       		bne.s	loc_AD6A
0000B22C 0443 0018                  		subi.w	#$18,d3
0000B230                            
0000B230                            loc_AD6A:
0000B230 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B236 0C41 000C                  		cmpi.w	#$C,d1
0000B23A 6C00                       		bge.s	loc_AD84
0000B23C 4E75                       		rts	
0000B23E                            ; ===========================================================================
0000B23E                            
0000B23E                            loc_AD78:				; XREF: Obj2D_Move
0000B23E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B244 D368 000C                  		add.w	d1,$C(a0)
0000B248 4E75                       		rts	
0000B24A                            ; ===========================================================================
0000B24A                            
0000B24A                            loc_AD84:				; XREF: Obj2D_Move
0000B24A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B250 6700                       		beq.s	loc_ADA4
0000B252 5528 0025                  		subq.b	#2,$25(a0)
0000B256 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B25C 317C 0000 0010             		move.w	#0,$10(a0)
0000B262 117C 0000 001C             		move.b	#0,$1C(a0)
0000B268 4E75                       		rts	
0000B26A                            ; ===========================================================================
0000B26A                            
0000B26A                            loc_ADA4:
0000B26A 5428 0025                  		addq.b	#2,$25(a0)
0000B26E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B274 117C 0002 001C             		move.b	#2,$1C(a0)
0000B27A 4E75                       		rts	
0000B27C                            ; ===========================================================================
0000B27C                            
0000B27C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B27C 6100 0000                  		bsr.w	SpeedToPos
0000B280 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B286 6B00                       		bmi.s	locret_ADF0
0000B288 117C 0003 001C             		move.b	#3,$1C(a0)
0000B28E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B294 4A41                       		tst.w	d1
0000B296 6A00                       		bpl.s	locret_ADF0
0000B298 D368 000C                  		add.w	d1,$C(a0)
0000B29C 317C 0000 0012             		move.w	#0,$12(a0)
0000B2A2 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2A8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2AE 5528 0025                  		subq.b	#2,$25(a0)
0000B2B2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2B6                            
0000B2B6                            locret_ADF0:
0000B2B6 4E75                       		rts	
0000B2B8                            ; ===========================================================================
0000B2B8                            
0000B2B8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B2B8 343C 0060                  		move.w	#$60,d2
0000B2BC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2C0 6400                       		bcc.s	locret_AE20
0000B2C2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B2C6 9068 000C                  		sub.w	$C(a0),d0
0000B2CA 6400                       		bcc.s	locret_AE20
0000B2CC 0C40 FF80                  		cmpi.w	#-$80,d0
0000B2D0 6500                       		bcs.s	locret_AE20
0000B2D2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B2D6 6600                       		bne.s	locret_AE20
0000B2D8 5528 0025                  		subq.b	#2,$25(a0)
0000B2DC 3141 0010                  		move.w	d1,$10(a0)
0000B2E0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2E6                            
0000B2E6                            locret_AE20:
0000B2E6 4E75                       		rts	
0000B2E8                            
0000B2E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2E8                            
0000B2E8                            
0000B2E8                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B2E8 323C 0080                  		move.w	#$80,d1
0000B2EC 08E8 0000 0022             		bset	#0,$22(a0)
0000B2F2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2F6 9068 0008                  		sub.w	8(a0),d0
0000B2FA 6400                       		bcc.s	loc_AE40
0000B2FC 4440                       		neg.w	d0
0000B2FE 4441                       		neg.w	d1
0000B300 08A8 0000 0022             		bclr	#0,$22(a0)
0000B306                            
0000B306                            loc_AE40:
0000B306 B042                       		cmp.w	d2,d0
0000B308 4E75                       		rts	
0000B30A                            ; End of function Obj2D_ChkSonic2
0000B30A                            
0000B30A                            ; ===========================================================================
0000B30A                            Ani_obj2D:
0000B30A                            	include "_anim\obj2D.asm"
0000B30A                            ; ---------------------------------------------------------------------------
0000B30A                            ; Animation script - Burrobot enemy
0000B30A                            ; ---------------------------------------------------------------------------
0000B30A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B30C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B30E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B310 0000                       		dc.w byte_AE58-Ani_obj2D
0000B312 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B316 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B31A 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B31E 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B322 00                         		even
0000B322 00                         		even
0000B322                            
0000B322                            ; ---------------------------------------------------------------------------
0000B322                            ; Sprite mappings - Burrobot enemy (LZ)
0000B322                            ; ---------------------------------------------------------------------------
0000B322                            Map_obj2D:
0000B322                            	include "_maps\obj2D.asm"
0000B322                            ; ---------------------------------------------------------------------------
0000B322                            ; Sprite mappings - Burrobot enemy (LZ)
0000B322                            ; ---------------------------------------------------------------------------
0000B322 0000                       		dc.w byte_AE6A-Map_obj2D
0000B324 0000                       		dc.w byte_AE75-Map_obj2D
0000B326 0000                       		dc.w byte_AE80-Map_obj2D
0000B328 0000                       		dc.w byte_AE8B-Map_obj2D
0000B32A 0000                       		dc.w byte_AE96-Map_obj2D
0000B32C 0000                       		dc.w byte_AEA1-Map_obj2D
0000B32E 0000                       		dc.w byte_AEAC-Map_obj2D
0000B330 02                         byte_AE6A:	dc.b 2
0000B331 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B336 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B33B 02                         byte_AE75:	dc.b 2
0000B33C EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B341 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B346 02                         byte_AE80:	dc.b 2
0000B347 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B34C 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B351 02                         byte_AE8B:	dc.b 2
0000B352 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B357 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B35C 02                         byte_AE96:	dc.b 2
0000B35D E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B362 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B367 02                         byte_AEA1:	dc.b 2
0000B368 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B36D F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B372 02                         byte_AEAC:	dc.b 2
0000B373 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B378 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B37E 00                         		even
0000B37E 00                         		even
0000B37E                            
0000B37E                            ; ===========================================================================
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Object 2F - large moving platforms (MZ)
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            
0000B37E                            Obj2F:					; XREF: Obj_Index
0000B37E 7000                       		moveq	#0,d0
0000B380 1028 0024                  		move.b	$24(a0),d0
0000B384 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B388 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B38C                            ; ===========================================================================
0000B38C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B38E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B390                            
0000B390 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B392 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B394 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B396 0140                       		dc.b 1,	$40
0000B398 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B39A 0220                       		dc.b 2,	$20
0000B39C                            ; ===========================================================================
0000B39C                            
0000B39C                            Obj2F_Main:				; XREF: Obj2F_Index
0000B39C 5428 0024                  		addq.b	#2,$24(a0)
0000B3A0 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B3A8 317C C000 0002             		move.w	#$C000,2(a0)
0000B3AE 117C 0004 0001             		move.b	#4,1(a0)
0000B3B4 117C 0005 0018             		move.b	#5,$18(a0)
0000B3BA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B3C0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B3C6 7000                       		moveq	#0,d0
0000B3C8 1028 0028                  		move.b	$28(a0),d0
0000B3CC E448                       		lsr.w	#2,d0
0000B3CE 0240 001C                  		andi.w	#$1C,d0
0000B3D2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B3D6 3019                       		move.w	(a1)+,d0
0000B3D8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B3DC 214A 0030                  		move.l	a2,$30(a0)
0000B3E0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B3E4 1151 0019                  		move.b	(a1),$19(a0)
0000B3E8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B3EE 117C 0040 0016             		move.b	#$40,$16(a0)
0000B3F4 08E8 0004 0001             		bset	#4,1(a0)
0000B3FA                            
0000B3FA                            Obj2F_Action:				; XREF: Obj2F_Index
0000B3FA 6100 0000                  		bsr.w	Obj2F_Types
0000B3FE 4A28 0025                  		tst.b	$25(a0)
0000B402 6700                       		beq.s	Obj2F_Solid
0000B404 7200                       		moveq	#0,d1
0000B406 1228 0019                  		move.b	$19(a0),d1
0000B40A 0641 000B                  		addi.w	#$B,d1
0000B40E 6100 C602                  		bsr.w	ExitPlatform
0000B412 0829 0003 0022             		btst	#3,$22(a1)
0000B418 6600 0000                  		bne.w	Obj2F_Slope
0000B41C 4228 0025                  		clr.b	$25(a0)
0000B420 6000                       		bra.s	Obj2F_Display
0000B422                            ; ===========================================================================
0000B422                            
0000B422                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B422 7200                       		moveq	#0,d1
0000B424 1228 0019                  		move.b	$19(a0),d1
0000B428 0641 000B                  		addi.w	#$B,d1
0000B42C 2468 0030                  		movea.l	$30(a0),a2
0000B430 3428 0008                  		move.w	8(a0),d2
0000B434 6100 D53A                  		bsr.w	SlopeObject2
0000B438 6000                       		bra.s	Obj2F_Display
0000B43A                            ; ===========================================================================
0000B43A                            
0000B43A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B43A 7200                       		moveq	#0,d1
0000B43C 1228 0019                  		move.b	$19(a0),d1
0000B440 0641 000B                  		addi.w	#$B,d1
0000B444 343C 0020                  		move.w	#$20,d2
0000B448 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B44E 6600                       		bne.s	loc_AF8E
0000B450 343C 0030                  		move.w	#$30,d2
0000B454                            
0000B454                            loc_AF8E:
0000B454 2468 0030                  		movea.l	$30(a0),a2
0000B458 6100 0000                  		bsr.w	SolidObject2F
0000B45C                            
0000B45C                            Obj2F_Display:				; XREF: Obj2F_Action
0000B45C 6100 0000                  		bsr.w	DisplaySprite
0000B460 6000 0000                  		bra.w	Obj2F_ChkDel
0000B464                            
0000B464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B464                            
0000B464                            
0000B464                            Obj2F_Types:				; XREF: Obj2F_Action
0000B464 7000                       		moveq	#0,d0
0000B466 1028 0028                  		move.b	$28(a0),d0
0000B46A 0240 0007                  		andi.w	#7,d0
0000B46E D040                       		add.w	d0,d0
0000B470 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B474 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B478                            ; End of function Obj2F_Types
0000B478                            
0000B478                            ; ===========================================================================
0000B478 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B47A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B47C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B47E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B480 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B482 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B484                            ; ===========================================================================
0000B484                            
0000B484                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B484 4E75                       		rts			; type 00 platform doesn't move
0000B486                            ; ===========================================================================
0000B486                            
0000B486                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B486 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B48A 323C 0020                  		move.w	#$20,d1
0000B48E 6000                       		bra.s	Obj2F_Move
0000B490                            ; ===========================================================================
0000B490                            
0000B490                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B490 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B494 323C 0030                  		move.w	#$30,d1
0000B498 6000                       		bra.s	Obj2F_Move
0000B49A                            ; ===========================================================================
0000B49A                            
0000B49A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B49A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B49E 323C 0040                  		move.w	#$40,d1
0000B4A2 6000                       		bra.s	Obj2F_Move
0000B4A4                            ; ===========================================================================
0000B4A4                            
0000B4A4                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B4A4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B4A8 323C 0060                  		move.w	#$60,d1
0000B4AC                            
0000B4AC                            Obj2F_Move:
0000B4AC 0828 0003 0028             		btst	#3,$28(a0)
0000B4B2 6700                       		beq.s	loc_AFF2
0000B4B4 4440                       		neg.w	d0
0000B4B6 D041                       		add.w	d1,d0
0000B4B8                            
0000B4B8                            loc_AFF2:
0000B4B8 3228 002C                  		move.w	$2C(a0),d1
0000B4BC 9240                       		sub.w	d0,d1
0000B4BE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B4C2 4E75                       		rts	
0000B4C4                            ; ===========================================================================
0000B4C4                            
0000B4C4                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B4C4 1028 0034                  		move.b	$34(a0),d0
0000B4C8 4A28 0025                  		tst.b	$25(a0)
0000B4CC 6600                       		bne.s	loc_B010
0000B4CE 5500                       		subq.b	#2,d0
0000B4D0 6400                       		bcc.s	loc_B01C
0000B4D2 7000                       		moveq	#0,d0
0000B4D4 6000                       		bra.s	loc_B01C
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            loc_B010:
0000B4D6 5800                       		addq.b	#4,d0
0000B4D8 0C00 0040                  		cmpi.b	#$40,d0
0000B4DC 6500                       		bcs.s	loc_B01C
0000B4DE 103C 0040                  		move.b	#$40,d0
0000B4E2                            
0000B4E2                            loc_B01C:
0000B4E2 1140 0034                  		move.b	d0,$34(a0)
0000B4E6 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B4EC E848                       		lsr.w	#4,d0
0000B4EE 3200                       		move.w	d0,d1
0000B4F0 D068 002C                  		add.w	$2C(a0),d0
0000B4F4 3140 000C                  		move.w	d0,$C(a0)
0000B4F8 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B4FE 6600                       		bne.s	loc_B07A
0000B500 4A28 0035                  		tst.b	$35(a0)
0000B504 6600                       		bne.s	loc_B07A
0000B506 117C 0001 0035             		move.b	#1,$35(a0)
0000B50C 6100 0000                  		bsr.w	SingleObjLoad2
0000B510 6600                       		bne.s	loc_B07A
0000B512 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B516 3368 0008 0008             		move.w	8(a0),8(a1)
0000B51C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B522 5069 002C                  		addq.w	#8,$2C(a1)
0000B526 5769 002C                  		subq.w	#3,$2C(a1)
0000B52A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B530 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B536 2348 0038                  		move.l	a0,$38(a1)
0000B53A 2448                       		movea.l	a0,a2
0000B53C 6100                       		bsr.s	sub_B09C
0000B53E                            
0000B53E                            loc_B07A:
0000B53E 7400                       		moveq	#0,d2
0000B540 45E8 0036                  		lea	$36(a0),a2
0000B544 141A                       		move.b	(a2)+,d2
0000B546 5302                       		subq.b	#1,d2
0000B548 6500                       		bcs.s	locret_B09A
0000B54A                            
0000B54A                            loc_B086:
0000B54A 7000                       		moveq	#0,d0
0000B54C 101A                       		move.b	(a2)+,d0
0000B54E ED48                       		lsl.w	#6,d0
0000B550 0640 D000                  		addi.w	#-$3000,d0
0000B554 3240                       		movea.w	d0,a1
0000B556 3341 003C                  		move.w	d1,$3C(a1)
0000B55A 51CA FFEE                  		dbf	d2,loc_B086
0000B55E                            
0000B55E                            locret_B09A:
0000B55E 4E75                       		rts	
0000B560                            
0000B560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B560                            
0000B560                            
0000B560                            sub_B09C:
0000B560 45EA 0036                  		lea	$36(a2),a2
0000B564 7000                       		moveq	#0,d0
0000B566 1012                       		move.b	(a2),d0
0000B568 5212                       		addq.b	#1,(a2)
0000B56A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B56E 3009                       		move.w	a1,d0
0000B570 0440 D000                  		subi.w	#-$3000,d0
0000B574 EC48                       		lsr.w	#6,d0
0000B576 0240 007F                  		andi.w	#$7F,d0
0000B57A 1480                       		move.b	d0,(a2)
0000B57C 4E75                       		rts	
0000B57E                            ; End of function sub_B09C
0000B57E                            
0000B57E                            ; ===========================================================================
0000B57E                            
0000B57E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B57E 4A28 0035                  		tst.b	$35(a0)
0000B582 6700                       		beq.s	loc_B0C6
0000B584 4A28 0001                  		tst.b	1(a0)
0000B588 6A00                       		bpl.s	Obj2F_DelFlames
0000B58A                            
0000B58A                            loc_B0C6:
0000B58A 3028 002A                  		move.w	$2A(a0),d0
0000B58E 0240 FF80                  		andi.w	#$FF80,d0
0000B592 3238 F700                  		move.w	($FFFFF700).w,d1
0000B596 0441 0080                  		subi.w	#$80,d1
0000B59A 0241 FF80                  		andi.w	#$FF80,d1
0000B59E 9041                       		sub.w	d1,d0
0000B5A0 0C40 0280                  		cmpi.w	#$280,d0
0000B5A4 6200 0000                  		bhi.w	DeleteObject
0000B5A8 4E75                       		rts	
0000B5AA                            ; ===========================================================================
0000B5AA                            
0000B5AA                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B5AA 7400                       		moveq	#0,d2
0000B5AC                            
0000B5AC                            loc_B0E8:
0000B5AC 45E8 0036                  		lea	$36(a0),a2
0000B5B0 1412                       		move.b	(a2),d2
0000B5B2 421A                       		clr.b	(a2)+
0000B5B4 5302                       		subq.b	#1,d2
0000B5B6 6500                       		bcs.s	locret_B116
0000B5B8                            
0000B5B8                            loc_B0F4:
0000B5B8 7000                       		moveq	#0,d0
0000B5BA 1012                       		move.b	(a2),d0
0000B5BC 421A                       		clr.b	(a2)+
0000B5BE ED48                       		lsl.w	#6,d0
0000B5C0 0640 D000                  		addi.w	#-$3000,d0
0000B5C4 3240                       		movea.w	d0,a1
0000B5C6 6100 0000                  		bsr.w	DeleteObject2
0000B5CA 51CA FFEC                  		dbf	d2,loc_B0F4
0000B5CE 117C 0000 0035             		move.b	#0,$35(a0)
0000B5D4 117C 0000 0034             		move.b	#0,$34(a0)
0000B5DA                            
0000B5DA                            locret_B116:
0000B5DA 4E75                       		rts	
0000B5DC                            ; ===========================================================================
0000B5DC                            ; ---------------------------------------------------------------------------
0000B5DC                            ; Collision data for large moving platforms (MZ)
0000B5DC                            ; ---------------------------------------------------------------------------
0000B5DC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B628                            		even
0000B628                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B654                            		even
0000B654                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B6A0                            		even
0000B6A0                            ; ===========================================================================
0000B6A0                            ; ---------------------------------------------------------------------------
0000B6A0                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B6A0                            ; (appears when	you walk on sinking platforms)
0000B6A0                            ; ---------------------------------------------------------------------------
0000B6A0                            
0000B6A0                            Obj35:					; XREF: Obj_Index
0000B6A0 7000                       		moveq	#0,d0
0000B6A2 1028 0024                  		move.b	$24(a0),d0
0000B6A6 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B6AA 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B6AE                            ; ===========================================================================
0000B6AE 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B6B0 0000                       		dc.w loc_B238-Obj35_Index
0000B6B2 0000                       		dc.w Obj35_Move-Obj35_Index
0000B6B4                            ; ===========================================================================
0000B6B4                            
0000B6B4                            Obj35_Main:				; XREF: Obj35_Index
0000B6B4 5428 0024                  		addq.b	#2,$24(a0)
0000B6B8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B6C0 317C 0345 0002             		move.w	#$345,2(a0)
0000B6C6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B6CC 117C 0004 0001             		move.b	#4,1(a0)
0000B6D2 117C 0001 0018             		move.b	#1,$18(a0)
0000B6D8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B6DE 117C 0008 0019             		move.b	#8,$19(a0)
0000B6E4 303C 00C8                  		move.w	#$C8,d0
0000B6E8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B6EE 4A28 0028                  		tst.b	$28(a0)
0000B6F2 6700                       		beq.s	loc_B238
0000B6F4 5428 0024                  		addq.b	#2,$24(a0)
0000B6F8 6000 0000                  		bra.w	Obj35_Move
0000B6FC                            ; ===========================================================================
0000B6FC                            
0000B6FC                            loc_B238:				; XREF: Obj35_Index
0000B6FC 2268 0030                  		movea.l	$30(a0),a1
0000B700 3228 0008                  		move.w	8(a0),d1
0000B704 9268 002A                  		sub.w	$2A(a0),d1
0000B708 0641 000C                  		addi.w	#$C,d1
0000B70C 3001                       		move.w	d1,d0
0000B70E E248                       		lsr.w	#1,d0
0000B710 1031 0000                  		move.b	(a1,d0.w),d0
0000B714 4440                       		neg.w	d0
0000B716 D068 002C                  		add.w	$2C(a0),d0
0000B71A 3400                       		move.w	d0,d2
0000B71C D068 003C                  		add.w	$3C(a0),d0
0000B720 3140 000C                  		move.w	d0,$C(a0)
0000B724 0C41 0084                  		cmpi.w	#$84,d1
0000B728 6400                       		bcc.s	loc_B2B0
0000B72A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B732 0C41 0080                  		cmpi.w	#$80,d1
0000B736 6400                       		bcc.s	loc_B2B0
0000B738 2028 0008                  		move.l	8(a0),d0
0000B73C 0680 0008 0000             		addi.l	#$80000,d0
0000B742 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B748 6600                       		bne.s	loc_B2B0
0000B74A 6100 0000                  		bsr.w	SingleObjLoad2
0000B74E 6600                       		bne.s	loc_B2B0
0000B750 12BC 0035                  		move.b	#$35,0(a1)
0000B754 3368 0008 0008             		move.w	8(a0),8(a1)
0000B75A 3342 002C                  		move.w	d2,$2C(a1)
0000B75E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B764 137C 0001 0028             		move.b	#1,$28(a1)
0000B76A 2468 0038                  		movea.l	$38(a0),a2
0000B76E 6100 FDF0                  		bsr.w	sub_B09C
0000B772                            
0000B772                            loc_B2B0:
0000B772 6000                       		bra.s	Obj35_Animate
0000B774                            ; ===========================================================================
0000B774                            
0000B774                            Obj35_Move:				; XREF: Obj35_Index
0000B774 3028 002C                  		move.w	$2C(a0),d0
0000B778 D068 003C                  		add.w	$3C(a0),d0
0000B77C 3140 000C                  		move.w	d0,$C(a0)
0000B780                            
0000B780                            Obj35_Animate:				; XREF: loc_B238
0000B780 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B786 6100 F4BA                  		bsr.w	AnimateSprite
0000B78A 6000 0000                  		bra.w	DisplaySprite
0000B78E                            ; ===========================================================================
0000B78E                            Ani_obj35:
0000B78E                            	include "_anim\obj35.asm"
0000B78E                            ; ---------------------------------------------------------------------------
0000B78E                            ; Animation script - fireball that sits on the	floor (MZ)
0000B78E                            ; ---------------------------------------------------------------------------
0000B78E 0000                       		dc.w byte_B2CE-Ani_obj35
0000B790 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B796                            		even
0000B796                            		even
0000B796                            
0000B796                            ; ---------------------------------------------------------------------------
0000B796                            ; Sprite mappings - large moving platforms (MZ)
0000B796                            ; ---------------------------------------------------------------------------
0000B796                            Map_obj2F:
0000B796                            	include "_maps\obj2F.asm"
0000B796                            ; ---------------------------------------------------------------------------
0000B796                            ; Sprite mappings - large moving platforms (MZ)
0000B796                            ; ---------------------------------------------------------------------------
0000B796 0000                       		dc.w byte_B2DA-Map_obj2F
0000B798 0000                       		dc.w byte_B31C-Map_obj2F
0000B79A 0000                       		dc.w byte_B34F-Map_obj2F
0000B79C 0D                         byte_B2DA:	dc.b $D
0000B79D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B7A2 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B7A7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7AC D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B7B1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B7B6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7BB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B7C0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B7C5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B7CA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B7CF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B7D4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B7D9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B7DE 0A                         byte_B31C:	dc.b $A
0000B7DF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B7E4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B7E9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7EE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B7F3 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B7F8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7FD C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B802 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B807 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B80C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B811 06                         byte_B34F:	dc.b 6
0000B812 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B817 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B81C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B821 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B826 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B82B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B830                            		even
0000B830                            		even
0000B830                            
0000B830                            ; ---------------------------------------------------------------------------
0000B830                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B830                            ; ---------------------------------------------------------------------------
0000B830                            Map_obj14:
0000B830                            	include "_maps\obj14.asm"
0000B830                            ; ---------------------------------------------------------------------------
0000B830                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B830                            ; ---------------------------------------------------------------------------
0000B830 0000                       		dc.w byte_B37A-Map_obj14
0000B832 0000                       		dc.w byte_B380-Map_obj14
0000B834 0000                       		dc.w byte_B386-Map_obj14
0000B836 0000                       		dc.w byte_B38C-Map_obj14
0000B838 0000                       		dc.w byte_B392-Map_obj14
0000B83A 0000                       		dc.w byte_B398-Map_obj14
0000B83C 01                         byte_B37A:	dc.b 1
0000B83D E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B842 01                         byte_B380:	dc.b 1
0000B843 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B848 01                         byte_B386:	dc.b 1
0000B849 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B84E 01                         byte_B38C:	dc.b 1
0000B84F F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B854 01                         byte_B392:	dc.b 1
0000B855 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B85A 01                         byte_B398:	dc.b 1
0000B85B F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B860                            		even
0000B860                            		even
0000B860                            
0000B860                            ; ===========================================================================
0000B860                            ; ---------------------------------------------------------------------------
0000B860                            ; Object 30 - large green glassy blocks	(MZ)
0000B860                            ; ---------------------------------------------------------------------------
0000B860                            
0000B860                            Obj30:					; XREF: Obj_Index
0000B860 7000                       		moveq	#0,d0
0000B862 1028 0024                  		move.b	$24(a0),d0
0000B866 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B86A 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B86E 3028 0008                  		move.w	8(a0),d0
0000B872 0240 FF80                  		andi.w	#$FF80,d0
0000B876 3238 F700                  		move.w	($FFFFF700).w,d1
0000B87A 0441 0080                  		subi.w	#$80,d1
0000B87E 0241 FF80                  		andi.w	#$FF80,d1
0000B882 9041                       		sub.w	d1,d0
0000B884 0C40 0280                  		cmpi.w	#$280,d0
0000B888 6200 0000                  		bhi.w	Obj30_Delete
0000B88C 6000 0000                  		bra.w	DisplaySprite
0000B890                            ; ===========================================================================
0000B890                            
0000B890                            Obj30_Delete:
0000B890 6000 0000                  		bra.w	DeleteObject
0000B894                            ; ===========================================================================
0000B894 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B896 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B898 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B89A 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B89C 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B89E                            
0000B89E 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B8A1 0400 01                    		dc.b 4,	0, 1
0000B8A4 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B8A7 0800 01                    		dc.b 8,	0, 1
0000B8AA                            ; ===========================================================================
0000B8AA                            
0000B8AA                            Obj30_Main:				; XREF: Obj30_Index
0000B8AA 45F9 0000 B89E             		lea	(Obj30_Vars1).l,a2
0000B8B0 7201                       		moveq	#1,d1
0000B8B2 117C 0048 0016             		move.b	#$48,$16(a0)
0000B8B8 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B8BE 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B8C0 45F9 0000 B8A4             		lea	(Obj30_Vars2).l,a2
0000B8C6 7201                       		moveq	#1,d1
0000B8C8 117C 0038 0016             		move.b	#$38,$16(a0)
0000B8CE                            
0000B8CE                            loc_B40C:
0000B8CE 2248                       		movea.l	a0,a1
0000B8D0 6000                       		bra.s	Obj30_Load	; load main object
0000B8D2                            ; ===========================================================================
0000B8D2                            
0000B8D2                            Obj30_Loop:
0000B8D2 6100 0000                  		bsr.w	SingleObjLoad2
0000B8D6 6600                       		bne.s	loc_B480
0000B8D8                            
0000B8D8                            Obj30_Load:				; XREF: Obj30_Main
0000B8D8 135A 0024                  		move.b	(a2)+,$24(a1)
0000B8DC 12BC 0030                  		move.b	#$30,0(a1)
0000B8E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8E6 101A                       		move.b	(a2)+,d0
0000B8E8 4880                       		ext.w	d0
0000B8EA D068 000C                  		add.w	$C(a0),d0
0000B8EE 3340 000C                  		move.w	d0,$C(a1)
0000B8F2 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B8FA 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B900 137C 0004 0001             		move.b	#4,1(a1)
0000B906 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B90C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B912 137C 0020 0019             		move.b	#$20,$19(a1)
0000B918 137C 0004 0018             		move.b	#4,$18(a1)
0000B91E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B922 2348 003C                  		move.l	a0,$3C(a1)
0000B926 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B92A                            
0000B92A 137C 0010 0019             		move.b	#$10,$19(a1)
0000B930 137C 0003 0018             		move.b	#3,$18(a1)
0000B936 5029 0028                  		addq.b	#8,$28(a1)
0000B93A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B940                            
0000B940                            loc_B480:
0000B940 317C 0090 0032             		move.w	#$90,$32(a0)
0000B946 08E8 0004 0001             		bset	#4,1(a0)
0000B94C                            
0000B94C                            Obj30_Block012:				; XREF: Obj30_Index
0000B94C 6100 0000                  		bsr.w	Obj30_Types
0000B950 323C 002B                  		move.w	#$2B,d1
0000B954 343C 0048                  		move.w	#$48,d2
0000B958 363C 0049                  		move.w	#$49,d3
0000B95C 3828 0008                  		move.w	8(a0),d4
0000B960 6000 0000                  		bra.w	SolidObject
0000B964                            ; ===========================================================================
0000B964                            
0000B964                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B964 2268 003C                  		movea.l	$3C(a0),a1
0000B968 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B96E 6000 0000                  		bra.w	Obj30_Types
0000B972                            ; ===========================================================================
0000B972                            
0000B972                            Obj30_Block34:				; XREF: Obj30_Index
0000B972 6100 0000                  		bsr.w	Obj30_Types
0000B976 323C 002B                  		move.w	#$2B,d1
0000B97A 343C 0038                  		move.w	#$38,d2
0000B97E 363C 0039                  		move.w	#$39,d3
0000B982 3828 0008                  		move.w	8(a0),d4
0000B986 6000 0000                  		bra.w	SolidObject
0000B98A                            ; ===========================================================================
0000B98A                            
0000B98A                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B98A 2268 003C                  		movea.l	$3C(a0),a1
0000B98E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B994 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B99A 6000 0002                  		bra.w	*+4
0000B99E                            
0000B99E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B99E                            
0000B99E                            
0000B99E                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B99E 7000                       		moveq	#0,d0
0000B9A0 1028 0028                  		move.b	$28(a0),d0
0000B9A4 0240 0007                  		andi.w	#7,d0
0000B9A8 D040                       		add.w	d0,d0
0000B9AA 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B9AE 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B9B2                            ; End of function Obj30_Types
0000B9B2                            
0000B9B2                            ; ===========================================================================
0000B9B2 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B9B4 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B9B6 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B9B8 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B9BA 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B9BC                            ; ===========================================================================
0000B9BC                            
0000B9BC                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B9BC 4E75                       		rts	
0000B9BE                            ; ===========================================================================
0000B9BE                            
0000B9BE                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B9BE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9C2 323C 0040                  		move.w	#$40,d1
0000B9C6 6000                       		bra.s	loc_B514
0000B9C8                            ; ===========================================================================
0000B9C8                            
0000B9C8                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B9C8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9CC 323C 0040                  		move.w	#$40,d1
0000B9D0 4440                       		neg.w	d0
0000B9D2 D041                       		add.w	d1,d0
0000B9D4                            
0000B9D4                            loc_B514:				; XREF: Obj30_Type01
0000B9D4 0828 0003 0028             		btst	#3,$28(a0)
0000B9DA 6700                       		beq.s	loc_B526
0000B9DC 4440                       		neg.w	d0
0000B9DE D041                       		add.w	d1,d0
0000B9E0 E208                       		lsr.b	#1,d0
0000B9E2 0640 0020                  		addi.w	#$20,d0
0000B9E6                            
0000B9E6                            loc_B526:
0000B9E6 6000 0000                  		bra.w	loc_B5EE
0000B9EA                            ; ===========================================================================
0000B9EA                            
0000B9EA                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B9EA 0828 0003 0028             		btst	#3,$28(a0)
0000B9F0 6700                       		beq.s	loc_B53E
0000B9F2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9F6 0440 0010                  		subi.w	#$10,d0
0000B9FA 6000 0000                  		bra.w	loc_B5EE
0000B9FE                            ; ===========================================================================
0000B9FE                            
0000B9FE                            loc_B53E:
0000B9FE 0828 0003 0022             		btst	#3,$22(a0)
0000BA04 6600                       		bne.s	loc_B54E
0000BA06 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA0C 6000                       		bra.s	loc_B582
0000BA0E                            ; ===========================================================================
0000BA0E                            
0000BA0E                            loc_B54E:
0000BA0E 4A28 0034                  		tst.b	$34(a0)
0000BA12 6600                       		bne.s	loc_B582
0000BA14 117C 0001 0034             		move.b	#1,$34(a0)
0000BA1A 08E8 0000 0035             		bset	#0,$35(a0)
0000BA20 6700                       		beq.s	loc_B582
0000BA22 08E8 0007 0034             		bset	#7,$34(a0)
0000BA28 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA2E 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA34 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA3A 6600                       		bne.s	loc_B582
0000BA3C 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA42                            
0000BA42                            loc_B582:
0000BA42 4A28 0034                  		tst.b	$34(a0)
0000BA46 6A00                       		bpl.s	loc_B5AA
0000BA48 4A28 0038                  		tst.b	$38(a0)
0000BA4C 6700                       		beq.s	loc_B594
0000BA4E 5328 0038                  		subq.b	#1,$38(a0)
0000BA52 6600                       		bne.s	loc_B5AA
0000BA54                            
0000BA54                            loc_B594:
0000BA54 4A68 0032                  		tst.w	$32(a0)
0000BA58 6700                       		beq.s	loc_B5A4
0000BA5A 5368 0032                  		subq.w	#1,$32(a0)
0000BA5E 5368 0036                  		subq.w	#1,$36(a0)
0000BA62 6600                       		bne.s	loc_B5AA
0000BA64                            
0000BA64                            loc_B5A4:
0000BA64 08A8 0007 0034             		bclr	#7,$34(a0)
0000BA6A                            
0000BA6A                            loc_B5AA:
0000BA6A 3028 0032                  		move.w	$32(a0),d0
0000BA6E 6000                       		bra.s	loc_B5EE
0000BA70                            ; ===========================================================================
0000BA70                            
0000BA70                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BA70 0828 0003 0028             		btst	#3,$28(a0)
0000BA76 6700                       		beq.s	Obj30_ChkSwitch
0000BA78 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA7C 0440 0010                  		subi.w	#$10,d0
0000BA80 6000                       		bra.s	loc_B5EE
0000BA82                            ; ===========================================================================
0000BA82                            
0000BA82                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BA82 4A28 0034                  		tst.b	$34(a0)
0000BA86 6600                       		bne.s	loc_B5E0
0000BA88 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BA8C 7000                       		moveq	#0,d0
0000BA8E 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BA92 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BA94 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BA98 6700                       		beq.s	loc_B5EA	; if not, branch
0000BA9A 117C 0001 0034             		move.b	#1,$34(a0)
0000BAA0                            
0000BAA0                            loc_B5E0:
0000BAA0 4A68 0032                  		tst.w	$32(a0)
0000BAA4 6700                       		beq.s	loc_B5EA
0000BAA6 5568 0032                  		subq.w	#2,$32(a0)
0000BAAA                            
0000BAAA                            loc_B5EA:
0000BAAA 3028 0032                  		move.w	$32(a0),d0
0000BAAE                            
0000BAAE                            loc_B5EE:
0000BAAE 3228 0030                  		move.w	$30(a0),d1
0000BAB2 9240                       		sub.w	d0,d1
0000BAB4 3141 000C                  		move.w	d1,$C(a0)
0000BAB8 4E75                       		rts	
0000BABA                            ; ===========================================================================
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA                            Map_obj30:
0000BABA                            	include "_maps\obj30.asm"
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA 0000                       		dc.w byte_B600-Map_obj30
0000BABC 0000                       		dc.w byte_B63D-Map_obj30
0000BABE 0000                       		dc.w byte_B648-Map_obj30
0000BAC0 0C                         byte_B600:	dc.b $C
0000BAC1 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BAC6 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BACB C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BAD0 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BAD5 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BADA E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BADF 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BAE4 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BAE9 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BAEE 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BAF3 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BAF8 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BAFD 02                         byte_B63D:	dc.b 2
0000BAFE 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB03 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB08 0A                         byte_B648:	dc.b $A
0000BB09 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB0E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB13 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB18 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB1D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB22 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB27 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB2C 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB31 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB36 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB3C 00                         		even
0000BB3C 00                         		even
0000BB3C                            
0000BB3C                            ; ===========================================================================
0000BB3C                            ; ---------------------------------------------------------------------------
0000BB3C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB3C                            ; ---------------------------------------------------------------------------
0000BB3C                            
0000BB3C                            Obj31:					; XREF: Obj_Index
0000BB3C 7000                       		moveq	#0,d0
0000BB3E 1028 0024                  		move.b	$24(a0),d0
0000BB42 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB46 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB4A                            ; ===========================================================================
0000BB4A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB4C 0000                       		dc.w loc_B798-Obj31_Index
0000BB4E 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB50 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB52 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB54                            
0000BB54 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB56 0100                       		dc.b 1,	0
0000BB58                            
0000BB58 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BB5B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BB5E 08CC 03                    		dc.b 8,	$CC, 3
0000BB61 06F0 02                    		dc.b 6,	$F0, 2
0000BB64                            
0000BB64 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BB68 5000 7800                  		dc.w $5000, $7800
0000BB6C 3800 5800                  		dc.w $3800, $5800
0000BB70 B800                       		dc.w $B800
0000BB72                            ; ===========================================================================
0000BB72                            
0000BB72                            Obj31_Main:				; XREF: Obj31_Index
0000BB72 7000                       		moveq	#0,d0
0000BB74 1028 0028                  		move.b	$28(a0),d0
0000BB78 6A00                       		bpl.s	loc_B6CE
0000BB7A 0240 007F                  		andi.w	#$7F,d0
0000BB7E D040                       		add.w	d0,d0
0000BB80 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BB84 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BB88 101A                       		move.b	(a2)+,d0
0000BB8A 1140 0028                  		move.b	d0,$28(a0)
0000BB8E                            
0000BB8E                            loc_B6CE:
0000BB8E 0200 000F                  		andi.b	#$F,d0
0000BB92 D040                       		add.w	d0,d0
0000BB94 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BB98 4A40                       		tst.w	d0
0000BB9A 6600                       		bne.s	loc_B6E0
0000BB9C 3142 0032                  		move.w	d2,$32(a0)
0000BBA0                            
0000BBA0                            loc_B6E0:
0000BBA0 45F9 0000 BB58             		lea	(Obj31_Var).l,a2
0000BBA6 2248                       		movea.l	a0,a1
0000BBA8 7203                       		moveq	#3,d1
0000BBAA 6000                       		bra.s	Obj31_MakeStomper
0000BBAC                            ; ===========================================================================
0000BBAC                            
0000BBAC                            Obj31_Loop:
0000BBAC 6100 0000                  		bsr.w	SingleObjLoad2
0000BBB0 6600 0000                  		bne.w	Obj31_SetSize
0000BBB4                            
0000BBB4                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BBB4 135A 0024                  		move.b	(a2)+,$24(a1)
0000BBB8 12BC 0031                  		move.b	#$31,0(a1)
0000BBBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBC2 101A                       		move.b	(a2)+,d0
0000BBC4 4880                       		ext.w	d0
0000BBC6 D068 000C                  		add.w	$C(a0),d0
0000BBCA 3340 000C                  		move.w	d0,$C(a1)
0000BBCE 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BBD6 337C 0300 0002             		move.w	#$300,2(a1)
0000BBDC 137C 0004 0001             		move.b	#4,1(a1)
0000BBE2 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBE8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBEE 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBF4 3342 0034                  		move.w	d2,$34(a1)
0000BBF8 137C 0004 0018             		move.b	#4,$18(a1)
0000BBFE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC02 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC08 6600                       		bne.s	loc_B76A
0000BC0A 5341                       		subq.w	#1,d1
0000BC0C 1028 0028                  		move.b	$28(a0),d0
0000BC10 0240 00F0                  		andi.w	#$F0,d0
0000BC14 0C40 0020                  		cmpi.w	#$20,d0
0000BC18 679A                       		beq.s	Obj31_MakeStomper
0000BC1A 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC20 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC26 5241                       		addq.w	#1,d1
0000BC28                            
0000BC28                            loc_B76A:
0000BC28 2348 003C                  		move.l	a0,$3C(a1)
0000BC2C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC30                            
0000BC30 137C 0003 0018             		move.b	#3,$18(a1)
0000BC36                            
0000BC36                            Obj31_SetSize:
0000BC36 7000                       		moveq	#0,d0
0000BC38 1028 0028                  		move.b	$28(a0),d0
0000BC3C E648                       		lsr.w	#3,d0
0000BC3E 0200 000E                  		andi.b	#$E,d0
0000BC42 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC46 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC4A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC4E 6000                       		bra.s	loc_B798
0000BC50                            ; ===========================================================================
0000BC50 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC52 3009                       		dc.b $30, 9
0000BC54 100A                       		dc.b $10, $A
0000BC56                            ; ===========================================================================
0000BC56                            
0000BC56                            loc_B798:				; XREF: Obj31_Index
0000BC56 6100 0000                  		bsr.w	Obj31_Types
0000BC5A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BC60 7200                       		moveq	#0,d1
0000BC62 1228 0019                  		move.b	$19(a0),d1
0000BC66 0641 000B                  		addi.w	#$B,d1
0000BC6A 343C 000C                  		move.w	#$C,d2
0000BC6E 363C 000D                  		move.w	#$D,d3
0000BC72 3828 0008                  		move.w	8(a0),d4
0000BC76 6100 0000                  		bsr.w	SolidObject
0000BC7A 0828 0003 0022             		btst	#3,$22(a0)
0000BC80 6700                       		beq.s	Obj31_Display
0000BC82 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BC88 6400                       		bcc.s	Obj31_Display
0000BC8A 2448                       		movea.l	a0,a2
0000BC8C 41F8 D000                  		lea	($FFFFD000).w,a0
0000BC90 4EB9 0000 0000             		jsr	KillSonic
0000BC96 204A                       		movea.l	a2,a0
0000BC98                            
0000BC98                            Obj31_Display:
0000BC98 6100 0000                  		bsr.w	DisplaySprite
0000BC9C 6000 0000                  		bra.w	Obj31_ChkDel
0000BCA0                            ; ===========================================================================
0000BCA0                            
0000BCA0                            loc_B7E2:				; XREF: Obj31_Index
0000BCA0 117C 0080 0016             		move.b	#$80,$16(a0)
0000BCA6 08E8 0004 0001             		bset	#4,1(a0)
0000BCAC 2268 003C                  		movea.l	$3C(a0),a1
0000BCB0 1029 0032                  		move.b	$32(a1),d0
0000BCB4 EA08                       		lsr.b	#5,d0
0000BCB6 5600                       		addq.b	#3,d0
0000BCB8 1140 001A                  		move.b	d0,$1A(a0)
0000BCBC                            
0000BCBC                            loc_B7FE:				; XREF: Obj31_Index
0000BCBC 2268 003C                  		movea.l	$3C(a0),a1
0000BCC0 7000                       		moveq	#0,d0
0000BCC2 1029 0032                  		move.b	$32(a1),d0
0000BCC6 D068 0030                  		add.w	$30(a0),d0
0000BCCA 3140 000C                  		move.w	d0,$C(a0)
0000BCCE                            
0000BCCE                            Obj31_Display2:				; XREF: Obj31_Index
0000BCCE 6100 0000                  		bsr.w	DisplaySprite
0000BCD2                            
0000BCD2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BCD2 3028 0008                  		move.w	8(a0),d0
0000BCD6 0240 FF80                  		andi.w	#$FF80,d0
0000BCDA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCDE 0441 0080                  		subi.w	#$80,d1
0000BCE2 0241 FF80                  		andi.w	#$FF80,d1
0000BCE6 9041                       		sub.w	d1,d0
0000BCE8 0C40 0280                  		cmpi.w	#$280,d0
0000BCEC 6200 0000                  		bhi.w	DeleteObject
0000BCF0 4E75                       		rts	
0000BCF2                            ; ===========================================================================
0000BCF2                            
0000BCF2                            Obj31_Types:				; XREF: loc_B798
0000BCF2 1028 0028                  		move.b	$28(a0),d0
0000BCF6 0240 000F                  		andi.w	#$F,d0
0000BCFA D040                       		add.w	d0,d0
0000BCFC 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD00 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD04                            ; ===========================================================================
0000BD04 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD06 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD08 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD0A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD0C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD0E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD10 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD12                            ; ===========================================================================
0000BD12                            
0000BD12                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD12 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD16 7000                       		moveq	#0,d0
0000BD18 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD1C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD20 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD22 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD26 6A00                       		bpl.s	loc_B872
0000BD28 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD2E 6700                       		beq.s	loc_B8A0
0000BD30                            
0000BD30                            loc_B872:
0000BD30 4A68 0032                  		tst.w	$32(a0)
0000BD34 6700                       		beq.s	loc_B8A0
0000BD36 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD3A 0200 000F                  		andi.b	#$F,d0
0000BD3E 6600                       		bne.s	loc_B892
0000BD40 4A28 0001                  		tst.b	1(a0)
0000BD44 6A00                       		bpl.s	loc_B892
0000BD46 303C 00C7                  		move.w	#$C7,d0
0000BD4A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD50                            
0000BD50                            loc_B892:
0000BD50 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD56 6400                       		bcc.s	Obj31_Restart
0000BD58 317C 0000 0032             		move.w	#0,$32(a0)
0000BD5E                            
0000BD5E                            loc_B8A0:
0000BD5E 317C 0000 0012             		move.w	#0,$12(a0)
0000BD64 6000                       		bra.s	Obj31_Restart
0000BD66                            ; ===========================================================================
0000BD66                            
0000BD66                            loc_B8A8:				; XREF: Obj31_Type00
0000BD66 3228 0034                  		move.w	$34(a0),d1
0000BD6A B268 0032                  		cmp.w	$32(a0),d1
0000BD6E 6700                       		beq.s	Obj31_Restart
0000BD70 3028 0012                  		move.w	$12(a0),d0
0000BD74 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BD7A D168 0032                  		add.w	d0,$32(a0)
0000BD7E B268 0032                  		cmp.w	$32(a0),d1
0000BD82 6200                       		bhi.s	Obj31_Restart
0000BD84 3141 0032                  		move.w	d1,$32(a0)
0000BD88 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BD8E 4A28 0001                  		tst.b	1(a0)
0000BD92 6A00                       		bpl.s	Obj31_Restart
0000BD94 303C 00BD                  		move.w	#$BD,d0
0000BD98 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BD9E                            
0000BD9E                            Obj31_Restart:
0000BD9E 7000                       		moveq	#0,d0
0000BDA0 1028 0032                  		move.b	$32(a0),d0
0000BDA4 D068 0030                  		add.w	$30(a0),d0
0000BDA8 3140 000C                  		move.w	d0,$C(a0)
0000BDAC 4E75                       		rts	
0000BDAE                            ; ===========================================================================
0000BDAE                            
0000BDAE                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BDAE 4A68 0036                  		tst.w	$36(a0)
0000BDB2 6700                       		beq.s	loc_B938
0000BDB4 4A68 0038                  		tst.w	$38(a0)
0000BDB8 6700                       		beq.s	loc_B902
0000BDBA 5368 0038                  		subq.w	#1,$38(a0)
0000BDBE 6000                       		bra.s	loc_B97C
0000BDC0                            ; ===========================================================================
0000BDC0                            
0000BDC0                            loc_B902:
0000BDC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BDC4 0200 000F                  		andi.b	#$F,d0
0000BDC8 6600                       		bne.s	loc_B91C
0000BDCA 4A28 0001                  		tst.b	1(a0)
0000BDCE 6A00                       		bpl.s	loc_B91C
0000BDD0 303C 00C7                  		move.w	#$C7,d0
0000BDD4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDDA                            
0000BDDA                            loc_B91C:
0000BDDA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDE0 6400                       		bcc.s	loc_B97C
0000BDE2 317C 0000 0032             		move.w	#0,$32(a0)
0000BDE8 317C 0000 0012             		move.w	#0,$12(a0)
0000BDEE 317C 0000 0036             		move.w	#0,$36(a0)
0000BDF4 6000                       		bra.s	loc_B97C
0000BDF6                            ; ===========================================================================
0000BDF6                            
0000BDF6                            loc_B938:				; XREF: Obj31_Type01
0000BDF6 3228 0034                  		move.w	$34(a0),d1
0000BDFA B268 0032                  		cmp.w	$32(a0),d1
0000BDFE 6700                       		beq.s	loc_B97C
0000BE00 3028 0012                  		move.w	$12(a0),d0
0000BE04 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE0A D168 0032                  		add.w	d0,$32(a0)
0000BE0E B268 0032                  		cmp.w	$32(a0),d1
0000BE12 6200                       		bhi.s	loc_B97C
0000BE14 3141 0032                  		move.w	d1,$32(a0)
0000BE18 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE1E 317C 0001 0036             		move.w	#1,$36(a0)
0000BE24 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE2A 4A28 0001                  		tst.b	1(a0)
0000BE2E 6A00                       		bpl.s	loc_B97C
0000BE30 303C 00BD                  		move.w	#$BD,d0
0000BE34 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE3A                            
0000BE3A                            loc_B97C:
0000BE3A 6000 FF62                  		bra.w	Obj31_Restart
0000BE3E                            ; ===========================================================================
0000BE3E                            
0000BE3E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE3E 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE42 9068 0008                  		sub.w	8(a0),d0
0000BE46 6400                       		bcc.s	loc_B98C
0000BE48 4440                       		neg.w	d0
0000BE4A                            
0000BE4A                            loc_B98C:
0000BE4A 0C40 0090                  		cmpi.w	#$90,d0
0000BE4E 6400                       		bcc.s	loc_B996
0000BE50 5228 0028                  		addq.b	#1,$28(a0)
0000BE54                            
0000BE54                            loc_B996:
0000BE54 6000 FF48                  		bra.w	Obj31_Restart
0000BE58                            ; ===========================================================================
0000BE58                            ; ---------------------------------------------------------------------------
0000BE58                            ; Object 45 - spiked metal block from beta version (MZ)
0000BE58                            ; ---------------------------------------------------------------------------
0000BE58                            
0000BE58                            Obj45:					; XREF: Obj_Index
0000BE58 7000                       		moveq	#0,d0
0000BE5A 1028 0024                  		move.b	$24(a0),d0
0000BE5E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BE62 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BE66                            ; ===========================================================================
0000BE66 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BE68 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BE6A 0000                       		dc.w loc_BA8E-Obj45_Index
0000BE6C 0000                       		dc.w Obj45_Display-Obj45_Index
0000BE6E 0000                       		dc.w loc_BA7A-Obj45_Index
0000BE70                            
0000BE70 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BE73 04E4 01                    		dc.b	4, $E4,	  1
0000BE76 0834 03                    		dc.b	8, $34,	  3
0000BE79 0628 02                    		dc.b	6, $28,	  2
0000BE7C                            
0000BE7C 3800                       word_B9BE:	dc.w $3800
0000BE7E A000                       		dc.w -$6000
0000BE80 5000                       		dc.w $5000
0000BE82                            ; ===========================================================================
0000BE82                            
0000BE82                            Obj45_Main:				; XREF: Obj45_Index
0000BE82 7000                       		moveq	#0,d0
0000BE84 1028 0028                  		move.b	$28(a0),d0
0000BE88 D040                       		add.w	d0,d0
0000BE8A 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BE8E 45F9 0000 BE70             		lea	(Obj45_Var).l,a2
0000BE94 2248                       		movea.l	a0,a1
0000BE96 7203                       		moveq	#3,d1
0000BE98 6000                       		bra.s	Obj45_Load
0000BE9A                            ; ===========================================================================
0000BE9A                            
0000BE9A                            Obj45_Loop:
0000BE9A 6100 0000                  		bsr.w	SingleObjLoad2
0000BE9E 6600                       		bne.s	loc_BA52
0000BEA0                            
0000BEA0                            Obj45_Load:				; XREF: Obj45_Main
0000BEA0 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEA4 12BC 0045                  		move.b	#$45,0(a1)
0000BEA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BEAE 101A                       		move.b	(a2)+,d0
0000BEB0 4880                       		ext.w	d0
0000BEB2 D068 0008                  		add.w	8(a0),d0
0000BEB6 3340 0008                  		move.w	d0,8(a1)
0000BEBA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BEC2 337C 0300 0002             		move.w	#$300,2(a1)
0000BEC8 137C 0004 0001             		move.b	#4,1(a1)
0000BECE 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BED4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BEDA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BEE0 137C 0020 0019             		move.b	#$20,$19(a1)
0000BEE6 3342 0034                  		move.w	d2,$34(a1)
0000BEEA 137C 0004 0018             		move.b	#4,$18(a1)
0000BEF0 0C12 0001                  		cmpi.b	#1,(a2)
0000BEF4 6600                       		bne.s	loc_BA40
0000BEF6 137C 0091 0020             		move.b	#$91,$20(a1)
0000BEFC                            
0000BEFC                            loc_BA40:
0000BEFC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF00 2348 003C                  		move.l	a0,$3C(a1)
0000BF04 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF08                            
0000BF08 137C 0003 0018             		move.b	#3,$18(a1)
0000BF0E                            
0000BF0E                            loc_BA52:
0000BF0E 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF14                            
0000BF14                            Obj45_Solid:				; XREF: Obj45_Index
0000BF14 3F28 0008                  		move.w	8(a0),-(sp)
0000BF18 6100 0000                  		bsr.w	Obj45_Move
0000BF1C 323C 0017                  		move.w	#$17,d1
0000BF20 343C 0020                  		move.w	#$20,d2
0000BF24 363C 0020                  		move.w	#$20,d3
0000BF28 381F                       		move.w	(sp)+,d4
0000BF2A 6100 0000                  		bsr.w	SolidObject
0000BF2E 6100 0000                  		bsr.w	DisplaySprite
0000BF32 6000 0000                  		bra.w	Obj45_ChkDel
0000BF36                            ; ===========================================================================
0000BF36                            
0000BF36                            loc_BA7A:				; XREF: Obj45_Index
0000BF36 2268 003C                  		movea.l	$3C(a0),a1
0000BF3A 1029 0032                  		move.b	$32(a1),d0
0000BF3E 0600 0010                  		addi.b	#$10,d0
0000BF42 EA08                       		lsr.b	#5,d0
0000BF44 5600                       		addq.b	#3,d0
0000BF46 1140 001A                  		move.b	d0,$1A(a0)
0000BF4A                            
0000BF4A                            loc_BA8E:				; XREF: Obj45_Index
0000BF4A 2268 003C                  		movea.l	$3C(a0),a1
0000BF4E 7000                       		moveq	#0,d0
0000BF50 1029 0032                  		move.b	$32(a1),d0
0000BF54 4440                       		neg.w	d0
0000BF56 D068 0030                  		add.w	$30(a0),d0
0000BF5A 3140 0008                  		move.w	d0,8(a0)
0000BF5E                            
0000BF5E                            Obj45_Display:				; XREF: Obj45_Index
0000BF5E 6100 0000                  		bsr.w	DisplaySprite
0000BF62                            
0000BF62                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BF62 3028 003A                  		move.w	$3A(a0),d0
0000BF66 0240 FF80                  		andi.w	#$FF80,d0
0000BF6A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF6E 0441 0080                  		subi.w	#$80,d1
0000BF72 0241 FF80                  		andi.w	#$FF80,d1
0000BF76 9041                       		sub.w	d1,d0
0000BF78 0C40 0280                  		cmpi.w	#$280,d0
0000BF7C 6200 0000                  		bhi.w	DeleteObject
0000BF80 4E75                       		rts	
0000BF82                            
0000BF82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF82                            
0000BF82                            
0000BF82                            Obj45_Move:				; XREF: Obj45_Solid
0000BF82 7000                       		moveq	#0,d0
0000BF84 1028 0028                  		move.b	$28(a0),d0
0000BF88 D040                       		add.w	d0,d0
0000BF8A 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BF8E 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BF92                            ; End of function Obj45_Move
0000BF92                            
0000BF92                            ; ===========================================================================
0000BF92 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BF94 0000                       		dc.w loc_BADA-off_BAD6
0000BF96                            ; ===========================================================================
0000BF96                            
0000BF96                            loc_BADA:				; XREF: off_BAD6
0000BF96 4A68 0036                  		tst.w	$36(a0)
0000BF9A 6700                       		beq.s	loc_BB08
0000BF9C 4A68 0038                  		tst.w	$38(a0)
0000BFA0 6700                       		beq.s	loc_BAEC
0000BFA2 5368 0038                  		subq.w	#1,$38(a0)
0000BFA6 6000                       		bra.s	loc_BB3C
0000BFA8                            ; ===========================================================================
0000BFA8                            
0000BFA8                            loc_BAEC:
0000BFA8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFAE 6400                       		bcc.s	loc_BB3C
0000BFB0 317C 0000 0032             		move.w	#0,$32(a0)
0000BFB6 317C 0000 0010             		move.w	#0,$10(a0)
0000BFBC 317C 0000 0036             		move.w	#0,$36(a0)
0000BFC2 6000                       		bra.s	loc_BB3C
0000BFC4                            ; ===========================================================================
0000BFC4                            
0000BFC4                            loc_BB08:				; XREF: loc_BADA
0000BFC4 3228 0034                  		move.w	$34(a0),d1
0000BFC8 B268 0032                  		cmp.w	$32(a0),d1
0000BFCC 6700                       		beq.s	loc_BB3C
0000BFCE 3028 0010                  		move.w	$10(a0),d0
0000BFD2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BFD8 D168 0032                  		add.w	d0,$32(a0)
0000BFDC B268 0032                  		cmp.w	$32(a0),d1
0000BFE0 6200                       		bhi.s	loc_BB3C
0000BFE2 3141 0032                  		move.w	d1,$32(a0)
0000BFE6 317C 0000 0010             		move.w	#0,$10(a0)
0000BFEC 317C 0001 0036             		move.w	#1,$36(a0)
0000BFF2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BFF8                            
0000BFF8                            loc_BB3C:
0000BFF8 7000                       		moveq	#0,d0
0000BFFA 1028 0032                  		move.b	$32(a0),d0
0000BFFE 4440                       		neg.w	d0
0000C000 D068 0030                  		add.w	$30(a0),d0
0000C004 3140 0008                  		move.w	d0,8(a0)
0000C008 4E75                       		rts	
0000C00A                            ; ===========================================================================
0000C00A                            ; ---------------------------------------------------------------------------
0000C00A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C00A                            ; ---------------------------------------------------------------------------
0000C00A                            Map_obj31:
0000C00A                            	include "_maps\obj31.asm"
0000C00A                            ; ---------------------------------------------------------------------------
0000C00A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C00A                            ; ---------------------------------------------------------------------------
0000C00A 0000                       		dc.w byte_BB64-Map_obj31
0000C00C 0000                       		dc.w byte_BB7E-Map_obj31
0000C00E 0000                       		dc.w byte_BB98-Map_obj31
0000C010 0000                       		dc.w byte_BB9E-Map_obj31
0000C012 0000                       		dc.w byte_BBA9-Map_obj31
0000C014 0000                       		dc.w byte_BBBE-Map_obj31
0000C016 0000                       		dc.w byte_BBDD-Map_obj31
0000C018 0000                       		dc.w byte_BC06-Map_obj31
0000C01A 0000                       		dc.w byte_BC06-Map_obj31
0000C01C 0000                       		dc.w byte_BC39-Map_obj31
0000C01E 0000                       		dc.w byte_BC53-Map_obj31
0000C020 05                         byte_BB64:	dc.b 5
0000C021 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C026 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C02B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C030 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C035 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C03A 05                         byte_BB7E:	dc.b 5
0000C03B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C040 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C045 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C04A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C04F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C054 01                         byte_BB98:	dc.b 1
0000C055 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C05A 02                         byte_BB9E:	dc.b 2
0000C05B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C060 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C065 04                         byte_BBA9:	dc.b 4
0000C066 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C06B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C070 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C075 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C07A 06                         byte_BBBE:	dc.b 6
0000C07B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C080 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C085 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C08A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C08F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C094 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C099 08                         byte_BBDD:	dc.b 8
0000C09A A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C09F B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0A4 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0A9 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0AE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0B3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0B8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0BD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0C2 0A                         byte_BC06:	dc.b $A
0000C0C3 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C0C8 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C0CD A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0D2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0D7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0DC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0E1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0E6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0EB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0F0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0F5 05                         byte_BC39:	dc.b 5
0000C0F6 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C0FB F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C100 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C105 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C10A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C10F 01                         byte_BC53:	dc.b 1
0000C110 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C116 00                         		even
0000C116 00                         		even
0000C116                            
0000C116                            ; ---------------------------------------------------------------------------
0000C116                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C116                            ; ---------------------------------------------------------------------------
0000C116                            Map_obj45:
0000C116                            	include "_maps\obj45.asm"
0000C116                            ; ---------------------------------------------------------------------------
0000C116                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C116                            ; ---------------------------------------------------------------------------
0000C116 0000                       		dc.w byte_BC6C-Map_obj45
0000C118 0000                       		dc.w byte_BC7C-Map_obj45
0000C11A 0000                       		dc.w byte_BC8C-Map_obj45
0000C11C 0000                       		dc.w byte_BC92-Map_obj45
0000C11E 0000                       		dc.w byte_BC9D-Map_obj45
0000C120 0000                       		dc.w byte_BCB2-Map_obj45
0000C122 0000                       		dc.w byte_BCD1-Map_obj45
0000C124 0000                       		dc.w byte_BCFA-Map_obj45
0000C126 0000                       		dc.w byte_BCFA-Map_obj45
0000C128 03                         byte_BC6C:	dc.b 3
0000C129 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C12E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C133 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C138 03                         byte_BC7C:	dc.b 3
0000C139 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C13E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C143 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C148 01                         byte_BC8C:	dc.b 1
0000C149 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C14E 02                         byte_BC92:	dc.b 2
0000C14F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C154 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C159 04                         byte_BC9D:	dc.b 4
0000C15A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C15F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C164 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C169 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C16E 06                         byte_BCB2:	dc.b 6
0000C16F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C174 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C179 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C17E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C183 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C188 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C18D 08                         byte_BCD1:	dc.b 8
0000C18E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C193 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C198 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C19D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1A2 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1A7 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1AC F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1B1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1B6 08                         byte_BCFA:	dc.b 8
0000C1B7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1BC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1C1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1C6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1CB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1D0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1D5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1DA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1DF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C1E4 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C1EA 00                         		even
0000C1EA 00                         		even
0000C1EA                            
0000C1EA                            ; ===========================================================================
0000C1EA                            ; ---------------------------------------------------------------------------
0000C1EA                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C1EA                            ; ---------------------------------------------------------------------------
0000C1EA                            
0000C1EA                            Obj32:					; XREF: Obj_Index
0000C1EA 7000                       		moveq	#0,d0
0000C1EC 1028 0024                  		move.b	$24(a0),d0
0000C1F0 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C1F4 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C1F8                            ; ===========================================================================
0000C1F8 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C1FA 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C1FC                            ; ===========================================================================
0000C1FC                            
0000C1FC                            Obj32_Main:				; XREF: Obj32_Index
0000C1FC 5428 0024                  		addq.b	#2,$24(a0)
0000C200 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C208 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C20E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C214 6700                       		beq.s	loc_BD60
0000C216 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C21C                            
0000C21C                            loc_BD60:
0000C21C 117C 0004 0001             		move.b	#4,1(a0)
0000C222 117C 0010 0019             		move.b	#$10,$19(a0)
0000C228 117C 0004 0018             		move.b	#4,$18(a0)
0000C22E 5668 000C                  		addq.w	#3,$C(a0)
0000C232                            
0000C232                            Obj32_Pressed:				; XREF: Obj32_Index
0000C232 4A28 0001                  		tst.b	1(a0)
0000C236 6A00                       		bpl.s	Obj32_Display
0000C238 323C 001B                  		move.w	#$1B,d1
0000C23C 343C 0005                  		move.w	#5,d2
0000C240 363C 0005                  		move.w	#5,d3
0000C244 3828 0008                  		move.w	8(a0),d4
0000C248 6100 0000                  		bsr.w	SolidObject
0000C24C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C252 1028 0028                  		move.b	$28(a0),d0
0000C256 0240 000F                  		andi.w	#$F,d0
0000C25A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C25E 47F3 0000                  		lea	(a3,d0.w),a3
0000C262 7600                       		moveq	#0,d3
0000C264 0828 0006 0028             		btst	#6,$28(a0)
0000C26A 6700                       		beq.s	loc_BDB2
0000C26C 7607                       		moveq	#7,d3
0000C26E                            
0000C26E                            loc_BDB2:
0000C26E 4A28 0028                  		tst.b	$28(a0)
0000C272 6A00                       		bpl.s	loc_BDBE
0000C274 6100 0000                  		bsr.w	Obj32_MZBlock
0000C278 6600                       		bne.s	loc_BDC8
0000C27A                            
0000C27A                            loc_BDBE:
0000C27A 4A28 0025                  		tst.b	$25(a0)
0000C27E 6600                       		bne.s	loc_BDC8
0000C280 0793                       		bclr	d3,(a3)
0000C282 6000                       		bra.s	loc_BDDE
0000C284                            ; ===========================================================================
0000C284                            
0000C284                            loc_BDC8:
0000C284 4A13                       		tst.b	(a3)
0000C286 6600                       		bne.s	loc_BDD6
0000C288 303C 00CD                  		move.w	#$CD,d0
0000C28C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C292                            
0000C292                            loc_BDD6:
0000C292 07D3                       		bset	d3,(a3)
0000C294 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C29A                            
0000C29A                            loc_BDDE:
0000C29A 0828 0005 0028             		btst	#5,$28(a0)
0000C2A0 6700                       		beq.s	Obj32_Display
0000C2A2 5328 001E                  		subq.b	#1,$1E(a0)
0000C2A6 6A00                       		bpl.s	Obj32_Display
0000C2A8 117C 0007 001E             		move.b	#7,$1E(a0)
0000C2AE 0868 0001 001A             		bchg	#1,$1A(a0)
0000C2B4                            
0000C2B4                            Obj32_Display:
0000C2B4 6100 0000                  		bsr.w	DisplaySprite
0000C2B8 3028 0008                  		move.w	8(a0),d0
0000C2BC 0240 FF80                  		andi.w	#$FF80,d0
0000C2C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2C4 0441 0080                  		subi.w	#$80,d1
0000C2C8 0241 FF80                  		andi.w	#$FF80,d1
0000C2CC 9041                       		sub.w	d1,d0
0000C2CE 0C40 0280                  		cmpi.w	#$280,d0
0000C2D2 6200 0000                  		bhi.w	Obj32_Delete
0000C2D6 4E75                       		rts	
0000C2D8                            ; ===========================================================================
0000C2D8                            
0000C2D8                            Obj32_Delete:
0000C2D8 6100 0000                  		bsr.w	DeleteObject
0000C2DC 4E75                       		rts	
0000C2DE                            
0000C2DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C2DE                            
0000C2DE                            
0000C2DE                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C2DE 3F03                       		move.w	d3,-(sp)
0000C2E0 3428 0008                  		move.w	8(a0),d2
0000C2E4 3628 000C                  		move.w	$C(a0),d3
0000C2E8 0442 0010                  		subi.w	#$10,d2
0000C2EC 5143                       		subq.w	#8,d3
0000C2EE 383C 0020                  		move.w	#$20,d4
0000C2F2 3A3C 0010                  		move.w	#$10,d5
0000C2F6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C2FA 3C3C 005F                  		move.w	#$5F,d6
0000C2FE                            
0000C2FE                            Obj32_MZLoop:
0000C2FE 4A29 0001                  		tst.b	1(a1)
0000C302 6A00                       		bpl.s	loc_BE4E
0000C304 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C308 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C30A                            
0000C30A                            loc_BE4E:
0000C30A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C30E 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C312                            
0000C312 361F                       		move.w	(sp)+,d3
0000C314 7000                       		moveq	#0,d0
0000C316                            
0000C316                            locret_BE5A:
0000C316 4E75                       		rts	
0000C318                            ; ===========================================================================
0000C318 1010                       Obj32_MZData:	dc.b $10, $10
0000C31A                            ; ===========================================================================
0000C31A                            
0000C31A                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C31A 7001                       		moveq	#1,d0
0000C31C 0240 003F                  		andi.w	#$3F,d0
0000C320 D040                       		add.w	d0,d0
0000C322 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C326 121A                       		move.b	(a2)+,d1
0000C328 4881                       		ext.w	d1
0000C32A 3029 0008                  		move.w	8(a1),d0
0000C32E 9041                       		sub.w	d1,d0
0000C330 9042                       		sub.w	d2,d0
0000C332 6400                       		bcc.s	loc_BE80
0000C334 D241                       		add.w	d1,d1
0000C336 D041                       		add.w	d1,d0
0000C338 6500                       		bcs.s	loc_BE84
0000C33A 60CE                       		bra.s	loc_BE4E
0000C33C                            ; ===========================================================================
0000C33C                            
0000C33C                            loc_BE80:
0000C33C B044                       		cmp.w	d4,d0
0000C33E 62CA                       		bhi.s	loc_BE4E
0000C340                            
0000C340                            loc_BE84:
0000C340 121A                       		move.b	(a2)+,d1
0000C342 4881                       		ext.w	d1
0000C344 3029 000C                  		move.w	$C(a1),d0
0000C348 9041                       		sub.w	d1,d0
0000C34A 9043                       		sub.w	d3,d0
0000C34C 6400                       		bcc.s	loc_BE9A
0000C34E D241                       		add.w	d1,d1
0000C350 D041                       		add.w	d1,d0
0000C352 6500                       		bcs.s	loc_BE9E
0000C354 60B4                       		bra.s	loc_BE4E
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            loc_BE9A:
0000C356 B045                       		cmp.w	d5,d0
0000C358 62B0                       		bhi.s	loc_BE4E
0000C35A                            
0000C35A                            loc_BE9E:
0000C35A 361F                       		move.w	(sp)+,d3
0000C35C 7001                       		moveq	#1,d0
0000C35E 4E75                       		rts	
0000C360                            ; End of function Obj32_MZBlock
0000C360                            
0000C360                            ; ===========================================================================
0000C360                            ; ---------------------------------------------------------------------------
0000C360                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C360                            ; ---------------------------------------------------------------------------
0000C360                            Map_obj32:
0000C360                            	include "_maps\obj32.asm"
0000C360                            ; ---------------------------------------------------------------------------
0000C360                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C360                            ; ---------------------------------------------------------------------------
0000C360 0000                       		dc.w byte_BEAC-Map_obj32
0000C362 0000                       		dc.w byte_BEB7-Map_obj32
0000C364 0000                       		dc.w byte_BEC2-Map_obj32
0000C366 0000                       		dc.w byte_BEB7-Map_obj32
0000C368 02                         byte_BEAC:	dc.b 2
0000C369 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C36E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C373 02                         byte_BEB7:	dc.b 2
0000C374 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C379 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C37E 02                         byte_BEC2:	dc.b 2
0000C37F F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C384 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C389 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C38E                            		even
0000C38E                            		even
0000C38E                            
0000C38E                            ; ===========================================================================
0000C38E                            ; ---------------------------------------------------------------------------
0000C38E                            ; Object 33 - pushable blocks (MZ, LZ)
0000C38E                            ; ---------------------------------------------------------------------------
0000C38E                            
0000C38E                            Obj33:					; XREF: Obj_Index
0000C38E 7000                       		moveq	#0,d0
0000C390 1028 0024                  		move.b	$24(a0),d0
0000C394 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C398 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C39C                            ; ===========================================================================
0000C39C 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C39E 0000                       		dc.w loc_BF6E-Obj33_Index
0000C3A0 0000                       		dc.w loc_C02C-Obj33_Index
0000C3A2                            
0000C3A2 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C3A4 4001                       		dc.b $40, 1
0000C3A6                            ; ===========================================================================
0000C3A6                            
0000C3A6                            Obj33_Main:				; XREF: Obj33_Index
0000C3A6 5428 0024                  		addq.b	#2,$24(a0)
0000C3AA 117C 000F 0016             		move.b	#$F,$16(a0)
0000C3B0 117C 000F 0017             		move.b	#$F,$17(a0)
0000C3B6 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C3BE 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C3C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C3CA 6600                       		bne.s	loc_BF16
0000C3CC 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C3D2                            
0000C3D2                            loc_BF16:
0000C3D2 117C 0004 0001             		move.b	#4,1(a0)
0000C3D8 117C 0003 0018             		move.b	#3,$18(a0)
0000C3DE 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C3E4 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C3EA 7000                       		moveq	#0,d0
0000C3EC 1028 0028                  		move.b	$28(a0),d0
0000C3F0 D040                       		add.w	d0,d0
0000C3F2 0240 000E                  		andi.w	#$E,d0
0000C3F6 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C3FA 115A 0019                  		move.b	(a2)+,$19(a0)
0000C3FE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C402 4A28 0028                  		tst.b	$28(a0)
0000C406 6700                       		beq.s	Obj33_ChkGone
0000C408 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C40E                            
0000C40E                            Obj33_ChkGone:
0000C40E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C412 7000                       		moveq	#0,d0
0000C414 1028 0023                  		move.b	$23(a0),d0
0000C418 6700                       		beq.s	loc_BF6E
0000C41A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C420 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C426 6600 0000                  		bne.w	DeleteObject
0000C42A                            
0000C42A                            loc_BF6E:				; XREF: Obj33_Index
0000C42A 4A28 0032                  		tst.b	$32(a0)
0000C42E 6600 0000                  		bne.w	loc_C046
0000C432 7200                       		moveq	#0,d1
0000C434 1228 0019                  		move.b	$19(a0),d1
0000C438 0641 000B                  		addi.w	#$B,d1
0000C43C 343C 0010                  		move.w	#$10,d2
0000C440 363C 0011                  		move.w	#$11,d3
0000C444 3828 0008                  		move.w	8(a0),d4
0000C448 6100 0000                  		bsr.w	loc_C186
0000C44C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C452 6600                       		bne.s	loc_BFC6	; if not, branch
0000C454 08A8 0007 0028             		bclr	#7,$28(a0)
0000C45A 3028 0008                  		move.w	8(a0),d0
0000C45E 0C40 0A20                  		cmpi.w	#$A20,d0
0000C462 6500                       		bcs.s	loc_BFC6
0000C464 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C468 6400                       		bcc.s	loc_BFC6
0000C46A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C46E 0440 001C                  		subi.w	#$1C,d0
0000C472 3140 000C                  		move.w	d0,$C(a0)
0000C476 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C47C 08E8 0007 0028             		bset	#7,$28(a0)
0000C482                            
0000C482                            loc_BFC6:
0000C482 3028 0008                  		move.w	8(a0),d0
0000C486 0240 FF80                  		andi.w	#$FF80,d0
0000C48A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C48E 0441 0080                  		subi.w	#$80,d1
0000C492 0241 FF80                  		andi.w	#$FF80,d1
0000C496 9041                       		sub.w	d1,d0
0000C498 0C40 0280                  		cmpi.w	#$280,d0
0000C49C 6200                       		bhi.s	loc_BFE6
0000C49E 6000 0000                  		bra.w	DisplaySprite
0000C4A2                            ; ===========================================================================
0000C4A2                            
0000C4A2                            loc_BFE6:
0000C4A2 3028 0034                  		move.w	$34(a0),d0
0000C4A6 0240 FF80                  		andi.w	#$FF80,d0
0000C4AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4AE 0441 0080                  		subi.w	#$80,d1
0000C4B2 0241 FF80                  		andi.w	#$FF80,d1
0000C4B6 9041                       		sub.w	d1,d0
0000C4B8 0C40 0280                  		cmpi.w	#$280,d0
0000C4BC 6200                       		bhi.s	loc_C016
0000C4BE 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C4C4 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C4CA 117C 0004 0024             		move.b	#4,$24(a0)
0000C4D0 6000                       		bra.s	loc_C02C
0000C4D2                            ; ===========================================================================
0000C4D2                            
0000C4D2                            loc_C016:
0000C4D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4D6 7000                       		moveq	#0,d0
0000C4D8 1028 0023                  		move.b	$23(a0),d0
0000C4DC 6700                       		beq.s	loc_C028
0000C4DE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C4E4                            
0000C4E4                            loc_C028:
0000C4E4 6000 0000                  		bra.w	DeleteObject
0000C4E8                            ; ===========================================================================
0000C4E8                            
0000C4E8                            loc_C02C:				; XREF: Obj33_Index
0000C4E8 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C4EC 6700                       		beq.s	locret_C044
0000C4EE 117C 0002 0024             		move.b	#2,$24(a0)
0000C4F4 4228 0032                  		clr.b	$32(a0)
0000C4F8 4268 0010                  		clr.w	$10(a0)
0000C4FC 4268 0012                  		clr.w	$12(a0)
0000C500                            
0000C500                            locret_C044:
0000C500 4E75                       		rts	
0000C502                            ; ===========================================================================
0000C502                            
0000C502                            loc_C046:				; XREF: loc_BF6E
0000C502 3F28 0008                  		move.w	8(a0),-(sp)
0000C506 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C50C 6400                       		bcc.s	loc_C056
0000C50E 6100 0000                  		bsr.w	SpeedToPos
0000C512                            
0000C512                            loc_C056:
0000C512 0828 0001 0022             		btst	#1,$22(a0)
0000C518 6700                       		beq.s	loc_C0A0
0000C51A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C520 4EB9 0000 0000             		jsr	ObjHitFloor
0000C526 4A41                       		tst.w	d1
0000C528 6A00 0000                  		bpl.w	loc_C09E
0000C52C D368 000C                  		add.w	d1,$C(a0)
0000C530 4268 0012                  		clr.w	$12(a0)
0000C534 08A8 0001 0022             		bclr	#1,$22(a0)
0000C53A 3011                       		move.w	(a1),d0
0000C53C 0240 03FF                  		andi.w	#$3FF,d0
0000C540 0C40 016A                  		cmpi.w	#$16A,d0
0000C544 6500                       		bcs.s	loc_C09E
0000C546 3028 0030                  		move.w	$30(a0),d0
0000C54A E640                       		asr.w	#3,d0
0000C54C 3140 0010                  		move.w	d0,$10(a0)
0000C550 117C 0001 0032             		move.b	#1,$32(a0)
0000C556 4268 000E                  		clr.w	$E(a0)
0000C55A                            
0000C55A                            loc_C09E:
0000C55A 6000                       		bra.s	loc_C0E6
0000C55C                            ; ===========================================================================
0000C55C                            
0000C55C                            loc_C0A0:
0000C55C 4A68 0010                  		tst.w	$10(a0)
0000C560 6700 0000                  		beq.w	loc_C0D6
0000C564 6B00                       		bmi.s	loc_C0BC
0000C566 7600                       		moveq	#0,d3
0000C568 1628 0019                  		move.b	$19(a0),d3
0000C56C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C572 4A41                       		tst.w	d1		; has block touched a wall?
0000C574 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C576 6000                       		bra.s	loc_C0E6
0000C578                            ; ===========================================================================
0000C578                            
0000C578                            loc_C0BC:
0000C578 7600                       		moveq	#0,d3
0000C57A 1628 0019                  		move.b	$19(a0),d3
0000C57E 4643                       		not.w	d3
0000C580 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C586 4A41                       		tst.w	d1		; has block touched a wall?
0000C588 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C58A 6000                       		bra.s	loc_C0E6
0000C58C                            ; ===========================================================================
0000C58C                            
0000C58C                            Obj33_StopPush:
0000C58C 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C590 6000                       		bra.s	loc_C0E6
0000C592                            ; ===========================================================================
0000C592                            
0000C592                            loc_C0D6:
0000C592 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C59A 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C5A0 6400                       		bcc.s	loc_C104
0000C5A2                            
0000C5A2                            loc_C0E6:
0000C5A2 7200                       		moveq	#0,d1
0000C5A4 1228 0019                  		move.b	$19(a0),d1
0000C5A8 0641 000B                  		addi.w	#$B,d1
0000C5AC 343C 0010                  		move.w	#$10,d2
0000C5B0 363C 0011                  		move.w	#$11,d3
0000C5B4 381F                       		move.w	(sp)+,d4
0000C5B6 6100 0000                  		bsr.w	loc_C186
0000C5BA 6100                       		bsr.s	Obj33_ChkLava
0000C5BC 6000 FEC4                  		bra.w	loc_BFC6
0000C5C0                            ; ===========================================================================
0000C5C0                            
0000C5C0                            loc_C104:
0000C5C0 381F                       		move.w	(sp)+,d4
0000C5C2 43F8 D000                  		lea	($FFFFD000).w,a1
0000C5C6 08A9 0003 0022             		bclr	#3,$22(a1)
0000C5CC 08A8 0003 0022             		bclr	#3,$22(a0)
0000C5D2 6000 FECE                  		bra.w	loc_BFE6
0000C5D6                            ; ===========================================================================
0000C5D6                            
0000C5D6                            Obj33_ChkLava:
0000C5D6 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C5DC 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C5DE 343C FFE0                  		move.w	#-$20,d2
0000C5E2 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C5E8 6700                       		beq.s	Obj33_LoadLava
0000C5EA 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C5F0 6700                       		beq.s	Obj33_LoadLava
0000C5F2 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C5F8 6700                       		beq.s	Obj33_LoadLava
0000C5FA 4E75                       		rts	
0000C5FC                            ; ===========================================================================
0000C5FC                            
0000C5FC                            Obj33_ChkLava2:
0000C5FC 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C602 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C604 343C 0020                  		move.w	#$20,d2
0000C608 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C60E 6700                       		beq.s	Obj33_LoadLava
0000C610 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C616 6700                       		beq.s	Obj33_LoadLava
0000C618                            
0000C618                            Obj33_NoLava:
0000C618 4E75                       		rts	
0000C61A                            ; ===========================================================================
0000C61A                            
0000C61A                            Obj33_LoadLava:
0000C61A 6100 0000                  		bsr.w	SingleObjLoad
0000C61E 6600                       		bne.s	locret_C184
0000C620 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C624 3368 0008 0008             		move.w	8(a0),8(a1)
0000C62A D569 0008                  		add.w	d2,8(a1)
0000C62E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C634 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C63A 2348 003C                  		move.l	a0,$3C(a1)
0000C63E                            
0000C63E                            locret_C184:
0000C63E 4E75                       		rts	
0000C640                            ; ===========================================================================
0000C640                            
0000C640                            loc_C186:				; XREF: loc_BF6E
0000C640 1028 0025                  		move.b	$25(a0),d0
0000C644 6700 0000                  		beq.w	loc_C218
0000C648 5500                       		subq.b	#2,d0
0000C64A 6600                       		bne.s	loc_C1AA
0000C64C 6100 B3C4                  		bsr.w	ExitPlatform
0000C650 0829 0003 0022             		btst	#3,$22(a1)
0000C656 6600                       		bne.s	loc_C1A4
0000C658 4228 0025                  		clr.b	$25(a0)
0000C65C 4E75                       		rts	
0000C65E                            ; ===========================================================================
0000C65E                            
0000C65E                            loc_C1A4:
0000C65E 3404                       		move.w	d4,d2
0000C660 6000 B90E                  		bra.w	MvSonicOnPtfm
0000C664                            ; ===========================================================================
0000C664                            
0000C664                            loc_C1AA:
0000C664 5500                       		subq.b	#2,d0
0000C666 6600                       		bne.s	loc_C1F2
0000C668 6100 0000                  		bsr.w	SpeedToPos
0000C66C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C672 4EB9 0000 0000             		jsr	ObjHitFloor
0000C678 4A41                       		tst.w	d1
0000C67A 6A00 0000                  		bpl.w	locret_C1F0
0000C67E D368 000C                  		add.w	d1,$C(a0)
0000C682 4268 0012                  		clr.w	$12(a0)
0000C686 4228 0025                  		clr.b	$25(a0)
0000C68A 3011                       		move.w	(a1),d0
0000C68C 0240 03FF                  		andi.w	#$3FF,d0
0000C690 0C40 016A                  		cmpi.w	#$16A,d0
0000C694 6500                       		bcs.s	locret_C1F0
0000C696 3028 0030                  		move.w	$30(a0),d0
0000C69A E640                       		asr.w	#3,d0
0000C69C 3140 0010                  		move.w	d0,$10(a0)
0000C6A0 117C 0001 0032             		move.b	#1,$32(a0)
0000C6A6 4268 000E                  		clr.w	$E(a0)
0000C6AA                            
0000C6AA                            locret_C1F0:
0000C6AA 4E75                       		rts	
0000C6AC                            ; ===========================================================================
0000C6AC                            
0000C6AC                            loc_C1F2:
0000C6AC 6100 0000                  		bsr.w	SpeedToPos
0000C6B0 3028 0008                  		move.w	8(a0),d0
0000C6B4 0240 000C                  		andi.w	#$C,d0
0000C6B8 6600 0000                  		bne.w	locret_C2E4
0000C6BC 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C6C2 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C6C8 4268 0010                  		clr.w	$10(a0)
0000C6CC 5528 0025                  		subq.b	#2,$25(a0)
0000C6D0 4E75                       		rts	
0000C6D2                            ; ===========================================================================
0000C6D2                            
0000C6D2                            loc_C218:
0000C6D2 6100 0000                  		bsr.w	loc_FAC8
0000C6D6 4A44                       		tst.w	d4
0000C6D8 6700 0000                  		beq.w	locret_C2E4
0000C6DC 6B00 0000                  		bmi.w	locret_C2E4
0000C6E0 4A28 0032                  		tst.b	$32(a0)
0000C6E4 6700                       		beq.s	loc_C230
0000C6E6 6000 0000                  		bra.w	locret_C2E4
0000C6EA                            ; ===========================================================================
0000C6EA                            
0000C6EA                            loc_C230:
0000C6EA 4A40                       		tst.w	d0
0000C6EC 6700 0000                  		beq.w	locret_C2E4
0000C6F0 6B00                       		bmi.s	loc_C268
0000C6F2 0829 0000 0022             		btst	#0,$22(a1)
0000C6F8 6600 0000                  		bne.w	locret_C2E4
0000C6FC 3F00                       		move.w	d0,-(sp)
0000C6FE 7600                       		moveq	#0,d3
0000C700 1628 0019                  		move.b	$19(a0),d3
0000C704 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C70A 301F                       		move.w	(sp)+,d0
0000C70C 4A41                       		tst.w	d1
0000C70E 6B00 0000                  		bmi.w	locret_C2E4
0000C712 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C71A 7001                       		moveq	#1,d0
0000C71C 323C 0040                  		move.w	#$40,d1
0000C720 6000                       		bra.s	loc_C294
0000C722                            ; ===========================================================================
0000C722                            
0000C722                            loc_C268:
0000C722 0829 0000 0022             		btst	#0,$22(a1)
0000C728 6700                       		beq.s	locret_C2E4
0000C72A 3F00                       		move.w	d0,-(sp)
0000C72C 7600                       		moveq	#0,d3
0000C72E 1628 0019                  		move.b	$19(a0),d3
0000C732 4643                       		not.w	d3
0000C734 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C73A 301F                       		move.w	(sp)+,d0
0000C73C 4A41                       		tst.w	d1
0000C73E 6B00                       		bmi.s	locret_C2E4
0000C740 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C748 70FF                       		moveq	#-1,d0
0000C74A 323C FFC0                  		move.w	#-$40,d1
0000C74E                            
0000C74E                            loc_C294:
0000C74E 43F8 D000                  		lea	($FFFFD000).w,a1
0000C752 D169 0008                  		add.w	d0,8(a1)
0000C756 3341 0014                  		move.w	d1,$14(a1)
0000C75A 337C 0000 0010             		move.w	#0,$10(a1)
0000C760 3F00                       		move.w	d0,-(sp)
0000C762 303C 00A7                  		move.w	#$A7,d0
0000C766 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C76C 301F                       		move.w	(sp)+,d0
0000C76E 4A28 0028                  		tst.b	$28(a0)
0000C772 6B00                       		bmi.s	locret_C2E4
0000C774 3F00                       		move.w	d0,-(sp)
0000C776 4EB9 0000 0000             		jsr	ObjHitFloor
0000C77C 301F                       		move.w	(sp)+,d0
0000C77E 0C41 0004                  		cmpi.w	#4,d1
0000C782 6F00                       		ble.s	loc_C2E0
0000C784 317C 0400 0010             		move.w	#$400,$10(a0)
0000C78A 4A40                       		tst.w	d0
0000C78C 6A00                       		bpl.s	loc_C2D8
0000C78E 4468 0010                  		neg.w	$10(a0)
0000C792                            
0000C792                            loc_C2D8:
0000C792 117C 0006 0025             		move.b	#6,$25(a0)
0000C798 6000                       		bra.s	locret_C2E4
0000C79A                            ; ===========================================================================
0000C79A                            
0000C79A                            loc_C2E0:
0000C79A D368 000C                  		add.w	d1,$C(a0)
0000C79E                            
0000C79E                            locret_C2E4:
0000C79E 4E75                       		rts	
0000C7A0                            ; ===========================================================================
0000C7A0                            ; ---------------------------------------------------------------------------
0000C7A0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7A0                            ; ---------------------------------------------------------------------------
0000C7A0                            Map_obj33:
0000C7A0                            	include "_maps\obj33.asm"
0000C7A0                            ; ---------------------------------------------------------------------------
0000C7A0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7A0                            ; ---------------------------------------------------------------------------
0000C7A0 0000                       		dc.w byte_C2EA-Map_obj33
0000C7A2 0000                       		dc.w byte_C2F0-Map_obj33
0000C7A4 01                         byte_C2EA:	dc.b 1
0000C7A5 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C7AA 04                         byte_C2F0:	dc.b 4
0000C7AB F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C7B0 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C7B5 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C7BA F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C7C0 00                         		even
0000C7C0 00                         		even
0000C7C0                            
0000C7C0                            ; ===========================================================================
0000C7C0                            ; ---------------------------------------------------------------------------
0000C7C0                            ; Object 34 - zone title cards
0000C7C0                            ; ---------------------------------------------------------------------------
0000C7C0                            
0000C7C0                            Obj34:					; XREF: Obj_Index
0000C7C0 7000                       		moveq	#0,d0
0000C7C2 1028 0024                  		move.b	$24(a0),d0
0000C7C6 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C7CA 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C7CE                            ; ===========================================================================
0000C7CE 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C7D0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C7D2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7D4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7D6                            ; ===========================================================================
0000C7D6                            
0000C7D6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C7D6 2248                       		movea.l	a0,a1
0000C7D8 7000                       		moveq	#0,d0
0000C7DA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C7DE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C7E4 6600                       		bne.s	Obj34_CheckFZ
0000C7E6 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C7E8                            
0000C7E8                            Obj34_CheckFZ:
0000C7E8 3400                       		move.w	d0,d2
0000C7EA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C7F0 6600                       		bne.s	Obj34_LoadConfig
0000C7F2 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C7F4 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C7F6                            
0000C7F6                            Obj34_LoadConfig:
0000C7F6 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C7FC E948                       		lsl.w	#4,d0
0000C7FE D6C0                       		adda.w	d0,a3
0000C800 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C806 7203                       		moveq	#3,d1
0000C808                            
0000C808                            Obj34_Loop:
0000C808 12BC 0034                  		move.b	#$34,0(a1)
0000C80C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C810 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C814 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C818 335A 000A                  		move.w	(a2)+,$A(a1)
0000C81C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C820 101A                       		move.b	(a2)+,d0
0000C822 6600                       		bne.s	Obj34_ActNumber
0000C824 1002                       		move.b	d2,d0
0000C826                            
0000C826                            Obj34_ActNumber:
0000C826 0C00 0007                  		cmpi.b	#7,d0
0000C82A 6600                       		bne.s	Obj34_MakeSprite
0000C82C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C830 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C836 6600                       		bne.s	Obj34_MakeSprite
0000C838 5300                       		subq.b	#1,d0
0000C83A                            
0000C83A                            Obj34_MakeSprite:
0000C83A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C83E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C846 337C 8580 0002             		move.w	#$8580,2(a1)
0000C84C 137C 0078 0019             		move.b	#$78,$19(a1)
0000C852 137C 0000 0001             		move.b	#0,1(a1)
0000C858 137C 0000 0018             		move.b	#0,$18(a1)
0000C85E 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C864 43E9 0040                  		lea	$40(a1),a1	; next object
0000C868 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C86C                            
0000C86C                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C86C 7210                       		moveq	#$10,d1		; set horizontal speed
0000C86E 3028 0030                  		move.w	$30(a0),d0
0000C872 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C876 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C878 6C00                       		bge.s	Obj34_Move
0000C87A 4441                       		neg.w	d1
0000C87C                            
0000C87C                            Obj34_Move:
0000C87C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C880                            
0000C880                            loc_C3C8:
0000C880 3028 0008                  		move.w	8(a0),d0
0000C884 6B00                       		bmi.s	locret_C3D8
0000C886 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C88A 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C88C 6000 0000                  		bra.w	DisplaySprite
0000C890                            ; ===========================================================================
0000C890                            
0000C890                            locret_C3D8:
0000C890 4E75                       		rts	
0000C892                            ; ===========================================================================
0000C892                            
0000C892                            Obj34_Wait:				; XREF: Obj34_Index
0000C892 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C896 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C898 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C89C 6000 0000                  		bra.w	DisplaySprite
0000C8A0                            ; ===========================================================================
0000C8A0                            
0000C8A0                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C8A0 4A28 0001                  		tst.b	1(a0)
0000C8A4 6A00                       		bpl.s	Obj34_ChangeArt
0000C8A6 7220                       		moveq	#$20,d1
0000C8A8 3028 0032                  		move.w	$32(a0),d0
0000C8AC B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C8B0 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C8B2 6C00                       		bge.s	Obj34_Move2
0000C8B4 4441                       		neg.w	d1
0000C8B6                            
0000C8B6                            Obj34_Move2:
0000C8B6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8BA 3028 0008                  		move.w	8(a0),d0
0000C8BE 6B00                       		bmi.s	locret_C412
0000C8C0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8C4 6400                       		bcc.s	locret_C412	; if yes, branch
0000C8C6 6000 0000                  		bra.w	DisplaySprite
0000C8CA                            ; ===========================================================================
0000C8CA                            
0000C8CA                            locret_C412:
0000C8CA 4E75                       		rts	
0000C8CC                            ; ===========================================================================
0000C8CC                            
0000C8CC                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C8CC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C8D2 6600                       		bne.s	Obj34_Delete
0000C8D4 7002                       		moveq	#2,d0
0000C8D6 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C8DC 7000                       		moveq	#0,d0
0000C8DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C8E2 0640 0015                  		addi.w	#$15,d0
0000C8E6 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C8EC                            
0000C8EC                            Obj34_Delete:
0000C8EC 6000 0000                  		bra.w	DeleteObject
0000C8F0                            ; ===========================================================================
0000C8F0 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C8F2 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C8F4 00E4                       		dc.w $E4
0000C8F6 0206                       		dc.b 2,	6
0000C8F8 00EA                       		dc.w $EA
0000C8FA 0207                       		dc.b 2,	7
0000C8FC 00E0                       		dc.w $E0
0000C8FE 020A                       		dc.b 2,	$A
0000C900                            ; ---------------------------------------------------------------------------
0000C900                            ; Title	card configuration data
0000C900                            ; Format:
0000C900                            ; 4 bytes per item (YYYY XXXX)
0000C900                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C900                            ; ---------------------------------------------------------------------------
0000C900 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C910 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C920 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C930 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C940 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C950 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C960 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C970                            ; ===========================================================================
0000C970                            ; ---------------------------------------------------------------------------
0000C970                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C970                            ; ---------------------------------------------------------------------------
0000C970                            
0000C970                            Obj39:					; XREF: Obj_Index
0000C970 7000                       		moveq	#0,d0
0000C972 1028 0024                  		move.b	$24(a0),d0
0000C976 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C97A 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C97E                            ; ===========================================================================
0000C97E 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C980 0000                       		dc.w loc_C50C-Obj39_Index
0000C982 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C984                            ; ===========================================================================
0000C984                            
0000C984                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C984 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C988 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C98A 4E75                       		rts	
0000C98C                            ; ===========================================================================
0000C98C                            
0000C98C                            Obj39_Main:
0000C98C 5428 0024                  		addq.b	#2,$24(a0)
0000C990 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C996 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C99C 6700                       		beq.s	loc_C4EC	; if not, branch
0000C99E 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C9A4                            
0000C9A4                            loc_C4EC:
0000C9A4 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C9AA 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C9B2 317C 855E 0002             		move.w	#$855E,2(a0)
0000C9B8 117C 0000 0001             		move.b	#0,1(a0)
0000C9BE 117C 0000 0018             		move.b	#0,$18(a0)
0000C9C4                            
0000C9C4                            loc_C50C:				; XREF: Obj39_Index
0000C9C4 7210                       		moveq	#$10,d1		; set horizontal speed
0000C9C6 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C9CC 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C9CE 6500                       		bcs.s	Obj39_Move
0000C9D0 4441                       		neg.w	d1
0000C9D2                            
0000C9D2                            Obj39_Move:
0000C9D2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9D6 6000 0000                  		bra.w	DisplaySprite
0000C9DA                            ; ===========================================================================
0000C9DA                            
0000C9DA                            Obj39_SetWait:				; XREF: Obj39_Main
0000C9DA 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C9E0 5428 0024                  		addq.b	#2,$24(a0)
0000C9E4 4E75                       		rts	
0000C9E6                            ; ===========================================================================
0000C9E6                            
0000C9E6                            Obj39_Wait:				; XREF: Obj39_Index
0000C9E6 1038 F605                  		move.b	($FFFFF605).w,d0
0000C9EA 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C9EE 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C9F0 0828 0000 001A             		btst	#0,$1A(a0)
0000C9F6 6600                       		bne.s	Obj39_Display
0000C9F8 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C9FC 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C9FE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA02 6000 0000                  		bra.w	DisplaySprite
0000CA06                            ; ===========================================================================
0000CA06                            
0000CA06                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA06 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA0A 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA0C 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA12 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA16 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA18 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA1E 6000                       		bra.s	Obj39_Display
0000CA20                            ; ===========================================================================
0000CA20                            
0000CA20                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA20 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA26                            
0000CA26                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA26 6000 0000                  		bra.w	DisplaySprite
0000CA2A                            ; ===========================================================================
0000CA2A                            ; ---------------------------------------------------------------------------
0000CA2A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA2A                            ; ---------------------------------------------------------------------------
0000CA2A                            
0000CA2A                            Obj3A:					; XREF: Obj_Index
0000CA2A 7000                       		moveq	#0,d0
0000CA2C 1028 0024                  		move.b	$24(a0),d0
0000CA30 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA34 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA38                            ; ===========================================================================
0000CA38 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA3A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA3C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA3E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA40 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA42 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA44 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA46 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA48 0000                       		dc.w loc_C766-Obj3A_Index
0000CA4A                            ; ===========================================================================
0000CA4A                            
0000CA4A                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA4A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA4E 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA50 4E75                       		rts	
0000CA52                            ; ===========================================================================
0000CA52                            
0000CA52                            Obj3A_Main:
0000CA52 2248                       		movea.l	a0,a1
0000CA54 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CA5A 7206                       		moveq	#6,d1
0000CA5C                            
0000CA5C                            Obj3A_Loop:
0000CA5C 12BC 003A                  		move.b	#$3A,0(a1)
0000CA60 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CA64 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CA68 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CA6C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CA70 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA74 101A                       		move.b	(a2)+,d0
0000CA76 0C00 0006                  		cmpi.b	#6,d0
0000CA7A 6600                       		bne.s	loc_C5CA
0000CA7C D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CA80                            
0000CA80                            loc_C5CA:
0000CA80 1340 001A                  		move.b	d0,$1A(a1)
0000CA84 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CA8C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CA92 137C 0000 0001             		move.b	#0,1(a1)
0000CA98 43E9 0040                  		lea	$40(a1),a1
0000CA9C 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CAA0                            
0000CAA0                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CAA0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAA2 3028 0030                  		move.w	$30(a0),d0
0000CAA6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CAAA 6700                       		beq.s	loc_C61A	; if yes, branch
0000CAAC 6C00                       		bge.s	Obj3A_Move
0000CAAE 4441                       		neg.w	d1
0000CAB0                            
0000CAB0                            Obj3A_Move:
0000CAB0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAB4                            
0000CAB4                            loc_C5FE:				; XREF: loc_C61A
0000CAB4 3028 0008                  		move.w	8(a0),d0
0000CAB8 6B00                       		bmi.s	locret_C60E
0000CABA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CABE 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CAC0 6000 0000                  		bra.w	DisplaySprite
0000CAC4                            ; ===========================================================================
0000CAC4                            
0000CAC4                            locret_C60E:
0000CAC4 4E75                       		rts	
0000CAC6                            ; ===========================================================================
0000CAC6                            
0000CAC6                            loc_C610:				; XREF: loc_C61A
0000CAC6 117C 000E 0024             		move.b	#$E,$24(a0)
0000CACC 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CAD0                            ; ===========================================================================
0000CAD0                            
0000CAD0                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CAD0 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CAD6 67EE                       		beq.s	loc_C610
0000CAD8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CADE 66D4                       		bne.s	loc_C5FE
0000CAE0 5428 0024                  		addq.b	#2,$24(a0)
0000CAE4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CAEA                            
0000CAEA                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CAEA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CAEE 6600                       		bne.s	Obj3A_Display
0000CAF0 5428 0024                  		addq.b	#2,$24(a0)
0000CAF4                            
0000CAF4                            Obj3A_Display:
0000CAF4 6000 0000                  		bra.w	DisplaySprite
0000CAF8                            ; ===========================================================================
0000CAF8                            
0000CAF8                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CAF8 6100 0000                  		bsr.w	DisplaySprite
0000CAFC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB02 7000                       		moveq	#0,d0
0000CB04 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB08 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB0A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB0E 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB14                            
0000CB14                            Obj3A_RingBonus:
0000CB14 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB18 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB1A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB1E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB24                            
0000CB24                            Obj3A_ChkBonus:
0000CB24 4A40                       		tst.w	d0		; is there any bonus?
0000CB26 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB28 303C 00C5                  		move.w	#$C5,d0
0000CB2C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB32 5428 0024                  		addq.b	#2,$24(a0)
0000CB36 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB3C 6600                       		bne.s	Obj3A_SetDelay
0000CB3E 5828 0024                  		addq.b	#4,$24(a0)
0000CB42                            
0000CB42                            Obj3A_SetDelay:
0000CB42 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB48                            
0000CB48                            locret_C692:
0000CB48 4E75                       		rts	
0000CB4A                            ; ===========================================================================
0000CB4A                            
0000CB4A                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB4A 4EB9 0000 0000             		jsr	AddPoints
0000CB50 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB54 0200 0003                  		andi.b	#3,d0
0000CB58 66EE                       		bne.s	locret_C692
0000CB5A 303C 00CD                  		move.w	#$CD,d0
0000CB5E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CB64                            ; ===========================================================================
0000CB64                            
0000CB64                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CB64 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB68 0240 0007                  		andi.w	#7,d0
0000CB6C E748                       		lsl.w	#3,d0
0000CB6E 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CB72 0241 0003                  		andi.w	#3,d1
0000CB76 D241                       		add.w	d1,d1
0000CB78 D041                       		add.w	d1,d0
0000CB7A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CB7E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CB82 4A40                       		tst.w	d0
0000CB84 6600                       		bne.s	Obj3A_ChkSS
0000CB86 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CB8C 6000                       		bra.s	Obj3A_Display2
0000CB8E                            ; ===========================================================================
0000CB8E                            
0000CB8E                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CB8E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CB92 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CB96 6700                       		beq.s	loc_C6EA	; if not, branch
0000CB98 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CB9E 6000                       		bra.s	Obj3A_Display2
0000CBA0                            ; ===========================================================================
0000CBA0                            
0000CBA0                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CBA0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CBA6                            
0000CBA6                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CBA6 6000 0000                  		bra.w	DisplaySprite
0000CBAA                            ; ===========================================================================
0000CBAA                            ; ---------------------------------------------------------------------------
0000CBAA                            ; Level	order array
0000CBAA                            ; ---------------------------------------------------------------------------
0000CBAA                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CBDA                            		even
0000CBDA                            ; ===========================================================================
0000CBDA                            
0000CBDA                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CBDA 7220                       		moveq	#$20,d1		; set horizontal speed
0000CBDC 3028 0032                  		move.w	$32(a0),d0
0000CBE0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CBE4 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CBE6 6C00                       		bge.s	Obj3A_Move2
0000CBE8 4441                       		neg.w	d1
0000CBEA                            
0000CBEA                            Obj3A_Move2:
0000CBEA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBEE 3028 0008                  		move.w	8(a0),d0
0000CBF2 6B00                       		bmi.s	locret_C748
0000CBF4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CBF8 6400                       		bcc.s	locret_C748	; if yes, branch
0000CBFA 6000 0000                  		bra.w	DisplaySprite
0000CBFE                            ; ===========================================================================
0000CBFE                            
0000CBFE                            locret_C748:
0000CBFE 4E75                       		rts	
0000CC00                            ; ===========================================================================
0000CC00                            
0000CC00                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC00 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC06 6600 0000                  		bne.w	DeleteObject
0000CC0A 5428 0024                  		addq.b	#2,$24(a0)
0000CC0E 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC12 303C 008D                  		move.w	#$8D,d0
0000CC16 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC1C                            ; ===========================================================================
0000CC1C                            
0000CC1C                            loc_C766:				; XREF: Obj3A_Index
0000CC1C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC20 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC26 6700 0000                  		beq.w	DeleteObject
0000CC2A 4E75                       		rts	
0000CC2C                            ; ===========================================================================
0000CC2C 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC32 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC34 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC3A 0201                       		dc.b 2,	1
0000CC3C 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC42 0206                       		dc.b 2,	6
0000CC44 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC4A 0202                       		dc.b 2,	2
0000CC4C 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC52 0203                       		dc.b 2,	3
0000CC54 0560 0120 010C             		dc.w $560, $120, $10C
0000CC5A 0204                       		dc.b 2,	4
0000CC5C 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CC62 0205                       		dc.b 2,	5
0000CC64                            ; ===========================================================================
0000CC64                            ; ---------------------------------------------------------------------------
0000CC64                            ; Object 7E - special stage results screen
0000CC64                            ; ---------------------------------------------------------------------------
0000CC64                            
0000CC64                            Obj7E:					; XREF: Obj_Index
0000CC64 7000                       		moveq	#0,d0
0000CC66 1028 0024                  		move.b	$24(a0),d0
0000CC6A 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CC6E 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CC72                            ; ===========================================================================
0000CC72 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CC74 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CC76 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC78 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CC7A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC7C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC7E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC80 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CC82 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC84 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC86 0000                       		dc.w loc_C91A-Obj7E_Index
0000CC88                            ; ===========================================================================
0000CC88                            
0000CC88                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CC88 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC8C 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CC8E 4E75                       		rts	
0000CC90                            ; ===========================================================================
0000CC90                            
0000CC90                            Obj7E_Main:
0000CC90 2248                       		movea.l	a0,a1
0000CC92 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CC98 7203                       		moveq	#3,d1
0000CC9A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CCA0 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CCA2 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CCA4                            
0000CCA4                            Obj7E_Loop:
0000CCA4 12BC 007E                  		move.b	#$7E,0(a1)
0000CCA8 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CCAC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCB0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCB4 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCB8 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCBC 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CCC4 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCCA 137C 0000 0001             		move.b	#0,1(a1)
0000CCD0 43E9 0040                  		lea	$40(a1),a1
0000CCD4 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CCD8                            
0000CCD8 7007                       		moveq	#7,d0
0000CCDA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CCDE 6700                       		beq.s	loc_C842
0000CCE0 7000                       		moveq	#0,d0
0000CCE2 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CCE6 6600                       		bne.s	loc_C842	; if not, branch
0000CCE8 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CCEA 317C 0018 0008             		move.w	#$18,8(a0)
0000CCF0 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CCF6                            
0000CCF6                            loc_C842:
0000CCF6 1140 001A                  		move.b	d0,$1A(a0)
0000CCFA                            
0000CCFA                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CCFA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCFC 3028 0030                  		move.w	$30(a0),d0
0000CD00 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD04 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD06 6C00                       		bge.s	Obj7E_Move
0000CD08 4441                       		neg.w	d1
0000CD0A                            
0000CD0A                            Obj7E_Move:
0000CD0A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD0E                            
0000CD0E                            loc_C85A:				; XREF: loc_C86C
0000CD0E 3028 0008                  		move.w	8(a0),d0
0000CD12 6B00                       		bmi.s	locret_C86A
0000CD14 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD18 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD1A 6000 0000                  		bra.w	DisplaySprite
0000CD1E                            ; ===========================================================================
0000CD1E                            
0000CD1E                            locret_C86A:
0000CD1E 4E75                       		rts	
0000CD20                            ; ===========================================================================
0000CD20                            
0000CD20                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD20 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD26 66E6                       		bne.s	loc_C85A
0000CD28 5428 0024                  		addq.b	#2,$24(a0)
0000CD2C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD32 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD38                            
0000CD38                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD38 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD3C 6600                       		bne.s	Obj7E_Display
0000CD3E 5428 0024                  		addq.b	#2,$24(a0)
0000CD42                            
0000CD42                            Obj7E_Display:
0000CD42 6000 0000                  		bra.w	DisplaySprite
0000CD46                            ; ===========================================================================
0000CD46                            
0000CD46                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD46 6100 0000                  		bsr.w	DisplaySprite
0000CD4A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD50 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD54 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD56 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD5C 700A                       		moveq	#10,d0		; add 10 to score
0000CD5E 4EB9 0000 0000             		jsr	AddPoints
0000CD64 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD68 0200 0003                  		andi.b	#3,d0
0000CD6C 6600                       		bne.s	locret_C8EA
0000CD6E 303C 00CD                  		move.w	#$CD,d0
0000CD72 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD78                            ; ===========================================================================
0000CD78                            
0000CD78                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CD78 303C 00C5                  		move.w	#$C5,d0
0000CD7C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD82 5428 0024                  		addq.b	#2,$24(a0)
0000CD86 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD8C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CD92 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CD94 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CD9A 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CD9E                            
0000CD9E                            locret_C8EA:
0000CD9E 4E75                       		rts	
0000CDA0                            ; ===========================================================================
0000CDA0                            
0000CDA0                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CDA0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDA6 6000 0000                  		bra.w	DisplaySprite
0000CDAA                            ; ===========================================================================
0000CDAA                            
0000CDAA                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CDAA 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CDB0 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CDB6 303C 00BF                  		move.w	#$BF,d0
0000CDBA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CDC0 5428 0024                  		addq.b	#2,$24(a0)
0000CDC4 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CDCA 6000 0000                  		bra.w	DisplaySprite
0000CDCE                            ; ===========================================================================
0000CDCE                            
0000CDCE                            loc_C91A:				; XREF: Obj7E_Index
0000CDCE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDD2 0200 000F                  		andi.b	#$F,d0
0000CDD6 6600                       		bne.s	Obj7E_Display2
0000CDD8 0868 0000 001A             		bchg	#0,$1A(a0)
0000CDDE                            
0000CDDE                            Obj7E_Display2:
0000CDDE 6000 0000                  		bra.w	DisplaySprite
0000CDE2                            ; ===========================================================================
0000CDE2 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CDE8 0200                       		dc.b 2,	0		; rountine number, frame number
0000CDEA 0320 0120 0118             		dc.w $320, $120, $118
0000CDF0 0201                       		dc.b 2,	1
0000CDF2 0360 0120 0128             		dc.w $360, $120, $128
0000CDF8 0202                       		dc.b 2,	2
0000CDFA 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE00 0203                       		dc.b 2,	3
0000CE02 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE08 0206                       		dc.b 2,	6
0000CE0A                            ; ===========================================================================
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A                            
0000CE0A                            Obj7F:					; XREF: Obj_Index
0000CE0A 7000                       		moveq	#0,d0
0000CE0C 1028 0024                  		move.b	$24(a0),d0
0000CE10 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE14 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE18                            ; ===========================================================================
0000CE18 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE1A 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE1C                            
0000CE1C                            ; ---------------------------------------------------------------------------
0000CE1C                            ; X-axis positions for chaos emeralds
0000CE1C                            ; ---------------------------------------------------------------------------
0000CE1C 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE28                            ; ===========================================================================
0000CE28                            
0000CE28                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE28 2248                       		movea.l	a0,a1
0000CE2A 45F9 0000 CE1C             		lea	(Obj7F_PosData).l,a2
0000CE30 7400                       		moveq	#0,d2
0000CE32 7200                       		moveq	#0,d1
0000CE34 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE38 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE3A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE3E                            
0000CE3E                            Obj7F_Loop:
0000CE3E 12BC 007F                  		move.b	#$7F,0(a1)
0000CE42 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE46 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE4C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE50 1633 2000                  		move.b	(a3,d2.w),d3
0000CE54 1343 001A                  		move.b	d3,$1A(a1)
0000CE58 1343 001C                  		move.b	d3,$1C(a1)
0000CE5C 5202                       		addq.b	#1,d2
0000CE5E 5429 0024                  		addq.b	#2,$24(a1)
0000CE62 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CE6A 337C 8541 0002             		move.w	#$8541,2(a1)
0000CE70 137C 0000 0001             		move.b	#0,1(a1)
0000CE76 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE7A 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CE7E                            
0000CE7E                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CE7E 1028 001A                  		move.b	$1A(a0),d0
0000CE82 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CE88 0C00 0006                  		cmpi.b	#6,d0
0000CE8C 6600                       		bne.s	Obj7F_Display
0000CE8E 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CE94                            
0000CE94                            Obj7F_Display:
0000CE94 6000 0000                  		bra.w	DisplaySprite
0000CE98                            ; ===========================================================================
0000CE98                            ; ---------------------------------------------------------------------------
0000CE98                            ; Sprite mappings - zone title cards
0000CE98                            ; ---------------------------------------------------------------------------
0000CE98 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CE9A 0000                       		dc.w byte_CA2C-Map_obj34
0000CE9C 0000                       		dc.w byte_CA5A-Map_obj34
0000CE9E 0000                       		dc.w byte_CA7A-Map_obj34
0000CEA0 0000                       		dc.w byte_CAA8-Map_obj34
0000CEA2 0000                       		dc.w byte_CADC-Map_obj34
0000CEA4 0000                       		dc.w byte_CB10-Map_obj34
0000CEA6 0000                       		dc.w byte_CB26-Map_obj34
0000CEA8 0000                       		dc.w byte_CB31-Map_obj34
0000CEAA 0000                       		dc.w byte_CB3C-Map_obj34
0000CEAC 0000                       		dc.w byte_CB47-Map_obj34
0000CEAE 0000                       		dc.w byte_CB8A-Map_obj34
0000CEB0 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CEB1 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CEB6 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CEBB F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CEC0 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CEC5 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CECA F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CECF F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CED4 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CED9 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CEDE F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CEE3 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CEE8 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CEED 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CEEE F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CEF3 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CEF8 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CEFD F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF02 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF07 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF0C F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF11 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF16 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF1B F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF20 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF25 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF2A F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF2F F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF34 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF39 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF3E F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF43 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF48 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF4D F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF52 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF57 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CF5C 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CF5D F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CF62 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CF67 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CF6C F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CF71 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CF76 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CF77 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CF7C F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CF81 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CF86 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CF8B F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CF90 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CF95 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CF9A F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CF9F F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CFA4 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CFA9 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CFAE F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CFB3 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CFB8 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CFBD F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CFC2 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CFC7 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CFCC 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CFCD F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CFD2 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CFD7 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CFDC F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CFE1 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CFE6 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CFEB F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CFF0 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CFF5 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000CFFA F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000CFFF F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D004 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D009 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D00E F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D013 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D018 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D01D F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D022 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D027 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D02C F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D031 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D036 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D037 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D03C F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D041 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D046 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D04B F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D050 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D055 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D05A 04                         byte_CB10:	dc.b 4			; ZONE
0000D05B F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D060 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D065 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D06A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D06F 00                         		dc.b 0
0000D070 02                         byte_CB26:	dc.b 2			; ACT 1
0000D071 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D076 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D07B 02                         byte_CB31:	dc.b 2			; ACT 2
0000D07C 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D081 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D086 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D087 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D08C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D091 0D                         byte_CB47:	dc.b $D			; Oval
0000D092 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D097 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D09C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D0A1 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D0A6 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D0AB 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D0B0 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D0B5 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D0BA EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D0BF F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D0C4 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D0C9 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D0CE 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D0D3 00                         		dc.b 0
0000D0D4 05                         byte_CB8A:	dc.b 5			; FINAL
0000D0D5 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D0DA F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D0DF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D0E4 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D0E9 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D0EE                            		even
0000D0EE                            ; ---------------------------------------------------------------------------
0000D0EE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0EE                            ; ---------------------------------------------------------------------------
0000D0EE                            Map_obj39:
0000D0EE                            	include "_maps\obj39.asm"
0000D0EE                            ; ---------------------------------------------------------------------------
0000D0EE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0EE                            ; ---------------------------------------------------------------------------
0000D0EE 0000                       		dc.w byte_CBAC-Map_obj39
0000D0F0 0000                       		dc.w byte_CBB7-Map_obj39
0000D0F2 0000                       		dc.w byte_CBC2-Map_obj39
0000D0F4 0000                       		dc.w byte_CBCD-Map_obj39
0000D0F6 02                         byte_CBAC:	dc.b 2
0000D0F7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D0FC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D101 02                         byte_CBB7:	dc.b 2
0000D102 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D107 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D10C 02                         byte_CBC2:	dc.b 2
0000D10D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D112 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D117 02                         byte_CBCD:	dc.b 2
0000D118 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D11D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D122                            		even
0000D122                            		even
0000D122                            
0000D122                            ; ---------------------------------------------------------------------------
0000D122                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D122                            ; ---------------------------------------------------------------------------
0000D122 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D124 0000                       		dc.w byte_CC13-Map_obj3A
0000D126 0000                       		dc.w byte_CC32-Map_obj3A
0000D128 0000                       		dc.w byte_CC51-Map_obj3A
0000D12A 0000                       		dc.w byte_CC75-Map_obj3A
0000D12C FF6F                       		dc.w byte_CB47-Map_obj3A
0000D12E FF4E                       		dc.w byte_CB26-Map_obj3A
0000D130 FF59                       		dc.w byte_CB31-Map_obj3A
0000D132 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D134 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D135 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D13A F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D13F F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D144 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D149 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D14E F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D153 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D158 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D15D F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D162 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D167 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D16C F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D171 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D176 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D17B F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D180 06                         byte_CC13:	dc.b 6			; PASSED
0000D181 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D186 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D18B F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D190 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D195 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D19A F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D19F 06                         byte_CC32:	dc.b 6			; SCORE
0000D1A0 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D1A5 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D1AA F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D1AF F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D1B4 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D1B9 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D1BE 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D1BF F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D1C4 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1C9 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1CE F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1D3 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D1D8 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D1DD F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D1E2 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D1E3 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D1E8 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1ED F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1F2 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1F7 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D1FC F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D201 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D206                            		even
0000D206                            ; ---------------------------------------------------------------------------
0000D206                            ; Sprite mappings - special stage results screen
0000D206                            ; ---------------------------------------------------------------------------
0000D206 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D208 0000                       		dc.w byte_CCEE-Map_obj7E
0000D20A 0000                       		dc.w byte_CD0D-Map_obj7E
0000D20C FE8B                       		dc.w byte_CB47-Map_obj7E
0000D20E 0000                       		dc.w byte_CD31-Map_obj7E
0000D210 0000                       		dc.w byte_CD46-Map_obj7E
0000D212 0000                       		dc.w byte_CD5B-Map_obj7E
0000D214 0000                       		dc.w byte_CD6B-Map_obj7E
0000D216 0000                       		dc.w byte_CDA8-Map_obj7E
0000D218 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D219 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D21E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D223 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D228 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D22D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D232 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D237 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D23C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D241 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D246 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D24B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D250 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D255 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D25A 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D25B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D260 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D265 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D26A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D26F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D274 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D279 07                         byte_CD0D:	dc.b 7
0000D27A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D27F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D284 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D289 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D28E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D293 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D298 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D29D 04                         byte_CD31:	dc.b 4
0000D29E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2A3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2A8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2AD F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D2B2 04                         byte_CD46:	dc.b 4
0000D2B3 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2B8 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2BD F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2C2 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D2C7 03                         byte_CD5B:	dc.b 3
0000D2C8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2CD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2D2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2D7 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D2D8 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D2DD F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D2E2 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D2E7 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D2EC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D2F1 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D2F6 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D2FB F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D300 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D305 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D30A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D30F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D314 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D315 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D31A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D31F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D324 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D329 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D32E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D333 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D338 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D33D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D342 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D347 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D34C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D351 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D356 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D35B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D360                            		even
0000D360                            ; ---------------------------------------------------------------------------
0000D360                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D360                            ; ---------------------------------------------------------------------------
0000D360                            Map_obj7F:
0000D360                            	include "_maps\obj7F.asm"
0000D360                            ; ---------------------------------------------------------------------------
0000D360                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D360                            ; ---------------------------------------------------------------------------
0000D360 0000                       		dc.w byte_CE02-Map_obj7F
0000D362 0000                       		dc.w byte_CE08-Map_obj7F
0000D364 0000                       		dc.w byte_CE0E-Map_obj7F
0000D366 0000                       		dc.w byte_CE14-Map_obj7F
0000D368 0000                       		dc.w byte_CE1A-Map_obj7F
0000D36A 0000                       		dc.w byte_CE20-Map_obj7F
0000D36C 0000                       		dc.w byte_CE26-Map_obj7F
0000D36E 01                         byte_CE02:	dc.b 1
0000D36F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D374 01                         byte_CE08:	dc.b 1
0000D375 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D37A 01                         byte_CE0E:	dc.b 1
0000D37B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D380 01                         byte_CE14:	dc.b 1
0000D381 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D386 01                         byte_CE1A:	dc.b 1
0000D387 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D38C 01                         byte_CE20:	dc.b 1
0000D38D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D392 00                         byte_CE26:	dc.b 0			; Blank frame
0000D394 00                         		even
0000D394 00                         		even
0000D394                            
0000D394                            ; ===========================================================================
0000D394                            ; ---------------------------------------------------------------------------
0000D394                            ; Object 36 - spikes
0000D394                            ; ---------------------------------------------------------------------------
0000D394                            
0000D394                            Obj36:					; XREF: Obj_Index
0000D394 7000                       		moveq	#0,d0
0000D396 1028 0024                  		move.b	$24(a0),d0
0000D39A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D39E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D3A2                            ; ===========================================================================
0000D3A2 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D3A4 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D3A6                            
0000D3A6 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D3A8 0110                       		dc.b 1,	$10
0000D3AA 0204                       		dc.b 2,	4
0000D3AC 031C                       		dc.b 3,	$1C
0000D3AE 0440                       		dc.b 4,	$40
0000D3B0 0510                       		dc.b 5,	$10
0000D3B2                            ; ===========================================================================
0000D3B2                            
0000D3B2                            Obj36_Main:				; XREF: Obj36_Index
0000D3B2 5428 0024                  		addq.b	#2,$24(a0)
0000D3B6 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D3BE 317C 051B 0002             		move.w	#$51B,2(a0)
0000D3C4 0028 0004 0001             		ori.b	#4,1(a0)
0000D3CA 117C 0004 0018             		move.b	#4,$18(a0)
0000D3D0 1028 0028                  		move.b	$28(a0),d0
0000D3D4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D3DA 0240 00F0                  		andi.w	#$F0,d0
0000D3DE 43F9 0000 D3A6             		lea	(Obj36_Var).l,a1
0000D3E4 E648                       		lsr.w	#3,d0
0000D3E6 D2C0                       		adda.w	d0,a1
0000D3E8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D3EC 1159 0019                  		move.b	(a1)+,$19(a0)
0000D3F0 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D3F6 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D3FC                            
0000D3FC                            Obj36_Solid:				; XREF: Obj36_Index
0000D3FC 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D400 343C 0004                  		move.w	#4,d2
0000D404 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D40A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D40C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D412 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D414 343C 0014                  		move.w	#$14,d2
0000D418                            
0000D418                            ; Spikes types $1x and $5x face	sideways
0000D418                            
0000D418                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D418 323C 001B                  		move.w	#$1B,d1
0000D41C 3602                       		move.w	d2,d3
0000D41E 5243                       		addq.w	#1,d3
0000D420 3828 0008                  		move.w	8(a0),d4
0000D424 6100 0000                  		bsr.w	SolidObject
0000D428 0828 0003 0022             		btst	#3,$22(a0)
0000D42E 6600                       		bne.s	Obj36_Display
0000D430 0C44 0001                  		cmpi.w	#1,d4
0000D434 6700                       		beq.s	Obj36_Hurt
0000D436 6000                       		bra.s	Obj36_Display
0000D438                            ; ===========================================================================
0000D438                            
0000D438                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D438                            
0000D438                            Obj36_Upright:				; XREF: Obj36_Solid
0000D438 7200                       		moveq	#0,d1
0000D43A 1228 0019                  		move.b	$19(a0),d1
0000D43E 0641 000B                  		addi.w	#$B,d1
0000D442 343C 0010                  		move.w	#$10,d2
0000D446 363C 0011                  		move.w	#$11,d3
0000D44A 3828 0008                  		move.w	8(a0),d4
0000D44E 6100 0000                  		bsr.w	SolidObject
0000D452 0828 0003 0022             		btst	#3,$22(a0)
0000D458 6600                       		bne.s	Obj36_Hurt
0000D45A 4A44                       		tst.w	d4
0000D45C 6A00                       		bpl.s	Obj36_Display
0000D45E                            
0000D45E                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D45E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D462 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D464 2F08                       		move.l	a0,-(sp)
0000D466 2448                       		movea.l	a0,a2
0000D468 41F8 D000                  		lea	($FFFFD000).w,a0
0000D46C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D472 6400                       		bcc.s	loc_CF20
0000D474 2628 000C                  		move.l	$C(a0),d3
0000D478 3028 0012                  		move.w	$12(a0),d0
0000D47C 48C0                       		ext.l	d0
0000D47E E180                       		asl.l	#8,d0
0000D480 9680                       		sub.l	d0,d3
0000D482 2143 000C                  		move.l	d3,$C(a0)
0000D486 4EB9 0000 0000             		jsr	HurtSonic
0000D48C                            
0000D48C                            loc_CF20:
0000D48C 205F                       		movea.l	(sp)+,a0
0000D48E                            
0000D48E                            Obj36_Display:
0000D48E 6100 0000                  		bsr.w	DisplaySprite
0000D492 3028 0030                  		move.w	$30(a0),d0
0000D496 0240 FF80                  		andi.w	#$FF80,d0
0000D49A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D49E 0441 0080                  		subi.w	#$80,d1
0000D4A2 0241 FF80                  		andi.w	#$FF80,d1
0000D4A6 9041                       		sub.w	d1,d0
0000D4A8 0C40 0280                  		cmpi.w	#$280,d0
0000D4AC 6200 0000                  		bhi.w	DeleteObject
0000D4B0 4E75                       		rts	
0000D4B2                            ; ===========================================================================
0000D4B2                            
0000D4B2                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D4B2 7000                       		moveq	#0,d0
0000D4B4 1028 0028                  		move.b	$28(a0),d0
0000D4B8 D040                       		add.w	d0,d0
0000D4BA 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D4BE 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D4C2                            ; ===========================================================================
0000D4C2 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D4C4 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D4C6 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D4C8                            ; ===========================================================================
0000D4C8                            
0000D4C8                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D4C8 4E75                       		rts			; don't move the object
0000D4CA                            ; ===========================================================================
0000D4CA                            
0000D4CA                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D4CA 6100 0000                  		bsr.w	Obj36_Wait
0000D4CE 7000                       		moveq	#0,d0
0000D4D0 1028 0034                  		move.b	$34(a0),d0
0000D4D4 D068 0032                  		add.w	$32(a0),d0
0000D4D8 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D4DC 4E75                       		rts	
0000D4DE                            ; ===========================================================================
0000D4DE                            
0000D4DE                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D4DE 6100 0000                  		bsr.w	Obj36_Wait
0000D4E2 7000                       		moveq	#0,d0
0000D4E4 1028 0034                  		move.b	$34(a0),d0
0000D4E8 D068 0030                  		add.w	$30(a0),d0
0000D4EC 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D4F0 4E75                       		rts	
0000D4F2                            ; ===========================================================================
0000D4F2                            
0000D4F2                            Obj36_Wait:
0000D4F2 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D4F6 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D4F8 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D4FC 6600                       		bne.s	locret_CFE6
0000D4FE 4A28 0001                  		tst.b	1(a0)
0000D502 6A00                       		bpl.s	locret_CFE6
0000D504 303C 00B6                  		move.w	#$B6,d0
0000D508 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D50E 6000                       		bra.s	locret_CFE6
0000D510                            ; ===========================================================================
0000D510                            
0000D510                            loc_CFA4:
0000D510 4A68 0036                  		tst.w	$36(a0)
0000D514 6700                       		beq.s	loc_CFC6
0000D516 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D51C 6400                       		bcc.s	locret_CFE6
0000D51E 317C 0000 0034             		move.w	#0,$34(a0)
0000D524 317C 0000 0036             		move.w	#0,$36(a0)
0000D52A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D530 6000                       		bra.s	locret_CFE6
0000D532                            ; ===========================================================================
0000D532                            
0000D532                            loc_CFC6:
0000D532 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D538 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D53E 6500                       		bcs.s	locret_CFE6
0000D540 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D546 317C 0001 0036             		move.w	#1,$36(a0)
0000D54C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D552                            
0000D552                            locret_CFE6:
0000D552 4E75                       		rts	
0000D554                            ; ===========================================================================
0000D554                            ; ---------------------------------------------------------------------------
0000D554                            ; Sprite mappings - spikes
0000D554                            ; ---------------------------------------------------------------------------
0000D554                            Map_obj36:
0000D554                            	include "_maps\obj36.asm"
0000D554                            ; ---------------------------------------------------------------------------
0000D554                            ; Sprite mappings - spikes
0000D554                            ; ---------------------------------------------------------------------------
0000D554 0000                       		dc.w byte_CFF4-Map_obj36
0000D556 0000                       		dc.w byte_D004-Map_obj36
0000D558 0000                       		dc.w byte_D014-Map_obj36
0000D55A 0000                       		dc.w byte_D01A-Map_obj36
0000D55C 0000                       		dc.w byte_D02A-Map_obj36
0000D55E 0000                       		dc.w byte_D049-Map_obj36
0000D560 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D561 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D566 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D56B F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D570 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D571 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D576 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D57B 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D580 01                         byte_D014:	dc.b 1			; 1 spike
0000D581 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D586 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D587 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D58C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D591 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D596 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D597 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D59C F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D5A1 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D5A6 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D5AB F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D5B0 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D5B5 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D5B6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5BC 00                         		even
0000D5BC 00                         		even
0000D5BC                            
0000D5BC                            ; ===========================================================================
0000D5BC                            ; ---------------------------------------------------------------------------
0000D5BC                            ; Object 3B - purple rock (GHZ)
0000D5BC                            ; ---------------------------------------------------------------------------
0000D5BC                            
0000D5BC                            Obj3B:					; XREF: Obj_Index
0000D5BC 7000                       		moveq	#0,d0
0000D5BE 1028 0024                  		move.b	$24(a0),d0
0000D5C2 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D5C6 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D5CA                            ; ===========================================================================
0000D5CA 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D5CC 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D5CE                            ; ===========================================================================
0000D5CE                            
0000D5CE                            Obj3B_Main:				; XREF: Obj3B_Index
0000D5CE 5428 0024                  		addq.b	#2,$24(a0)
0000D5D2 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D5DA 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D5E0 117C 0004 0001             		move.b	#4,1(a0)
0000D5E6 117C 0013 0019             		move.b	#$13,$19(a0)
0000D5EC 117C 0004 0018             		move.b	#4,$18(a0)
0000D5F2                            
0000D5F2                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D5F2 323C 001B                  		move.w	#$1B,d1
0000D5F6 343C 0010                  		move.w	#$10,d2
0000D5FA 363C 0010                  		move.w	#$10,d3
0000D5FE 3828 0008                  		move.w	8(a0),d4
0000D602 6100 0000                  		bsr.w	SolidObject
0000D606 6100 0000                  		bsr.w	DisplaySprite
0000D60A 3028 0008                  		move.w	8(a0),d0
0000D60E 0240 FF80                  		andi.w	#$FF80,d0
0000D612 3238 F700                  		move.w	($FFFFF700).w,d1
0000D616 0441 0080                  		subi.w	#$80,d1
0000D61A 0241 FF80                  		andi.w	#$FF80,d1
0000D61E 9041                       		sub.w	d1,d0
0000D620 0C40 0280                  		cmpi.w	#$280,d0
0000D624 6200 0000                  		bhi.w	DeleteObject
0000D628 4E75                       		rts	
0000D62A                            ; ===========================================================================
0000D62A                            ; ---------------------------------------------------------------------------
0000D62A                            ; Object 49 - waterfall	sound effect (GHZ)
0000D62A                            ; ---------------------------------------------------------------------------
0000D62A                            
0000D62A                            Obj49:					; XREF: Obj_Index
0000D62A 7000                       		moveq	#0,d0
0000D62C 1028 0024                  		move.b	$24(a0),d0
0000D630 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D634 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D638                            ; ===========================================================================
0000D638 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D63A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D63C                            ; ===========================================================================
0000D63C                            
0000D63C                            Obj49_Main:				; XREF: Obj49_Index
0000D63C 5428 0024                  		addq.b	#2,$24(a0)
0000D640 117C 0004 0001             		move.b	#4,1(a0)
0000D646                            
0000D646                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D646 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D64A 0200 003F                  		andi.b	#$3F,d0
0000D64E 6600                       		bne.s	Obj49_ChkDel
0000D650 303C 00D0                  		move.w	#$D0,d0
0000D654 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D65A                            
0000D65A                            Obj49_ChkDel:
0000D65A 3028 0008                  		move.w	8(a0),d0
0000D65E 0240 FF80                  		andi.w	#$FF80,d0
0000D662 3238 F700                  		move.w	($FFFFF700).w,d1
0000D666 0441 0080                  		subi.w	#$80,d1
0000D66A 0241 FF80                  		andi.w	#$FF80,d1
0000D66E 9041                       		sub.w	d1,d0
0000D670 0C40 0280                  		cmpi.w	#$280,d0
0000D674 6200 0000                  		bhi.w	DeleteObject
0000D678 4E75                       		rts	
0000D67A                            ; ===========================================================================
0000D67A                            ; ---------------------------------------------------------------------------
0000D67A                            ; Sprite mappings - purple rock	(GHZ)
0000D67A                            ; ---------------------------------------------------------------------------
0000D67A                            Map_obj3B:
0000D67A                            	include "_maps\obj3B.asm"
0000D67A                            ; ---------------------------------------------------------------------------
0000D67A                            ; Sprite mappings - purple rock	(GHZ)
0000D67A                            ; ---------------------------------------------------------------------------
0000D67A 0000                       		dc.w byte_D110-Map_obj3B
0000D67C 02                         byte_D110:	dc.b 2
0000D67D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D682 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D688 00                         		even
0000D688 00                         		even
0000D688                            
0000D688                            ; ===========================================================================
0000D688                            ; ---------------------------------------------------------------------------
0000D688                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D688                            ; ---------------------------------------------------------------------------
0000D688                            
0000D688                            Obj3C:					; XREF: Obj_Index
0000D688 7000                       		moveq	#0,d0
0000D68A 1028 0024                  		move.b	$24(a0),d0
0000D68E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D692 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D696 6000 0000                  		bra.w	MarkObjGone
0000D69A                            ; ===========================================================================
0000D69A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D69C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D69E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D6A0                            ; ===========================================================================
0000D6A0                            
0000D6A0                            Obj3C_Main:				; XREF: Obj3C_Index
0000D6A0 5428 0024                  		addq.b	#2,$24(a0)
0000D6A4 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D6AC 317C 450F 0002             		move.w	#$450F,2(a0)
0000D6B2 117C 0004 0001             		move.b	#4,1(a0)
0000D6B8 117C 0010 0019             		move.b	#$10,$19(a0)
0000D6BE 117C 0004 0018             		move.b	#4,$18(a0)
0000D6C4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D6CA                            
0000D6CA                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D6CA 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D6D0 323C 001B                  		move.w	#$1B,d1
0000D6D4 343C 0020                  		move.w	#$20,d2
0000D6D8 363C 0020                  		move.w	#$20,d3
0000D6DC 3828 0008                  		move.w	8(a0),d4
0000D6E0 6100 0000                  		bsr.w	SolidObject
0000D6E4 0828 0005 0022             		btst	#5,$22(a0)
0000D6EA 6600                       		bne.s	Obj3C_ChkRoll
0000D6EC                            
0000D6EC                            locret_D180:
0000D6EC 4E75                       		rts	
0000D6EE                            ; ===========================================================================
0000D6EE                            
0000D6EE                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D6EE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D6F4 66F6                       		bne.s	locret_D180	; if not, branch
0000D6F6 3028 0030                  		move.w	$30(a0),d0
0000D6FA 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D6FC 4440                       		neg.w	d0
0000D6FE                            
0000D6FE                            Obj3C_ChkSpeed:
0000D6FE 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D702 65E8                       		bcs.s	locret_D180	; if not, branch
0000D704 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D70A 5869 0008                  		addq.w	#4,8(a1)
0000D70E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D714 3028 0008                  		move.w	8(a0),d0
0000D718 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D71C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D71E 5169 0008                  		subq.w	#8,8(a1)
0000D722 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D728                            
0000D728                            Obj3C_Smash:
0000D728 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D72E 08A8 0005 0022             		bclr	#5,$22(a0)
0000D734 08A9 0005 0022             		bclr	#5,$22(a1)
0000D73A 7207                       		moveq	#7,d1		; load 8 fragments
0000D73C 343C 0070                  		move.w	#$70,d2
0000D740 6100                       		bsr.s	SmashObject
0000D742                            
0000D742                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D742 6100 0000                  		bsr.w	SpeedToPos
0000D746 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D74C 6100 0000                  		bsr.w	DisplaySprite
0000D750 4A28 0001                  		tst.b	1(a0)
0000D754 6A00 0000                  		bpl.w	DeleteObject
0000D758 4E75                       		rts	
0000D75A                            
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            
0000D75A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D75A                            
0000D75A                            
0000D75A                            SmashObject:				; XREF: Obj3C_Smash
0000D75A 7000                       		moveq	#0,d0
0000D75C 1028 001A                  		move.b	$1A(a0),d0
0000D760 D040                       		add.w	d0,d0
0000D762 2668 0004                  		movea.l	4(a0),a3
0000D766 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D76A 524B                       		addq.w	#1,a3
0000D76C 08E8 0005 0001             		bset	#5,1(a0)
0000D772 1810                       		move.b	0(a0),d4
0000D774 1A28 0001                  		move.b	1(a0),d5
0000D778 2248                       		movea.l	a0,a1
0000D77A 6000                       		bra.s	Smash_LoadFrag
0000D77C                            ; ===========================================================================
0000D77C                            
0000D77C                            Smash_Loop:
0000D77C 6100 0000                  		bsr.w	SingleObjLoad
0000D780 6600                       		bne.s	Smash_PlaySnd
0000D782 5A4B                       		addq.w	#5,a3
0000D784                            
0000D784                            Smash_LoadFrag:				; XREF: SmashObject
0000D784 137C 0004 0024             		move.b	#4,$24(a1)
0000D78A 1284                       		move.b	d4,0(a1)
0000D78C 234B 0004                  		move.l	a3,4(a1)
0000D790 1345 0001                  		move.b	d5,1(a1)
0000D794 3368 0008 0008             		move.w	8(a0),8(a1)
0000D79A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7A0 3368 0002 0002             		move.w	2(a0),2(a1)
0000D7A6 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D7AC 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D7B2 335C 0010                  		move.w	(a4)+,$10(a1)
0000D7B6 335C 0012                  		move.w	(a4)+,$12(a1)
0000D7BA B3C8                       		cmpa.l	a0,a1
0000D7BC 6400                       		bcc.s	loc_D268
0000D7BE 2F08                       		move.l	a0,-(sp)
0000D7C0 2049                       		movea.l	a1,a0
0000D7C2 6100 0000                  		bsr.w	SpeedToPos
0000D7C6 D568 0012                  		add.w	d2,$12(a0)
0000D7CA 205F                       		movea.l	(sp)+,a0
0000D7CC 6100 0000                  		bsr.w	DisplaySprite2
0000D7D0                            
0000D7D0                            loc_D268:
0000D7D0 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D7D4                            
0000D7D4                            Smash_PlaySnd:
0000D7D4 303C 00CB                  		move.w	#$CB,d0
0000D7D8 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D7DE                            ; End of function SmashObject
0000D7DE                            
0000D7DE                            ; ===========================================================================
0000D7DE                            ; Smashed block	fragment speeds
0000D7DE                            ;
0000D7DE 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D7E2 0600 FF00                  		dc.w $600, $FF00
0000D7E6 0600 0100                  		dc.w $600, $100
0000D7EA 0400 0500                  		dc.w $400, $500
0000D7EE 0600 FA00                  		dc.w $600, $FA00
0000D7F2 0800 FE00                  		dc.w $800, $FE00
0000D7F6 0800 0200                  		dc.w $800, $200
0000D7FA 0600 0600                  		dc.w $600, $600
0000D7FE                            
0000D7FE FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D802 F800 FE00                  		dc.w $F800, $FE00
0000D806 F800 0200                  		dc.w $F800, $200
0000D80A FA00 0600                  		dc.w $FA00, $600
0000D80E FC00 FB00                  		dc.w $FC00, $FB00
0000D812 FA00 FF00                  		dc.w $FA00, $FF00
0000D816 FA00 0100                  		dc.w $FA00, $100
0000D81A FC00 0500                  		dc.w $FC00, $500
0000D81E                            ; ---------------------------------------------------------------------------
0000D81E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D81E                            ; ---------------------------------------------------------------------------
0000D81E                            Map_obj3C:
0000D81E                            	include "_maps\obj3C.asm"
0000D81E                            ; ---------------------------------------------------------------------------
0000D81E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D81E                            ; ---------------------------------------------------------------------------
0000D81E 0000                       		dc.w byte_D2BC-Map_obj3C
0000D820 0000                       		dc.w byte_D2E5-Map_obj3C
0000D822 0000                       		dc.w byte_D30E-Map_obj3C
0000D824 08                         byte_D2BC:	dc.b 8
0000D825 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D82A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D82F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D834 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D839 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D83E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D843 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D848 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D84D 08                         byte_D2E5:	dc.b 8
0000D84E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D853 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D858 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D85D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D862 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D867 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D86C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D871 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D876 08                         byte_D30E:	dc.b 8
0000D877 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D87C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D881 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D886 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D88B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D890 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D895 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D89A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D8A0 00                         		even
0000D8A0 00                         		even
0000D8A0                            
0000D8A0                            ; ---------------------------------------------------------------------------
0000D8A0                            ; Object code loading subroutine
0000D8A0                            ; ---------------------------------------------------------------------------
0000D8A0                            
0000D8A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8A0                            
0000D8A0                            
0000D8A0                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D8A0 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D8A4 7E7F                       		moveq	#$7F,d7
0000D8A6 7000                       		moveq	#0,d0
0000D8A8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D8AE 6400                       		bcc.s	loc_D362
0000D8B0                            
0000D8B0                            loc_D348:
0000D8B0 1010                       		move.b	(a0),d0		; load object number from RAM
0000D8B2 6700                       		beq.s	loc_D358
0000D8B4 D040                       		add.w	d0,d0
0000D8B6 D040                       		add.w	d0,d0
0000D8B8 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D8BC 4E91                       		jsr	(a1)		; run the object's code
0000D8BE 7000                       		moveq	#0,d0
0000D8C0                            
0000D8C0                            loc_D358:
0000D8C0 41E8 0040                  		lea	$40(a0),a0	; next object
0000D8C4 51CF FFEA                  		dbf	d7,loc_D348
0000D8C8 4E75                       		rts	
0000D8CA                            ; ===========================================================================
0000D8CA                            
0000D8CA                            loc_D362:
0000D8CA 7E1F                       		moveq	#$1F,d7
0000D8CC 61E2                       		bsr.s	loc_D348
0000D8CE 7E5F                       		moveq	#$5F,d7
0000D8D0                            
0000D8D0                            loc_D368:
0000D8D0 7000                       		moveq	#0,d0
0000D8D2 1010                       		move.b	(a0),d0
0000D8D4 6700                       		beq.s	loc_D378
0000D8D6 4A28 0001                  		tst.b	1(a0)
0000D8DA 6A00                       		bpl.s	loc_D378
0000D8DC 6100 0000                  		bsr.w	DisplaySprite
0000D8E0                            
0000D8E0                            loc_D378:
0000D8E0 41E8 0040                  		lea	$40(a0),a0
0000D8E4                            
0000D8E4                            loc_D37C:
0000D8E4 51CF FFEA                  		dbf	d7,loc_D368
0000D8E8 4E75                       		rts	
0000D8EA                            ; End of function ObjectsLoad
0000D8EA                            
0000D8EA                            ; ===========================================================================
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA                            ; Object pointers
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA                            Obj_Index:
0000D8EA                            	include "_inc\Object pointers.asm"
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA                            ; Object pointers
0000D8EA                            ; ---------------------------------------------------------------------------
0000D8EA 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D8FA 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D90A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D91A 0000 0000 0000 AB46 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D92A 0000 777E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D93A 0000 7DA4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D94A 0000 85F2 0000 865A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D95A 0000 8CA4 0000 8F92 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D96A 0000 0000 0000 9C42 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D97A 0000 9F7A 0000 A566 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D98A 0000 989E 0000 8D7A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D99A 0000 B16A 0000 A75A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D9AA 0000 BB3C 0000 C1EA 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D9BA 0000 B6A0 0000 D394 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D9CA 0000 C970 0000 CA2A 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D9DA 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D9EA 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D9FA 0000 BE58 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA0A 0000 D62A 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA1A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA2A 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA3A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA4A 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DA5A 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DA6A 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DA7A 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DA8A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DA9A 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DAAA 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DABA 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DACA 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DADA 0000 0000 0000 CC64 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DAEA 0000 529E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DAFA 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB0A 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB0A 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB1A                            
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            
0000DB1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB1A                            
0000DB1A                            
0000DB1A                            ObjectFall:
0000DB1A 2428 0008                  		move.l	8(a0),d2
0000DB1E 2628 000C                  		move.l	$C(a0),d3
0000DB22 3028 0010                  		move.w	$10(a0),d0
0000DB26 48C0                       		ext.l	d0
0000DB28 E180                       		asl.l	#8,d0
0000DB2A D480                       		add.l	d0,d2
0000DB2C 3028 0012                  		move.w	$12(a0),d0
0000DB30 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB36 48C0                       		ext.l	d0
0000DB38 E180                       		asl.l	#8,d0
0000DB3A D680                       		add.l	d0,d3
0000DB3C 2142 0008                  		move.l	d2,8(a0)
0000DB40 2143 000C                  		move.l	d3,$C(a0)
0000DB44 4E75                       		rts	
0000DB46                            ; End of function ObjectFall
0000DB46                            
0000DB46                            ; ---------------------------------------------------------------------------
0000DB46                            ; Subroutine translating object	speed to update	object position
0000DB46                            ; ---------------------------------------------------------------------------
0000DB46                            
0000DB46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB46                            
0000DB46                            
0000DB46                            SpeedToPos:
0000DB46 2428 0008                  		move.l	8(a0),d2
0000DB4A 2628 000C                  		move.l	$C(a0),d3
0000DB4E 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB52 48C0                       		ext.l	d0
0000DB54 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB56 D480                       		add.l	d0,d2		; add to x-axis	position
0000DB58 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DB5C 48C0                       		ext.l	d0
0000DB5E E180                       		asl.l	#8,d0		; multiply by $100
0000DB60 D680                       		add.l	d0,d3		; add to y-axis	position
0000DB62 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DB66 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DB6A 4E75                       		rts	
0000DB6C                            ; End of function SpeedToPos
0000DB6C                            
0000DB6C                            ; ---------------------------------------------------------------------------
0000DB6C                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DB6C                            ; ---------------------------------------------------------------------------
0000DB6C                            
0000DB6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB6C                            
0000DB6C                            
0000DB6C                            DisplaySprite:
0000DB6C 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DB70 3028 0018                  		move.w	$18(a0),d0
0000DB74 E248                       		lsr.w	#1,d0
0000DB76 0240 0380                  		andi.w	#$380,d0
0000DB7A D2C0                       		adda.w	d0,a1
0000DB7C 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DB80 6400                       		bcc.s	locret_D620
0000DB82 5451                       		addq.w	#2,(a1)
0000DB84 D2D1                       		adda.w	(a1),a1
0000DB86 3288                       		move.w	a0,(a1)
0000DB88                            
0000DB88                            locret_D620:
0000DB88 4E75                       		rts	
0000DB8A                            ; End of function DisplaySprite
0000DB8A                            
0000DB8A                            ; ---------------------------------------------------------------------------
0000DB8A                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DB8A                            ; ---------------------------------------------------------------------------
0000DB8A                            
0000DB8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB8A                            
0000DB8A                            
0000DB8A                            DisplaySprite2:
0000DB8A 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DB8E 3029 0018                  		move.w	$18(a1),d0
0000DB92 E248                       		lsr.w	#1,d0
0000DB94 0240 0380                  		andi.w	#$380,d0
0000DB98 D4C0                       		adda.w	d0,a2
0000DB9A 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DB9E 6400                       		bcc.s	locret_D63E
0000DBA0 5452                       		addq.w	#2,(a2)
0000DBA2 D4D2                       		adda.w	(a2),a2
0000DBA4 3489                       		move.w	a1,(a2)
0000DBA6                            
0000DBA6                            locret_D63E:
0000DBA6 4E75                       		rts	
0000DBA8                            ; End of function DisplaySprite2
0000DBA8                            
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            ; Subroutine to	delete an object
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            
0000DBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA8                            
0000DBA8                            
0000DBA8                            DeleteObject:
0000DBA8 2248                       		movea.l	a0,a1
0000DBAA                            
0000DBAA                            DeleteObject2:
0000DBAA 7200                       		moveq	#0,d1
0000DBAC 700F                       		moveq	#$F,d0
0000DBAE                            
0000DBAE                            loc_D646:
0000DBAE 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DBB0 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DBB4 4E75                       		rts	
0000DBB6                            ; End of function DeleteObject
0000DBB6                            
0000DBB6                            ; ===========================================================================
0000DBB6 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DBBA 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DBBE 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DBC2 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DBC6                            ; ---------------------------------------------------------------------------
0000DBC6                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DBC6                            ; ---------------------------------------------------------------------------
0000DBC6                            
0000DBC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBC6                            
0000DBC6                            
0000DBC6                            BuildSprites:				; XREF: TitleScreen; et al
0000DBC6 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DBCA 7A00                       		moveq	#0,d5
0000DBCC 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DBD0 7E07                       		moveq	#7,d7
0000DBD2                            
0000DBD2                            loc_D66A:
0000DBD2 4A54                       		tst.w	(a4)
0000DBD4 6700 0000                  		beq.w	loc_D72E
0000DBD8 7C02                       		moveq	#2,d6
0000DBDA                            
0000DBDA                            loc_D672:
0000DBDA 3074 6000                  		movea.w	(a4,d6.w),a0
0000DBDE 4A10                       		tst.b	(a0)
0000DBE0 6700 0000                  		beq.w	loc_D726
0000DBE4 08A8 0007 0001             		bclr	#7,1(a0)
0000DBEA 1028 0001                  		move.b	1(a0),d0
0000DBEE 1800                       		move.b	d0,d4
0000DBF0 0240 000C                  		andi.w	#$C,d0
0000DBF4 6700                       		beq.s	loc_D6DE
0000DBF6 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DBFA 7000                       		moveq	#0,d0
0000DBFC 1028 0019                  		move.b	$19(a0),d0
0000DC00 3628 0008                  		move.w	8(a0),d3
0000DC04 9651                       		sub.w	(a1),d3
0000DC06 3203                       		move.w	d3,d1
0000DC08 D240                       		add.w	d0,d1
0000DC0A 6B00 0000                  		bmi.w	loc_D726
0000DC0E 3203                       		move.w	d3,d1
0000DC10 9240                       		sub.w	d0,d1
0000DC12 0C41 0140                  		cmpi.w	#$140,d1
0000DC16 6C00                       		bge.s	loc_D726
0000DC18 0643 0080                  		addi.w	#$80,d3
0000DC1C 0804 0004                  		btst	#4,d4
0000DC20 6700                       		beq.s	loc_D6E8
0000DC22 7000                       		moveq	#0,d0
0000DC24 1028 0016                  		move.b	$16(a0),d0
0000DC28 3428 000C                  		move.w	$C(a0),d2
0000DC2C 9469 0004                  		sub.w	4(a1),d2
0000DC30 3202                       		move.w	d2,d1
0000DC32 D240                       		add.w	d0,d1
0000DC34 6B00                       		bmi.s	loc_D726
0000DC36 3202                       		move.w	d2,d1
0000DC38 9240                       		sub.w	d0,d1
0000DC3A 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC3E 6C00                       		bge.s	loc_D726
0000DC40 0642 0080                  		addi.w	#$80,d2
0000DC44 6000                       		bra.s	loc_D700
0000DC46                            ; ===========================================================================
0000DC46                            
0000DC46                            loc_D6DE:
0000DC46 3428 000A                  		move.w	$A(a0),d2
0000DC4A 3628 0008                  		move.w	8(a0),d3
0000DC4E 6000                       		bra.s	loc_D700
0000DC50                            ; ===========================================================================
0000DC50                            
0000DC50                            loc_D6E8:
0000DC50 3428 000C                  		move.w	$C(a0),d2
0000DC54 9469 0004                  		sub.w	4(a1),d2
0000DC58 0642 0080                  		addi.w	#$80,d2
0000DC5C 0C42 0060                  		cmpi.w	#$60,d2
0000DC60 6500                       		bcs.s	loc_D726
0000DC62 0C42 0180                  		cmpi.w	#$180,d2
0000DC66 6400                       		bcc.s	loc_D726
0000DC68                            
0000DC68                            loc_D700:
0000DC68 2268 0004                  		movea.l	4(a0),a1
0000DC6C 7200                       		moveq	#0,d1
0000DC6E 0804 0005                  		btst	#5,d4
0000DC72 6600                       		bne.s	loc_D71C
0000DC74 1228 001A                  		move.b	$1A(a0),d1
0000DC78 D201                       		add.b	d1,d1
0000DC7A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DC7E 1219                       		move.b	(a1)+,d1
0000DC80 5301                       		subq.b	#1,d1
0000DC82 6B00                       		bmi.s	loc_D720
0000DC84                            
0000DC84                            loc_D71C:
0000DC84 6100 0000                  		bsr.w	sub_D750
0000DC88                            
0000DC88                            loc_D720:
0000DC88 08E8 0007 0001             		bset	#7,1(a0)
0000DC8E                            
0000DC8E                            loc_D726:
0000DC8E 5446                       		addq.w	#2,d6
0000DC90 5554                       		subq.w	#2,(a4)
0000DC92 6600 FF46                  		bne.w	loc_D672
0000DC96                            
0000DC96                            loc_D72E:
0000DC96 49EC 0080                  		lea	$80(a4),a4
0000DC9A 51CF FF36                  		dbf	d7,loc_D66A
0000DC9E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DCA2 0C05 0050                  		cmpi.b	#$50,d5
0000DCA6 6700                       		beq.s	loc_D748
0000DCA8 24BC 0000 0000             		move.l	#0,(a2)
0000DCAE 4E75                       		rts	
0000DCB0                            ; ===========================================================================
0000DCB0                            
0000DCB0                            loc_D748:
0000DCB0 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DCB6 4E75                       		rts	
0000DCB8                            ; End of function BuildSprites
0000DCB8                            
0000DCB8                            
0000DCB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCB8                            
0000DCB8                            
0000DCB8                            sub_D750:				; XREF: BuildSprites
0000DCB8 3668 0002                  		movea.w	2(a0),a3
0000DCBC 0804 0000                  		btst	#0,d4
0000DCC0 6600                       		bne.s	loc_D796
0000DCC2 0804 0001                  		btst	#1,d4
0000DCC6 6600 0000                  		bne.w	loc_D7E4
0000DCCA                            ; End of function sub_D750
0000DCCA                            
0000DCCA                            
0000DCCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCCA                            
0000DCCA                            
0000DCCA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DCCA 0C05 0050                  		cmpi.b	#$50,d5
0000DCCE 6700                       		beq.s	locret_D794
0000DCD0 1019                       		move.b	(a1)+,d0
0000DCD2 4880                       		ext.w	d0
0000DCD4 D042                       		add.w	d2,d0
0000DCD6 34C0                       		move.w	d0,(a2)+
0000DCD8 14D9                       		move.b	(a1)+,(a2)+
0000DCDA 5205                       		addq.b	#1,d5
0000DCDC 14C5                       		move.b	d5,(a2)+
0000DCDE 1019                       		move.b	(a1)+,d0
0000DCE0 E148                       		lsl.w	#8,d0
0000DCE2 1019                       		move.b	(a1)+,d0
0000DCE4 D04B                       		add.w	a3,d0
0000DCE6 34C0                       		move.w	d0,(a2)+
0000DCE8 1019                       		move.b	(a1)+,d0
0000DCEA 4880                       		ext.w	d0
0000DCEC D043                       		add.w	d3,d0
0000DCEE 0240 01FF                  		andi.w	#$1FF,d0
0000DCF2 6600                       		bne.s	loc_D78E
0000DCF4 5240                       		addq.w	#1,d0
0000DCF6                            
0000DCF6                            loc_D78E:
0000DCF6 34C0                       		move.w	d0,(a2)+
0000DCF8 51C9 FFD0                  		dbf	d1,sub_D762
0000DCFC                            
0000DCFC                            locret_D794:
0000DCFC 4E75                       		rts	
0000DCFE                            ; End of function sub_D762
0000DCFE                            
0000DCFE                            ; ===========================================================================
0000DCFE                            
0000DCFE                            loc_D796:
0000DCFE 0804 0001                  		btst	#1,d4
0000DD02 6600 0000                  		bne.w	loc_D82A
0000DD06                            
0000DD06                            loc_D79E:
0000DD06 0C05 0050                  		cmpi.b	#$50,d5
0000DD0A 6700                       		beq.s	locret_D7E2
0000DD0C 1019                       		move.b	(a1)+,d0
0000DD0E 4880                       		ext.w	d0
0000DD10 D042                       		add.w	d2,d0
0000DD12 34C0                       		move.w	d0,(a2)+
0000DD14 1819                       		move.b	(a1)+,d4
0000DD16 14C4                       		move.b	d4,(a2)+
0000DD18 5205                       		addq.b	#1,d5
0000DD1A 14C5                       		move.b	d5,(a2)+
0000DD1C 1019                       		move.b	(a1)+,d0
0000DD1E E148                       		lsl.w	#8,d0
0000DD20 1019                       		move.b	(a1)+,d0
0000DD22 D04B                       		add.w	a3,d0
0000DD24 0A40 0800                  		eori.w	#$800,d0
0000DD28 34C0                       		move.w	d0,(a2)+
0000DD2A 1019                       		move.b	(a1)+,d0
0000DD2C 4880                       		ext.w	d0
0000DD2E 4440                       		neg.w	d0
0000DD30 D804                       		add.b	d4,d4
0000DD32 0244 0018                  		andi.w	#$18,d4
0000DD36 5044                       		addq.w	#8,d4
0000DD38 9044                       		sub.w	d4,d0
0000DD3A D043                       		add.w	d3,d0
0000DD3C 0240 01FF                  		andi.w	#$1FF,d0
0000DD40 6600                       		bne.s	loc_D7DC
0000DD42 5240                       		addq.w	#1,d0
0000DD44                            
0000DD44                            loc_D7DC:
0000DD44 34C0                       		move.w	d0,(a2)+
0000DD46 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD4A                            
0000DD4A                            locret_D7E2:
0000DD4A 4E75                       		rts	
0000DD4C                            ; ===========================================================================
0000DD4C                            
0000DD4C                            loc_D7E4:				; XREF: sub_D750
0000DD4C 0C05 0050                  		cmpi.b	#$50,d5
0000DD50 6700                       		beq.s	locret_D828
0000DD52 1019                       		move.b	(a1)+,d0
0000DD54 1811                       		move.b	(a1),d4
0000DD56 4880                       		ext.w	d0
0000DD58 4440                       		neg.w	d0
0000DD5A E70C                       		lsl.b	#3,d4
0000DD5C 0244 0018                  		andi.w	#$18,d4
0000DD60 5044                       		addq.w	#8,d4
0000DD62 9044                       		sub.w	d4,d0
0000DD64 D042                       		add.w	d2,d0
0000DD66 34C0                       		move.w	d0,(a2)+
0000DD68 14D9                       		move.b	(a1)+,(a2)+
0000DD6A 5205                       		addq.b	#1,d5
0000DD6C 14C5                       		move.b	d5,(a2)+
0000DD6E 1019                       		move.b	(a1)+,d0
0000DD70 E148                       		lsl.w	#8,d0
0000DD72 1019                       		move.b	(a1)+,d0
0000DD74 D04B                       		add.w	a3,d0
0000DD76 0A40 1000                  		eori.w	#$1000,d0
0000DD7A 34C0                       		move.w	d0,(a2)+
0000DD7C 1019                       		move.b	(a1)+,d0
0000DD7E 4880                       		ext.w	d0
0000DD80 D043                       		add.w	d3,d0
0000DD82 0240 01FF                  		andi.w	#$1FF,d0
0000DD86 6600                       		bne.s	loc_D822
0000DD88 5240                       		addq.w	#1,d0
0000DD8A                            
0000DD8A                            loc_D822:
0000DD8A 34C0                       		move.w	d0,(a2)+
0000DD8C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DD90                            
0000DD90                            locret_D828:
0000DD90 4E75                       		rts	
0000DD92                            ; ===========================================================================
0000DD92                            
0000DD92                            loc_D82A:
0000DD92 0C05 0050                  		cmpi.b	#$50,d5
0000DD96 6700                       		beq.s	locret_D87C
0000DD98 1019                       		move.b	(a1)+,d0
0000DD9A 1811                       		move.b	(a1),d4
0000DD9C 4880                       		ext.w	d0
0000DD9E 4440                       		neg.w	d0
0000DDA0 E70C                       		lsl.b	#3,d4
0000DDA2 0244 0018                  		andi.w	#$18,d4
0000DDA6 5044                       		addq.w	#8,d4
0000DDA8 9044                       		sub.w	d4,d0
0000DDAA D042                       		add.w	d2,d0
0000DDAC 34C0                       		move.w	d0,(a2)+
0000DDAE 1819                       		move.b	(a1)+,d4
0000DDB0 14C4                       		move.b	d4,(a2)+
0000DDB2 5205                       		addq.b	#1,d5
0000DDB4 14C5                       		move.b	d5,(a2)+
0000DDB6 1019                       		move.b	(a1)+,d0
0000DDB8 E148                       		lsl.w	#8,d0
0000DDBA 1019                       		move.b	(a1)+,d0
0000DDBC D04B                       		add.w	a3,d0
0000DDBE 0A40 1800                  		eori.w	#$1800,d0
0000DDC2 34C0                       		move.w	d0,(a2)+
0000DDC4 1019                       		move.b	(a1)+,d0
0000DDC6 4880                       		ext.w	d0
0000DDC8 4440                       		neg.w	d0
0000DDCA D804                       		add.b	d4,d4
0000DDCC 0244 0018                  		andi.w	#$18,d4
0000DDD0 5044                       		addq.w	#8,d4
0000DDD2 9044                       		sub.w	d4,d0
0000DDD4 D043                       		add.w	d3,d0
0000DDD6 0240 01FF                  		andi.w	#$1FF,d0
0000DDDA 6600                       		bne.s	loc_D876
0000DDDC 5240                       		addq.w	#1,d0
0000DDDE                            
0000DDDE                            loc_D876:
0000DDDE 34C0                       		move.w	d0,(a2)+
0000DDE0 51C9 FFB0                  		dbf	d1,loc_D82A
0000DDE4                            
0000DDE4                            locret_D87C:
0000DDE4 4E75                       		rts	
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6                            ; Subroutine to	check if an object is on the screen
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6                            
0000DDE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDE6                            
0000DDE6                            
0000DDE6                            ChkObjOnScreen:
0000DDE6 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DDEA 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DDEE 6B00                       		bmi.s	NotOnScreen
0000DDF0 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DDF4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DDF6                            
0000DDF6 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DDFA 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DDFE 6B00                       		bmi.s	NotOnScreen
0000DE00 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE04 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE06                            
0000DE06 7000                       		moveq	#0,d0		; set flag to 0
0000DE08 4E75                       		rts	
0000DE0A                            ; ===========================================================================
0000DE0A                            
0000DE0A                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE0A 7001                       		moveq	#1,d0		; set flag to 1
0000DE0C 4E75                       		rts	
0000DE0E                            ; End of function ChkObjOnScreen
0000DE0E                            
0000DE0E                            
0000DE0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE0E                            
0000DE0E                            
0000DE0E                            ChkObjOnScreen2:
0000DE0E 7200                       		moveq	#0,d1
0000DE10 1228 0019                  		move.b	$19(a0),d1
0000DE14 3028 0008                  		move.w	8(a0),d0
0000DE18 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE1C D041                       		add.w	d1,d0
0000DE1E 6B00                       		bmi.s	NotOnScreen2
0000DE20 D241                       		add.w	d1,d1
0000DE22 9041                       		sub.w	d1,d0
0000DE24 0C40 0140                  		cmpi.w	#320,d0
0000DE28 6C00                       		bge.s	NotOnScreen2
0000DE2A                            
0000DE2A 3228 000C                  		move.w	$C(a0),d1
0000DE2E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE32 6B00                       		bmi.s	NotOnScreen2
0000DE34 0C41 00E0                  		cmpi.w	#224,d1
0000DE38 6C00                       		bge.s	NotOnScreen2
0000DE3A                            
0000DE3A 7000                       		moveq	#0,d0
0000DE3C 4E75                       		rts	
0000DE3E                            ; ===========================================================================
0000DE3E                            
0000DE3E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE3E 7001                       		moveq	#1,d0
0000DE40 4E75                       		rts	
0000DE42                            ; End of function ChkObjOnScreen2
0000DE42                            
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42                            ; Subroutine to	load a level's objects
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42                            
0000DE42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE42                            
0000DE42                            
0000DE42                            ObjPosLoad:				; XREF: Level; et al
0000DE42 7000                       		moveq	#0,d0
0000DE44 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE48 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE4C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE50                            ; End of function ObjPosLoad
0000DE50                            
0000DE50                            ; ===========================================================================
0000DE50 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE52 0000                       		dc.w OPL_Next-OPL_Index
0000DE54                            ; ===========================================================================
0000DE54                            
0000DE54                            OPL_Main:				; XREF: OPL_Index
0000DE54 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DE58 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DE5C ED08                       		lsl.b	#6,d0
0000DE5E E848                       		lsr.w	#4,d0
0000DE60 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DE66 2248                       		movea.l	a0,a1
0000DE68 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DE6C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE70 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DE74 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DE78 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DE7C 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DE80 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DE84 34FC 0101                  		move.w	#$101,(a2)+
0000DE88 303C 005E                  		move.w	#$5E,d0
0000DE8C                            
0000DE8C                            OPL_ClrList:
0000DE8C 429A                       		clr.l	(a2)+
0000DE8E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DE92                            
0000DE92 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DE96 7400                       		moveq	#0,d2
0000DE98 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DE9C 0446 0080                  		subi.w	#$80,d6
0000DEA0 6400                       		bcc.s	loc_D93C
0000DEA2 7C00                       		moveq	#0,d6
0000DEA4                            
0000DEA4                            loc_D93C:
0000DEA4 0246 FF80                  		andi.w	#$FF80,d6
0000DEA8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DEAC                            
0000DEAC                            loc_D944:
0000DEAC BC50                       		cmp.w	(a0),d6
0000DEAE 6300                       		bls.s	loc_D956
0000DEB0 4A28 0004                  		tst.b	4(a0)
0000DEB4 6A00                       		bpl.s	loc_D952
0000DEB6 1412                       		move.b	(a2),d2
0000DEB8 5212                       		addq.b	#1,(a2)
0000DEBA                            
0000DEBA                            loc_D952:
0000DEBA 5C48                       		addq.w	#6,a0
0000DEBC 60EE                       		bra.s	loc_D944
0000DEBE                            ; ===========================================================================
0000DEBE                            
0000DEBE                            loc_D956:
0000DEBE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEC2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DEC6 0446 0080                  		subi.w	#$80,d6
0000DECA 6500                       		bcs.s	loc_D976
0000DECC                            
0000DECC                            loc_D964:
0000DECC BC50                       		cmp.w	(a0),d6
0000DECE 6300                       		bls.s	loc_D976
0000DED0 4A28 0004                  		tst.b	4(a0)
0000DED4 6A00                       		bpl.s	loc_D972
0000DED6 522A 0001                  		addq.b	#1,1(a2)
0000DEDA                            
0000DEDA                            loc_D972:
0000DEDA 5C48                       		addq.w	#6,a0
0000DEDC 60EE                       		bra.s	loc_D964
0000DEDE                            ; ===========================================================================
0000DEDE                            
0000DEDE                            loc_D976:
0000DEDE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DEE2 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DEE8                            
0000DEE8                            OPL_Next:				; XREF: OPL_Index
0000DEE8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEEC 7400                       		moveq	#0,d2
0000DEEE 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEF2 0246 FF80                  		andi.w	#$FF80,d6
0000DEF6 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DEFA 6700 0000                  		beq.w	locret_DA3A
0000DEFE 6C00                       		bge.s	loc_D9F6
0000DF00 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF04 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF08 0446 0080                  		subi.w	#$80,d6
0000DF0C 6500                       		bcs.s	loc_D9D2
0000DF0E                            
0000DF0E                            loc_D9A6:
0000DF0E BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF12 6C00                       		bge.s	loc_D9D2
0000DF14 5D48                       		subq.w	#6,a0
0000DF16 4A28 0004                  		tst.b	4(a0)
0000DF1A 6A00                       		bpl.s	loc_D9BC
0000DF1C 532A 0001                  		subq.b	#1,1(a2)
0000DF20 142A 0001                  		move.b	1(a2),d2
0000DF24                            
0000DF24                            loc_D9BC:
0000DF24 6100 0000                  		bsr.w	loc_DA3C
0000DF28 6600                       		bne.s	loc_D9C6
0000DF2A 5D48                       		subq.w	#6,a0
0000DF2C 60E0                       		bra.s	loc_D9A6
0000DF2E                            ; ===========================================================================
0000DF2E                            
0000DF2E                            loc_D9C6:
0000DF2E 4A28 0004                  		tst.b	4(a0)
0000DF32 6A00                       		bpl.s	loc_D9D0
0000DF34 522A 0001                  		addq.b	#1,1(a2)
0000DF38                            
0000DF38                            loc_D9D0:
0000DF38 5C48                       		addq.w	#6,a0
0000DF3A                            
0000DF3A                            loc_D9D2:
0000DF3A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF3E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF42 0646 0300                  		addi.w	#$300,d6
0000DF46                            
0000DF46                            loc_D9DE:
0000DF46 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF4A 6E00                       		bgt.s	loc_D9F0
0000DF4C 4A28 FFFE                  		tst.b	-2(a0)
0000DF50 6A00                       		bpl.s	loc_D9EC
0000DF52 5312                       		subq.b	#1,(a2)
0000DF54                            
0000DF54                            loc_D9EC:
0000DF54 5D48                       		subq.w	#6,a0
0000DF56 60EE                       		bra.s	loc_D9DE
0000DF58                            ; ===========================================================================
0000DF58                            
0000DF58                            loc_D9F0:
0000DF58 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF5C 4E75                       		rts	
0000DF5E                            ; ===========================================================================
0000DF5E                            
0000DF5E                            loc_D9F6:
0000DF5E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF62 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF66 0646 0280                  		addi.w	#$280,d6
0000DF6A                            
0000DF6A                            loc_DA02:
0000DF6A BC50                       		cmp.w	(a0),d6
0000DF6C 6300                       		bls.s	loc_DA16
0000DF6E 4A28 0004                  		tst.b	4(a0)
0000DF72 6A00                       		bpl.s	loc_DA10
0000DF74 1412                       		move.b	(a2),d2
0000DF76 5212                       		addq.b	#1,(a2)
0000DF78                            
0000DF78                            loc_DA10:
0000DF78 6100 0000                  		bsr.w	loc_DA3C
0000DF7C 67EC                       		beq.s	loc_DA02
0000DF7E                            
0000DF7E                            loc_DA16:
0000DF7E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF82 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF86 0446 0300                  		subi.w	#$300,d6
0000DF8A 6500                       		bcs.s	loc_DA36
0000DF8C                            
0000DF8C                            loc_DA24:
0000DF8C BC50                       		cmp.w	(a0),d6
0000DF8E 6300                       		bls.s	loc_DA36
0000DF90 4A28 0004                  		tst.b	4(a0)
0000DF94 6A00                       		bpl.s	loc_DA32
0000DF96 522A 0001                  		addq.b	#1,1(a2)
0000DF9A                            
0000DF9A                            loc_DA32:
0000DF9A 5C48                       		addq.w	#6,a0
0000DF9C 60EE                       		bra.s	loc_DA24
0000DF9E                            ; ===========================================================================
0000DF9E                            
0000DF9E                            loc_DA36:
0000DF9E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFA2                            
0000DFA2                            locret_DA3A:
0000DFA2 4E75                       		rts	
0000DFA4                            ; ===========================================================================
0000DFA4                            
0000DFA4                            loc_DA3C:
0000DFA4 4A28 0004                  		tst.b	4(a0)
0000DFA8 6A00                       		bpl.s	OPL_MakeItem
0000DFAA 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DFB0 6700                       		beq.s	OPL_MakeItem
0000DFB2 5C48                       		addq.w	#6,a0
0000DFB4 7000                       		moveq	#0,d0
0000DFB6 4E75                       		rts	
0000DFB8                            ; ===========================================================================
0000DFB8                            
0000DFB8                            OPL_MakeItem:
0000DFB8 6100 0000                  		bsr.w	SingleObjLoad
0000DFBC 6600                       		bne.s	locret_DA8A
0000DFBE 3358 0008                  		move.w	(a0)+,8(a1)
0000DFC2 3018                       		move.w	(a0)+,d0
0000DFC4 3200                       		move.w	d0,d1
0000DFC6 0240 0FFF                  		andi.w	#$FFF,d0
0000DFCA 3340 000C                  		move.w	d0,$C(a1)
0000DFCE E559                       		rol.w	#2,d1
0000DFD0 0201 0003                  		andi.b	#3,d1
0000DFD4 1341 0001                  		move.b	d1,1(a1)
0000DFD8 1341 0022                  		move.b	d1,$22(a1)
0000DFDC 1018                       		move.b	(a0)+,d0
0000DFDE 6A00                       		bpl.s	loc_DA80
0000DFE0 0200 007F                  		andi.b	#$7F,d0
0000DFE4 1342 0023                  		move.b	d2,$23(a1)
0000DFE8                            
0000DFE8                            loc_DA80:
0000DFE8 1280                       		move.b	d0,0(a1)
0000DFEA 1358 0028                  		move.b	(a0)+,$28(a1)
0000DFEE 7000                       		moveq	#0,d0
0000DFF0                            
0000DFF0                            locret_DA8A:
0000DFF0 4E75                       		rts	
0000DFF2                            ; ---------------------------------------------------------------------------
0000DFF2                            ; Single object	loading	subroutine
0000DFF2                            ; ---------------------------------------------------------------------------
0000DFF2                            
0000DFF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFF2                            
0000DFF2                            
0000DFF2                            SingleObjLoad:
0000DFF2 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DFF6 303C 005F                  		move.w	#$5F,d0
0000DFFA                            
0000DFFA                            loc_DA94:
0000DFFA 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DFFC 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DFFE 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E002 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E006                            
0000E006                            locret_DAA0:
0000E006 4E75                       		rts	
0000E008                            ; End of function SingleObjLoad
0000E008                            
0000E008                            
0000E008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E008                            
0000E008                            
0000E008                            SingleObjLoad2:
0000E008 2248                       		movea.l	a0,a1
0000E00A 303C F000                  		move.w	#-$1000,d0
0000E00E 9048                       		sub.w	a0,d0
0000E010 EC48                       		lsr.w	#6,d0
0000E012 5340                       		subq.w	#1,d0
0000E014 6500                       		bcs.s	locret_DABC
0000E016                            
0000E016                            loc_DAB0:
0000E016 4A11                       		tst.b	(a1)
0000E018 6700                       		beq.s	locret_DABC
0000E01A 43E9 0040                  		lea	$40(a1),a1
0000E01E 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E022                            
0000E022                            locret_DABC:
0000E022 4E75                       		rts	
0000E024                            ; End of function SingleObjLoad2
0000E024                            
0000E024                            ; ===========================================================================
0000E024                            ; ---------------------------------------------------------------------------
0000E024                            ; Object 41 - springs
0000E024                            ; ---------------------------------------------------------------------------
0000E024                            
0000E024                            Obj41:					; XREF: Obj_Index
0000E024 7000                       		moveq	#0,d0
0000E026 1028 0024                  		move.b	$24(a0),d0
0000E02A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E02E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E032 6100 FB38                  		bsr.w	DisplaySprite
0000E036 3028 0008                  		move.w	8(a0),d0
0000E03A 0240 FF80                  		andi.w	#$FF80,d0
0000E03E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E042 0441 0080                  		subi.w	#$80,d1
0000E046 0241 FF80                  		andi.w	#$FF80,d1
0000E04A 9041                       		sub.w	d1,d0
0000E04C 0C40 0280                  		cmpi.w	#$280,d0
0000E050 6200 FB56                  		bhi.w	DeleteObject
0000E054 4E75                       		rts	
0000E056                            ; ===========================================================================
0000E056 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E058 0000                       		dc.w Obj41_Up-Obj41_Index
0000E05A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E05C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E05E 0000                       		dc.w Obj41_LR-Obj41_Index
0000E060 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E062 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E064 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E066 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E068 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E06A                            
0000E06A F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E06C F600                       		dc.w -$A00		; power	of yellow spring
0000E06E                            ; ===========================================================================
0000E06E                            
0000E06E                            Obj41_Main:				; XREF: Obj41_Index
0000E06E 5428 0024                  		addq.b	#2,$24(a0)
0000E072 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E07A 317C 0523 0002             		move.w	#$523,2(a0)
0000E080 0028 0004 0001             		ori.b	#4,1(a0)
0000E086 117C 0010 0019             		move.b	#$10,$19(a0)
0000E08C 117C 0004 0018             		move.b	#4,$18(a0)
0000E092 1028 0028                  		move.b	$28(a0),d0
0000E096 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E09A 6700                       		beq.s	loc_DB54	; if not, branch
0000E09C 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E0A2 117C 0001 001C             		move.b	#1,$1C(a0)
0000E0A8 117C 0003 001A             		move.b	#3,$1A(a0)
0000E0AE 317C 0533 0002             		move.w	#$533,2(a0)
0000E0B4 117C 0008 0019             		move.b	#8,$19(a0)
0000E0BA                            
0000E0BA                            loc_DB54:
0000E0BA 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E0BE 6700                       		beq.s	loc_DB66	; if not, branch
0000E0C0 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E0C6 08E8 0001 0022             		bset	#1,$22(a0)
0000E0CC                            
0000E0CC                            loc_DB66:
0000E0CC 0800 0001                  		btst	#1,d0
0000E0D0 6700                       		beq.s	loc_DB72
0000E0D2 08E8 0005 0002             		bset	#5,2(a0)
0000E0D8                            
0000E0D8                            loc_DB72:
0000E0D8 0240 000F                  		andi.w	#$F,d0
0000E0DC 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E0E2 4E75                       		rts	
0000E0E4                            ; ===========================================================================
0000E0E4                            
0000E0E4                            Obj41_Up:				; XREF: Obj41_Index
0000E0E4 323C 001B                  		move.w	#$1B,d1
0000E0E8 343C 0008                  		move.w	#8,d2
0000E0EC 363C 0010                  		move.w	#$10,d3
0000E0F0 3828 0008                  		move.w	8(a0),d4
0000E0F4 6100 0000                  		bsr.w	SolidObject
0000E0F8 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E0FC 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E0FE 4E75                       		rts	
0000E100                            ; ===========================================================================
0000E100                            
0000E100                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E100 5428 0024                  		addq.b	#2,$24(a0)
0000E104 5069 000C                  		addq.w	#8,$C(a1)
0000E108 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E10E 08E9 0001 0022             		bset	#1,$22(a1)
0000E114 08A9 0003 0022             		bclr	#3,$22(a1)
0000E11A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E120 137C 0002 0024             		move.b	#2,$24(a1)
0000E126 08A8 0003 0022             		bclr	#3,$22(a0)
0000E12C 4228 0025                  		clr.b	$25(a0)
0000E130 303C 00CC                  		move.w	#$CC,d0
0000E134 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E13A                            
0000E13A                            Obj41_AniUp:				; XREF: Obj41_Index
0000E13A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E140 6000 CB00                  		bra.w	AnimateSprite
0000E144                            ; ===========================================================================
0000E144                            
0000E144                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E144 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E14A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E14E 4E75                       		rts	
0000E150                            ; ===========================================================================
0000E150                            
0000E150                            Obj41_LR:				; XREF: Obj41_Index
0000E150 323C 0013                  		move.w	#$13,d1
0000E154 343C 000E                  		move.w	#$E,d2
0000E158 363C 000F                  		move.w	#$F,d3
0000E15C 3828 0008                  		move.w	8(a0),d4
0000E160 6100 0000                  		bsr.w	SolidObject
0000E164 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E16A 6600                       		bne.s	loc_DC0C
0000E16C 117C 0008 0024             		move.b	#8,$24(a0)
0000E172                            
0000E172                            loc_DC0C:
0000E172 0828 0005 0022             		btst	#5,$22(a0)
0000E178 6600                       		bne.s	Obj41_BounceLR
0000E17A 4E75                       		rts	
0000E17C                            ; ===========================================================================
0000E17C                            
0000E17C                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E17C 5428 0024                  		addq.b	#2,$24(a0)
0000E180 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E186 5069 0008                  		addq.w	#8,8(a1)
0000E18A 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E190 6600                       		bne.s	loc_DC36	; if yes, branch
0000E192 0469 0010 0008             		subi.w	#$10,8(a1)
0000E198 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E19C                            
0000E19C                            loc_DC36:
0000E19C 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E1A2 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E1A8 0869 0000 0022             		bchg	#0,$22(a1)
0000E1AE 0829 0002 0022             		btst	#2,$22(a1)
0000E1B4 6600                       		bne.s	loc_DC56
0000E1B6 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E1BC                            
0000E1BC                            loc_DC56:
0000E1BC 08A8 0005 0022             		bclr	#5,$22(a0)
0000E1C2 08A9 0005 0022             		bclr	#5,$22(a1)
0000E1C8 303C 00CC                  		move.w	#$CC,d0
0000E1CC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1D2                            
0000E1D2                            Obj41_AniLR:				; XREF: Obj41_Index
0000E1D2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1D8 6000 CA68                  		bra.w	AnimateSprite
0000E1DC                            ; ===========================================================================
0000E1DC                            
0000E1DC                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E1DC 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E1E2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E1E6 4E75                       		rts	
0000E1E8                            ; ===========================================================================
0000E1E8                            
0000E1E8                            Obj41_Dwn:				; XREF: Obj41_Index
0000E1E8 323C 001B                  		move.w	#$1B,d1
0000E1EC 343C 0008                  		move.w	#8,d2
0000E1F0 363C 0010                  		move.w	#$10,d3
0000E1F4 3828 0008                  		move.w	8(a0),d4
0000E1F8 6100 0000                  		bsr.w	SolidObject
0000E1FC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E202 6600                       		bne.s	loc_DCA4
0000E204 117C 000E 0024             		move.b	#$E,$24(a0)
0000E20A                            
0000E20A                            loc_DCA4:
0000E20A 4A28 0025                  		tst.b	$25(a0)
0000E20E 6600                       		bne.s	locret_DCAE
0000E210 4A44                       		tst.w	d4
0000E212 6B00                       		bmi.s	Obj41_BounceDwn
0000E214                            
0000E214                            locret_DCAE:
0000E214 4E75                       		rts	
0000E216                            ; ===========================================================================
0000E216                            
0000E216                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E216 5428 0024                  		addq.b	#2,$24(a0)
0000E21A 5169 000C                  		subq.w	#8,$C(a1)
0000E21E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E224 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E228 08E9 0001 0022             		bset	#1,$22(a1)
0000E22E 08A9 0003 0022             		bclr	#3,$22(a1)
0000E234 137C 0002 0024             		move.b	#2,$24(a1)
0000E23A 08A8 0003 0022             		bclr	#3,$22(a0)
0000E240 4228 0025                  		clr.b	$25(a0)
0000E244 303C 00CC                  		move.w	#$CC,d0
0000E248 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E24E                            
0000E24E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E24E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E254 6000 C9EC                  		bra.w	AnimateSprite
0000E258                            ; ===========================================================================
0000E258                            
0000E258                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E258 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E25E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E262 4E75                       		rts	
0000E264                            ; ===========================================================================
0000E264                            Ani_obj41:
0000E264                            	include "_anim\obj41.asm"
0000E264                            ; ---------------------------------------------------------------------------
0000E264                            ; Animation script - springs
0000E264                            ; ---------------------------------------------------------------------------
0000E264 0000                       		dc.w byte_DD02-Ani_obj41
0000E266 0000                       		dc.w byte_DD0E-Ani_obj41
0000E268 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E274 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E280                            		even
0000E280                            		even
0000E280                            
0000E280                            ; ---------------------------------------------------------------------------
0000E280                            ; Sprite mappings - springs
0000E280                            ; ---------------------------------------------------------------------------
0000E280                            Map_obj41:
0000E280                            	include "_maps\obj41.asm"
0000E280                            ; ---------------------------------------------------------------------------
0000E280                            ; Sprite mappings - springs
0000E280                            ; ---------------------------------------------------------------------------
0000E280 0000                       		dc.w byte_DD26-Map_obj41
0000E282 0000                       		dc.w byte_DD31-Map_obj41
0000E284 0000                       		dc.w byte_DD37-Map_obj41
0000E286 0000                       		dc.w byte_DD47-Map_obj41
0000E288 0000                       		dc.w byte_DD4D-Map_obj41
0000E28A 0000                       		dc.w byte_DD53-Map_obj41
0000E28C 02                         byte_DD26:	dc.b 2
0000E28D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E292 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E297 01                         byte_DD31:	dc.b 1
0000E298 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E29D 03                         byte_DD37:	dc.b 3
0000E29E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E2A3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E2A8 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E2AD 01                         byte_DD47:	dc.b 1
0000E2AE F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E2B3 01                         byte_DD4D:	dc.b 1
0000E2B4 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E2B9 04                         byte_DD53:	dc.b 4
0000E2BA F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E2BF F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E2C4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E2C9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E2CE                            		even
0000E2CE                            		even
0000E2CE                            
0000E2CE                            ; ===========================================================================
0000E2CE                            ; ---------------------------------------------------------------------------
0000E2CE                            ; Object 42 - Newtron enemy (GHZ)
0000E2CE                            ; ---------------------------------------------------------------------------
0000E2CE                            
0000E2CE                            Obj42:					; XREF: Obj_Index
0000E2CE 7000                       		moveq	#0,d0
0000E2D0 1028 0024                  		move.b	$24(a0),d0
0000E2D4 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E2D8 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E2DC                            ; ===========================================================================
0000E2DC 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E2DE 0000                       		dc.w Obj42_Action-Obj42_Index
0000E2E0 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E2E2                            ; ===========================================================================
0000E2E2                            
0000E2E2                            Obj42_Main:				; XREF: Obj42_Index
0000E2E2 5428 0024                  		addq.b	#2,$24(a0)
0000E2E6 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E2EE 317C 049B 0002             		move.w	#$49B,2(a0)
0000E2F4 117C 0004 0001             		move.b	#4,1(a0)
0000E2FA 117C 0004 0018             		move.b	#4,$18(a0)
0000E300 117C 0014 0019             		move.b	#$14,$19(a0)
0000E306 117C 0010 0016             		move.b	#$10,$16(a0)
0000E30C 117C 0008 0017             		move.b	#8,$17(a0)
0000E312                            
0000E312                            Obj42_Action:				; XREF: Obj42_Index
0000E312 7000                       		moveq	#0,d0
0000E314 1028 0025                  		move.b	$25(a0),d0
0000E318 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E31C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E320 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E326 6100 C91A                  		bsr.w	AnimateSprite
0000E32A 6000 0000                  		bra.w	MarkObjGone
0000E32E                            ; ===========================================================================
0000E32E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E330 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E332 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E334 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E336 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E338                            ; ===========================================================================
0000E338                            
0000E338                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E338 08E8 0000 0022             		bset	#0,$22(a0)
0000E33E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E342 9068 0008                  		sub.w	8(a0),d0
0000E346 6400                       		bcc.s	loc_DDEA
0000E348 4440                       		neg.w	d0
0000E34A 08A8 0000 0022             		bclr	#0,$22(a0)
0000E350                            
0000E350                            loc_DDEA:
0000E350 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E354 6400                       		bcc.s	locret_DE12	; if not, branch
0000E356 5428 0025                  		addq.b	#2,$25(a0)
0000E35A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E360 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E364 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E366 317C 249B 0002             		move.w	#$249B,2(a0)
0000E36C 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E372 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E378                            
0000E378                            locret_DE12:
0000E378 4E75                       		rts	
0000E37A                            ; ===========================================================================
0000E37A                            
0000E37A                            Obj42_Type00:				; XREF: Obj42_Index2
0000E37A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E380 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E382 08E8 0000 0022             		bset	#0,$22(a0)
0000E388 3038 D008                  		move.w	($FFFFD008).w,d0
0000E38C 9068 0008                  		sub.w	8(a0),d0
0000E390 6400                       		bcc.s	locret_DE32
0000E392 08A8 0000 0022             		bclr	#0,$22(a0)
0000E398                            
0000E398                            locret_DE32:
0000E398 4E75                       		rts	
0000E39A                            ; ===========================================================================
0000E39A                            
0000E39A                            Obj42_Fall:				; XREF: Obj42_Type00
0000E39A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3A0 6600                       		bne.s	loc_DE42
0000E3A2 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3A8                            
0000E3A8                            loc_DE42:
0000E3A8 6100 F770                  		bsr.w	ObjectFall
0000E3AC 6100 0000                  		bsr.w	ObjHitFloor
0000E3B0 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E3B2 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E3B4 D368 000C                  		add.w	d1,$C(a0)
0000E3B8 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E3BE 5428 0025                  		addq.b	#2,$25(a0)
0000E3C2 117C 0002 001C             		move.b	#2,$1C(a0)
0000E3C8 0828 0005 0002             		btst	#5,2(a0)
0000E3CE 6700                       		beq.s	Obj42_Move
0000E3D0 5228 001C                  		addq.b	#1,$1C(a0)
0000E3D4                            
0000E3D4                            Obj42_Move:
0000E3D4 117C 000D 0020             		move.b	#$D,$20(a0)
0000E3DA 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E3E0 0828 0000 0022             		btst	#0,$22(a0)
0000E3E6 6600                       		bne.s	locret_DE86
0000E3E8 4468 0010                  		neg.w	$10(a0)
0000E3EC                            
0000E3EC                            locret_DE86:
0000E3EC 4E75                       		rts	
0000E3EE                            ; ===========================================================================
0000E3EE                            
0000E3EE                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E3EE 6100 F756                  		bsr.w	SpeedToPos
0000E3F2 6100 0000                  		bsr.w	ObjHitFloor
0000E3F6 0C41 FFF8                  		cmpi.w	#-8,d1
0000E3FA 6D00                       		blt.s	loc_DEA2
0000E3FC 0C41 000C                  		cmpi.w	#$C,d1
0000E400 6C00                       		bge.s	loc_DEA2
0000E402 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E406 4E75                       		rts	
0000E408                            ; ===========================================================================
0000E408                            
0000E408                            loc_DEA2:
0000E408 5428 0025                  		addq.b	#2,$25(a0)
0000E40C 4E75                       		rts	
0000E40E                            ; ===========================================================================
0000E40E                            
0000E40E                            Obj42_Speed:				; XREF: Obj42_Index2
0000E40E 6100 F736                  		bsr.w	SpeedToPos
0000E412 4E75                       		rts	
0000E414                            ; ===========================================================================
0000E414                            
0000E414                            Obj42_Type01:				; XREF: Obj42_Index2
0000E414 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E41A 6600                       		bne.s	Obj42_FireMissile
0000E41C 117C 000C 0020             		move.b	#$C,$20(a0)
0000E422                            
0000E422                            Obj42_FireMissile:
0000E422 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E428 6600                       		bne.s	locret_DF14
0000E42A 4A28 0032                  		tst.b	$32(a0)
0000E42E 6600                       		bne.s	locret_DF14
0000E430 117C 0001 0032             		move.b	#1,$32(a0)
0000E436 6100 FBBA                  		bsr.w	SingleObjLoad
0000E43A 6600                       		bne.s	locret_DF14
0000E43C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E440 3368 0008 0008             		move.w	8(a0),8(a1)
0000E446 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E44C 5169 000C                  		subq.w	#8,$C(a1)
0000E450 337C 0200 0010             		move.w	#$200,$10(a1)
0000E456 303C 0014                  		move.w	#$14,d0
0000E45A 0828 0000 0022             		btst	#0,$22(a0)
0000E460 6600                       		bne.s	loc_DF04
0000E462 4440                       		neg.w	d0
0000E464 4469 0010                  		neg.w	$10(a1)
0000E468                            
0000E468                            loc_DF04:
0000E468 D169 0008                  		add.w	d0,8(a1)
0000E46C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E472 137C 0001 0028             		move.b	#1,$28(a1)
0000E478                            
0000E478                            locret_DF14:
0000E478 4E75                       		rts	
0000E47A                            ; ===========================================================================
0000E47A                            
0000E47A                            Obj42_Delete:				; XREF: Obj42_Index
0000E47A 6000 F72C                  		bra.w	DeleteObject
0000E47E                            ; ===========================================================================
0000E47E                            Ani_obj42:
0000E47E                            	include "_anim\obj42.asm"
0000E47E                            ; ---------------------------------------------------------------------------
0000E47E                            ; Animation script - Newtron enemy
0000E47E                            ; ---------------------------------------------------------------------------
0000E47E 0000                       		dc.w byte_DF24-Ani_obj42
0000E480 0000                       		dc.w byte_DF28-Ani_obj42
0000E482 0000                       		dc.w byte_DF30-Ani_obj42
0000E484 0000                       		dc.w byte_DF34-Ani_obj42
0000E486 0000                       		dc.w byte_DF38-Ani_obj42
0000E488 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E48C 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E494 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E498 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E49C 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E4A6                            		even
0000E4A6                            		even
0000E4A6                            
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6                            Map_obj42:
0000E4A6                            	include "_maps\obj42.asm"
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4A6                            ; ---------------------------------------------------------------------------
0000E4A6 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E4AA 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E4AE 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E4B2 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E4B6 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E4BA 0000                       		dc.w byte_DFF8-Map_obj42
0000E4BC 03                         byte_DF58:	dc.b 3
0000E4BD EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E4C2 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E4C7 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E4CC 03                         byte_DF68:	dc.b 3
0000E4CD EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E4D2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4D7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4DC 03                         byte_DF78:	dc.b 3
0000E4DD EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E4E2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4E7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4EC 04                         byte_DF88:	dc.b 4
0000E4ED EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E4F2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4F7 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E4FC 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E501 03                         byte_DF9D:	dc.b 3
0000E502 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E507 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E50C 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E511 02                         byte_DFAD:	dc.b 2
0000E512 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E517 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E51C 03                         byte_DFB8:	dc.b 3
0000E51D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E522 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E527 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E52C 03                         byte_DFC8:	dc.b 3
0000E52D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E532 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E537 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E53C 03                         byte_DFD8:	dc.b 3
0000E53D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E542 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E547 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E54C 03                         byte_DFE8:	dc.b 3
0000E54D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E552 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E557 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E55C 00                         byte_DFF8:	dc.b 0
0000E55E 00                         		even
0000E55E 00                         		even
0000E55E                            
0000E55E                            ; ===========================================================================
0000E55E                            ; ---------------------------------------------------------------------------
0000E55E                            ; Object 43 - Roller enemy (SYZ)
0000E55E                            ; ---------------------------------------------------------------------------
0000E55E                            
0000E55E                            Obj43:					; XREF: Obj_Index
0000E55E 7000                       		moveq	#0,d0
0000E560 1028 0024                  		move.b	$24(a0),d0
0000E564 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E568 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E56C                            ; ===========================================================================
0000E56C 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E56E 0000                       		dc.w Obj43_Action-Obj43_Index
0000E570                            ; ===========================================================================
0000E570                            
0000E570                            Obj43_Main:				; XREF: Obj43_Index
0000E570 117C 000E 0016             		move.b	#$E,$16(a0)
0000E576 117C 0008 0017             		move.b	#8,$17(a0)
0000E57C 6100 F59C                  		bsr.w	ObjectFall
0000E580 6100 0000                  		bsr.w	ObjHitFloor
0000E584 4A41                       		tst.w	d1
0000E586 6A00                       		bpl.s	locret_E052
0000E588 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E58C 317C 0000 0012             		move.w	#0,$12(a0)
0000E592 5428 0024                  		addq.b	#2,$24(a0)
0000E596 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E59E 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E5A4 117C 0004 0001             		move.b	#4,1(a0)
0000E5AA 117C 0004 0018             		move.b	#4,$18(a0)
0000E5B0 117C 0010 0019             		move.b	#$10,$19(a0)
0000E5B6                            
0000E5B6                            locret_E052:
0000E5B6 4E75                       		rts	
0000E5B8                            ; ===========================================================================
0000E5B8                            
0000E5B8                            Obj43_Action:				; XREF: Obj43_Index
0000E5B8 7000                       		moveq	#0,d0
0000E5BA 1028 0025                  		move.b	$25(a0),d0
0000E5BE 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E5C2 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E5C6 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E5CC 6100 C674                  		bsr.w	AnimateSprite
0000E5D0 3028 0008                  		move.w	8(a0),d0
0000E5D4 0240 FF80                  		andi.w	#$FF80,d0
0000E5D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5DC 0441 0080                  		subi.w	#$80,d1
0000E5E0 0241 FF80                  		andi.w	#$FF80,d1
0000E5E4 9041                       		sub.w	d1,d0
0000E5E6 0C40 0280                  		cmpi.w	#$280,d0
0000E5EA 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E5EE 6000 F57C                  		bra.w	DisplaySprite
0000E5F2                            ; ===========================================================================
0000E5F2                            
0000E5F2                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E5F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5F6 7000                       		moveq	#0,d0
0000E5F8 1028 0023                  		move.b	$23(a0),d0
0000E5FC 6700                       		beq.s	Obj43_Delete
0000E5FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E604                            
0000E604                            Obj43_Delete:
0000E604 6000 F5A2                  		bra.w	DeleteObject
0000E608                            ; ===========================================================================
0000E608 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E60A 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E60C 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E60E 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E610                            ; ===========================================================================
0000E610                            
0000E610                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E610 3038 D008                  		move.w	($FFFFD008).w,d0
0000E614 0440 0100                  		subi.w	#$100,d0
0000E618 6500                       		bcs.s	loc_E0D2
0000E61A 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E61E 6500                       		bcs.s	loc_E0D2
0000E620 5828 0025                  		addq.b	#4,$25(a0)
0000E624 117C 0002 001C             		move.b	#2,$1C(a0)
0000E62A 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E630 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E636                            
0000E636                            loc_E0D2:
0000E636 588F                       		addq.l	#4,sp
0000E638 4E75                       		rts	
0000E63A                            ; ===========================================================================
0000E63A                            
0000E63A                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E63A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E640 6700                       		beq.s	loc_E0F8
0000E642 5368 0030                  		subq.w	#1,$30(a0)
0000E646 6A00                       		bpl.s	locret_E0F6
0000E648 117C 0001 001C             		move.b	#1,$1C(a0)
0000E64E 317C 0700 0010             		move.w	#$700,$10(a0)
0000E654 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E65A                            
0000E65A                            locret_E0F6:
0000E65A 4E75                       		rts	
0000E65C                            ; ===========================================================================
0000E65C                            
0000E65C                            loc_E0F8:
0000E65C 5428 0025                  		addq.b	#2,$25(a0)
0000E660 4E75                       		rts	
0000E662                            ; ===========================================================================
0000E662                            
0000E662                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E662 6100 0000                  		bsr.w	Obj43_Stop
0000E666 6100 F4DE                  		bsr.w	SpeedToPos
0000E66A 6100 0000                  		bsr.w	ObjHitFloor
0000E66E 0C41 FFF8                  		cmpi.w	#-8,d1
0000E672 6D00                       		blt.s	Obj43_Jump
0000E674 0C41 000C                  		cmpi.w	#$C,d1
0000E678 6C00                       		bge.s	Obj43_Jump
0000E67A D368 000C                  		add.w	d1,$C(a0)
0000E67E 4E75                       		rts	
0000E680                            ; ===========================================================================
0000E680                            
0000E680                            Obj43_Jump:
0000E680 5428 0025                  		addq.b	#2,$25(a0)
0000E684 08E8 0000 0032             		bset	#0,$32(a0)
0000E68A 6700                       		beq.s	locret_E12E
0000E68C 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E692                            
0000E692                            locret_E12E:
0000E692 4E75                       		rts	
0000E694                            ; ===========================================================================
0000E694                            
0000E694                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E694 6100 F484                  		bsr.w	ObjectFall
0000E698 4A68 0012                  		tst.w	$12(a0)
0000E69C 6B00                       		bmi.s	locret_E150
0000E69E 6100 0000                  		bsr.w	ObjHitFloor
0000E6A2 4A41                       		tst.w	d1
0000E6A4 6A00                       		bpl.s	locret_E150
0000E6A6 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E6AA 5528 0025                  		subq.b	#2,$25(a0)
0000E6AE 317C 0000 0012             		move.w	#0,$12(a0)
0000E6B4                            
0000E6B4                            locret_E150:
0000E6B4 4E75                       		rts	
0000E6B6                            
0000E6B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6B6                            
0000E6B6                            
0000E6B6                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E6B6 4A28 0032                  		tst.b	$32(a0)
0000E6BA 6B00                       		bmi.s	locret_E188
0000E6BC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6C0 0440 0030                  		subi.w	#$30,d0
0000E6C4 9068 0008                  		sub.w	8(a0),d0
0000E6C8 6400                       		bcc.s	locret_E188
0000E6CA 117C 0000 001C             		move.b	#0,$1C(a0)
0000E6D0 117C 000E 0020             		move.b	#$E,$20(a0)
0000E6D6 4268 0010                  		clr.w	$10(a0)
0000E6DA 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E6E0 117C 0002 0025             		move.b	#2,$25(a0)
0000E6E6 08E8 0007 0032             		bset	#7,$32(a0)
0000E6EC                            
0000E6EC                            locret_E188:
0000E6EC 4E75                       		rts	
0000E6EE                            ; End of function Obj43_Stop
0000E6EE                            
0000E6EE                            ; ===========================================================================
0000E6EE                            Ani_obj43:
0000E6EE                            	include "_anim\obj43.asm"
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE                            ; Animation script - Roller enemy
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE 0000                       		dc.w byte_E190-Ani_obj43
0000E6F0 0000                       		dc.w byte_E196-Ani_obj43
0000E6F2 0000                       		dc.w byte_E19C-Ani_obj43
0000E6F4 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E6FA 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E700 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E706 00                         		even
0000E706 00                         		even
0000E706                            
0000E706                            ; ---------------------------------------------------------------------------
0000E706                            ; Sprite mappings - Roller enemy (SYZ)
0000E706                            ; ---------------------------------------------------------------------------
0000E706                            Map_obj43:
0000E706                            	include "_maps\obj43.asm"
0000E706                            ; ---------------------------------------------------------------------------
0000E706                            ; Sprite mappings - Roller enemy (SYZ)
0000E706                            ; ---------------------------------------------------------------------------
0000E706 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E70A 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E70E 0000                       		dc.w byte_E1CE-Map_obj43
0000E710 02                         byte_E1AC:	dc.b 2
0000E711 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E716 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E71B 02                         byte_E1B7:	dc.b 2
0000E71C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E721 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E726 01                         byte_E1C2:	dc.b 1
0000E727 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E72C 01                         byte_E1C8:	dc.b 1
0000E72D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E732 01                         byte_E1CE:	dc.b 1
0000E733 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E738                            		even
0000E738                            		even
0000E738                            
0000E738                            ; ===========================================================================
0000E738                            ; ---------------------------------------------------------------------------
0000E738                            ; Object 44 - walls (GHZ)
0000E738                            ; ---------------------------------------------------------------------------
0000E738                            
0000E738                            Obj44:					; XREF: Obj_Index
0000E738 7000                       		moveq	#0,d0
0000E73A 1028 0024                  		move.b	$24(a0),d0
0000E73E 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E742 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E746                            ; ===========================================================================
0000E746 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E748 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E74A 0000                       		dc.w Obj44_Display-Obj44_Index
0000E74C                            ; ===========================================================================
0000E74C                            
0000E74C                            Obj44_Main:				; XREF: Obj44_Index
0000E74C 5428 0024                  		addq.b	#2,$24(a0)
0000E750 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E758 317C 434C 0002             		move.w	#$434C,2(a0)
0000E75E 0028 0004 0001             		ori.b	#4,1(a0)
0000E764 117C 0008 0019             		move.b	#8,$19(a0)
0000E76A 117C 0006 0018             		move.b	#6,$18(a0)
0000E770 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E776 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E77C 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E77E 5428 0024                  		addq.b	#2,$24(a0)
0000E782 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E784                            ; ===========================================================================
0000E784                            
0000E784                            Obj44_Solid:				; XREF: Obj44_Index
0000E784 323C 0013                  		move.w	#$13,d1
0000E788 343C 0028                  		move.w	#$28,d2
0000E78C 6100 A71A                  		bsr.w	Obj44_SolidWall
0000E790                            
0000E790                            Obj44_Display:				; XREF: Obj44_Index
0000E790 6100 F3DA                  		bsr.w	DisplaySprite
0000E794 3028 0008                  		move.w	8(a0),d0
0000E798 0240 FF80                  		andi.w	#$FF80,d0
0000E79C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7A0 0441 0080                  		subi.w	#$80,d1
0000E7A4 0241 FF80                  		andi.w	#$FF80,d1
0000E7A8 9041                       		sub.w	d1,d0
0000E7AA 0C40 0280                  		cmpi.w	#$280,d0
0000E7AE 6200 F3F8                  		bhi.w	DeleteObject
0000E7B2 4E75                       		rts	
0000E7B4                            ; ===========================================================================
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4                            ; Sprite mappings - walls (GHZ)
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4                            Map_obj44:
0000E7B4                            	include "_maps\obj44.asm"
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4                            ; Sprite mappings - walls (GHZ)
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4 0000                       		dc.w byte_E256-Map_obj44
0000E7B6 0000                       		dc.w byte_E26B-Map_obj44
0000E7B8 0000                       		dc.w byte_E280-Map_obj44
0000E7BA 04                         byte_E256:	dc.b 4
0000E7BB E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E7C0 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7C5 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7CA 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7CF 04                         byte_E26B:	dc.b 4
0000E7D0 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E7D5 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7DA 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7DF 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7E4 04                         byte_E280:	dc.b 4
0000E7E5 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E7EA F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E7EF 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E7F4 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E7FA 00                         		even
0000E7FA 00                         		even
0000E7FA                            
0000E7FA                            ; ===========================================================================
0000E7FA                            ; ---------------------------------------------------------------------------
0000E7FA                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E7FA                            ; ---------------------------------------------------------------------------
0000E7FA                            
0000E7FA                            Obj13:					; XREF: Obj_Index
0000E7FA 7000                       		moveq	#0,d0
0000E7FC 1028 0024                  		move.b	$24(a0),d0
0000E800 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E804 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E808 6000 0000                  		bra.w	Obj14_ChkDel
0000E80C                            ; ===========================================================================
0000E80C 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E80E 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E810                            ; ---------------------------------------------------------------------------
0000E810                            ;
0000E810                            ; Lava ball production rates
0000E810                            ;
0000E810 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E816                            ; ===========================================================================
0000E816                            
0000E816                            Obj13_Main:				; XREF: Obj13_Index
0000E816 5428 0024                  		addq.b	#2,$24(a0)
0000E81A 1028 0028                  		move.b	$28(a0),d0
0000E81E E848                       		lsr.w	#4,d0
0000E820 0240 000F                  		andi.w	#$F,d0
0000E824 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E82A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E830 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E836                            
0000E836                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E836 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E83A 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E83C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E842 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E846 6600                       		bne.s	locret_E302
0000E848 6100 F7A8                  		bsr.w	SingleObjLoad
0000E84C 6600                       		bne.s	locret_E302
0000E84E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E852 3368 0008 0008             		move.w	8(a0),8(a1)
0000E858 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E85E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E864                            
0000E864                            locret_E302:
0000E864 4E75                       		rts	
0000E866                            ; ===========================================================================
0000E866                            ; ---------------------------------------------------------------------------
0000E866                            ; Object 14 - lava balls (MZ, SLZ)
0000E866                            ; ---------------------------------------------------------------------------
0000E866                            
0000E866                            Obj14:					; XREF: Obj_Index
0000E866 7000                       		moveq	#0,d0
0000E868 1028 0024                  		move.b	$24(a0),d0
0000E86C 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E870 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E874 6000 F2F6                  		bra.w	DisplaySprite
0000E878                            ; ===========================================================================
0000E878 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E87A 0000                       		dc.w Obj14_Action-Obj14_Index
0000E87C 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E87E                            
0000E87E FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E888 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E890                            ; ===========================================================================
0000E890                            
0000E890                            Obj14_Main:				; XREF: Obj14_Index
0000E890 5428 0024                  		addq.b	#2,$24(a0)
0000E894 117C 0008 0016             		move.b	#8,$16(a0)
0000E89A 117C 0008 0017             		move.b	#8,$17(a0)
0000E8A0 217C 0000 B830 0004        		move.l	#Map_obj14,4(a0)
0000E8A8 317C 0345 0002             		move.w	#$345,2(a0)
0000E8AE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E8B4 6600                       		bne.s	loc_E35A
0000E8B6 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E8BC                            
0000E8BC                            loc_E35A:
0000E8BC 117C 0004 0001             		move.b	#4,1(a0)
0000E8C2 117C 0003 0018             		move.b	#3,$18(a0)
0000E8C8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E8CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8D4 4A28 0029                  		tst.b	$29(a0)
0000E8D8 6700                       		beq.s	Obj14_SetSpeed
0000E8DA 5428 0018                  		addq.b	#2,$18(a0)
0000E8DE                            
0000E8DE                            Obj14_SetSpeed:
0000E8DE 7000                       		moveq	#0,d0
0000E8E0 1028 0028                  		move.b	$28(a0),d0
0000E8E4 D040                       		add.w	d0,d0
0000E8E6 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E8EC 117C 0008 0019             		move.b	#8,$19(a0)
0000E8F2 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E8F8 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E8FA 117C 0010 0019             		move.b	#$10,$19(a0)
0000E900 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E906 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E90C 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E912                            
0000E912                            Obj14_PlaySnd:
0000E912 303C 00AE                  		move.w	#$AE,d0
0000E916 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E91C                            
0000E91C                            Obj14_Action:				; XREF: Obj14_Index
0000E91C 7000                       		moveq	#0,d0
0000E91E 1028 0028                  		move.b	$28(a0),d0
0000E922 D040                       		add.w	d0,d0
0000E924 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E928 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E92C 6100 F218                  		bsr.w	SpeedToPos
0000E930 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E936 6100 C30A                  		bsr.w	AnimateSprite
0000E93A                            
0000E93A                            Obj14_ChkDel:				; XREF: Obj13
0000E93A 3028 0008                  		move.w	8(a0),d0
0000E93E 0240 FF80                  		andi.w	#$FF80,d0
0000E942 3238 F700                  		move.w	($FFFFF700).w,d1
0000E946 0441 0080                  		subi.w	#$80,d1
0000E94A 0241 FF80                  		andi.w	#$FF80,d1
0000E94E 9041                       		sub.w	d1,d0
0000E950 0C40 0280                  		cmpi.w	#$280,d0
0000E954 6200 F252                  		bhi.w	DeleteObject
0000E958 4E75                       		rts	
0000E95A                            ; ===========================================================================
0000E95A 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E95E 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E962 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E966 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E96A 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E96C                            ; ===========================================================================
0000E96C                            ; lavaball types 00-03 fly up and fall back down
0000E96C                            
0000E96C                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E96C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E972 3028 0030                  		move.w	$30(a0),d0
0000E976 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E97A 6400                       		bcc.s	loc_E41E	; if not, branch
0000E97C 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E980                            
0000E980                            loc_E41E:
0000E980 08A8 0001 0022             		bclr	#1,$22(a0)
0000E986 4A68 0012                  		tst.w	$12(a0)
0000E98A 6A00                       		bpl.s	locret_E430
0000E98C 08E8 0001 0022             		bset	#1,$22(a0)
0000E992                            
0000E992                            locret_E430:
0000E992 4E75                       		rts	
0000E994                            ; ===========================================================================
0000E994                            ; lavaball type	04 flies up until it hits the ceiling
0000E994                            
0000E994                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E994 08E8 0001 0022             		bset	#1,$22(a0)
0000E99A 6100 0000                  		bsr.w	ObjHitCeiling
0000E99E 4A41                       		tst.w	d1
0000E9A0 6A00                       		bpl.s	locret_E452
0000E9A2 117C 0008 0028             		move.b	#8,$28(a0)
0000E9A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9AE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E9B4                            
0000E9B4                            locret_E452:
0000E9B4 4E75                       		rts	
0000E9B6                            ; ===========================================================================
0000E9B6                            ; lavaball type	05 falls down until it hits the	floor
0000E9B6                            
0000E9B6                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E9B6 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9BC 6100 0000                  		bsr.w	ObjHitFloor
0000E9C0 4A41                       		tst.w	d1
0000E9C2 6A00                       		bpl.s	locret_E474
0000E9C4 117C 0008 0028             		move.b	#8,$28(a0)
0000E9CA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9D0 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E9D6                            
0000E9D6                            locret_E474:
0000E9D6 4E75                       		rts	
0000E9D8                            ; ===========================================================================
0000E9D8                            ; lavaball types 06-07 move sideways
0000E9D8                            
0000E9D8                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E9D8 08E8 0000 0022             		bset	#0,$22(a0)
0000E9DE 76F8                       		moveq	#-8,d3
0000E9E0 6100 0000                  		bsr.w	ObjHitWallLeft
0000E9E4 4A41                       		tst.w	d1
0000E9E6 6A00                       		bpl.s	locret_E498
0000E9E8 117C 0008 0028             		move.b	#8,$28(a0)
0000E9EE 117C 0003 001C             		move.b	#3,$1C(a0)
0000E9F4 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E9FA                            
0000E9FA                            locret_E498:
0000E9FA 4E75                       		rts	
0000E9FC                            ; ===========================================================================
0000E9FC                            
0000E9FC                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E9FC 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA02 7608                       		moveq	#8,d3
0000EA04 6100 0000                  		bsr.w	ObjHitWallRight
0000EA08 4A41                       		tst.w	d1
0000EA0A 6A00                       		bpl.s	locret_E4BC
0000EA0C 117C 0008 0028             		move.b	#8,$28(a0)
0000EA12 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA18 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA1E                            
0000EA1E                            locret_E4BC:
0000EA1E 4E75                       		rts	
0000EA20                            ; ===========================================================================
0000EA20                            
0000EA20                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA20 4E75                       		rts	
0000EA22                            ; ===========================================================================
0000EA22                            
0000EA22                            Obj14_Delete:				; XREF: Obj14_Index
0000EA22 6000 F184                  		bra.w	DeleteObject
0000EA26                            ; ===========================================================================
0000EA26                            Ani_obj14:
0000EA26                            	include "_anim\obj14.asm"
0000EA26                            ; ---------------------------------------------------------------------------
0000EA26                            ; Animation script - lava balls
0000EA26                            ; ---------------------------------------------------------------------------
0000EA26 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA28 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA2A 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA2C 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA2E 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA34 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA38 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA3E 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA42                            		even
0000EA42                            		even
0000EA42                            
0000EA42                            ; ===========================================================================
0000EA42                            ; ---------------------------------------------------------------------------
0000EA42                            ; Object 6D - flame thrower (SBZ)
0000EA42                            ; ---------------------------------------------------------------------------
0000EA42                            
0000EA42                            Obj6D:					; XREF: Obj_Index
0000EA42 7000                       		moveq	#0,d0
0000EA44 1028 0024                  		move.b	$24(a0),d0
0000EA48 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA4C 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA50                            ; ===========================================================================
0000EA50 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA52 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA54                            ; ===========================================================================
0000EA54                            
0000EA54                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA54 5428 0024                  		addq.b	#2,$24(a0)
0000EA58 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EA60 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EA66 0028 0004 0001             		ori.b	#4,1(a0)
0000EA6C 117C 0001 0018             		move.b	#1,$18(a0)
0000EA72 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA78 117C 000C 0019             		move.b	#$C,$19(a0)
0000EA7E 1028 0028                  		move.b	$28(a0),d0
0000EA82 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EA86 D040                       		add.w	d0,d0		; multiply by 2
0000EA88 3140 0030                  		move.w	d0,$30(a0)
0000EA8C 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EA90 1028 0028                  		move.b	$28(a0),d0
0000EA94 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EA98 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EA9A 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EA9E 117C 000A 0036             		move.b	#$A,$36(a0)
0000EAA4 0828 0001 0022             		btst	#1,$22(a0)
0000EAAA 6700                       		beq.s	Obj6D_Action
0000EAAC 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAB2 117C 0015 0036             		move.b	#$15,$36(a0)
0000EAB8                            
0000EAB8                            Obj6D_Action:				; XREF: Obj6D_Index
0000EAB8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EABC 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EABE 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EAC4 0868 0000 001C             		bchg	#0,$1C(a0)
0000EACA 6700                       		beq.s	loc_E57A
0000EACC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EAD2 303C 00B3                  		move.w	#$B3,d0
0000EAD6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EADC                            
0000EADC                            loc_E57A:
0000EADC 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EAE2 6100 C15E                  		bsr.w	AnimateSprite
0000EAE6 117C 0000 0020             		move.b	#0,$20(a0)
0000EAEC 1028 0036                  		move.b	$36(a0),d0
0000EAF0 B028 001A                  		cmp.b	$1A(a0),d0
0000EAF4 6600                       		bne.s	Obj6D_ChkDel
0000EAF6 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EAFC                            
0000EAFC                            Obj6D_ChkDel:
0000EAFC 3028 0008                  		move.w	8(a0),d0
0000EB00 0240 FF80                  		andi.w	#$FF80,d0
0000EB04 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB08 0441 0080                  		subi.w	#$80,d1
0000EB0C 0241 FF80                  		andi.w	#$FF80,d1
0000EB10 9041                       		sub.w	d1,d0
0000EB12 0C40 0280                  		cmpi.w	#$280,d0
0000EB16 6200 F090                  		bhi.w	DeleteObject
0000EB1A 6000 F050                  		bra.w	DisplaySprite
0000EB1E                            ; ===========================================================================
0000EB1E                            Ani_obj6D:
0000EB1E                            	include "_anim\obj6D.asm"
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            ; Animation script - flamethrower (SBZ)
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB20 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB22 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB24 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB26 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB34 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB3E 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB4C 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB56                            		even
0000EB56                            		even
0000EB56                            
0000EB56                            ; ---------------------------------------------------------------------------
0000EB56                            ; Sprite mappings - flame thrower (SBZ)
0000EB56                            ; ---------------------------------------------------------------------------
0000EB56                            Map_obj6D:
0000EB56                            	include "_maps\obj6D.asm"
0000EB56                            ; ---------------------------------------------------------------------------
0000EB56                            ; Sprite mappings - flame thrower (SBZ)
0000EB56                            ; ---------------------------------------------------------------------------
0000EB56 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EB5A 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EB5E 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EB62 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EB66 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EB6A 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EB6E 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EB72 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EB76 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EB7A 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EB7E 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EB82 01                         byte_E620:	dc.b 1
0000EB83 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB88 02                         byte_E626:	dc.b 2
0000EB89 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB8E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB93 02                         byte_E631:	dc.b 2
0000EB94 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB99 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB9E 03                         byte_E63C:	dc.b 3
0000EB9F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBA4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBA9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBAE 03                         byte_E64C:	dc.b 3
0000EBAF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBB4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBB9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBBE 04                         byte_E65C:	dc.b 4
0000EBBF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBC4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBC9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBCE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBD3 04                         byte_E671:	dc.b 4
0000EBD4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EBD9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBDE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBE3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBE8 05                         byte_E686:	dc.b 5
0000EBE9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EBEE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBF3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBF8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBFD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC02 05                         byte_E6A0:	dc.b 5
0000EC03 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC08 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC0D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC12 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC17 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC1C 06                         byte_E6BA:	dc.b 6
0000EC1D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC22 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC27 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC2C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC31 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC36 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC3B 06                         byte_E6D9:	dc.b 6
0000EC3C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC41 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC46 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC4B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC50 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC55 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC5A 01                         byte_E6F8:	dc.b 1
0000EC5B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC60 02                         byte_E6FE:	dc.b 2
0000EC61 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC66 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC6B 02                         byte_E709:	dc.b 2
0000EC6C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC71 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC76 03                         byte_E714:	dc.b 3
0000EC77 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC7C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC81 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC86 03                         byte_E724:	dc.b 3
0000EC87 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC8C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC91 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC96 04                         byte_E734:	dc.b 4
0000EC97 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC9C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECA1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECA6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECAB 04                         byte_E749:	dc.b 4
0000ECAC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECB1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECB6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECBB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECC0 05                         byte_E75E:	dc.b 5
0000ECC1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ECC6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECCB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECD0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECD5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECDA 05                         byte_E778:	dc.b 5
0000ECDB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECE0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECE5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECEA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECEF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECF4 06                         byte_E792:	dc.b 6
0000ECF5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ECFA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ECFF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED04 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED09 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED0E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED13 06                         byte_E7B1:	dc.b 6
0000ED14 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED19 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED1E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED23 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED28 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED2D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED32                            		even
0000ED32                            		even
0000ED32                            
0000ED32                            ; ===========================================================================
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            
0000ED32                            Obj46:					; XREF: Obj_Index
0000ED32 7000                       		moveq	#0,d0
0000ED34 1028 0024                  		move.b	$24(a0),d0
0000ED38 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED3C 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED40                            ; ===========================================================================
0000ED40 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED42 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED44                            ; ===========================================================================
0000ED44                            
0000ED44                            Obj46_Main:				; XREF: Obj46_Index
0000ED44 5428 0024                  		addq.b	#2,$24(a0)
0000ED48 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED4E 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED54 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000ED5C 317C 4000 0002             		move.w	#$4000,2(a0)
0000ED62 117C 0004 0001             		move.b	#4,1(a0)
0000ED68 117C 0003 0018             		move.b	#3,$18(a0)
0000ED6E 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED74 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED7A 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000ED80                            
0000ED80                            Obj46_Action:				; XREF: Obj46_Index
0000ED80 4A28 0001                  		tst.b	1(a0)
0000ED84 6A00                       		bpl.s	Obj46_ChkDel
0000ED86 7000                       		moveq	#0,d0
0000ED88 1028 0028                  		move.b	$28(a0),d0	; get object type
0000ED8C 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000ED90 D040                       		add.w	d0,d0
0000ED92 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000ED96 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000ED9A 323C 001B                  		move.w	#$1B,d1
0000ED9E 343C 0010                  		move.w	#$10,d2
0000EDA2 363C 0011                  		move.w	#$11,d3
0000EDA6 3828 0008                  		move.w	8(a0),d4
0000EDAA 6100 0000                  		bsr.w	SolidObject
0000EDAE                            
0000EDAE                            Obj46_ChkDel:
0000EDAE 6100 EDBC                  		bsr.w	DisplaySprite
0000EDB2 3028 0008                  		move.w	8(a0),d0
0000EDB6 0240 FF80                  		andi.w	#$FF80,d0
0000EDBA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDBE 0441 0080                  		subi.w	#$80,d1
0000EDC2 0241 FF80                  		andi.w	#$FF80,d1
0000EDC6 9041                       		sub.w	d1,d0
0000EDC8 0C40 0280                  		cmpi.w	#$280,d0
0000EDCC 6200 EDDA                  		bhi.w	DeleteObject
0000EDD0 4E75                       		rts	
0000EDD2                            ; ===========================================================================
0000EDD2 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EDD4 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EDD6 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EDD8 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EDDA 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EDDC                            ; ===========================================================================
0000EDDC                            
0000EDDC                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EDDC 4E75                       		rts	
0000EDDE                            ; ===========================================================================
0000EDDE                            
0000EDDE                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EDDE 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDE2 9068 0008                  		sub.w	8(a0),d0
0000EDE6 6400                       		bcc.s	loc_E888
0000EDE8 4440                       		neg.w	d0
0000EDEA                            
0000EDEA                            loc_E888:
0000EDEA 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EDEE 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EDF0 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EDF6                            
0000EDF6                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EDF6 7000                       		moveq	#0,d0
0000EDF8 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EDFC 0828 0003 0028             		btst	#3,$28(a0)
0000EE02 6700                       		beq.s	loc_E8A8
0000EE04 4440                       		neg.w	d0
0000EE06 0640 0010                  		addi.w	#$10,d0
0000EE0A                            
0000EE0A                            loc_E8A8:
0000EE0A 3228 0030                  		move.w	$30(a0),d1
0000EE0E 9240                       		sub.w	d0,d1
0000EE10 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE14 4E75                       		rts	
0000EE16                            ; ===========================================================================
0000EE16                            
0000EE16                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE16 6100 ED2E                  		bsr.w	SpeedToPos
0000EE1A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE20 6100 0000                  		bsr.w	ObjHitFloor
0000EE24 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE26 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE2A D368 000C                  		add.w	d1,$C(a0)
0000EE2E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE32 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE38 117C 0004 0028             		move.b	#4,$28(a0)
0000EE3E 3011                       		move.w	(a1),d0
0000EE40 0240 03FF                  		andi.w	#$3FF,d0
0000EE44 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE48 6400                       		bcc.s	locret_E8EE
0000EE4A 117C 0000 0028             		move.b	#0,$28(a0)
0000EE50                            
0000EE50                            locret_E8EE:
0000EE50 4E75                       		rts	
0000EE52                            ; ===========================================================================
0000EE52                            
0000EE52                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE52 7000                       		moveq	#0,d0
0000EE54 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EE58 E648                       		lsr.w	#3,d0
0000EE5A 3228 0030                  		move.w	$30(a0),d1
0000EE5E 9240                       		sub.w	d0,d1
0000EE60 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EE64 4E75                       		rts	
0000EE66                            ; ===========================================================================
0000EE66                            ; ---------------------------------------------------------------------------
0000EE66                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE66                            ; ---------------------------------------------------------------------------
0000EE66                            Map_obj46:
0000EE66                            	include "_maps\obj46.asm"
0000EE66                            ; ---------------------------------------------------------------------------
0000EE66                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE66                            ; ---------------------------------------------------------------------------
0000EE66 0000                       		dc.w byte_E906-Map_obj46
0000EE68 01                         byte_E906:	dc.b 1
0000EE69 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EE6E                            		even
0000EE6E                            		even
0000EE6E                            
0000EE6E                            ; ===========================================================================
0000EE6E                            ; ---------------------------------------------------------------------------
0000EE6E                            ; Object 12 - lamp (SYZ)
0000EE6E                            ; ---------------------------------------------------------------------------
0000EE6E                            
0000EE6E                            Obj12:					; XREF: Obj_Index
0000EE6E 7000                       		moveq	#0,d0
0000EE70 1028 0024                  		move.b	$24(a0),d0
0000EE74 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EE78 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EE7C                            ; ===========================================================================
0000EE7C 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EE7E 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EE80                            ; ===========================================================================
0000EE80                            
0000EE80                            Obj12_Main:				; XREF: Obj12_Index
0000EE80 5428 0024                  		addq.b	#2,$24(a0)
0000EE84 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EE8C 317C 0000 0002             		move.w	#0,2(a0)
0000EE92 117C 0004 0001             		move.b	#4,1(a0)
0000EE98 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE9E 117C 0006 0018             		move.b	#6,$18(a0)
0000EEA4                            
0000EEA4                            Obj12_Animate:				; XREF: Obj12_Index
0000EEA4 5328 001E                  		subq.b	#1,$1E(a0)
0000EEA8 6A00                       		bpl.s	Obj12_ChkDel
0000EEAA 117C 0007 001E             		move.b	#7,$1E(a0)
0000EEB0 5228 001A                  		addq.b	#1,$1A(a0)
0000EEB4 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EEBA 6500                       		bcs.s	Obj12_ChkDel
0000EEBC 117C 0000 001A             		move.b	#0,$1A(a0)
0000EEC2                            
0000EEC2                            Obj12_ChkDel:
0000EEC2 3028 0008                  		move.w	8(a0),d0
0000EEC6 0240 FF80                  		andi.w	#$FF80,d0
0000EECA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EECE 0441 0080                  		subi.w	#$80,d1
0000EED2 0241 FF80                  		andi.w	#$FF80,d1
0000EED6 9041                       		sub.w	d1,d0
0000EED8 0C40 0280                  		cmpi.w	#$280,d0
0000EEDC 6200 ECCA                  		bhi.w	DeleteObject
0000EEE0 6000 EC8A                  		bra.w	DisplaySprite
0000EEE4                            ; ===========================================================================
0000EEE4                            ; ---------------------------------------------------------------------------
0000EEE4                            ; Sprite mappings - lamp (SYZ)
0000EEE4                            ; ---------------------------------------------------------------------------
0000EEE4                            Map_obj12:
0000EEE4                            	include "_maps\obj12.asm"
0000EEE4                            ; ---------------------------------------------------------------------------
0000EEE4                            ; Sprite mappings - lamp (SYZ)
0000EEE4                            ; ---------------------------------------------------------------------------
0000EEE4 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EEE8 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EEEC 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EEF0 02                         byte_E98E:	dc.b 2
0000EEF1 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EEF6 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EEFB 02                         byte_E999:	dc.b 2
0000EEFC F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF01 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF06 02                         byte_E9A4:	dc.b 2
0000EF07 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF0C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF11 02                         byte_E9AF:	dc.b 2
0000EF12 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF17 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF1C 02                         byte_E9BA:	dc.b 2
0000EF1D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF22 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF27 02                         byte_E9C5:	dc.b 2
0000EF28 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF2D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF32                            		even
0000EF32                            		even
0000EF32                            
0000EF32                            ; ===========================================================================
0000EF32                            ; ---------------------------------------------------------------------------
0000EF32                            ; Object 47 - pinball bumper (SYZ)
0000EF32                            ; ---------------------------------------------------------------------------
0000EF32                            
0000EF32                            Obj47:					; XREF: Obj_Index
0000EF32 7000                       		moveq	#0,d0
0000EF34 1028 0024                  		move.b	$24(a0),d0
0000EF38 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF3C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF40                            ; ===========================================================================
0000EF40 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF42 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF44                            ; ===========================================================================
0000EF44                            
0000EF44                            Obj47_Main:				; XREF: Obj47_Index
0000EF44 5428 0024                  		addq.b	#2,$24(a0)
0000EF48 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF50 317C 0380 0002             		move.w	#$380,2(a0)
0000EF56 117C 0004 0001             		move.b	#4,1(a0)
0000EF5C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF62 117C 0001 0018             		move.b	#1,$18(a0)
0000EF68 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EF6E                            
0000EF6E                            Obj47_Hit:				; XREF: Obj47_Index
0000EF6E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EF72 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EF76 4228 0021                  		clr.b	$21(a0)
0000EF7A 43F8 D000                  		lea	($FFFFD000).w,a1
0000EF7E 3228 0008                  		move.w	8(a0),d1
0000EF82 3428 000C                  		move.w	$C(a0),d2
0000EF86 9269 0008                  		sub.w	8(a1),d1
0000EF8A 9469 000C                  		sub.w	$C(a1),d2
0000EF8E 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EF94 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EF9A C3FC F900                  		muls.w	#-$700,d1
0000EF9E E081                       		asr.l	#8,d1
0000EFA0 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EFA4 C1FC F900                  		muls.w	#-$700,d0
0000EFA8 E080                       		asr.l	#8,d0
0000EFAA 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EFAE 08E9 0001 0022             		bset	#1,$22(a1)
0000EFB4 08A9 0004 0022             		bclr	#4,$22(a1)
0000EFBA 08A9 0005 0022             		bclr	#5,$22(a1)
0000EFC0 4229 003C                  		clr.b	$3C(a1)
0000EFC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EFCA 303C 00B4                  		move.w	#$B4,d0
0000EFCE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EFD4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EFD8 7000                       		moveq	#0,d0
0000EFDA 1028 0023                  		move.b	$23(a0),d0
0000EFDE 6700                       		beq.s	Obj47_Score
0000EFE0 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EFE6 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EFE8 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EFEC                            
0000EFEC                            Obj47_Score:
0000EFEC 7001                       		moveq	#1,d0
0000EFEE 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EFF4 6100 EFFC                  		bsr.w	SingleObjLoad
0000EFF8 6600                       		bne.s	Obj47_Display
0000EFFA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EFFE 3368 0008 0008             		move.w	8(a0),8(a1)
0000F004 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F00A 137C 0004 001A             		move.b	#4,$1A(a1)
0000F010                            
0000F010                            Obj47_Display:
0000F010 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F016 6100 BC2A                  		bsr.w	AnimateSprite
0000F01A 3028 0008                  		move.w	8(a0),d0
0000F01E 0240 FF80                  		andi.w	#$FF80,d0
0000F022 3238 F700                  		move.w	($FFFFF700).w,d1
0000F026 0441 0080                  		subi.w	#$80,d1
0000F02A 0241 FF80                  		andi.w	#$FF80,d1
0000F02E 9041                       		sub.w	d1,d0
0000F030 0C40 0280                  		cmpi.w	#$280,d0
0000F034 6200                       		bhi.s	Obj47_ChkHit
0000F036 6000 EB34                  		bra.w	DisplaySprite
0000F03A                            ; ===========================================================================
0000F03A                            
0000F03A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F03A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F03E 7000                       		moveq	#0,d0
0000F040 1028 0023                  		move.b	$23(a0),d0
0000F044 6700                       		beq.s	Obj47_Delete
0000F046 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F04C                            
0000F04C                            Obj47_Delete:
0000F04C 6000 EB5A                  		bra.w	DeleteObject
0000F050                            ; ===========================================================================
0000F050                            Ani_obj47:
0000F050                            	include "_anim\obj47.asm"
0000F050                            ; ---------------------------------------------------------------------------
0000F050                            ; Animation script - flamethrower (SBZ)
0000F050                            ; ---------------------------------------------------------------------------
0000F050 0000                       		dc.w byte_EAF4-Ani_obj47
0000F052 0000                       		dc.w byte_EAF8-Ani_obj47
0000F054 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F058 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F060                            		even
0000F060                            		even
0000F060                            
0000F060                            ; ---------------------------------------------------------------------------
0000F060                            ; Sprite mappings - pinball bumper (SYZ)
0000F060                            ; ---------------------------------------------------------------------------
0000F060                            Map_obj47:
0000F060                            	include "_maps\obj47.asm"
0000F060                            ; ---------------------------------------------------------------------------
0000F060                            ; Sprite mappings - pinball bumper (SYZ)
0000F060                            ; ---------------------------------------------------------------------------
0000F060 0000                       		dc.w byte_EB06-Map_obj47
0000F062 0000                       		dc.w byte_EB11-Map_obj47
0000F064 0000                       		dc.w byte_EB1C-Map_obj47
0000F066 02                         byte_EB06:	dc.b 2
0000F067 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F06C F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F071 02                         byte_EB11:	dc.b 2
0000F072 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F077 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F07C 02                         byte_EB1C:	dc.b 2
0000F07D F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F082 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F088 00                         		even
0000F088 00                         		even
0000F088                            
0000F088                            ; ===========================================================================
0000F088                            ; ---------------------------------------------------------------------------
0000F088                            ; Object 0D - signpost at the end of a level
0000F088                            ; ---------------------------------------------------------------------------
0000F088                            
0000F088                            Obj0D:					; XREF: Obj_Index
0000F088 7000                       		moveq	#0,d0
0000F08A 1028 0024                  		move.b	$24(a0),d0
0000F08E 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F092 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F096 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F09C 6100 BBA4                  		bsr.w	AnimateSprite
0000F0A0 6100 EACA                  		bsr.w	DisplaySprite
0000F0A4 3028 0008                  		move.w	8(a0),d0
0000F0A8 0240 FF80                  		andi.w	#$FF80,d0
0000F0AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0B0 0441 0080                  		subi.w	#$80,d1
0000F0B4 0241 FF80                  		andi.w	#$FF80,d1
0000F0B8 9041                       		sub.w	d1,d0
0000F0BA 0C40 0280                  		cmpi.w	#$280,d0
0000F0BE 6200 EAE8                  		bhi.w	DeleteObject
0000F0C2 4E75                       		rts	
0000F0C4                            ; ===========================================================================
0000F0C4 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F0C6 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F0C8 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F0CA 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F0CC 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F0CE                            ; ===========================================================================
0000F0CE                            
0000F0CE                            Obj0D_Main:				; XREF: Obj0D_Index
0000F0CE 5428 0024                  		addq.b	#2,$24(a0)
0000F0D2 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F0DA 317C 0680 0002             		move.w	#$680,2(a0)
0000F0E0 117C 0004 0001             		move.b	#4,1(a0)
0000F0E6 117C 0018 0019             		move.b	#$18,$19(a0)
0000F0EC 117C 0004 0018             		move.b	#4,$18(a0)
0000F0F2                            
0000F0F2                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F0F2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0F6 9068 0008                  		sub.w	8(a0),d0
0000F0FA 6500                       		bcs.s	locret_EBBA
0000F0FC 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F100 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F102 303C 00CF                  		move.w	#$CF,d0
0000F106 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F10C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F110 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F116 5428 0024                  		addq.b	#2,$24(a0)
0000F11A                            
0000F11A                            locret_EBBA:
0000F11A 4E75                       		rts	
0000F11C                            ; ===========================================================================
0000F11C                            
0000F11C                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F11C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F120 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F122 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F128 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F12C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F132 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F134 5428 0024                  		addq.b	#2,$24(a0)
0000F138                            
0000F138                            Obj0D_Sparkle:
0000F138 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F13C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F13E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F144 7000                       		moveq	#0,d0
0000F146 1028 0034                  		move.b	$34(a0),d0
0000F14A 5428 0034                  		addq.b	#2,$34(a0)
0000F14E 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F154 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F158 6100 EE98                  		bsr.w	SingleObjLoad
0000F15C 6600                       		bne.s	locret_EC42
0000F15E 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F162 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F168 101A                       		move.b	(a2)+,d0
0000F16A 4880                       		ext.w	d0
0000F16C D068 0008                  		add.w	8(a0),d0
0000F170 3340 0008                  		move.w	d0,8(a1)
0000F174 101A                       		move.b	(a2)+,d0
0000F176 4880                       		ext.w	d0
0000F178 D068 000C                  		add.w	$C(a0),d0
0000F17C 3340 000C                  		move.w	d0,$C(a1)
0000F180 237C 0000 A3E0 0004        		move.l	#Map_obj25,4(a1)
0000F188 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F18E 137C 0004 0001             		move.b	#4,1(a1)
0000F194 137C 0002 0018             		move.b	#2,$18(a1)
0000F19A 137C 0008 0019             		move.b	#8,$19(a1)
0000F1A0                            
0000F1A0                            locret_EC42:
0000F1A0 4E75                       		rts	
0000F1A2                            ; ===========================================================================
0000F1A2 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F1A4 0808                       		dc.b	8,   8
0000F1A6 F000                       		dc.b -$10,   0
0000F1A8 18F8                       		dc.b  $18,  -8
0000F1AA 00F8                       		dc.b	0,  -8
0000F1AC 1000                       		dc.b  $10,   0
0000F1AE E808                       		dc.b -$18,   8
0000F1B0 1810                       		dc.b  $18, $10
0000F1B2                            ; ===========================================================================
0000F1B2                            
0000F1B2                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F1B2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F1B6 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F1BA 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F1C0 6600                       		bne.s	loc_EC70
0000F1C2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F1C8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F1CE 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F1D0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F1D6 6000                       		bra.s	loc_EC70
0000F1D8                            
0000F1D8                            Obj0D_MoveLeft:
0000F1D8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F1DE                            
0000F1DE                            loc_EC70:
0000F1DE 4A38 D000                  		tst.b	($FFFFD000).w
0000F1E2 6700                       		beq.s	loc_EC86
0000F1E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1E8 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F1EC 0641 0128                  		addi.w	#$128,d1
0000F1F0 B041                       		cmp.w	d1,d0
0000F1F2 6500                       		bcs.s	locret_ECEE
0000F1F4                            
0000F1F4                            loc_EC86:
0000F1F4 5428 0024                  		addq.b	#2,$24(a0)
0000F1F8                            
0000F1F8                            ; ---------------------------------------------------------------------------
0000F1F8                            ; Subroutine to	set up bonuses at the end of an	act
0000F1F8                            ; ---------------------------------------------------------------------------
0000F1F8                            
0000F1F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1F8                            
0000F1F8                            
0000F1F8                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F1F8 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F1FC 6600                       		bne.s	locret_ECEE
0000F1FE 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F204 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F208 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F20C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F212 7010                       		moveq	#$10,d0
0000F214 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F21A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F220 7000                       		moveq	#0,d0
0000F222 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F226 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F22A 7200                       		moveq	#0,d1
0000F22C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F230 D041                       		add.w	d1,d0		; add up your time
0000F232 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F236 7214                       		moveq	#$14,d1
0000F238 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F23A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F23C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F23E                            
0000F23E                            loc_ECD0:
0000F23E D040                       		add.w	d0,d0
0000F240 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F246 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F24A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F24E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F252 303C 008E                  		move.w	#$8E,d0
0000F256 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F25C                            
0000F25C                            locret_ECEE:
0000F25C 4E75                       		rts	
0000F25E                            ; End of function GotThroughAct
0000F25E                            
0000F25E                            ; ===========================================================================
0000F25E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F272 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F288                            ; ===========================================================================
0000F288                            
0000F288                            locret_ED1A:				; XREF: Obj0D_Index
0000F288 4E75                       		rts	
0000F28A                            ; ===========================================================================
0000F28A                            Ani_obj0D:
0000F28A                            	include "_anim\obj0D.asm"
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            ; Animation script - signpost
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A 0000                       		dc.w byte_ED24-Ani_obj0D
0000F28C 0000                       		dc.w byte_ED28-Ani_obj0D
0000F28E 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F290 0000                       		dc.w byte_ED34-Ani_obj0D
0000F292 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F296 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F29C 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F2A2 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F2A6 00                         		even
0000F2A6 00                         		even
0000F2A6                            
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6                            ; Sprite mappings - signpost
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6                            Map_obj0D:
0000F2A6                            	include "_maps\obj0D.asm"
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6                            ; Sprite mappings - signpost
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F2AA 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F2AE 0000                       		dc.w byte_ED73-Map_obj0D
0000F2B0 03                         byte_ED42:	dc.b 3
0000F2B1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F2B6 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F2BB 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2C0 02                         byte_ED52:	dc.b 2
0000F2C1 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F2C6 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2CB 02                         byte_ED5D:	dc.b 2
0000F2CC F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F2D1 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2D6 02                         byte_ED68:	dc.b 2
0000F2D7 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F2DC 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2E1 03                         byte_ED73:	dc.b 3
0000F2E2 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F2E7 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F2EC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2F2 00                         		even
0000F2F2 00                         		even
0000F2F2                            
0000F2F2                            ; ===========================================================================
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            
0000F2F2                            Obj4C:					; XREF: Obj_Index
0000F2F2 7000                       		moveq	#0,d0
0000F2F4 1028 0024                  		move.b	$24(a0),d0
0000F2F8 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F2FC 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F300 6000 0000                  		bra.w	Obj4D_ChkDel
0000F304                            ; ===========================================================================
0000F304 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F306 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F308 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F30A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F30C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F30E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F310                            ; ===========================================================================
0000F310                            
0000F310                            Obj4C_Main:				; XREF: Obj4C_Index
0000F310 5428 0024                  		addq.b	#2,$24(a0)
0000F314 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F31C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F322 117C 0004 0001             		move.b	#4,1(a0)
0000F328 117C 0001 0018             		move.b	#1,$18(a0)
0000F32E 117C 0038 0019             		move.b	#$38,$19(a0)
0000F334 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F33A                            
0000F33A                            loc_EDCC:				; XREF: Obj4C_Index
0000F33A 5368 0032                  		subq.w	#1,$32(a0)
0000F33E 6A00                       		bpl.s	locret_EDF0
0000F340 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F346 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F34A 3228 000C                  		move.w	$C(a0),d1
0000F34E B041                       		cmp.w	d1,d0
0000F350 6400                       		bcc.s	locret_EDF0
0000F352 0441 0170                  		subi.w	#$170,d1
0000F356 B041                       		cmp.w	d1,d0
0000F358 6500                       		bcs.s	locret_EDF0
0000F35A 5428 0024                  		addq.b	#2,$24(a0)
0000F35E                            
0000F35E                            locret_EDF0:
0000F35E 4E75                       		rts	
0000F360                            ; ===========================================================================
0000F360                            
0000F360                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F360 5428 0024                  		addq.b	#2,$24(a0)
0000F364 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F368 6600                       		bne.s	loc_EE18
0000F36A 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F36E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F374 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F37A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F380 2348 003C                  		move.l	a0,$3C(a1)
0000F384                            
0000F384                            loc_EE18:
0000F384 117C 0001 001C             		move.b	#1,$1C(a0)
0000F38A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F38E 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F390 117C 0004 001C             		move.b	#4,$1C(a0)
0000F396 6000                       		bra.s	Obj4C_Display
0000F398                            ; ===========================================================================
0000F398                            
0000F398                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F398 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F39C 08E9 0001 0022             		bset	#1,$22(a1)
0000F3A2 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F3A8 6000                       		bra.s	Obj4C_Display
0000F3AA                            ; ===========================================================================
0000F3AA                            
0000F3AA                            loc_EE3E:				; XREF: Obj4C_Index
0000F3AA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3AE 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F3B0 5428 0024                  		addq.b	#2,$24(a0)
0000F3B4 4E75                       		rts	
0000F3B6                            ; ===========================================================================
0000F3B6                            
0000F3B6                            Obj4C_Display:				; XREF: Obj4C_Index
0000F3B6 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F3BC 6100 B884                  		bsr.w	AnimateSprite
0000F3C0 6100 E7AA                  		bsr.w	DisplaySprite
0000F3C4 4E75                       		rts	
0000F3C6                            ; ===========================================================================
0000F3C6                            
0000F3C6                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F3C6 117C 0000 001C             		move.b	#0,$1C(a0)
0000F3CC 117C 0002 0024             		move.b	#2,$24(a0)
0000F3D2 4A28 0028                  		tst.b	$28(a0)
0000F3D6 6700 E7D0                  		beq.w	DeleteObject
0000F3DA 4E75                       		rts	
0000F3DC                            ; ===========================================================================
0000F3DC                            ; ---------------------------------------------------------------------------
0000F3DC                            ; Object 4D - lava geyser / lavafall (MZ)
0000F3DC                            ; ---------------------------------------------------------------------------
0000F3DC                            
0000F3DC                            Obj4D:					; XREF: Obj_Index
0000F3DC 7000                       		moveq	#0,d0
0000F3DE 1028 0024                  		move.b	$24(a0),d0
0000F3E2 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F3E6 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F3EA 6000 E780                  		bra.w	DisplaySprite
0000F3EE                            ; ===========================================================================
0000F3EE 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F3F0 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F3F2 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F3F4 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F3F6                            
0000F3F6 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F3FA                            ; ===========================================================================
0000F3FA                            
0000F3FA                            Obj4D_Main:				; XREF: Obj4D_Index
0000F3FA 5428 0024                  		addq.b	#2,$24(a0)
0000F3FE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F404 4A28 0028                  		tst.b	$28(a0)
0000F408 6700                       		beq.s	loc_EEA4
0000F40A 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F410                            
0000F410                            loc_EEA4:
0000F410 7000                       		moveq	#0,d0
0000F412 1028 0028                  		move.b	$28(a0),d0
0000F416 D040                       		add.w	d0,d0
0000F418 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F41E 2248                       		movea.l	a0,a1
0000F420 7201                       		moveq	#1,d1
0000F422 6100                       		bsr.s	Obj4D_MakeLava
0000F424 6000                       		bra.s	loc_EF10
0000F426                            ; ===========================================================================
0000F426                            
0000F426                            Obj4D_Loop:
0000F426 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F42A 6600                       		bne.s	loc_EF0A
0000F42C                            
0000F42C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F42C 12BC 004D                  		move.b	#$4D,0(a1)
0000F430 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F438 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F43E 137C 0004 0001             		move.b	#4,1(a1)
0000F444 137C 0020 0019             		move.b	#$20,$19(a1)
0000F44A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F450 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F456 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F45C 137C 0001 0018             		move.b	#1,$18(a1)
0000F462 137C 0005 001C             		move.b	#5,$1C(a1)
0000F468 4A28 0028                  		tst.b	$28(a0)
0000F46C 6700                       		beq.s	loc_EF0A
0000F46E 137C 0002 001C             		move.b	#2,$1C(a1)
0000F474                            
0000F474                            loc_EF0A:
0000F474 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F478 4E75                       		rts	
0000F47A                            ; ===========================================================================
0000F47A                            
0000F47A                            loc_EF10:				; XREF: Obj4D_Main
0000F47A 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F480 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F486 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F48C 137C 0093 0020             		move.b	#$93,$20(a1)
0000F492 137C 0080 0016             		move.b	#$80,$16(a1)
0000F498 08E9 0004 0001             		bset	#4,1(a1)
0000F49E 5829 0024                  		addq.b	#4,$24(a1)
0000F4A2 2348 003C                  		move.l	a0,$3C(a1)
0000F4A6 4A28 0028                  		tst.b	$28(a0)
0000F4AA 6700                       		beq.s	Obj4D_PlaySnd
0000F4AC 7200                       		moveq	#0,d1
0000F4AE 6100 FF76                  		bsr.w	Obj4D_Loop
0000F4B2 5429 0024                  		addq.b	#2,$24(a1)
0000F4B6 08E9 0004 0002             		bset	#4,2(a1)
0000F4BC 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F4C2 137C 0000 0018             		move.b	#0,$18(a1)
0000F4C8 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4CE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F4D4 117C 0000 0028             		move.b	#0,$28(a0)
0000F4DA                            
0000F4DA                            Obj4D_PlaySnd:
0000F4DA 303C 00C8                  		move.w	#$C8,d0
0000F4DE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F4E4                            
0000F4E4                            Obj4D_Action:				; XREF: Obj4D_Index
0000F4E4 7000                       		moveq	#0,d0
0000F4E6 1028 0028                  		move.b	$28(a0),d0
0000F4EA D040                       		add.w	d0,d0
0000F4EC 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F4F0 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F4F4 6100 E650                  		bsr.w	SpeedToPos
0000F4F8 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F4FE 6100 B742                  		bsr.w	AnimateSprite
0000F502                            
0000F502                            Obj4D_ChkDel:				; XREF: Obj4C
0000F502 3028 0008                  		move.w	8(a0),d0
0000F506 0240 FF80                  		andi.w	#$FF80,d0
0000F50A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F50E 0441 0080                  		subi.w	#$80,d1
0000F512 0241 FF80                  		andi.w	#$FF80,d1
0000F516 9041                       		sub.w	d1,d0
0000F518 0C40 0280                  		cmpi.w	#$280,d0
0000F51C 6200 E68A                  		bhi.w	DeleteObject
0000F520 4E75                       		rts	
0000F522                            ; ===========================================================================
0000F522 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F524 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F526                            ; ===========================================================================
0000F526                            
0000F526                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F526 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F52C 3028 0030                  		move.w	$30(a0),d0
0000F530 B068 000C                  		cmp.w	$C(a0),d0
0000F534 6400                       		bcc.s	locret_EFDA
0000F536 5828 0024                  		addq.b	#4,$24(a0)
0000F53A 2268 003C                  		movea.l	$3C(a0),a1
0000F53E 137C 0003 001C             		move.b	#3,$1C(a1)
0000F544                            
0000F544                            locret_EFDA:
0000F544 4E75                       		rts	
0000F546                            ; ===========================================================================
0000F546                            
0000F546                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F546 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F54C 3028 0030                  		move.w	$30(a0),d0
0000F550 B068 000C                  		cmp.w	$C(a0),d0
0000F554 6400                       		bcc.s	locret_EFFA
0000F556 5828 0024                  		addq.b	#4,$24(a0)
0000F55A 2268 003C                  		movea.l	$3C(a0),a1
0000F55E 137C 0001 001C             		move.b	#1,$1C(a1)
0000F564                            
0000F564                            locret_EFFA:
0000F564 4E75                       		rts	
0000F566                            ; ===========================================================================
0000F566                            
0000F566                            loc_EFFC:				; XREF: Obj4D_Index
0000F566 2268 003C                  		movea.l	$3C(a0),a1
0000F56A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F570 6700 0000                  		beq.w	Obj4D_Delete
0000F574 3029 000C                  		move.w	$C(a1),d0
0000F578 0640 0060                  		addi.w	#$60,d0
0000F57C 3140 000C                  		move.w	d0,$C(a0)
0000F580 9068 0030                  		sub.w	$30(a0),d0
0000F584 4440                       		neg.w	d0
0000F586 7208                       		moveq	#8,d1
0000F588 0C40 0040                  		cmpi.w	#$40,d0
0000F58C 6C00                       		bge.s	loc_F026
0000F58E 720B                       		moveq	#$B,d1
0000F590                            
0000F590                            loc_F026:
0000F590 0C40 0080                  		cmpi.w	#$80,d0
0000F594 6F00                       		ble.s	loc_F02E
0000F596 720E                       		moveq	#$E,d1
0000F598                            
0000F598                            loc_F02E:
0000F598 5328 001E                  		subq.b	#1,$1E(a0)
0000F59C 6A00                       		bpl.s	loc_F04C
0000F59E 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5A4 5228 001B                  		addq.b	#1,$1B(a0)
0000F5A8 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F5AE 6500                       		bcs.s	loc_F04C
0000F5B0 117C 0000 001B             		move.b	#0,$1B(a0)
0000F5B6                            
0000F5B6                            loc_F04C:
0000F5B6 1028 001B                  		move.b	$1B(a0),d0
0000F5BA D001                       		add.b	d1,d0
0000F5BC 1140 001A                  		move.b	d0,$1A(a0)
0000F5C0 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F5C4                            ; ===========================================================================
0000F5C4                            
0000F5C4                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F5C4 6000 E5E2                  		bra.w	DeleteObject
0000F5C8                            ; ===========================================================================
0000F5C8                            ; ---------------------------------------------------------------------------
0000F5C8                            ; Object 4E - advancing	wall of	lava (MZ)
0000F5C8                            ; ---------------------------------------------------------------------------
0000F5C8                            
0000F5C8                            Obj4E:					; XREF: Obj_Index
0000F5C8 7000                       		moveq	#0,d0
0000F5CA 1028 0024                  		move.b	$24(a0),d0
0000F5CE 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F5D2 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F5D6                            ; ===========================================================================
0000F5D6 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F5D8 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F5DA 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F5DC 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F5DE 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F5E0                            ; ===========================================================================
0000F5E0                            
0000F5E0                            Obj4E_Main:				; XREF: Obj4E_Index
0000F5E0 5828 0024                  		addq.b	#4,$24(a0)
0000F5E4 2248                       		movea.l	a0,a1
0000F5E6 7201                       		moveq	#1,d1
0000F5E8 6000                       		bra.s	Obj4E_Main2
0000F5EA                            ; ===========================================================================
0000F5EA                            
0000F5EA                            Obj4E_Loop:
0000F5EA 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F5EE 6600                       		bne.s	loc_F0C8
0000F5F0                            
0000F5F0                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F5F0 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F5F4 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F5FC 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F602 137C 0004 0001             		move.b	#4,1(a1)
0000F608 137C 0050 0019             		move.b	#$50,$19(a1)
0000F60E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F614 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F61A 137C 0001 0018             		move.b	#1,$18(a1)
0000F620 137C 0000 001C             		move.b	#0,$1C(a1)
0000F626 137C 0094 0020             		move.b	#$94,$20(a1)
0000F62C 2348 003C                  		move.l	a0,$3C(a1)
0000F630                            
0000F630                            loc_F0C8:
0000F630 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F634                            
0000F634 5C29 0024                  		addq.b	#6,$24(a1)
0000F638 137C 0004 001A             		move.b	#4,$1A(a1)
0000F63E                            
0000F63E                            Obj4E_Action:				; XREF: Obj4E_Index
0000F63E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F642 9068 0008                  		sub.w	8(a0),d0
0000F646 6400                       		bcc.s	Obj4E_ChkSonic
0000F648 4440                       		neg.w	d0
0000F64A                            
0000F64A                            Obj4E_ChkSonic:
0000F64A 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F64E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F650 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F654 9068 000C                  		sub.w	$C(a0),d0
0000F658 6400                       		bcc.s	loc_F0F4
0000F65A 4440                       		neg.w	d0
0000F65C                            
0000F65C                            loc_F0F4:
0000F65C 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F660 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F662 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F668 6000                       		bra.s	Obj4E_Solid
0000F66A                            ; ===========================================================================
0000F66A                            
0000F66A                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F66A 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F66E 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F670 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F676 5528 0024                  		subq.b	#2,$24(a0)
0000F67A                            
0000F67A                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F67A 323C 002B                  		move.w	#$2B,d1
0000F67E 343C 0018                  		move.w	#$18,d2
0000F682 3602                       		move.w	d2,d3
0000F684 5243                       		addq.w	#1,d3
0000F686 3828 0008                  		move.w	8(a0),d4
0000F68A 1028 0024                  		move.b	$24(a0),d0
0000F68E 3F00                       		move.w	d0,-(sp)
0000F690 6100 0000                  		bsr.w	SolidObject
0000F694 301F                       		move.w	(sp)+,d0
0000F696 1140 0024                  		move.b	d0,$24(a0)
0000F69A 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F6A0 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F6A2 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F6A6 4228 0036                  		clr.b	$36(a0)
0000F6AA                            
0000F6AA                            Obj4E_Animate:
0000F6AA 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F6B0 6100 B590                  		bsr.w	AnimateSprite
0000F6B4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F6BA 6400                       		bcc.s	Obj4E_ChkDel
0000F6BC 6100 E488                  		bsr.w	SpeedToPos
0000F6C0                            
0000F6C0                            Obj4E_ChkDel:
0000F6C0 6100 E4AA                  		bsr.w	DisplaySprite
0000F6C4 4A28 0036                  		tst.b	$36(a0)
0000F6C8 6600                       		bne.s	locret_F17E
0000F6CA 3028 0008                  		move.w	8(a0),d0
0000F6CE 0240 FF80                  		andi.w	#$FF80,d0
0000F6D2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6D6 0441 0080                  		subi.w	#$80,d1
0000F6DA 0241 FF80                  		andi.w	#$FF80,d1
0000F6DE 9041                       		sub.w	d1,d0
0000F6E0 0C40 0280                  		cmpi.w	#$280,d0
0000F6E4 6200                       		bhi.s	Obj4E_ChkGone
0000F6E6                            
0000F6E6                            locret_F17E:
0000F6E6 4E75                       		rts	
0000F6E8                            ; ===========================================================================
0000F6E8                            
0000F6E8                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F6E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F6EC 7000                       		moveq	#0,d0
0000F6EE 1028 0023                  		move.b	$23(a0),d0
0000F6F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F6F8 117C 0008 0024             		move.b	#8,$24(a0)
0000F6FE 4E75                       		rts	
0000F700                            ; ===========================================================================
0000F700                            
0000F700                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F700 2268 003C                  		movea.l	$3C(a0),a1
0000F704 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F70A 6700                       		beq.s	Obj4E_Delete
0000F70C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F712 0468 0080 0008             		subi.w	#$80,8(a0)
0000F718 6000 E452                  		bra.w	DisplaySprite
0000F71C                            ; ===========================================================================
0000F71C                            
0000F71C                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F71C 6000 E48A                  		bra.w	DeleteObject
0000F720                            ; ===========================================================================
0000F720                            ; ---------------------------------------------------------------------------
0000F720                            ; Object 54 - invisible	lava tag (MZ)
0000F720                            ; ---------------------------------------------------------------------------
0000F720                            
0000F720                            Obj54:					; XREF: Obj_Index
0000F720 7000                       		moveq	#0,d0
0000F722 1028 0024                  		move.b	$24(a0),d0
0000F726 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F72A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F72E                            ; ===========================================================================
0000F72E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F730 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F732                            
0000F732 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F736                            ; ===========================================================================
0000F736                            
0000F736                            Obj54_Main:				; XREF: Obj54_Index
0000F736 5428 0024                  		addq.b	#2,$24(a0)
0000F73A 7000                       		moveq	#0,d0
0000F73C 1028 0028                  		move.b	$28(a0),d0
0000F740 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F746 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F74E 117C 0084 0001             		move.b	#$84,1(a0)
0000F754                            
0000F754                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F754 3028 0008                  		move.w	8(a0),d0
0000F758 0240 FF80                  		andi.w	#$FF80,d0
0000F75C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F760 0441 0080                  		subi.w	#$80,d1
0000F764 0241 FF80                  		andi.w	#$FF80,d1
0000F768 9041                       		sub.w	d1,d0
0000F76A 6B00 E43C                  		bmi.w	DeleteObject
0000F76E 0C40 0280                  		cmpi.w	#$280,d0
0000F772 6200 E434                  		bhi.w	DeleteObject
0000F776 4E75                       		rts	
0000F778                            ; ===========================================================================
0000F778                            ; ---------------------------------------------------------------------------
0000F778                            ; Sprite mappings - invisible lava tag (MZ)
0000F778                            ; ---------------------------------------------------------------------------
0000F778                            Map_obj54:
0000F778                            	include "_maps\obj54.asm"
0000F778                            ; ---------------------------------------------------------------------------
0000F778                            ; Sprite mappings - invisible lava tag (MZ)
0000F778                            ; ---------------------------------------------------------------------------
0000F778 0000                       		dc.w byte_F212-Map_obj54
0000F77A 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F77C 00                         		even
0000F77C 00                         		even
0000F77C                            
0000F77C                            Ani_obj4C:
0000F77C                            	include "_anim\obj4C.asm"
0000F77C                            ; ---------------------------------------------------------------------------
0000F77C                            ; Animation script - geyser of lava (MZ)
0000F77C                            ; ---------------------------------------------------------------------------
0000F77C 0000                       		dc.w byte_F220-Ani_obj4C
0000F77E 0000                       		dc.w byte_F22A-Ani_obj4C
0000F780 0000                       		dc.w byte_F22E-Ani_obj4C
0000F782 0000                       		dc.w byte_F232-Ani_obj4C
0000F784 0000                       		dc.w byte_F23A-Ani_obj4C
0000F786 0000                       		dc.w byte_F23E-Ani_obj4C
0000F788 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F792 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F796 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F79A 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F7A2 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F7A6 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F7AA                            		even
0000F7AA                            		even
0000F7AA                            
0000F7AA                            Ani_obj4E:
0000F7AA                            	include "_anim\obj4E.asm"
0000F7AA                            ; ---------------------------------------------------------------------------
0000F7AA                            ; Animation script - advancing wall of lava (MZ)
0000F7AA                            ; ---------------------------------------------------------------------------
0000F7AA 0000                       		dc.w byte_F244-Ani_obj4E
0000F7AC 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F7B2                            		even
0000F7B2                            		even
0000F7B2                            
0000F7B2                            ; ---------------------------------------------------------------------------
0000F7B2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7B2                            ; ---------------------------------------------------------------------------
0000F7B2                            Map_obj4C:
0000F7B2                            	include "_maps\obj4C.asm"
0000F7B2                            ; ---------------------------------------------------------------------------
0000F7B2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7B2                            ; ---------------------------------------------------------------------------
0000F7B2 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F7B6 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F7BA 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F7BE 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F7C2 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F7C6 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F7CA 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F7CE 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F7D2 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F7D6 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F7DA 02                         byte_F272:	dc.b 2
0000F7DB EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F7E0 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F7E5 02                         byte_F27D:	dc.b 2
0000F7E6 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F7EB EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F7F0 04                         byte_F288:	dc.b 4
0000F7F1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F7F6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F7FB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F800 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F805 04                         byte_F29D:	dc.b 4
0000F806 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F80B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F810 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F815 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F81A 06                         byte_F2B2:	dc.b 6
0000F81B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F820 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F825 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F82A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F82F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F834 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F839 06                         byte_F2D1:	dc.b 6
0000F83A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F83F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F844 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F849 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F84E E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F853 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F858 02                         byte_F2F0:	dc.b 2
0000F859 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F85E E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F863 02                         byte_F2FB:	dc.b 2
0000F864 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F869 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F86E 0A                         byte_F306:	dc.b $A
0000F86F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F874 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F879 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F87E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F883 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F888 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F88D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F892 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F897 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F89C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F8A1 0A                         byte_F339:	dc.b $A
0000F8A2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F8A7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F8AC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F8B1 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8B6 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F8BB D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F8C0 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F8C5 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F8CA 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F8CF 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F8D4 0A                         byte_F36C:	dc.b $A
0000F8D5 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F8DA 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F8DF B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F8E4 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F8E9 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F8EE D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F8F3 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F8F8 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F8FD 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F902 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F907 06                         byte_F39F:	dc.b 6
0000F908 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F90D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F912 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F917 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F91C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F921 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F926 06                         byte_F3BE:	dc.b 6
0000F927 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F92C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F931 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F936 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F93B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F940 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F945 06                         byte_F3DD:	dc.b 6
0000F946 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F94B 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F950 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F955 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F95A D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F95F D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F964 10                         byte_F3FC:	dc.b $10
0000F965 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F96A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F96F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F974 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F979 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F97E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F983 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F988 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F98D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F992 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F997 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F99C 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F9A1 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F9A6 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F9AB 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F9B0 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F9B5 10                         byte_F44D:	dc.b $10
0000F9B6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9BB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9C0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9C5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9CA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9CF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9D4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F9D9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F9DE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F9E3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F9E8 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F9ED 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F9F2 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F9F7 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F9FC 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA01 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA06 10                         byte_F49E:	dc.b $10
0000FA07 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA0C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA11 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA16 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA1B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA20 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA25 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA2A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA2F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA34 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA39 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA3E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA43 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA48 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA4D 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA52 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA57 06                         byte_F4EF:	dc.b 6
0000FA58 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FA5D E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FA62 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FA67 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FA6C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FA71 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FA76 06                         byte_F50E:	dc.b 6
0000FA77 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FA7C E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FA81 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FA86 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FA8B D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FA90 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FA95 00                         byte_F52D:	dc.b 0
0000FA96                            		even
0000FA96                            		even
0000FA96                            
0000FA96                            ; ---------------------------------------------------------------------------
0000FA96                            ; Sprite mappings - advancing wall of lava (MZ)
0000FA96                            ; ---------------------------------------------------------------------------
0000FA96                            Map_obj4E:
0000FA96                            	include "_maps\obj4E.asm"
0000FA96                            ; ---------------------------------------------------------------------------
0000FA96                            ; Sprite mappings - advancing wall of lava (MZ)
0000FA96                            ; ---------------------------------------------------------------------------
0000FA96 0000                       		dc.w byte_F538-Map_obj4E
0000FA98 0000                       		dc.w byte_F566-Map_obj4E
0000FA9A 0000                       		dc.w byte_F594-Map_obj4E
0000FA9C 0000                       		dc.w byte_F5C2-Map_obj4E
0000FA9E 0000                       		dc.w byte_F5F0-Map_obj4E
0000FAA0 09                         byte_F538:	dc.b 9
0000FAA1 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FAA6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FAAB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAB0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAB5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FABA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FABF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FAC4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FAC9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FACE 09                         byte_F566:	dc.b 9
0000FACF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FAD4 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FAD9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FADE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAE3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAE8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAED 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FAF2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FAF7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FAFC 09                         byte_F594:	dc.b 9
0000FAFD E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB02 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB07 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB0C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB11 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB16 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB1B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB20 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB25 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB2A 09                         byte_F5C2:	dc.b 9
0000FB2B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB30 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB35 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB3A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB3F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB44 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB49 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB4E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB53 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB58 08                         byte_F5F0:	dc.b 8
0000FB59 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FB5E 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB63 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB68 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB6D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB72 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB77 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB7C 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB82 00                         		even
0000FB82 00                         		even
0000FB82                            
0000FB82                            ; ===========================================================================
0000FB82                            ; ---------------------------------------------------------------------------
0000FB82                            ; Object 40 - Moto Bug enemy (GHZ)
0000FB82                            ; ---------------------------------------------------------------------------
0000FB82                            
0000FB82                            Obj40:					; XREF: Obj_Index
0000FB82 7000                       		moveq	#0,d0
0000FB84 1028 0024                  		move.b	$24(a0),d0
0000FB88 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FB8C 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FB90                            ; ===========================================================================
0000FB90 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FB92 0000                       		dc.w Obj40_Action-Obj40_Index
0000FB94 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FB96 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FB98                            ; ===========================================================================
0000FB98                            
0000FB98                            Obj40_Main:				; XREF: Obj40_Index
0000FB98 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FBA0 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FBA6 117C 0004 0001             		move.b	#4,1(a0)
0000FBAC 117C 0004 0018             		move.b	#4,$18(a0)
0000FBB2 117C 0014 0019             		move.b	#$14,$19(a0)
0000FBB8 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FBBC 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FBBE 117C 000E 0016             		move.b	#$E,$16(a0)
0000FBC4 117C 0008 0017             		move.b	#8,$17(a0)
0000FBCA 117C 000C 0020             		move.b	#$C,$20(a0)
0000FBD0 6100 DF48                  		bsr.w	ObjectFall
0000FBD4 4EB9 0000 0000             		jsr	ObjHitFloor
0000FBDA 4A41                       		tst.w	d1
0000FBDC 6A00                       		bpl.s	locret_F68A
0000FBDE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FBE2 317C 0000 0012             		move.w	#0,$12(a0)
0000FBE8 5428 0024                  		addq.b	#2,$24(a0)
0000FBEC 0868 0000 0022             		bchg	#0,$22(a0)
0000FBF2                            
0000FBF2                            locret_F68A:
0000FBF2 4E75                       		rts	
0000FBF4                            ; ===========================================================================
0000FBF4                            
0000FBF4                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FBF4 5828 0024                  		addq.b	#4,$24(a0)
0000FBF8 6000 0000                  		bra.w	Obj40_Animate
0000FBFC                            ; ===========================================================================
0000FBFC                            
0000FBFC                            Obj40_Action:				; XREF: Obj40_Index
0000FBFC 7000                       		moveq	#0,d0
0000FBFE 1028 0025                  		move.b	$25(a0),d0
0000FC02 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC06 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC0A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC10 6100 B030                  		bsr.w	AnimateSprite
0000FC14                            
0000FC14                            ; ---------------------------------------------------------------------------
0000FC14                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC14                            ; ---------------------------------------------------------------------------
0000FC14                            
0000FC14                            MarkObjGone:
0000FC14 3028 0008                  		move.w	8(a0),d0
0000FC18 0240 FF80                  		andi.w	#$FF80,d0
0000FC1C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC20 0441 0080                  		subi.w	#$80,d1
0000FC24 0241 FF80                  		andi.w	#$FF80,d1
0000FC28 9041                       		sub.w	d1,d0
0000FC2A 0C40 0280                  		cmpi.w	#$280,d0
0000FC2E 6200 0000                  		bhi.w	Mark_ChkGone
0000FC32 6000 DF38                  		bra.w	DisplaySprite
0000FC36                            ; ===========================================================================
0000FC36                            
0000FC36                            Mark_ChkGone:
0000FC36 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC3A 7000                       		moveq	#0,d0
0000FC3C 1028 0023                  		move.b	$23(a0),d0
0000FC40 6700                       		beq.s	Mark_Delete
0000FC42 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC48                            
0000FC48                            Mark_Delete:
0000FC48 6000 DF5E                  		bra.w	DeleteObject
0000FC4C                            
0000FC4C                            ; ===========================================================================
0000FC4C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC4E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC50                            ; ===========================================================================
0000FC50                            
0000FC50                            Obj40_Move:				; XREF: Obj40_Index2
0000FC50 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC54 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC56 5428 0025                  		addq.b	#2,$25(a0)
0000FC5A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FC60 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC66 0868 0000 0022             		bchg	#0,$22(a0)
0000FC6C 6600                       		bne.s	locret_F70A
0000FC6E 4468 0010                  		neg.w	$10(a0)		; change direction
0000FC72                            
0000FC72                            locret_F70A:
0000FC72 4E75                       		rts	
0000FC74                            ; ===========================================================================
0000FC74                            
0000FC74                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FC74 6100 DED0                  		bsr.w	SpeedToPos
0000FC78 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC7E 0C41 FFF8                  		cmpi.w	#-8,d1
0000FC82 6D00                       		blt.s	Obj40_Pause
0000FC84 0C41 000C                  		cmpi.w	#$C,d1
0000FC88 6C00                       		bge.s	Obj40_Pause
0000FC8A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC8E 5328 0033                  		subq.b	#1,$33(a0)
0000FC92 6A00                       		bpl.s	locret_F756
0000FC94 117C 000F 0033             		move.b	#$F,$33(a0)
0000FC9A 6100 E356                  		bsr.w	SingleObjLoad
0000FC9E 6600                       		bne.s	locret_F756
0000FCA0 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FCA4 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCB0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FCB6 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCBC                            
0000FCBC                            locret_F756:
0000FCBC 4E75                       		rts	
0000FCBE                            ; ===========================================================================
0000FCBE                            
0000FCBE                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FCBE 5528 0025                  		subq.b	#2,$25(a0)
0000FCC2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FCC8 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FCCE 117C 0000 001C             		move.b	#0,$1C(a0)
0000FCD4 4E75                       		rts	
0000FCD6                            ; ===========================================================================
0000FCD6                            
0000FCD6                            Obj40_Animate:				; XREF: Obj40_Index
0000FCD6 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FCDC 6100 AF64                  		bsr.w	AnimateSprite
0000FCE0 6000 DE8A                  		bra.w	DisplaySprite
0000FCE4                            ; ===========================================================================
0000FCE4                            
0000FCE4                            Obj40_Delete:				; XREF: Obj40_Index
0000FCE4 6000 DEC2                  		bra.w	DeleteObject
0000FCE8                            ; ===========================================================================
0000FCE8                            Ani_obj40:
0000FCE8                            	include "_anim\obj40.asm"
0000FCE8                            ; ---------------------------------------------------------------------------
0000FCE8                            ; Animation script - Motobug enemy
0000FCE8                            ; ---------------------------------------------------------------------------
0000FCE8 0000                       		dc.w byte_F788-Ani_obj40
0000FCEA 0000                       		dc.w byte_F78C-Ani_obj40
0000FCEC 0000                       		dc.w byte_F792-Ani_obj40
0000FCEE 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FCF2 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FCF8 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD06                            		even
0000FD06                            		even
0000FD06                            
0000FD06                            ; ---------------------------------------------------------------------------
0000FD06                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD06                            ; ---------------------------------------------------------------------------
0000FD06                            Map_obj40:
0000FD06                            	include "_maps\obj40.asm"
0000FD06                            Map_cedc:
0000FD06 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD08 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD0A 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD0C 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD0E 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD10 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD12 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD14 04                         Map_cedc_E: 	dc.b $4
0000FD15 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD1A 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD1F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD24 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD29 04                         Map_cedc_23: 	dc.b $4
0000FD2A F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD2F 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD34 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD39 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD3E 05                         Map_cedc_38: 	dc.b $5
0000FD3F F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD44 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD49 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD4E 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD53 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FD58 01                         Map_cedc_52: 	dc.b $1
0000FD59 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FD5E 01                         Map_cedc_58: 	dc.b $1
0000FD5F FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FD64 01                         Map_cedc_5E: 	dc.b $1
0000FD65 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FD6A 00                         Map_cedc_64: 	dc.b $0
0000FD6C 00                         	even
0000FD6C 00                         	even
0000FD6C                            
0000FD6C                            ; ===========================================================================
0000FD6C                            ; ---------------------------------------------------------------------------
0000FD6C                            ; Object 4F - blank
0000FD6C                            ; ---------------------------------------------------------------------------
0000FD6C                            
0000FD6C                            Obj4F:					; XREF: Obj_Index
0000FD6C 4E75                       		rts	
0000FD6E                            
0000FD6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD6E                            
0000FD6E                            
0000FD6E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FD6E 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FD72 D047                       		add.w	d7,d0
0000FD74 0240 0003                  		andi.w	#3,d0
0000FD78 6600                       		bne.s	loc_F836
0000FD7A 7600                       		moveq	#0,d3
0000FD7C 1628 0019                  		move.b	$19(a0),d3
0000FD80 4A68 0010                  		tst.w	$10(a0)
0000FD84 6B00                       		bmi.s	loc_F82C
0000FD86 6100 0000                  		bsr.w	ObjHitWallRight
0000FD8A 4A41                       		tst.w	d1
0000FD8C 6A00                       		bpl.s	loc_F836
0000FD8E                            
0000FD8E                            loc_F828:
0000FD8E 7001                       		moveq	#1,d0
0000FD90 4E75                       		rts	
0000FD92                            ; ===========================================================================
0000FD92                            
0000FD92                            loc_F82C:
0000FD92 4643                       		not.w	d3
0000FD94 6100 0000                  		bsr.w	ObjHitWallLeft
0000FD98 4A41                       		tst.w	d1
0000FD9A 6BF2                       		bmi.s	loc_F828
0000FD9C                            
0000FD9C                            loc_F836:
0000FD9C 7000                       		moveq	#0,d0
0000FD9E 4E75                       		rts	
0000FDA0                            ; End of function Obj50_ChkWall
0000FDA0                            
0000FDA0                            ; ===========================================================================
0000FDA0                            ; ---------------------------------------------------------------------------
0000FDA0                            ; Object 50 - Yadrin enemy (SYZ)
0000FDA0                            ; ---------------------------------------------------------------------------
0000FDA0                            
0000FDA0                            Obj50:					; XREF: Obj_Index
0000FDA0 7000                       		moveq	#0,d0
0000FDA2 1028 0024                  		move.b	$24(a0),d0
0000FDA6 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FDAA 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FDAE                            ; ===========================================================================
0000FDAE 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FDB0 0000                       		dc.w Obj50_Action-Obj50_Index
0000FDB2                            ; ===========================================================================
0000FDB2                            
0000FDB2                            Obj50_Main:				; XREF: Obj50_Index
0000FDB2 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FDBA 317C 247B 0002             		move.w	#$247B,2(a0)
0000FDC0 117C 0004 0001             		move.b	#4,1(a0)
0000FDC6 117C 0004 0018             		move.b	#4,$18(a0)
0000FDCC 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDD2 117C 0011 0016             		move.b	#$11,$16(a0)
0000FDD8 117C 0008 0017             		move.b	#8,$17(a0)
0000FDDE 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FDE4 6100 DD34                  		bsr.w	ObjectFall
0000FDE8 6100 0000                  		bsr.w	ObjHitFloor
0000FDEC 4A41                       		tst.w	d1
0000FDEE 6A00                       		bpl.s	locret_F89E
0000FDF0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDF4 317C 0000 0012             		move.w	#0,$12(a0)
0000FDFA 5428 0024                  		addq.b	#2,$24(a0)
0000FDFE 0868 0000 0022             		bchg	#0,$22(a0)
0000FE04                            
0000FE04                            locret_F89E:
0000FE04 4E75                       		rts	
0000FE06                            ; ===========================================================================
0000FE06                            
0000FE06                            Obj50_Action:				; XREF: Obj50_Index
0000FE06 7000                       		moveq	#0,d0
0000FE08 1028 0025                  		move.b	$25(a0),d0
0000FE0C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE10 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE14 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE1A 6100 AE26                  		bsr.w	AnimateSprite
0000FE1E 6000 FDF4                  		bra.w	MarkObjGone
0000FE22                            ; ===========================================================================
0000FE22 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE24 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE26                            ; ===========================================================================
0000FE26                            
0000FE26                            Obj50_Move:				; XREF: Obj50_Index2
0000FE26 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE2A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE2C 5428 0025                  		addq.b	#2,$25(a0)
0000FE30 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE36 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE3C 0868 0000 0022             		bchg	#0,$22(a0)
0000FE42 6600                       		bne.s	locret_F8E2
0000FE44 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE48                            
0000FE48                            locret_F8E2:
0000FE48 4E75                       		rts	
0000FE4A                            ; ===========================================================================
0000FE4A                            
0000FE4A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE4A 6100 DCFA                  		bsr.w	SpeedToPos
0000FE4E 6100 0000                  		bsr.w	ObjHitFloor
0000FE52 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE56 6D00                       		blt.s	Obj50_Pause
0000FE58 0C41 000C                  		cmpi.w	#$C,d1
0000FE5C 6C00                       		bge.s	Obj50_Pause
0000FE5E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FE62 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FE66 6600                       		bne.s	Obj50_Pause
0000FE68 4E75                       		rts	
0000FE6A                            ; ===========================================================================
0000FE6A                            
0000FE6A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FE6A 5528 0025                  		subq.b	#2,$25(a0)
0000FE6E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FE74 317C 0000 0010             		move.w	#0,$10(a0)
0000FE7A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FE80 4E75                       		rts	
0000FE82                            ; ===========================================================================
0000FE82                            Ani_obj50:
0000FE82                            	include "_anim\obj50.asm"
0000FE82                            ; ---------------------------------------------------------------------------
0000FE82                            ; Animation script - Yadrin enemy
0000FE82                            ; ---------------------------------------------------------------------------
0000FE82 0000                       		dc.w byte_F920-Ani_obj50
0000FE84 0000                       		dc.w byte_F924-Ani_obj50
0000FE86 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FE8A 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FE94                            		even
0000FE94                            		even
0000FE94                            
0000FE94                            ; ---------------------------------------------------------------------------
0000FE94                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FE94                            ; ---------------------------------------------------------------------------
0000FE94                            Map_obj50:
0000FE94                            	include "_maps\obj50.asm"
0000FE94                            ; ---------------------------------------------------------------------------
0000FE94                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FE94                            ; ---------------------------------------------------------------------------
0000FE94 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FE98 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FE9C 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FEA0 05                         byte_F93A:	dc.b 5
0000FEA1 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEA6 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEAB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEB0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEB5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEBA 05                         byte_F954:	dc.b 5
0000FEBB F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FEC0 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FEC5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FECA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FECF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FED4 05                         byte_F96E:	dc.b 5
0000FED5 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FEDA 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FEDF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEE4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEE9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEEE 05                         byte_F988:	dc.b 5
0000FEEF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEF4 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEF9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEFE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF03 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF08 05                         byte_F9A2:	dc.b 5
0000FF09 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF0E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF13 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF18 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF1D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF22 05                         byte_F9BC:	dc.b 5
0000FF23 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF28 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF2D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF32 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF37 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF3C                            		even
0000FF3C                            		even
0000FF3C                            
0000FF3C                            ; ---------------------------------------------------------------------------
0000FF3C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF3C                            ;
0000FF3C                            ; variables:
0000FF3C                            ; d1 = width
0000FF3C                            ; d2 = height /	2 (when	jumping)
0000FF3C                            ; d3 = height /	2 (when	walking)
0000FF3C                            ; d4 = x-axis position
0000FF3C                            ; ---------------------------------------------------------------------------
0000FF3C                            
0000FF3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF3C                            
0000FF3C                            
0000FF3C                            SolidObject:
0000FF3C 4A28 0025                  		tst.b	$25(a0)
0000FF40 6700 0000                  		beq.w	loc_FAC8
0000FF44 3401                       		move.w	d1,d2
0000FF46 D442                       		add.w	d2,d2
0000FF48 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF4C 0829 0001 0022             		btst	#1,$22(a1)
0000FF52 6600                       		bne.s	loc_F9FE
0000FF54 3029 0008                  		move.w	8(a1),d0
0000FF58 9068 0008                  		sub.w	8(a0),d0
0000FF5C D041                       		add.w	d1,d0
0000FF5E 6B00                       		bmi.s	loc_F9FE
0000FF60 B042                       		cmp.w	d2,d0
0000FF62 6500                       		bcs.s	loc_FA12
0000FF64                            
0000FF64                            loc_F9FE:
0000FF64 08A9 0003 0022             		bclr	#3,$22(a1)
0000FF6A 08A8 0003 0022             		bclr	#3,$22(a0)
0000FF70 4228 0025                  		clr.b	$25(a0)
0000FF74 7800                       		moveq	#0,d4
0000FF76 4E75                       		rts	
0000FF78                            ; ===========================================================================
0000FF78                            
0000FF78                            loc_FA12:
0000FF78 3404                       		move.w	d4,d2
0000FF7A                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FF7A 7800                       		moveq	#0,d4
0000FF7C 4E75                       		rts	
0000FF7E                            ; ===========================================================================
0000FF7E                            
0000FF7E                            SolidObject71:				; XREF: Obj71_Solid
0000FF7E 4A28 0025                  		tst.b	$25(a0)
0000FF82 6700 0000                  		beq.w	loc_FAD0
0000FF86 3401                       		move.w	d1,d2
0000FF88 D442                       		add.w	d2,d2
0000FF8A 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF8E 0829 0001 0022             		btst	#1,$22(a1)
0000FF94 6600                       		bne.s	loc_FA44
0000FF96 3029 0008                  		move.w	8(a1),d0
0000FF9A 9068 0008                  		sub.w	8(a0),d0
0000FF9E D041                       		add.w	d1,d0
0000FFA0 6B00                       		bmi.s	loc_FA44
0000FFA2 B042                       		cmp.w	d2,d0
0000FFA4 6500                       		bcs.s	loc_FA58
0000FFA6                            
0000FFA6                            loc_FA44:
0000FFA6 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFAC 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFB2 4228 0025                  		clr.b	$25(a0)
0000FFB6 7800                       		moveq	#0,d4
0000FFB8 4E75                       		rts	
0000FFBA                            ; ===========================================================================
0000FFBA                            
0000FFBA                            loc_FA58:
0000FFBA 3404                       		move.w	d4,d2
0000FFBC                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0000FFBC 7800                       		moveq	#0,d4
0000FFBE 4E75                       		rts	
0000FFC0                            ; ===========================================================================
0000FFC0                            
0000FFC0                            SolidObject2F:				; XREF: Obj2F_Solid
0000FFC0 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFC4 4A28 0001                  		tst.b	1(a0)
0000FFC8 6A00 0000                  		bpl.w	loc_FB92
0000FFCC 3029 0008                  		move.w	8(a1),d0
0000FFD0 9068 0008                  		sub.w	8(a0),d0
0000FFD4 D041                       		add.w	d1,d0
0000FFD6 6B00 0000                  		bmi.w	loc_FB92
0000FFDA 3601                       		move.w	d1,d3
0000FFDC D643                       		add.w	d3,d3
0000FFDE B043                       		cmp.w	d3,d0
0000FFE0 6200 0000                  		bhi.w	loc_FB92
0000FFE4 3A00                       		move.w	d0,d5
0000FFE6 0828 0000 0001             		btst	#0,1(a0)
0000FFEC 6700                       		beq.s	loc_FA94
0000FFEE 4645                       		not.w	d5
0000FFF0 DA43                       		add.w	d3,d5
0000FFF2                            
0000FFF2                            loc_FA94:
0000FFF2 E24D                       		lsr.w	#1,d5
0000FFF4 7600                       		moveq	#0,d3
0000FFF6 1632 5000                  		move.b	(a2,d5.w),d3
0000FFFA 9612                       		sub.b	(a2),d3
0000FFFC 3A28 000C                  		move.w	$C(a0),d5
00010000 9A43                       		sub.w	d3,d5
00010002 1629 0016                  		move.b	$16(a1),d3
00010006 4883                       		ext.w	d3
00010008 D443                       		add.w	d3,d2
0001000A 3629 000C                  		move.w	$C(a1),d3
0001000E 9645                       		sub.w	d5,d3
00010010 5843                       		addq.w	#4,d3
00010012 D642                       		add.w	d2,d3
00010014 6B00 0000                  		bmi.w	loc_FB92
00010018 3802                       		move.w	d2,d4
0001001A D844                       		add.w	d4,d4
0001001C B644                       		cmp.w	d4,d3
0001001E 6400 0000                  		bcc.w	loc_FB92
00010022 6000 0000                  		bra.w	loc_FB0E
00010026                            ; ===========================================================================
00010026                            
00010026                            loc_FAC8:
00010026 4A28 0001                  		tst.b	1(a0)
0001002A 6A00 0000                  		bpl.w	loc_FB92
0001002E                            
0001002E                            loc_FAD0:
0001002E 43F8 D000                  		lea	($FFFFD000).w,a1
00010032 3029 0008                  		move.w	8(a1),d0
00010036 9068 0008                  		sub.w	8(a0),d0
0001003A D041                       		add.w	d1,d0
0001003C 6B00 0000                  		bmi.w	loc_FB92
00010040 3601                       		move.w	d1,d3
00010042 D643                       		add.w	d3,d3
00010044 B043                       		cmp.w	d3,d0
00010046 6200 0000                  		bhi.w	loc_FB92
0001004A 1629 0016                  		move.b	$16(a1),d3
0001004E 4883                       		ext.w	d3
00010050 D443                       		add.w	d3,d2
00010052 3629 000C                  		move.w	$C(a1),d3
00010056 9668 000C                  		sub.w	$C(a0),d3
0001005A 5843                       		addq.w	#4,d3
0001005C D642                       		add.w	d2,d3
0001005E 6B00 0000                  		bmi.w	loc_FB92
00010062 3802                       		move.w	d2,d4
00010064 D844                       		add.w	d4,d4
00010066 B644                       		cmp.w	d4,d3
00010068 6400 0000                  		bcc.w	loc_FB92
0001006C                            
0001006C                            loc_FB0E:
0001006C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010070 6B00 0000                  		bmi.w	loc_FB92
00010074 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001007A 6400 0000                  		bcc.w	loc_FB92
0001007E 4A78 FE08                  		tst.w	($FFFFFE08).w
00010082 6600 0000                  		bne.w	loc_FBAC
00010086 3A00                       		move.w	d0,d5
00010088 B240                       		cmp.w	d0,d1
0001008A 6400                       		bcc.s	loc_FB36
0001008C D241                       		add.w	d1,d1
0001008E 9041                       		sub.w	d1,d0
00010090 3A00                       		move.w	d0,d5
00010092 4445                       		neg.w	d5
00010094                            
00010094                            loc_FB36:
00010094 3203                       		move.w	d3,d1
00010096 B443                       		cmp.w	d3,d2
00010098 6400                       		bcc.s	loc_FB44
0001009A 5943                       		subq.w	#4,d3
0001009C 9644                       		sub.w	d4,d3
0001009E 3203                       		move.w	d3,d1
000100A0 4441                       		neg.w	d1
000100A2                            
000100A2                            loc_FB44:
000100A2 BA41                       		cmp.w	d1,d5
000100A4 6200 0000                  		bhi.w	loc_FBB0
000100A8 0C41 0004                  		cmpi.w	#4,d1
000100AC 6300                       		bls.s	loc_FB8C
000100AE 4A40                       		tst.w	d0
000100B0 6700                       		beq.s	loc_FB70
000100B2 6B00                       		bmi.s	loc_FB5E
000100B4 4A69 0010                  		tst.w	$10(a1)
000100B8 6B00                       		bmi.s	loc_FB70
000100BA 6000                       		bra.s	loc_FB64
000100BC                            ; ===========================================================================
000100BC                            
000100BC                            loc_FB5E:
000100BC 4A69 0010                  		tst.w	$10(a1)
000100C0 6A00                       		bpl.s	loc_FB70
000100C2                            
000100C2                            loc_FB64:
000100C2 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000100C8 337C 0000 0010             		move.w	#0,$10(a1)
000100CE                            
000100CE                            loc_FB70:
000100CE 9169 0008                  		sub.w	d0,8(a1)
000100D2 0829 0001 0022             		btst	#1,$22(a1)
000100D8 6600                       		bne.s	loc_FB8C
000100DA 08E9 0005 0022             		bset	#5,$22(a1)
000100E0 08E8 0005 0022             		bset	#5,$22(a0)
000100E6 7801                       		moveq	#1,d4
000100E8 4E75                       		rts	
000100EA                            ; ===========================================================================
000100EA                            
000100EA                            loc_FB8C:
000100EA 6100                       		bsr.s	loc_FBA0
000100EC 7801                       		moveq	#1,d4
000100EE 4E75                       		rts	
000100F0                            ; ===========================================================================
000100F0                            
000100F0                            loc_FB92:
000100F0 0828 0005 0022             		btst	#5,$22(a0)
000100F6 6700                       		beq.s	loc_FBAC
000100F8 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000100FE                            
000100FE                            loc_FBA0:
000100FE 08A8 0005 0022             		bclr	#5,$22(a0)
00010104 08A9 0005 0022             		bclr	#5,$22(a1)
0001010A                            
0001010A                            loc_FBAC:
0001010A 7800                       		moveq	#0,d4
0001010C 4E75                       		rts	
0001010E                            ; ===========================================================================
0001010E                            
0001010E                            loc_FBB0:
0001010E 4A43                       		tst.w	d3
00010110 6B00                       		bmi.s	loc_FBBC
00010112 0C43 0010                  		cmpi.w	#$10,d3
00010116 6500                       		bcs.s	loc_FBEE
00010118 60D6                       		bra.s	loc_FB92
0001011A                            ; ===========================================================================
0001011A                            
0001011A                            loc_FBBC:
0001011A 4A69 0012                  		tst.w	$12(a1)
0001011E 6700                       		beq.s	loc_FBD6
00010120 6A00                       		bpl.s	loc_FBD2
00010122 4A43                       		tst.w	d3
00010124 6A00                       		bpl.s	loc_FBD2
00010126 9769 000C                  		sub.w	d3,$C(a1)
0001012A 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010130                            
00010130                            loc_FBD2:
00010130 78FF                       		moveq	#-1,d4
00010132 4E75                       		rts	
00010134                            ; ===========================================================================
00010134                            
00010134                            loc_FBD6:
00010134 0829 0001 0022             		btst	#1,$22(a1)
0001013A 66F4                       		bne.s	loc_FBD2
0001013C 2F08                       		move.l	a0,-(sp)
0001013E 2049                       		movea.l	a1,a0
00010140 4EB9 0000 0000             		jsr	KillSonic
00010146 205F                       		movea.l	(sp)+,a0
00010148 78FF                       		moveq	#-1,d4
0001014A 4E75                       		rts	
0001014C                            ; ===========================================================================
0001014C                            
0001014C                            loc_FBEE:
0001014C 5943                       		subq.w	#4,d3
0001014E 7200                       		moveq	#0,d1
00010150 1228 0019                  		move.b	$19(a0),d1
00010154 3401                       		move.w	d1,d2
00010156 D442                       		add.w	d2,d2
00010158 D269 0008                  		add.w	8(a1),d1
0001015C 9268 0008                  		sub.w	8(a0),d1
00010160 6B00                       		bmi.s	loc_FC28
00010162 B242                       		cmp.w	d2,d1
00010164 6400                       		bcc.s	loc_FC28
00010166 4A69 0012                  		tst.w	$12(a1)
0001016A 6B00                       		bmi.s	loc_FC28
0001016C 9769 000C                  		sub.w	d3,$C(a1)
00010170 5369 000C                  		subq.w	#1,$C(a1)
00010174 6100                       		bsr.s	sub_FC2C
00010176 117C 0002 0025             		move.b	#2,$25(a0)
0001017C 08E8 0003 0022             		bset	#3,$22(a0)
00010182 78FF                       		moveq	#-1,d4
00010184 4E75                       		rts	
00010186                            ; ===========================================================================
00010186                            
00010186                            loc_FC28:
00010186 7800                       		moveq	#0,d4
00010188 4E75                       		rts	
0001018A                            ; End of function SolidObject
0001018A                            
0001018A                            
0001018A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001018A                            
0001018A                            
0001018A                            sub_FC2C:				; XREF: SolidObject
0001018A 0829 0003 0022             		btst	#3,$22(a1)
00010190 6700                       		beq.s	loc_FC4E
00010192 7000                       		moveq	#0,d0
00010194 1029 003D                  		move.b	$3D(a1),d0
00010198 ED48                       		lsl.w	#6,d0
0001019A 0680 00FF D000             		addi.l	#$FFD000,d0
000101A0 2440                       		movea.l	d0,a2
000101A2 08AA 0003 0022             		bclr	#3,$22(a2)
000101A8 422A 0025                  		clr.b	$25(a2)
000101AC                            
000101AC                            loc_FC4E:
000101AC 3008                       		move.w	a0,d0
000101AE 0440 D000                  		subi.w	#-$3000,d0
000101B2 EC48                       		lsr.w	#6,d0
000101B4 0240 007F                  		andi.w	#$7F,d0
000101B8 1340 003D                  		move.b	d0,$3D(a1)
000101BC 137C 0000 0026             		move.b	#0,$26(a1)
000101C2 337C 0000 0012             		move.w	#0,$12(a1)
000101C8 3369 0010 0014             		move.w	$10(a1),$14(a1)
000101CE 0829 0001 0022             		btst	#1,$22(a1)
000101D4 6700                       		beq.s	loc_FC84
000101D6 2F08                       		move.l	a0,-(sp)
000101D8 2049                       		movea.l	a1,a0
000101DA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000101E0 205F                       		movea.l	(sp)+,a0
000101E2                            
000101E2                            loc_FC84:
000101E2 08E9 0003 0022             		bset	#3,$22(a1)
000101E8 08E8 0003 0022             		bset	#3,$22(a0)
000101EE 4E75                       		rts	
000101F0                            ; End of function sub_FC2C
000101F0                            
000101F0                            ; ===========================================================================
000101F0                            ; ---------------------------------------------------------------------------
000101F0                            ; Object 51 - smashable	green block (MZ)
000101F0                            ; ---------------------------------------------------------------------------
000101F0                            
000101F0                            Obj51:					; XREF: Obj_Index
000101F0 7000                       		moveq	#0,d0
000101F2 1028 0024                  		move.b	$24(a0),d0
000101F6 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000101FA 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000101FE 6000 FA14                  		bra.w	MarkObjGone
00010202                            ; ===========================================================================
00010202 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010204 0000                       		dc.w Obj51_Solid-Obj51_Index
00010206 0000                       		dc.w Obj51_Display-Obj51_Index
00010208                            ; ===========================================================================
00010208                            
00010208                            Obj51_Main:				; XREF: Obj51_Index
00010208 5428 0024                  		addq.b	#2,$24(a0)
0001020C 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010214 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001021A 117C 0004 0001             		move.b	#4,1(a0)
00010220 117C 0010 0019             		move.b	#$10,$19(a0)
00010226 117C 0004 0018             		move.b	#4,$18(a0)
0001022C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010232                            
00010232                            Obj51_Solid:				; XREF: Obj51_Index
00010232 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010238 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001023E 323C 001B                  		move.w	#$1B,d1
00010242 343C 0010                  		move.w	#$10,d2
00010246 363C 0011                  		move.w	#$11,d3
0001024A 3828 0008                  		move.w	8(a0),d4
0001024E 6100 FCEC                  		bsr.w	SolidObject
00010252 0828 0003 0022             		btst	#3,$22(a0)
00010258 6600                       		bne.s	Obj51_Smash
0001025A                            
0001025A                            locret_FCFC:
0001025A 4E75                       		rts	
0001025C                            ; ===========================================================================
0001025C                            
0001025C                            Obj51_Smash:				; XREF: Obj51_Solid
0001025C 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010262 66F6                       		bne.s	locret_FCFC	; if not, branch
00010264 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001026A 08E9 0002 0022             		bset	#2,$22(a1)
00010270 137C 000E 0016             		move.b	#$E,$16(a1)
00010276 137C 0007 0017             		move.b	#7,$17(a1)
0001027C 137C 0002 001C             		move.b	#2,$1C(a1)
00010282 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010288 08E9 0001 0022             		bset	#1,$22(a1)
0001028E 08A9 0003 0022             		bclr	#3,$22(a1)
00010294 137C 0002 0024             		move.b	#2,$24(a1)
0001029A 08A8 0003 0022             		bclr	#3,$22(a0)
000102A0 4228 0025                  		clr.b	$25(a0)
000102A4 117C 0001 001A             		move.b	#1,$1A(a0)
000102AA 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000102B0 7203                       		moveq	#3,d1		; set number of	fragments to 4
000102B2 343C 0038                  		move.w	#$38,d2
000102B6 6100 D4A2                  		bsr.w	SmashObject
000102BA 6100 DD36                  		bsr.w	SingleObjLoad
000102BE 6600                       		bne.s	Obj51_Display
000102C0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000102C4 3368 0008 0008             		move.w	8(a0),8(a1)
000102CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000102D0 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000102D4 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000102D8 0C42 0006                  		cmpi.w	#6,d2
000102DC 6500                       		bcs.s	Obj51_Bonus
000102DE 7406                       		moveq	#6,d2
000102E0                            
000102E0                            Obj51_Bonus:
000102E0 7000                       		moveq	#0,d0
000102E2 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000102E6 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000102EC 6500                       		bcs.s	loc_FD98	; if not, branch
000102EE 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000102F2 740A                       		moveq	#10,d2
000102F4                            
000102F4                            loc_FD98:
000102F4 4EB9 0000 0000             		jsr	AddPoints
000102FA E24A                       		lsr.w	#1,d2
000102FC 1342 001A                  		move.b	d2,$1A(a1)
00010300                            
00010300                            Obj51_Display:				; XREF: Obj51_Index
00010300 6100 D844                  		bsr.w	SpeedToPos
00010304 0668 0038 0012             		addi.w	#$38,$12(a0)
0001030A 6100 D860                  		bsr.w	DisplaySprite
0001030E 4A28 0001                  		tst.b	1(a0)
00010312 6A00 D894                  		bpl.w	DeleteObject
00010316 4E75                       		rts	
00010318                            ; ===========================================================================
00010318 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001031C FF00 FF00                  		dc.w $FF00, $FF00
00010320 0200 FE00                  		dc.w $200, $FE00
00010324 0100 FF00                  		dc.w $100, $FF00
00010328                            
00010328 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010330                            ; ---------------------------------------------------------------------------
00010330                            ; Sprite mappings - smashable green block (MZ)
00010330                            ; ---------------------------------------------------------------------------
00010330                            Map_obj51:
00010330                            	include "_maps\obj51.asm"
00010330                            ; ---------------------------------------------------------------------------
00010330                            ; Sprite mappings - smashable green block (MZ)
00010330                            ; ---------------------------------------------------------------------------
00010330 0000                       		dc.w byte_FDD8-Map_obj51
00010332 0000                       		dc.w byte_FDE3-Map_obj51
00010334 02                         byte_FDD8:	dc.b 2
00010335 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001033A 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001033F 04                         byte_FDE3:	dc.b 4
00010340 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010345 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001034A F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001034F 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010354                            		even
00010354                            		even
00010354                            
00010354                            ; ===========================================================================
00010354                            ; ---------------------------------------------------------------------------
00010354                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010354                            ; ---------------------------------------------------------------------------
00010354                            
00010354                            Obj52:					; XREF: Obj_Index
00010354 7000                       		moveq	#0,d0
00010356 1028 0024                  		move.b	$24(a0),d0
0001035A 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001035E 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010362                            ; ===========================================================================
00010362 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010364 0000                       		dc.w Obj52_Platform-Obj52_Index
00010366 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010368                            
00010368 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001036A 2001                       		dc.b $20, 1
0001036C 2002                       		dc.b $20, 2
0001036E 4003                       		dc.b $40, 3
00010370 3004                       		dc.b $30, 4
00010372                            ; ===========================================================================
00010372                            
00010372                            Obj52_Main:				; XREF: Obj52_Index
00010372 5428 0024                  		addq.b	#2,$24(a0)
00010376 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001037E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010384 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001038A 6600                       		bne.s	loc_FE44
0001038C 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010394 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001039A 117C 0007 0016             		move.b	#7,$16(a0)
000103A0                            
000103A0                            loc_FE44:
000103A0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000103A6 6600                       		bne.s	loc_FE60
000103A8 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000103AE 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000103B4 6700                       		beq.s	loc_FE60	; if yes, branch
000103B6 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000103BC                            
000103BC                            loc_FE60:
000103BC 117C 0004 0001             		move.b	#4,1(a0)
000103C2 7000                       		moveq	#0,d0
000103C4 1028 0028                  		move.b	$28(a0),d0
000103C8 E648                       		lsr.w	#3,d0
000103CA 0240 001E                  		andi.w	#$1E,d0
000103CE 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000103D2 115A 0019                  		move.b	(a2)+,$19(a0)
000103D6 115A 001A                  		move.b	(a2)+,$1A(a0)
000103DA 117C 0004 0018             		move.b	#4,$18(a0)
000103E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000103E6 3168 000C 0032             		move.w	$C(a0),$32(a0)
000103EC 0228 000F 0028             		andi.b	#$F,$28(a0)
000103F2                            
000103F2                            Obj52_Platform:				; XREF: Obj52_Index
000103F2 6100 0000                  		bsr.w	Obj52_Move
000103F6 7200                       		moveq	#0,d1
000103F8 1228 0019                  		move.b	$19(a0),d1
000103FC 4EB9 0000 789E             		jsr	(PlatformObject).l
00010402 6000                       		bra.s	Obj52_ChkDel
00010404                            ; ===========================================================================
00010404                            
00010404                            Obj52_StandOn:				; XREF: Obj52_Index
00010404 7200                       		moveq	#0,d1
00010406 1228 0019                  		move.b	$19(a0),d1
0001040A 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00010410 3F28 0008                  		move.w	8(a0),-(sp)
00010414 6100 0000                  		bsr.w	Obj52_Move
00010418 341F                       		move.w	(sp)+,d2
0001041A 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
00010420                            
00010420                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010420 3028 0030                  		move.w	$30(a0),d0
00010424 0240 FF80                  		andi.w	#$FF80,d0
00010428 3238 F700                  		move.w	($FFFFF700).w,d1
0001042C 0441 0080                  		subi.w	#$80,d1
00010430 0241 FF80                  		andi.w	#$FF80,d1
00010434 9041                       		sub.w	d1,d0
00010436 0C40 0280                  		cmpi.w	#$280,d0
0001043A 6200 D76C                  		bhi.w	DeleteObject
0001043E 6000 D72C                  		bra.w	DisplaySprite
00010442                            ; ===========================================================================
00010442                            
00010442                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010442 7000                       		moveq	#0,d0
00010444 1028 0028                  		move.b	$28(a0),d0
00010448 0240 000F                  		andi.w	#$F,d0
0001044C D040                       		add.w	d0,d0
0001044E 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010452 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010456                            ; ===========================================================================
00010456 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001045A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001045E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010462 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010466 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001046A 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001046C                            ; ===========================================================================
0001046C                            
0001046C                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001046C 4E75                       		rts	
0001046E                            ; ===========================================================================
0001046E                            
0001046E                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001046E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010472 323C 0060                  		move.w	#$60,d1
00010476 0828 0000 0022             		btst	#0,$22(a0)
0001047C 6700                       		beq.s	loc_FF26
0001047E 4440                       		neg.w	d0
00010480 D041                       		add.w	d1,d0
00010482                            
00010482                            loc_FF26:
00010482 3228 0030                  		move.w	$30(a0),d1
00010486 9240                       		sub.w	d0,d1
00010488 3141 0008                  		move.w	d1,8(a0)
0001048C 4E75                       		rts	
0001048E                            ; ===========================================================================
0001048E                            
0001048E                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001048E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010494 6600                       		bne.s	Obj52_02_Wait
00010496 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001049A                            
0001049A                            Obj52_02_Wait:
0001049A 4E75                       		rts	
0001049C                            ; ===========================================================================
0001049C                            
0001049C                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001049C 7600                       		moveq	#0,d3
0001049E 1628 0019                  		move.b	$19(a0),d3
000104A2 6100 0000                  		bsr.w	ObjHitWallRight
000104A6 4A41                       		tst.w	d1		; has the platform hit a wall?
000104A8 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000104AA 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104AE 3168 0008 0030             		move.w	8(a0),$30(a0)
000104B4 4E75                       		rts	
000104B6                            ; ===========================================================================
000104B6                            
000104B6                            Obj52_03_End:
000104B6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000104BA 4E75                       		rts	
000104BC                            ; ===========================================================================
000104BC                            
000104BC                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000104BC 7600                       		moveq	#0,d3
000104BE 1628 0019                  		move.b	$19(a0),d3
000104C2 6100 0000                  		bsr.w	ObjHitWallRight
000104C6 4A41                       		tst.w	d1		; has the platform hit a wall?
000104C8 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000104CA 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104CE 3168 0008 0030             		move.w	8(a0),$30(a0)
000104D4 4E75                       		rts	
000104D6                            ; ===========================================================================
000104D6                            
000104D6                            Obj52_05_End:
000104D6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000104DA 4E75                       		rts	
000104DC                            ; ===========================================================================
000104DC                            
000104DC                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000104DC 6100 D668                  		bsr.w	SpeedToPos
000104E0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000104E6 6100 0000                  		bsr.w	ObjHitFloor
000104EA 4A41                       		tst.w	d1		; has platform hit the floor?
000104EC 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000104F0 D368 000C                  		add.w	d1,$C(a0)
000104F4 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000104F8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000104FC                            
000104FC                            locret_FFA0:
000104FC 4E75                       		rts	
000104FE                            ; ===========================================================================
000104FE                            
000104FE                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000104FE 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010502 6700                       		beq.s	Obj52_07_ChkDel
00010504 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010508                            
00010508                            Obj52_07_ChkDel:
00010508 588F                       		addq.l	#4,sp
0001050A 3028 0030                  		move.w	$30(a0),d0
0001050E 0240 FF80                  		andi.w	#$FF80,d0
00010512 3238 F700                  		move.w	($FFFFF700).w,d1
00010516 0441 0080                  		subi.w	#$80,d1
0001051A 0241 FF80                  		andi.w	#$FF80,d1
0001051E 9041                       		sub.w	d1,d0
00010520 0C40 0280                  		cmpi.w	#$280,d0
00010524 6200 D682                  		bhi.w	DeleteObject
00010528 4E75                       		rts	
0001052A                            ; ===========================================================================
0001052A                            
0001052A                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001052A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001052E 323C 0080                  		move.w	#$80,d1
00010532 0828 0000 0022             		btst	#0,$22(a0)
00010538 6700                       		beq.s	loc_FFE2
0001053A 4440                       		neg.w	d0
0001053C D041                       		add.w	d1,d0
0001053E                            
0001053E                            loc_FFE2:
0001053E 3228 0032                  		move.w	$32(a0),d1
00010542 9240                       		sub.w	d0,d1
00010544 3141 000C                  		move.w	d1,$C(a0)
00010548 4E75                       		rts	
0001054A                            ; ===========================================================================
0001054A                            
0001054A                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001054A 7600                       		moveq	#0,d3
0001054C 1628 0019                  		move.b	$19(a0),d3
00010550 D643                       		add.w	d3,d3
00010552 7208                       		moveq	#8,d1
00010554 0828 0000 0022             		btst	#0,$22(a0)
0001055A 6700                       		beq.s	loc_10004
0001055C 4441                       		neg.w	d1
0001055E 4443                       		neg.w	d3
00010560                            
00010560                            loc_10004:
00010560 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010564 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010566 3028 0008                  		move.w	8(a0),d0
0001056A 9068 0030                  		sub.w	$30(a0),d0
0001056E B043                       		cmp.w	d3,d0
00010570 6700                       		beq.s	Obj52_0A_Wait
00010572 D368 0008                  		add.w	d1,8(a0)	; move platform
00010576 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001057C 4E75                       		rts	
0001057E                            ; ===========================================================================
0001057E                            
0001057E                            Obj52_0A_Wait:
0001057E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010582 6600                       		bne.s	locret_1002E	; if time remains, branch
00010584 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001058A                            
0001058A                            locret_1002E:
0001058A 4E75                       		rts	
0001058C                            ; ===========================================================================
0001058C                            
0001058C                            Obj52_0A_Back:
0001058C 3028 0008                  		move.w	8(a0),d0
00010590 9068 0030                  		sub.w	$30(a0),d0
00010594 6700                       		beq.s	Obj52_0A_Reset
00010596 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001059A 4E75                       		rts	
0001059C                            ; ===========================================================================
0001059C                            
0001059C                            Obj52_0A_Reset:
0001059C 4268 0036                  		clr.w	$36(a0)
000105A0 5328 0028                  		subq.b	#1,$28(a0)
000105A4 4E75                       		rts	
000105A6                            ; ===========================================================================
000105A6                            ; ---------------------------------------------------------------------------
000105A6                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105A6                            ; ---------------------------------------------------------------------------
000105A6                            Map_obj52:
000105A6                            	include "_maps\obj52mz.asm"
000105A6                            ; ---------------------------------------------------------------------------
000105A6                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105A6                            ; ---------------------------------------------------------------------------
000105A6 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000105AA 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000105AE 0000                       		dc.w byte_1008F-Map_obj52
000105B0 01                         byte_10054:	dc.b 1
000105B1 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105B6 02                         byte_1005A:	dc.b 2
000105B7 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000105BC F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000105C1 04                         byte_10065:	dc.b 4
000105C2 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000105C7 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000105CC F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000105D1 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000105D6 04                         byte_1007A:	dc.b 4
000105D7 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000105DC F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000105E1 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000105E6 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000105EB 03                         byte_1008F:	dc.b 3
000105EC F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000105F1 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105F6 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000105FC 00                         		even
000105FC 00                         		even
000105FC                            
000105FC                            ; ---------------------------------------------------------------------------
000105FC                            ; Sprite mappings - moving block (LZ)
000105FC                            ; ---------------------------------------------------------------------------
000105FC                            Map_obj52a:
000105FC                            	include "_maps\obj52lz.asm"
000105FC                            ; ---------------------------------------------------------------------------
000105FC                            ; Sprite mappings - moving block (LZ)
000105FC                            ; ---------------------------------------------------------------------------
000105FC 0000                       		dc.w byte_100A2-Map_obj52a
000105FE 01                         byte_100A2:	dc.b 1
000105FF F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010604                            		even
00010604                            		even
00010604                            
00010604                            ; ===========================================================================
00010604                            ; ---------------------------------------------------------------------------
00010604                            ; Object 55 - Basaran enemy (MZ)
00010604                            ; ---------------------------------------------------------------------------
00010604                            
00010604                            Obj55:					; XREF: Obj_Index
00010604 7000                       		moveq	#0,d0
00010606 1028 0024                  		move.b	$24(a0),d0
0001060A 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001060E 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010612                            ; ===========================================================================
00010612 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010614 0000                       		dc.w Obj55_Action-Obj55_Index
00010616                            ; ===========================================================================
00010616                            
00010616                            Obj55_Main:				; XREF: Obj55_Index
00010616 5428 0024                  		addq.b	#2,$24(a0)
0001061A 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010622 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010628 117C 0004 0001             		move.b	#4,1(a0)
0001062E 117C 000C 0016             		move.b	#$C,$16(a0)
00010634 117C 0002 0018             		move.b	#2,$18(a0)
0001063A 117C 000B 0020             		move.b	#$B,$20(a0)
00010640 117C 0010 0019             		move.b	#$10,$19(a0)
00010646                            
00010646                            Obj55_Action:				; XREF: Obj55_Index
00010646 7000                       		moveq	#0,d0
00010648 1028 0025                  		move.b	$25(a0),d0
0001064C 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010650 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010654 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001065A 6100 A5E6                  		bsr.w	AnimateSprite
0001065E 6000 F5B4                  		bra.w	MarkObjGone
00010662                            ; ===========================================================================
00010662 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010664 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010666 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010668 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001066A                            ; ===========================================================================
0001066A                            
0001066A                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001066A 343C 0080                  		move.w	#$80,d2
0001066E 6100 0000                  		bsr.w	Obj55_ChkSonic
00010672 6400                       		bcc.s	Obj55_NoDrop
00010674 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010678 3140 0036                  		move.w	d0,$36(a0)
0001067C 9068 000C                  		sub.w	$C(a0),d0
00010680 6500                       		bcs.s	Obj55_NoDrop
00010682 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010686 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010688 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001068C 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001068E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010692 D007                       		add.b	d7,d0
00010694 0200 0007                  		andi.b	#7,d0
00010698 6600                       		bne.s	Obj55_NoDrop
0001069A 117C 0001 001C             		move.b	#1,$1C(a0)
000106A0 5428 0025                  		addq.b	#2,$25(a0)
000106A4                            
000106A4                            Obj55_NoDrop:
000106A4 4E75                       		rts	
000106A6                            ; ===========================================================================
000106A6                            
000106A6                            Obj55_DropFly:				; XREF: Obj55_Index2
000106A6 6100 D49E                  		bsr.w	SpeedToPos
000106AA 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000106B0 343C 0080                  		move.w	#$80,d2
000106B4 6100 0000                  		bsr.w	Obj55_ChkSonic
000106B8 3028 0036                  		move.w	$36(a0),d0
000106BC 9068 000C                  		sub.w	$C(a0),d0
000106C0 6500                       		bcs.s	Obj55_ChkDel
000106C2 0C40 0010                  		cmpi.w	#$10,d0
000106C6 6400                       		bcc.s	locret_10180
000106C8 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000106CC 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000106D2 117C 0002 001C             		move.b	#2,$1C(a0)
000106D8 5428 0025                  		addq.b	#2,$25(a0)
000106DC                            
000106DC                            locret_10180:
000106DC 4E75                       		rts	
000106DE                            ; ===========================================================================
000106DE                            
000106DE                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000106DE 4A28 0001                  		tst.b	1(a0)
000106E2 6A00 D4C4                  		bpl.w	DeleteObject
000106E6 4E75                       		rts	
000106E8                            ; ===========================================================================
000106E8                            
000106E8                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000106E8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106EC 0200 000F                  		andi.b	#$F,d0
000106F0 6600                       		bne.s	loc_101A0
000106F2 303C 00C0                  		move.w	#$C0,d0
000106F6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
000106FC                            
000106FC                            loc_101A0:
000106FC 6100 D448                  		bsr.w	SpeedToPos
00010700 3038 D008                  		move.w	($FFFFD008).w,d0
00010704 9068 0008                  		sub.w	8(a0),d0
00010708 6400                       		bcc.s	loc_101B0
0001070A 4440                       		neg.w	d0
0001070C                            
0001070C                            loc_101B0:
0001070C 0C40 0080                  		cmpi.w	#$80,d0
00010710 6500                       		bcs.s	locret_101C6
00010712 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010716 D007                       		add.b	d7,d0
00010718 0200 0007                  		andi.b	#7,d0
0001071C 6600                       		bne.s	locret_101C6
0001071E 5428 0025                  		addq.b	#2,$25(a0)
00010722                            
00010722                            locret_101C6:
00010722 4E75                       		rts	
00010724                            ; ===========================================================================
00010724                            
00010724                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010724 6100 D420                  		bsr.w	SpeedToPos
00010728 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001072E 6100 0000                  		bsr.w	ObjHitCeiling
00010732 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010734 6A00                       		bpl.s	locret_101F4	; if not, branch
00010736 9368 000C                  		sub.w	d1,$C(a0)
0001073A 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010740 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010744 4268 0012                  		clr.w	$12(a0)
00010748 4228 001C                  		clr.b	$1C(a0)
0001074C 4228 0025                  		clr.b	$25(a0)
00010750                            
00010750                            locret_101F4:
00010750 4E75                       		rts	
00010752                            ; ===========================================================================
00010752                            
00010752                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010752 323C 0100                  		move.w	#$100,d1
00010756 08E8 0000 0022             		bset	#0,$22(a0)
0001075C 3038 D008                  		move.w	($FFFFD008).w,d0
00010760 9068 0008                  		sub.w	8(a0),d0
00010764 6400                       		bcc.s	loc_10214
00010766 4440                       		neg.w	d0
00010768 4441                       		neg.w	d1
0001076A 08A8 0000 0022             		bclr	#0,$22(a0)
00010770                            
00010770                            loc_10214:
00010770 B042                       		cmp.w	d2,d0
00010772 4E75                       		rts	
00010774                            ; ===========================================================================
00010774 6100 D3D0                  		bsr.w	SpeedToPos
00010778 6100 D3F2                  		bsr.w	DisplaySprite
0001077C 4A28 0001                  		tst.b	1(a0)
00010780 6A00 D426                  		bpl.w	DeleteObject
00010784 4E75                       		rts	
00010786                            ; ===========================================================================
00010786                            Ani_obj55:
00010786                            	include "_anim\obj55.asm"
00010786                            ; ---------------------------------------------------------------------------
00010786                            ; Animation script - Basaran enemy
00010786                            ; ---------------------------------------------------------------------------
00010786 0000                       		dc.w byte_10230-Ani_obj55
00010788 0000                       		dc.w byte_10234-Ani_obj55
0001078A 0000                       		dc.w byte_10238-Ani_obj55
0001078C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010790 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010794 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0001079A                            		even
0001079A                            		even
0001079A                            
0001079A                            ; ---------------------------------------------------------------------------
0001079A                            ; Sprite mappings - Basaran enemy (MZ)
0001079A                            ; ---------------------------------------------------------------------------
0001079A                            Map_obj55:
0001079A                            	include "_maps\obj55.asm"
0001079A                            ; ---------------------------------------------------------------------------
0001079A                            ; Sprite mappings - Basaran enemy (MZ)
0001079A                            ; ---------------------------------------------------------------------------
0001079A 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001079E 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000107A2 01                         byte_10246:	dc.b 1
000107A3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000107A8 03                         byte_1024C:	dc.b 3
000107A9 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000107AE 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000107B3 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000107B8 04                         byte_1025C:	dc.b 4
000107B9 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000107BE 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000107C3 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000107C8 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000107CD 04                         byte_10271:	dc.b 4
000107CE F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000107D3 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000107D8 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000107DD FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000107E2                            		even
000107E2                            		even
000107E2                            
000107E2                            ; ===========================================================================
000107E2                            ; ---------------------------------------------------------------------------
000107E2                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000107E2                            ; ---------------------------------------------------------------------------
000107E2                            
000107E2                            Obj56:					; XREF: Obj_Index
000107E2 7000                       		moveq	#0,d0
000107E4 1028 0024                  		move.b	$24(a0),d0
000107E8 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000107EC 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000107F0                            ; ===========================================================================
000107F0 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000107F2 0000                       		dc.w Obj56_Action-Obj56_Index
000107F4                            
000107F4 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000107F6 2020                       		dc.b  $20, $20
000107F8 1020                       		dc.b  $10, $20
000107FA 201A                       		dc.b  $20, $1A
000107FC 1027                       		dc.b  $10, $27
000107FE 1010                       		dc.b  $10, $10
00010800 0820                       		dc.b	8, $20
00010802 4010                       		dc.b  $40, $10
00010804                            ; ===========================================================================
00010804                            
00010804                            Obj56_Main:				; XREF: Obj56_Index
00010804 5428 0024                  		addq.b	#2,$24(a0)
00010808 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010810 317C 4000 0002             		move.w	#$4000,2(a0)
00010816 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001081C 6600                       		bne.s	loc_102C8
0001081E 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010824                            
00010824                            loc_102C8:
00010824 117C 0004 0001             		move.b	#4,1(a0)
0001082A 117C 0003 0018             		move.b	#3,$18(a0)
00010830 7000                       		moveq	#0,d0
00010832 1028 0028                  		move.b	$28(a0),d0
00010836 E648                       		lsr.w	#3,d0
00010838 0240 000E                  		andi.w	#$E,d0
0001083C 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010840 115A 0019                  		move.b	(a2)+,$19(a0)
00010844 1152 0016                  		move.b	(a2),$16(a0)
00010848 E248                       		lsr.w	#1,d0
0001084A 1140 001A                  		move.b	d0,$1A(a0)
0001084E 3168 0008 0034             		move.w	8(a0),$34(a0)
00010854 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001085A 7000                       		moveq	#0,d0
0001085C 1012                       		move.b	(a2),d0
0001085E D040                       		add.w	d0,d0
00010860 3140 003A                  		move.w	d0,$3A(a0)
00010864 7000                       		moveq	#0,d0
00010866 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001086C 6700                       		beq.s	loc_10332
0001086E 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010872 0240 000F                  		andi.w	#$F,d0
00010876 5140                       		subq.w	#8,d0
00010878 6500                       		bcs.s	loc_10332
0001087A E548                       		lsl.w	#2,d0
0001087C 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010880 45F2 0000                  		lea	(a2,d0.w),a2
00010884 4A52                       		tst.w	(a2)
00010886 6A00                       		bpl.s	loc_10332
00010888 0868 0000 0022             		bchg	#0,$22(a0)
0001088E                            
0001088E                            loc_10332:
0001088E 1028 0028                  		move.b	$28(a0),d0
00010892 6A00                       		bpl.s	Obj56_Action
00010894 0200 000F                  		andi.b	#$F,d0
00010898 1140 003C                  		move.b	d0,$3C(a0)
0001089C 117C 0005 0028             		move.b	#5,$28(a0)
000108A2 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000108A8 6600                       		bne.s	Obj56_ChkGone
000108AA 117C 000C 0028             		move.b	#$C,$28(a0)
000108B0 317C 0080 003A             		move.w	#$80,$3A(a0)
000108B6                            
000108B6                            Obj56_ChkGone:
000108B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108BA 7000                       		moveq	#0,d0
000108BC 1028 0023                  		move.b	$23(a0),d0
000108C0 6700                       		beq.s	Obj56_Action
000108C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000108C8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000108CE 6700                       		beq.s	Obj56_Action
000108D0 5228 0028                  		addq.b	#1,$28(a0)
000108D4 4268 003A                  		clr.w	$3A(a0)
000108D8                            
000108D8                            Obj56_Action:				; XREF: Obj56_Index
000108D8 3F28 0008                  		move.w	8(a0),-(sp)
000108DC 7000                       		moveq	#0,d0
000108DE 1028 0028                  		move.b	$28(a0),d0	; get object type
000108E2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000108E6 D040                       		add.w	d0,d0
000108E8 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000108EC 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000108F0 381F                       		move.w	(sp)+,d4
000108F2 4A28 0001                  		tst.b	1(a0)
000108F6 6A00                       		bpl.s	Obj56_ChkDel
000108F8 7200                       		moveq	#0,d1
000108FA 1228 0019                  		move.b	$19(a0),d1
000108FE 0641 000B                  		addi.w	#$B,d1
00010902 7400                       		moveq	#0,d2
00010904 1428 0016                  		move.b	$16(a0),d2
00010908 3602                       		move.w	d2,d3
0001090A 5243                       		addq.w	#1,d3
0001090C 6100 F62E                  		bsr.w	SolidObject
00010910                            
00010910                            Obj56_ChkDel:
00010910 3028 0034                  		move.w	$34(a0),d0
00010914 0240 FF80                  		andi.w	#$FF80,d0
00010918 3238 F700                  		move.w	($FFFFF700).w,d1
0001091C 0441 0080                  		subi.w	#$80,d1
00010920 0241 FF80                  		andi.w	#$FF80,d1
00010924 9041                       		sub.w	d1,d0
00010926 0C40 0280                  		cmpi.w	#$280,d0
0001092A 6200 D27C                  		bhi.w	DeleteObject
0001092E 6000 D23C                  		bra.w	DisplaySprite
00010932                            ; ===========================================================================
00010932 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010936 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001093A 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001093E 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010942 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010946 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001094A 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001094E                            ; ===========================================================================
0001094E                            
0001094E                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001094E 4E75                       		rts	
00010950                            ; ===========================================================================
00010950                            
00010950                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010950 323C 0040                  		move.w	#$40,d1
00010954 7000                       		moveq	#0,d0
00010956 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001095A 6000                       		bra.s	Obj56_Move_LR
0001095C                            ; ===========================================================================
0001095C                            
0001095C                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001095C 323C 0080                  		move.w	#$80,d1
00010960 7000                       		moveq	#0,d0
00010962 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010966                            
00010966                            Obj56_Move_LR:
00010966 0828 0000 0022             		btst	#0,$22(a0)
0001096C 6700                       		beq.s	loc_10416
0001096E 4440                       		neg.w	d0
00010970 D041                       		add.w	d1,d0
00010972                            
00010972                            loc_10416:
00010972 3228 0034                  		move.w	$34(a0),d1
00010976 9240                       		sub.w	d0,d1
00010978 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001097C 4E75                       		rts	
0001097E                            ; ===========================================================================
0001097E                            
0001097E                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001097E 323C 0040                  		move.w	#$40,d1
00010982 7000                       		moveq	#0,d0
00010984 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010988 6000                       		bra.s	Obj56_Move_UD
0001098A                            ; ===========================================================================
0001098A                            
0001098A                            Obj56_Type04:				; XREF: Obj56_TypeIndex
0001098A 323C 0080                  		move.w	#$80,d1
0001098E 7000                       		moveq	#0,d0
00010990 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010994                            
00010994                            Obj56_Move_UD:
00010994 0828 0000 0022             		btst	#0,$22(a0)
0001099A 6700                       		beq.s	loc_10444
0001099C 4440                       		neg.w	d0
0001099E D041                       		add.w	d1,d0
000109A0                            
000109A0                            loc_10444:
000109A0 3228 0030                  		move.w	$30(a0),d1
000109A4 9240                       		sub.w	d0,d1
000109A6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109AA 4E75                       		rts	
000109AC                            ; ===========================================================================
000109AC                            
000109AC                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000109AC 4A28 0038                  		tst.b	$38(a0)
000109B0 6600                       		bne.s	loc_104A4
000109B2 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109B8 6600                       		bne.s	loc_1047A	; if not, branch
000109BA 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000109C0 6600                       		bne.s	loc_1047A
000109C2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000109C6 3038 D008                  		move.w	($FFFFD008).w,d0
000109CA B068 0008                  		cmp.w	8(a0),d0
000109CE 6400                       		bcc.s	loc_1047A
000109D0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000109D6                            
000109D6                            loc_1047A:
000109D6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000109DA 7000                       		moveq	#0,d0
000109DC 1028 003C                  		move.b	$3C(a0),d0
000109E0 0832 0000 0000             		btst	#0,(a2,d0.w)
000109E6 6700                       		beq.s	loc_104AE
000109E8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109EE 6600                       		bne.s	loc_1049E	; if not, branch
000109F0 0C00 0003                  		cmpi.b	#3,d0
000109F4 6600                       		bne.s	loc_1049E
000109F6 4238 F7C9                  		clr.b	($FFFFF7C9).w
000109FA                            
000109FA                            loc_1049E:
000109FA 117C 0001 0038             		move.b	#1,$38(a0)
00010A00                            
00010A00                            loc_104A4:
00010A00 4A68 003A                  		tst.w	$3A(a0)
00010A04 6700                       		beq.s	loc_104C8
00010A06 5568 003A                  		subq.w	#2,$3A(a0)
00010A0A                            
00010A0A                            loc_104AE:
00010A0A 3028 003A                  		move.w	$3A(a0),d0
00010A0E 0828 0000 0022             		btst	#0,$22(a0)
00010A14 6700                       		beq.s	loc_104BC
00010A16 4440                       		neg.w	d0
00010A18                            
00010A18                            loc_104BC:
00010A18 3228 0030                  		move.w	$30(a0),d1
00010A1C D240                       		add.w	d0,d1
00010A1E 3141 000C                  		move.w	d1,$C(a0)
00010A22 4E75                       		rts	
00010A24                            ; ===========================================================================
00010A24                            
00010A24                            loc_104C8:
00010A24 5228 0028                  		addq.b	#1,$28(a0)
00010A28 4228 0038                  		clr.b	$38(a0)
00010A2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A30 7000                       		moveq	#0,d0
00010A32 1028 0023                  		move.b	$23(a0),d0
00010A36 67D2                       		beq.s	loc_104AE
00010A38 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A3E 60CA                       		bra.s	loc_104AE
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A40 4A28 0038                  		tst.b	$38(a0)
00010A44 6600                       		bne.s	loc_10500
00010A46 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A4A 7000                       		moveq	#0,d0
00010A4C 1028 003C                  		move.b	$3C(a0),d0
00010A50 4A32 0000                  		tst.b	(a2,d0.w)
00010A54 6A00                       		bpl.s	loc_10512
00010A56 117C 0001 0038             		move.b	#1,$38(a0)
00010A5C                            
00010A5C                            loc_10500:
00010A5C 7000                       		moveq	#0,d0
00010A5E 1028 0016                  		move.b	$16(a0),d0
00010A62 D040                       		add.w	d0,d0
00010A64 B068 003A                  		cmp.w	$3A(a0),d0
00010A68 6700                       		beq.s	loc_1052C
00010A6A 5468 003A                  		addq.w	#2,$3A(a0)
00010A6E                            
00010A6E                            loc_10512:
00010A6E 3028 003A                  		move.w	$3A(a0),d0
00010A72 0828 0000 0022             		btst	#0,$22(a0)
00010A78 6700                       		beq.s	loc_10520
00010A7A 4440                       		neg.w	d0
00010A7C                            
00010A7C                            loc_10520:
00010A7C 3228 0030                  		move.w	$30(a0),d1
00010A80 D240                       		add.w	d0,d1
00010A82 3141 000C                  		move.w	d1,$C(a0)
00010A86 4E75                       		rts	
00010A88                            ; ===========================================================================
00010A88                            
00010A88                            loc_1052C:
00010A88 5328 0028                  		subq.b	#1,$28(a0)
00010A8C 4228 0038                  		clr.b	$38(a0)
00010A90 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A94 7000                       		moveq	#0,d0
00010A96 1028 0023                  		move.b	$23(a0),d0
00010A9A 67D2                       		beq.s	loc_10512
00010A9C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010AA2 60CA                       		bra.s	loc_10512
00010AA4                            ; ===========================================================================
00010AA4                            
00010AA4                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010AA4 4A28 0038                  		tst.b	$38(a0)
00010AA8 6600                       		bne.s	loc_1055E
00010AAA 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010AAE 6700                       		beq.s	locret_10578
00010AB0 117C 0001 0038             		move.b	#1,$38(a0)
00010AB6 4268 003A                  		clr.w	$3A(a0)
00010ABA                            
00010ABA                            loc_1055E:
00010ABA 5268 0008                  		addq.w	#1,8(a0)
00010ABE 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AC4 5268 003A                  		addq.w	#1,$3A(a0)
00010AC8 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010ACE 6600                       		bne.s	locret_10578
00010AD0 4228 0028                  		clr.b	$28(a0)
00010AD4                            
00010AD4                            locret_10578:
00010AD4 4E75                       		rts	
00010AD6                            ; ===========================================================================
00010AD6                            
00010AD6                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010AD6 4A28 0038                  		tst.b	$38(a0)
00010ADA 6600                       		bne.s	loc_10598
00010ADC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AE0 7000                       		moveq	#0,d0
00010AE2 1028 003C                  		move.b	$3C(a0),d0
00010AE6 0832 0000 0000             		btst	#0,(a2,d0.w)
00010AEC 6700                       		beq.s	loc_105A2
00010AEE 117C 0001 0038             		move.b	#1,$38(a0)
00010AF4                            
00010AF4                            loc_10598:
00010AF4 4A68 003A                  		tst.w	$3A(a0)
00010AF8 6700                       		beq.s	loc_105C0
00010AFA 5568 003A                  		subq.w	#2,$3A(a0)
00010AFE                            
00010AFE                            loc_105A2:
00010AFE 3028 003A                  		move.w	$3A(a0),d0
00010B02 0828 0000 0022             		btst	#0,$22(a0)
00010B08 6700                       		beq.s	loc_105B4
00010B0A 4440                       		neg.w	d0
00010B0C 0640 0080                  		addi.w	#$80,d0
00010B10                            
00010B10                            loc_105B4:
00010B10 3228 0034                  		move.w	$34(a0),d1
00010B14 D240                       		add.w	d0,d1
00010B16 3141 0008                  		move.w	d1,8(a0)
00010B1A 4E75                       		rts	
00010B1C                            ; ===========================================================================
00010B1C                            
00010B1C                            loc_105C0:
00010B1C 5228 0028                  		addq.b	#1,$28(a0)
00010B20 4228 0038                  		clr.b	$38(a0)
00010B24 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B28 7000                       		moveq	#0,d0
00010B2A 1028 0023                  		move.b	$23(a0),d0
00010B2E 67CE                       		beq.s	loc_105A2
00010B30 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B36 60C6                       		bra.s	loc_105A2
00010B38                            ; ===========================================================================
00010B38                            
00010B38                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B38 4A28 0038                  		tst.b	$38(a0)
00010B3C 6600                       		bne.s	loc_105F8
00010B3E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B42 7000                       		moveq	#0,d0
00010B44 1028 003C                  		move.b	$3C(a0),d0
00010B48 4A32 0000                  		tst.b	(a2,d0.w)
00010B4C 6A00                       		bpl.s	loc_10606
00010B4E 117C 0001 0038             		move.b	#1,$38(a0)
00010B54                            
00010B54                            loc_105F8:
00010B54 303C 0080                  		move.w	#$80,d0
00010B58 B068 003A                  		cmp.w	$3A(a0),d0
00010B5C 6700                       		beq.s	loc_10624
00010B5E 5468 003A                  		addq.w	#2,$3A(a0)
00010B62                            
00010B62                            loc_10606:
00010B62 3028 003A                  		move.w	$3A(a0),d0
00010B66 0828 0000 0022             		btst	#0,$22(a0)
00010B6C 6700                       		beq.s	loc_10618
00010B6E 4440                       		neg.w	d0
00010B70 0640 0080                  		addi.w	#$80,d0
00010B74                            
00010B74                            loc_10618:
00010B74 3228 0034                  		move.w	$34(a0),d1
00010B78 D240                       		add.w	d0,d1
00010B7A 3141 0008                  		move.w	d1,8(a0)
00010B7E 4E75                       		rts	
00010B80                            ; ===========================================================================
00010B80                            
00010B80                            loc_10624:
00010B80 5328 0028                  		subq.b	#1,$28(a0)
00010B84 4228 0038                  		clr.b	$38(a0)
00010B88 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B8C 7000                       		moveq	#0,d0
00010B8E 1028 0023                  		move.b	$23(a0),d0
00010B92 67CE                       		beq.s	loc_10606
00010B94 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010B9A 60C6                       		bra.s	loc_10606
00010B9C                            ; ===========================================================================
00010B9C                            
00010B9C                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010B9C 323C 0010                  		move.w	#$10,d1
00010BA0 7000                       		moveq	#0,d0
00010BA2 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010BA6 E248                       		lsr.w	#1,d0
00010BA8 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010BAC 6000                       		bra.s	Obj56_Move_Sqr
00010BAE                            ; ===========================================================================
00010BAE                            
00010BAE                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010BAE 323C 0030                  		move.w	#$30,d1
00010BB2 7000                       		moveq	#0,d0
00010BB4 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010BB8 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010BBC 6000                       		bra.s	Obj56_Move_Sqr
00010BBE                            ; ===========================================================================
00010BBE                            
00010BBE                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010BBE 323C 0050                  		move.w	#$50,d1
00010BC2 7000                       		moveq	#0,d0
00010BC4 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010BC8 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010BCC 6000                       		bra.s	Obj56_Move_Sqr
00010BCE                            ; ===========================================================================
00010BCE                            
00010BCE                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010BCE 323C 0070                  		move.w	#$70,d1
00010BD2 7000                       		moveq	#0,d0
00010BD4 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010BD8 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010BDC                            
00010BDC                            Obj56_Move_Sqr:
00010BDC 4A43                       		tst.w	d3
00010BDE 6600                       		bne.s	loc_1068E
00010BE0 5228 0022                  		addq.b	#1,$22(a0)
00010BE4 0228 0003 0022             		andi.b	#3,$22(a0)
00010BEA                            
00010BEA                            loc_1068E:
00010BEA 1428 0022                  		move.b	$22(a0),d2
00010BEE 0202 0003                  		andi.b	#3,d2
00010BF2 6600                       		bne.s	loc_106AE
00010BF4 9041                       		sub.w	d1,d0
00010BF6 D068 0034                  		add.w	$34(a0),d0
00010BFA 3140 0008                  		move.w	d0,8(a0)
00010BFE 4441                       		neg.w	d1
00010C00 D268 0030                  		add.w	$30(a0),d1
00010C04 3141 000C                  		move.w	d1,$C(a0)
00010C08 4E75                       		rts	
00010C0A                            ; ===========================================================================
00010C0A                            
00010C0A                            loc_106AE:
00010C0A 5302                       		subq.b	#1,d2
00010C0C 6600                       		bne.s	loc_106CC
00010C0E 5341                       		subq.w	#1,d1
00010C10 9041                       		sub.w	d1,d0
00010C12 4440                       		neg.w	d0
00010C14 D068 0030                  		add.w	$30(a0),d0
00010C18 3140 000C                  		move.w	d0,$C(a0)
00010C1C 5241                       		addq.w	#1,d1
00010C1E D268 0034                  		add.w	$34(a0),d1
00010C22 3141 0008                  		move.w	d1,8(a0)
00010C26 4E75                       		rts	
00010C28                            ; ===========================================================================
00010C28                            
00010C28                            loc_106CC:
00010C28 5302                       		subq.b	#1,d2
00010C2A 6600                       		bne.s	loc_106EA
00010C2C 5341                       		subq.w	#1,d1
00010C2E 9041                       		sub.w	d1,d0
00010C30 4440                       		neg.w	d0
00010C32 D068 0034                  		add.w	$34(a0),d0
00010C36 3140 0008                  		move.w	d0,8(a0)
00010C3A 5241                       		addq.w	#1,d1
00010C3C D268 0030                  		add.w	$30(a0),d1
00010C40 3141 000C                  		move.w	d1,$C(a0)
00010C44 4E75                       		rts	
00010C46                            ; ===========================================================================
00010C46                            
00010C46                            loc_106EA:
00010C46 9041                       		sub.w	d1,d0
00010C48 D068 0030                  		add.w	$30(a0),d0
00010C4C 3140 000C                  		move.w	d0,$C(a0)
00010C50 4441                       		neg.w	d1
00010C52 D268 0034                  		add.w	$34(a0),d1
00010C56 3141 0008                  		move.w	d1,8(a0)
00010C5A 4E75                       		rts	
00010C5C                            ; ===========================================================================
00010C5C                            ; ---------------------------------------------------------------------------
00010C5C                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C5C                            ; ---------------------------------------------------------------------------
00010C5C                            Map_obj56:
00010C5C                            	include "_maps\obj56.asm"
00010C5C                            ; ---------------------------------------------------------------------------
00010C5C                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C5C                            ; ---------------------------------------------------------------------------
00010C5C 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010C60 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010C64 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010C68 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010C6C 01                         byte_10710:	dc.b 1
00010C6D F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010C72 04                         byte_10716:	dc.b 4
00010C73 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010C78 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010C7D 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010C82 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010C87 02                         byte_1072B:	dc.b 2
00010C88 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010C8D 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010C92 04                         byte_10736:	dc.b 4
00010C93 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010C98 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010C9D 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010CA2 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010CA7 03                         byte_1074B:	dc.b 3
00010CA8 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010CAD F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010CB2 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010CB7 01                         byte_1075B:	dc.b 1
00010CB8 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010CBD 02                         byte_10761:	dc.b 2
00010CBE E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010CC3 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010CC8 04                         byte_1076C:	dc.b 4
00010CC9 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010CCE F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010CD3 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010CD8 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010CDE 00                         		even
00010CDE 00                         		even
00010CDE                            
00010CDE                            ; ===========================================================================
00010CDE                            ; ---------------------------------------------------------------------------
00010CDE                            ; Object 57 - spiked balls (SYZ, LZ)
00010CDE                            ; ---------------------------------------------------------------------------
00010CDE                            
00010CDE                            Obj57:					; XREF: Obj_Index
00010CDE 7000                       		moveq	#0,d0
00010CE0 1028 0024                  		move.b	$24(a0),d0
00010CE4 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010CE8 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010CEC                            ; ===========================================================================
00010CEC 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010CEE 0000                       		dc.w Obj57_Move-Obj57_Index
00010CF0 0000                       		dc.w Obj57_Display-Obj57_Index
00010CF2                            ; ===========================================================================
00010CF2                            
00010CF2                            Obj57_Main:				; XREF: Obj57_Index
00010CF2 5428 0024                  		addq.b	#2,$24(a0)
00010CF6 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010CFE 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D04 117C 0004 0001             		move.b	#4,1(a0)
00010D0A 117C 0004 0018             		move.b	#4,$18(a0)
00010D10 117C 0008 0019             		move.b	#8,$19(a0)
00010D16 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D1C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D22 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D28 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D2E 6600                       		bne.s	loc_107E8
00010D30 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D36 317C 0310 0002             		move.w	#$310,2(a0)
00010D3C 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D44                            
00010D44                            loc_107E8:
00010D44 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D48 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D4C 4881                       		ext.w	d1
00010D4E E741                       		asl.w	#3,d1		; multiply by 8
00010D50 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D54 1028 0022                  		move.b	$22(a0),d0
00010D58 E418                       		ror.b	#2,d0
00010D5A 0200 00C0                  		andi.b	#-$40,d0
00010D5E 1140 0026                  		move.b	d0,$26(a0)
00010D62 45E8 0029                  		lea	$29(a0),a2
00010D66 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D6A 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010D6E 14FC 0000                  		move.b	#0,(a2)+
00010D72 3601                       		move.w	d1,d3
00010D74 E94B                       		lsl.w	#4,d3
00010D76 1143 003C                  		move.b	d3,$3C(a0)
00010D7A 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010D7C 6500                       		bcs.s	loc_10894
00010D7E 0828 0003 0028             		btst	#3,$28(a0)
00010D84 6700                       		beq.s	Obj57_MakeChain
00010D86 5341                       		subq.w	#1,d1
00010D88 6500                       		bcs.s	loc_10894
00010D8A                            
00010D8A                            Obj57_MakeChain:
00010D8A 6100 D266                  		bsr.w	SingleObjLoad
00010D8E 6600                       		bne.s	loc_10894
00010D90 5228 0029                  		addq.b	#1,$29(a0)
00010D94 3A09                       		move.w	a1,d5
00010D96 0445 D000                  		subi.w	#-$3000,d5
00010D9A EC4D                       		lsr.w	#6,d5
00010D9C 0245 007F                  		andi.w	#$7F,d5
00010DA0 14C5                       		move.b	d5,(a2)+
00010DA2 137C 0004 0024             		move.b	#4,$24(a1)
00010DA8 1290                       		move.b	0(a0),0(a1)
00010DAA 2368 0004 0004             		move.l	4(a0),4(a1)
00010DB0 3368 0002 0002             		move.w	2(a0),2(a1)
00010DB6 1368 0001 0001             		move.b	1(a0),1(a1)
00010DBC 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010DC2 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010DC8 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010DCE 0403 0010                  		subi.b	#$10,d3
00010DD2 1343 003C                  		move.b	d3,$3C(a1)
00010DD6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010DDC 6600                       		bne.s	loc_10890
00010DDE 4A03                       		tst.b	d3
00010DE0 6600                       		bne.s	loc_10890
00010DE2 137C 0002 001A             		move.b	#2,$1A(a1)
00010DE8                            
00010DE8                            loc_10890:
00010DE8 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010DEC                            
00010DEC                            loc_10894:
00010DEC 3A08                       		move.w	a0,d5
00010DEE 0445 D000                  		subi.w	#-$3000,d5
00010DF2 EC4D                       		lsr.w	#6,d5
00010DF4 0245 007F                  		andi.w	#$7F,d5
00010DF8 14C5                       		move.b	d5,(a2)+
00010DFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E00 6600                       		bne.s	Obj57_Move
00010E02 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E08 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E0E                            
00010E0E                            Obj57_Move:				; XREF: Obj57_Index
00010E0E 6100 0000                  		bsr.w	Obj57_MoveSub
00010E12 6000 0000                  		bra.w	Obj57_ChkDel
00010E16                            ; ===========================================================================
00010E16                            
00010E16                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E16 3028 003E                  		move.w	$3E(a0),d0
00010E1A D168 0026                  		add.w	d0,$26(a0)
00010E1E 1028 0026                  		move.b	$26(a0),d0
00010E22 4EB9 0000 2C22             		jsr	(CalcSine).l
00010E28 3428 0038                  		move.w	$38(a0),d2
00010E2C 3628 003A                  		move.w	$3A(a0),d3
00010E30 45E8 0029                  		lea	$29(a0),a2
00010E34 7C00                       		moveq	#0,d6
00010E36 1C1A                       		move.b	(a2)+,d6
00010E38                            
00010E38                            Obj57_MoveLoop:
00010E38 7800                       		moveq	#0,d4
00010E3A 181A                       		move.b	(a2)+,d4
00010E3C ED4C                       		lsl.w	#6,d4
00010E3E 0684 00FF D000             		addi.l	#$FFD000,d4
00010E44 2244                       		movea.l	d4,a1
00010E46 7800                       		moveq	#0,d4
00010E48 1829 003C                  		move.b	$3C(a1),d4
00010E4C 2A04                       		move.l	d4,d5
00010E4E C9C0                       		muls.w	d0,d4
00010E50 E084                       		asr.l	#8,d4
00010E52 CBC1                       		muls.w	d1,d5
00010E54 E085                       		asr.l	#8,d5
00010E56 D842                       		add.w	d2,d4
00010E58 DA43                       		add.w	d3,d5
00010E5A 3344 000C                  		move.w	d4,$C(a1)
00010E5E 3345 0008                  		move.w	d5,8(a1)
00010E62 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010E66 4E75                       		rts	
00010E68                            ; ===========================================================================
00010E68                            
00010E68                            Obj57_ChkDel:				; XREF: Obj57_Move
00010E68 3028 003A                  		move.w	$3A(a0),d0
00010E6C 0240 FF80                  		andi.w	#$FF80,d0
00010E70 3238 F700                  		move.w	($FFFFF700).w,d1
00010E74 0441 0080                  		subi.w	#$80,d1
00010E78 0241 FF80                  		andi.w	#$FF80,d1
00010E7C 9041                       		sub.w	d1,d0
00010E7E 0C40 0280                  		cmpi.w	#$280,d0
00010E82 6200 0000                  		bhi.w	Obj57_Delete
00010E86 6000 CCE4                  		bra.w	DisplaySprite
00010E8A                            ; ===========================================================================
00010E8A                            
00010E8A                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010E8A 7400                       		moveq	#0,d2
00010E8C 45E8 0029                  		lea	$29(a0),a2
00010E90 141A                       		move.b	(a2)+,d2
00010E92                            
00010E92                            Obj57_DelLoop:
00010E92 7000                       		moveq	#0,d0
00010E94 101A                       		move.b	(a2)+,d0
00010E96 ED48                       		lsl.w	#6,d0
00010E98 0680 00FF D000             		addi.l	#$FFD000,d0
00010E9E 2240                       		movea.l	d0,a1
00010EA0 6100 CD08                  		bsr.w	DeleteObject2
00010EA4 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010EA8                            
00010EA8 4E75                       		rts	
00010EAA                            ; ===========================================================================
00010EAA                            
00010EAA                            Obj57_Display:				; XREF: Obj57_Index
00010EAA 6000 CCC0                  		bra.w	DisplaySprite
00010EAE                            ; ===========================================================================
00010EAE                            ; ---------------------------------------------------------------------------
00010EAE                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EAE                            ; ---------------------------------------------------------------------------
00010EAE                            Map_obj57:
00010EAE                            	include "_maps\obj57syz.asm"
00010EAE                            ; ---------------------------------------------------------------------------
00010EAE                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EAE                            ; ---------------------------------------------------------------------------
00010EAE 0000                       		dc.w byte_10958-Map_obj57
00010EB0 01                         byte_10958:	dc.b 1
00010EB1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EB6                            		even
00010EB6                            		even
00010EB6                            
00010EB6                            ; ---------------------------------------------------------------------------
00010EB6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EB6                            ; ---------------------------------------------------------------------------
00010EB6                            Map_obj57a:
00010EB6                            	include "_maps\obj57lz.asm"
00010EB6                            ; ---------------------------------------------------------------------------
00010EB6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EB6                            ; ---------------------------------------------------------------------------
00010EB6 0000                       		dc.w byte_10964-Map_obj57a
00010EB8 0000                       		dc.w byte_1096A-Map_obj57a
00010EBA 0000                       		dc.w byte_10970-Map_obj57a
00010EBC 01                         byte_10964:	dc.b 1
00010EBD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EC2 01                         byte_1096A:	dc.b 1
00010EC3 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010EC8 01                         byte_10970:	dc.b 1
00010EC9 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010ECE                            		even
00010ECE                            		even
00010ECE                            
00010ECE                            ; ===========================================================================
00010ECE                            ; ---------------------------------------------------------------------------
00010ECE                            ; Object 58 - giant spiked balls (SYZ)
00010ECE                            ; ---------------------------------------------------------------------------
00010ECE                            
00010ECE                            Obj58:					; XREF: Obj_Index
00010ECE 7000                       		moveq	#0,d0
00010ED0 1028 0024                  		move.b	$24(a0),d0
00010ED4 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010ED8 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010EDC                            ; ===========================================================================
00010EDC 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010EDE 0000                       		dc.w Obj58_Move-Obj58_Index
00010EE0                            ; ===========================================================================
00010EE0                            
00010EE0                            Obj58_Main:				; XREF: Obj58_Index
00010EE0 5428 0024                  		addq.b	#2,$24(a0)
00010EE4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010EEC 317C 0396 0002             		move.w	#$396,2(a0)
00010EF2 117C 0004 0001             		move.b	#4,1(a0)
00010EF8 117C 0004 0018             		move.b	#4,$18(a0)
00010EFE 117C 0018 0019             		move.b	#$18,$19(a0)
00010F04 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F0A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F10 117C 0086 0020             		move.b	#$86,$20(a0)
00010F16 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F1A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F1E 4881                       		ext.w	d1
00010F20 E741                       		asl.w	#3,d1		; multiply by 8
00010F22 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F26 1028 0022                  		move.b	$22(a0),d0
00010F2A E418                       		ror.b	#2,d0
00010F2C 0200 00C0                  		andi.b	#$C0,d0
00010F30 1140 0026                  		move.b	d0,$26(a0)
00010F34 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F3A                            
00010F3A                            Obj58_Move:				; XREF: Obj58_Index
00010F3A 7000                       		moveq	#0,d0
00010F3C 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F40 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F44 D040                       		add.w	d0,d0
00010F46 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F4A 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F4E 3028 003A                  		move.w	$3A(a0),d0
00010F52 0240 FF80                  		andi.w	#$FF80,d0
00010F56 3238 F700                  		move.w	($FFFFF700).w,d1
00010F5A 0441 0080                  		subi.w	#$80,d1
00010F5E 0241 FF80                  		andi.w	#$FF80,d1
00010F62 9041                       		sub.w	d1,d0
00010F64 0C40 0280                  		cmpi.w	#$280,d0
00010F68 6200 CC3E                  		bhi.w	DeleteObject
00010F6C 6000 CBFE                  		bra.w	DisplaySprite
00010F70                            ; ===========================================================================
00010F70 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010F72 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010F74 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010F76 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010F78                            ; ===========================================================================
00010F78                            
00010F78                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010F78 4E75                       		rts	
00010F7A                            ; ===========================================================================
00010F7A                            
00010F7A                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010F7A 323C 0060                  		move.w	#$60,d1
00010F7E 7000                       		moveq	#0,d0
00010F80 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010F84 0828 0000 0022             		btst	#0,$22(a0)
00010F8A 6700                       		beq.s	loc_10A38
00010F8C 4440                       		neg.w	d0
00010F8E D041                       		add.w	d1,d0
00010F90                            
00010F90                            loc_10A38:
00010F90 3228 003A                  		move.w	$3A(a0),d1
00010F94 9240                       		sub.w	d0,d1
00010F96 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F9A 4E75                       		rts	
00010F9C                            ; ===========================================================================
00010F9C                            
00010F9C                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010F9C 323C 0060                  		move.w	#$60,d1
00010FA0 7000                       		moveq	#0,d0
00010FA2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FA6 0828 0000 0022             		btst	#0,$22(a0)
00010FAC 6700                       		beq.s	loc_10A5C
00010FAE 4440                       		neg.w	d0
00010FB0 0640 0080                  		addi.w	#$80,d0
00010FB4                            
00010FB4                            loc_10A5C:
00010FB4 3228 0038                  		move.w	$38(a0),d1
00010FB8 9240                       		sub.w	d0,d1
00010FBA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010FBE 4E75                       		rts	
00010FC0                            ; ===========================================================================
00010FC0                            
00010FC0                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010FC0 3028 003E                  		move.w	$3E(a0),d0
00010FC4 D168 0026                  		add.w	d0,$26(a0)
00010FC8 1028 0026                  		move.b	$26(a0),d0
00010FCC 4EB9 0000 2C22             		jsr	(CalcSine).l
00010FD2 3428 0038                  		move.w	$38(a0),d2
00010FD6 3628 003A                  		move.w	$3A(a0),d3
00010FDA 7800                       		moveq	#0,d4
00010FDC 1828 003C                  		move.b	$3C(a0),d4
00010FE0 2A04                       		move.l	d4,d5
00010FE2 C9C0                       		muls.w	d0,d4
00010FE4 E084                       		asr.l	#8,d4
00010FE6 CBC1                       		muls.w	d1,d5
00010FE8 E085                       		asr.l	#8,d5
00010FEA D842                       		add.w	d2,d4
00010FEC DA43                       		add.w	d3,d5
00010FEE 3144 000C                  		move.w	d4,$C(a0)
00010FF2 3145 0008                  		move.w	d5,8(a0)
00010FF6 4E75                       		rts	
00010FF8                            ; ===========================================================================
00010FF8                            ; ---------------------------------------------------------------------------
00010FF8                            ; Sprite mappings - SBZ	spiked ball on a chain
00010FF8                            ; ---------------------------------------------------------------------------
00010FF8                            Map_obj15b:
00010FF8                            	include "_maps\obj15sbz.asm"
00010FF8                            ; ---------------------------------------------------------------------------
00010FF8                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010FF8                            ; ---------------------------------------------------------------------------
00010FF8 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010FFC 0000                       		dc.w byte_10AC6-Map_obj15b
00010FFE 05                         byte_10AA6:	dc.b 5
00010FFF E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011004 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011009 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001100E F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011013 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011018 01                         byte_10AC0:	dc.b 1
00011019 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001101E 02                         byte_10AC6:	dc.b 2
0001101F F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011024 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001102A 00                         		even
0001102A 00                         		even
0001102A                            
0001102A                            ; ===========================================================================
0001102A                            ; ---------------------------------------------------------------------------
0001102A                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001102A                            ; ---------------------------------------------------------------------------
0001102A                            
0001102A                            Obj59:					; XREF: Obj_Index
0001102A 7000                       		moveq	#0,d0
0001102C 1028 0024                  		move.b	$24(a0),d0
00011030 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011034 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011038 3028 0032                  		move.w	$32(a0),d0
0001103C 0240 FF80                  		andi.w	#$FF80,d0
00011040 3238 F700                  		move.w	($FFFFF700).w,d1
00011044 0441 0080                  		subi.w	#$80,d1
00011048 0241 FF80                  		andi.w	#$FF80,d1
0001104C 9041                       		sub.w	d1,d0
0001104E 0C40 0280                  		cmpi.w	#$280,d0
00011052 6200 CB54                  		bhi.w	DeleteObject
00011056 6000 CB14                  		bra.w	DisplaySprite
0001105A                            ; ===========================================================================
0001105A 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001105C 0000                       		dc.w Obj59_Platform-Obj59_Index
0001105E 0000                       		dc.w Obj59_Action-Obj59_Index
00011060 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011062                            
00011062 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011064                            
00011064 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011066 2001                       		dc.b $20, 1
00011068 3401                       		dc.b $34, 1
0001106A 1003                       		dc.b $10, 3
0001106C 2003                       		dc.b $20, 3
0001106E 3403                       		dc.b $34, 3
00011070 1401                       		dc.b $14, 1
00011072 2401                       		dc.b $24, 1
00011074 2C01                       		dc.b $2C, 1
00011076 1403                       		dc.b $14, 3
00011078 2403                       		dc.b $24, 3
0001107A 2C03                       		dc.b $2C, 3
0001107C 2005                       		dc.b $20, 5
0001107E 2007                       		dc.b $20, 7
00011080 3009                       		dc.b $30, 9
00011082                            ; ===========================================================================
00011082                            
00011082                            Obj59_Main:				; XREF: Obj59_Index
00011082 5428 0024                  		addq.b	#2,$24(a0)
00011086 7000                       		moveq	#0,d0
00011088 1028 0028                  		move.b	$28(a0),d0
0001108C 6A00                       		bpl.s	Obj59_Main2
0001108E 5828 0024                  		addq.b	#4,$24(a0)
00011092 0240 007F                  		andi.w	#$7F,d0
00011096 C0FC 0006                  		mulu.w	#6,d0
0001109A 3140 003C                  		move.w	d0,$3C(a0)
0001109E 3140 003E                  		move.w	d0,$3E(a0)
000110A2 588F                       		addq.l	#4,sp
000110A4 4E75                       		rts	
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            Obj59_Main2:
000110A6 E648                       		lsr.w	#3,d0
000110A8 0240 001E                  		andi.w	#$1E,d0
000110AC 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000110B0 115A 0019                  		move.b	(a2)+,$19(a0)
000110B4 115A 001A                  		move.b	(a2)+,$1A(a0)
000110B8 7000                       		moveq	#0,d0
000110BA 1028 0028                  		move.b	$28(a0),d0
000110BE D040                       		add.w	d0,d0
000110C0 0240 001E                  		andi.w	#$1E,d0
000110C4 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000110C8 101A                       		move.b	(a2)+,d0
000110CA E548                       		lsl.w	#2,d0
000110CC 3140 003C                  		move.w	d0,$3C(a0)
000110D0 115A 0028                  		move.b	(a2)+,$28(a0)
000110D4 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000110DC 317C 4000 0002             		move.w	#$4000,2(a0)
000110E2 117C 0004 0001             		move.b	#4,1(a0)
000110E8 117C 0004 0018             		move.b	#4,$18(a0)
000110EE 3168 0008 0032             		move.w	8(a0),$32(a0)
000110F4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000110FA                            
000110FA                            Obj59_Platform:				; XREF: Obj59_Index
000110FA 7200                       		moveq	#0,d1
000110FC 1228 0019                  		move.b	$19(a0),d1
00011100 4EB9 0000 789E             		jsr	(PlatformObject).l
00011106 6000 0000                  		bra.w	Obj59_Types
0001110A                            ; ===========================================================================
0001110A                            
0001110A                            Obj59_Action:				; XREF: Obj59_Index
0001110A 7200                       		moveq	#0,d1
0001110C 1228 0019                  		move.b	$19(a0),d1
00011110 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011116 3F28 0008                  		move.w	8(a0),-(sp)
0001111A 6100 0000                  		bsr.w	Obj59_Types
0001111E 341F                       		move.w	(sp)+,d2
00011120 4A10                       		tst.b	0(a0)
00011122 6700                       		beq.s	locret_10BD4
00011124 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
0001112A                            ; ===========================================================================
0001112A                            
0001112A                            locret_10BD4:
0001112A 4E75                       		rts	
0001112C                            ; ===========================================================================
0001112C                            
0001112C                            Obj59_Types:
0001112C 7000                       		moveq	#0,d0
0001112E 1028 0028                  		move.b	$28(a0),d0
00011132 0240 000F                  		andi.w	#$F,d0
00011136 D040                       		add.w	d0,d0
00011138 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001113C 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011140                            ; ===========================================================================
00011140 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011144 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011148 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001114C 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011150 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011154                            ; ===========================================================================
00011154                            
00011154                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011154 4E75                       		rts	
00011156                            ; ===========================================================================
00011156                            
00011156                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011156 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001115C 6600                       		bne.s	locret_10C0C
0001115E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011162                            
00011162                            locret_10C0C:
00011162 4E75                       		rts	
00011164                            ; ===========================================================================
00011164                            
00011164                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011164 6100 0000                  		bsr.w	Obj59_Move
00011168 3028 0034                  		move.w	$34(a0),d0
0001116C 4440                       		neg.w	d0
0001116E D068 0030                  		add.w	$30(a0),d0
00011172 3140 000C                  		move.w	d0,$C(a0)
00011176 4E75                       		rts	
00011178                            ; ===========================================================================
00011178                            
00011178                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011178 6100 0000                  		bsr.w	Obj59_Move
0001117C 3028 0034                  		move.w	$34(a0),d0
00011180 D068 0030                  		add.w	$30(a0),d0
00011184 3140 000C                  		move.w	d0,$C(a0)
00011188 4E75                       		rts	
0001118A                            ; ===========================================================================
0001118A                            
0001118A                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001118A 6100 0000                  		bsr.w	Obj59_Move
0001118E 3028 0034                  		move.w	$34(a0),d0
00011192 E240                       		asr.w	#1,d0
00011194 4440                       		neg.w	d0
00011196 D068 0030                  		add.w	$30(a0),d0
0001119A 3140 000C                  		move.w	d0,$C(a0)
0001119E 3028 0034                  		move.w	$34(a0),d0
000111A2 D068 0032                  		add.w	$32(a0),d0
000111A6 3140 0008                  		move.w	d0,8(a0)
000111AA 4E75                       		rts	
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000111AC 6100 0000                  		bsr.w	Obj59_Move
000111B0 3028 0034                  		move.w	$34(a0),d0
000111B4 E240                       		asr.w	#1,d0
000111B6 D068 0030                  		add.w	$30(a0),d0
000111BA 3140 000C                  		move.w	d0,$C(a0)
000111BE 3028 0034                  		move.w	$34(a0),d0
000111C2 4440                       		neg.w	d0
000111C4 D068 0032                  		add.w	$32(a0),d0
000111C8 3140 0008                  		move.w	d0,8(a0)
000111CC 4E75                       		rts	
000111CE                            ; ===========================================================================
000111CE                            
000111CE                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000111CE 6100 0000                  		bsr.w	Obj59_Move
000111D2 3028 0034                  		move.w	$34(a0),d0
000111D6 4440                       		neg.w	d0
000111D8 D068 0030                  		add.w	$30(a0),d0
000111DC 3140 000C                  		move.w	d0,$C(a0)
000111E0 4A28 0028                  		tst.b	$28(a0)
000111E4 6700 0000                  		beq.w	loc_10C94
000111E8 4E75                       		rts	
000111EA                            ; ===========================================================================
000111EA                            
000111EA                            loc_10C94:
000111EA 0828 0003 0022             		btst	#3,$22(a0)
000111F0 6700                       		beq.s	Obj59_Delete
000111F2 08E9 0001 0022             		bset	#1,$22(a1)
000111F8 08A9 0003 0022             		bclr	#3,$22(a1)
000111FE 137C 0002 0024             		move.b	#2,$24(a1)
00011204                            
00011204                            Obj59_Delete:
00011204 6000 C9A2                  		bra.w	DeleteObject
00011208                            
00011208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011208                            
00011208                            
00011208                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011208 3028 0038                  		move.w	$38(a0),d0
0001120C 4A28 003A                  		tst.b	$3A(a0)
00011210 6600                       		bne.s	loc_10CC8
00011212 0C40 0800                  		cmpi.w	#$800,d0
00011216 6400                       		bcc.s	loc_10CD0
00011218 0640 0010                  		addi.w	#$10,d0
0001121C 6000                       		bra.s	loc_10CD0
0001121E                            ; ===========================================================================
0001121E                            
0001121E                            loc_10CC8:
0001121E 4A40                       		tst.w	d0
00011220 6700                       		beq.s	loc_10CD0
00011222 0440 0010                  		subi.w	#$10,d0
00011226                            
00011226                            loc_10CD0:
00011226 3140 0038                  		move.w	d0,$38(a0)
0001122A 48C0                       		ext.l	d0
0001122C E180                       		asl.l	#8,d0
0001122E D0A8 0034                  		add.l	$34(a0),d0
00011232 2140 0034                  		move.l	d0,$34(a0)
00011236 4840                       		swap	d0
00011238 3428 003C                  		move.w	$3C(a0),d2
0001123C B042                       		cmp.w	d2,d0
0001123E 6300                       		bls.s	loc_10CF0
00011240 117C 0001 003A             		move.b	#1,$3A(a0)
00011246                            
00011246                            loc_10CF0:
00011246 D442                       		add.w	d2,d2
00011248 B042                       		cmp.w	d2,d0
0001124A 6600                       		bne.s	locret_10CFA
0001124C 4228 0028                  		clr.b	$28(a0)
00011250                            
00011250                            locret_10CFA:
00011250 4E75                       		rts	
00011252                            ; End of function Obj59_Move
00011252                            
00011252                            ; ===========================================================================
00011252                            
00011252                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011252 5368 003C                  		subq.w	#1,$3C(a0)
00011256 6600                       		bne.s	Obj59_ChkDel
00011258 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001125E 6100 CD92                  		bsr.w	SingleObjLoad
00011262 6600                       		bne.s	Obj59_ChkDel
00011264 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011268 3368 0008 0008             		move.w	8(a0),8(a1)
0001126E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011274 137C 000E 0028             		move.b	#$E,$28(a1)
0001127A                            
0001127A                            Obj59_ChkDel:
0001127A 588F                       		addq.l	#4,sp
0001127C 3028 0008                  		move.w	8(a0),d0
00011280 0240 FF80                  		andi.w	#$FF80,d0
00011284 3238 F700                  		move.w	($FFFFF700).w,d1
00011288 0441 0080                  		subi.w	#$80,d1
0001128C 0241 FF80                  		andi.w	#$FF80,d1
00011290 9041                       		sub.w	d1,d0
00011292 0C40 0280                  		cmpi.w	#$280,d0
00011296 6200 C910                  		bhi.w	DeleteObject
0001129A 4E75                       		rts	
0001129C                            ; ===========================================================================
0001129C                            ; ---------------------------------------------------------------------------
0001129C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001129C                            ; ---------------------------------------------------------------------------
0001129C                            Map_obj59:
0001129C                            	include "_maps\obj59.asm"
0001129C                            ; ---------------------------------------------------------------------------
0001129C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001129C                            ; ---------------------------------------------------------------------------
0001129C 0000                       		dc.w byte_10D4A-Map_obj59
0001129E 03                         byte_10D4A:	dc.b 3
0001129F F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000112A4 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000112A9 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000112AE                            		even
000112AE                            		even
000112AE                            
000112AE                            ; ===========================================================================
000112AE                            ; ---------------------------------------------------------------------------
000112AE                            ; Object 5A - platforms	moving in circles (SLZ)
000112AE                            ; ---------------------------------------------------------------------------
000112AE                            
000112AE                            Obj5A:					; XREF: Obj_Index
000112AE 7000                       		moveq	#0,d0
000112B0 1028 0024                  		move.b	$24(a0),d0
000112B4 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000112B8 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000112BC 3028 0032                  		move.w	$32(a0),d0
000112C0 0240 FF80                  		andi.w	#$FF80,d0
000112C4 3238 F700                  		move.w	($FFFFF700).w,d1
000112C8 0441 0080                  		subi.w	#$80,d1
000112CC 0241 FF80                  		andi.w	#$FF80,d1
000112D0 9041                       		sub.w	d1,d0
000112D2 0C40 0280                  		cmpi.w	#$280,d0
000112D6 6200 C8D0                  		bhi.w	DeleteObject
000112DA 6000 C890                  		bra.w	DisplaySprite
000112DE                            ; ===========================================================================
000112DE 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000112E0 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000112E2 0000                       		dc.w Obj5A_Action-Obj5A_Index
000112E4                            ; ===========================================================================
000112E4                            
000112E4                            Obj5A_Main:				; XREF: Obj5A_Index
000112E4 5428 0024                  		addq.b	#2,$24(a0)
000112E8 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000112F0 317C 4000 0002             		move.w	#$4000,2(a0)
000112F6 117C 0004 0001             		move.b	#4,1(a0)
000112FC 117C 0004 0018             		move.b	#4,$18(a0)
00011302 117C 0018 0019             		move.b	#$18,$19(a0)
00011308 3168 0008 0032             		move.w	8(a0),$32(a0)
0001130E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011314                            
00011314                            Obj5A_Platform:				; XREF: Obj5A_Index
00011314 7200                       		moveq	#0,d1
00011316 1228 0019                  		move.b	$19(a0),d1
0001131A 4EB9 0000 789E             		jsr	(PlatformObject).l
00011320 6000 0000                  		bra.w	Obj5A_Types
00011324                            ; ===========================================================================
00011324                            
00011324                            Obj5A_Action:				; XREF: Obj5A_Index
00011324 7200                       		moveq	#0,d1
00011326 1228 0019                  		move.b	$19(a0),d1
0001132A 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011330 3F28 0008                  		move.w	8(a0),-(sp)
00011334 6100 0000                  		bsr.w	Obj5A_Types
00011338 341F                       		move.w	(sp)+,d2
0001133A 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011340                            ; ===========================================================================
00011340                            
00011340                            Obj5A_Types:
00011340 7000                       		moveq	#0,d0
00011342 1028 0028                  		move.b	$28(a0),d0
00011346 0240 000C                  		andi.w	#$C,d0
0001134A E248                       		lsr.w	#1,d0
0001134C 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011350 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011354                            ; ===========================================================================
00011354 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011356 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011358                            ; ===========================================================================
00011358                            
00011358                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011358 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001135C 0401 0050                  		subi.b	#$50,d1
00011360 4881                       		ext.w	d1
00011362 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011366 0402 0050                  		subi.b	#$50,d2
0001136A 4882                       		ext.w	d2
0001136C 0828 0000 0028             		btst	#0,$28(a0)
00011372 6700                       		beq.s	loc_10E24
00011374 4441                       		neg.w	d1
00011376 4442                       		neg.w	d2
00011378                            
00011378                            loc_10E24:
00011378 0828 0001 0028             		btst	#1,$28(a0)
0001137E 6700                       		beq.s	loc_10E30
00011380 4441                       		neg.w	d1
00011382 C342                       		exg	d1,d2
00011384                            
00011384                            loc_10E30:
00011384 D268 0032                  		add.w	$32(a0),d1
00011388 3141 0008                  		move.w	d1,8(a0)
0001138C D468 0030                  		add.w	$30(a0),d2
00011390 3142 000C                  		move.w	d2,$C(a0)
00011394 4E75                       		rts	
00011396                            ; ===========================================================================
00011396                            
00011396                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011396 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001139A 0401 0050                  		subi.b	#$50,d1
0001139E 4881                       		ext.w	d1
000113A0 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113A4 0402 0050                  		subi.b	#$50,d2
000113A8 4882                       		ext.w	d2
000113AA 0828 0000 0028             		btst	#0,$28(a0)
000113B0 6700                       		beq.s	loc_10E62
000113B2 4441                       		neg.w	d1
000113B4 4442                       		neg.w	d2
000113B6                            
000113B6                            loc_10E62:
000113B6 0828 0001 0028             		btst	#1,$28(a0)
000113BC 6700                       		beq.s	loc_10E6E
000113BE 4441                       		neg.w	d1
000113C0 C342                       		exg	d1,d2
000113C2                            
000113C2                            loc_10E6E:
000113C2 4441                       		neg.w	d1
000113C4 D268 0032                  		add.w	$32(a0),d1
000113C8 3141 0008                  		move.w	d1,8(a0)
000113CC D468 0030                  		add.w	$30(a0),d2
000113D0 3142 000C                  		move.w	d2,$C(a0)
000113D4 4E75                       		rts	
000113D6                            ; ===========================================================================
000113D6                            ; ---------------------------------------------------------------------------
000113D6                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113D6                            ; ---------------------------------------------------------------------------
000113D6                            Map_obj5A:
000113D6                            	include "_maps\obj5A.asm"
000113D6                            ; ---------------------------------------------------------------------------
000113D6                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113D6                            ; ---------------------------------------------------------------------------
000113D6 0000                       		dc.w byte_10E84-Map_obj5A
000113D8 02                         byte_10E84:	dc.b 2
000113D9 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000113DE F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000113E4 00                         		even
000113E4 00                         		even
000113E4                            
000113E4                            ; ===========================================================================
000113E4                            ; ---------------------------------------------------------------------------
000113E4                            ; Object 5B - blocks that form a staircase (SLZ)
000113E4                            ; ---------------------------------------------------------------------------
000113E4                            
000113E4                            Obj5B:					; XREF: Obj_Index
000113E4 7000                       		moveq	#0,d0
000113E6 1028 0024                  		move.b	$24(a0),d0
000113EA 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000113EE 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000113F2 3028 0030                  		move.w	$30(a0),d0
000113F6 0240 FF80                  		andi.w	#$FF80,d0
000113FA 3238 F700                  		move.w	($FFFFF700).w,d1
000113FE 0441 0080                  		subi.w	#$80,d1
00011402 0241 FF80                  		andi.w	#$FF80,d1
00011406 9041                       		sub.w	d1,d0
00011408 0C40 0280                  		cmpi.w	#$280,d0
0001140C 6200 C79A                  		bhi.w	DeleteObject
00011410 6000 C75A                  		bra.w	DisplaySprite
00011414                            ; ===========================================================================
00011414 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011416 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011418 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001141A                            ; ===========================================================================
0001141A                            
0001141A                            Obj5B_Main:				; XREF: Obj5B_Index
0001141A 5428 0024                  		addq.b	#2,$24(a0)
0001141E 7638                       		moveq	#$38,d3
00011420 7801                       		moveq	#1,d4
00011422 0828 0000 0022             		btst	#0,$22(a0)
00011428 6700                       		beq.s	loc_10EDA
0001142A 763B                       		moveq	#$3B,d3
0001142C 78FF                       		moveq	#-1,d4
0001142E                            
0001142E                            loc_10EDA:
0001142E 3428 0008                  		move.w	8(a0),d2
00011432 2248                       		movea.l	a0,a1
00011434 7203                       		moveq	#3,d1
00011436 6000                       		bra.s	Obj5B_MakeBlocks
00011438                            ; ===========================================================================
00011438                            
00011438                            Obj5B_Loop:
00011438 6100 CBCE                  		bsr.w	SingleObjLoad2
0001143C 6600 0000                  		bne.w	Obj5B_Move
00011440 137C 0004 0024             		move.b	#4,$24(a1)
00011446                            
00011446                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011446 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001144A 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011452 337C 4000 0002             		move.w	#$4000,2(a1)
00011458 137C 0004 0001             		move.b	#4,1(a1)
0001145E 137C 0003 0018             		move.b	#3,$18(a1)
00011464 137C 0010 0019             		move.b	#$10,$19(a1)
0001146A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011470 3342 0008                  		move.w	d2,8(a1)
00011474 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001147A 3368 0008 0030             		move.w	8(a0),$30(a1)
00011480 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011486 0642 0020                  		addi.w	#$20,d2
0001148A 1343 0037                  		move.b	d3,$37(a1)
0001148E 2348 003C                  		move.l	a0,$3C(a1)
00011492 D604                       		add.b	d4,d3
00011494 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011498                            
00011498                            Obj5B_Move:				; XREF: Obj5B_Index
00011498 7000                       		moveq	#0,d0
0001149A 1028 0028                  		move.b	$28(a0),d0
0001149E 0240 0007                  		andi.w	#7,d0
000114A2 D040                       		add.w	d0,d0
000114A4 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000114A8 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000114AC                            
000114AC                            Obj5B_Solid:				; XREF: Obj5B_Index
000114AC 2468 003C                  		movea.l	$3C(a0),a2
000114B0 7000                       		moveq	#0,d0
000114B2 1028 0037                  		move.b	$37(a0),d0
000114B6 1032 0000                  		move.b	(a2,d0.w),d0
000114BA D068 0032                  		add.w	$32(a0),d0
000114BE 3140 000C                  		move.w	d0,$C(a0)
000114C2 7200                       		moveq	#0,d1
000114C4 1228 0019                  		move.b	$19(a0),d1
000114C8 0641 000B                  		addi.w	#$B,d1
000114CC 343C 0010                  		move.w	#$10,d2
000114D0 363C 0011                  		move.w	#$11,d3
000114D4 3828 0008                  		move.w	8(a0),d4
000114D8 6100 EA62                  		bsr.w	SolidObject
000114DC 4A04                       		tst.b	d4
000114DE 6A00                       		bpl.s	loc_10F92
000114E0 1544 0036                  		move.b	d4,$36(a2)
000114E4                            
000114E4                            loc_10F92:
000114E4 0828 0003 0022             		btst	#3,$22(a0)
000114EA 6700                       		beq.s	locret_10FA0
000114EC 157C 0001 0036             		move.b	#1,$36(a2)
000114F2                            
000114F2                            locret_10FA0:
000114F2 4E75                       		rts	
000114F4                            ; ===========================================================================
000114F4 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000114F6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000114F8 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000114FA 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000114FC                            ; ===========================================================================
000114FC                            
000114FC                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000114FC 4A68 0034                  		tst.w	$34(a0)
00011500 6600                       		bne.s	loc_10FC0
00011502 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011508 6600                       		bne.s	locret_10FBE
0001150A 317C 001E 0034             		move.w	#$1E,$34(a0)
00011510                            
00011510                            locret_10FBE:
00011510 4E75                       		rts	
00011512                            ; ===========================================================================
00011512                            
00011512                            loc_10FC0:
00011512 5368 0034                  		subq.w	#1,$34(a0)
00011516 66F8                       		bne.s	locret_10FBE
00011518 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001151C 4E75                       		rts	
0001151E                            ; ===========================================================================
0001151E                            
0001151E                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001151E 4A68 0034                  		tst.w	$34(a0)
00011522 6600                       		bne.s	loc_10FE0
00011524 4A28 0036                  		tst.b	$36(a0)
00011528 6A00                       		bpl.s	locret_10FDE
0001152A 317C 003C 0034             		move.w	#$3C,$34(a0)
00011530                            
00011530                            locret_10FDE:
00011530 4E75                       		rts	
00011532                            ; ===========================================================================
00011532                            
00011532                            loc_10FE0:
00011532 5368 0034                  		subq.w	#1,$34(a0)
00011536 6600                       		bne.s	loc_10FEC
00011538 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001153C 4E75                       		rts	
0001153E                            ; ===========================================================================
0001153E                            
0001153E                            loc_10FEC:
0001153E 43E8 0038                  		lea	$38(a0),a1
00011542 3028 0034                  		move.w	$34(a0),d0
00011546 E408                       		lsr.b	#2,d0
00011548 0200 0001                  		andi.b	#1,d0
0001154C 12C0                       		move.b	d0,(a1)+
0001154E 0A00 0001                  		eori.b	#1,d0
00011552 12C0                       		move.b	d0,(a1)+
00011554 0A00 0001                  		eori.b	#1,d0
00011558 12C0                       		move.b	d0,(a1)+
0001155A 0A00 0001                  		eori.b	#1,d0
0001155E 12C0                       		move.b	d0,(a1)+
00011560 4E75                       		rts	
00011562                            ; ===========================================================================
00011562                            
00011562                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011562 43E8 0038                  		lea	$38(a0),a1
00011566 0C11 0080                  		cmpi.b	#$80,(a1)
0001156A 6700                       		beq.s	locret_11038
0001156C 5211                       		addq.b	#1,(a1)
0001156E 7200                       		moveq	#0,d1
00011570 1219                       		move.b	(a1)+,d1
00011572 4841                       		swap	d1
00011574 E289                       		lsr.l	#1,d1
00011576 2401                       		move.l	d1,d2
00011578 E289                       		lsr.l	#1,d1
0001157A 2601                       		move.l	d1,d3
0001157C D682                       		add.l	d2,d3
0001157E 4841                       		swap	d1
00011580 4842                       		swap	d2
00011582 4843                       		swap	d3
00011584 12C3                       		move.b	d3,(a1)+
00011586 12C2                       		move.b	d2,(a1)+
00011588 12C1                       		move.b	d1,(a1)+
0001158A                            
0001158A                            locret_11038:
0001158A 4E75                       		rts	
0001158C 4E75                       		rts	
0001158E                            ; ===========================================================================
0001158E                            ; ---------------------------------------------------------------------------
0001158E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001158E                            ; ---------------------------------------------------------------------------
0001158E                            Map_obj5B:
0001158E                            	include "_maps\obj5B.asm"
0001158E                            ; ---------------------------------------------------------------------------
0001158E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001158E                            ; ---------------------------------------------------------------------------
0001158E 0000                       		dc.w byte_1103E-Map_obj5B
00011590 01                         byte_1103E:	dc.b 1
00011591 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011596                            		even
00011596                            		even
00011596                            
00011596                            ; ===========================================================================
00011596                            ; ---------------------------------------------------------------------------
00011596                            ; Object 5C - metal girders in foreground (SLZ)
00011596                            ; ---------------------------------------------------------------------------
00011596                            
00011596                            Obj5C:					; XREF: Obj_Index
00011596 7000                       		moveq	#0,d0
00011598 1028 0024                  		move.b	$24(a0),d0
0001159C 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000115A0 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000115A4                            ; ===========================================================================
000115A4 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000115A6 0000                       		dc.w Obj5C_Display-Obj5C_Index
000115A8                            ; ===========================================================================
000115A8                            
000115A8                            Obj5C_Main:				; XREF: Obj5C_Index
000115A8 5428 0024                  		addq.b	#2,$24(a0)
000115AC 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000115B4 317C 83CC 0002             		move.w	#$83CC,2(a0)
000115BA 117C 0010 0019             		move.b	#$10,$19(a0)
000115C0                            
000115C0                            Obj5C_Display:				; XREF: Obj5C_Index
000115C0 2238 F700                  		move.l	($FFFFF700).w,d1
000115C4 D281                       		add.l	d1,d1
000115C6 4841                       		swap	d1
000115C8 4441                       		neg.w	d1
000115CA 3141 0008                  		move.w	d1,8(a0)
000115CE 2238 F704                  		move.l	($FFFFF704).w,d1
000115D2 D281                       		add.l	d1,d1
000115D4 4841                       		swap	d1
000115D6 0241 003F                  		andi.w	#$3F,d1
000115DA 4441                       		neg.w	d1
000115DC 0641 0100                  		addi.w	#$100,d1
000115E0 3141 000A                  		move.w	d1,$A(a0)
000115E4 6000 C586                  		bra.w	DisplaySprite
000115E8                            ; ===========================================================================
000115E8                            ; ---------------------------------------------------------------------------
000115E8                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115E8                            ; ---------------------------------------------------------------------------
000115E8                            Map_obj5C:
000115E8                            	include "_maps\obj5C.asm"
000115E8                            ; ---------------------------------------------------------------------------
000115E8                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115E8                            ; ---------------------------------------------------------------------------
000115E8 0000                       		dc.w byte_11098-Map_obj5C
000115EA 09                         byte_11098:	dc.b 9
000115EB 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000115F0 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000115F5 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000115FA E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000115FF 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011604 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011609 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001160E 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011613 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011618                            		even
00011618                            		even
00011618                            
00011618                            ; ===========================================================================
00011618                            ; ---------------------------------------------------------------------------
00011618                            ; Object 1B - water surface (LZ)
00011618                            ; ---------------------------------------------------------------------------
00011618                            
00011618                            Obj1B:					; XREF: Obj_Index
00011618 7000                       		moveq	#0,d0
0001161A 1028 0024                  		move.b	$24(a0),d0
0001161E 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011622 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011626                            ; ===========================================================================
00011626 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011628 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001162A                            ; ===========================================================================
0001162A                            
0001162A                            Obj1B_Main:				; XREF: Obj1B_Index
0001162A 5428 0024                  		addq.b	#2,$24(a0)
0001162E 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011636 317C C300 0002             		move.w	#$C300,2(a0)
0001163C 117C 0004 0001             		move.b	#4,1(a0)
00011642 117C 0080 0019             		move.b	#$80,$19(a0)
00011648 3168 0008 0030             		move.w	8(a0),$30(a0)
0001164E                            
0001164E                            Obj1B_Action:				; XREF: Obj1B_Index
0001164E 3238 F700                  		move.w	($FFFFF700).w,d1
00011652 0241 FFE0                  		andi.w	#$FFE0,d1
00011656 D268 0030                  		add.w	$30(a0),d1
0001165A 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011660 6700                       		beq.s	loc_11114
00011662 0641 0020                  		addi.w	#$20,d1
00011666                            
00011666                            loc_11114:
00011666 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001166A 3238 F646                  		move.w	($FFFFF646).w,d1
0001166E 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011672 4A28 0032                  		tst.b	$32(a0)
00011676 6600                       		bne.s	Obj1B_Animate
00011678 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001167E 6700                       		beq.s	loc_1114A	; if not, branch
00011680 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011684 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001168A 6000                       		bra.s	Obj1B_Display
0001168C                            ; ===========================================================================
0001168C                            
0001168C                            Obj1B_Animate:				; XREF: loc_11114
0001168C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011690 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011692 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011698 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001169C                            
0001169C                            loc_1114A:				; XREF: loc_11114
0001169C 5328 001E                  		subq.b	#1,$1E(a0)
000116A0 6A00                       		bpl.s	Obj1B_Display
000116A2 117C 0007 001E             		move.b	#7,$1E(a0)
000116A8 5228 001A                  		addq.b	#1,$1A(a0)
000116AC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000116B2 6500                       		bcs.s	Obj1B_Display
000116B4 117C 0000 001A             		move.b	#0,$1A(a0)
000116BA                            
000116BA                            Obj1B_Display:
000116BA 6000 C4B0                  		bra.w	DisplaySprite
000116BE                            ; ===========================================================================
000116BE                            ; ---------------------------------------------------------------------------
000116BE                            ; Sprite mappings - water surface (LZ)
000116BE                            ; ---------------------------------------------------------------------------
000116BE                            Map_obj1B:
000116BE                            	include "_maps\obj1B.asm"
000116BE                            ; ---------------------------------------------------------------------------
000116BE                            ; Sprite mappings - water surface (LZ)
000116BE                            ; ---------------------------------------------------------------------------
000116BE 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000116C2 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000116C6 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000116CA 03                         byte_11178:	dc.b 3
000116CB FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000116D0 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000116D5 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000116DA 03                         byte_11188:	dc.b 3
000116DB FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000116E0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000116E5 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000116EA 03                         byte_11198:	dc.b 3
000116EB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000116F0 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000116F5 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000116FA 06                         byte_111A8:	dc.b 6
000116FB FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011700 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011705 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001170A FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001170F FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011714 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011719 06                         byte_111C7:	dc.b 6
0001171A FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001171F FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011724 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011729 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001172E FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011733 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011738 06                         byte_111E6:	dc.b 6
00011739 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001173E FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011743 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011748 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001174D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011752 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011758 00                         		even
00011758 00                         		even
00011758                            
00011758                            ; ===========================================================================
00011758                            ; ---------------------------------------------------------------------------
00011758                            ; Object 0B - pole that	breaks (LZ)
00011758                            ; ---------------------------------------------------------------------------
00011758                            
00011758                            Obj0B:					; XREF: Obj_Index
00011758 7000                       		moveq	#0,d0
0001175A 1028 0024                  		move.b	$24(a0),d0
0001175E 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011762 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011766                            ; ===========================================================================
00011766 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011768 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001176A 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001176C                            ; ===========================================================================
0001176C                            
0001176C                            Obj0B_Main:				; XREF: Obj0B_Index
0001176C 5428 0024                  		addq.b	#2,$24(a0)
00011770 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011778 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001177E 117C 0004 0001             		move.b	#4,1(a0)
00011784 117C 0008 0019             		move.b	#8,$19(a0)
0001178A 117C 0004 0018             		move.b	#4,$18(a0)
00011790 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011796 7000                       		moveq	#0,d0
00011798 1028 0028                  		move.b	$28(a0),d0	; get object type
0001179C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117A0 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000117A4                            
000117A4                            Obj0B_Action:				; XREF: Obj0B_Index
000117A4 4A28 0032                  		tst.b	$32(a0)
000117A8 6700                       		beq.s	Obj0B_Grab
000117AA 4A68 0030                  		tst.w	$30(a0)
000117AE 6700                       		beq.s	Obj0B_MoveUp
000117B0 5368 0030                  		subq.w	#1,$30(a0)
000117B4 6600                       		bne.s	Obj0B_MoveUp
000117B6 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000117BC 6000                       		bra.s	Obj0B_Release
000117BE                            ; ===========================================================================
000117BE                            
000117BE                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000117BE 43F8 D000                  		lea	($FFFFD000).w,a1
000117C2 3028 000C                  		move.w	$C(a0),d0
000117C6 0440 0018                  		subi.w	#$18,d0
000117CA 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000117D0 6700                       		beq.s	Obj0B_MoveDown
000117D2 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000117D6 B069 000C                  		cmp.w	$C(a1),d0
000117DA 6500                       		bcs.s	Obj0B_MoveDown
000117DC 3340 000C                  		move.w	d0,$C(a1)
000117E0                            
000117E0                            Obj0B_MoveDown:
000117E0 0640 0024                  		addi.w	#$24,d0
000117E4 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000117EA 6700                       		beq.s	Obj0B_LetGo
000117EC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000117F0 B069 000C                  		cmp.w	$C(a1),d0
000117F4 6400                       		bcc.s	Obj0B_LetGo
000117F6 3340 000C                  		move.w	d0,$C(a1)
000117FA                            
000117FA                            Obj0B_LetGo:
000117FA 1038 F603                  		move.b	($FFFFF603).w,d0
000117FE 0240 0070                  		andi.w	#$70,d0
00011802 6700                       		beq.s	Obj0B_Display
00011804                            
00011804                            Obj0B_Release:				; XREF: Obj0B_Action
00011804 4228 0020                  		clr.b	$20(a0)
00011808 5428 0024                  		addq.b	#2,$24(a0)
0001180C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011810 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011814 4228 0032                  		clr.b	$32(a0)
00011818 6000                       		bra.s	Obj0B_Display
0001181A                            ; ===========================================================================
0001181A                            
0001181A                            Obj0B_Grab:				; XREF: Obj0B_Action
0001181A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001181E 6700                       		beq.s	Obj0B_Display	; if not, branch
00011820 43F8 D000                  		lea	($FFFFD000).w,a1
00011824 3028 0008                  		move.w	8(a0),d0
00011828 0640 0014                  		addi.w	#$14,d0
0001182C B069 0008                  		cmp.w	8(a1),d0
00011830 6400                       		bcc.s	Obj0B_Display
00011832 4228 0021                  		clr.b	$21(a0)
00011836 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001183C 6400                       		bcc.s	Obj0B_Display
0001183E 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011842 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011846 3028 0008                  		move.w	8(a0),d0
0001184A 0640 0014                  		addi.w	#$14,d0
0001184E 3340 0008                  		move.w	d0,8(a1)
00011852 08A9 0000 0022             		bclr	#0,$22(a1)
00011858 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001185E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011864 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001186A 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011870                            
00011870                            Obj0B_Display:				; XREF: Obj0B_Index
00011870 6000 E3A2                  		bra.w	MarkObjGone
00011874                            ; ===========================================================================
00011874                            ; ---------------------------------------------------------------------------
00011874                            ; Sprite mappings - pole that breaks (LZ)
00011874                            ; ---------------------------------------------------------------------------
00011874                            Map_obj0B:
00011874                            	include "_maps\obj0B.asm"
00011874                            ; ---------------------------------------------------------------------------
00011874                            ; Sprite mappings - pole that breaks (LZ)
00011874                            ; ---------------------------------------------------------------------------
00011874 0000                       		dc.w byte_11326-Map_obj0B
00011876 0000                       		dc.w byte_11331-Map_obj0B
00011878 02                         byte_11326:	dc.b 2			; normal pole
00011879 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001187E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011883 04                         byte_11331:	dc.b 4			; broken pole
00011884 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011889 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001188E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011893 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011898                            		even
00011898                            		even
00011898                            
00011898                            ; ===========================================================================
00011898                            ; ---------------------------------------------------------------------------
00011898                            ; Object 0C - flapping door (LZ)
00011898                            ; ---------------------------------------------------------------------------
00011898                            
00011898                            Obj0C:					; XREF: Obj_Index
00011898 7000                       		moveq	#0,d0
0001189A 1028 0024                  		move.b	$24(a0),d0
0001189E 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000118A2 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000118A6                            ; ===========================================================================
000118A6 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000118A8 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000118AA                            ; ===========================================================================
000118AA                            
000118AA                            Obj0C_Main:				; XREF: Obj0C_Index
000118AA 5428 0024                  		addq.b	#2,$24(a0)
000118AE 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000118B6 317C 4328 0002             		move.w	#$4328,2(a0)
000118BC 0028 0004 0001             		ori.b	#4,1(a0)
000118C2 117C 0028 0019             		move.b	#$28,$19(a0)
000118C8 7000                       		moveq	#0,d0
000118CA 1028 0028                  		move.b	$28(a0),d0	; get object type
000118CE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000118D2 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000118D6                            
000118D6                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000118D6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000118DA 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000118DC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000118E2 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000118E8 4A28 0001                  		tst.b	1(a0)
000118EC 6A00                       		bpl.s	Obj0C_Solid
000118EE 303C 00BB                  		move.w	#$BB,d0
000118F2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
000118F8                            
000118F8                            Obj0C_Solid:
000118F8 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000118FE 6100 9342                  		bsr.w	AnimateSprite
00011902 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011906 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001190A 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001190C 3038 D008                  		move.w	($FFFFD008).w,d0
00011910 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011914 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011916 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001191C 323C 0013                  		move.w	#$13,d1
00011920 343C 0020                  		move.w	#$20,d2
00011924 3602                       		move.w	d2,d3
00011926 5243                       		addq.w	#1,d3
00011928 3828 0008                  		move.w	8(a0),d4
0001192C 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011930                            
00011930                            Obj0C_Display:
00011930 6000 E2E2                  		bra.w	MarkObjGone
00011934                            ; ===========================================================================
00011934                            Ani_obj0C:
00011934                            	include "_anim\obj0C.asm"
00011934                            ; ---------------------------------------------------------------------------
00011934                            ; Animation script - flapping door (LZ)
00011934                            ; ---------------------------------------------------------------------------
00011934 0000                       		dc.w byte_113E6-Ani_obj0C
00011936 0000                       		dc.w byte_113EC-Ani_obj0C
00011938 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001193E 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011944                            		even
00011944                            		even
00011944                            
00011944                            ; ---------------------------------------------------------------------------
00011944                            ; Sprite mappings - flapping door (LZ)
00011944                            ; ---------------------------------------------------------------------------
00011944                            Map_obj0C:
00011944                            	include "_maps\obj0C.asm"
00011944                            ; ---------------------------------------------------------------------------
00011944                            ; Sprite mappings - flapping door (LZ)
00011944                            ; ---------------------------------------------------------------------------
00011944 0000                       		dc.w byte_113F8-Map_obj0C
00011946 0000                       		dc.w byte_11403-Map_obj0C
00011948 0000                       		dc.w byte_1140E-Map_obj0C
0001194A 02                         byte_113F8:	dc.b 2
0001194B E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011950 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011955 02                         byte_11403:	dc.b 2
00011956 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001195B 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011960 02                         byte_1140E:	dc.b 2
00011961 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011966 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001196C 00                         		even
0001196C 00                         		even
0001196C                            
0001196C                            ; ===========================================================================
0001196C                            ; ---------------------------------------------------------------------------
0001196C                            ; Object 71 - invisible	solid blocks
0001196C                            ; ---------------------------------------------------------------------------
0001196C                            
0001196C                            Obj71:					; XREF: Obj_Index
0001196C 7000                       		moveq	#0,d0
0001196E 1028 0024                  		move.b	$24(a0),d0
00011972 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011976 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001197A                            ; ===========================================================================
0001197A 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001197C 0000                       		dc.w Obj71_Solid-Obj71_Index
0001197E                            ; ===========================================================================
0001197E                            
0001197E                            Obj71_Main:				; XREF: Obj71_Index
0001197E 5428 0024                  		addq.b	#2,$24(a0)
00011982 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
0001198A 317C 8680 0002             		move.w	#$8680,2(a0)
00011990 0028 0004 0001             		ori.b	#4,1(a0)
00011996 1028 0028                  		move.b	$28(a0),d0	; get object type
0001199A 1200                       		move.b	d0,d1
0001199C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000119A0 0640 0010                  		addi.w	#$10,d0
000119A4 E248                       		lsr.w	#1,d0
000119A6 1140 0019                  		move.b	d0,$19(a0)	; set object width
000119AA 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000119AE 5241                       		addq.w	#1,d1
000119B0 E749                       		lsl.w	#3,d1
000119B2 1141 0016                  		move.b	d1,$16(a0)	; set object height
000119B6                            
000119B6                            Obj71_Solid:				; XREF: Obj71_Index
000119B6 6100 C42E                  		bsr.w	ChkObjOnScreen
000119BA 6600                       		bne.s	Obj71_ChkDel
000119BC 7200                       		moveq	#0,d1
000119BE 1228 0019                  		move.b	$19(a0),d1
000119C2 0641 000B                  		addi.w	#$B,d1
000119C6 7400                       		moveq	#0,d2
000119C8 1428 0016                  		move.b	$16(a0),d2
000119CC 3602                       		move.w	d2,d3
000119CE 5243                       		addq.w	#1,d3
000119D0 3828 0008                  		move.w	8(a0),d4
000119D4 6100 E5A8                  		bsr.w	SolidObject71
000119D8                            
000119D8                            Obj71_ChkDel:
000119D8 3028 0008                  		move.w	8(a0),d0
000119DC 0240 FF80                  		andi.w	#$FF80,d0
000119E0 3238 F700                  		move.w	($FFFFF700).w,d1
000119E4 0441 0080                  		subi.w	#$80,d1
000119E8 0241 FF80                  		andi.w	#$FF80,d1
000119EC 9041                       		sub.w	d1,d0
000119EE 0C40 0280                  		cmpi.w	#$280,d0
000119F2 6200                       		bhi.s	Obj71_Delete
000119F4 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000119F8 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000119FA 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
000119FE                            ; ===========================================================================
000119FE                            
000119FE                            Obj71_NoDisplay:
000119FE 4E75                       		rts	
00011A00                            ; ===========================================================================
00011A00                            
00011A00                            Obj71_Delete:
00011A00 4EFA C1A6                  		jmp	DeleteObject
00011A04                            ; ===========================================================================
00011A04                            ; ---------------------------------------------------------------------------
00011A04                            ; Sprite mappings - invisible solid blocks
00011A04                            ; ---------------------------------------------------------------------------
00011A04                            Map_obj71:
00011A04                            	include "_maps\obj71.asm"
00011A04                            ; ---------------------------------------------------------------------------
00011A04                            ; Sprite mappings - invisible solid blocks
00011A04                            ; ---------------------------------------------------------------------------
00011A04 0000                       		dc.w byte_114BC-Map_obj71
00011A06 0000                       		dc.w byte_114D1-Map_obj71
00011A08 0000                       		dc.w byte_114E6-Map_obj71
00011A0A 04                         byte_114BC:	dc.b 4
00011A0B F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A10 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A15 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A1A 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A1F 04                         byte_114D1:	dc.b 4
00011A20 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A25 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A2A 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A2F 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A34 04                         byte_114E6:	dc.b 4
00011A35 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A3A E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A3F 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A44 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A4A 00                         		even
00011A4A 00                         		even
00011A4A                            
00011A4A                            ; ===========================================================================
00011A4A                            ; ---------------------------------------------------------------------------
00011A4A                            ; Object 5D - fans (SLZ)
00011A4A                            ; ---------------------------------------------------------------------------
00011A4A                            
00011A4A                            Obj5D:					; XREF: Obj_Index
00011A4A 7000                       		moveq	#0,d0
00011A4C 1028 0024                  		move.b	$24(a0),d0
00011A50 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A54 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011A58                            ; ===========================================================================
00011A58 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011A5A 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011A5C                            ; ===========================================================================
00011A5C                            
00011A5C                            Obj5D_Main:				; XREF: Obj5D_Index
00011A5C 5428 0024                  		addq.b	#2,$24(a0)
00011A60 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011A68 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011A6E 0028 0004 0001             		ori.b	#4,1(a0)
00011A74 117C 0010 0019             		move.b	#$10,$19(a0)
00011A7A 117C 0004 0018             		move.b	#4,$18(a0)
00011A80                            
00011A80                            Obj5D_Delay:				; XREF: Obj5D_Index
00011A80 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011A86 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011A88 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A8C 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011A8E 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011A94 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011A9A 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011A9C 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011AA2                            
00011AA2                            Obj5D_Blow:
00011AA2 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011AA6 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011AAA 43F8 D000                  		lea	($FFFFD000).w,a1
00011AAE 3029 0008                  		move.w	8(a1),d0
00011AB2 9068 0008                  		sub.w	8(a0),d0
00011AB6 0828 0000 0022             		btst	#0,$22(a0)
00011ABC 6600                       		bne.s	Obj5D_ChkSonic
00011ABE 4440                       		neg.w	d0
00011AC0                            
00011AC0                            Obj5D_ChkSonic:
00011AC0 0640 0050                  		addi.w	#$50,d0
00011AC4 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011AC8 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011ACA 3229 000C                  		move.w	$C(a1),d1
00011ACE 0641 0060                  		addi.w	#$60,d1
00011AD2 9268 000C                  		sub.w	$C(a0),d1
00011AD6 6500                       		bcs.s	Obj5D_Animate
00011AD8 0C41 0070                  		cmpi.w	#$70,d1
00011ADC 6400                       		bcc.s	Obj5D_Animate
00011ADE 0440 0050                  		subi.w	#$50,d0
00011AE2 6400                       		bcc.s	loc_1159A
00011AE4 4640                       		not.w	d0
00011AE6 D040                       		add.w	d0,d0
00011AE8                            
00011AE8                            loc_1159A:
00011AE8 0640 0060                  		addi.w	#$60,d0
00011AEC 0828 0000 0022             		btst	#0,$22(a0)
00011AF2 6600                       		bne.s	loc_115A8
00011AF4 4440                       		neg.w	d0
00011AF6                            
00011AF6                            loc_115A8:
00011AF6 4400                       		neg.b	d0
00011AF8 E840                       		asr.w	#4,d0
00011AFA 0828 0000 0028             		btst	#0,$28(a0)
00011B00 6700                       		beq.s	Obj5D_MoveSonic
00011B02 4440                       		neg.w	d0
00011B04                            
00011B04                            Obj5D_MoveSonic:
00011B04 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B08                            
00011B08                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B08 5328 001E                  		subq.b	#1,$1E(a0)
00011B0C 6A00                       		bpl.s	Obj5D_ChkDel
00011B0E 117C 0000 001E             		move.b	#0,$1E(a0)
00011B14 5228 001B                  		addq.b	#1,$1B(a0)
00011B18 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B1E 6500                       		bcs.s	loc_115D8
00011B20 117C 0000 001B             		move.b	#0,$1B(a0)
00011B26                            
00011B26                            loc_115D8:
00011B26 7000                       		moveq	#0,d0
00011B28 0828 0000 0028             		btst	#0,$28(a0)
00011B2E 6700                       		beq.s	loc_115E4
00011B30 7002                       		moveq	#2,d0
00011B32                            
00011B32                            loc_115E4:
00011B32 D028 001B                  		add.b	$1B(a0),d0
00011B36 1140 001A                  		move.b	d0,$1A(a0)
00011B3A                            
00011B3A                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B3A 6100 C030                  		bsr.w	DisplaySprite
00011B3E 3028 0008                  		move.w	8(a0),d0
00011B42 0240 FF80                  		andi.w	#$FF80,d0
00011B46 3238 F700                  		move.w	($FFFFF700).w,d1
00011B4A 0441 0080                  		subi.w	#$80,d1
00011B4E 0241 FF80                  		andi.w	#$FF80,d1
00011B52 9041                       		sub.w	d1,d0
00011B54 0C40 0280                  		cmpi.w	#$280,d0
00011B58 6200 C04E                  		bhi.w	DeleteObject
00011B5C 4E75                       		rts	
00011B5E                            ; ===========================================================================
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E                            ; Sprite mappings - fans (SLZ)
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E                            Map_obj5D:
00011B5E                            	include "_maps\obj5D.asm"
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E                            ; Sprite mappings - fans (SLZ)
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011B62 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011B66 0000                       		dc.w byte_1161A-Map_obj5D
00011B68 02                         byte_1161A:	dc.b 2
00011B69 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011B6E 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011B73 02                         byte_11625:	dc.b 2
00011B74 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011B79 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011B7E 02                         byte_11630:	dc.b 2
00011B7F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011B84 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011B8A 00                         		even
00011B8A 00                         		even
00011B8A                            
00011B8A                            ; ===========================================================================
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A                            ; Object 5E - seesaws (SLZ)
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A                            
00011B8A                            Obj5E:					; XREF: Obj_Index
00011B8A 7000                       		moveq	#0,d0
00011B8C 1028 0024                  		move.b	$24(a0),d0
00011B90 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011B94 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011B98 3028 0030                  		move.w	$30(a0),d0
00011B9C 0240 FF80                  		andi.w	#$FF80,d0
00011BA0 3238 F700                  		move.w	($FFFFF700).w,d1
00011BA4 0441 0080                  		subi.w	#$80,d1
00011BA8 0241 FF80                  		andi.w	#$FF80,d1
00011BAC 9041                       		sub.w	d1,d0
00011BAE 6B00 BFF8                  		bmi.w	DeleteObject
00011BB2 0C40 0280                  		cmpi.w	#$280,d0
00011BB6 6200 BFF0                  		bhi.w	DeleteObject
00011BBA 6000 BFB0                  		bra.w	DisplaySprite
00011BBE                            ; ===========================================================================
00011BBE 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011BC0 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011BC2 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011BC4 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011BC6 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011BC8 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011BCA                            ; ===========================================================================
00011BCA                            
00011BCA                            Obj5E_Main:				; XREF: Obj5E_Index
00011BCA 5428 0024                  		addq.b	#2,$24(a0)
00011BCE 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011BD6 317C 0374 0002             		move.w	#$374,2(a0)
00011BDC 0028 0004 0001             		ori.b	#4,1(a0)
00011BE2 117C 0004 0018             		move.b	#4,$18(a0)
00011BE8 117C 0030 0019             		move.b	#$30,$19(a0)
00011BEE 3168 0008 0030             		move.w	8(a0),$30(a0)
00011BF4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011BF8 6600                       		bne.s	loc_116D2	; if not, branch
00011BFA 6100 C40C                  		bsr.w	SingleObjLoad2
00011BFE 6600                       		bne.s	loc_116D2
00011C00 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C04 5C29 0024                  		addq.b	#6,$24(a1)
00011C08 3368 0008 0008             		move.w	8(a0),8(a1)
00011C0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C14 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C1A 2348 003C                  		move.l	a0,$3C(a1)
00011C1E                            
00011C1E                            loc_116D2:
00011C1E 0828 0000 0022             		btst	#0,$22(a0)
00011C24 6700                       		beq.s	loc_116E0
00011C26 117C 0002 001A             		move.b	#2,$1A(a0)
00011C2C                            
00011C2C                            loc_116E0:
00011C2C 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C32                            
00011C32                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C32 1228 003A                  		move.b	$3A(a0),d1
00011C36 6100 0000                  		bsr.w	loc_11766
00011C3A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C40 0828 0000 001A             		btst	#0,$1A(a0)
00011C46 6700                       		beq.s	loc_11702
00011C48 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C4E                            
00011C4E                            loc_11702:
00011C4E 43F8 D000                  		lea	($FFFFD000).w,a1
00011C52 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011C58 323C 0030                  		move.w	#$30,d1
00011C5C 4EB9 0000 7972             		jsr	(SlopeObject).l
00011C62 4E75                       		rts	
00011C64                            ; ===========================================================================
00011C64                            
00011C64                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011C64 6100 0000                  		bsr.w	loc_1174A
00011C68 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C6E 0828 0000 001A             		btst	#0,$1A(a0)
00011C74 6700                       		beq.s	loc_11730
00011C76 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C7C                            
00011C7C                            loc_11730:
00011C7C 323C 0030                  		move.w	#$30,d1
00011C80 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011C86 323C 0030                  		move.w	#$30,d1
00011C8A 3428 0008                  		move.w	8(a0),d2
00011C8E 4EB9 0000 8970             		jsr	SlopeObject2
00011C94 4E75                       		rts	
00011C96                            ; ===========================================================================
00011C96                            
00011C96                            loc_1174A:				; XREF: Obj5E_Slope2
00011C96 7202                       		moveq	#2,d1
00011C98 43F8 D000                  		lea	($FFFFD000).w,a1
00011C9C 3028 0008                  		move.w	8(a0),d0
00011CA0 9069 0008                  		sub.w	8(a1),d0
00011CA4 6400                       		bcc.s	loc_1175E
00011CA6 4440                       		neg.w	d0
00011CA8 7200                       		moveq	#0,d1
00011CAA                            
00011CAA                            loc_1175E:
00011CAA 0C40 0008                  		cmpi.w	#8,d0
00011CAE 6400                       		bcc.s	loc_11766
00011CB0 7201                       		moveq	#1,d1
00011CB2                            
00011CB2                            loc_11766:
00011CB2 1028 001A                  		move.b	$1A(a0),d0
00011CB6 B001                       		cmp.b	d1,d0
00011CB8 6700                       		beq.s	locret_11790
00011CBA 6400                       		bcc.s	loc_11772
00011CBC 5400                       		addq.b	#2,d0
00011CBE                            
00011CBE                            loc_11772:
00011CBE 5300                       		subq.b	#1,d0
00011CC0 1140 001A                  		move.b	d0,$1A(a0)
00011CC4 1141 003A                  		move.b	d1,$3A(a0)
00011CC8 08A8 0000 0001             		bclr	#0,1(a0)
00011CCE 0828 0001 001A             		btst	#1,$1A(a0)
00011CD4 6700                       		beq.s	locret_11790
00011CD6 08E8 0000 0001             		bset	#0,1(a0)
00011CDC                            
00011CDC                            locret_11790:
00011CDC 4E75                       		rts	
00011CDE                            ; ===========================================================================
00011CDE                            
00011CDE                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011CDE 5428 0024                  		addq.b	#2,$24(a0)
00011CE2 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011CEA 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011CF0 0028 0004 0001             		ori.b	#4,1(a0)
00011CF6 117C 0004 0018             		move.b	#4,$18(a0)
00011CFC 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D02 117C 000C 0019             		move.b	#$C,$19(a0)
00011D08 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D0E 0668 0028 0008             		addi.w	#$28,8(a0)
00011D14 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D1A 117C 0001 001A             		move.b	#1,$1A(a0)
00011D20 0828 0000 0022             		btst	#0,$22(a0)
00011D26 6700                       		beq.s	Obj5E_MoveSpike
00011D28 0468 0050 0008             		subi.w	#$50,8(a0)
00011D2E 117C 0002 003A             		move.b	#2,$3A(a0)
00011D34                            
00011D34                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D34 2268 003C                  		movea.l	$3C(a0),a1
00011D38 7000                       		moveq	#0,d0
00011D3A 1028 003A                  		move.b	$3A(a0),d0
00011D3E 9029 003A                  		sub.b	$3A(a1),d0
00011D42 6700                       		beq.s	loc_1183E
00011D44 6400                       		bcc.s	loc_117FC
00011D46 4400                       		neg.b	d0
00011D48                            
00011D48                            loc_117FC:
00011D48 323C F7E8                  		move.w	#-$818,d1
00011D4C 343C FEEC                  		move.w	#-$114,d2
00011D50 0C00 0001                  		cmpi.b	#1,d0
00011D54 6700                       		beq.s	loc_11822
00011D56 323C F510                  		move.w	#-$AF0,d1
00011D5A 343C FF34                  		move.w	#-$CC,d2
00011D5E 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011D64 6D00                       		blt.s	loc_11822
00011D66 323C F200                  		move.w	#-$E00,d1
00011D6A 343C FF60                  		move.w	#-$A0,d2
00011D6E                            
00011D6E                            loc_11822:
00011D6E 3141 0012                  		move.w	d1,$12(a0)
00011D72 3142 0010                  		move.w	d2,$10(a0)
00011D76 3028 0008                  		move.w	8(a0),d0
00011D7A 9068 0030                  		sub.w	$30(a0),d0
00011D7E 6400                       		bcc.s	loc_11838
00011D80 4468 0010                  		neg.w	$10(a0)
00011D84                            
00011D84                            loc_11838:
00011D84 5428 0024                  		addq.b	#2,$24(a0)
00011D88 6000                       		bra.s	Obj5E_SpikeFall
00011D8A                            ; ===========================================================================
00011D8A                            
00011D8A                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011D8A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011D90 7000                       		moveq	#0,d0
00011D92 1029 001A                  		move.b	$1A(a1),d0
00011D96 343C 0028                  		move.w	#$28,d2
00011D9A 3228 0008                  		move.w	8(a0),d1
00011D9E 9268 0030                  		sub.w	$30(a0),d1
00011DA2 6400                       		bcc.s	loc_1185C
00011DA4 4442                       		neg.w	d2
00011DA6 5440                       		addq.w	#2,d0
00011DA8                            
00011DA8                            loc_1185C:
00011DA8 D040                       		add.w	d0,d0
00011DAA 3228 0034                  		move.w	$34(a0),d1
00011DAE D272 0000                  		add.w	(a2,d0.w),d1
00011DB2 3141 000C                  		move.w	d1,$C(a0)
00011DB6 D468 0030                  		add.w	$30(a0),d2
00011DBA 3142 0008                  		move.w	d2,8(a0)
00011DBE 4268 000E                  		clr.w	$E(a0)
00011DC2 4268 000A                  		clr.w	$A(a0)
00011DC6 4E75                       		rts	
00011DC8                            ; ===========================================================================
00011DC8                            
00011DC8                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011DC8 4A68 0012                  		tst.w	$12(a0)
00011DCC 6A00                       		bpl.s	loc_1189A
00011DCE 6100 BD4A                  		bsr.w	ObjectFall
00011DD2 3028 0034                  		move.w	$34(a0),d0
00011DD6 0440 002F                  		subi.w	#$2F,d0
00011DDA B068 000C                  		cmp.w	$C(a0),d0
00011DDE 6E00                       		bgt.s	locret_11898
00011DE0 6100 BD38                  		bsr.w	ObjectFall
00011DE4                            
00011DE4                            locret_11898:
00011DE4 4E75                       		rts	
00011DE6                            ; ===========================================================================
00011DE6                            
00011DE6                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011DE6 6100 BD32                  		bsr.w	ObjectFall
00011DEA 2268 003C                  		movea.l	$3C(a0),a1
00011DEE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DF4 7000                       		moveq	#0,d0
00011DF6 1029 001A                  		move.b	$1A(a1),d0
00011DFA 3228 0008                  		move.w	8(a0),d1
00011DFE 9268 0030                  		sub.w	$30(a0),d1
00011E02 6400                       		bcc.s	loc_118BA
00011E04 5440                       		addq.w	#2,d0
00011E06                            
00011E06                            loc_118BA:
00011E06 D040                       		add.w	d0,d0
00011E08 3228 0034                  		move.w	$34(a0),d1
00011E0C D272 0000                  		add.w	(a2,d0.w),d1
00011E10 B268 000C                  		cmp.w	$C(a0),d1
00011E14 6E00                       		bgt.s	locret_11938
00011E16 2268 003C                  		movea.l	$3C(a0),a1
00011E1A 7202                       		moveq	#2,d1
00011E1C 4A68 0010                  		tst.w	$10(a0)
00011E20 6B00                       		bmi.s	Obj5E_Spring
00011E22 7200                       		moveq	#0,d1
00011E24                            
00011E24                            Obj5E_Spring:
00011E24 1341 003A                  		move.b	d1,$3A(a1)
00011E28 1141 003A                  		move.b	d1,$3A(a0)
00011E2C B229 001A                  		cmp.b	$1A(a1),d1
00011E30 6700                       		beq.s	loc_1192C
00011E32 08A9 0003 0022             		bclr	#3,$22(a1)
00011E38 6700                       		beq.s	loc_1192C
00011E3A 4229 0025                  		clr.b	$25(a1)
00011E3E 137C 0002 0024             		move.b	#2,$24(a1)
00011E44 45F8 D000                  		lea	($FFFFD000).w,a2
00011E48 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E4E 446A 0012                  		neg.w	$12(a2)
00011E52 08EA 0001 0022             		bset	#1,$22(a2)
00011E58 08AA 0003 0022             		bclr	#3,$22(a2)
00011E5E 422A 003C                  		clr.b	$3C(a2)
00011E62 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011E68 157C 0002 0024             		move.b	#2,$24(a2)
00011E6E 303C 00CC                  		move.w	#$CC,d0
00011E72 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011E78                            
00011E78                            loc_1192C:
00011E78 4268 0010                  		clr.w	$10(a0)
00011E7C 4268 0012                  		clr.w	$12(a0)
00011E80 5528 0024                  		subq.b	#2,$24(a0)
00011E84                            
00011E84                            locret_11938:
00011E84 4E75                       		rts	
00011E86                            ; ===========================================================================
00011E86 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011E90                            
00011E90                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011EC0                            		even
00011EC0                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011EF0                            		even
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - seesaws (SLZ)
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            Map_obj5E:
00011EF0                            	include "_maps\obj5E.asm"
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - seesaws (SLZ)
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011EF4 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011EF8 07                         byte_119AC:	dc.b 7
00011EF9 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011EFE DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F03 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F08 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F0D FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F12 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F17 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F1C 04                         byte_119D0:	dc.b 4
00011F1D E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F22 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F27 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F2C E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F32 00                         		even
00011F32 00                         		even
00011F32                            
00011F32                            ; ---------------------------------------------------------------------------
00011F32                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F32                            ; ---------------------------------------------------------------------------
00011F32                            Map_obj5Ea:
00011F32                            	include "_maps\obj5Eballs.asm"
00011F32                            ; ---------------------------------------------------------------------------
00011F32                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F32                            ; ---------------------------------------------------------------------------
00011F32 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F34 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F36 01                         byte_119EA:	dc.b 1
00011F37 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F3C 01                         byte_119F0:	dc.b 1
00011F3D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F42                            		even
00011F42                            		even
00011F42                            
00011F42                            ; ===========================================================================
00011F42                            ; ---------------------------------------------------------------------------
00011F42                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F42                            ; ---------------------------------------------------------------------------
00011F42                            
00011F42                            Obj5F:					; XREF: Obj_Index
00011F42 7000                       		moveq	#0,d0
00011F44 1028 0024                  		move.b	$24(a0),d0
00011F48 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F4C 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F50                            ; ===========================================================================
00011F50 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F52 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F54 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F56 0000                       		dc.w Obj5F_End-Obj5F_Index
00011F58                            ; ===========================================================================
00011F58                            
00011F58                            Obj5F_Main:				; XREF: Obj5F_Index
00011F58 5428 0024                  		addq.b	#2,$24(a0)
00011F5C 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011F64 317C 0400 0002             		move.w	#$400,2(a0)
00011F6A 0028 0004 0001             		ori.b	#4,1(a0)
00011F70 117C 0003 0018             		move.b	#3,$18(a0)
00011F76 117C 000C 0019             		move.b	#$C,$19(a0)
00011F7C 1028 0028                  		move.b	$28(a0),d0
00011F80 6700                       		beq.s	loc_11A3C
00011F82 1140 0024                  		move.b	d0,$24(a0)
00011F86 4E75                       		rts	
00011F88                            ; ===========================================================================
00011F88                            
00011F88                            loc_11A3C:
00011F88 117C 009A 0020             		move.b	#$9A,$20(a0)
00011F8E 0868 0000 0022             		bchg	#0,$22(a0)
00011F94                            
00011F94                            Obj5F_Action:				; XREF: Obj5F_Index
00011F94 7000                       		moveq	#0,d0
00011F96 1028 0025                  		move.b	$25(a0),d0
00011F9A 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011F9E 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011FA2 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011FA8 6100 8C98                  		bsr.w	AnimateSprite
00011FAC 6000 DC66                  		bra.w	MarkObjGone
00011FB0                            ; ===========================================================================
00011FB0 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011FB2 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011FB4 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011FB6                            ; ===========================================================================
00011FB6                            
00011FB6                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011FB6 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FBA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FBE 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011FC0 5428 0025                  		addq.b	#2,$25(a0)
00011FC4 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011FCA 317C 0010 0010             		move.w	#$10,$10(a0)
00011FD0 117C 0001 001C             		move.b	#1,$1C(a0)
00011FD6 0868 0000 0022             		bchg	#0,$22(a0)
00011FDC 6700                       		beq.s	locret_11A96
00011FDE 4468 0010                  		neg.w	$10(a0)		; change direction
00011FE2                            
00011FE2                            locret_11A96:
00011FE2 4E75                       		rts	
00011FE4                            ; ===========================================================================
00011FE4                            
00011FE4                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011FE4 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FEC 6B00                       		bmi.s	loc_11AA8
00011FEE 6100 BB56                  		bsr.w	SpeedToPos
00011FF2 4E75                       		rts	
00011FF4                            ; ===========================================================================
00011FF4                            
00011FF4                            loc_11AA8:
00011FF4 5528 0025                  		subq.b	#2,$25(a0)
00011FF8 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011FFE 4268 0010                  		clr.w	$10(a0)		; stop walking
00012002 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012008 4E75                       		rts	
0001200A                            ; ===========================================================================
0001200A                            
0001200A                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001200A 5368 0030                  		subq.w	#1,$30(a0)
0001200E 6A00                       		bpl.s	locret_11AD0
00012010 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012014 117C 0000 0024             		move.b	#0,$24(a0)
0001201A                            
0001201A                            locret_11AD0:
0001201A 4E75                       		rts	
0001201C                            ; ===========================================================================
0001201C                            
0001201C                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001201C 3038 D008                  		move.w	($FFFFD008).w,d0
00012020 9068 0008                  		sub.w	8(a0),d0
00012024 6400                       		bcc.s	loc_11ADE
00012026 4440                       		neg.w	d0
00012028                            
00012028                            loc_11ADE:
00012028 0C40 0060                  		cmpi.w	#$60,d0
0001202C 6400                       		bcc.s	locret_11B5E
0001202E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012032 9068 000C                  		sub.w	$C(a0),d0
00012036 6400                       		bcc.s	Obj5F_MakeFuse
00012038 4440                       		neg.w	d0
0001203A                            
0001203A                            Obj5F_MakeFuse:
0001203A 0C40 0060                  		cmpi.w	#$60,d0
0001203E 6400                       		bcc.s	locret_11B5E
00012040 4A78 FE08                  		tst.w	($FFFFFE08).w
00012044 6600                       		bne.s	locret_11B5E
00012046 117C 0004 0025             		move.b	#4,$25(a0)
0001204C 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012052 4268 0010                  		clr.w	$10(a0)
00012056 117C 0002 001C             		move.b	#2,$1C(a0)
0001205C 6100 BFAA                  		bsr.w	SingleObjLoad2
00012060 6600                       		bne.s	locret_11B5E
00012062 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012066 3368 0008 0008             		move.w	8(a0),8(a1)
0001206C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012072 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012078 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001207E 137C 0004 0028             		move.b	#4,$28(a1)
00012084 137C 0003 001C             		move.b	#3,$1C(a1)
0001208A 337C 0010 0012             		move.w	#$10,$12(a1)
00012090 0828 0001 0022             		btst	#1,$22(a0)
00012096 6700                       		beq.s	loc_11B54
00012098 4469 0012                  		neg.w	$12(a1)
0001209C                            
0001209C                            loc_11B54:
0001209C 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000120A2 2348 003C                  		move.l	a0,$3C(a1)
000120A6                            
000120A6                            locret_11B5E:
000120A6 4E75                       		rts	
000120A8                            ; ===========================================================================
000120A8                            
000120A8                            Obj5F_Display:				; XREF: Obj5F_Index
000120A8 6100                       		bsr.s	loc_11B70
000120AA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120B0 6100 8B90                  		bsr.w	AnimateSprite
000120B4 6000 DB5E                  		bra.w	MarkObjGone
000120B8                            ; ===========================================================================
000120B8                            
000120B8                            loc_11B70:
000120B8 5368 0030                  		subq.w	#1,$30(a0)
000120BC 6B00                       		bmi.s	loc_11B7C
000120BE 6100 BA86                  		bsr.w	SpeedToPos
000120C2 4E75                       		rts	
000120C4                            ; ===========================================================================
000120C4                            
000120C4                            loc_11B7C:
000120C4 4268 0030                  		clr.w	$30(a0)
000120C8 4228 0024                  		clr.b	$24(a0)
000120CC 3168 0034 000C             		move.w	$34(a0),$C(a0)
000120D2 7203                       		moveq	#3,d1
000120D4 2248                       		movea.l	a0,a1
000120D6 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000120DC 6000                       		bra.s	Obj5F_MakeShrap
000120DE                            ; ===========================================================================
000120DE                            
000120DE                            Obj5F_Loop:
000120DE 6100 BF28                  		bsr.w	SingleObjLoad2
000120E2 6600                       		bne.s	loc_11BCE
000120E4                            
000120E4                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000120E4 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000120E8 3368 0008 0008             		move.w	8(a0),8(a1)
000120EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120F4 137C 0006 0028             		move.b	#6,$28(a1)
000120FA 137C 0004 001C             		move.b	#4,$1C(a1)
00012100 335A 0010                  		move.w	(a2)+,$10(a1)
00012104 335A 0012                  		move.w	(a2)+,$12(a1)
00012108 137C 0098 0020             		move.b	#$98,$20(a1)
0001210E 08E9 0007 0001             		bset	#7,1(a1)
00012114                            
00012114                            loc_11BCE:
00012114 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012118                            
00012118 117C 0006 0024             		move.b	#6,$24(a0)
0001211E                            
0001211E                            Obj5F_End:				; XREF: Obj5F_Index
0001211E 6100 BA26                  		bsr.w	SpeedToPos
00012122 0668 0018 0012             		addi.w	#$18,$12(a0)
00012128 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001212E 6100 8B12                  		bsr.w	AnimateSprite
00012132 4A28 0001                  		tst.b	1(a0)
00012136 6A00 BA70                  		bpl.w	DeleteObject
0001213A 6000 BA30                  		bra.w	DisplaySprite
0001213E                            ; ===========================================================================
0001213E FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001214E                            
0001214E                            Ani_obj5F:
0001214E                            	include "_anim\obj5F.asm"
0001214E                            ; ---------------------------------------------------------------------------
0001214E                            ; Animation script - Bomb enemy
0001214E                            ; ---------------------------------------------------------------------------
0001214E 0000                       		dc.w byte_11C12-Ani_obj5F
00012150 0000                       		dc.w byte_11C16-Ani_obj5F
00012152 0000                       		dc.w byte_11C1C-Ani_obj5F
00012154 0000                       		dc.w byte_11C20-Ani_obj5F
00012156 0000                       		dc.w byte_11C24-Ani_obj5F
00012158 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001215C 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012162 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012166 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001216A 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001216E                            		even
0001216E                            		even
0001216E                            
0001216E                            ; ---------------------------------------------------------------------------
0001216E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001216E                            ; ---------------------------------------------------------------------------
0001216E                            Map_obj5F:
0001216E                            	include "_maps\obj5F.asm"
0001216E                            ; ---------------------------------------------------------------------------
0001216E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001216E                            ; ---------------------------------------------------------------------------
0001216E 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012172 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012176 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001217A 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001217E 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012182 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012186 03                         byte_11C40:	dc.b 3
00012187 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001218C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012191 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012196 03                         byte_11C50:	dc.b 3
00012197 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001219C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121A1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121A6 03                         byte_11C60:	dc.b 3
000121A7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121AC 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000121B1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121B6 03                         byte_11C70:	dc.b 3
000121B7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121BC 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000121C1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121C6 03                         byte_11C80:	dc.b 3
000121C7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121CC 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000121D1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121D6 03                         byte_11C90:	dc.b 3
000121D7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121DC 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000121E1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121E6 02                         byte_11CA0:	dc.b 2
000121E7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121EC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121F1 02                         byte_11CAB:	dc.b 2
000121F2 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121F7 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121FC 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000121FD E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012202 01                         byte_11CBC:	dc.b 1			; fuse
00012203 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012208 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012209 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001220E 01                         byte_11CC8:	dc.b 1			; fireball
0001220F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012214                            		even
00012214                            		even
00012214                            
00012214                            ; ===========================================================================
00012214                            ; ---------------------------------------------------------------------------
00012214                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012214                            ; ---------------------------------------------------------------------------
00012214                            
00012214                            Obj60:					; XREF: Obj_Index
00012214 7000                       		moveq	#0,d0
00012216 1028 0024                  		move.b	$24(a0),d0
0001221A 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001221E 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012222                            ; ===========================================================================
00012222 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012224 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012226 0000                       		dc.w Obj60_Display-Obj60_Index
00012228 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001222A 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001222C                            ; ===========================================================================
0001222C                            
0001222C                            Obj60_Main:				; XREF: Obj60_Index
0001222C 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012234 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001223A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012240 6700                       		beq.s	loc_11D02
00012242 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012248                            
00012248                            loc_11D02:
00012248 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001224E 6600                       		bne.s	loc_11D10
00012250 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012256                            
00012256                            loc_11D10:
00012256 0028 0004 0001             		ori.b	#4,1(a0)
0001225C 117C 0004 0018             		move.b	#4,$18(a0)
00012262 117C 000B 0020             		move.b	#$B,$20(a0)
00012268 117C 000C 0019             		move.b	#$C,$19(a0)
0001226E 7400                       		moveq	#0,d2
00012270 45E8 0037                  		lea	$37(a0),a2
00012274 264A                       		movea.l	a2,a3
00012276 524A                       		addq.w	#1,a2
00012278 7203                       		moveq	#3,d1
0001227A                            
0001227A                            Obj60_MakeOrbs:
0001227A 6100 BD8C                  		bsr.w	SingleObjLoad2
0001227E 6600                       		bne.s	loc_11D90
00012280 5213                       		addq.b	#1,(a3)
00012282 3A09                       		move.w	a1,d5
00012284 0445 D000                  		subi.w	#-$3000,d5
00012288 EC4D                       		lsr.w	#6,d5
0001228A 0245 007F                  		andi.w	#$7F,d5
0001228E 14C5                       		move.b	d5,(a2)+
00012290 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012292 137C 0006 0024             		move.b	#6,$24(a1)
00012298 2368 0004 0004             		move.l	4(a0),4(a1)
0001229E 3368 0002 0002             		move.w	2(a0),2(a1)
000122A4 0029 0004 0001             		ori.b	#4,1(a1)
000122AA 137C 0004 0018             		move.b	#4,$18(a1)
000122B0 137C 0008 0019             		move.b	#8,$19(a1)
000122B6 137C 0003 001A             		move.b	#3,$1A(a1)
000122BC 137C 0098 0020             		move.b	#$98,$20(a1)
000122C2 1342 0026                  		move.b	d2,$26(a1)
000122C6 0602 0040                  		addi.b	#$40,d2
000122CA 2348 003C                  		move.l	a0,$3C(a1)
000122CE 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000122D2                            
000122D2                            loc_11D90:
000122D2 7001                       		moveq	#1,d0
000122D4 0828 0000 0022             		btst	#0,$22(a0)
000122DA 6700                       		beq.s	Obj60_Move
000122DC 4440                       		neg.w	d0
000122DE                            
000122DE                            Obj60_Move:
000122DE 1140 0036                  		move.b	d0,$36(a0)
000122E2 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000122E8 5428 0024                  		addq.b	#2,$24(a0)
000122EC 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000122F2 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000122F8 6700                       		beq.s	locret_11DBC	; if not, branch
000122FA 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000122FE                            
000122FE                            locret_11DBC:
000122FE 4E75                       		rts	
00012300                            ; ===========================================================================
00012300                            
00012300                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012300 3038 D008                  		move.w	($FFFFD008).w,d0
00012304 9068 0008                  		sub.w	8(a0),d0
00012308 6400                       		bcc.s	loc_11DCA
0001230A 4440                       		neg.w	d0
0001230C                            
0001230C                            loc_11DCA:
0001230C 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012310 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012312 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012316 9068 000C                  		sub.w	$C(a0),d0
0001231A 6400                       		bcc.s	loc_11DDC
0001231C 4440                       		neg.w	d0
0001231E                            
0001231E                            loc_11DDC:
0001231E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012322 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012324 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012328 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001232A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012330                            
00012330                            Obj60_Animate:
00012330 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012336 6100 890A                  		bsr.w	AnimateSprite
0001233A 6000 0000                  		bra.w	Obj60_ChkDel
0001233E                            ; ===========================================================================
0001233E                            
0001233E                            Obj60_Display:				; XREF: Obj60_Index
0001233E 6100 B806                  		bsr.w	SpeedToPos
00012342                            
00012342                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012342 3028 0008                  		move.w	8(a0),d0
00012346 0240 FF80                  		andi.w	#$FF80,d0
0001234A 3238 F700                  		move.w	($FFFFF700).w,d1
0001234E 0441 0080                  		subi.w	#$80,d1
00012352 0241 FF80                  		andi.w	#$FF80,d1
00012356 9041                       		sub.w	d1,d0
00012358 0C40 0280                  		cmpi.w	#$280,d0
0001235C 6200 0000                  		bhi.w	Obj60_ChkGone
00012360 6000 B80A                  		bra.w	DisplaySprite
00012364                            ; ===========================================================================
00012364                            
00012364                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012364 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012368 7000                       		moveq	#0,d0
0001236A 1028 0023                  		move.b	$23(a0),d0
0001236E 6700                       		beq.s	loc_11E34
00012370 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012376                            
00012376                            loc_11E34:
00012376 45E8 0037                  		lea	$37(a0),a2
0001237A 7400                       		moveq	#0,d2
0001237C 141A                       		move.b	(a2)+,d2
0001237E 5342                       		subq.w	#1,d2
00012380 6500                       		bcs.s	Obj60_Delete
00012382                            
00012382                            loc_11E40:
00012382 7000                       		moveq	#0,d0
00012384 101A                       		move.b	(a2)+,d0
00012386 ED48                       		lsl.w	#6,d0
00012388 0680 00FF D000             		addi.l	#$FFD000,d0
0001238E 2240                       		movea.l	d0,a1
00012390 6100 B818                  		bsr.w	DeleteObject2
00012394 51CA FFEC                  		dbf	d2,loc_11E40
00012398                            
00012398                            Obj60_Delete:
00012398 6000 B80E                  		bra.w	DeleteObject
0001239C                            ; ===========================================================================
0001239C                            
0001239C                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001239C 2268 003C                  		movea.l	$3C(a0),a1
000123A0 0C11 0060                  		cmpi.b	#$60,0(a1)
000123A4 6600 B802                  		bne.w	DeleteObject
000123A8 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000123AE 6600                       		bne.s	Obj60_Circle
000123B0 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000123B6 6600                       		bne.s	Obj60_Circle
000123B8 5428 0024                  		addq.b	#2,$24(a0)
000123BC 5329 0037                  		subq.b	#1,$37(a1)
000123C0 6600                       		bne.s	Obj60_FireOrb
000123C2 5429 0024                  		addq.b	#2,$24(a1)
000123C6                            
000123C6                            Obj60_FireOrb:
000123C6 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000123CC 0829 0000 0022             		btst	#0,$22(a1)
000123D2 6700                       		beq.s	Obj60_Display2
000123D4 4468 0010                  		neg.w	$10(a0)
000123D8                            
000123D8                            Obj60_Display2:
000123D8 6000 B792                  		bra.w	DisplaySprite
000123DC                            ; ===========================================================================
000123DC                            
000123DC                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000123DC 1028 0026                  		move.b	$26(a0),d0
000123E0 4EB9 0000 2C22             		jsr	(CalcSine).l
000123E6 E841                       		asr.w	#4,d1
000123E8 D269 0008                  		add.w	8(a1),d1
000123EC 3141 0008                  		move.w	d1,8(a0)
000123F0 E840                       		asr.w	#4,d0
000123F2 D069 000C                  		add.w	$C(a1),d0
000123F6 3140 000C                  		move.w	d0,$C(a0)
000123FA 1029 0036                  		move.b	$36(a1),d0
000123FE D128 0026                  		add.b	d0,$26(a0)
00012402 6000 B768                  		bra.w	DisplaySprite
00012406                            ; ===========================================================================
00012406                            
00012406                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012406 6100 B73E                  		bsr.w	SpeedToPos
0001240A 4A28 0001                  		tst.b	1(a0)
0001240E 6A00 B798                  		bpl.w	DeleteObject
00012412 6000 B758                  		bra.w	DisplaySprite
00012416                            ; ===========================================================================
00012416                            Ani_obj60:
00012416                            	include "_anim\obj60.asm"
00012416                            ; ---------------------------------------------------------------------------
00012416                            ; Animation script - Orbinaut enemy
00012416                            ; ---------------------------------------------------------------------------
00012416 0000                       		dc.w byte_11EDA-Ani_obj60
00012418 0000                       		dc.w byte_11EDE-Ani_obj60
0001241A 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001241E 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012424                            		even
00012424                            		even
00012424                            
00012424                            ; ---------------------------------------------------------------------------
00012424                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012424                            ; ---------------------------------------------------------------------------
00012424                            Map_obj60:
00012424                            	include "_maps\obj60.asm"
00012424                            ; ---------------------------------------------------------------------------
00012424                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012424                            ; ---------------------------------------------------------------------------
00012424 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012428 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001242C 01                         byte_11EEC:	dc.b 1
0001242D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012432 01                         byte_11EF2:	dc.b 1
00012433 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012438 01                         byte_11EF8:	dc.b 1
00012439 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001243E 01                         byte_11EFE:	dc.b 1
0001243F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012444                            		even
00012444                            		even
00012444                            
00012444                            ; ===========================================================================
00012444                            ; ---------------------------------------------------------------------------
00012444                            ; Object 16 - harpoon (LZ)
00012444                            ; ---------------------------------------------------------------------------
00012444                            
00012444                            Obj16:					; XREF: Obj_Index
00012444 7000                       		moveq	#0,d0
00012446 1028 0024                  		move.b	$24(a0),d0
0001244A 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001244E 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012452                            ; ===========================================================================
00012452 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012454 0000                       		dc.w Obj16_Move-Obj16_Index
00012456 0000                       		dc.w Obj16_Wait-Obj16_Index
00012458                            ; ===========================================================================
00012458                            
00012458                            Obj16_Main:				; XREF: Obj16_Index
00012458 5428 0024                  		addq.b	#2,$24(a0)
0001245C 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012464 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001246A 0028 0004 0001             		ori.b	#4,1(a0)
00012470 117C 0004 0018             		move.b	#4,$18(a0)
00012476 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001247C 117C 0014 0019             		move.b	#$14,$19(a0)
00012482 317C 003C 0030             		move.w	#60,$30(a0)
00012488                            
00012488                            Obj16_Move:				; XREF: Obj16_Index
00012488 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001248E 6100 87B2                  		bsr.w	AnimateSprite
00012492 7000                       		moveq	#0,d0
00012494 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012498 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001249E 6000 D774                  		bra.w	MarkObjGone
000124A2                            ; ===========================================================================
000124A2 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000124A8                            ; ===========================================================================
000124A8                            
000124A8                            Obj16_Wait:				; XREF: Obj16_Index
000124A8 5368 0030                  		subq.w	#1,$30(a0)
000124AC 6A00                       		bpl.s	Obj16_ChkDel
000124AE 317C 003C 0030             		move.w	#60,$30(a0)
000124B4 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000124B8 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000124BE                            
000124BE                            Obj16_ChkDel:
000124BE 6000 D754                  		bra.w	MarkObjGone
000124C2                            ; ===========================================================================
000124C2                            Ani_obj16:
000124C2                            	include "_anim\obj16.asm"
000124C2                            ; ---------------------------------------------------------------------------
000124C2                            ; Animation script - harpoon (LZ)
000124C2                            ; ---------------------------------------------------------------------------
000124C2 0000                       		dc.w byte_11F8A-Ani_obj16
000124C4 0000                       		dc.w byte_11F8E-Ani_obj16
000124C6 0000                       		dc.w byte_11F92-Ani_obj16
000124C8 0000                       		dc.w byte_11F96-Ani_obj16
000124CA 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000124CE 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000124D2 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000124D6 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000124DA                            		even
000124DA                            		even
000124DA                            
000124DA                            ; ---------------------------------------------------------------------------
000124DA                            ; Sprite mappings - harpoon (LZ)
000124DA                            ; ---------------------------------------------------------------------------
000124DA                            Map_obj16:
000124DA                            	include "_maps\obj16.asm"
000124DA                            ; ---------------------------------------------------------------------------
000124DA                            ; Sprite mappings - harpoon (LZ)
000124DA                            ; ---------------------------------------------------------------------------
000124DA 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000124DE 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000124E2 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000124E6 01                         byte_11FA6:	dc.b 1
000124E7 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000124EC 01                         byte_11FAC:	dc.b 1
000124ED FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000124F2 02                         byte_11FB2:	dc.b 2
000124F3 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000124F8 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000124FD 01                         byte_11FBD:	dc.b 1
000124FE F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012503 01                         byte_11FC3:	dc.b 1
00012504 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012509 02                         byte_11FC9:	dc.b 2
0001250A D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001250F F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012514                            		even
00012514                            		even
00012514                            
00012514                            ; ===========================================================================
00012514                            ; ---------------------------------------------------------------------------
00012514                            ; Object 61 - blocks (LZ)
00012514                            ; ---------------------------------------------------------------------------
00012514                            
00012514                            Obj61:					; XREF: Obj_Index
00012514 7000                       		moveq	#0,d0
00012516 1028 0024                  		move.b	$24(a0),d0
0001251A 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001251E 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012522                            ; ===========================================================================
00012522 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012524 0000                       		dc.w Obj61_Action-Obj61_Index
00012526                            
00012526 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012528 200C                       		dc.b $20, $C
0001252A 1010                       		dc.b $10, $10
0001252C 1010                       		dc.b $10, $10
0001252E                            ; ===========================================================================
0001252E                            
0001252E                            Obj61_Main:				; XREF: Obj61_Index
0001252E 5428 0024                  		addq.b	#2,$24(a0)
00012532 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001253A 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012540 117C 0004 0001             		move.b	#4,1(a0)
00012546 117C 0003 0018             		move.b	#3,$18(a0)
0001254C 7000                       		moveq	#0,d0
0001254E 1028 0028                  		move.b	$28(a0),d0
00012552 E648                       		lsr.w	#3,d0
00012554 0240 000E                  		andi.w	#$E,d0
00012558 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001255C 115A 0019                  		move.b	(a2)+,$19(a0)
00012560 1152 0016                  		move.b	(a2),$16(a0)
00012564 E248                       		lsr.w	#1,d0
00012566 1140 001A                  		move.b	d0,$1A(a0)
0001256A 3168 0008 0034             		move.w	8(a0),$34(a0)
00012570 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012576 1028 0028                  		move.b	$28(a0),d0
0001257A 0200 000F                  		andi.b	#$F,d0
0001257E 6700                       		beq.s	Obj61_Action
00012580 0C00 0007                  		cmpi.b	#7,d0
00012584 6700                       		beq.s	Obj61_Action
00012586 117C 0001 0038             		move.b	#1,$38(a0)
0001258C                            
0001258C                            Obj61_Action:				; XREF: Obj61_Index
0001258C 3F28 0008                  		move.w	8(a0),-(sp)
00012590 7000                       		moveq	#0,d0
00012592 1028 0028                  		move.b	$28(a0),d0
00012596 0240 000F                  		andi.w	#$F,d0
0001259A D040                       		add.w	d0,d0
0001259C 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000125A0 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000125A4 381F                       		move.w	(sp)+,d4
000125A6 4A28 0001                  		tst.b	1(a0)
000125AA 6A00                       		bpl.s	Obj61_ChkDel
000125AC 7200                       		moveq	#0,d1
000125AE 1228 0019                  		move.b	$19(a0),d1
000125B2 0641 000B                  		addi.w	#$B,d1
000125B6 7400                       		moveq	#0,d2
000125B8 1428 0016                  		move.b	$16(a0),d2
000125BC 3602                       		move.w	d2,d3
000125BE 5243                       		addq.w	#1,d3
000125C0 6100 D97A                  		bsr.w	SolidObject
000125C4 1144 003F                  		move.b	d4,$3F(a0)
000125C8 6100 0000                  		bsr.w	loc_12180
000125CC                            
000125CC                            Obj61_ChkDel:
000125CC 3028 0034                  		move.w	$34(a0),d0
000125D0 0240 FF80                  		andi.w	#$FF80,d0
000125D4 3238 F700                  		move.w	($FFFFF700).w,d1
000125D8 0441 0080                  		subi.w	#$80,d1
000125DC 0241 FF80                  		andi.w	#$FF80,d1
000125E0 9041                       		sub.w	d1,d0
000125E2 0C40 0280                  		cmpi.w	#$280,d0
000125E6 6200 B5C0                  		bhi.w	DeleteObject
000125EA 6000 B580                  		bra.w	DisplaySprite
000125EE                            ; ===========================================================================
000125EE 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000125F2 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000125F6 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000125FA 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000125FE                            ; ===========================================================================
000125FE                            
000125FE                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000125FE 4E75                       		rts	
00012600                            ; ===========================================================================
00012600                            
00012600                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012600 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012604 6600                       		bne.s	loc_120D6	; if yes, branch
00012606 0828 0003 0022             		btst	#3,$22(a0)
0001260C 6700                       		beq.s	locret_120D4
0001260E 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012614                            
00012614                            locret_120D4:
00012614 4E75                       		rts	
00012616                            ; ===========================================================================
00012616                            
00012616                            loc_120D6:
00012616 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001261A 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001261C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012620 4228 0038                  		clr.b	$38(a0)
00012624 4E75                       		rts	
00012626                            ; ===========================================================================
00012626                            
00012626                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012626 6100 B51E                  		bsr.w	SpeedToPos
0001262A 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001262E 6100 0000                  		bsr.w	ObjHitFloor
00012632 4A41                       		tst.w	d1
00012634 6A00 0000                  		bpl.w	locret_12106
00012638 5241                       		addq.w	#1,d1
0001263A D368 000C                  		add.w	d1,$C(a0)
0001263E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012642 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012646                            
00012646                            locret_12106:
00012646 4E75                       		rts	
00012648                            ; ===========================================================================
00012648                            
00012648                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012648 6100 B4FC                  		bsr.w	SpeedToPos
0001264C 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012650 6100 0000                  		bsr.w	ObjHitCeiling
00012654 4A41                       		tst.w	d1
00012656 6A00 0000                  		bpl.w	locret_12126
0001265A 9368 000C                  		sub.w	d1,$C(a0)
0001265E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012662 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012666                            
00012666                            locret_12126:
00012666 4E75                       		rts	
00012668                            ; ===========================================================================
00012668                            
00012668                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012668 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001266E 6600                       		bne.s	locret_12138	; if not, branch
00012670 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012674 4228 0038                  		clr.b	$38(a0)
00012678                            
00012678                            locret_12138:
00012678 4E75                       		rts	
0001267A                            ; ===========================================================================
0001267A                            
0001267A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001267A 3038 F646                  		move.w	($FFFFF646).w,d0
0001267E 9068 000C                  		sub.w	$C(a0),d0
00012682 6700                       		beq.s	locret_1217E
00012684 6400                       		bcc.s	loc_12162
00012686 0C40 FFFE                  		cmpi.w	#-2,d0
0001268A 6C00                       		bge.s	loc_1214E
0001268C 70FE                       		moveq	#-2,d0
0001268E                            
0001268E                            loc_1214E:
0001268E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012692 6100 0000                  		bsr.w	ObjHitCeiling
00012696 4A41                       		tst.w	d1
00012698 6A00 0000                  		bpl.w	locret_12160
0001269C 9368 000C                  		sub.w	d1,$C(a0)
000126A0                            
000126A0                            locret_12160:
000126A0 4E75                       		rts	
000126A2                            ; ===========================================================================
000126A2                            
000126A2                            loc_12162:				; XREF: Obj61_Type07
000126A2 0C40 0002                  		cmpi.w	#2,d0
000126A6 6F00                       		ble.s	loc_1216A
000126A8 7002                       		moveq	#2,d0
000126AA                            
000126AA                            loc_1216A:
000126AA D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000126AE 6100 0000                  		bsr.w	ObjHitFloor
000126B2 4A41                       		tst.w	d1
000126B4 6A00 0000                  		bpl.w	locret_1217E
000126B8 5241                       		addq.w	#1,d1
000126BA D368 000C                  		add.w	d1,$C(a0)
000126BE                            
000126BE                            locret_1217E:
000126BE 4E75                       		rts	
000126C0                            ; ===========================================================================
000126C0                            
000126C0                            loc_12180:				; XREF: Obj61_Action
000126C0 4A28 0038                  		tst.b	$38(a0)
000126C4 6700                       		beq.s	locret_121C0
000126C6 0828 0003 0022             		btst	#3,$22(a0)
000126CC 6600                       		bne.s	loc_1219A
000126CE 4A28 003E                  		tst.b	$3E(a0)
000126D2 6700                       		beq.s	locret_121C0
000126D4 5928 003E                  		subq.b	#4,$3E(a0)
000126D8 6000                       		bra.s	loc_121A6
000126DA                            ; ===========================================================================
000126DA                            
000126DA                            loc_1219A:
000126DA 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000126E0 6700                       		beq.s	locret_121C0
000126E2 5828 003E                  		addq.b	#4,$3E(a0)
000126E6                            
000126E6                            loc_121A6:
000126E6 1028 003E                  		move.b	$3E(a0),d0
000126EA 4EB9 0000 2C22             		jsr	(CalcSine).l
000126F0 323C 0400                  		move.w	#$400,d1
000126F4 C1C1                       		muls.w	d1,d0
000126F6 4840                       		swap	d0
000126F8 D068 0030                  		add.w	$30(a0),d0
000126FC 3140 000C                  		move.w	d0,$C(a0)
00012700                            
00012700                            locret_121C0:
00012700 4E75                       		rts	
00012702                            ; ===========================================================================
00012702                            ; ---------------------------------------------------------------------------
00012702                            ; Sprite mappings - blocks (LZ)
00012702                            ; ---------------------------------------------------------------------------
00012702                            Map_obj61:
00012702                            	include "_maps\obj61.asm"
00012702                            ; ---------------------------------------------------------------------------
00012702                            ; Sprite mappings - blocks (LZ)
00012702                            ; ---------------------------------------------------------------------------
00012702 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012706 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001270A 01                         byte_121CA:	dc.b 1
0001270B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012710 02                         byte_121D0:	dc.b 2
00012711 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012716 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001271B 01                         byte_121DB:	dc.b 1
0001271C F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012721 01                         byte_121E1:	dc.b 1
00012722 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012728 00                         		even
00012728 00                         		even
00012728                            
00012728                            ; ===========================================================================
00012728                            ; ---------------------------------------------------------------------------
00012728                            ; Object 62 - gargoyle head (LZ)
00012728                            ; ---------------------------------------------------------------------------
00012728                            
00012728                            Obj62:					; XREF: Obj_Index
00012728 7000                       		moveq	#0,d0
0001272A 1028 0024                  		move.b	$24(a0),d0
0001272E 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012732 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012736 6000 D4DC                  		bra.w	MarkObjGone
0001273A                            ; ===========================================================================
0001273A 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001273C 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001273E 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012740 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012742                            
00012742 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001274A                            ; ===========================================================================
0001274A                            
0001274A                            Obj62_Main:				; XREF: Obj62_Index
0001274A 5428 0024                  		addq.b	#2,$24(a0)
0001274E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012756 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001275C 0028 0004 0001             		ori.b	#4,1(a0)
00012762 117C 0003 0018             		move.b	#3,$18(a0)
00012768 117C 0010 0019             		move.b	#$10,$19(a0)
0001276E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012772 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012776 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001277C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012782 0228 000F 0028             		andi.b	#$F,$28(a0)
00012788                            
00012788                            Obj62_MakeFire:				; XREF: Obj62_Index
00012788 5328 001E                  		subq.b	#1,$1E(a0)
0001278C 6600                       		bne.s	Obj62_NoFire
0001278E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012794 6100 B650                  		bsr.w	ChkObjOnScreen
00012798 6600                       		bne.s	Obj62_NoFire
0001279A 6100 B856                  		bsr.w	SingleObjLoad
0001279E 6600                       		bne.s	Obj62_NoFire
000127A0 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000127A4 5829 0024                  		addq.b	#4,$24(a1)
000127A8 3368 0008 0008             		move.w	8(a0),8(a1)
000127AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127B4 1368 0001 0001             		move.b	1(a0),1(a1)
000127BA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000127C0                            
000127C0                            Obj62_NoFire:
000127C0 4E75                       		rts	
000127C2                            ; ===========================================================================
000127C2                            
000127C2                            Obj62_FireBall:				; XREF: Obj62_Index
000127C2 5428 0024                  		addq.b	#2,$24(a0)
000127C6 117C 0008 0016             		move.b	#8,$16(a0)
000127CC 117C 0008 0017             		move.b	#8,$17(a0)
000127D2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127DA 317C 02E9 0002             		move.w	#$2E9,2(a0)
000127E0 0028 0004 0001             		ori.b	#4,1(a0)
000127E6 117C 0004 0018             		move.b	#4,$18(a0)
000127EC 117C 0098 0020             		move.b	#$98,$20(a0)
000127F2 117C 0008 0019             		move.b	#8,$19(a0)
000127F8 117C 0002 001A             		move.b	#2,$1A(a0)
000127FE 5068 000C                  		addq.w	#8,$C(a0)
00012802 317C 0200 0010             		move.w	#$200,$10(a0)
00012808 0828 0000 0022             		btst	#0,$22(a0)
0001280E 6600                       		bne.s	Obj62_Sound
00012810 4468 0010                  		neg.w	$10(a0)
00012814                            
00012814                            Obj62_Sound:
00012814 303C 00AE                  		move.w	#$AE,d0
00012818 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001281E                            
0001281E                            Obj62_AniFire:				; XREF: Obj62_Index
0001281E 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012822 0200 0007                  		andi.b	#7,d0
00012826 6600                       		bne.s	Obj62_StopFire
00012828 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001282E                            
0001282E                            Obj62_StopFire:
0001282E 6100 B316                  		bsr.w	SpeedToPos
00012832 0828 0000 0022             		btst	#0,$22(a0)
00012838 6600                       		bne.s	Obj62_StopFire2
0001283A 76F8                       		moveq	#-8,d3
0001283C 6100 0000                  		bsr.w	ObjHitWallLeft
00012840 4A41                       		tst.w	d1
00012842 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012846 4E75                       		rts	
00012848                            ; ===========================================================================
00012848                            
00012848                            Obj62_StopFire2:
00012848 7608                       		moveq	#8,d3
0001284A 6100 0000                  		bsr.w	ObjHitWallRight
0001284E 4A41                       		tst.w	d1
00012850 6B00 B356                  		bmi.w	DeleteObject
00012854 4E75                       		rts	
00012856                            ; ===========================================================================
00012856                            ; ---------------------------------------------------------------------------
00012856                            ; Sprite mappings - gargoyle head (LZ)
00012856                            ; ---------------------------------------------------------------------------
00012856                            Map_obj62:
00012856                            	include "_maps\obj62.asm"
00012856                            ; ---------------------------------------------------------------------------
00012856                            ; Sprite mappings - gargoyle head (LZ)
00012856                            ; ---------------------------------------------------------------------------
00012856 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001285A 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001285E 03                         byte_12320:	dc.b 3
0001285F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012864 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012869 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001286E 01                         byte_12330:	dc.b 1
0001286F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012874 01                         byte_12336:	dc.b 1
00012875 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001287A                            		even
0001287A                            		even
0001287A                            
0001287A                            ; ===========================================================================
0001287A                            ; ---------------------------------------------------------------------------
0001287A                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001287A                            ; ---------------------------------------------------------------------------
0001287A                            
0001287A                            Obj63:					; XREF: Obj_Index
0001287A 7000                       		moveq	#0,d0
0001287C 1028 0024                  		move.b	$24(a0),d0
00012880 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012884 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012888 3028 0030                  		move.w	$30(a0),d0
0001288C 0240 FF80                  		andi.w	#$FF80,d0
00012890 3238 F700                  		move.w	($FFFFF700).w,d1
00012894 0441 0080                  		subi.w	#$80,d1
00012898 0241 FF80                  		andi.w	#$FF80,d1
0001289C 9041                       		sub.w	d1,d0
0001289E 0C40 0280                  		cmpi.w	#$280,d0
000128A2 6200                       		bhi.s	loc_1236A
000128A4                            
000128A4                            Obj63_Display:				; XREF: loc_1236A
000128A4 6000 B2C6                  		bra.w	DisplaySprite
000128A8                            ; ===========================================================================
000128A8                            
000128A8                            loc_1236A:				; XREF: Obj63
000128A8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000128AE 6600                       		bne.s	loc_12378
000128B0 0C40 FF80                  		cmpi.w	#-$80,d0
000128B4 64EE                       		bcc.s	Obj63_Display
000128B6                            
000128B6                            loc_12378:
000128B6 1028 002F                  		move.b	$2F(a0),d0
000128BA 6A00 B2EC                  		bpl.w	DeleteObject
000128BE 0240 007F                  		andi.w	#$7F,d0
000128C2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000128C6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000128CC 6000 B2DA                  		bra.w	DeleteObject
000128D0                            ; ===========================================================================
000128D0 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000128D2 0000                       		dc.w loc_124B2-Obj63_Index
000128D4 0000                       		dc.w loc_124C2-Obj63_Index
000128D6 0000                       		dc.w loc_124DE-Obj63_Index
000128D8                            ; ===========================================================================
000128D8                            
000128D8                            Obj63_Main:				; XREF: Obj63_Index
000128D8 1028 0028                  		move.b	$28(a0),d0
000128DC 6B00 0000                  		bmi.w	loc_12460
000128E0 5428 0024                  		addq.b	#2,$24(a0)
000128E4 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000128EC 317C 43F6 0002             		move.w	#$43F6,2(a0)
000128F2 0028 0004 0001             		ori.b	#4,1(a0)
000128F8 117C 0010 0019             		move.b	#$10,$19(a0)
000128FE 117C 0004 0018             		move.b	#4,$18(a0)
00012904 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001290A 6600                       		bne.s	loc_123E2
0001290C 5828 0024                  		addq.b	#4,$24(a0)
00012910 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012916 117C 0001 0018             		move.b	#1,$18(a0)
0001291C 6000 0000                  		bra.w	loc_124DE
00012920                            ; ===========================================================================
00012920                            
00012920                            loc_123E2:
00012920 117C 0004 001A             		move.b	#4,$1A(a0)
00012926 7000                       		moveq	#0,d0
00012928 1028 0028                  		move.b	$28(a0),d0
0001292C 3200                       		move.w	d0,d1
0001292E E648                       		lsr.w	#3,d0
00012930 0240 001E                  		andi.w	#$1E,d0
00012934 45FA 0000                  		lea	Obj63_Data(pc),a2
00012938 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001293C 315A 0038                  		move.w	(a2)+,$38(a0)
00012940 315A 0030                  		move.w	(a2)+,$30(a0)
00012944 214A 003C                  		move.l	a2,$3C(a0)
00012948 0241 000F                  		andi.w	#$F,d1
0001294C E549                       		lsl.w	#2,d1
0001294E 1141 0038                  		move.b	d1,$38(a0)
00012952 117C 0004 003A             		move.b	#4,$3A(a0)
00012958 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001295C 6700                       		beq.s	loc_1244C
0001295E 117C 0001 003B             		move.b	#1,$3B(a0)
00012964 4428 003A                  		neg.b	$3A(a0)
00012968 7200                       		moveq	#0,d1
0001296A 1228 0038                  		move.b	$38(a0),d1
0001296E D228 003A                  		add.b	$3A(a0),d1
00012972 B228 0039                  		cmp.b	$39(a0),d1
00012976 6500                       		bcs.s	loc_12448
00012978 1001                       		move.b	d1,d0
0001297A 7200                       		moveq	#0,d1
0001297C 4A00                       		tst.b	d0
0001297E 6A00                       		bpl.s	loc_12448
00012980 1228 0039                  		move.b	$39(a0),d1
00012984 5901                       		subq.b	#4,d1
00012986                            
00012986                            loc_12448:
00012986 1141 0038                  		move.b	d1,$38(a0)
0001298A                            
0001298A                            loc_1244C:
0001298A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012990 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012996 6100 0000                  		bsr.w	Obj63_ChangeDir
0001299A 6000 0000                  		bra.w	loc_124B2
0001299E                            ; ===========================================================================
0001299E                            
0001299E                            loc_12460:				; XREF: Obj63_Main
0001299E 1140 002F                  		move.b	d0,$2F(a0)
000129A2 0240 007F                  		andi.w	#$7F,d0
000129A6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129AA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000129B0 6600 B1F6                  		bne.w	DeleteObject
000129B4 D040                       		add.w	d0,d0
000129B6 0240 001E                  		andi.w	#$1E,d0
000129BA 0640 0070                  		addi.w	#$70,d0
000129BE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000129C4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000129C8 321A                       		move.w	(a2)+,d1
000129CA 2248                       		movea.l	a0,a1
000129CC 6000                       		bra.s	Obj63_MakePtfms
000129CE                            ; ===========================================================================
000129CE                            
000129CE                            Obj63_Loop:
000129CE 6100 B622                  		bsr.w	SingleObjLoad
000129D2 6600                       		bne.s	loc_124AA
000129D4                            
000129D4                            Obj63_MakePtfms:			; XREF: loc_12460
000129D4 12BC 0063                  		move.b	#$63,0(a1)
000129D8 335A 0008                  		move.w	(a2)+,8(a1)
000129DC 335A 000C                  		move.w	(a2)+,$C(a1)
000129E0 301A                       		move.w	(a2)+,d0
000129E2 1340 0028                  		move.b	d0,$28(a1)
000129E6                            
000129E6                            loc_124AA:
000129E6 51C9 FFE6                  		dbf	d1,Obj63_Loop
000129EA                            
000129EA 588F                       		addq.l	#4,sp
000129EC 4E75                       		rts	
000129EE                            ; ===========================================================================
000129EE                            
000129EE                            loc_124B2:				; XREF: Obj63_Index
000129EE 7200                       		moveq	#0,d1
000129F0 1228 0019                  		move.b	$19(a0),d1
000129F4 4EB9 0000 789E             		jsr	(PlatformObject).l
000129FA 6000 0000                  		bra.w	sub_12502
000129FE                            ; ===========================================================================
000129FE                            
000129FE                            loc_124C2:				; XREF: Obj63_Index
000129FE 7200                       		moveq	#0,d1
00012A00 1228 0019                  		move.b	$19(a0),d1
00012A04 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00012A0A 3F28 0008                  		move.w	8(a0),-(sp)
00012A0E 6100 0000                  		bsr.w	sub_12502
00012A12 341F                       		move.w	(sp)+,d2
00012A14 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00012A1A                            ; ===========================================================================
00012A1A                            
00012A1A                            loc_124DE:				; XREF: Obj63_Index
00012A1A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A1E 0240 0003                  		andi.w	#3,d0
00012A22 6600                       		bne.s	loc_124FC
00012A24 7201                       		moveq	#1,d1
00012A26 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A2A 6700                       		beq.s	loc_124F2
00012A2C 4401                       		neg.b	d1
00012A2E                            
00012A2E                            loc_124F2:
00012A2E D328 001A                  		add.b	d1,$1A(a0)
00012A32 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A38                            
00012A38                            loc_124FC:
00012A38 588F                       		addq.l	#4,sp
00012A3A 6000 D1D8                  		bra.w	MarkObjGone
00012A3E                            
00012A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A3E                            
00012A3E                            
00012A3E                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A3E 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A42 6700                       		beq.s	loc_12520
00012A44 4A28 003B                  		tst.b	$3B(a0)
00012A48 6600                       		bne.s	loc_12520
00012A4A 117C 0001 003B             		move.b	#1,$3B(a0)
00012A50 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A56 4428 003A                  		neg.b	$3A(a0)
00012A5A 6000                       		bra.s	loc_12534
00012A5C                            ; ===========================================================================
00012A5C                            
00012A5C                            loc_12520:
00012A5C 3028 0008                  		move.w	8(a0),d0
00012A60 B068 0034                  		cmp.w	$34(a0),d0
00012A64 6600                       		bne.s	loc_1256A
00012A66 3028 000C                  		move.w	$C(a0),d0
00012A6A B068 0036                  		cmp.w	$36(a0),d0
00012A6E 6600                       		bne.s	loc_1256A
00012A70                            
00012A70                            loc_12534:
00012A70 7200                       		moveq	#0,d1
00012A72 1228 0038                  		move.b	$38(a0),d1
00012A76 D228 003A                  		add.b	$3A(a0),d1
00012A7A B228 0039                  		cmp.b	$39(a0),d1
00012A7E 6500                       		bcs.s	loc_12552
00012A80 1001                       		move.b	d1,d0
00012A82 7200                       		moveq	#0,d1
00012A84 4A00                       		tst.b	d0
00012A86 6A00                       		bpl.s	loc_12552
00012A88 1228 0039                  		move.b	$39(a0),d1
00012A8C 5901                       		subq.b	#4,d1
00012A8E                            
00012A8E                            loc_12552:
00012A8E 1141 0038                  		move.b	d1,$38(a0)
00012A92 2268 003C                  		movea.l	$3C(a0),a1
00012A96 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012A9C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012AA2 6100 0000                  		bsr.w	Obj63_ChangeDir
00012AA6                            
00012AA6                            loc_1256A:
00012AA6 6100 B09E                  		bsr.w	SpeedToPos
00012AAA 4E75                       		rts	
00012AAC                            ; End of function sub_12502
00012AAC                            
00012AAC                            
00012AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AAC                            
00012AAC                            
00012AAC                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012AAC 7000                       		moveq	#0,d0
00012AAE 343C FF00                  		move.w	#-$100,d2
00012AB2 3028 0008                  		move.w	8(a0),d0
00012AB6 9068 0034                  		sub.w	$34(a0),d0
00012ABA 6400                       		bcc.s	loc_12584
00012ABC 4440                       		neg.w	d0
00012ABE 4442                       		neg.w	d2
00012AC0                            
00012AC0                            loc_12584:
00012AC0 7200                       		moveq	#0,d1
00012AC2 363C FF00                  		move.w	#-$100,d3
00012AC6 3228 000C                  		move.w	$C(a0),d1
00012ACA 9268 0036                  		sub.w	$36(a0),d1
00012ACE 6400                       		bcc.s	loc_12598
00012AD0 4441                       		neg.w	d1
00012AD2 4443                       		neg.w	d3
00012AD4                            
00012AD4                            loc_12598:
00012AD4 B240                       		cmp.w	d0,d1
00012AD6 6500                       		bcs.s	loc_125C2
00012AD8 3028 0008                  		move.w	8(a0),d0
00012ADC 9068 0034                  		sub.w	$34(a0),d0
00012AE0 6700                       		beq.s	loc_125AE
00012AE2 48C0                       		ext.l	d0
00012AE4 E180                       		asl.l	#8,d0
00012AE6 81C1                       		divs.w	d1,d0
00012AE8 4440                       		neg.w	d0
00012AEA                            
00012AEA                            loc_125AE:
00012AEA 3140 0010                  		move.w	d0,$10(a0)
00012AEE 3143 0012                  		move.w	d3,$12(a0)
00012AF2 4840                       		swap	d0
00012AF4 3140 000A                  		move.w	d0,$A(a0)
00012AF8 4268 000E                  		clr.w	$E(a0)
00012AFC 4E75                       		rts	
00012AFE                            ; ===========================================================================
00012AFE                            
00012AFE                            loc_125C2:				; XREF: Obj63_ChangeDir
00012AFE 3228 000C                  		move.w	$C(a0),d1
00012B02 9268 0036                  		sub.w	$36(a0),d1
00012B06 6700                       		beq.s	loc_125D4
00012B08 48C1                       		ext.l	d1
00012B0A E181                       		asl.l	#8,d1
00012B0C 83C0                       		divs.w	d0,d1
00012B0E 4441                       		neg.w	d1
00012B10                            
00012B10                            loc_125D4:
00012B10 3141 0012                  		move.w	d1,$12(a0)
00012B14 3142 0010                  		move.w	d2,$10(a0)
00012B18 4841                       		swap	d1
00012B1A 3141 000E                  		move.w	d1,$E(a0)
00012B1E 4268 000A                  		clr.w	$A(a0)
00012B22 4E75                       		rts	
00012B24                            ; End of function Obj63_ChangeDir
00012B24                            
00012B24                            ; ===========================================================================
00012B24 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B26 0000                       		dc.w word_12610-Obj63_Data
00012B28 0000                       		dc.w word_12628-Obj63_Data
00012B2A 0000                       		dc.w word_1263C-Obj63_Data
00012B2C 0000                       		dc.w word_12650-Obj63_Data
00012B2E 0000                       		dc.w word_12668-Obj63_Data
00012B30 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B40 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B4C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012B5C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012B64 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012B78 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012B8C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012BA4 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012BB8                            
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8                            Map_obj63:
00012BB8                            	include "_maps\obj63.asm"
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012BBC 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012BC0 0000                       		dc.w byte_1269E-Map_obj63
00012BC2 01                         byte_12686:	dc.b 1
00012BC3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BC8 01                         byte_1268C:	dc.b 1
00012BC9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012BCE 01                         byte_12692:	dc.b 1
00012BCF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012BD4 01                         byte_12698:	dc.b 1
00012BD5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012BDA 01                         byte_1269E:	dc.b 1
00012BDB F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012BE0                            		even
00012BE0                            		even
00012BE0                            
00012BE0                            ; ===========================================================================
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0                            ; Object 64 - bubbles (LZ)
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0                            
00012BE0                            Obj64:					; XREF: Obj_Index
00012BE0 7000                       		moveq	#0,d0
00012BE2 1028 0024                  		move.b	$24(a0),d0
00012BE6 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012BEA 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012BEE                            ; ===========================================================================
00012BEE 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012BF0 0000                       		dc.w Obj64_Animate-Obj64_Index
00012BF2 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012BF4 0000                       		dc.w Obj64_Display2-Obj64_Index
00012BF6 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012BF8 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012BFA                            ; ===========================================================================
00012BFA                            
00012BFA                            Obj64_Main:				; XREF: Obj64_Index
00012BFA 5428 0024                  		addq.b	#2,$24(a0)
00012BFE 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C06 317C 8348 0002             		move.w	#$8348,2(a0)
00012C0C 117C 0084 0001             		move.b	#$84,1(a0)
00012C12 117C 0010 0019             		move.b	#$10,$19(a0)
00012C18 117C 0001 0018             		move.b	#1,$18(a0)
00012C1E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C22 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C24 5028 0024                  		addq.b	#8,$24(a0)
00012C28 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C2C 1140 0032                  		move.b	d0,$32(a0)
00012C30 1140 0033                  		move.b	d0,$33(a0)
00012C34 117C 0006 001C             		move.b	#6,$1C(a0)
00012C3A 6000 0000                  		bra.w	Obj64_BblMaker
00012C3E                            ; ===========================================================================
00012C3E                            
00012C3E                            Obj64_Bubble:				; XREF: Obj64_Main
00012C3E 1140 001C                  		move.b	d0,$1C(a0)
00012C42 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C48 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C4E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C54 1140 0026                  		move.b	d0,$26(a0)
00012C58                            
00012C58                            Obj64_Animate:				; XREF: Obj64_Index
00012C58 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C5E 4EB9 0000 AC42             		jsr	AnimateSprite
00012C64 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012C6A 6600                       		bne.s	Obj64_ChkWater
00012C6C 117C 0001 002E             		move.b	#1,$2E(a0)
00012C72                            
00012C72                            Obj64_ChkWater:				; XREF: Obj64_Index
00012C72 3038 F646                  		move.w	($FFFFF646).w,d0
00012C76 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012C7A 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012C7C                            
00012C7C                            Obj64_Burst:				; XREF: Obj64_Wobble
00012C7C 117C 0006 0024             		move.b	#6,$24(a0)
00012C82 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012C86 6000 0000                  		bra.w	Obj64_Display2
00012C8A                            ; ===========================================================================
00012C8A                            
00012C8A                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012C8A 1028 0026                  		move.b	$26(a0),d0
00012C8E 5228 0026                  		addq.b	#1,$26(a0)
00012C92 0240 007F                  		andi.w	#$7F,d0
00012C96 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012C9C 1031 0000                  		move.b	(a1,d0.w),d0
00012CA0 4880                       		ext.w	d0
00012CA2 D068 0030                  		add.w	$30(a0),d0
00012CA6 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012CAA 4A28 002E                  		tst.b	$2E(a0)
00012CAE 6700                       		beq.s	Obj64_Display
00012CB0 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012CB4 6700                       		beq.s	Obj64_Display	; if not, branch
00012CB6                            
00012CB6 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012CBA 303C 00AD                  		move.w	#$AD,d0
00012CBE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012CC4 43F8 D000                  		lea	($FFFFD000).w,a1
00012CC8 4269 0010                  		clr.w	$10(a1)
00012CCC 4269 0012                  		clr.w	$12(a1)
00012CD0 4269 0014                  		clr.w	$14(a1)
00012CD4 137C 0015 001C             		move.b	#$15,$1C(a1)
00012CDA 337C 0023 003E             		move.w	#$23,$3E(a1)
00012CE0 137C 0000 003C             		move.b	#0,$3C(a1)
00012CE6 08A9 0005 0022             		bclr	#5,$22(a1)
00012CEC 08A9 0004 0022             		bclr	#4,$22(a1)
00012CF2 0829 0002 0022             		btst	#2,$22(a1)
00012CF8 6700 FF82                  		beq.w	Obj64_Burst
00012CFC 08A9 0002 0022             		bclr	#2,$22(a1)
00012D02 137C 0013 0016             		move.b	#$13,$16(a1)
00012D08 137C 0009 0017             		move.b	#9,$17(a1)
00012D0E 5B69 000C                  		subq.w	#5,$C(a1)
00012D12 6000 FF68                  		bra.w	Obj64_Burst
00012D16                            ; ===========================================================================
00012D16                            
00012D16                            Obj64_Display:				; XREF: Obj64_Wobble
00012D16 6100 AE2E                  		bsr.w	SpeedToPos
00012D1A 4A28 0001                  		tst.b	1(a0)
00012D1E 6A00                       		bpl.s	Obj64_Delete
00012D20 4EFA AE4A                  		jmp	DisplaySprite
00012D24                            ; ===========================================================================
00012D24                            
00012D24                            Obj64_Delete:
00012D24 4EFA AE82                  		jmp	DeleteObject
00012D28                            ; ===========================================================================
00012D28                            
00012D28                            Obj64_Display2:				; XREF: Obj64_Index
00012D28 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D2E 4EB9 0000 AC42             		jsr	AnimateSprite
00012D34 4A28 0001                  		tst.b	1(a0)
00012D38 6A00                       		bpl.s	Obj64_Delete2
00012D3A 4EFA AE30                  		jmp	DisplaySprite
00012D3E                            ; ===========================================================================
00012D3E                            
00012D3E                            Obj64_Delete2:
00012D3E 4EFA AE68                  		jmp	DeleteObject
00012D42                            ; ===========================================================================
00012D42                            
00012D42                            Obj64_Delete3:				; XREF: Obj64_Index
00012D42 6000 AE64                  		bra.w	DeleteObject
00012D46                            ; ===========================================================================
00012D46                            
00012D46                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D46 4A68 0036                  		tst.w	$36(a0)
00012D4A 6600                       		bne.s	loc_12874
00012D4C 3038 F646                  		move.w	($FFFFF646).w,d0
00012D50 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D54 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012D58 4A28 0001                  		tst.b	1(a0)
00012D5C 6A00 0000                  		bpl.w	Obj64_ChkDel
00012D60 5368 0038                  		subq.w	#1,$38(a0)
00012D64 6A00 0000                  		bpl.w	loc_12914
00012D68 317C 0001 0036             		move.w	#1,$36(a0)
00012D6E                            
00012D6E                            loc_1283A:
00012D6E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012D74 3200                       		move.w	d0,d1
00012D76 0240 0007                  		andi.w	#7,d0
00012D7A 0C40 0006                  		cmpi.w	#6,d0
00012D7E 64EE                       		bcc.s	loc_1283A
00012D80                            
00012D80 1140 0034                  		move.b	d0,$34(a0)
00012D84 0241 000C                  		andi.w	#$C,d1
00012D88 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012D8E D2C1                       		adda.w	d1,a1
00012D90 2149 003C                  		move.l	a1,$3C(a0)
00012D94 5328 0032                  		subq.b	#1,$32(a0)
00012D98 6A00                       		bpl.s	loc_12872
00012D9A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012DA0 08E8 0007 0036             		bset	#7,$36(a0)
00012DA6                            
00012DA6                            loc_12872:
00012DA6 6000                       		bra.s	loc_1287C
00012DA8                            ; ===========================================================================
00012DA8                            
00012DA8                            loc_12874:				; XREF: Obj64_BblMaker
00012DA8 5368 0038                  		subq.w	#1,$38(a0)
00012DAC 6A00 0000                  		bpl.w	loc_12914
00012DB0                            
00012DB0                            loc_1287C:
00012DB0 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DB6 0240 001F                  		andi.w	#$1F,d0
00012DBA 3140 0038                  		move.w	d0,$38(a0)
00012DBE 6100 B232                  		bsr.w	SingleObjLoad
00012DC2 6600                       		bne.s	loc_128F8
00012DC4 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012DC8 3368 0008 0008             		move.w	8(a0),8(a1)
00012DCE 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DD4 0240 000F                  		andi.w	#$F,d0
00012DD8 5140                       		subq.w	#8,d0
00012DDA D169 0008                  		add.w	d0,8(a1)
00012DDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012DE4 7000                       		moveq	#0,d0
00012DE6 1028 0034                  		move.b	$34(a0),d0
00012DEA 2468 003C                  		movea.l	$3C(a0),a2
00012DEE 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012DF4 0828 0007 0036             		btst	#7,$36(a0)
00012DFA 6700                       		beq.s	loc_128F8
00012DFC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E02 0240 0003                  		andi.w	#3,d0
00012E06 6600                       		bne.s	loc_128E4
00012E08 08E8 0006 0036             		bset	#6,$36(a0)
00012E0E 6600                       		bne.s	loc_128F8
00012E10 137C 0002 0028             		move.b	#2,$28(a1)
00012E16                            
00012E16                            loc_128E4:
00012E16 4A28 0034                  		tst.b	$34(a0)
00012E1A 6600                       		bne.s	loc_128F8
00012E1C 08E8 0006 0036             		bset	#6,$36(a0)
00012E22 6600                       		bne.s	loc_128F8
00012E24 137C 0002 0028             		move.b	#2,$28(a1)
00012E2A                            
00012E2A                            loc_128F8:
00012E2A 5328 0034                  		subq.b	#1,$34(a0)
00012E2E 6A00                       		bpl.s	loc_12914
00012E30 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E36 0240 007F                  		andi.w	#$7F,d0
00012E3A 0640 0080                  		addi.w	#$80,d0
00012E3E D168 0038                  		add.w	d0,$38(a0)
00012E42 4268 0036                  		clr.w	$36(a0)
00012E46                            
00012E46                            loc_12914:
00012E46 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E4C 4EB9 0000 AC42             		jsr	AnimateSprite
00012E52                            
00012E52                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E52 3028 0008                  		move.w	8(a0),d0
00012E56 0240 FF80                  		andi.w	#$FF80,d0
00012E5A 3238 F700                  		move.w	($FFFFF700).w,d1
00012E5E 0441 0080                  		subi.w	#$80,d1
00012E62 0241 FF80                  		andi.w	#$FF80,d1
00012E66 9041                       		sub.w	d1,d0
00012E68 0C40 0280                  		cmpi.w	#$280,d0
00012E6C 6200 AD3A                  		bhi.w	DeleteObject
00012E70 3038 F646                  		move.w	($FFFFF646).w,d0
00012E74 B068 000C                  		cmp.w	$C(a0),d0
00012E78 6500 ACF2                  		bcs.w	DisplaySprite
00012E7C 4E75                       		rts	
00012E7E                            ; ===========================================================================
00012E7E                            ; bubble production sequence
00012E7E                            
00012E7E                            ; 0 = small bubble, 1 =	large bubble
00012E7E                            
00012E7E 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012E90                            
00012E90                            ; ===========================================================================
00012E90                            
00012E90                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012E90 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012E94 6B00                       		bmi.s	loc_12998
00012E96 43F8 D000                  		lea	($FFFFD000).w,a1
00012E9A 3029 0008                  		move.w	8(a1),d0
00012E9E 3228 0008                  		move.w	8(a0),d1
00012EA2 0441 0010                  		subi.w	#$10,d1
00012EA6 B240                       		cmp.w	d0,d1
00012EA8 6400                       		bcc.s	loc_12998
00012EAA 0641 0020                  		addi.w	#$20,d1
00012EAE B240                       		cmp.w	d0,d1
00012EB0 6500                       		bcs.s	loc_12998
00012EB2 3029 000C                  		move.w	$C(a1),d0
00012EB6 3228 000C                  		move.w	$C(a0),d1
00012EBA B240                       		cmp.w	d0,d1
00012EBC 6400                       		bcc.s	loc_12998
00012EBE 0641 0010                  		addi.w	#$10,d1
00012EC2 B240                       		cmp.w	d0,d1
00012EC4 6500                       		bcs.s	loc_12998
00012EC6 7001                       		moveq	#1,d0
00012EC8 4E75                       		rts	
00012ECA                            ; ===========================================================================
00012ECA                            
00012ECA                            loc_12998:
00012ECA 7000                       		moveq	#0,d0
00012ECC 4E75                       		rts	
00012ECE                            ; ===========================================================================
00012ECE                            Ani_obj64:
00012ECE                            	include "_anim\obj64.asm"
00012ECE                            ; ---------------------------------------------------------------------------
00012ECE                            ; Animation script - bubbles (LZ)
00012ECE                            ; ---------------------------------------------------------------------------
00012ECE 0000                       		dc.w byte_129AA-Ani_obj64
00012ED0 0000                       		dc.w byte_129B0-Ani_obj64
00012ED2 0000                       		dc.w byte_129B6-Ani_obj64
00012ED4 0000                       		dc.w byte_129BE-Ani_obj64
00012ED6 0000                       		dc.w byte_129BE-Ani_obj64
00012ED8 0000                       		dc.w byte_129C0-Ani_obj64
00012EDA 0000                       		dc.w byte_129C6-Ani_obj64
00012EDC 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012EE2 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012EE8 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012EF0 04FC                       byte_129BE:	dc.b 4,	$FC
00012EF2 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012EF8 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012EFE 00                         		even
00012EFE 00                         		even
00012EFE                            
00012EFE                            ; ---------------------------------------------------------------------------
00012EFE                            ; Sprite mappings - bubbles (LZ)
00012EFE                            ; ---------------------------------------------------------------------------
00012EFE                            Map_obj64:
00012EFE                            	include "_maps\obj64.asm"
00012EFE                            ; ---------------------------------------------------------------------------
00012EFE                            ; Sprite mappings - bubbles (LZ)
00012EFE                            ; ---------------------------------------------------------------------------
00012EFE 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F02 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F06 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F0A 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F0E 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F12 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F16 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F1A 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F1E 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F22 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F26 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F2A 0000                       		dc.w byte_12A9C-Map_obj64
00012F2C 01                         byte_129FA:	dc.b 1
00012F2D FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F32 01                         byte_12A00:	dc.b 1
00012F33 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F38 01                         byte_12A06:	dc.b 1
00012F39 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F3E 01                         byte_12A0C:	dc.b 1
00012F3F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F44 01                         byte_12A12:	dc.b 1
00012F45 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F4A 01                         byte_12A18:	dc.b 1
00012F4B F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F50 01                         byte_12A1E:	dc.b 1
00012F51 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F56 04                         byte_12A24:	dc.b 4
00012F57 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012F5C F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012F61 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012F66 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012F6B 04                         byte_12A39:	dc.b 4
00012F6C F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012F71 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012F76 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012F7B 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012F80 01                         byte_12A4E:	dc.b 1
00012F81 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012F86 01                         byte_12A54:	dc.b 1
00012F87 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012F8C 01                         byte_12A5A:	dc.b 1
00012F8D F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012F92 01                         byte_12A60:	dc.b 1
00012F93 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012F98 01                         byte_12A66:	dc.b 1
00012F99 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012F9E 01                         byte_12A6C:	dc.b 1
00012F9F F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012FA4 01                         byte_12A72:	dc.b 1
00012FA5 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012FAA 01                         byte_12A78:	dc.b 1
00012FAB F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012FB0 01                         byte_12A7E:	dc.b 1
00012FB1 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012FB6 01                         byte_12A84:	dc.b 1
00012FB7 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012FBC 01                         byte_12A8A:	dc.b 1
00012FBD F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012FC2 01                         byte_12A90:	dc.b 1
00012FC3 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012FC8 01                         byte_12A96:	dc.b 1
00012FC9 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012FCE 00                         byte_12A9C:	dc.b 0
00012FD0 00                         		even
00012FD0 00                         		even
00012FD0                            
00012FD0                            ; ===========================================================================
00012FD0                            ; ---------------------------------------------------------------------------
00012FD0                            ; Object 65 - waterfalls (LZ)
00012FD0                            ; ---------------------------------------------------------------------------
00012FD0                            
00012FD0                            Obj65:					; XREF: Obj_Index
00012FD0 7000                       		moveq	#0,d0
00012FD2 1028 0024                  		move.b	$24(a0),d0
00012FD6 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012FDA 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012FDE                            ; ===========================================================================
00012FDE 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012FE0 0000                       		dc.w Obj65_Animate-Obj65_Index
00012FE2 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012FE4 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012FE6 0000                       		dc.w loc_12B36-Obj65_Index
00012FE8                            ; ===========================================================================
00012FE8                            
00012FE8                            Obj65_Main:				; XREF: Obj65_Index
00012FE8 5828 0024                  		addq.b	#4,$24(a0)
00012FEC 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012FF4 317C 4259 0002             		move.w	#$4259,2(a0)
00012FFA 0028 0004 0001             		ori.b	#4,1(a0)
00013000 117C 0018 0019             		move.b	#$18,$19(a0)
00013006 117C 0001 0018             		move.b	#1,$18(a0)
0001300C 1028 0028                  		move.b	$28(a0),d0	; get object type
00013010 6A00                       		bpl.s	loc_12AE6
00013012 08E8 0007 0002             		bset	#7,2(a0)
00013018                            
00013018                            loc_12AE6:
00013018 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001301C 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013020 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013024 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013026 4228 0018                  		clr.b	$18(a0)
0001302A 5528 0024                  		subq.b	#2,$24(a0)
0001302E 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013034 6700                       		beq.s	loc_12B0A	; if not, branch
00013036 117C 0006 0024             		move.b	#6,$24(a0)
0001303C                            
0001303C                            loc_12B0A:
0001303C 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013042 6700                       		beq.s	Obj65_Animate	; if not, branch
00013044 117C 0008 0024             		move.b	#8,$24(a0)
0001304A                            
0001304A                            Obj65_Animate:				; XREF: Obj65_Index
0001304A 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013050 4EB9 0000 AC42             		jsr	AnimateSprite
00013056                            
00013056                            Obj65_ChkDel:				; XREF: Obj65_Index
00013056 6000 CBBC                  		bra.w	MarkObjGone
0001305A                            ; ===========================================================================
0001305A                            
0001305A                            Obj65_FixHeight:			; XREF: Obj65_Index
0001305A 3038 F646                  		move.w	($FFFFF646).w,d0
0001305E 0440 0010                  		subi.w	#$10,d0
00013062 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013066 60E2                       		bra.s	Obj65_Animate
00013068                            ; ===========================================================================
00013068                            
00013068                            loc_12B36:				; XREF: Obj65_Index
00013068 08A8 0007 0002             		bclr	#7,2(a0)
0001306E 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013074 6600                       		bne.s	Obj65_Animate2
00013076 08E8 0007 0002             		bset	#7,2(a0)
0001307C                            
0001307C                            Obj65_Animate2:
0001307C 60CC                       		bra.s	Obj65_Animate
0001307E                            ; ===========================================================================
0001307E                            Ani_obj65:
0001307E                            	include "_anim\obj65.asm"
0001307E                            ; ---------------------------------------------------------------------------
0001307E                            ; Animation script - waterfall (LZ)
0001307E                            ; ---------------------------------------------------------------------------
0001307E 0000                       		dc.w byte_12B4E-Ani_obj65
00013080 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013086 00                         		even
00013086 00                         		even
00013086                            
00013086                            ; ---------------------------------------------------------------------------
00013086                            ; Sprite mappings - waterfalls (LZ)
00013086                            ; ---------------------------------------------------------------------------
00013086                            Map_obj65:
00013086                            	include "_maps\obj65.asm"
00013086                            ; ---------------------------------------------------------------------------
00013086                            ; Sprite mappings - waterfalls (LZ)
00013086                            ; ---------------------------------------------------------------------------
00013086 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001308A 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001308E 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013092 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013096 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001309A 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001309E 01                         byte_12B6C:	dc.b 1
0001309F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000130A4 02                         byte_12B72:	dc.b 2
000130A5 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000130AA 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000130AF 02                         byte_12B7D:	dc.b 2
000130B0 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130B5 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130BA 01                         byte_12B88:	dc.b 1
000130BB F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000130C0 02                         byte_12B8E:	dc.b 2
000130C1 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130C6 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130CB 01                         byte_12B99:	dc.b 1
000130CC F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000130D1 01                         byte_12B9F:	dc.b 1
000130D2 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000130D7 01                         byte_12BA5:	dc.b 1
000130D8 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000130DD 02                         byte_12BAB:	dc.b 2
000130DE F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000130E3 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000130E8 02                         byte_12BB6:	dc.b 2
000130E9 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000130EE F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000130F3 02                         byte_12BC1:	dc.b 2
000130F4 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000130F9 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000130FE 02                         byte_12BCC:	dc.b 2
000130FF F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013104 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001310A 00                         		even
0001310A 00                         		even
0001310A                            
0001310A                            ; ===========================================================================
0001310A                            ; ---------------------------------------------------------------------------
0001310A                            ; Object 01 - Sonic
0001310A                            ; ---------------------------------------------------------------------------
0001310A                            
0001310A                            Obj01:					; XREF: Obj_Index
0001310A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001310E 6700                       		beq.s	Obj01_Normal	; if not, branch
00013110 4EF9 0000 0000             		jmp	DebugMode
00013116                            ; ===========================================================================
00013116                            
00013116                            Obj01_Normal:
00013116 7000                       		moveq	#0,d0
00013118 1028 0024                  		move.b	$24(a0),d0
0001311C 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013120 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013124                            ; ===========================================================================
00013124 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013126 0000                       		dc.w Obj01_Control-Obj01_Index
00013128 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001312A 0000                       		dc.w Obj01_Death-Obj01_Index
0001312C 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001312E                            ; ===========================================================================
0001312E                            
0001312E                            Obj01_Main:				; XREF: Obj01_Index
0001312E 5428 0024                  		addq.b	#2,$24(a0)
00013132 117C 0013 0016             		move.b	#$13,$16(a0)
00013138 117C 0009 0017             		move.b	#9,$17(a0)
0001313E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013146 317C 0780 0002             		move.w	#$780,2(a0)
0001314C 117C 0002 0018             		move.b	#2,$18(a0)
00013152 117C 0018 0019             		move.b	#$18,$19(a0)
00013158 117C 0004 0001             		move.b	#4,1(a0)
0001315E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013164 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001316A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013170                            
00013170                            Obj01_Control:				; XREF: Obj01_Index
00013170 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013174 6700                       		beq.s	loc_12C58	; if not, branch
00013176 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001317C 6700                       		beq.s	loc_12C58	; if not, branch
0001317E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013184 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013188 4E75                       		rts	
0001318A                            ; ===========================================================================
0001318A                            
0001318A                            loc_12C58:
0001318A 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001318E 6600                       		bne.s	loc_12C64	; if yes, branch
00013190 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013196                            
00013196                            loc_12C64:
00013196 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001319C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001319E 7000                       		moveq	#0,d0
000131A0 1028 0022                  		move.b	$22(a0),d0
000131A4 0240 0006                  		andi.w	#6,d0
000131A8 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000131AC 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000131B0                            
000131B0                            loc_12C7E:
000131B0 6100                       		bsr.s	Sonic_Display
000131B2 6100 0000                  		bsr.w	Sonic_RecordPos
000131B6 6100 0000                  		bsr.w	Sonic_Water
000131BA 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000131C0 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000131C6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000131CA 6700                       		beq.s	loc_12CA6
000131CC 4A28 001C                  		tst.b	$1C(a0)
000131D0 6600                       		bne.s	loc_12CA6
000131D2 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000131D8                            
000131D8                            loc_12CA6:
000131D8 6100 0000                  		bsr.w	Sonic_Animate
000131DC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000131E0 6B00                       		bmi.s	loc_12CB6
000131E2 4EB9 0000 0000             		jsr	TouchResponse
000131E8                            
000131E8                            loc_12CB6:
000131E8 6100 0000                  		bsr.w	Sonic_Loops
000131EC 6100 0000                  		bsr.w	LoadSonicDynPLC
000131F0 4E75                       		rts	
000131F2                            ; ===========================================================================
000131F2 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000131F4 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000131F6 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000131F8 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000131FA                            ; ---------------------------------------------------------------------------
000131FA                            ; Music	to play	after invincibility wears off
000131FA                            ; ---------------------------------------------------------------------------
000131FA                            ; ===========================================================================
000131FA                            
000131FA                            Sonic_Display:				; XREF: loc_12C7E
000131FA 3028 0030                  		move.w	$30(a0),d0
000131FE 6700                       		beq.s	Obj01_Display
00013200 5368 0030                  		subq.w	#1,$30(a0)
00013204 E648                       		lsr.w	#3,d0
00013206 6400                       		bcc.s	Obj01_ChkInvin
00013208                            
00013208                            Obj01_Display:
00013208 4EBA A962                  		jsr	DisplaySprite
0001320C                            
0001320C                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
0001320C                             
0001320C                            Obj01_ChkInvin:
0001320C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013210 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013214 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013218 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
0001321C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013220 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013224 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013228 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001322C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013232 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013236 7000                       		moveq	#0,d0
00013238 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001323C                             
0001323C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013242 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013244 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001324A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001324C                             
0001324C                            Obj01_GetBgm2:
0001324C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013252 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013254 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001325A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001325C                             
0001325C                            Obj01_GetBgm3:
0001325C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013262 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013264 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001326A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001326C                             
0001326C                            Obj01_GetBgm4:
0001326C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013272 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013274 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001327A                             
0001327A                            Obj01_PlayMusic:
0001327A 1031 0000                  		move.b	(a1,d0.w),d0
0001327E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
00013284                             
00013284                            ; NineKode ends here.
00013284                            
00013284                            Obj01_RmvInvin:
00013284 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001328A                            
0001328A                            Obj01_ChkShoes:
0001328A 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001328E 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013290 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013294 6700                       		beq.s	Obj01_ExitChk
00013296 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001329A 6600                       		bne.s	Obj01_ExitChk
0001329C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000132A2 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000132A8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000132AE 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000132B4 303C 00E3                  		move.w	#$E3,d0
000132B8 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
000132BE                            ; ===========================================================================
000132BE                            
000132BE                            Obj01_ExitChk:
000132BE 4E75                       		rts	
000132C0                            
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            
000132C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132C0                            
000132C0                            
000132C0                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000132C0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000132C4 43F8 CB00                  		lea	($FFFFCB00).w,a1
000132C8 43F1 0000                  		lea	(a1,d0.w),a1
000132CC 32E8 0008                  		move.w	8(a0),(a1)+
000132D0 32E8 000C                  		move.w	$C(a0),(a1)+
000132D4 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000132D8 4E75                       		rts	
000132DA                            ; End of function Sonic_RecordPos
000132DA                            
000132DA                            ; ---------------------------------------------------------------------------
000132DA                            ; Subroutine for Sonic when he's underwater
000132DA                            ; ---------------------------------------------------------------------------
000132DA                            
000132DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132DA                            
000132DA                            
000132DA                            Sonic_Water:				; XREF: loc_12C7E
000132DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000132E0 6700                       		beq.s	Obj01_InWater	; if yes, branch
000132E2                            
000132E2                            locret_12D80:
000132E2 4E75                       		rts	
000132E4                            ; ===========================================================================
000132E4                            
000132E4                            Obj01_InWater:
000132E4 3038 F646                  		move.w	($FFFFF646).w,d0
000132E8 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000132EC 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000132EE 08E8 0006 0022             		bset	#6,$22(a0)
000132F4 66EC                       		bne.s	locret_12D80
000132F6 6100 0000                  		bsr.w	ResumeMusic
000132FA 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013300 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013306 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001330C 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013312 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013318 E0E8 0010                  		asr	$10(a0)
0001331C E0E8 0012                  		asr	$12(a0)
00013320 E0E8 0012                  		asr	$12(a0)
00013324 67BC                       		beq.s	locret_12D80
00013326 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001332C 303C 00AA                  		move.w	#$AA,d0
00013330 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013336                            ; ===========================================================================
00013336                            
00013336                            Obj01_OutWater:
00013336 08A8 0006 0022             		bclr	#6,$22(a0)
0001333C 67A4                       		beq.s	locret_12D80
0001333E 6100 0000                  		bsr.w	ResumeMusic
00013342 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013348 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001334E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013354 E1E8 0012                  		asl	$12(a0)
00013358 6700 FF88                  		beq.w	locret_12D80
0001335C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013362 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013368 6E00                       		bgt.s	loc_12E0E
0001336A 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013370                            
00013370                            loc_12E0E:
00013370 303C 00AA                  		move.w	#$AA,d0
00013374 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001337A                            ; End of function Sonic_Water
0001337A                            
0001337A                            ; ===========================================================================
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            ; Modes	for controlling	Sonic
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            
0001337A                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001337A 6100 0000                  		bsr.w	Sonic_Jump
0001337E 6100 0000                  		bsr.w	Sonic_SlopeResist
00013382 6100 0000                  		bsr.w	Sonic_Move
00013386 6100 0000                  		bsr.w	Sonic_Roll
0001338A 6100 0000                  		bsr.w	Sonic_LevelBound
0001338E 4EBA A7B6                  		jsr	SpeedToPos
00013392 6100 0000                  		bsr.w	Sonic_AnglePos
00013396 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001339A 4E75                       		rts	
0001339C                            ; ===========================================================================
0001339C                            
0001339C                            Obj01_MdJump:				; XREF: Obj01_Modes
0001339C 6100 0000                  		bsr.w	Sonic_JumpHeight
000133A0 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133A4 6100 0000                  		bsr.w	Sonic_LevelBound
000133A8 4EBA A770                  		jsr	ObjectFall
000133AC 0828 0006 0022             		btst	#6,$22(a0)
000133B2 6700                       		beq.s	loc_12E5C
000133B4 0468 0028 0012             		subi.w	#$28,$12(a0)
000133BA                            
000133BA                            loc_12E5C:
000133BA 6100 0000                  		bsr.w	Sonic_JumpAngle
000133BE 6100 0000                  		bsr.w	Sonic_Floor
000133C2 4E75                       		rts	
000133C4                            ; ===========================================================================
000133C4                            
000133C4                            Obj01_MdRoll:				; XREF: Obj01_Modes
000133C4 6100 0000                  		bsr.w	Sonic_Jump
000133C8 6100 0000                  		bsr.w	Sonic_RollRepel
000133CC 6100 0000                  		bsr.w	Sonic_RollSpeed
000133D0 6100 0000                  		bsr.w	Sonic_LevelBound
000133D4 4EBA A770                  		jsr	SpeedToPos
000133D8 6100 0000                  		bsr.w	Sonic_AnglePos
000133DC 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133E0 4E75                       		rts	
000133E2                            ; ===========================================================================
000133E2                            
000133E2                            Obj01_MdJump2:				; XREF: Obj01_Modes
000133E2 6100 0000                  		bsr.w	Sonic_JumpHeight
000133E6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133EA 6100 0000                  		bsr.w	Sonic_LevelBound
000133EE 4EBA A72A                  		jsr	ObjectFall
000133F2 0828 0006 0022             		btst	#6,$22(a0)
000133F8 6700                       		beq.s	loc_12EA6
000133FA 0468 0028 0012             		subi.w	#$28,$12(a0)
00013400                            
00013400                            loc_12EA6:
00013400 6100 0000                  		bsr.w	Sonic_JumpAngle
00013404 6100 0000                  		bsr.w	Sonic_Floor
00013408 4E75                       		rts	
0001340A                            ; ---------------------------------------------------------------------------
0001340A                            ; Subroutine to	make Sonic walk/run
0001340A                            ; ---------------------------------------------------------------------------
0001340A                            
0001340A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001340A                            
0001340A                            
0001340A                            Sonic_Move:				; XREF: Obj01_MdNormal
0001340A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001340E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013412 3838 F764                  		move.w	($FFFFF764).w,d4
00013416 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001341A 6600 0000                  		bne.w	loc_12FEE
0001341E 4A68 003E                  		tst.w	$3E(a0)
00013422 6600 0000                  		bne.w	Obj01_ResetScr
00013426 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001342C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001342E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013434 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013436 6100 0000                  		bsr.w	Sonic_MoveLeft
0001343A                            
0001343A                            Obj01_NotLeft:
0001343A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013440 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013442 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013448 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001344A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001344E 6000                       		bra.s	Obj01_NotRight
00013450                            
00013450                            Obj01_MoveRight:
00013450 6100 0000                  		bsr.w	Sonic_MoveRight
00013454                            
00013454                            Obj01_NotRight:
00013454 1028 0026                  		move.b	$26(a0),d0
00013458 0600 0020                  		addi.b	#$20,d0
0001345C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013460 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013464 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013468 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001346C 08A8 0005 0022             		bclr	#5,$22(a0)
00013472 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013478 0828 0003 0022             		btst	#3,$22(a0)
0001347E 6700                       		beq.s	Sonic_Balance
00013480 7000                       		moveq	#0,d0
00013482 1028 003D                  		move.b	$3D(a0),d0
00013486 ED48                       		lsl.w	#6,d0
00013488 43F8 D000                  		lea	($FFFFD000).w,a1
0001348C 43F1 0000                  		lea	(a1,d0.w),a1
00013490 4A29 0022                  		tst.b	$22(a1)
00013494 6B00                       		bmi.s	Sonic_LookUp
00013496 7200                       		moveq	#0,d1
00013498 1229 0019                  		move.b	$19(a1),d1
0001349C 3401                       		move.w	d1,d2
0001349E D442                       		add.w	d2,d2
000134A0 5942                       		subq.w	#4,d2
000134A2 D268 0008                  		add.w	8(a0),d1
000134A6 9269 0008                  		sub.w	8(a1),d1
000134AA 0C41 0004                  		cmpi.w	#4,d1
000134AE 6D00                       		blt.s	loc_12F6A
000134B0 B242                       		cmp.w	d2,d1
000134B2 6C00                       		bge.s	loc_12F5A
000134B4 6000                       		bra.s	Sonic_LookUp
000134B6                            ; ===========================================================================
000134B6                            
000134B6                            Sonic_Balance:
000134B6 4EB9 0000 0000             		jsr	ObjHitFloor
000134BC 0C41 000C                  		cmpi.w	#$C,d1
000134C0 6D00                       		blt.s	Sonic_LookUp
000134C2 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000134C8 6600                       		bne.s	loc_12F62
000134CA                            
000134CA                            loc_12F5A:
000134CA 08A8 0000 0022             		bclr	#0,$22(a0)
000134D0 6000                       		bra.s	loc_12F70
000134D2                            ; ===========================================================================
000134D2                            
000134D2                            loc_12F62:
000134D2 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000134D8 6600                       		bne.s	Sonic_LookUp
000134DA                            
000134DA                            loc_12F6A:
000134DA 08E8 0000 0022             		bset	#0,$22(a0)
000134E0                            
000134E0                            loc_12F70:
000134E0 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000134E6 6000                       		bra.s	Obj01_ResetScr
000134E8                            ; ===========================================================================
000134E8                            
000134E8                            Sonic_LookUp:
000134E8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000134EE 6700                       		beq.s	Sonic_Duck	; if not, branch
000134F0 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000134F6 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000134FC 6700                       		beq.s	loc_12FC2
000134FE 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013502 6000                       		bra.s	loc_12FC2
00013504                            ; ===========================================================================
00013504                            
00013504                            Sonic_Duck:
00013504 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001350A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001350C 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013512 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013518 6700                       		beq.s	loc_12FC2
0001351A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001351E 6000                       		bra.s	loc_12FC2
00013520                            ; ===========================================================================
00013520                            
00013520                            Obj01_ResetScr:
00013520 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013526 6700                       		beq.s	loc_12FC2	; if yes, branch
00013528 6400                       		bcc.s	loc_12FBE
0001352A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001352E                            
0001352E                            loc_12FBE:
0001352E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013532                            
00013532                            loc_12FC2:
00013532 1038 F602                  		move.b	($FFFFF602).w,d0
00013536 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001353A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001353C 3028 0014                  		move.w	$14(a0),d0
00013540 6700                       		beq.s	loc_12FEE
00013542 6B00                       		bmi.s	loc_12FE2
00013544 9045                       		sub.w	d5,d0
00013546 6400                       		bcc.s	loc_12FDC
00013548 303C 0000                  		move.w	#0,d0
0001354C                            
0001354C                            loc_12FDC:
0001354C 3140 0014                  		move.w	d0,$14(a0)
00013550 6000                       		bra.s	loc_12FEE
00013552                            ; ===========================================================================
00013552                            
00013552                            loc_12FE2:
00013552 D045                       		add.w	d5,d0
00013554 6400                       		bcc.s	loc_12FEA
00013556 303C 0000                  		move.w	#0,d0
0001355A                            
0001355A                            loc_12FEA:
0001355A 3140 0014                  		move.w	d0,$14(a0)
0001355E                            
0001355E                            loc_12FEE:
0001355E 1028 0026                  		move.b	$26(a0),d0
00013562 4EB9 0000 2C22             		jsr	(CalcSine).l
00013568 C3E8 0014                  		muls.w	$14(a0),d1
0001356C E081                       		asr.l	#8,d1
0001356E 3141 0010                  		move.w	d1,$10(a0)
00013572 C1E8 0014                  		muls.w	$14(a0),d0
00013576 E080                       		asr.l	#8,d0
00013578 3140 0012                  		move.w	d0,$12(a0)
0001357C                            
0001357C                            loc_1300C:
0001357C 1028 0026                  		move.b	$26(a0),d0
00013580 0600 0040                  		addi.b	#$40,d0
00013584 6B00                       		bmi.s	locret_1307C
00013586 123C 0040                  		move.b	#$40,d1
0001358A 4A68 0014                  		tst.w	$14(a0)
0001358E 6700                       		beq.s	locret_1307C
00013590 6B00                       		bmi.s	loc_13024
00013592 4441                       		neg.w	d1
00013594                            
00013594                            loc_13024:
00013594 1028 0026                  		move.b	$26(a0),d0
00013598 D001                       		add.b	d1,d0
0001359A 3F00                       		move.w	d0,-(sp)
0001359C 6100 0000                  		bsr.w	Sonic_WalkSpeed
000135A0 301F                       		move.w	(sp)+,d0
000135A2 4A41                       		tst.w	d1
000135A4 6A00                       		bpl.s	locret_1307C
000135A6 E141                       		asl.w	#8,d1
000135A8 0600 0020                  		addi.b	#$20,d0
000135AC 0200 00C0                  		andi.b	#$C0,d0
000135B0 6700                       		beq.s	loc_13078
000135B2 0C00 0040                  		cmpi.b	#$40,d0
000135B6 6700                       		beq.s	loc_13066
000135B8 0C00 0080                  		cmpi.b	#$80,d0
000135BC 6700                       		beq.s	loc_13060
000135BE D368 0010                  		add.w	d1,$10(a0)
000135C2 08E8 0005 0022             		bset	#5,$22(a0)
000135C8 317C 0000 0014             		move.w	#0,$14(a0)
000135CE 4E75                       		rts	
000135D0                            ; ===========================================================================
000135D0                            
000135D0                            loc_13060:
000135D0 9368 0012                  		sub.w	d1,$12(a0)
000135D4 4E75                       		rts	
000135D6                            ; ===========================================================================
000135D6                            
000135D6                            loc_13066:
000135D6 9368 0010                  		sub.w	d1,$10(a0)
000135DA 08E8 0005 0022             		bset	#5,$22(a0)
000135E0 317C 0000 0014             		move.w	#0,$14(a0)
000135E6 4E75                       		rts	
000135E8                            ; ===========================================================================
000135E8                            
000135E8                            loc_13078:
000135E8 D368 0012                  		add.w	d1,$12(a0)
000135EC                            
000135EC                            locret_1307C:
000135EC 4E75                       		rts	
000135EE                            ; End of function Sonic_Move
000135EE                            
000135EE                            
000135EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135EE                            
000135EE                            
000135EE                            Sonic_MoveLeft:				; XREF: Sonic_Move
000135EE 3028 0014                  		move.w	$14(a0),d0
000135F2 6700                       		beq.s	loc_13086
000135F4 6A00                       		bpl.s	loc_130B2
000135F6                            
000135F6                            loc_13086:
000135F6 08E8 0000 0022             		bset	#0,$22(a0)
000135FC 6600                       		bne.s	loc_1309A
000135FE 08A8 0005 0022             		bclr	#5,$22(a0)
00013604 117C 0001 001D             		move.b	#1,$1D(a0)
0001360A                            
0001360A                            loc_1309A:
0001360A 9045                       		sub.w	d5,d0
0001360C 3206                       		move.w	d6,d1
0001360E 4441                       		neg.w	d1
00013610 B041                       		cmp.w	d1,d0
00013612 6E00                       		bgt.s	loc_130A6
00013614 3001                       		move.w	d1,d0
00013616                            
00013616                            loc_130A6:
00013616 3140 0014                  		move.w	d0,$14(a0)
0001361A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013620 4E75                       		rts	
00013622                            ; ===========================================================================
00013622                            
00013622                            loc_130B2:				; XREF: Sonic_MoveLeft
00013622 9044                       		sub.w	d4,d0
00013624 6400                       		bcc.s	loc_130BA
00013626 303C FF80                  		move.w	#-$80,d0
0001362A                            
0001362A                            loc_130BA:
0001362A 3140 0014                  		move.w	d0,$14(a0)
0001362E 1028 0026                  		move.b	$26(a0),d0
00013632 0600 0020                  		addi.b	#$20,d0
00013636 0200 00C0                  		andi.b	#$C0,d0
0001363A 6600                       		bne.s	locret_130E8
0001363C 0C40 0400                  		cmpi.w	#$400,d0
00013640 6D00                       		blt.s	locret_130E8
00013642 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013648 08A8 0000 0022             		bclr	#0,$22(a0)
0001364E 303C 00A4                  		move.w	#$A4,d0
00013652 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013658                            
00013658                            locret_130E8:
00013658 4E75                       		rts	
0001365A                            ; End of function Sonic_MoveLeft
0001365A                            
0001365A                            
0001365A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001365A                            
0001365A                            
0001365A                            Sonic_MoveRight:			; XREF: Sonic_Move
0001365A 3028 0014                  		move.w	$14(a0),d0
0001365E 6B00                       		bmi.s	loc_13118
00013660 08A8 0000 0022             		bclr	#0,$22(a0)
00013666 6700                       		beq.s	loc_13104
00013668 08A8 0005 0022             		bclr	#5,$22(a0)
0001366E 117C 0001 001D             		move.b	#1,$1D(a0)
00013674                            
00013674                            loc_13104:
00013674 D045                       		add.w	d5,d0
00013676 B046                       		cmp.w	d6,d0
00013678 6D00                       		blt.s	loc_1310C
0001367A 3006                       		move.w	d6,d0
0001367C                            
0001367C                            loc_1310C:
0001367C 3140 0014                  		move.w	d0,$14(a0)
00013680 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013686 4E75                       		rts	
00013688                            ; ===========================================================================
00013688                            
00013688                            loc_13118:				; XREF: Sonic_MoveRight
00013688 D044                       		add.w	d4,d0
0001368A 6400                       		bcc.s	loc_13120
0001368C 303C 0080                  		move.w	#$80,d0
00013690                            
00013690                            loc_13120:
00013690 3140 0014                  		move.w	d0,$14(a0)
00013694 1028 0026                  		move.b	$26(a0),d0
00013698 0600 0020                  		addi.b	#$20,d0
0001369C 0200 00C0                  		andi.b	#$C0,d0
000136A0 6600                       		bne.s	locret_1314E
000136A2 0C40 FC00                  		cmpi.w	#-$400,d0
000136A6 6E00                       		bgt.s	locret_1314E
000136A8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136AE 08E8 0000 0022             		bset	#0,$22(a0)
000136B4 303C 00A4                  		move.w	#$A4,d0
000136B8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136BE                            
000136BE                            locret_1314E:
000136BE 4E75                       		rts	
000136C0                            ; End of function Sonic_MoveRight
000136C0                            
000136C0                            ; ---------------------------------------------------------------------------
000136C0                            ; Subroutine to	change Sonic's speed as he rolls
000136C0                            ; ---------------------------------------------------------------------------
000136C0                            
000136C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136C0                            
000136C0                            
000136C0                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000136C0 3C38 F760                  		move.w	($FFFFF760).w,d6
000136C4 E346                       		asl.w	#1,d6
000136C6 3A38 F762                  		move.w	($FFFFF762).w,d5
000136CA E245                       		asr.w	#1,d5
000136CC 3838 F764                  		move.w	($FFFFF764).w,d4
000136D0 E444                       		asr.w	#2,d4
000136D2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136D6 6600 0000                  		bne.w	loc_131CC
000136DA 4A68 003E                  		tst.w	$3E(a0)
000136DE 6600                       		bne.s	loc_13188
000136E0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136E6 6700                       		beq.s	loc_1317C	; if not, branch
000136E8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136EE 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000136F0 6100 0000                  		bsr.w	Sonic_RollLeft
000136F4                            
000136F4                            loc_1317C:
000136F4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136FA 6700                       		beq.s	loc_13188	; if not, branch
000136FC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013702 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013704 6100 0000                  		bsr.w	Sonic_RollLeft
00013708 6000                       		bra.s	loc_13188
0001370A                            
0001370A                            SonicRS_RollRight:
0001370A 6100 0000                  		bsr.w	Sonic_RollRight
0001370E                            
0001370E                            loc_13188:
0001370E 3028 0014                  		move.w	$14(a0),d0
00013712 6700                       		beq.s	loc_131AA
00013714 6B00                       		bmi.s	loc_1319E
00013716 9045                       		sub.w	d5,d0
00013718 6400                       		bcc.s	loc_13198
0001371A 303C 0000                  		move.w	#0,d0
0001371E                            
0001371E                            loc_13198:
0001371E 3140 0014                  		move.w	d0,$14(a0)
00013722 6000                       		bra.s	loc_131AA
00013724                            ; ===========================================================================
00013724                            
00013724                            loc_1319E:				; XREF: Sonic_RollSpeed
00013724 D045                       		add.w	d5,d0
00013726 6400                       		bcc.s	loc_131A6
00013728 303C 0000                  		move.w	#0,d0
0001372C                            
0001372C                            loc_131A6:
0001372C 3140 0014                  		move.w	d0,$14(a0)
00013730                            
00013730                            loc_131AA:
00013730 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013734 6600                       		bne.s	loc_131CC	; if yes, branch
00013736 08A8 0002 0022             		bclr	#2,$22(a0)
0001373C 117C 0013 0016             		move.b	#$13,$16(a0)
00013742 117C 0009 0017             		move.b	#9,$17(a0)
00013748 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001374E 5B68 000C                  		subq.w	#5,$C(a0)
00013752                            
00013752                            loc_131CC:
00013752 1028 0026                  		move.b	$26(a0),d0
00013756 4EB9 0000 2C22             		jsr	(CalcSine).l
0001375C C1E8 0014                  		muls.w	$14(a0),d0
00013760 E080                       		asr.l	#8,d0
00013762 3140 0012                  		move.w	d0,$12(a0)
00013766 C3E8 0014                  		muls.w	$14(a0),d1
0001376A E081                       		asr.l	#8,d1
0001376C 0C41 1000                  		cmpi.w	#$1000,d1
00013770 6F00                       		ble.s	loc_131F0
00013772 323C 1000                  		move.w	#$1000,d1
00013776                            
00013776                            loc_131F0:
00013776 0C41 F000                  		cmpi.w	#-$1000,d1
0001377A 6C00                       		bge.s	loc_131FA
0001377C 323C F000                  		move.w	#-$1000,d1
00013780                            
00013780                            loc_131FA:
00013780 3141 0010                  		move.w	d1,$10(a0)
00013784 6000 FDF6                  		bra.w	loc_1300C
00013788                            ; End of function Sonic_RollSpeed
00013788                            
00013788                            
00013788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013788                            
00013788                            
00013788                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013788 3028 0014                  		move.w	$14(a0),d0
0001378C 6700                       		beq.s	loc_1320A
0001378E 6A00                       		bpl.s	loc_13218
00013790                            
00013790                            loc_1320A:
00013790 08E8 0000 0022             		bset	#0,$22(a0)
00013796 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001379C 4E75                       		rts	
0001379E                            ; ===========================================================================
0001379E                            
0001379E                            loc_13218:
0001379E 9044                       		sub.w	d4,d0
000137A0 6400                       		bcc.s	loc_13220
000137A2 303C FF80                  		move.w	#-$80,d0
000137A6                            
000137A6                            loc_13220:
000137A6 3140 0014                  		move.w	d0,$14(a0)
000137AA 4E75                       		rts	
000137AC                            ; End of function Sonic_RollLeft
000137AC                            
000137AC                            
000137AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137AC                            
000137AC                            
000137AC                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000137AC 3028 0014                  		move.w	$14(a0),d0
000137B0 6B00                       		bmi.s	loc_1323A
000137B2 08A8 0000 0022             		bclr	#0,$22(a0)
000137B8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137BE 4E75                       		rts	
000137C0                            ; ===========================================================================
000137C0                            
000137C0                            loc_1323A:
000137C0 D044                       		add.w	d4,d0
000137C2 6400                       		bcc.s	loc_13242
000137C4 303C 0080                  		move.w	#$80,d0
000137C8                            
000137C8                            loc_13242:
000137C8 3140 0014                  		move.w	d0,$14(a0)
000137CC 4E75                       		rts	
000137CE                            ; End of function Sonic_RollRight
000137CE                            
000137CE                            ; ---------------------------------------------------------------------------
000137CE                            ; Subroutine to	change Sonic's direction while jumping
000137CE                            ; ---------------------------------------------------------------------------
000137CE                            
000137CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137CE                            
000137CE                            
000137CE                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000137CE 3C38 F760                  		move.w	($FFFFF760).w,d6
000137D2 3A38 F762                  		move.w	($FFFFF762).w,d5
000137D6 E345                       		asl.w	#1,d5
000137D8 0828 0004 0022             		btst	#4,$22(a0)
000137DE 6600                       		bne.s	Obj01_ResetScr2
000137E0 3028 0010                  		move.w	$10(a0),d0
000137E4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000137EA 6700                       		beq.s	loc_13278	; if not, branch
000137EC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000137F2 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000137F4 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000137F8 6E00                       		bgt.s	loc_13278
000137FA 3001                       		move.w	d1,d0
000137FC                            
000137FC                            loc_13278:
000137FC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013802 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013804 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001380A 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
0001380C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013810 6E00                       		bgt.s	Obj01_JumpMove
00013812 3001                       		move.w	d1,d0
00013814 6000                       		bra.s	Obj01_JumpMove
00013816                            
00013816                            SonicCJD_JumpLeft:
00013816 08E8 0000 0022             		bset	#0,$22(a0)
0001381C 9045                       		sub.w	d5,d0
0001381E 3206                       		move.w	d6,d1
00013820 4441                       		neg.w	d1
00013822 B041                       		cmp.w	d1,d0
00013824                            		; bgt.s	loc_13278
00013824                            		; move.w	d1,d0
00013824 4E75                       		rts
00013826                            
00013826                            SonicCJD_JumpRight:
00013826 08A8 0000 0022             		bclr	#0,$22(a0)
0001382C D045                       		add.w	d5,d0
0001382E B046                       		cmp.w	d6,d0
00013830 6D00                       		blt.s	Obj01_JumpMove
00013832 3006                       		move.w	d6,d0
00013834                            
00013834                            Obj01_JumpMove:
00013834 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013838                            
00013838                            Obj01_ResetScr2:
00013838 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001383E 6700                       		beq.s	loc_132A4	; if yes, branch
00013840 6400                       		bcc.s	loc_132A0
00013842 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013846                            
00013846                            loc_132A0:
00013846 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001384A                            
0001384A                            loc_132A4:
0001384A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013850 6500                       		bcs.s	locret_132D2	; if yes, branch
00013852 3028 0010                  		move.w	$10(a0),d0
00013856 3200                       		move.w	d0,d1
00013858 EA41                       		asr.w	#5,d1
0001385A 6700                       		beq.s	locret_132D2
0001385C 6B00                       		bmi.s	loc_132C6
0001385E 9041                       		sub.w	d1,d0
00013860 6400                       		bcc.s	loc_132C0
00013862 303C 0000                  		move.w	#0,d0
00013866                            
00013866                            loc_132C0:
00013866 3140 0010                  		move.w	d0,$10(a0)
0001386A 4E75                       		rts	
0001386C                            ; ===========================================================================
0001386C                            
0001386C                            loc_132C6:
0001386C 9041                       		sub.w	d1,d0
0001386E 6500                       		bcs.s	loc_132CE
00013870 303C 0000                  		move.w	#0,d0
00013874                            
00013874                            loc_132CE:
00013874 3140 0010                  		move.w	d0,$10(a0)
00013878                            
00013878                            locret_132D2:
00013878 4E75                       		rts	
0001387A                            ; End of function Sonic_ChgJumpDir
0001387A                            
0001387A                            ; ===========================================================================
0001387A                            ; ---------------------------------------------------------------------------
0001387A                            ; Unused subroutine to squash Sonic
0001387A                            ; ---------------------------------------------------------------------------
0001387A 1028 0026                  		move.b	$26(a0),d0
0001387E 0600 0020                  		addi.b	#$20,d0
00013882 0200 00C0                  		andi.b	#$C0,d0
00013886 6600                       		bne.s	locret_13302
00013888 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001388C 4A41                       		tst.w	d1
0001388E 6A00                       		bpl.s	locret_13302
00013890 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013896 317C 0000 0010             		move.w	#0,$10(a0)
0001389C 317C 0000 0012             		move.w	#0,$12(a0)
000138A2 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000138A8                            
000138A8                            locret_13302:
000138A8 4E75                       		rts	
000138AA                            ; ---------------------------------------------------------------------------
000138AA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000138AA                            ; ---------------------------------------------------------------------------
000138AA                            
000138AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138AA                            
000138AA                            
000138AA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000138AA 2228 0008                  		move.l	8(a0),d1
000138AE 3028 0010                  		move.w	$10(a0),d0
000138B2 48C0                       		ext.l	d0
000138B4 E180                       		asl.l	#8,d0
000138B6 D280                       		add.l	d0,d1
000138B8 4841                       		swap	d1
000138BA 3038 F728                  		move.w	($FFFFF728).w,d0
000138BE 0640 0010                  		addi.w	#$10,d0
000138C2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000138C4 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000138C6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000138CA 0640 0128                  		addi.w	#$128,d0
000138CE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000138D2 6600                       		bne.s	loc_13332
000138D4 0640 0040                  		addi.w	#$40,d0
000138D8                            
000138D8                            loc_13332:
000138D8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000138DA 6300                       		bls.s	Boundary_Sides	; if yes, branch
000138DC                            
000138DC                            loc_13336:
000138DC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000138E0 0640 00E0                  		addi.w	#$E0,d0
000138E4 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000138E8 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000138EA 4E75                       		rts	
000138EC                            ; ===========================================================================
000138EC                            
000138EC                            Boundary_Bottom:
000138EC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000138F2 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000138F6 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000138FC 6500 0000                  		bcs.w	KillSonic
00013900 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013904 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001390A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013910 4E75                       		rts	
00013912                            ; ===========================================================================
00013912                            
00013912                            Boundary_Sides:
00013912 3140 0008                  		move.w	d0,8(a0)
00013916 317C 0000 000A             		move.w	#0,$A(a0)
0001391C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013922 317C 0000 0014             		move.w	#0,$14(a0)
00013928 60B2                       		bra.s	loc_13336
0001392A                            ; End of function Sonic_LevelBound
0001392A                            
0001392A                            ; ---------------------------------------------------------------------------
0001392A                            ; Subroutine allowing Sonic to roll when he's moving
0001392A                            ; ---------------------------------------------------------------------------
0001392A                            
0001392A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001392A                            
0001392A                            
0001392A                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001392A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001392E 6600                       		bne.s	Obj01_NoRoll
00013930 3028 0014                  		move.w	$14(a0),d0
00013934 6A00                       		bpl.s	loc_13392
00013936 4440                       		neg.w	d0
00013938                            
00013938                            loc_13392:
00013938 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001393C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
0001393E 1038 F602                  		move.b	($FFFFF602).w,d0
00013942 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013946 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013948 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001394E 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013950                            
00013950                            Obj01_NoRoll:
00013950 4E75                       		rts	
00013952                            ; ===========================================================================
00013952                            
00013952                            Obj01_ChkRoll:
00013952 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013958 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001395A 4E75                       		rts	
0001395C                            ; ===========================================================================
0001395C                            
0001395C                            Obj01_DoRoll:
0001395C 08E8 0002 0022             		bset	#2,$22(a0)
00013962 117C 000E 0016             		move.b	#$E,$16(a0)
00013968 117C 0007 0017             		move.b	#7,$17(a0)
0001396E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013974 5A68 000C                  		addq.w	#5,$C(a0)
00013978 303C 00BE                  		move.w	#$BE,d0
0001397C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
00013982 4A68 0014                  		tst.w	$14(a0)
00013986 6600                       		bne.s	locret_133E8
00013988 317C 0200 0014             		move.w	#$200,$14(a0)
0001398E                            
0001398E                            locret_133E8:
0001398E 4E75                       		rts	
00013990                            ; End of function Sonic_Roll
00013990                            
00013990                            ; ---------------------------------------------------------------------------
00013990                            ; Subroutine allowing Sonic to jump
00013990                            ; ---------------------------------------------------------------------------
00013990                            
00013990                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013990                            
00013990                            
00013990                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013990 1038 F603                  		move.b	($FFFFF603).w,d0
00013994 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013998 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001399C 7000                       		moveq	#0,d0
0001399E 1028 0026                  		move.b	$26(a0),d0
000139A2 0600 0080                  		addi.b	#$80,d0
000139A6 6100 0000                  		bsr.w	sub_14D48
000139AA 0C41 0006                  		cmpi.w	#6,d1
000139AE 6D00 0000                  		blt.w	locret_1348E
000139B2 343C 0680                  		move.w	#$680,d2
000139B6 0828 0006 0022             		btst	#6,$22(a0)
000139BC 6700                       		beq.s	loc_1341C
000139BE 343C 0380                  		move.w	#$380,d2
000139C2                            
000139C2                            loc_1341C:
000139C2 7000                       		moveq	#0,d0
000139C4 1028 0026                  		move.b	$26(a0),d0
000139C8 0400 0040                  		subi.b	#$40,d0
000139CC 4EB9 0000 2C22             		jsr	(CalcSine).l
000139D2 C3C2                       		muls.w	d2,d1
000139D4 E081                       		asr.l	#8,d1
000139D6 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000139DA C1C2                       		muls.w	d2,d0
000139DC E080                       		asr.l	#8,d0
000139DE D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000139E2 08E8 0001 0022             		bset	#1,$22(a0)
000139E8 08A8 0005 0022             		bclr	#5,$22(a0)
000139EE 588F                       		addq.l	#4,sp
000139F0 117C 0001 003C             		move.b	#1,$3C(a0)
000139F6 4228 0038                  		clr.b	$38(a0)
000139FA 303C 00A0                  		move.w	#$A0,d0
000139FE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A04 117C 0013 0016             		move.b	#$13,$16(a0)
00013A0A 117C 0009 0017             		move.b	#9,$17(a0)
00013A10 0828 0002 0022             		btst	#2,$22(a0)
00013A16 6600                       		bne.s	loc_13490
00013A18 117C 000E 0016             		move.b	#$E,$16(a0)
00013A1E 117C 0007 0017             		move.b	#7,$17(a0)
00013A24 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A2A 08E8 0002 0022             		bset	#2,$22(a0)
00013A30 5A68 000C                  		addq.w	#5,$C(a0)
00013A34                            
00013A34                            locret_1348E:
00013A34 4E75                       		rts	
00013A36                            ; ===========================================================================
00013A36                            
00013A36                            loc_13490:
00013A36 08E8 0004 0022             		bset	#4,$22(a0)
00013A3C 4E75                       		rts	
00013A3E                            ; End of function Sonic_Jump
00013A3E                            
00013A3E                            
00013A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A3E                            
00013A3E                            
00013A3E                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A3E 4A28 003C                  		tst.b	$3C(a0)
00013A42 6700                       		beq.s	loc_134C4
00013A44 323C FC00                  		move.w	#-$400,d1
00013A48 0828 0006 0022             		btst	#6,$22(a0)
00013A4E 6700                       		beq.s	loc_134AE
00013A50 323C FE00                  		move.w	#-$200,d1
00013A54                            
00013A54                            loc_134AE:
00013A54 B268 0012                  		cmp.w	$12(a0),d1
00013A58 6F00                       		ble.s	locret_134C2
00013A5A 1038 F602                  		move.b	($FFFFF602).w,d0
00013A5E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A62 6600                       		bne.s	locret_134C2	; if yes, branch
00013A64 3141 0012                  		move.w	d1,$12(a0)
00013A68                            
00013A68                            locret_134C2:
00013A68 4E75                       		rts	
00013A6A                            ; ===========================================================================
00013A6A                            
00013A6A                            loc_134C4:
00013A6A 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013A70 6C00                       		bge.s	locret_134D2
00013A72 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013A78                            
00013A78                            locret_134D2:
00013A78 4E75                       		rts	
00013A7A                            ; End of function Sonic_JumpHeight
00013A7A                            
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            ; Subroutine to	slow Sonic walking up a	slope
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            
00013A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A7A                            
00013A7A                            
00013A7A                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013A7A 1028 0026                  		move.b	$26(a0),d0
00013A7E 0600 0060                  		addi.b	#$60,d0
00013A82 0C00 00C0                  		cmpi.b	#$C0,d0
00013A86 6400                       		bcc.s	locret_13508
00013A88 1028 0026                  		move.b	$26(a0),d0
00013A8C 4EB9 0000 2C22             		jsr	(CalcSine).l
00013A92 C1FC 0020                  		muls.w	#$20,d0
00013A96 E080                       		asr.l	#8,d0
00013A98 4A68 0014                  		tst.w	$14(a0)
00013A9C 6700                       		beq.s	locret_13508
00013A9E 6B00                       		bmi.s	loc_13504
00013AA0 4A40                       		tst.w	d0
00013AA2 6700                       		beq.s	locret_13502
00013AA4 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013AA8                            
00013AA8                            locret_13502:
00013AA8 4E75                       		rts	
00013AAA                            ; ===========================================================================
00013AAA                            
00013AAA                            loc_13504:
00013AAA D168 0014                  		add.w	d0,$14(a0)
00013AAE                            
00013AAE                            locret_13508:
00013AAE 4E75                       		rts	
00013AB0                            ; End of function Sonic_SlopeResist
00013AB0                            
00013AB0                            ; ---------------------------------------------------------------------------
00013AB0                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013AB0                            ; ---------------------------------------------------------------------------
00013AB0                            
00013AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AB0                            
00013AB0                            
00013AB0                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013AB0 1028 0026                  		move.b	$26(a0),d0
00013AB4 0600 0060                  		addi.b	#$60,d0
00013AB8 0C00 00C0                  		cmpi.b	#-$40,d0
00013ABC 6400                       		bcc.s	locret_13544
00013ABE 1028 0026                  		move.b	$26(a0),d0
00013AC2 4EB9 0000 2C22             		jsr	(CalcSine).l
00013AC8 C1FC 0050                  		muls.w	#$50,d0
00013ACC E080                       		asr.l	#8,d0
00013ACE 4A68 0014                  		tst.w	$14(a0)
00013AD2 6B00                       		bmi.s	loc_1353A
00013AD4 4A40                       		tst.w	d0
00013AD6 6A00                       		bpl.s	loc_13534
00013AD8 E480                       		asr.l	#2,d0
00013ADA                            
00013ADA                            loc_13534:
00013ADA D168 0014                  		add.w	d0,$14(a0)
00013ADE 4E75                       		rts	
00013AE0                            ; ===========================================================================
00013AE0                            
00013AE0                            loc_1353A:
00013AE0 4A40                       		tst.w	d0
00013AE2 6B00                       		bmi.s	loc_13540
00013AE4 E480                       		asr.l	#2,d0
00013AE6                            
00013AE6                            loc_13540:
00013AE6 D168 0014                  		add.w	d0,$14(a0)
00013AEA                            
00013AEA                            locret_13544:
00013AEA 4E75                       		rts	
00013AEC                            ; End of function Sonic_RollRepel
00013AEC                            
00013AEC                            ; ---------------------------------------------------------------------------
00013AEC                            ; Subroutine to	push Sonic down	a slope
00013AEC                            ; ---------------------------------------------------------------------------
00013AEC                            
00013AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AEC                            
00013AEC                            
00013AEC                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013AEC 4E71                       		nop	
00013AEE 4A28 0038                  		tst.b	$38(a0)
00013AF2 6600                       		bne.s	locret_13580
00013AF4 4A68 003E                  		tst.w	$3E(a0)
00013AF8 6600                       		bne.s	loc_13582
00013AFA 1028 0026                  		move.b	$26(a0),d0
00013AFE 0600 0020                  		addi.b	#$20,d0
00013B02 0200 00C0                  		andi.b	#$C0,d0
00013B06 6700                       		beq.s	locret_13580
00013B08 3028 0014                  		move.w	$14(a0),d0
00013B0C 6A00                       		bpl.s	loc_1356A
00013B0E 4440                       		neg.w	d0
00013B10                            
00013B10                            loc_1356A:
00013B10 0C40 0280                  		cmpi.w	#$280,d0
00013B14 6400                       		bcc.s	locret_13580
00013B16 4268 0014                  		clr.w	$14(a0)
00013B1A 08E8 0001 0022             		bset	#1,$22(a0)
00013B20 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B26                            
00013B26                            locret_13580:
00013B26 4E75                       		rts	
00013B28                            ; ===========================================================================
00013B28                            
00013B28                            loc_13582:
00013B28 5368 003E                  		subq.w	#1,$3E(a0)
00013B2C 4E75                       		rts	
00013B2E                            ; End of function Sonic_SlopeRepel
00013B2E                            
00013B2E                            ; ---------------------------------------------------------------------------
00013B2E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B2E                            ; ---------------------------------------------------------------------------
00013B2E                            
00013B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B2E                            
00013B2E                            
00013B2E                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B2E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B32 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B34 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B36                            
00013B36 5400                       		addq.b	#2,d0		; increase angle
00013B38 6400                       		bcc.s	loc_13596
00013B3A 7000                       		moveq	#0,d0
00013B3C                            
00013B3C                            loc_13596:
00013B3C 6000                       		bra.s	loc_1359E
00013B3E                            ; ===========================================================================
00013B3E                            
00013B3E                            loc_13598:
00013B3E 5500                       		subq.b	#2,d0		; decrease angle
00013B40 6400                       		bcc.s	loc_1359E
00013B42 7000                       		moveq	#0,d0
00013B44                            
00013B44                            loc_1359E:
00013B44 1140 0026                  		move.b	d0,$26(a0)
00013B48                            
00013B48                            locret_135A2:
00013B48 4E75                       		rts	
00013B4A                            ; End of function Sonic_JumpAngle
00013B4A                            
00013B4A                            ; ---------------------------------------------------------------------------
00013B4A                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013B4A                            ; ---------------------------------------------------------------------------
00013B4A                            
00013B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B4A                            
00013B4A                            
00013B4A                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013B4A 3228 0010                  		move.w	$10(a0),d1
00013B4E 3428 0012                  		move.w	$12(a0),d2
00013B52 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013B58 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013B5C 0400 0020                  		subi.b	#$20,d0
00013B60 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013B64 0200 00C0                  		andi.b	#$C0,d0
00013B68 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013B6C 0C00 0040                  		cmpi.b	#$40,d0
00013B70 6700 0000                  		beq.w	loc_13680
00013B74 0C00 0080                  		cmpi.b	#$80,d0
00013B78 6700 0000                  		beq.w	loc_136E2
00013B7C 0C00 00C0                  		cmpi.b	#-$40,d0
00013B80 6700 0000                  		beq.w	loc_1373E
00013B84 6100 0000                  		bsr.w	Sonic_HitWall
00013B88 4A41                       		tst.w	d1
00013B8A 6A00                       		bpl.s	loc_135F0
00013B8C 9368 0008                  		sub.w	d1,8(a0)
00013B90 317C 0000 0010             		move.w	#0,$10(a0)
00013B96                            
00013B96                            loc_135F0:
00013B96 6100 0000                  		bsr.w	sub_14EB4
00013B9A 4A41                       		tst.w	d1
00013B9C 6A00                       		bpl.s	loc_13602
00013B9E D368 0008                  		add.w	d1,8(a0)
00013BA2 317C 0000 0010             		move.w	#0,$10(a0)
00013BA8                            
00013BA8                            loc_13602:
00013BA8 6100 0000                  		bsr.w	Sonic_HitFloor
00013BAC 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013BB0 4A41                       		tst.w	d1
00013BB2 6A00                       		bpl.s	locret_1367E
00013BB4 1428 0012                  		move.b	$12(a0),d2
00013BB8 5002                       		addq.b	#8,d2
00013BBA 4402                       		neg.b	d2
00013BBC B202                       		cmp.b	d2,d1
00013BBE 6C00                       		bge.s	loc_1361E
00013BC0 B002                       		cmp.b	d2,d0
00013BC2 6D00                       		blt.s	locret_1367E
00013BC4                            
00013BC4                            loc_1361E:
00013BC4 D368 000C                  		add.w	d1,$C(a0)
00013BC8 1143 0026                  		move.b	d3,$26(a0)
00013BCC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013BD0 117C 0000 001C             		move.b	#0,$1C(a0)
00013BD6 1003                       		move.b	d3,d0
00013BD8 0600 0020                  		addi.b	#$20,d0
00013BDC 0200 0040                  		andi.b	#$40,d0
00013BE0 6600                       		bne.s	loc_1365C
00013BE2 1003                       		move.b	d3,d0
00013BE4 0600 0010                  		addi.b	#$10,d0
00013BE8 0200 0020                  		andi.b	#$20,d0
00013BEC 6700                       		beq.s	loc_1364E
00013BEE E0E8 0012                  		asr	$12(a0)
00013BF2 6000                       		bra.s	loc_13670
00013BF4                            ; ===========================================================================
00013BF4                            
00013BF4                            loc_1364E:
00013BF4 317C 0000 0012             		move.w	#0,$12(a0)
00013BFA 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C00 4E75                       		rts	
00013C02                            ; ===========================================================================
00013C02                            
00013C02                            loc_1365C:
00013C02 317C 0000 0010             		move.w	#0,$10(a0)
00013C08 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C0E 6F00                       		ble.s	loc_13670
00013C10 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C16                            
00013C16                            loc_13670:
00013C16 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C1C 4A03                       		tst.b	d3
00013C1E 6A00                       		bpl.s	locret_1367E
00013C20 4468 0014                  		neg.w	$14(a0)
00013C24                            
00013C24                            locret_1367E:
00013C24 4E75                       		rts	
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            loc_13680:
00013C26 6100 0000                  		bsr.w	Sonic_HitWall
00013C2A 4A41                       		tst.w	d1
00013C2C 6A00                       		bpl.s	loc_1369A
00013C2E 9368 0008                  		sub.w	d1,8(a0)
00013C32 317C 0000 0010             		move.w	#0,$10(a0)
00013C38 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C3E 4E75                       		rts	
00013C40                            ; ===========================================================================
00013C40                            
00013C40                            loc_1369A:
00013C40 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C44 4A41                       		tst.w	d1
00013C46 6A00                       		bpl.s	loc_136B4
00013C48 9368 000C                  		sub.w	d1,$C(a0)
00013C4C 4A68 0012                  		tst.w	$12(a0)
00013C50 6A00                       		bpl.s	locret_136B2
00013C52 317C 0000 0012             		move.w	#0,$12(a0)
00013C58                            
00013C58                            locret_136B2:
00013C58 4E75                       		rts	
00013C5A                            ; ===========================================================================
00013C5A                            
00013C5A                            loc_136B4:
00013C5A 4A68 0012                  		tst.w	$12(a0)
00013C5E 6B00                       		bmi.s	locret_136E0
00013C60 6100 0000                  		bsr.w	Sonic_HitFloor
00013C64 4A41                       		tst.w	d1
00013C66 6A00                       		bpl.s	locret_136E0
00013C68 D368 000C                  		add.w	d1,$C(a0)
00013C6C 1143 0026                  		move.b	d3,$26(a0)
00013C70 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C74 117C 0000 001C             		move.b	#0,$1C(a0)
00013C7A 317C 0000 0012             		move.w	#0,$12(a0)
00013C80 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C86                            
00013C86                            locret_136E0:
00013C86 4E75                       		rts	
00013C88                            ; ===========================================================================
00013C88                            
00013C88                            loc_136E2:
00013C88 6100 0000                  		bsr.w	Sonic_HitWall
00013C8C 4A41                       		tst.w	d1
00013C8E 6A00                       		bpl.s	loc_136F4
00013C90 9368 0008                  		sub.w	d1,8(a0)
00013C94 317C 0000 0010             		move.w	#0,$10(a0)
00013C9A                            
00013C9A                            loc_136F4:
00013C9A 6100 0000                  		bsr.w	sub_14EB4
00013C9E 4A41                       		tst.w	d1
00013CA0 6A00                       		bpl.s	loc_13706
00013CA2 D368 0008                  		add.w	d1,8(a0)
00013CA6 317C 0000 0010             		move.w	#0,$10(a0)
00013CAC                            
00013CAC                            loc_13706:
00013CAC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CB0 4A41                       		tst.w	d1
00013CB2 6A00                       		bpl.s	locret_1373C
00013CB4 9368 000C                  		sub.w	d1,$C(a0)
00013CB8 1003                       		move.b	d3,d0
00013CBA 0600 0020                  		addi.b	#$20,d0
00013CBE 0200 0040                  		andi.b	#$40,d0
00013CC2 6600                       		bne.s	loc_13726
00013CC4 317C 0000 0012             		move.w	#0,$12(a0)
00013CCA 4E75                       		rts	
00013CCC                            ; ===========================================================================
00013CCC                            
00013CCC                            loc_13726:
00013CCC 1143 0026                  		move.b	d3,$26(a0)
00013CD0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CD4 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013CDA 4A03                       		tst.b	d3
00013CDC 6A00                       		bpl.s	locret_1373C
00013CDE 4468 0014                  		neg.w	$14(a0)
00013CE2                            
00013CE2                            locret_1373C:
00013CE2 4E75                       		rts	
00013CE4                            ; ===========================================================================
00013CE4                            
00013CE4                            loc_1373E:
00013CE4 6100 0000                  		bsr.w	sub_14EB4
00013CE8 4A41                       		tst.w	d1
00013CEA 6A00                       		bpl.s	loc_13758
00013CEC D368 0008                  		add.w	d1,8(a0)
00013CF0 317C 0000 0010             		move.w	#0,$10(a0)
00013CF6 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013CFC 4E75                       		rts	
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            loc_13758:
00013CFE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D02 4A41                       		tst.w	d1
00013D04 6A00                       		bpl.s	loc_13772
00013D06 9368 000C                  		sub.w	d1,$C(a0)
00013D0A 4A68 0012                  		tst.w	$12(a0)
00013D0E 6A00                       		bpl.s	locret_13770
00013D10 317C 0000 0012             		move.w	#0,$12(a0)
00013D16                            
00013D16                            locret_13770:
00013D16 4E75                       		rts	
00013D18                            ; ===========================================================================
00013D18                            
00013D18                            loc_13772:
00013D18 4A68 0012                  		tst.w	$12(a0)
00013D1C 6B00                       		bmi.s	locret_1379E
00013D1E 6100 0000                  		bsr.w	Sonic_HitFloor
00013D22 4A41                       		tst.w	d1
00013D24 6A00                       		bpl.s	locret_1379E
00013D26 D368 000C                  		add.w	d1,$C(a0)
00013D2A 1143 0026                  		move.b	d3,$26(a0)
00013D2E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D32 117C 0000 001C             		move.b	#0,$1C(a0)
00013D38 317C 0000 0012             		move.w	#0,$12(a0)
00013D3E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D44                            
00013D44                            locret_1379E:
00013D44 4E75                       		rts	
00013D46                            ; End of function Sonic_Floor
00013D46                            
00013D46                            ; ---------------------------------------------------------------------------
00013D46                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013D46                            ; ---------------------------------------------------------------------------
00013D46                            
00013D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D46                            
00013D46                            
00013D46                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013D46 0828 0004 0022             		btst	#4,$22(a0)
00013D4C 6700                       		beq.s	loc_137AE
00013D4E 4E71                       		nop	
00013D50 4E71                       		nop	
00013D52 4E71                       		nop	
00013D54                            
00013D54                            loc_137AE:
00013D54 08A8 0005 0022             		bclr	#5,$22(a0)
00013D5A 08A8 0001 0022             		bclr	#1,$22(a0)
00013D60 08A8 0004 0022             		bclr	#4,$22(a0)
00013D66 0828 0002 0022             		btst	#2,$22(a0)
00013D6C 6700                       		beq.s	loc_137E4
00013D6E 08A8 0002 0022             		bclr	#2,$22(a0)
00013D74 117C 0013 0016             		move.b	#$13,$16(a0)
00013D7A 117C 0009 0017             		move.b	#9,$17(a0)
00013D80 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013D86 5B68 000C                  		subq.w	#5,$C(a0)
00013D8A                            
00013D8A                            loc_137E4:
00013D8A 117C 0000 003C             		move.b	#0,$3C(a0)
00013D90 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013D96 4E75                       		rts	
00013D98                            ; End of function Sonic_ResetOnFloor
00013D98                            
00013D98                            ; ===========================================================================
00013D98                            ; ---------------------------------------------------------------------------
00013D98                            ; Sonic	when he	gets hurt
00013D98                            ; ---------------------------------------------------------------------------
00013D98                            
00013D98                            Obj01_Hurt:				; XREF: Obj01_Index
00013D98 4EBA 9DAC                  		jsr	SpeedToPos
00013D9C 0668 0030 0012             		addi.w	#$30,$12(a0)
00013DA2 0828 0006 0022             		btst	#6,$22(a0)
00013DA8 6700                       		beq.s	loc_1380C
00013DAA 0468 0020 0012             		subi.w	#$20,$12(a0)
00013DB0                            
00013DB0                            loc_1380C:
00013DB0 6100 0000                  		bsr.w	Sonic_HurtStop
00013DB4 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013DB8 6100 F506                  		bsr.w	Sonic_RecordPos
00013DBC 6100 0000                  		bsr.w	Sonic_Animate
00013DC0 6100 0000                  		bsr.w	LoadSonicDynPLC
00013DC4 4EFA 9DA6                  		jmp	DisplaySprite
00013DC8                            
00013DC8                            ; ---------------------------------------------------------------------------
00013DC8                            ; Subroutine to	stop Sonic falling after he's been hurt
00013DC8                            ; ---------------------------------------------------------------------------
00013DC8                            
00013DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DC8                            
00013DC8                            
00013DC8                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013DC8 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013DCC 0640 00E0                  		addi.w	#$E0,d0
00013DD0 B068 000C                  		cmp.w	$C(a0),d0
00013DD4 6500 0000                  		bcs.w	KillSonic
00013DD8 6100 FD70                  		bsr.w	Sonic_Floor
00013DDC 0828 0001 0022             		btst	#1,$22(a0)
00013DE2 6600                       		bne.s	locret_13860
00013DE4 7000                       		moveq	#0,d0
00013DE6 3140 0012                  		move.w	d0,$12(a0)
00013DEA 3140 0010                  		move.w	d0,$10(a0)
00013DEE 3140 0014                  		move.w	d0,$14(a0)
00013DF2 117C 0000 001C             		move.b	#0,$1C(a0)
00013DF8 5528 0024                  		subq.b	#2,$24(a0)
00013DFC 317C 0078 0030             		move.w	#$78,$30(a0)
00013E02                            
00013E02                            locret_13860:
00013E02 4E75                       		rts	
00013E04                            ; End of function Sonic_HurtStop
00013E04                            
00013E04                            ; ===========================================================================
00013E04                            ; ---------------------------------------------------------------------------
00013E04                            ; Sonic	when he	dies
00013E04                            ; ---------------------------------------------------------------------------
00013E04                            
00013E04                            Obj01_Death:				; XREF: Obj01_Index
00013E04 6100 0000                  		bsr.w	GameOver
00013E08 4EBA 9D10                  		jsr	ObjectFall
00013E0C 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013E10 6100 0000                  		bsr.w	Sonic_Animate
00013E14 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E18 4EFA 9D52                  		jmp	DisplaySprite
00013E1C                            
00013E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E1C                            
00013E1C                            
00013E1C                            GameOver:				; XREF: Obj01_Death
00013E1C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E20 0640 0100                  		addi.w	#$100,d0
00013E24 B068 000C                  		cmp.w	$C(a0),d0
00013E28 6400 0000                  		bcc.w	locret_13900
00013E2C 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E32 5428 0024                  		addq.b	#2,$24(a0)
00013E36 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E3A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E3E 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013E42 6600                       		bne.s	loc_138D4
00013E44 317C 0000 003A             		move.w	#0,$3A(a0)
00013E4A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013E50 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013E56 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013E5C 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013E60                            
00013E60                            loc_138C2:
00013E60 303C 008F                  		move.w	#$8F,d0
00013E64 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013E6A 7003                       		moveq	#3,d0
00013E6C 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013E72                            ; ===========================================================================
00013E72                            
00013E72                            loc_138D4:
00013E72 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013E78 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013E7C 6700                       		beq.s	locret_13900	; if not, branch
00013E7E 317C 0000 003A             		move.w	#0,$3A(a0)
00013E84 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013E8A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013E90 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013E96 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013E9C 60C2                       		bra.s	loc_138C2
00013E9E                            ; ===========================================================================
00013E9E                            
00013E9E                            locret_13900:
00013E9E 4E75                       		rts	
00013EA0                            ; End of function GameOver
00013EA0                            
00013EA0                            ; ===========================================================================
00013EA0                            ; ---------------------------------------------------------------------------
00013EA0                            ; Sonic	when the level is restarted
00013EA0                            ; ---------------------------------------------------------------------------
00013EA0                            
00013EA0                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013EA0 4A68 003A                  		tst.w	$3A(a0)
00013EA4 6700                       		beq.s	locret_13914
00013EA6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013EAA 6600                       		bne.s	locret_13914
00013EAC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013EB2                            
00013EB2                            locret_13914:
00013EB2 4E75                       		rts	
00013EB4                            
00013EB4                            ; ---------------------------------------------------------------------------
00013EB4                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013EB4                            ; ---------------------------------------------------------------------------
00013EB4                            
00013EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EB4                            
00013EB4                            
00013EB4                            Sonic_Loops:				; XREF: Obj01_Control
00013EB4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013EBA 6700                       		beq.s	loc_13926	; if yes, branch
00013EBC 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013EC0 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013EC4                            
00013EC4                            loc_13926:
00013EC4 3028 000C                  		move.w	$C(a0),d0
00013EC8 E248                       		lsr.w	#1,d0
00013ECA 0240 0380                  		andi.w	#$380,d0
00013ECE 1228 0008                  		move.b	8(a0),d1
00013ED2 0241 007F                  		andi.w	#$7F,d1
00013ED6 D041                       		add.w	d1,d0
00013ED8 43F8 A400                  		lea	($FFFFA400).w,a1
00013EDC 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013EE0 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013EE4 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013EE8 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013EEC 6700 FA64                  		beq.w	Obj01_ChkRoll
00013EF0 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013EF4 6700                       		beq.s	loc_13976
00013EF6 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013EFA 6700                       		beq.s	loc_13966
00013EFC 08A8 0006 0001             		bclr	#6,1(a0)
00013F02 4E75                       		rts	
00013F04                            ; ===========================================================================
00013F04                            
00013F04                            loc_13966:
00013F04 0828 0001 0022             		btst	#1,$22(a0)
00013F0A 6700                       		beq.s	loc_13976
00013F0C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F12 4E75                       		rts	
00013F14                            ; ===========================================================================
00013F14                            
00013F14                            loc_13976:
00013F14 3428 0008                  		move.w	8(a0),d2
00013F18 0C02 002C                  		cmpi.b	#$2C,d2
00013F1C 6400                       		bcc.s	loc_13988
00013F1E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F24 4E75                       		rts	
00013F26                            ; ===========================================================================
00013F26                            
00013F26                            loc_13988:
00013F26 0C02 00E0                  		cmpi.b	#-$20,d2
00013F2A 6500                       		bcs.s	loc_13996
00013F2C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F32 4E75                       		rts	
00013F34                            ; ===========================================================================
00013F34                            
00013F34                            loc_13996:
00013F34 0828 0006 0001             		btst	#6,1(a0)
00013F3A 6600                       		bne.s	loc_139B2
00013F3C 1228 0026                  		move.b	$26(a0),d1
00013F40 6700                       		beq.s	locret_139C2
00013F42 0C01 0080                  		cmpi.b	#-$80,d1
00013F46 6200                       		bhi.s	locret_139C2
00013F48 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F4E 4E75                       		rts	
00013F50                            ; ===========================================================================
00013F50                            
00013F50                            loc_139B2:
00013F50 1228 0026                  		move.b	$26(a0),d1
00013F54 0C01 0080                  		cmpi.b	#-$80,d1
00013F58 6300                       		bls.s	locret_139C2
00013F5A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F60                            
00013F60                            locret_139C2:
00013F60 4E75                       		rts	
00013F62                            ; End of function Sonic_Loops
00013F62                            
00013F62                            ; ---------------------------------------------------------------------------
00013F62                            ; Subroutine to	animate	Sonic's sprites
00013F62                            ; ---------------------------------------------------------------------------
00013F62                            
00013F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F62                            
00013F62                            
00013F62                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013F62 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013F68 7000                       		moveq	#0,d0
00013F6A 1028 001C                  		move.b	$1C(a0),d0
00013F6E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013F72 6700                       		beq.s	SAnim_Do	; if not, branch
00013F74 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013F78 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013F7E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013F84                            
00013F84                            SAnim_Do:
00013F84 D040                       		add.w	d0,d0
00013F86 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013F8A 1011                       		move.b	(a1),d0
00013F8C 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013F8E 1228 0022                  		move.b	$22(a0),d1
00013F92 0201 0001                  		andi.b	#1,d1
00013F96 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013F9C 8328 0001                  		or.b	d1,1(a0)
00013FA0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FA4 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FA6 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013FAA                            
00013FAA                            SAnim_Do2:
00013FAA 7200                       		moveq	#0,d1
00013FAC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013FB0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013FB4 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013FB6                            
00013FB6                            SAnim_Next:
00013FB6 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013FBA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013FBE                            
00013FBE                            SAnim_Delay:
00013FBE 4E75                       		rts	
00013FC0                            ; ===========================================================================
00013FC0                            
00013FC0                            SAnim_End_FF:
00013FC0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013FC2 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013FC4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013FCA 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013FCE 60E6                       		bra.s	SAnim_Next
00013FD0                            ; ===========================================================================
00013FD0                            
00013FD0                            SAnim_End_FE:
00013FD0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013FD2 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013FD4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013FD8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013FDC 9200                       		sub.b	d0,d1
00013FDE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013FE2 60D2                       		bra.s	SAnim_Next
00013FE4                            ; ===========================================================================
00013FE4                            
00013FE4                            SAnim_End_FD:
00013FE4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013FE6 6600                       		bne.s	SAnim_End	; if not, branch
00013FE8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013FEE                            
00013FEE                            SAnim_End:
00013FEE 4E75                       		rts	
00013FF0                            ; ===========================================================================
00013FF0                            
00013FF0                            SAnim_WalkRun:				; XREF: SAnim_Do
00013FF0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FF4 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FF6 5200                       		addq.b	#1,d0		; is animation walking/running?
00013FF8 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013FFC 7200                       		moveq	#0,d1
00013FFE 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014002 1428 0022                  		move.b	$22(a0),d2
00014006 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001400A 6600                       		bne.s	loc_13A70	; if yes, branch
0001400C 4600                       		not.b	d0		; reverse angle
0001400E                            
0001400E                            loc_13A70:
0001400E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014012 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014014 7203                       		moveq	#3,d1
00014016                            
00014016                            loc_13A78:
00014016 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001401C B302                       		eor.b	d1,d2
0001401E 8528 0001                  		or.b	d2,1(a0)
00014022 0828 0005 0022             		btst	#5,$22(a0)
00014028 6600 0000                  		bne.w	SAnim_Push
0001402C E808                       		lsr.b	#4,d0		; divide angle by $10
0001402E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014032 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014036 6A00                       		bpl.s	loc_13A9C
00014038 4442                       		neg.w	d2
0001403A                            
0001403A                            loc_13A9C:
0001403A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014040 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014044 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014046 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001404C 1200                       		move.b	d0,d1
0001404E E209                       		lsr.b	#1,d1
00014050 D001                       		add.b	d1,d0
00014052                            
00014052                            loc_13AB4:
00014052 D000                       		add.b	d0,d0
00014054 1600                       		move.b	d0,d3
00014056 4442                       		neg.w	d2
00014058 0642 0800                  		addi.w	#$800,d2
0001405C 6A00                       		bpl.s	loc_13AC2
0001405E 7400                       		moveq	#0,d2
00014060                            
00014060                            loc_13AC2:
00014060 E04A                       		lsr.w	#8,d2
00014062 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014066 6100 FF42                  		bsr.w	SAnim_Do2
0001406A D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001406E 4E75                       		rts	
00014070                            ; ===========================================================================
00014070                            
00014070                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014070 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014072 6600                       		bne.s	SAnim_Push	; if not, branch
00014074 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014078 6A00                       		bpl.s	loc_13ADE
0001407A 4442                       		neg.w	d2
0001407C                            
0001407C                            loc_13ADE:
0001407C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014082 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014086 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014088 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001408E                            
0001408E                            loc_13AF0:
0001408E 4442                       		neg.w	d2
00014090 0642 0400                  		addi.w	#$400,d2
00014094 6A00                       		bpl.s	loc_13AFA
00014096 7400                       		moveq	#0,d2
00014098                            
00014098                            loc_13AFA:
00014098 E04A                       		lsr.w	#8,d2
0001409A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001409E 1228 0022                  		move.b	$22(a0),d1
000140A2 0201 0001                  		andi.b	#1,d1
000140A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140AC 8328 0001                  		or.b	d1,1(a0)
000140B0 6000 FEF8                  		bra.w	SAnim_Do2
000140B4                            ; ===========================================================================
000140B4                            
000140B4                            SAnim_Push:				; XREF: SAnim_RollJump
000140B4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140B8 6B00                       		bmi.s	loc_13B1E
000140BA 4442                       		neg.w	d2
000140BC                            
000140BC                            loc_13B1E:
000140BC 0642 0800                  		addi.w	#$800,d2
000140C0 6A00                       		bpl.s	loc_13B26
000140C2 7400                       		moveq	#0,d2
000140C4                            
000140C4                            loc_13B26:
000140C4 EC4A                       		lsr.w	#6,d2
000140C6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140CA 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000140D0 1228 0022                  		move.b	$22(a0),d1
000140D4 0201 0001                  		andi.b	#1,d1
000140D8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140DE 8328 0001                  		or.b	d1,1(a0)
000140E2 6000 FEC6                  		bra.w	SAnim_Do2
000140E6                            ; End of function Sonic_Animate
000140E6                            
000140E6                            ; ===========================================================================
000140E6                            SonicAniData:
000140E6                            	include "_anim\Sonic.asm"
000140E6                            ; ---------------------------------------------------------------------------
000140E6                            ; Animation script - Sonic
000140E6                            ; ---------------------------------------------------------------------------
000140E6 0000                       		dc.w SonAni_Walk-SonicAniData
000140E8 0000                       		dc.w SonAni_Run-SonicAniData
000140EA 0000                       		dc.w SonAni_Roll-SonicAniData
000140EC 0000                       		dc.w SonAni_Roll2-SonicAniData
000140EE 0000                       		dc.w SonAni_Push-SonicAniData
000140F0 0000                       		dc.w SonAni_Wait-SonicAniData
000140F2 0000                       		dc.w SonAni_Balance-SonicAniData
000140F4 0000                       		dc.w SonAni_LookUp-SonicAniData
000140F6 0000                       		dc.w SonAni_Duck-SonicAniData
000140F8 0000                       		dc.w SonAni_Warp1-SonicAniData
000140FA 0000                       		dc.w SonAni_Warp2-SonicAniData
000140FC 0000                       		dc.w SonAni_Warp3-SonicAniData
000140FE 0000                       		dc.w SonAni_Warp4-SonicAniData
00014100 0000                       		dc.w SonAni_Stop-SonicAniData
00014102 0000                       		dc.w SonAni_Float1-SonicAniData
00014104 0000                       		dc.w SonAni_Float2-SonicAniData
00014106 0000                       		dc.w SonAni_Spring-SonicAniData
00014108 0000                       		dc.w SonAni_LZHang-SonicAniData
0001410A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001410C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001410E 0000                       		dc.w SonAni_Surf-SonicAniData
00014110 0000                       		dc.w SonAni_Bubble-SonicAniData
00014112 0000                       		dc.w SonAni_Death1-SonicAniData
00014114 0000                       		dc.w SonAni_Drown-SonicAniData
00014116 0000                       		dc.w SonAni_Death2-SonicAniData
00014118 0000                       		dc.w SonAni_Shrink-SonicAniData
0001411A 0000                       		dc.w SonAni_Hurt-SonicAniData
0001411C 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001411E 0000                       		dc.w SonAni_Blank-SonicAniData
00014120 0000                       		dc.w SonAni_Float3-SonicAniData
00014122 0000                       		dc.w SonAni_Float4-SonicAniData
00014124 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001412E FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014136 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001413E FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014146 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001414E 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014164 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014168 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
0001416C 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014170 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014174 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014178 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001417C 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014180 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014184 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014188 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014190 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014194 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014198 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001419E 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000141A4 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000141A8 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000141B0 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000141B4 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000141B8 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000141BC 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000141C6 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
000141CA 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000141CE 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000141D2 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000141DA 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000141DE                            		even
000141DE                            		even
000141DE                            
000141DE                            ; ---------------------------------------------------------------------------
000141DE                            ; Sonic	pattern	loading	subroutine
000141DE                            ; ---------------------------------------------------------------------------
000141DE                            
000141DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141DE                            
000141DE                            
000141DE                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000141DE 7000                       		moveq	#0,d0
000141E0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000141E4 B038 F766                  		cmp.b	($FFFFF766).w,d0
000141E8 6700                       		beq.s	locret_13C96
000141EA 11C0 F766                  		move.b	d0,($FFFFF766).w
000141EE 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000141F4 D040                       		add.w	d0,d0
000141F6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000141FA 7200                       		moveq	#0,d1
000141FC 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000141FE 5301                       		subq.b	#1,d1
00014200 6B00                       		bmi.s	locret_13C96
00014202 47F8 C800                  		lea	($FFFFC800).w,a3
00014206 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001420C                            
0001420C                            SPLC_ReadEntry:
0001420C 7400                       		moveq	#0,d2
0001420E 141A                       		move.b	(a2)+,d2
00014210 3002                       		move.w	d2,d0
00014212 E808                       		lsr.b	#4,d0
00014214 E14A                       		lsl.w	#8,d2
00014216 141A                       		move.b	(a2)+,d2
00014218 EB4A                       		lsl.w	#5,d2
0001421A 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00014220 D3C2                       		adda.l	d2,a1
00014222                            
00014222                            SPLC_LoadTile:
00014222 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014226 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001422A 47EB 0020                  		lea	$20(a3),a3	; next tile
0001422E 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014232                            
00014232 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014236                            
00014236                            locret_13C96:
00014236 4E75                       		rts	
00014238                            ; End of function LoadSonicDynPLC
00014238                            
00014238                            ; ===========================================================================
00014238                            ; ---------------------------------------------------------------------------
00014238                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014238                            ; ---------------------------------------------------------------------------
00014238                            
00014238                            Obj0A:					; XREF: Obj_Index
00014238 7000                       		moveq	#0,d0
0001423A 1028 0024                  		move.b	$24(a0),d0
0001423E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014242 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014246                            ; ===========================================================================
00014246 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001424A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001424E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014252 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014256 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014258                            ; ===========================================================================
00014258                            
00014258                            Obj0A_Main:				; XREF: Obj0A_Index
00014258 5428 0024                  		addq.b	#2,$24(a0)
0001425C 217C 0001 2EFE 0004        		move.l	#Map_obj64,4(a0)
00014264 317C 8348 0002             		move.w	#$8348,2(a0)
0001426A 117C 0084 0001             		move.b	#$84,1(a0)
00014270 117C 0010 0019             		move.b	#$10,$19(a0)
00014276 117C 0001 0018             		move.b	#1,$18(a0)
0001427C 1028 0028                  		move.b	$28(a0),d0
00014280 6A00                       		bpl.s	loc_13D00
00014282 5028 0024                  		addq.b	#8,$24(a0)
00014286 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001428E 317C 0440 0002             		move.w	#$440,2(a0)
00014294 0240 007F                  		andi.w	#$7F,d0
00014298 1140 0033                  		move.b	d0,$33(a0)
0001429C 6000 0000                  		bra.w	Obj0A_Countdown
000142A0                            ; ===========================================================================
000142A0                            
000142A0                            loc_13D00:
000142A0 1140 001C                  		move.b	d0,$1C(a0)
000142A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000142AA 317C FF78 0012             		move.w	#-$88,$12(a0)
000142B0                            
000142B0                            Obj0A_Animate:				; XREF: Obj0A_Index
000142B0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000142B6 4EB9 0000 AC42             		jsr	AnimateSprite
000142BC                            
000142BC                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000142BC 3038 F646                  		move.w	($FFFFF646).w,d0
000142C0 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000142C4 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000142C6 117C 0006 0024             		move.b	#6,$24(a0)
000142CC 5E28 001C                  		addq.b	#7,$1C(a0)
000142D0 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000142D6 6700                       		beq.s	Obj0A_Display
000142D8 6000                       		bra.s	Obj0A_Display
000142DA                            ; ===========================================================================
000142DA                            
000142DA                            Obj0A_Wobble:
000142DA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000142DE 6700                       		beq.s	loc_13D44
000142E0 5868 0030                  		addq.w	#4,$30(a0)
000142E4                            
000142E4                            loc_13D44:
000142E4 1028 0026                  		move.b	$26(a0),d0
000142E8 5228 0026                  		addq.b	#1,$26(a0)
000142EC 0240 007F                  		andi.w	#$7F,d0
000142F0 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000142F6 1031 0000                  		move.b	(a1,d0.w),d0
000142FA 4880                       		ext.w	d0
000142FC D068 0030                  		add.w	$30(a0),d0
00014300 3140 0008                  		move.w	d0,8(a0)
00014304 6100                       		bsr.s	Obj0A_ShowNumber
00014306 4EBA 983E                  		jsr	SpeedToPos
0001430A 4A28 0001                  		tst.b	1(a0)
0001430E 6A00                       		bpl.s	Obj0A_Delete
00014310 4EFA 985A                  		jmp	DisplaySprite
00014314                            ; ===========================================================================
00014314                            
00014314                            Obj0A_Delete:
00014314 4EFA 9892                  		jmp	DeleteObject
00014318                            ; ===========================================================================
00014318                            
00014318                            Obj0A_Display:				; XREF: Obj0A_Index
00014318 6100                       		bsr.s	Obj0A_ShowNumber
0001431A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014320 4EB9 0000 AC42             		jsr	AnimateSprite
00014326 4EFA 9844                  		jmp	DisplaySprite
0001432A                            ; ===========================================================================
0001432A                            
0001432A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001432A 4EFA 987C                  		jmp	DeleteObject
0001432E                            ; ===========================================================================
0001432E                            
0001432E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001432E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014334 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014336 5368 0038                  		subq.w	#1,$38(a0)
0001433A 6600                       		bne.s	Obj0A_Display2
0001433C 117C 000E 0024             		move.b	#$E,$24(a0)
00014342 5E28 001C                  		addq.b	#7,$1C(a0)
00014346 60D0                       		bra.s	Obj0A_Display
00014348                            ; ===========================================================================
00014348                            
00014348                            Obj0A_Display2:
00014348 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001434E 4EB9 0000 AC42             		jsr	AnimateSprite
00014354 4A28 0001                  		tst.b	1(a0)
00014358 6A00                       		bpl.s	Obj0A_Delete3
0001435A 4EFA 9810                  		jmp	DisplaySprite
0001435E                            ; ===========================================================================
0001435E                            
0001435E                            Obj0A_Delete3:
0001435E 4EFA 9848                  		jmp	DeleteObject
00014362                            ; ===========================================================================
00014362                            
00014362                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014362 4A68 0038                  		tst.w	$38(a0)
00014366 6700                       		beq.s	locret_13E1A
00014368 5368 0038                  		subq.w	#1,$38(a0)
0001436C 6600                       		bne.s	locret_13E1A
0001436E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014374 6400                       		bcc.s	locret_13E1A
00014376 317C 000F 0038             		move.w	#$F,$38(a0)
0001437C 4268 0012                  		clr.w	$12(a0)
00014380 117C 0080 0001             		move.b	#$80,1(a0)
00014386 3028 0008                  		move.w	8(a0),d0
0001438A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001438E 0640 0080                  		addi.w	#$80,d0
00014392 3140 0008                  		move.w	d0,8(a0)
00014396 3028 000C                  		move.w	$C(a0),d0
0001439A 9078 F704                  		sub.w	($FFFFF704).w,d0
0001439E 0640 0080                  		addi.w	#$80,d0
000143A2 3140 000A                  		move.w	d0,$A(a0)
000143A6 117C 000C 0024             		move.b	#$C,$24(a0)
000143AC                            
000143AC                            locret_13E1A:
000143AC 4E75                       		rts	
000143AE                            ; ===========================================================================
000143AE                            Obj0A_WobbleData:
000143AE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000143BF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000143D0 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000143E1 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000143F1 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000143FE FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001440B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014418 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014425 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001442E                            ; ===========================================================================
0001442E                            
0001442E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001442E 4A68 002C                  		tst.w	$2C(a0)
00014432 6600 0000                  		bne.w	loc_13F86
00014436 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001443C 6400 0000                  		bcc.w	locret_1408C
00014440 0838 0006 D022             		btst	#6,($FFFFD022).w
00014446 6700 0000                  		beq.w	locret_1408C
0001444A 5368 0038                  		subq.w	#1,$38(a0)
0001444E 6A00 0000                  		bpl.w	loc_13FAC
00014452 317C 003B 0038             		move.w	#59,$38(a0)
00014458 317C 0001 0036             		move.w	#1,$36(a0)
0001445E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014464 0240 0001                  		andi.w	#1,d0
00014468 1140 0034                  		move.b	d0,$34(a0)
0001446C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014470 0C40 0019                  		cmpi.w	#$19,d0
00014474 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014476 0C40 0014                  		cmpi.w	#$14,d0
0001447A 6700                       		beq.s	Obj0A_WarnSound
0001447C 0C40 000F                  		cmpi.w	#$F,d0
00014480 6700                       		beq.s	Obj0A_WarnSound
00014482 0C40 000C                  		cmpi.w	#$C,d0
00014486 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014488 6600                       		bne.s	loc_13F02
0001448A 303C 0092                  		move.w	#$92,d0
0001448E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
00014494                            
00014494                            loc_13F02:
00014494 5328 0032                  		subq.b	#1,$32(a0)
00014498 6A00                       		bpl.s	Obj0A_ReduceAir
0001449A 1168 0033 0032             		move.b	$33(a0),$32(a0)
000144A0 08E8 0007 0036             		bset	#7,$36(a0)
000144A6 6000                       		bra.s	Obj0A_ReduceAir
000144A8                            ; ===========================================================================
000144A8                            
000144A8                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000144A8 303C 00C2                  		move.w	#$C2,d0
000144AC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000144B2                            
000144B2                            Obj0A_ReduceAir:
000144B2 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000144B6 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000144BA 6100 0000                  		bsr.w	ResumeMusic
000144BE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000144C4 303C 00B2                  		move.w	#$B2,d0
000144C8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
000144CE 117C 000A 0034             		move.b	#$A,$34(a0)
000144D4 317C 0001 0036             		move.w	#1,$36(a0)
000144DA 317C 0078 002C             		move.w	#$78,$2C(a0)
000144E0 2F08                       		move.l	a0,-(sp)
000144E2 41F8 D000                  		lea	($FFFFD000).w,a0
000144E6 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
000144EA 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000144F0 08E8 0001 0022             		bset	#1,$22(a0)
000144F6 08E8 0007 0002             		bset	#7,2(a0)
000144FC 317C 0000 0012             		move.w	#0,$12(a0)
00014502 317C 0000 0010             		move.w	#0,$10(a0)
00014508 317C 0000 0014             		move.w	#0,$14(a0)
0001450E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014514 205F                       		movea.l	(sp)+,a0
00014516 4E75                       		rts	
00014518                            ; ===========================================================================
00014518                            
00014518                            loc_13F86:
00014518 5368 002C                  		subq.w	#1,$2C(a0)
0001451C 6600                       		bne.s	loc_13F94
0001451E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014524 4E75                       		rts	
00014526                            ; ===========================================================================
00014526                            
00014526                            loc_13F94:
00014526 2F08                       		move.l	a0,-(sp)
00014528 41F8 D000                  		lea	($FFFFD000).w,a0
0001452C 4EBA 9618                  		jsr	SpeedToPos
00014530 0668 0010 0012             		addi.w	#$10,$12(a0)
00014536 205F                       		movea.l	(sp)+,a0
00014538 6000                       		bra.s	loc_13FAC
0001453A                            ; ===========================================================================
0001453A                            
0001453A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001453A 6000                       		bra.s	Obj0A_MakeItem
0001453C                            ; ===========================================================================
0001453C                            
0001453C                            loc_13FAC:
0001453C 4A68 0036                  		tst.w	$36(a0)
00014540 6700 0000                  		beq.w	locret_1408C
00014544 5368 003A                  		subq.w	#1,$3A(a0)
00014548 6A00 0000                  		bpl.w	locret_1408C
0001454C                            
0001454C                            Obj0A_MakeItem:
0001454C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014552 0240 000F                  		andi.w	#$F,d0
00014556 3140 003A                  		move.w	d0,$3A(a0)
0001455A 4EBA 9A96                  		jsr	SingleObjLoad
0001455E 6600 0000                  		bne.w	locret_1408C
00014562 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014566 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001456C 7006                       		moveq	#6,d0
0001456E 0838 0000 D022             		btst	#0,($FFFFD022).w
00014574 6700                       		beq.s	loc_13FF2
00014576 4440                       		neg.w	d0
00014578 137C 0040 0026             		move.b	#$40,$26(a1)
0001457E                            
0001457E                            loc_13FF2:
0001457E D169 0008                  		add.w	d0,8(a1)
00014582 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014588 137C 0006 0028             		move.b	#6,$28(a1)
0001458E 4A68 002C                  		tst.w	$2C(a0)
00014592 6700 0000                  		beq.w	loc_1403E
00014596 0268 0007 003A             		andi.w	#7,$3A(a0)
0001459C 0668 0000 003A             		addi.w	#0,$3A(a0)
000145A2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000145A6 0440 000C                  		subi.w	#$C,d0
000145AA 3340 000C                  		move.w	d0,$C(a1)
000145AE 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145B4 1340 0026                  		move.b	d0,$26(a1)
000145B8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000145BC 0200 0003                  		andi.b	#3,d0
000145C0 6600                       		bne.s	loc_14082
000145C2 137C 000E 0028             		move.b	#$E,$28(a1)
000145C8 6000                       		bra.s	loc_14082
000145CA                            ; ===========================================================================
000145CA                            
000145CA                            loc_1403E:
000145CA 0828 0007 0036             		btst	#7,$36(a0)
000145D0 6700                       		beq.s	loc_14082
000145D2 3438 FE14                  		move.w	($FFFFFE14).w,d2
000145D6 E24A                       		lsr.w	#1,d2
000145D8 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145DE 0240 0003                  		andi.w	#3,d0
000145E2 6600                       		bne.s	loc_1406A
000145E4 08E8 0006 0036             		bset	#6,$36(a0)
000145EA 6600                       		bne.s	loc_14082
000145EC 1342 0028                  		move.b	d2,$28(a1)
000145F0 337C 001C 0038             		move.w	#$1C,$38(a1)
000145F6                            
000145F6                            loc_1406A:
000145F6 4A28 0034                  		tst.b	$34(a0)
000145FA 6600                       		bne.s	loc_14082
000145FC 08E8 0006 0036             		bset	#6,$36(a0)
00014602 6600                       		bne.s	loc_14082
00014604 1342 0028                  		move.b	d2,$28(a1)
00014608 337C 001C 0038             		move.w	#$1C,$38(a1)
0001460E                            
0001460E                            loc_14082:
0001460E 5328 0034                  		subq.b	#1,$34(a0)
00014612 6A00                       		bpl.s	locret_1408C
00014614 4268 0036                  		clr.w	$36(a0)
00014618                            
00014618                            locret_1408C:
00014618 4E75                       		rts	
0001461A                            
0001461A                            ; ---------------------------------------------------------------------------
0001461A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001461A                            ; ---------------------------------------------------------------------------
0001461A                            
0001461A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001461A                            
0001461A                            
0001461A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001461A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014620                             
00014620                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014620                             
00014620 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014624                             
00014624 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001462A 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001462C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014632 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014634                             
00014634                            Air_GetBgm2:
00014634 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001463A 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001463C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014642 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014644                             
00014644                            Air_GetBgm3:
00014644 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001464A 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001464C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014652 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014654                             
00014654                            Air_GetBgm4:
00014654 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001465A 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001465C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014662                             
00014662                            Air_PlayMusic:
00014662 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014666                             
00014666                            loc_140A6:
00014666 4EB9 0000 15B6             		jsr	(PlaySound).l
0001466C                             
0001466C                            ; NineKode ends here
0001466C                            
0001466C                            loc_140AC:
0001466C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014672 4238 D372                  		clr.b	($FFFFD372).w
00014676 4E75                       		rts	
00014678                            ; End of function ResumeMusic
00014678                            
00014678                            ; ===========================================================================
00014678                            Ani_obj0A:
00014678                            	include "_anim\obj0A.asm"
00014678                            ; ---------------------------------------------------------------------------
00014678                            ; Animation script - countdown numbers and bubbles (LZ)
00014678                            ; ---------------------------------------------------------------------------
00014678 0000                       		dc.w byte_140D6-Ani_obj0A
0001467A 0000                       		dc.w byte_140E0-Ani_obj0A
0001467C 0000                       		dc.w byte_140EA-Ani_obj0A
0001467E 0000                       		dc.w byte_140F4-Ani_obj0A
00014680 0000                       		dc.w byte_140FE-Ani_obj0A
00014682 0000                       		dc.w byte_14108-Ani_obj0A
00014684 0000                       		dc.w byte_14112-Ani_obj0A
00014686 0000                       		dc.w byte_14118-Ani_obj0A
00014688 0000                       		dc.w byte_14120-Ani_obj0A
0001468A 0000                       		dc.w byte_14128-Ani_obj0A
0001468C 0000                       		dc.w byte_14130-Ani_obj0A
0001468E 0000                       		dc.w byte_14138-Ani_obj0A
00014690 0000                       		dc.w byte_14140-Ani_obj0A
00014692 0000                       		dc.w byte_14148-Ani_obj0A
00014694 0000                       		dc.w byte_1414A-Ani_obj0A
00014696 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000146A0 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000146AA 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000146B4 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000146BE 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000146C8 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000146D2 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000146D8 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000146E0 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000146E8 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000146F0 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000146F8 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014700 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014708 0EFC                       byte_14148:	dc.b $E, $FC
0001470A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014710                            		even
00014710                            		even
00014710                            
00014710                            ; ---------------------------------------------------------------------------
00014710                            ; Sprite mappings - drowning countdown numbers (LZ)
00014710                            ; ---------------------------------------------------------------------------
00014710                            Map_obj0A:
00014710                            	include "_maps\obj0A.asm"
00014710                            ; ---------------------------------------------------------------------------
00014710                            ; Sprite mappings - drowning countdown numbers (LZ)
00014710                            ; ---------------------------------------------------------------------------
00014710 0000                       		dc.w byte_14152-Map_obj0A
00014712 01                         byte_14152:	dc.b 1
00014713 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014718                            		even
00014718                            		even
00014718                            
00014718                            ; ===========================================================================
00014718                            ; ---------------------------------------------------------------------------
00014718                            ; Object 38 - shield and invincibility stars
00014718                            ; ---------------------------------------------------------------------------
00014718                            
00014718                            Obj38:					; XREF: Obj_Index
00014718 7000                       		moveq	#0,d0
0001471A 1028 0024                  		move.b	$24(a0),d0
0001471E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014722 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014726                            ; ===========================================================================
00014726 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014728 0000                       		dc.w Obj38_Shield-Obj38_Index
0001472A 0000                       		dc.w Obj38_Stars-Obj38_Index
0001472C                            ; ===========================================================================
0001472C                            
0001472C                            Obj38_Main:				; XREF: Obj38_Index
0001472C 5428 0024                  		addq.b	#2,$24(a0)
00014730 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014738 117C 0004 0001             		move.b	#4,1(a0)
0001473E 117C 0001 0018             		move.b	#1,$18(a0)
00014744 117C 0010 0019             		move.b	#$10,$19(a0)
0001474A 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001474E 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014750 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014756 4E75                       		rts	
00014758                            ; ===========================================================================
00014758                            
00014758                            Obj38_DoStars:
00014758 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001475C 317C 055C 0002             		move.w	#$55C,2(a0)
00014762 4E75                       		rts	
00014764                            ; ===========================================================================
00014764                            
00014764                            Obj38_Shield:				; XREF: Obj38_Index
00014764 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014768 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001476A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001476E 6700                       		beq.s	Obj38_Delete	; if not, branch
00014770 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014776 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001477C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014782 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014788 4EB9 0000 AC42             		jsr	AnimateSprite
0001478E 4EFA 93DC                  		jmp	DisplaySprite
00014792                            ; ===========================================================================
00014792                            
00014792                            Obj38_RmvShield:
00014792 4E75                       		rts	
00014794                            ; ===========================================================================
00014794                            
00014794                            Obj38_Delete:
00014794 4EFA 9412                  		jmp	DeleteObject
00014798                            ; ===========================================================================
00014798                            
00014798                            Obj38_Stars:				; XREF: Obj38_Index
00014798 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001479C 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001479E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000147A2 1228 001C                  		move.b	$1C(a0),d1
000147A6 5301                       		subq.b	#1,d1
000147A8 6000                       		bra.s	Obj38_StarTrail
000147AA                            ; ===========================================================================
000147AA E909                       		lsl.b	#4,d1
000147AC 5801                       		addq.b	#4,d1
000147AE 9001                       		sub.b	d1,d0
000147B0 1228 0030                  		move.b	$30(a0),d1
000147B4 9001                       		sub.b	d1,d0
000147B6 5801                       		addq.b	#4,d1
000147B8 0201 000F                  		andi.b	#$F,d1
000147BC 1141 0030                  		move.b	d1,$30(a0)
000147C0 6000                       		bra.s	Obj38_StarTrail2a
000147C2                            ; ===========================================================================
000147C2                            
000147C2                            Obj38_StarTrail:			; XREF: Obj38_Stars
000147C2 E709                       		lsl.b	#3,d1
000147C4 1401                       		move.b	d1,d2
000147C6 D201                       		add.b	d1,d1
000147C8 D202                       		add.b	d2,d1
000147CA 5801                       		addq.b	#4,d1
000147CC 9001                       		sub.b	d1,d0
000147CE 1228 0030                  		move.b	$30(a0),d1
000147D2 9001                       		sub.b	d1,d0
000147D4 5801                       		addq.b	#4,d1
000147D6 0C01 0018                  		cmpi.b	#$18,d1
000147DA 6500                       		bcs.s	Obj38_StarTrail2
000147DC 7200                       		moveq	#0,d1
000147DE                            
000147DE                            Obj38_StarTrail2:
000147DE 1141 0030                  		move.b	d1,$30(a0)
000147E2                            
000147E2                            Obj38_StarTrail2a:
000147E2 43F8 CB00                  		lea	($FFFFCB00).w,a1
000147E6 43F1 0000                  		lea	(a1,d0.w),a1
000147EA 3159 0008                  		move.w	(a1)+,8(a0)
000147EE 3159 000C                  		move.w	(a1)+,$C(a0)
000147F2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000147F8 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147FE 4EB9 0000 AC42             		jsr	AnimateSprite
00014804 4EFA 9366                  		jmp	DisplaySprite
00014808                            ; ===========================================================================
00014808                            
00014808                            Obj38_Delete2:				; XREF: Obj38_Stars
00014808 4EFA 939E                  		jmp	DeleteObject
0001480C                            ; ===========================================================================
0001480C                            ; ---------------------------------------------------------------------------
0001480C                            ; Object 4A - special stage entry from beta
0001480C                            ; ---------------------------------------------------------------------------
0001480C                            
0001480C                            Obj4A:					; XREF: Obj_Index
0001480C 7000                       		moveq	#0,d0
0001480E 1028 0024                  		move.b	$24(a0),d0
00014812 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014816 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001481A                            ; ===========================================================================
0001481A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001481C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001481E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014820                            ; ===========================================================================
00014820                            
00014820                            Obj4A_Main:				; XREF: Obj4A_Index
00014820 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014824 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014826 4E75                       		rts	
00014828                            ; ===========================================================================
00014828                            
00014828                            Obj4A_Main2:
00014828 5428 0024                  		addq.b	#2,$24(a0)
0001482C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014834 117C 0004 0001             		move.b	#4,1(a0)
0001483A 117C 0001 0018             		move.b	#1,$18(a0)
00014840 117C 0038 0019             		move.b	#$38,$19(a0)
00014846 317C 0541 0002             		move.w	#$541,2(a0)
0001484C 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014852                            
00014852                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014852 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014858 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001485E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014864 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001486A 4EB9 0000 AC42             		jsr	AnimateSprite
00014870 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014876 6600                       		bne.s	Obj4A_Display
00014878 4A38 D000                  		tst.b	($FFFFD000).w
0001487C 6700                       		beq.s	Obj4A_Display
0001487E 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014884 303C 00A8                  		move.w	#$A8,d0
00014888 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001488E                            
0001488E                            Obj4A_Display:
0001488E 4EFA 92DC                  		jmp	DisplaySprite
00014892                            ; ===========================================================================
00014892                            
00014892                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014892 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014896 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014898 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001489E 4EFA 9308                  		jmp	DeleteObject
000148A2                            ; ===========================================================================
000148A2                            
000148A2                            Obj4A_Wait:
000148A2 4E75                       		rts	
000148A4                            ; ===========================================================================
000148A4                            ; ---------------------------------------------------------------------------
000148A4                            ; Object 08 - water splash (LZ)
000148A4                            ; ---------------------------------------------------------------------------
000148A4                            
000148A4                            Obj08:					; XREF: Obj_Index
000148A4 7000                       		moveq	#0,d0
000148A6 1028 0024                  		move.b	$24(a0),d0
000148AA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000148AE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000148B2                            ; ===========================================================================
000148B2 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000148B4 0000                       		dc.w Obj08_Display-Obj08_Index
000148B6 0000                       		dc.w Obj08_Delete-Obj08_Index
000148B8                            ; ===========================================================================
000148B8                            
000148B8                            Obj08_Main:				; XREF: Obj08_Index
000148B8 5428 0024                  		addq.b	#2,$24(a0)
000148BC 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000148C4 0028 0004 0001             		ori.b	#4,1(a0)
000148CA 117C 0001 0018             		move.b	#1,$18(a0)
000148D0 117C 0010 0019             		move.b	#$10,$19(a0)
000148D6 317C 4259 0002             		move.w	#$4259,2(a0)
000148DC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000148E2                            
000148E2                            Obj08_Display:				; XREF: Obj08_Index
000148E2 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000148E8 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000148EE 4EB9 0000 AC42             		jsr	AnimateSprite
000148F4 4EFA 9276                  		jmp	DisplaySprite
000148F8                            ; ===========================================================================
000148F8                            
000148F8                            Obj08_Delete:				; XREF: Obj08_Index
000148F8 4EFA 92AE                  		jmp	DeleteObject	; delete when animation	is complete
000148FC                            ; ===========================================================================
000148FC                            Ani_obj38:
000148FC                            	include "_anim\obj38.asm"
000148FC                            ; ---------------------------------------------------------------------------
000148FC                            ; Animation script - shield and invincibility stars
000148FC                            ; ---------------------------------------------------------------------------
000148FC 0000                       		dc.w byte_14356-Ani_obj38
000148FE 0000                       		dc.w byte_1435E-Ani_obj38
00014900 0000                       		dc.w byte_14364-Ani_obj38
00014902 0000                       		dc.w byte_1437E-Ani_obj38
00014904 0000                       		dc.w byte_14398-Ani_obj38
00014906 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001490E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014914 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014925 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001492E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001493F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014948 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014959 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014962                            		even
00014962                            		even
00014962                            
00014962                            ; ---------------------------------------------------------------------------
00014962                            ; Sprite mappings - shield and invincibility stars
00014962                            ; ---------------------------------------------------------------------------
00014962                            Map_obj38:
00014962                            	include "_maps\obj38.asm"
00014962                            ; ---------------------------------------------------------------------------
00014962                            ; Sprite mappings - shield and invincibility stars
00014962                            ; ---------------------------------------------------------------------------
00014962 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014966 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
0001496A 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001496E 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014972 04                         byte_143C2:	dc.b 4
00014973 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014978 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001497D 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014982 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014987 04                         byte_143D7:	dc.b 4
00014988 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001498D E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014992 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014997 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
0001499C 04                         byte_143EC:	dc.b 4
0001499D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149A2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149A7 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149AC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149B1 04                         byte_14401:	dc.b 4
000149B2 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149B7 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149BC 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149C1 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149C6 04                         byte_14416:	dc.b 4
000149C7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149CC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149D1 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000149D6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149DB 04                         byte_1442B:	dc.b 4
000149DC E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000149E1 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000149E6 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000149EB 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000149F0 04                         byte_14440:	dc.b 4
000149F1 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000149F6 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000149FB 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A00 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A06 00                         		even
00014A06 00                         		even
00014A06                            
00014A06                            Ani_obj4A:
00014A06                            	include "_anim\obj4A.asm"
00014A06                            ; ---------------------------------------------------------------------------
00014A06                            ; Animation script - special stage entry effect from beta
00014A06                            ; ---------------------------------------------------------------------------
00014A06 0000                       		dc.w byte_14458-Ani_obj4A
00014A08 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A1C                            		even
00014A1C                            		even
00014A1C                            
00014A1C                            ; ---------------------------------------------------------------------------
00014A1C                            ; Sprite mappings - special stage entry	from beta
00014A1C                            ; ---------------------------------------------------------------------------
00014A1C                            Map_obj4A:
00014A1C                            	include "_maps\obj4A.asm"
00014A1C                            ; ---------------------------------------------------------------------------
00014A1C                            ; Sprite mappings - special stage entry	from beta
00014A1C                            ; ---------------------------------------------------------------------------
00014A1C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A20 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A24 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A28 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A2C 03                         byte_1447C:	dc.b 3
00014A2D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A32 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A37 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A3C 03                         byte_1448C:	dc.b 3
00014A3D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014A42 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014A47 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014A4C 05                         byte_1449C:	dc.b 5
00014A4D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014A52 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014A57 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014A5C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014A61 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014A66 09                         byte_144B6:	dc.b 9
00014A67 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014A6C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014A71 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014A76 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014A7B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014A80 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014A85 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014A8A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014A8F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014A94 12                         byte_144E4:	dc.b $12
00014A95 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014A9A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014A9F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014AA4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014AA9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014AAE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014AB3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014AB8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014ABD 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014AC2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014AC7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014ACC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014AD1 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014AD6 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014ADB 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014AE0 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014AE5 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014AEA F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014AEF 11                         byte_1453F:	dc.b $11
00014AF0 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014AF5 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014AFA 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014AFF 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B04 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B09 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B0E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B13 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B18 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B1D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B22 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B27 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B2C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B31 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B36 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B3B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014B40 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014B45 09                         byte_14595:	dc.b 9
00014B46 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014B4B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014B50 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014B55 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014B5A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014B5F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014B64 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014B69 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014B6E 04                         		dc.b 4
00014B6F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014B74                            		even
00014B74                            		even
00014B74                            
00014B74                            Ani_obj08:
00014B74                            	include "_anim\obj08.asm"
00014B74                            ; ---------------------------------------------------------------------------
00014B74                            ; Animation script - water splash (LZ)
00014B74                            ; ---------------------------------------------------------------------------
00014B74 0000                       		dc.w byte_145C6-Ani_obj08
00014B76 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014B7C                            		even
00014B7C                            		even
00014B7C                            
00014B7C                            ; ---------------------------------------------------------------------------
00014B7C                            ; Sprite mappings - water splash (LZ)
00014B7C                            ; ---------------------------------------------------------------------------
00014B7C                            Map_obj08:
00014B7C                            	include "_maps\obj08.asm"
00014B7C                            ; ---------------------------------------------------------------------------
00014B7C                            ; Sprite mappings - water splash (LZ)
00014B7C                            ; ---------------------------------------------------------------------------
00014B7C 0000                       		dc.w byte_145D2-Map_obj08
00014B7E 0000                       		dc.w byte_145DD-Map_obj08
00014B80 0000                       		dc.w byte_145E8-Map_obj08
00014B82 02                         byte_145D2:	dc.b 2
00014B83 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014B88 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014B8D 02                         byte_145DD:	dc.b 2
00014B8E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014B93 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014B98 01                         byte_145E8:	dc.b 1
00014B99 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014B9E                            		even
00014B9E                            		even
00014B9E                            
00014B9E                            ; ---------------------------------------------------------------------------
00014B9E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014B9E                            ; ---------------------------------------------------------------------------
00014B9E                            
00014B9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B9E                            
00014B9E                            
00014B9E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014B9E 0828 0003 0022             		btst	#3,$22(a0)
00014BA4 6700                       		beq.s	loc_14602
00014BA6 7000                       		moveq	#0,d0
00014BA8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BAC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BB0 4E75                       		rts	
00014BB2                            ; ===========================================================================
00014BB2                            
00014BB2                            loc_14602:
00014BB2 7003                       		moveq	#3,d0
00014BB4 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BB8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BBC 1028 0026                  		move.b	$26(a0),d0
00014BC0 0600 0020                  		addi.b	#$20,d0
00014BC4 6A00                       		bpl.s	loc_14624
00014BC6 1028 0026                  		move.b	$26(a0),d0
00014BCA 6A00                       		bpl.s	loc_1461E
00014BCC 5300                       		subq.b	#1,d0
00014BCE                            
00014BCE                            loc_1461E:
00014BCE 0600 0020                  		addi.b	#$20,d0
00014BD2 6000                       		bra.s	loc_14630
00014BD4                            ; ===========================================================================
00014BD4                            
00014BD4                            loc_14624:
00014BD4 1028 0026                  		move.b	$26(a0),d0
00014BD8 6A00                       		bpl.s	loc_1462C
00014BDA 5200                       		addq.b	#1,d0
00014BDC                            
00014BDC                            loc_1462C:
00014BDC 0600 001F                  		addi.b	#$1F,d0
00014BE0                            
00014BE0                            loc_14630:
00014BE0 0200 00C0                  		andi.b	#$C0,d0
00014BE4 0C00 0040                  		cmpi.b	#$40,d0
00014BE8 6700 0000                  		beq.w	Sonic_WalkVertL
00014BEC 0C00 0080                  		cmpi.b	#$80,d0
00014BF0 6700 0000                  		beq.w	Sonic_WalkCeiling
00014BF4 0C00 00C0                  		cmpi.b	#$C0,d0
00014BF8 6700 0000                  		beq.w	Sonic_WalkVertR
00014BFC 3428 000C                  		move.w	$C(a0),d2
00014C00 3628 0008                  		move.w	8(a0),d3
00014C04 7000                       		moveq	#0,d0
00014C06 1028 0016                  		move.b	$16(a0),d0
00014C0A 4880                       		ext.w	d0
00014C0C D440                       		add.w	d0,d2
00014C0E 1028 0017                  		move.b	$17(a0),d0
00014C12 4880                       		ext.w	d0
00014C14 D640                       		add.w	d0,d3
00014C16 49F8 F768                  		lea	($FFFFF768).w,a4
00014C1A 367C 0010                  		movea.w	#$10,a3
00014C1E 3C3C 0000                  		move.w	#0,d6
00014C22 7A0D                       		moveq	#$D,d5
00014C24 6100 0000                  		bsr.w	FindFloor
00014C28 3F01                       		move.w	d1,-(sp)
00014C2A 3428 000C                  		move.w	$C(a0),d2
00014C2E 3628 0008                  		move.w	8(a0),d3
00014C32 7000                       		moveq	#0,d0
00014C34 1028 0016                  		move.b	$16(a0),d0
00014C38 4880                       		ext.w	d0
00014C3A D440                       		add.w	d0,d2
00014C3C 1028 0017                  		move.b	$17(a0),d0
00014C40 4880                       		ext.w	d0
00014C42 4440                       		neg.w	d0
00014C44 D640                       		add.w	d0,d3
00014C46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C4A 367C 0010                  		movea.w	#$10,a3
00014C4E 3C3C 0000                  		move.w	#0,d6
00014C52 7A0D                       		moveq	#$D,d5
00014C54 6100 0000                  		bsr.w	FindFloor
00014C58 301F                       		move.w	(sp)+,d0
00014C5A 6100 0000                  		bsr.w	Sonic_Angle
00014C5E 4A41                       		tst.w	d1
00014C60 6700                       		beq.s	locret_146BE
00014C62 6A00                       		bpl.s	loc_146C0
00014C64 0C41 FFF2                  		cmpi.w	#-$E,d1
00014C68 6D00                       		blt.s	locret_146E6
00014C6A D368 000C                  		add.w	d1,$C(a0)
00014C6E                            
00014C6E                            locret_146BE:
00014C6E 4E75                       		rts	
00014C70                            ; ===========================================================================
00014C70                            
00014C70                            loc_146C0:
00014C70 0C41 000E                  		cmpi.w	#$E,d1
00014C74 6E00                       		bgt.s	loc_146CC
00014C76                            
00014C76                            loc_146C6:
00014C76 D368 000C                  		add.w	d1,$C(a0)
00014C7A 4E75                       		rts	
00014C7C                            ; ===========================================================================
00014C7C                            
00014C7C                            loc_146CC:
00014C7C 4A28 0038                  		tst.b	$38(a0)
00014C80 66F4                       		bne.s	loc_146C6
00014C82 08E8 0001 0022             		bset	#1,$22(a0)
00014C88 08A8 0005 0022             		bclr	#5,$22(a0)
00014C8E 117C 0001 001D             		move.b	#1,$1D(a0)
00014C94 4E75                       		rts	
00014C96                            ; ===========================================================================
00014C96                            
00014C96                            locret_146E6:
00014C96 4E75                       		rts	
00014C98                            ; End of function Sonic_AnglePos
00014C98                            
00014C98                            ; ===========================================================================
00014C98 2428 0008                  		move.l	8(a0),d2
00014C9C 3028 0010                  		move.w	$10(a0),d0
00014CA0 48C0                       		ext.l	d0
00014CA2 E180                       		asl.l	#8,d0
00014CA4 9480                       		sub.l	d0,d2
00014CA6 2142 0008                  		move.l	d2,8(a0)
00014CAA 303C 0038                  		move.w	#$38,d0
00014CAE 48C0                       		ext.l	d0
00014CB0 E180                       		asl.l	#8,d0
00014CB2 9680                       		sub.l	d0,d3
00014CB4 2143 000C                  		move.l	d3,$C(a0)
00014CB8 4E75                       		rts	
00014CBA                            ; ===========================================================================
00014CBA                            
00014CBA                            locret_1470A:
00014CBA 4E75                       		rts	
00014CBC                            ; ===========================================================================
00014CBC 2628 000C                  		move.l	$C(a0),d3
00014CC0 3028 0012                  		move.w	$12(a0),d0
00014CC4 0440 0038                  		subi.w	#$38,d0
00014CC8 3140 0012                  		move.w	d0,$12(a0)
00014CCC 48C0                       		ext.l	d0
00014CCE E180                       		asl.l	#8,d0
00014CD0 9680                       		sub.l	d0,d3
00014CD2 2143 000C                  		move.l	d3,$C(a0)
00014CD6 4E75                       		rts	
00014CD8 4E75                       		rts	
00014CDA                            ; ===========================================================================
00014CDA 2428 0008                  		move.l	8(a0),d2
00014CDE 2628 000C                  		move.l	$C(a0),d3
00014CE2 3028 0010                  		move.w	$10(a0),d0
00014CE6 48C0                       		ext.l	d0
00014CE8 E180                       		asl.l	#8,d0
00014CEA 9480                       		sub.l	d0,d2
00014CEC 3028 0012                  		move.w	$12(a0),d0
00014CF0 48C0                       		ext.l	d0
00014CF2 E180                       		asl.l	#8,d0
00014CF4 9680                       		sub.l	d0,d3
00014CF6 2142 0008                  		move.l	d2,8(a0)
00014CFA 2143 000C                  		move.l	d3,$C(a0)
00014CFE 4E75                       		rts	
00014D00                            
00014D00                            ; ---------------------------------------------------------------------------
00014D00                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D00                            ; ---------------------------------------------------------------------------
00014D00                            
00014D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D00                            
00014D00                            
00014D00                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D00 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D04 B240                       		cmp.w	d0,d1
00014D06 6F00                       		ble.s	loc_1475E
00014D08 1438 F768                  		move.b	($FFFFF768).w,d2
00014D0C 3200                       		move.w	d0,d1
00014D0E                            
00014D0E                            loc_1475E:
00014D0E 0802 0000                  		btst	#0,d2
00014D12 6600                       		bne.s	loc_1476A
00014D14 1142 0026                  		move.b	d2,$26(a0)
00014D18 4E75                       		rts	
00014D1A                            ; ===========================================================================
00014D1A                            
00014D1A                            loc_1476A:
00014D1A 1428 0026                  		move.b	$26(a0),d2
00014D1E 0602 0020                  		addi.b	#$20,d2
00014D22 0202 00C0                  		andi.b	#$C0,d2
00014D26 1142 0026                  		move.b	d2,$26(a0)
00014D2A 4E75                       		rts	
00014D2C                            ; End of function Sonic_Angle
00014D2C                            
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D2C                            ; ---------------------------------------------------------------------------
00014D2C                            
00014D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D2C                            
00014D2C                            
00014D2C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D2C 3428 000C                  		move.w	$C(a0),d2
00014D30 3628 0008                  		move.w	8(a0),d3
00014D34 7000                       		moveq	#0,d0
00014D36 1028 0017                  		move.b	$17(a0),d0
00014D3A 4880                       		ext.w	d0
00014D3C 4440                       		neg.w	d0
00014D3E D440                       		add.w	d0,d2
00014D40 1028 0016                  		move.b	$16(a0),d0
00014D44 4880                       		ext.w	d0
00014D46 D640                       		add.w	d0,d3
00014D48 49F8 F768                  		lea	($FFFFF768).w,a4
00014D4C 367C 0010                  		movea.w	#$10,a3
00014D50 3C3C 0000                  		move.w	#0,d6
00014D54 7A0D                       		moveq	#$D,d5
00014D56 6100 0000                  		bsr.w	FindWall
00014D5A 3F01                       		move.w	d1,-(sp)
00014D5C 3428 000C                  		move.w	$C(a0),d2
00014D60 3628 0008                  		move.w	8(a0),d3
00014D64 7000                       		moveq	#0,d0
00014D66 1028 0017                  		move.b	$17(a0),d0
00014D6A 4880                       		ext.w	d0
00014D6C D440                       		add.w	d0,d2
00014D6E 1028 0016                  		move.b	$16(a0),d0
00014D72 4880                       		ext.w	d0
00014D74 D640                       		add.w	d0,d3
00014D76 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D7A 367C 0010                  		movea.w	#$10,a3
00014D7E 3C3C 0000                  		move.w	#0,d6
00014D82 7A0D                       		moveq	#$D,d5
00014D84 6100 0000                  		bsr.w	FindWall
00014D88 301F                       		move.w	(sp)+,d0
00014D8A 6100 FF74                  		bsr.w	Sonic_Angle
00014D8E 4A41                       		tst.w	d1
00014D90 6700                       		beq.s	locret_147F0
00014D92 6A00                       		bpl.s	loc_147F2
00014D94 0C41 FFF2                  		cmpi.w	#-$E,d1
00014D98 6D00 FF20                  		blt.w	locret_1470A
00014D9C D368 0008                  		add.w	d1,8(a0)
00014DA0                            
00014DA0                            locret_147F0:
00014DA0 4E75                       		rts	
00014DA2                            ; ===========================================================================
00014DA2                            
00014DA2                            loc_147F2:
00014DA2 0C41 000E                  		cmpi.w	#$E,d1
00014DA6 6E00                       		bgt.s	loc_147FE
00014DA8                            
00014DA8                            loc_147F8:
00014DA8 D368 0008                  		add.w	d1,8(a0)
00014DAC 4E75                       		rts	
00014DAE                            ; ===========================================================================
00014DAE                            
00014DAE                            loc_147FE:
00014DAE 4A28 0038                  		tst.b	$38(a0)
00014DB2 66F4                       		bne.s	loc_147F8
00014DB4 08E8 0001 0022             		bset	#1,$22(a0)
00014DBA 08A8 0005 0022             		bclr	#5,$22(a0)
00014DC0 117C 0001 001D             		move.b	#1,$1D(a0)
00014DC6 4E75                       		rts	
00014DC8                            ; End of function Sonic_WalkVertR
00014DC8                            
00014DC8                            ; ---------------------------------------------------------------------------
00014DC8                            ; Subroutine allowing Sonic to walk upside-down
00014DC8                            ; ---------------------------------------------------------------------------
00014DC8                            
00014DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DC8                            
00014DC8                            
00014DC8                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014DC8 3428 000C                  		move.w	$C(a0),d2
00014DCC 3628 0008                  		move.w	8(a0),d3
00014DD0 7000                       		moveq	#0,d0
00014DD2 1028 0016                  		move.b	$16(a0),d0
00014DD6 4880                       		ext.w	d0
00014DD8 9440                       		sub.w	d0,d2
00014DDA 0A42 000F                  		eori.w	#$F,d2
00014DDE 1028 0017                  		move.b	$17(a0),d0
00014DE2 4880                       		ext.w	d0
00014DE4 D640                       		add.w	d0,d3
00014DE6 49F8 F768                  		lea	($FFFFF768).w,a4
00014DEA 367C FFF0                  		movea.w	#-$10,a3
00014DEE 3C3C 1000                  		move.w	#$1000,d6
00014DF2 7A0D                       		moveq	#$D,d5
00014DF4 6100 0000                  		bsr.w	FindFloor
00014DF8 3F01                       		move.w	d1,-(sp)
00014DFA 3428 000C                  		move.w	$C(a0),d2
00014DFE 3628 0008                  		move.w	8(a0),d3
00014E02 7000                       		moveq	#0,d0
00014E04 1028 0016                  		move.b	$16(a0),d0
00014E08 4880                       		ext.w	d0
00014E0A 9440                       		sub.w	d0,d2
00014E0C 0A42 000F                  		eori.w	#$F,d2
00014E10 1028 0017                  		move.b	$17(a0),d0
00014E14 4880                       		ext.w	d0
00014E16 9640                       		sub.w	d0,d3
00014E18 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E1C 367C FFF0                  		movea.w	#-$10,a3
00014E20 3C3C 1000                  		move.w	#$1000,d6
00014E24 7A0D                       		moveq	#$D,d5
00014E26 6100 0000                  		bsr.w	FindFloor
00014E2A 301F                       		move.w	(sp)+,d0
00014E2C 6100 FED2                  		bsr.w	Sonic_Angle
00014E30 4A41                       		tst.w	d1
00014E32 6700                       		beq.s	locret_14892
00014E34 6A00                       		bpl.s	loc_14894
00014E36 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E3A 6D00 FE5A                  		blt.w	locret_146E6
00014E3E 9368 000C                  		sub.w	d1,$C(a0)
00014E42                            
00014E42                            locret_14892:
00014E42 4E75                       		rts	
00014E44                            ; ===========================================================================
00014E44                            
00014E44                            loc_14894:
00014E44 0C41 000E                  		cmpi.w	#$E,d1
00014E48 6E00                       		bgt.s	loc_148A0
00014E4A                            
00014E4A                            loc_1489A:
00014E4A 9368 000C                  		sub.w	d1,$C(a0)
00014E4E 4E75                       		rts	
00014E50                            ; ===========================================================================
00014E50                            
00014E50                            loc_148A0:
00014E50 4A28 0038                  		tst.b	$38(a0)
00014E54 66F4                       		bne.s	loc_1489A
00014E56 08E8 0001 0022             		bset	#1,$22(a0)
00014E5C 08A8 0005 0022             		bclr	#5,$22(a0)
00014E62 117C 0001 001D             		move.b	#1,$1D(a0)
00014E68 4E75                       		rts	
00014E6A                            ; End of function Sonic_WalkCeiling
00014E6A                            
00014E6A                            ; ---------------------------------------------------------------------------
00014E6A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014E6A                            ; ---------------------------------------------------------------------------
00014E6A                            
00014E6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E6A                            
00014E6A                            
00014E6A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014E6A 3428 000C                  		move.w	$C(a0),d2
00014E6E 3628 0008                  		move.w	8(a0),d3
00014E72 7000                       		moveq	#0,d0
00014E74 1028 0017                  		move.b	$17(a0),d0
00014E78 4880                       		ext.w	d0
00014E7A 9440                       		sub.w	d0,d2
00014E7C 1028 0016                  		move.b	$16(a0),d0
00014E80 4880                       		ext.w	d0
00014E82 9640                       		sub.w	d0,d3
00014E84 0A43 000F                  		eori.w	#$F,d3
00014E88 49F8 F768                  		lea	($FFFFF768).w,a4
00014E8C 367C FFF0                  		movea.w	#-$10,a3
00014E90 3C3C 0800                  		move.w	#$800,d6
00014E94 7A0D                       		moveq	#$D,d5
00014E96 6100 0000                  		bsr.w	FindWall
00014E9A 3F01                       		move.w	d1,-(sp)
00014E9C 3428 000C                  		move.w	$C(a0),d2
00014EA0 3628 0008                  		move.w	8(a0),d3
00014EA4 7000                       		moveq	#0,d0
00014EA6 1028 0017                  		move.b	$17(a0),d0
00014EAA 4880                       		ext.w	d0
00014EAC D440                       		add.w	d0,d2
00014EAE 1028 0016                  		move.b	$16(a0),d0
00014EB2 4880                       		ext.w	d0
00014EB4 9640                       		sub.w	d0,d3
00014EB6 0A43 000F                  		eori.w	#$F,d3
00014EBA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EBE 367C FFF0                  		movea.w	#-$10,a3
00014EC2 3C3C 0800                  		move.w	#$800,d6
00014EC6 7A0D                       		moveq	#$D,d5
00014EC8 6100 0000                  		bsr.w	FindWall
00014ECC 301F                       		move.w	(sp)+,d0
00014ECE 6100 FE30                  		bsr.w	Sonic_Angle
00014ED2 4A41                       		tst.w	d1
00014ED4 6700                       		beq.s	locret_14934
00014ED6 6A00                       		bpl.s	loc_14936
00014ED8 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EDC 6D00 FDDC                  		blt.w	locret_1470A
00014EE0 9368 0008                  		sub.w	d1,8(a0)
00014EE4                            
00014EE4                            locret_14934:
00014EE4 4E75                       		rts	
00014EE6                            ; ===========================================================================
00014EE6                            
00014EE6                            loc_14936:
00014EE6 0C41 000E                  		cmpi.w	#$E,d1
00014EEA 6E00                       		bgt.s	loc_14942
00014EEC                            
00014EEC                            loc_1493C:
00014EEC 9368 0008                  		sub.w	d1,8(a0)
00014EF0 4E75                       		rts	
00014EF2                            ; ===========================================================================
00014EF2                            
00014EF2                            loc_14942:
00014EF2 4A28 0038                  		tst.b	$38(a0)
00014EF6 66F4                       		bne.s	loc_1493C
00014EF8 08E8 0001 0022             		bset	#1,$22(a0)
00014EFE 08A8 0005 0022             		bclr	#5,$22(a0)
00014F04 117C 0001 001D             		move.b	#1,$1D(a0)
00014F0A 4E75                       		rts	
00014F0C                            ; End of function Sonic_WalkVertL
00014F0C                            
00014F0C                            ; ---------------------------------------------------------------------------
00014F0C                            ; Subroutine to	find which tile	the object is standing on
00014F0C                            ; ---------------------------------------------------------------------------
00014F0C                            
00014F0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F0C                            
00014F0C                            
00014F0C                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F0C 3002                       		move.w	d2,d0
00014F0E E248                       		lsr.w	#1,d0
00014F10 0240 0380                  		andi.w	#$380,d0
00014F14 3203                       		move.w	d3,d1
00014F16 E049                       		lsr.w	#8,d1
00014F18 0241 007F                  		andi.w	#$7F,d1
00014F1C D041                       		add.w	d1,d0
00014F1E 72FF                       		moveq	#-1,d1
00014F20 43F8 A400                  		lea	($FFFFA400).w,a1
00014F24 1231 0000                  		move.b	(a1,d0.w),d1
00014F28 6700                       		beq.s	loc_14996
00014F2A 6B00                       		bmi.s	loc_1499A
00014F2C 5301                       		subq.b	#1,d1
00014F2E 4881                       		ext.w	d1
00014F30 EE59                       		ror.w	#7,d1
00014F32 3002                       		move.w	d2,d0
00014F34 D040                       		add.w	d0,d0
00014F36 0240 01E0                  		andi.w	#$1E0,d0
00014F3A D240                       		add.w	d0,d1
00014F3C 3003                       		move.w	d3,d0
00014F3E E648                       		lsr.w	#3,d0
00014F40 0240 001E                  		andi.w	#$1E,d0
00014F44 D240                       		add.w	d0,d1
00014F46                            
00014F46                            loc_14996:
00014F46 2241                       		movea.l	d1,a1
00014F48 4E75                       		rts	
00014F4A                            ; ===========================================================================
00014F4A                            
00014F4A                            loc_1499A:
00014F4A 0241 007F                  		andi.w	#$7F,d1
00014F4E 0828 0006 0001             		btst	#6,1(a0)
00014F54 6700                       		beq.s	loc_149B2
00014F56 5241                       		addq.w	#1,d1
00014F58 0C41 0029                  		cmpi.w	#$29,d1
00014F5C 6600                       		bne.s	loc_149B2
00014F5E 323C 0051                  		move.w	#$51,d1
00014F62                            
00014F62                            loc_149B2:
00014F62 5301                       		subq.b	#1,d1
00014F64 EE59                       		ror.w	#7,d1
00014F66 3002                       		move.w	d2,d0
00014F68 D040                       		add.w	d0,d0
00014F6A 0240 01E0                  		andi.w	#$1E0,d0
00014F6E D240                       		add.w	d0,d1
00014F70 3003                       		move.w	d3,d0
00014F72 E648                       		lsr.w	#3,d0
00014F74 0240 001E                  		andi.w	#$1E,d0
00014F78 D240                       		add.w	d0,d1
00014F7A 2241                       		movea.l	d1,a1
00014F7C 4E75                       		rts	
00014F7E                            ; End of function Floor_ChkTile
00014F7E                            
00014F7E                            
00014F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F7E                            
00014F7E                            
00014F7E                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014F7E 618C                       		bsr.s	Floor_ChkTile
00014F80 3011                       		move.w	(a1),d0
00014F82 3800                       		move.w	d0,d4
00014F84 0240 07FF                  		andi.w	#$7FF,d0
00014F88 6700                       		beq.s	loc_149DE
00014F8A 0B04                       		btst	d5,d4
00014F8C 6600                       		bne.s	loc_149EC
00014F8E                            
00014F8E                            loc_149DE:
00014F8E D44B                       		add.w	a3,d2
00014F90 6100 0000                  		bsr.w	FindFloor2
00014F94 944B                       		sub.w	a3,d2
00014F96 0641 0010                  		addi.w	#$10,d1
00014F9A 4E75                       		rts	
00014F9C                            ; ===========================================================================
00014F9C                            
00014F9C                            loc_149EC:
00014F9C 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014FA0 1032 0000                  		move.b	(a2,d0.w),d0
00014FA4 0240 00FF                  		andi.w	#$FF,d0
00014FA8 67E4                       		beq.s	loc_149DE
00014FAA 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FB0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FB4 E948                       		lsl.w	#4,d0
00014FB6 3203                       		move.w	d3,d1
00014FB8 0804 000B                  		btst	#$B,d4
00014FBC 6700                       		beq.s	loc_14A12
00014FBE 4641                       		not.w	d1
00014FC0 4414                       		neg.b	(a4)
00014FC2                            
00014FC2                            loc_14A12:
00014FC2 0804 000C                  		btst	#$C,d4
00014FC6 6700                       		beq.s	loc_14A22
00014FC8 0614 0040                  		addi.b	#$40,(a4)
00014FCC 4414                       		neg.b	(a4)
00014FCE 0414 0040                  		subi.b	#$40,(a4)
00014FD2                            
00014FD2                            loc_14A22:
00014FD2 0241 000F                  		andi.w	#$F,d1
00014FD6 D240                       		add.w	d0,d1
00014FD8 45F9 0000 0000             		lea	(CollArray1).l,a2
00014FDE 1032 1000                  		move.b	(a2,d1.w),d0
00014FE2 4880                       		ext.w	d0
00014FE4 BD44                       		eor.w	d6,d4
00014FE6 0804 000C                  		btst	#$C,d4
00014FEA 6700                       		beq.s	loc_14A3E
00014FEC 4440                       		neg.w	d0
00014FEE                            
00014FEE                            loc_14A3E:
00014FEE 4A40                       		tst.w	d0
00014FF0 679C                       		beq.s	loc_149DE
00014FF2 6B00                       		bmi.s	loc_14A5A
00014FF4 0C00 0010                  		cmpi.b	#$10,d0
00014FF8 6700                       		beq.s	loc_14A66
00014FFA 3202                       		move.w	d2,d1
00014FFC 0241 000F                  		andi.w	#$F,d1
00015000 D041                       		add.w	d1,d0
00015002 323C 000F                  		move.w	#$F,d1
00015006 9240                       		sub.w	d0,d1
00015008 4E75                       		rts	
0001500A                            ; ===========================================================================
0001500A                            
0001500A                            loc_14A5A:
0001500A 3202                       		move.w	d2,d1
0001500C 0241 000F                  		andi.w	#$F,d1
00015010 D041                       		add.w	d1,d0
00015012 6A00 FF7A                  		bpl.w	loc_149DE
00015016                            
00015016                            loc_14A66:
00015016 944B                       		sub.w	a3,d2
00015018 6100 0000                  		bsr.w	FindFloor2
0001501C D44B                       		add.w	a3,d2
0001501E 0441 0010                  		subi.w	#$10,d1
00015022 4E75                       		rts	
00015024                            ; End of function FindFloor
00015024                            
00015024                            
00015024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015024                            
00015024                            
00015024                            FindFloor2:				; XREF: FindFloor
00015024 6100 FEE6                  		bsr.w	Floor_ChkTile
00015028 3011                       		move.w	(a1),d0
0001502A 3800                       		move.w	d0,d4
0001502C 0240 07FF                  		andi.w	#$7FF,d0
00015030 6700                       		beq.s	loc_14A86
00015032 0B04                       		btst	d5,d4
00015034 6600                       		bne.s	loc_14A94
00015036                            
00015036                            loc_14A86:
00015036 323C 000F                  		move.w	#$F,d1
0001503A 3002                       		move.w	d2,d0
0001503C 0240 000F                  		andi.w	#$F,d0
00015040 9240                       		sub.w	d0,d1
00015042 4E75                       		rts	
00015044                            ; ===========================================================================
00015044                            
00015044                            loc_14A94:
00015044 2478 F796                  		movea.l	($FFFFF796).w,a2
00015048 1032 0000                  		move.b	(a2,d0.w),d0
0001504C 0240 00FF                  		andi.w	#$FF,d0
00015050 67E4                       		beq.s	loc_14A86
00015052 45F9 0000 0000             		lea	(AngleMap).l,a2
00015058 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001505C E948                       		lsl.w	#4,d0
0001505E 3203                       		move.w	d3,d1
00015060 0804 000B                  		btst	#$B,d4
00015064 6700                       		beq.s	loc_14ABA
00015066 4641                       		not.w	d1
00015068 4414                       		neg.b	(a4)
0001506A                            
0001506A                            loc_14ABA:
0001506A 0804 000C                  		btst	#$C,d4
0001506E 6700                       		beq.s	loc_14ACA
00015070 0614 0040                  		addi.b	#$40,(a4)
00015074 4414                       		neg.b	(a4)
00015076 0414 0040                  		subi.b	#$40,(a4)
0001507A                            
0001507A                            loc_14ACA:
0001507A 0241 000F                  		andi.w	#$F,d1
0001507E D240                       		add.w	d0,d1
00015080 45F9 0000 0000             		lea	(CollArray1).l,a2
00015086 1032 1000                  		move.b	(a2,d1.w),d0
0001508A 4880                       		ext.w	d0
0001508C BD44                       		eor.w	d6,d4
0001508E 0804 000C                  		btst	#$C,d4
00015092 6700                       		beq.s	loc_14AE6
00015094 4440                       		neg.w	d0
00015096                            
00015096                            loc_14AE6:
00015096 4A40                       		tst.w	d0
00015098 679C                       		beq.s	loc_14A86
0001509A 6B00                       		bmi.s	loc_14AFC
0001509C 3202                       		move.w	d2,d1
0001509E 0241 000F                  		andi.w	#$F,d1
000150A2 D041                       		add.w	d1,d0
000150A4 323C 000F                  		move.w	#$F,d1
000150A8 9240                       		sub.w	d0,d1
000150AA 4E75                       		rts	
000150AC                            ; ===========================================================================
000150AC                            
000150AC                            loc_14AFC:
000150AC 3202                       		move.w	d2,d1
000150AE 0241 000F                  		andi.w	#$F,d1
000150B2 D041                       		add.w	d1,d0
000150B4 6A00 FF80                  		bpl.w	loc_14A86
000150B8 4641                       		not.w	d1
000150BA 4E75                       		rts	
000150BC                            ; End of function FindFloor2
000150BC                            
000150BC                            
000150BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150BC                            
000150BC                            
000150BC                            FindWall:				; XREF: Sonic_WalkVertR; et al
000150BC 6100 FE4E                  		bsr.w	Floor_ChkTile
000150C0 3011                       		move.w	(a1),d0
000150C2 3800                       		move.w	d0,d4
000150C4 0240 07FF                  		andi.w	#$7FF,d0
000150C8 6700                       		beq.s	loc_14B1E
000150CA 0B04                       		btst	d5,d4
000150CC 6600                       		bne.s	loc_14B2C
000150CE                            
000150CE                            loc_14B1E:
000150CE D64B                       		add.w	a3,d3
000150D0 6100 0000                  		bsr.w	FindWall2
000150D4 964B                       		sub.w	a3,d3
000150D6 0641 0010                  		addi.w	#$10,d1
000150DA 4E75                       		rts	
000150DC                            ; ===========================================================================
000150DC                            
000150DC                            loc_14B2C:
000150DC 2478 F796                  		movea.l	($FFFFF796).w,a2
000150E0 1032 0000                  		move.b	(a2,d0.w),d0
000150E4 0240 00FF                  		andi.w	#$FF,d0
000150E8 67E4                       		beq.s	loc_14B1E
000150EA 45F9 0000 0000             		lea	(AngleMap).l,a2
000150F0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150F4 E948                       		lsl.w	#4,d0
000150F6 3202                       		move.w	d2,d1
000150F8 0804 000C                  		btst	#$C,d4
000150FC 6700                       		beq.s	loc_14B5A
000150FE 4641                       		not.w	d1
00015100 0614 0040                  		addi.b	#$40,(a4)
00015104 4414                       		neg.b	(a4)
00015106 0414 0040                  		subi.b	#$40,(a4)
0001510A                            
0001510A                            loc_14B5A:
0001510A 0804 000B                  		btst	#$B,d4
0001510E 6700                       		beq.s	loc_14B62
00015110 4414                       		neg.b	(a4)
00015112                            
00015112                            loc_14B62:
00015112 0241 000F                  		andi.w	#$F,d1
00015116 D240                       		add.w	d0,d1
00015118 45F9 0000 0000             		lea	(CollArray2).l,a2
0001511E 1032 1000                  		move.b	(a2,d1.w),d0
00015122 4880                       		ext.w	d0
00015124 BD44                       		eor.w	d6,d4
00015126 0804 000B                  		btst	#$B,d4
0001512A 6700                       		beq.s	loc_14B7E
0001512C 4440                       		neg.w	d0
0001512E                            
0001512E                            loc_14B7E:
0001512E 4A40                       		tst.w	d0
00015130 679C                       		beq.s	loc_14B1E
00015132 6B00                       		bmi.s	loc_14B9A
00015134 0C00 0010                  		cmpi.b	#$10,d0
00015138 6700                       		beq.s	loc_14BA6
0001513A 3203                       		move.w	d3,d1
0001513C 0241 000F                  		andi.w	#$F,d1
00015140 D041                       		add.w	d1,d0
00015142 323C 000F                  		move.w	#$F,d1
00015146 9240                       		sub.w	d0,d1
00015148 4E75                       		rts	
0001514A                            ; ===========================================================================
0001514A                            
0001514A                            loc_14B9A:
0001514A 3203                       		move.w	d3,d1
0001514C 0241 000F                  		andi.w	#$F,d1
00015150 D041                       		add.w	d1,d0
00015152 6A00 FF7A                  		bpl.w	loc_14B1E
00015156                            
00015156                            loc_14BA6:
00015156 964B                       		sub.w	a3,d3
00015158 6100 0000                  		bsr.w	FindWall2
0001515C D64B                       		add.w	a3,d3
0001515E 0441 0010                  		subi.w	#$10,d1
00015162 4E75                       		rts	
00015164                            ; End of function FindWall
00015164                            
00015164                            
00015164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015164                            
00015164                            
00015164                            FindWall2:				; XREF: FindWall
00015164 6100 FDA6                  		bsr.w	Floor_ChkTile
00015168 3011                       		move.w	(a1),d0
0001516A 3800                       		move.w	d0,d4
0001516C 0240 07FF                  		andi.w	#$7FF,d0
00015170 6700                       		beq.s	loc_14BC6
00015172 0B04                       		btst	d5,d4
00015174 6600                       		bne.s	loc_14BD4
00015176                            
00015176                            loc_14BC6:
00015176 323C 000F                  		move.w	#$F,d1
0001517A 3003                       		move.w	d3,d0
0001517C 0240 000F                  		andi.w	#$F,d0
00015180 9240                       		sub.w	d0,d1
00015182 4E75                       		rts	
00015184                            ; ===========================================================================
00015184                            
00015184                            loc_14BD4:
00015184 2478 F796                  		movea.l	($FFFFF796).w,a2
00015188 1032 0000                  		move.b	(a2,d0.w),d0
0001518C 0240 00FF                  		andi.w	#$FF,d0
00015190 67E4                       		beq.s	loc_14BC6
00015192 45F9 0000 0000             		lea	(AngleMap).l,a2
00015198 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001519C E948                       		lsl.w	#4,d0
0001519E 3202                       		move.w	d2,d1
000151A0 0804 000C                  		btst	#$C,d4
000151A4 6700                       		beq.s	loc_14C02
000151A6 4641                       		not.w	d1
000151A8 0614 0040                  		addi.b	#$40,(a4)
000151AC 4414                       		neg.b	(a4)
000151AE 0414 0040                  		subi.b	#$40,(a4)
000151B2                            
000151B2                            loc_14C02:
000151B2 0804 000B                  		btst	#$B,d4
000151B6 6700                       		beq.s	loc_14C0A
000151B8 4414                       		neg.b	(a4)
000151BA                            
000151BA                            loc_14C0A:
000151BA 0241 000F                  		andi.w	#$F,d1
000151BE D240                       		add.w	d0,d1
000151C0 45F9 0000 0000             		lea	(CollArray2).l,a2
000151C6 1032 1000                  		move.b	(a2,d1.w),d0
000151CA 4880                       		ext.w	d0
000151CC BD44                       		eor.w	d6,d4
000151CE 0804 000B                  		btst	#$B,d4
000151D2 6700                       		beq.s	loc_14C26
000151D4 4440                       		neg.w	d0
000151D6                            
000151D6                            loc_14C26:
000151D6 4A40                       		tst.w	d0
000151D8 679C                       		beq.s	loc_14BC6
000151DA 6B00                       		bmi.s	loc_14C3C
000151DC 3203                       		move.w	d3,d1
000151DE 0241 000F                  		andi.w	#$F,d1
000151E2 D041                       		add.w	d1,d0
000151E4 323C 000F                  		move.w	#$F,d1
000151E8 9240                       		sub.w	d0,d1
000151EA 4E75                       		rts	
000151EC                            ; ===========================================================================
000151EC                            
000151EC                            loc_14C3C:
000151EC 3203                       		move.w	d3,d1
000151EE 0241 000F                  		andi.w	#$F,d1
000151F2 D041                       		add.w	d1,d0
000151F4 6A00 FF80                  		bpl.w	loc_14BC6
000151F8 4641                       		not.w	d1
000151FA 4E75                       		rts	
000151FC                            ; End of function FindWall2
000151FC                            
000151FC                            ; ---------------------------------------------------------------------------
000151FC                            ; Unused floor/wall subroutine - logs something	to do with collision
000151FC                            ; ---------------------------------------------------------------------------
000151FC                            
000151FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151FC                            
000151FC                            
000151FC                            FloorLog_Unk:				; XREF: Level
000151FC 4E75                       		rts	
000151FE                            
000151FE 43F9 0000 0000             		lea	(CollArray1).l,a1
00015204 45F9 0000 0000             		lea	(CollArray1).l,a2
0001520A 363C 00FF                  		move.w	#$FF,d3
0001520E                            
0001520E                            loc_14C5E:
0001520E 7A10                       		moveq	#$10,d5
00015210 343C 000F                  		move.w	#$F,d2
00015214                            
00015214                            loc_14C64:
00015214 7800                       		moveq	#0,d4
00015216 323C 000F                  		move.w	#$F,d1
0001521A                            
0001521A                            loc_14C6A:
0001521A 3019                       		move.w	(a1)+,d0
0001521C EAA8                       		lsr.l	d5,d0
0001521E D944                       		addx.w	d4,d4
00015220 51C9 FFF8                  		dbf	d1,loc_14C6A
00015224                            
00015224 34C4                       		move.w	d4,(a2)+
00015226 92FC 0020                  		suba.w	#$20,a1
0001522A 5345                       		subq.w	#1,d5
0001522C 51CA FFE6                  		dbf	d2,loc_14C64
00015230                            
00015230 D2FC 0020                  		adda.w	#$20,a1
00015234 51CB FFD8                  		dbf	d3,loc_14C5E
00015238                            
00015238 43F9 0000 0000             		lea	(CollArray1).l,a1
0001523E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015244 6100                       		bsr.s	FloorLog_Unk2
00015246 43F9 0000 0000             		lea	(CollArray1).l,a1
0001524C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015252                            
00015252                            ; End of function FloorLog_Unk
00015252                            
00015252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015252                            
00015252                            
00015252                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015252 363C 0FFF                  		move.w	#$FFF,d3
00015256                            
00015256                            loc_14CA6:
00015256 7400                       		moveq	#0,d2
00015258 323C 000F                  		move.w	#$F,d1
0001525C 3019                       		move.w	(a1)+,d0
0001525E 6700                       		beq.s	loc_14CD4
00015260 6B00                       		bmi.s	loc_14CBE
00015262                            
00015262                            loc_14CB2:
00015262 E248                       		lsr.w	#1,d0
00015264 6400                       		bcc.s	loc_14CB8
00015266 5202                       		addq.b	#1,d2
00015268                            
00015268                            loc_14CB8:
00015268 51C9 FFF8                  		dbf	d1,loc_14CB2
0001526C                            
0001526C 6000                       		bra.s	loc_14CD6
0001526E                            ; ===========================================================================
0001526E                            
0001526E                            loc_14CBE:
0001526E 0C40 FFFF                  		cmpi.w	#-1,d0
00015272 6700                       		beq.s	loc_14CD0
00015274                            
00015274                            loc_14CC4:
00015274 E348                       		lsl.w	#1,d0
00015276 6400                       		bcc.s	loc_14CCA
00015278 5302                       		subq.b	#1,d2
0001527A                            
0001527A                            loc_14CCA:
0001527A 51C9 FFF8                  		dbf	d1,loc_14CC4
0001527E                            
0001527E 6000                       		bra.s	loc_14CD6
00015280                            ; ===========================================================================
00015280                            
00015280                            loc_14CD0:
00015280 303C 0010                  		move.w	#$10,d0
00015284                            
00015284                            loc_14CD4:
00015284 3400                       		move.w	d0,d2
00015286                            
00015286                            loc_14CD6:
00015286 14C2                       		move.b	d2,(a2)+
00015288 51CB FFCC                  		dbf	d3,loc_14CA6
0001528C                            
0001528C 4E75                       		rts	
0001528E                            
0001528E                            ; End of function FloorLog_Unk2
0001528E                            
0001528E                            
0001528E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001528E                            
0001528E                            
0001528E                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001528E 2628 0008                  		move.l	8(a0),d3
00015292 2428 000C                  		move.l	$C(a0),d2
00015296 3228 0010                  		move.w	$10(a0),d1
0001529A 48C1                       		ext.l	d1
0001529C E181                       		asl.l	#8,d1
0001529E D681                       		add.l	d1,d3
000152A0 3228 0012                  		move.w	$12(a0),d1
000152A4 48C1                       		ext.l	d1
000152A6 E181                       		asl.l	#8,d1
000152A8 D481                       		add.l	d1,d2
000152AA 4842                       		swap	d2
000152AC 4843                       		swap	d3
000152AE 11C0 F768                  		move.b	d0,($FFFFF768).w
000152B2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000152B6 1200                       		move.b	d0,d1
000152B8 0600 0020                  		addi.b	#$20,d0
000152BC 6A00                       		bpl.s	loc_14D1A
000152BE 1001                       		move.b	d1,d0
000152C0 6A00                       		bpl.s	loc_14D14
000152C2 5300                       		subq.b	#1,d0
000152C4                            
000152C4                            loc_14D14:
000152C4 0600 0020                  		addi.b	#$20,d0
000152C8 6000                       		bra.s	loc_14D24
000152CA                            ; ===========================================================================
000152CA                            
000152CA                            loc_14D1A:
000152CA 1001                       		move.b	d1,d0
000152CC 6A00                       		bpl.s	loc_14D20
000152CE 5200                       		addq.b	#1,d0
000152D0                            
000152D0                            loc_14D20:
000152D0 0600 001F                  		addi.b	#$1F,d0
000152D4                            
000152D4                            loc_14D24:
000152D4 0200 00C0                  		andi.b	#$C0,d0
000152D8 6700 0000                  		beq.w	loc_14DF0
000152DC 0C00 0080                  		cmpi.b	#$80,d0
000152E0 6700 0000                  		beq.w	loc_14F7C
000152E4 0201 0038                  		andi.b	#$38,d1
000152E8 6600                       		bne.s	loc_14D3C
000152EA 5042                       		addq.w	#8,d2
000152EC                            
000152EC                            loc_14D3C:
000152EC 0C00 0040                  		cmpi.b	#$40,d0
000152F0 6700 0000                  		beq.w	loc_1504A
000152F4 6000 0000                  		bra.w	loc_14EBC
000152F8                            
000152F8                            ; End of function Sonic_WalkSpeed
000152F8                            
000152F8                            
000152F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152F8                            
000152F8                            
000152F8                            sub_14D48:				; XREF: Sonic_Jump
000152F8 11C0 F768                  		move.b	d0,($FFFFF768).w
000152FC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015300 0600 0020                  		addi.b	#$20,d0
00015304 0200 00C0                  		andi.b	#$C0,d0
00015308 0C00 0040                  		cmpi.b	#$40,d0
0001530C 6700 0000                  		beq.w	loc_14FD6
00015310 0C00 0080                  		cmpi.b	#$80,d0
00015314 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015318 0C00 00C0                  		cmpi.b	#$C0,d0
0001531C 6700 0000                  		beq.w	sub_14E50
00015320                            
00015320                            ; End of function sub_14D48
00015320                            
00015320                            ; ---------------------------------------------------------------------------
00015320                            ; Subroutine to	make Sonic land	on the floor after jumping
00015320                            ; ---------------------------------------------------------------------------
00015320                            
00015320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015320                            
00015320                            
00015320                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015320 3428 000C                  		move.w	$C(a0),d2
00015324 3628 0008                  		move.w	8(a0),d3
00015328 7000                       		moveq	#0,d0
0001532A 1028 0016                  		move.b	$16(a0),d0
0001532E 4880                       		ext.w	d0
00015330 D440                       		add.w	d0,d2
00015332 1028 0017                  		move.b	$17(a0),d0
00015336 4880                       		ext.w	d0
00015338 D640                       		add.w	d0,d3
0001533A 49F8 F768                  		lea	($FFFFF768).w,a4
0001533E 367C 0010                  		movea.w	#$10,a3
00015342 3C3C 0000                  		move.w	#0,d6
00015346 7A0D                       		moveq	#$D,d5
00015348 6100 FC34                  		bsr.w	FindFloor
0001534C 3F01                       		move.w	d1,-(sp)
0001534E 3428 000C                  		move.w	$C(a0),d2
00015352 3628 0008                  		move.w	8(a0),d3
00015356 7000                       		moveq	#0,d0
00015358 1028 0016                  		move.b	$16(a0),d0
0001535C 4880                       		ext.w	d0
0001535E D440                       		add.w	d0,d2
00015360 1028 0017                  		move.b	$17(a0),d0
00015364 4880                       		ext.w	d0
00015366 9640                       		sub.w	d0,d3
00015368 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001536C 367C 0010                  		movea.w	#$10,a3
00015370 3C3C 0000                  		move.w	#0,d6
00015374 7A0D                       		moveq	#$D,d5
00015376 6100 FC06                  		bsr.w	FindFloor
0001537A 301F                       		move.w	(sp)+,d0
0001537C 143C 0000                  		move.b	#0,d2
00015380                            
00015380                            loc_14DD0:
00015380 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015384 B240                       		cmp.w	d0,d1
00015386 6F00                       		ble.s	loc_14DDE
00015388 1638 F768                  		move.b	($FFFFF768).w,d3
0001538C C141                       		exg	d0,d1
0001538E                            
0001538E                            loc_14DDE:
0001538E 0803 0000                  		btst	#0,d3
00015392 6700                       		beq.s	locret_14DE6
00015394 1602                       		move.b	d2,d3
00015396                            
00015396                            locret_14DE6:
00015396 4E75                       		rts	
00015398                            
00015398                            ; End of function Sonic_HitFloor
00015398                            
00015398                            ; ===========================================================================
00015398 3428 000C                  		move.w	$C(a0),d2
0001539C 3628 0008                  		move.w	8(a0),d3
000153A0                            
000153A0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000153A0 0642 000A                  		addi.w	#$A,d2
000153A4 49F8 F768                  		lea	($FFFFF768).w,a4
000153A8 367C 0010                  		movea.w	#$10,a3
000153AC 3C3C 0000                  		move.w	#0,d6
000153B0 7A0E                       		moveq	#$E,d5
000153B2 6100 FBCA                  		bsr.w	FindFloor
000153B6 143C 0000                  		move.b	#0,d2
000153BA                            
000153BA                            loc_14E0A:				; XREF: sub_14EB4
000153BA 1638 F768                  		move.b	($FFFFF768).w,d3
000153BE 0803 0000                  		btst	#0,d3
000153C2 6700                       		beq.s	locret_14E16
000153C4 1602                       		move.b	d2,d3
000153C6                            
000153C6                            locret_14E16:
000153C6 4E75                       		rts	
000153C8                            
000153C8                            ; ---------------------------------------------------------------------------
000153C8                            ; Subroutine allowing objects to interact with the floor
000153C8                            ; ---------------------------------------------------------------------------
000153C8                            
000153C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153C8                            
000153C8                            
000153C8                            ObjHitFloor:
000153C8 3628 0008                  		move.w	8(a0),d3
000153CC                            
000153CC                            ; End of function ObjHitFloor
000153CC                            
000153CC                            
000153CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153CC                            
000153CC                            
000153CC                            ObjHitFloor2:
000153CC 3428 000C                  		move.w	$C(a0),d2
000153D0 7000                       		moveq	#0,d0
000153D2 1028 0016                  		move.b	$16(a0),d0
000153D6 4880                       		ext.w	d0
000153D8 D440                       		add.w	d0,d2
000153DA 49F8 F768                  		lea	($FFFFF768).w,a4
000153DE 18BC 0000                  		move.b	#0,(a4)
000153E2 367C 0010                  		movea.w	#$10,a3
000153E6 3C3C 0000                  		move.w	#0,d6
000153EA 7A0D                       		moveq	#$D,d5
000153EC 6100 FB90                  		bsr.w	FindFloor
000153F0 1638 F768                  		move.b	($FFFFF768).w,d3
000153F4 0803 0000                  		btst	#0,d3
000153F8 6700                       		beq.s	locret_14E4E
000153FA 163C 0000                  		move.b	#0,d3
000153FE                            
000153FE                            locret_14E4E:
000153FE 4E75                       		rts	
00015400                            ; End of function ObjHitFloor2
00015400                            
00015400                            
00015400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015400                            
00015400                            
00015400                            sub_14E50:				; XREF: sub_14D48
00015400 3428 000C                  		move.w	$C(a0),d2
00015404 3628 0008                  		move.w	8(a0),d3
00015408 7000                       		moveq	#0,d0
0001540A 1028 0017                  		move.b	$17(a0),d0
0001540E 4880                       		ext.w	d0
00015410 9440                       		sub.w	d0,d2
00015412 1028 0016                  		move.b	$16(a0),d0
00015416 4880                       		ext.w	d0
00015418 D640                       		add.w	d0,d3
0001541A 49F8 F768                  		lea	($FFFFF768).w,a4
0001541E 367C 0010                  		movea.w	#$10,a3
00015422 3C3C 0000                  		move.w	#0,d6
00015426 7A0E                       		moveq	#$E,d5
00015428 6100 FC92                  		bsr.w	FindWall
0001542C 3F01                       		move.w	d1,-(sp)
0001542E 3428 000C                  		move.w	$C(a0),d2
00015432 3628 0008                  		move.w	8(a0),d3
00015436 7000                       		moveq	#0,d0
00015438 1028 0017                  		move.b	$17(a0),d0
0001543C 4880                       		ext.w	d0
0001543E D440                       		add.w	d0,d2
00015440 1028 0016                  		move.b	$16(a0),d0
00015444 4880                       		ext.w	d0
00015446 D640                       		add.w	d0,d3
00015448 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001544C 367C 0010                  		movea.w	#$10,a3
00015450 3C3C 0000                  		move.w	#0,d6
00015454 7A0E                       		moveq	#$E,d5
00015456 6100 FC64                  		bsr.w	FindWall
0001545A 301F                       		move.w	(sp)+,d0
0001545C 143C 00C0                  		move.b	#-$40,d2
00015460 6000 FF1E                  		bra.w	loc_14DD0
00015464                            
00015464                            ; End of function sub_14E50
00015464                            
00015464                            
00015464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015464                            
00015464                            
00015464                            sub_14EB4:				; XREF: Sonic_Floor
00015464 3428 000C                  		move.w	$C(a0),d2
00015468 3628 0008                  		move.w	8(a0),d3
0001546C                            
0001546C                            loc_14EBC:
0001546C 0643 000A                  		addi.w	#$A,d3
00015470 49F8 F768                  		lea	($FFFFF768).w,a4
00015474 367C 0010                  		movea.w	#$10,a3
00015478 3C3C 0000                  		move.w	#0,d6
0001547C 7A0E                       		moveq	#$E,d5
0001547E 6100 FC3C                  		bsr.w	FindWall
00015482 143C 00C0                  		move.b	#-$40,d2
00015486 6000 FF32                  		bra.w	loc_14E0A
0001548A                            
0001548A                            ; End of function sub_14EB4
0001548A                            
0001548A                            ; ---------------------------------------------------------------------------
0001548A                            ; Subroutine to	detect when an object hits a wall to its right
0001548A                            ; ---------------------------------------------------------------------------
0001548A                            
0001548A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001548A                            
0001548A                            
0001548A                            ObjHitWallRight:
0001548A D668 0008                  		add.w	8(a0),d3
0001548E 3428 000C                  		move.w	$C(a0),d2
00015492 49F8 F768                  		lea	($FFFFF768).w,a4
00015496 18BC 0000                  		move.b	#0,(a4)
0001549A 367C 0010                  		movea.w	#$10,a3
0001549E 3C3C 0000                  		move.w	#0,d6
000154A2 7A0E                       		moveq	#$E,d5
000154A4 6100 FC16                  		bsr.w	FindWall
000154A8 1638 F768                  		move.b	($FFFFF768).w,d3
000154AC 0803 0000                  		btst	#0,d3
000154B0 6700                       		beq.s	locret_14F06
000154B2 163C 00C0                  		move.b	#-$40,d3
000154B6                            
000154B6                            locret_14F06:
000154B6 4E75                       		rts	
000154B8                            
000154B8                            ; End of function ObjHitWallRight
000154B8                            
000154B8                            ; ---------------------------------------------------------------------------
000154B8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000154B8                            ; touches them
000154B8                            ; ---------------------------------------------------------------------------
000154B8                            
000154B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154B8                            
000154B8                            
000154B8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000154B8 3428 000C                  		move.w	$C(a0),d2
000154BC 3628 0008                  		move.w	8(a0),d3
000154C0 7000                       		moveq	#0,d0
000154C2 1028 0016                  		move.b	$16(a0),d0
000154C6 4880                       		ext.w	d0
000154C8 9440                       		sub.w	d0,d2
000154CA 0A42 000F                  		eori.w	#$F,d2
000154CE 1028 0017                  		move.b	$17(a0),d0
000154D2 4880                       		ext.w	d0
000154D4 D640                       		add.w	d0,d3
000154D6 49F8 F768                  		lea	($FFFFF768).w,a4
000154DA 367C FFF0                  		movea.w	#-$10,a3
000154DE 3C3C 1000                  		move.w	#$1000,d6
000154E2 7A0E                       		moveq	#$E,d5
000154E4 6100 FA98                  		bsr.w	FindFloor
000154E8 3F01                       		move.w	d1,-(sp)
000154EA 3428 000C                  		move.w	$C(a0),d2
000154EE 3628 0008                  		move.w	8(a0),d3
000154F2 7000                       		moveq	#0,d0
000154F4 1028 0016                  		move.b	$16(a0),d0
000154F8 4880                       		ext.w	d0
000154FA 9440                       		sub.w	d0,d2
000154FC 0A42 000F                  		eori.w	#$F,d2
00015500 1028 0017                  		move.b	$17(a0),d0
00015504 4880                       		ext.w	d0
00015506 9640                       		sub.w	d0,d3
00015508 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001550C 367C FFF0                  		movea.w	#-$10,a3
00015510 3C3C 1000                  		move.w	#$1000,d6
00015514 7A0E                       		moveq	#$E,d5
00015516 6100 FA66                  		bsr.w	FindFloor
0001551A 301F                       		move.w	(sp)+,d0
0001551C 143C 0080                  		move.b	#-$80,d2
00015520 6000 FE5E                  		bra.w	loc_14DD0
00015524                            ; End of function Sonic_DontRunOnWalls
00015524                            
00015524                            ; ===========================================================================
00015524 3428 000C                  		move.w	$C(a0),d2
00015528 3628 0008                  		move.w	8(a0),d3
0001552C                            
0001552C                            loc_14F7C:
0001552C 0442 000A                  		subi.w	#$A,d2
00015530 0A42 000F                  		eori.w	#$F,d2
00015534 49F8 F768                  		lea	($FFFFF768).w,a4
00015538 367C FFF0                  		movea.w	#-$10,a3
0001553C 3C3C 1000                  		move.w	#$1000,d6
00015540 7A0E                       		moveq	#$E,d5
00015542 6100 FA3A                  		bsr.w	FindFloor
00015546 143C 0080                  		move.b	#-$80,d2
0001554A 6000 FE6E                  		bra.w	loc_14E0A
0001554E                            
0001554E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001554E                            
0001554E                            
0001554E                            ObjHitCeiling:
0001554E 3428 000C                  		move.w	$C(a0),d2
00015552 3628 0008                  		move.w	8(a0),d3
00015556 7000                       		moveq	#0,d0
00015558 1028 0016                  		move.b	$16(a0),d0
0001555C 4880                       		ext.w	d0
0001555E 9440                       		sub.w	d0,d2
00015560 0A42 000F                  		eori.w	#$F,d2
00015564 49F8 F768                  		lea	($FFFFF768).w,a4
00015568 367C FFF0                  		movea.w	#-$10,a3
0001556C 3C3C 1000                  		move.w	#$1000,d6
00015570 7A0E                       		moveq	#$E,d5
00015572 6100 FA0A                  		bsr.w	FindFloor
00015576 1638 F768                  		move.b	($FFFFF768).w,d3
0001557A 0803 0000                  		btst	#0,d3
0001557E 6700                       		beq.s	locret_14FD4
00015580 163C 0080                  		move.b	#-$80,d3
00015584                            
00015584                            locret_14FD4:
00015584 4E75                       		rts	
00015586                            ; End of function ObjHitCeiling
00015586                            
00015586                            ; ===========================================================================
00015586                            
00015586                            loc_14FD6:				; XREF: sub_14D48
00015586 3428 000C                  		move.w	$C(a0),d2
0001558A 3628 0008                  		move.w	8(a0),d3
0001558E 7000                       		moveq	#0,d0
00015590 1028 0017                  		move.b	$17(a0),d0
00015594 4880                       		ext.w	d0
00015596 9440                       		sub.w	d0,d2
00015598 1028 0016                  		move.b	$16(a0),d0
0001559C 4880                       		ext.w	d0
0001559E 9640                       		sub.w	d0,d3
000155A0 0A43 000F                  		eori.w	#$F,d3
000155A4 49F8 F768                  		lea	($FFFFF768).w,a4
000155A8 367C FFF0                  		movea.w	#-$10,a3
000155AC 3C3C 0800                  		move.w	#$800,d6
000155B0 7A0E                       		moveq	#$E,d5
000155B2 6100 FB08                  		bsr.w	FindWall
000155B6 3F01                       		move.w	d1,-(sp)
000155B8 3428 000C                  		move.w	$C(a0),d2
000155BC 3628 0008                  		move.w	8(a0),d3
000155C0 7000                       		moveq	#0,d0
000155C2 1028 0017                  		move.b	$17(a0),d0
000155C6 4880                       		ext.w	d0
000155C8 D440                       		add.w	d0,d2
000155CA 1028 0016                  		move.b	$16(a0),d0
000155CE 4880                       		ext.w	d0
000155D0 9640                       		sub.w	d0,d3
000155D2 0A43 000F                  		eori.w	#$F,d3
000155D6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000155DA 367C FFF0                  		movea.w	#-$10,a3
000155DE 3C3C 0800                  		move.w	#$800,d6
000155E2 7A0E                       		moveq	#$E,d5
000155E4 6100 FAD6                  		bsr.w	FindWall
000155E8 301F                       		move.w	(sp)+,d0
000155EA 143C 0040                  		move.b	#$40,d2
000155EE 6000 FD90                  		bra.w	loc_14DD0
000155F2                            
000155F2                            ; ---------------------------------------------------------------------------
000155F2                            ; Subroutine to	stop Sonic when	he jumps at a wall
000155F2                            ; ---------------------------------------------------------------------------
000155F2                            
000155F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155F2                            
000155F2                            
000155F2                            Sonic_HitWall:				; XREF: Sonic_Floor
000155F2 3428 000C                  		move.w	$C(a0),d2
000155F6 3628 0008                  		move.w	8(a0),d3
000155FA                            
000155FA                            loc_1504A:
000155FA 0443 000A                  		subi.w	#$A,d3
000155FE 0A43 000F                  		eori.w	#$F,d3
00015602 49F8 F768                  		lea	($FFFFF768).w,a4
00015606 367C FFF0                  		movea.w	#-$10,a3
0001560A 3C3C 0800                  		move.w	#$800,d6
0001560E 7A0E                       		moveq	#$E,d5
00015610 6100 FAAA                  		bsr.w	FindWall
00015614 143C 0040                  		move.b	#$40,d2
00015618 6000 FDA0                  		bra.w	loc_14E0A
0001561C                            ; End of function Sonic_HitWall
0001561C                            
0001561C                            ; ---------------------------------------------------------------------------
0001561C                            ; Subroutine to	detect when an object hits a wall to its left
0001561C                            ; ---------------------------------------------------------------------------
0001561C                            
0001561C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001561C                            
0001561C                            
0001561C                            ObjHitWallLeft:
0001561C D668 0008                  		add.w	8(a0),d3
00015620 3428 000C                  		move.w	$C(a0),d2
00015624 49F8 F768                  		lea	($FFFFF768).w,a4
00015628 18BC 0000                  		move.b	#0,(a4)
0001562C 367C FFF0                  		movea.w	#-$10,a3
00015630 3C3C 0800                  		move.w	#$800,d6
00015634 7A0E                       		moveq	#$E,d5
00015636 6100 FA84                  		bsr.w	FindWall
0001563A 1638 F768                  		move.b	($FFFFF768).w,d3
0001563E 0803 0000                  		btst	#0,d3
00015642 6700                       		beq.s	locret_15098
00015644 163C 0040                  		move.b	#$40,d3
00015648                            
00015648                            locret_15098:
00015648 4E75                       		rts	
0001564A                            ; End of function ObjHitWallLeft
0001564A                            
0001564A                            ; ===========================================================================
0001564A                            ; ---------------------------------------------------------------------------
0001564A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001564A                            ; ---------------------------------------------------------------------------
0001564A                            
0001564A                            Obj66:					; XREF: Obj_Index
0001564A 7000                       		moveq	#0,d0
0001564C 1028 0024                  		move.b	$24(a0),d0
00015650 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015654 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015658                            ; ===========================================================================
00015658 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001565A 0000                       		dc.w Obj66_Action-Obj66_Index
0001565C 0000                       		dc.w Obj66_Display-Obj66_Index
0001565E 0000                       		dc.w Obj66_Release-Obj66_Index
00015660                            ; ===========================================================================
00015660                            
00015660                            Obj66_Main:				; XREF: Obj66_Index
00015660 5428 0024                  		addq.b	#2,$24(a0)
00015664 323C 0001                  		move.w	#1,d1
00015668 2248                       		movea.l	a0,a1
0001566A 6000                       		bra.s	Obj66_MakeItem
0001566C                            ; ===========================================================================
0001566C                            
0001566C                            Obj66_Loop:
0001566C 6100 8984                  		bsr.w	SingleObjLoad
00015670 6600                       		bne.s	loc_150FE
00015672 12BC 0066                  		move.b	#$66,0(a1)
00015676 5829 0024                  		addq.b	#4,$24(a1)
0001567A 3368 0008 0008             		move.w	8(a0),8(a1)
00015680 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015686 137C 0003 0018             		move.b	#3,$18(a1)
0001568C 137C 0010 001A             		move.b	#$10,$1A(a1)
00015692                            
00015692                            Obj66_MakeItem:				; XREF: Obj66_Main
00015692 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001569A 337C 4348 0002             		move.w	#$4348,2(a1)
000156A0 0029 0004 0001             		ori.b	#4,1(a1)
000156A6 137C 0038 0019             		move.b	#$38,$19(a1)
000156AC                            
000156AC                            loc_150FE:
000156AC 51C9 FFBE                  		dbf	d1,Obj66_Loop
000156B0                            
000156B0 117C 0030 0019             		move.b	#$30,$19(a0)
000156B6 117C 0004 0018             		move.b	#4,$18(a0)
000156BC 317C 003C 0030             		move.w	#$3C,$30(a0)
000156C2 117C 0001 0034             		move.b	#1,$34(a0)
000156C8 1168 0028 0038             		move.b	$28(a0),$38(a0)
000156CE                            
000156CE                            Obj66_Action:				; XREF: Obj66_Index
000156CE 6100 0000                  		bsr.w	Obj66_ChkSwitch
000156D2 4A28 0001                  		tst.b	1(a0)
000156D6 6A00 0000                  		bpl.w	Obj66_Display
000156DA 323C 0030                  		move.w	#$30,d1
000156DE 3401                       		move.w	d1,d2
000156E0 3602                       		move.w	d2,d3
000156E2 5243                       		addq.w	#1,d3
000156E4 3828 0008                  		move.w	8(a0),d4
000156E8 6100 A852                  		bsr.w	SolidObject
000156EC 0828 0005 0022             		btst	#5,$22(a0)
000156F2 6700 0000                  		beq.w	Obj66_Display
000156F6 43F8 D000                  		lea	($FFFFD000).w,a1
000156FA 720E                       		moveq	#$E,d1
000156FC 3029 0008                  		move.w	8(a1),d0
00015700 B068 0008                  		cmp.w	8(a0),d0
00015704 6500                       		bcs.s	Obj66_GrabSonic
00015706 7207                       		moveq	#7,d1
00015708                            
00015708                            Obj66_GrabSonic:
00015708 B228 001A                  		cmp.b	$1A(a0),d1
0001570C 6600                       		bne.s	Obj66_Display
0001570E 1141 0032                  		move.b	d1,$32(a0)
00015712 5828 0024                  		addq.b	#4,$24(a0)
00015716 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001571C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015722 337C 0800 0014             		move.w	#$800,$14(a1)
00015728 337C 0000 0010             		move.w	#0,$10(a1)
0001572E 337C 0000 0012             		move.w	#0,$12(a1)
00015734 08A8 0005 0022             		bclr	#5,$22(a0)
0001573A 08A9 0005 0022             		bclr	#5,$22(a1)
00015740 08E9 0001 0022             		bset	#1,$22(a1)
00015746 3429 0008                  		move.w	8(a1),d2
0001574A 3629 000C                  		move.w	$C(a1),d3
0001574E 6100 0000                  		bsr.w	Obj66_ChgPos
00015752 D569 0008                  		add.w	d2,8(a1)
00015756 D769 000C                  		add.w	d3,$C(a1)
0001575A E0E9 0008                  		asr	8(a1)
0001575E E0E9 000C                  		asr	$C(a1)
00015762                            
00015762                            Obj66_Display:				; XREF: Obj66_Index
00015762 6000 A4B0                  		bra.w	MarkObjGone
00015766                            ; ===========================================================================
00015766                            
00015766                            Obj66_Release:				; XREF: Obj66_Index
00015766 1028 001A                  		move.b	$1A(a0),d0
0001576A 0C00 0004                  		cmpi.b	#4,d0
0001576E 6700                       		beq.s	loc_151C8
00015770 0C00 0007                  		cmpi.b	#7,d0
00015774 6600                       		bne.s	loc_151F8
00015776                            
00015776                            loc_151C8:
00015776 B028 0032                  		cmp.b	$32(a0),d0
0001577A 6700                       		beq.s	loc_151F8
0001577C 43F8 D000                  		lea	($FFFFD000).w,a1
00015780 337C 0000 0010             		move.w	#0,$10(a1)
00015786 337C 0800 0012             		move.w	#$800,$12(a1)
0001578C 0C00 0004                  		cmpi.b	#4,d0
00015790 6700                       		beq.s	loc_151F0
00015792 337C 0800 0010             		move.w	#$800,$10(a1)
00015798 337C 0800 0012             		move.w	#$800,$12(a1)
0001579E                            
0001579E                            loc_151F0:
0001579E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000157A2 5928 0024                  		subq.b	#4,$24(a0)
000157A6                            
000157A6                            loc_151F8:
000157A6 6100                       		bsr.s	Obj66_ChkSwitch
000157A8 6100                       		bsr.s	Obj66_ChgPos
000157AA 6000 A468                  		bra.w	MarkObjGone
000157AE                            
000157AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157AE                            
000157AE                            
000157AE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000157AE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000157B2 7000                       		moveq	#0,d0
000157B4 1028 0038                  		move.b	$38(a0),d0
000157B8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000157BE 6700                       		beq.s	loc_15224	; if not, branch
000157C0 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000157C4 6600                       		bne.s	Obj66_Animate	; if yes, branch
000157C6 4428 0034                  		neg.b	$34(a0)
000157CA 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000157D0 6000                       		bra.s	Obj66_Animate
000157D2                            ; ===========================================================================
000157D2                            
000157D2                            loc_15224:
000157D2 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000157D6                            
000157D6                            Obj66_Animate:
000157D6 5328 001E                  		subq.b	#1,$1E(a0)
000157DA 6A00                       		bpl.s	locret_15246
000157DC 117C 0007 001E             		move.b	#7,$1E(a0)
000157E2 1228 0034                  		move.b	$34(a0),d1
000157E6 1028 001A                  		move.b	$1A(a0),d0
000157EA D001                       		add.b	d1,d0
000157EC 0200 000F                  		andi.b	#$F,d0
000157F0 1140 001A                  		move.b	d0,$1A(a0)
000157F4                            
000157F4                            locret_15246:
000157F4 4E75                       		rts	
000157F6                            ; End of function Obj66_ChkSwitch
000157F6                            
000157F6                            
000157F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157F6                            
000157F6                            
000157F6                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000157F6 43F8 D000                  		lea	($FFFFD000).w,a1
000157FA 7000                       		moveq	#0,d0
000157FC 1028 001A                  		move.b	$1A(a0),d0
00015800 D040                       		add.w	d0,d0
00015802 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015806 101A                       		move.b	(a2)+,d0
00015808 4880                       		ext.w	d0
0001580A D068 0008                  		add.w	8(a0),d0
0001580E 3340 0008                  		move.w	d0,8(a1)
00015812 101A                       		move.b	(a2)+,d0
00015814 4880                       		ext.w	d0
00015816 D068 000C                  		add.w	$C(a0),d0
0001581A 3340 000C                  		move.w	d0,$C(a1)
0001581E 4E75                       		rts	
00015820                            ; End of function Obj66_ChgPos
00015820                            
00015820                            ; ===========================================================================
00015820 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015824 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015828 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001582C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015830 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015834 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015838 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001583C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015840                            ; ---------------------------------------------------------------------------
00015840                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015840                            ; ---------------------------------------------------------------------------
00015840                            Map_obj66:
00015840                            	include "_maps\obj66.asm"
00015840                            ; ---------------------------------------------------------------------------
00015840                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015840                            ; ---------------------------------------------------------------------------
00015840 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015844 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015848 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001584C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015850 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015854 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015858 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001585C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015860 0000                       		dc.w byte_154A4-Map_obj66
00015862 06                         byte_152B4:	dc.b 6
00015863 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015868 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001586D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015872 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015877 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001587C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015881 06                         byte_152D3:	dc.b 6
00015882 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015887 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001588C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015891 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015896 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001589B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000158A0 06                         byte_152F2:	dc.b 6
000158A1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000158A6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000158AB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000158B0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000158B5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000158BA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000158BF 06                         byte_15311:	dc.b 6
000158C0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000158C5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000158CA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000158CF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000158D4 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000158D9 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000158DE 06                         byte_15330:	dc.b 6
000158DF 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000158E4 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000158E9 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000158EE 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000158F3 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000158F8 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000158FD 06                         byte_1534F:	dc.b 6
000158FE 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015903 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015908 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001590D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015912 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015917 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001591C 06                         byte_1536E:	dc.b 6
0001591D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015922 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015927 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001592C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015931 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015936 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001593B 06                         byte_1538D:	dc.b 6
0001593C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015941 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015946 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001594B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015950 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015955 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001595A 06                         byte_153AC:	dc.b 6
0001595B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015960 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015965 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001596A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001596F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015974 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015979 06                         byte_153CB:	dc.b 6
0001597A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001597F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015984 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015989 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001598E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015993 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015998 06                         byte_153EA:	dc.b 6
00015999 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001599E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000159A3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000159A8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000159AD E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000159B2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000159B7 06                         byte_15409:	dc.b 6
000159B8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000159BD D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000159C2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000159C7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000159CC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000159D1 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000159D6 06                         byte_15428:	dc.b 6
000159D7 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000159DC D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000159E1 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000159E6 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000159EB E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000159F0 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000159F5 06                         byte_15447:	dc.b 6
000159F6 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000159FB D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A00 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A05 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A0A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A0F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A14 06                         byte_15466:	dc.b 6
00015A15 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A1A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A1F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A24 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A29 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A2E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A33 06                         byte_15485:	dc.b 6
00015A34 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A39 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A3E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015A43 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015A48 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015A4D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015A52 0C                         byte_154A4:	dc.b $C
00015A53 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015A58 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015A5D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015A62 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015A67 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015A6C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015A71 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015A76 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015A7B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015A80 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015A85 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015A8A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015A90 00                         		even
00015A90 00                         		even
00015A90                            
00015A90                            ; ===========================================================================
00015A90                            ; ---------------------------------------------------------------------------
00015A90                            ; Object 67 - disc that	you run	around (SBZ)
00015A90                            ; ---------------------------------------------------------------------------
00015A90                            
00015A90                            Obj67:					; XREF: Obj_Index
00015A90 7000                       		moveq	#0,d0
00015A92 1028 0024                  		move.b	$24(a0),d0
00015A96 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015A9A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015A9E                            ; ===========================================================================
00015A9E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015AA0 0000                       		dc.w Obj67_Action-Obj67_Index
00015AA2                            ; ===========================================================================
00015AA2                            
00015AA2                            Obj67_Main:				; XREF: Obj67_Index
00015AA2 5428 0024                  		addq.b	#2,$24(a0)
00015AA6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015AAE 317C C344 0002             		move.w	#$C344,2(a0)
00015AB4 117C 0004 0001             		move.b	#4,1(a0)
00015ABA 117C 0004 0018             		move.b	#4,$18(a0)
00015AC0 117C 0008 0019             		move.b	#8,$19(a0)
00015AC6 3168 0008 0032             		move.w	8(a0),$32(a0)
00015ACC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015AD2 117C 0018 0034             		move.b	#$18,$34(a0)
00015AD8 117C 0048 0038             		move.b	#$48,$38(a0)
00015ADE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015AE2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015AE6 6700                       		beq.s	loc_15546
00015AE8 117C 0010 0034             		move.b	#$10,$34(a0)
00015AEE 117C 0038 0038             		move.b	#$38,$38(a0)
00015AF4                            
00015AF4                            loc_15546:
00015AF4 1228 0028                  		move.b	$28(a0),d1	; get object type
00015AF8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015AFC 4881                       		ext.w	d1
00015AFE E741                       		asl.w	#3,d1
00015B00 3141 0036                  		move.w	d1,$36(a0)
00015B04 1028 0022                  		move.b	$22(a0),d0
00015B08 E418                       		ror.b	#2,d0
00015B0A 0200 00C0                  		andi.b	#-$40,d0
00015B0E 1140 0026                  		move.b	d0,$26(a0)
00015B12                            
00015B12                            Obj67_Action:				; XREF: Obj67_Index
00015B12 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B16 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B1A 6000 0000                  		bra.w	Obj67_ChkDel
00015B1E                            ; ===========================================================================
00015B1E                            
00015B1E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B1E 7400                       		moveq	#0,d2
00015B20 1428 0038                  		move.b	$38(a0),d2
00015B24 3602                       		move.w	d2,d3
00015B26 D643                       		add.w	d3,d3
00015B28 43F8 D000                  		lea	($FFFFD000).w,a1
00015B2C 3029 0008                  		move.w	8(a1),d0
00015B30 9068 0032                  		sub.w	$32(a0),d0
00015B34 D042                       		add.w	d2,d0
00015B36 B043                       		cmp.w	d3,d0
00015B38 6400                       		bcc.s	loc_155A8
00015B3A 3229 000C                  		move.w	$C(a1),d1
00015B3E 9268 0030                  		sub.w	$30(a0),d1
00015B42 D242                       		add.w	d2,d1
00015B44 B243                       		cmp.w	d3,d1
00015B46 6400                       		bcc.s	loc_155A8
00015B48 0829 0001 0022             		btst	#1,$22(a1)
00015B4E 6700                       		beq.s	loc_155B8
00015B50 4228 003A                  		clr.b	$3A(a0)
00015B54 4E75                       		rts	
00015B56                            ; ===========================================================================
00015B56                            
00015B56                            loc_155A8:
00015B56 4A28 003A                  		tst.b	$3A(a0)
00015B5A 6700                       		beq.s	locret_155B6
00015B5C 4229 0038                  		clr.b	$38(a1)
00015B60 4228 003A                  		clr.b	$3A(a0)
00015B64                            
00015B64                            locret_155B6:
00015B64 4E75                       		rts	
00015B66                            ; ===========================================================================
00015B66                            
00015B66                            loc_155B8:
00015B66 4A28 003A                  		tst.b	$3A(a0)
00015B6A 6600                       		bne.s	loc_155E2
00015B6C 117C 0001 003A             		move.b	#1,$3A(a0)
00015B72 0829 0002 0022             		btst	#2,$22(a1)
00015B78 6600                       		bne.s	loc_155D0
00015B7A 4229 001C                  		clr.b	$1C(a1)
00015B7E                            
00015B7E                            loc_155D0:
00015B7E 08A9 0005 0022             		bclr	#5,$22(a1)
00015B84 137C 0001 001D             		move.b	#1,$1D(a1)
00015B8A 137C 0001 0038             		move.b	#1,$38(a1)
00015B90                            
00015B90                            loc_155E2:
00015B90 3029 0014                  		move.w	$14(a1),d0
00015B94 4A68 0036                  		tst.w	$36(a0)
00015B98 6A00                       		bpl.s	loc_15608
00015B9A 0C40 FC00                  		cmpi.w	#-$400,d0
00015B9E 6F00                       		ble.s	loc_155FA
00015BA0 337C FC00 0014             		move.w	#-$400,$14(a1)
00015BA6 4E75                       		rts	
00015BA8                            ; ===========================================================================
00015BA8                            
00015BA8                            loc_155FA:
00015BA8 0C40 F100                  		cmpi.w	#-$F00,d0
00015BAC 6C00                       		bge.s	locret_15606
00015BAE 337C F100 0014             		move.w	#-$F00,$14(a1)
00015BB4                            
00015BB4                            locret_15606:
00015BB4 4E75                       		rts	
00015BB6                            ; ===========================================================================
00015BB6                            
00015BB6                            loc_15608:
00015BB6 0C40 0400                  		cmpi.w	#$400,d0
00015BBA 6C00                       		bge.s	loc_15616
00015BBC 337C 0400 0014             		move.w	#$400,$14(a1)
00015BC2 4E75                       		rts	
00015BC4                            ; ===========================================================================
00015BC4                            
00015BC4                            loc_15616:
00015BC4 0C40 0F00                  		cmpi.w	#$F00,d0
00015BC8 6F00                       		ble.s	locret_15622
00015BCA 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015BD0                            
00015BD0                            locret_15622:
00015BD0 4E75                       		rts	
00015BD2                            ; ===========================================================================
00015BD2                            
00015BD2                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015BD2 3028 0036                  		move.w	$36(a0),d0
00015BD6 D168 0026                  		add.w	d0,$26(a0)
00015BDA 1028 0026                  		move.b	$26(a0),d0
00015BDE 4EB9 0000 2C22             		jsr	(CalcSine).l
00015BE4 3428 0030                  		move.w	$30(a0),d2
00015BE8 3628 0032                  		move.w	$32(a0),d3
00015BEC 7800                       		moveq	#0,d4
00015BEE 1828 0034                  		move.b	$34(a0),d4
00015BF2 E14C                       		lsl.w	#8,d4
00015BF4 2A04                       		move.l	d4,d5
00015BF6 C9C0                       		muls.w	d0,d4
00015BF8 4844                       		swap	d4
00015BFA CBC1                       		muls.w	d1,d5
00015BFC 4845                       		swap	d5
00015BFE D842                       		add.w	d2,d4
00015C00 DA43                       		add.w	d3,d5
00015C02 3144 000C                  		move.w	d4,$C(a0)
00015C06 3145 0008                  		move.w	d5,8(a0)
00015C0A 4E75                       		rts	
00015C0C                            ; ===========================================================================
00015C0C                            
00015C0C                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C0C 3028 0032                  		move.w	$32(a0),d0
00015C10 0240 FF80                  		andi.w	#-$80,d0
00015C14 3238 F700                  		move.w	($FFFFF700).w,d1
00015C18 0441 0080                  		subi.w	#$80,d1
00015C1C 0241 FF80                  		andi.w	#-$80,d1
00015C20 9041                       		sub.w	d1,d0
00015C22 0C40 0280                  		cmpi.w	#$280,d0
00015C26 6200                       		bhi.s	Obj67_Delete
00015C28 4EF9 0000 DB6C             		jmp	DisplaySprite
00015C2E                            ; ===========================================================================
00015C2E                            
00015C2E                            Obj67_Delete:
00015C2E 4EF9 0000 DBA8             		jmp	DeleteObject
00015C34                            ; ===========================================================================
00015C34                            ; ---------------------------------------------------------------------------
00015C34                            ; Sprite mappings - disc that you run around (SBZ)
00015C34                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C34                            ; part of the level tiles.)
00015C34                            ; ---------------------------------------------------------------------------
00015C34                            Map_obj67:
00015C34                            	include "_maps\obj67.asm"
00015C34                            ; ---------------------------------------------------------------------------
00015C34                            ; Sprite mappings - disc that you run around (SBZ)
00015C34                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C34                            ; part of the level tiles.)
00015C34                            ; ---------------------------------------------------------------------------
00015C34 0000                       		dc.w byte_15688-Map_obj67
00015C36 01                         byte_15688:	dc.b 1
00015C37 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C3C                            		even
00015C3C                            		even
00015C3C                            
00015C3C                            ; ===========================================================================
00015C3C                            ; ---------------------------------------------------------------------------
00015C3C                            ; Object 68 - conveyor belts (SBZ)
00015C3C                            ; ---------------------------------------------------------------------------
00015C3C                            
00015C3C                            Obj68:					; XREF: Obj_Index
00015C3C 7000                       		moveq	#0,d0
00015C3E 1028 0024                  		move.b	$24(a0),d0
00015C42 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015C46 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015C4A                            ; ===========================================================================
00015C4A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015C4C 0000                       		dc.w Obj68_Action-Obj68_Index
00015C4E                            ; ===========================================================================
00015C4E                            
00015C4E                            Obj68_Main:				; XREF: Obj68_Index
00015C4E 5428 0024                  		addq.b	#2,$24(a0)
00015C52 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015C58 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C5C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C60 6700                       		beq.s	loc_156BA	; if zero, branch
00015C62 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015C68                            
00015C68                            loc_156BA:
00015C68 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C6C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015C70 4881                       		ext.w	d1
00015C72 E841                       		asr.w	#4,d1
00015C74 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015C78                            
00015C78                            Obj68_Action:				; XREF: Obj68_Index
00015C78 6100                       		bsr.s	Obj68_MoveSonic
00015C7A 3028 0008                  		move.w	8(a0),d0
00015C7E 0240 FF80                  		andi.w	#$FF80,d0
00015C82 3238 F700                  		move.w	($FFFFF700).w,d1
00015C86 0441 0080                  		subi.w	#$80,d1
00015C8A 0241 FF80                  		andi.w	#$FF80,d1
00015C8E 9041                       		sub.w	d1,d0
00015C90 0C40 0280                  		cmpi.w	#$280,d0
00015C94 6200                       		bhi.s	Obj68_Delete
00015C96 4E75                       		rts	
00015C98                            ; ===========================================================================
00015C98                            
00015C98                            Obj68_Delete:
00015C98 4EF9 0000 DBA8             		jmp	DeleteObject
00015C9E                            ; ===========================================================================
00015C9E                            
00015C9E                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015C9E 7400                       		moveq	#0,d2
00015CA0 1428 0038                  		move.b	$38(a0),d2
00015CA4 3602                       		move.w	d2,d3
00015CA6 D643                       		add.w	d3,d3
00015CA8 43F8 D000                  		lea	($FFFFD000).w,a1
00015CAC 3029 0008                  		move.w	8(a1),d0
00015CB0 9068 0008                  		sub.w	8(a0),d0
00015CB4 D042                       		add.w	d2,d0
00015CB6 B043                       		cmp.w	d3,d0
00015CB8 6400                       		bcc.s	locret_1572E
00015CBA 3229 000C                  		move.w	$C(a1),d1
00015CBE 9268 000C                  		sub.w	$C(a0),d1
00015CC2 0641 0030                  		addi.w	#$30,d1
00015CC6 0C41 0030                  		cmpi.w	#$30,d1
00015CCA 6400                       		bcc.s	locret_1572E
00015CCC 0829 0001 0022             		btst	#1,$22(a1)
00015CD2 6600                       		bne.s	locret_1572E
00015CD4 3028 0036                  		move.w	$36(a0),d0
00015CD8 D169 0008                  		add.w	d0,8(a1)
00015CDC                            
00015CDC                            locret_1572E:
00015CDC 4E75                       		rts	
00015CDE                            
00015CDE                            ; ===========================================================================
00015CDE                            ; ---------------------------------------------------------------------------
00015CDE                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015CDE                            ; ---------------------------------------------------------------------------
00015CDE                            
00015CDE                            Obj69:					; XREF: Obj_Index
00015CDE 7000                       		moveq	#0,d0
00015CE0 1028 0024                  		move.b	$24(a0),d0
00015CE4 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015CE8 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015CEC                            ; ===========================================================================
00015CEC 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015CEE 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015CF0 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015CF2                            ; ===========================================================================
00015CF2                            
00015CF2                            Obj69_Main:				; XREF: Obj69_Index
00015CF2 5428 0024                  		addq.b	#2,$24(a0)
00015CF6 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015CFE 317C 4492 0002             		move.w	#$4492,2(a0)
00015D04 0028 0004 0001             		ori.b	#4,1(a0)
00015D0A 117C 0080 0019             		move.b	#$80,$19(a0)
00015D10 7000                       		moveq	#0,d0
00015D12 1028 0028                  		move.b	$28(a0),d0
00015D16 0240 000F                  		andi.w	#$F,d0
00015D1A C0FC 003C                  		mulu.w	#$3C,d0
00015D1E 3140 0032                  		move.w	d0,$32(a0)
00015D22 4A28 0028                  		tst.b	$28(a0)
00015D26 6A00                       		bpl.s	Obj69_Trapdoor
00015D28 5428 0024                  		addq.b	#2,$24(a0)
00015D2C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D34 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D3A 117C 0010 0019             		move.b	#$10,$19(a0)
00015D40 117C 0002 001C             		move.b	#2,$1C(a0)
00015D46 7000                       		moveq	#0,d0
00015D48 1028 0028                  		move.b	$28(a0),d0	; get object type
00015D4C 3200                       		move.w	d0,d1
00015D4E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015D52 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015D56 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015D5A 3140 0032                  		move.w	d0,$32(a0)
00015D5E 0241 0070                  		andi.w	#$70,d1
00015D62 0641 0010                  		addi.w	#$10,d1
00015D66 E549                       		lsl.w	#2,d1
00015D68 5341                       		subq.w	#1,d1
00015D6A 3141 0036                  		move.w	d1,$36(a0)
00015D6E 6000                       		bra.s	Obj69_Spinner
00015D70                            ; ===========================================================================
00015D70                            
00015D70                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015D70 5368 0030                  		subq.w	#1,$30(a0)
00015D74 6A00                       		bpl.s	Obj69_Animate
00015D76 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015D7C 0868 0000 001C             		bchg	#0,$1C(a0)
00015D82 4A28 0001                  		tst.b	1(a0)
00015D86 6A00                       		bpl.s	Obj69_Animate
00015D88 303C 00BB                  		move.w	#$BB,d0
00015D8C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015D92                            
00015D92                            Obj69_Animate:
00015D92 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015D98 4EB9 0000 AC42             		jsr	AnimateSprite
00015D9E 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015DA2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015DA4 323C 004B                  		move.w	#$4B,d1
00015DA8 343C 000C                  		move.w	#$C,d2
00015DAC 3602                       		move.w	d2,d3
00015DAE 5243                       		addq.w	#1,d3
00015DB0 3828 0008                  		move.w	8(a0),d4
00015DB4 6100 A186                  		bsr.w	SolidObject
00015DB8 6000 9E5A                  		bra.w	MarkObjGone
00015DBC                            ; ===========================================================================
00015DBC                            
00015DBC                            Obj69_NotSolid:
00015DBC 0828 0003 0022             		btst	#3,$22(a0)
00015DC2 6700                       		beq.s	Obj69_Display
00015DC4 43F8 D000                  		lea	($FFFFD000).w,a1
00015DC8 08A9 0003 0022             		bclr	#3,$22(a1)
00015DCE 08A8 0003 0022             		bclr	#3,$22(a0)
00015DD4 4228 0025                  		clr.b	$25(a0)
00015DD8                            
00015DD8                            Obj69_Display:
00015DD8 6000 9E3A                  		bra.w	MarkObjGone
00015DDC                            ; ===========================================================================
00015DDC                            
00015DDC                            Obj69_Spinner:				; XREF: Obj69_Index
00015DDC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015DE0 C068 0036                  		and.w	$36(a0),d0
00015DE4 6600                       		bne.s	Obj69_Delay
00015DE6 117C 0001 0034             		move.b	#1,$34(a0)
00015DEC                            
00015DEC                            Obj69_Delay:
00015DEC 4A28 0034                  		tst.b	$34(a0)
00015DF0 6700                       		beq.s	Obj69_Animate2
00015DF2 5368 0030                  		subq.w	#1,$30(a0)
00015DF6 6A00                       		bpl.s	Obj69_Animate2
00015DF8 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015DFE 4228 0034                  		clr.b	$34(a0)
00015E02 0868 0000 001C             		bchg	#0,$1C(a0)
00015E08                            
00015E08                            Obj69_Animate2:
00015E08 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E0E 4EB9 0000 AC42             		jsr	AnimateSprite
00015E14 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E18 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E1A 323C 001B                  		move.w	#$1B,d1
00015E1E 343C 0007                  		move.w	#7,d2
00015E22 3602                       		move.w	d2,d3
00015E24 5243                       		addq.w	#1,d3
00015E26 3828 0008                  		move.w	8(a0),d4
00015E2A 6100 A110                  		bsr.w	SolidObject
00015E2E 6000 9DE4                  		bra.w	MarkObjGone
00015E32                            ; ===========================================================================
00015E32                            
00015E32                            Obj69_NotSolid2:
00015E32 0828 0003 0022             		btst	#3,$22(a0)
00015E38 6700                       		beq.s	Obj69_Display2
00015E3A 43F8 D000                  		lea	($FFFFD000).w,a1
00015E3E 08A9 0003 0022             		bclr	#3,$22(a1)
00015E44 08A8 0003 0022             		bclr	#3,$22(a0)
00015E4A 4228 0025                  		clr.b	$25(a0)
00015E4E                            
00015E4E                            Obj69_Display2:
00015E4E 6000 9DC4                  		bra.w	MarkObjGone
00015E52                            ; ===========================================================================
00015E52                            Ani_obj69:
00015E52                            	include "_anim\obj69.asm"
00015E52                            ; ---------------------------------------------------------------------------
00015E52                            ; Animation script - trapdoor (SBZ)
00015E52                            ; ---------------------------------------------------------------------------
00015E52 0000                       		dc.w byte_158AC-Ani_obj69
00015E54 0000                       		dc.w byte_158B2-Ani_obj69
00015E56 0000                       		dc.w byte_158B8-Ani_obj69
00015E58 0000                       		dc.w byte_158CC-Ani_obj69
00015E5A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015E60 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015E66 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015E73 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015E7A 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015E87 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015E8E                            		even
00015E8E                            		even
00015E8E                            
00015E8E                            ; ---------------------------------------------------------------------------
00015E8E                            ; Sprite mappings - trapdoor (SBZ)
00015E8E                            ; ---------------------------------------------------------------------------
00015E8E                            Map_obj69:
00015E8E                            	include "_maps\obj69.asm"
00015E8E                            ; ---------------------------------------------------------------------------
00015E8E                            ; Sprite mappings - trapdoor (SBZ)
00015E8E                            ; ---------------------------------------------------------------------------
00015E8E 0000                       		dc.w byte_158E6-Map_obj69
00015E90 0000                       		dc.w byte_158FB-Map_obj69
00015E92 0000                       		dc.w byte_15924-Map_obj69
00015E94 04                         byte_158E6:	dc.b 4
00015E95 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015E9A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015E9F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015EA4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015EA9 08                         byte_158FB:	dc.b 8
00015EAA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015EAF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015EB4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015EB9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015EBE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015EC3 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015EC8 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015ECD 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015ED2 04                         byte_15924:	dc.b 4
00015ED3 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015ED8 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015EDD 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015EE2 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015EE8 00                         		even
00015EE8 00                         		even
00015EE8                            
00015EE8                            ; ---------------------------------------------------------------------------
00015EE8                            ; Sprite mappings - spinning platforms (SBZ)
00015EE8                            ; ---------------------------------------------------------------------------
00015EE8                            Map_obj69a:
00015EE8                            	include "_maps\obj69a.asm"
00015EE8                            ; ---------------------------------------------------------------------------
00015EE8                            ; Sprite mappings - spinning platforms (SBZ)
00015EE8                            ; ---------------------------------------------------------------------------
00015EE8 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015EEC 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015EF0 0000                       		dc.w byte_15970-Map_obj69a
00015EF2 02                         byte_15944:	dc.b 2
00015EF3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015EF8 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015EFD 02                         byte_1594F:	dc.b 2
00015EFE F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F03 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F08 02                         byte_1595A:	dc.b 2
00015F09 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F0E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F13 02                         byte_15965:	dc.b 2
00015F14 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F19 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F1E 02                         byte_15970:	dc.b 2
00015F1F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F24 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F2A 00                         		even
00015F2A 00                         		even
00015F2A                            
00015F2A                            ; ===========================================================================
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            
00015F2A                            Obj6A:					; XREF: Obj_Index
00015F2A 7000                       		moveq	#0,d0
00015F2C 1028 0024                  		move.b	$24(a0),d0
00015F30 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F34 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F38                            ; ===========================================================================
00015F38 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F3A 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F3C                            ; ===========================================================================
00015F3C                            
00015F3C                            Obj6A_Main:				; XREF: Obj6A_Index
00015F3C 5428 0024                  		addq.b	#2,$24(a0)
00015F40 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015F48 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015F4E 117C 0004 0001             		move.b	#4,1(a0)
00015F54 117C 0004 0018             		move.b	#4,$18(a0)
00015F5A 117C 0020 0019             		move.b	#$20,$19(a0)
00015F60 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015F66 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015F6C 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015F72 6400                       		bcc.s	Obj6A_Action
00015F74 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015F7A                            
00015F7A                            Obj6A_Action:				; XREF: Obj6A_Index
00015F7A 7000                       		moveq	#0,d0
00015F7C 1028 0028                  		move.b	$28(a0),d0
00015F80 0240 0007                  		andi.w	#7,d0
00015F84 D040                       		add.w	d0,d0
00015F86 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015F8A 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015F8E 3028 003A                  		move.w	$3A(a0),d0
00015F92 0240 FF80                  		andi.w	#$FF80,d0
00015F96 3238 F700                  		move.w	($FFFFF700).w,d1
00015F9A 0441 0080                  		subi.w	#$80,d1
00015F9E 0241 FF80                  		andi.w	#$FF80,d1
00015FA2 9041                       		sub.w	d1,d0
00015FA4 0C40 0280                  		cmpi.w	#$280,d0
00015FA8 6200                       		bhi.s	Obj6A_Delete
00015FAA 4EF9 0000 DB6C             		jmp	DisplaySprite
00015FB0                            ; ===========================================================================
00015FB0                            
00015FB0                            Obj6A_Delete:
00015FB0 4EF9 0000 DBA8             		jmp	DeleteObject
00015FB6                            ; ===========================================================================
00015FB6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015FBA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015FBE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015FC0                            ; ===========================================================================
00015FC0                            
00015FC0                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015FC0 4E75                       		rts	
00015FC2                            ; ===========================================================================
00015FC2                            
00015FC2                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015FC2 323C 0060                  		move.w	#$60,d1
00015FC6 7000                       		moveq	#0,d0
00015FC8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015FCC 0828 0000 0022             		btst	#0,$22(a0)
00015FD2 6700                       		beq.s	Obj6A_Animate01
00015FD4 4440                       		neg.w	d0
00015FD6 D041                       		add.w	d1,d0
00015FD8                            
00015FD8                            Obj6A_Animate01:
00015FD8 3228 003A                  		move.w	$3A(a0),d1
00015FDC 9240                       		sub.w	d0,d1
00015FDE 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015FE2 5328 001E                  		subq.b	#1,$1E(a0)
00015FE6 6A00                       		bpl.s	loc_15A46
00015FE8 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015FEE 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015FF4                            
00015FF4                            loc_15A46:
00015FF4 4A28 0001                  		tst.b	1(a0)
00015FF8 6A00                       		bpl.s	locret_15A60
00015FFA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015FFE 0240 000F                  		andi.w	#$F,d0
00016002 6600                       		bne.s	locret_15A60
00016004 303C 00B0                  		move.w	#$B0,d0
00016008 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001600E                            
0001600E                            locret_15A60:
0001600E 4E75                       		rts	
00016010                            ; ===========================================================================
00016010                            
00016010                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016010 323C 0030                  		move.w	#$30,d1
00016014 7000                       		moveq	#0,d0
00016016 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001601A 0828 0000 0022             		btst	#0,$22(a0)
00016020 6700                       		beq.s	Obj6A_Animate02
00016022 4440                       		neg.w	d0
00016024 0640 0080                  		addi.w	#$80,d0
00016028                            
00016028                            Obj6A_Animate02:
00016028 3228 0038                  		move.w	$38(a0),d1
0001602C 9240                       		sub.w	d0,d1
0001602E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016032 5328 001E                  		subq.b	#1,$1E(a0)
00016036 6A00                       		bpl.s	loc_15A96
00016038 117C 0002 001E             		move.b	#2,$1E(a0)
0001603E 0868 0000 001A             		bchg	#0,$1A(a0)
00016044                            
00016044                            loc_15A96:
00016044 4A28 0001                  		tst.b	1(a0)
00016048 6A00                       		bpl.s	locret_15AB0
0001604A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001604E 0C00 0018                  		cmpi.b	#$18,d0
00016052 6600                       		bne.s	locret_15AB0
00016054 303C 00B0                  		move.w	#$B0,d0
00016058 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001605E                            
0001605E                            locret_15AB0:
0001605E 4E75                       		rts	
00016060                            ; ===========================================================================
00016060                            
00016060                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016060 4A28 003D                  		tst.b	$3D(a0)
00016064 6600                       		bne.s	Obj6A_Animate03
00016066 3038 D008                  		move.w	($FFFFD008).w,d0
0001606A 0440 00C0                  		subi.w	#$C0,d0
0001606E 6500                       		bcs.s	loc_15B02
00016070 9068 0008                  		sub.w	8(a0),d0
00016074 6500                       		bcs.s	loc_15B02
00016076 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001607A 0440 0080                  		subi.w	#$80,d0
0001607E B068 000C                  		cmp.w	$C(a0),d0
00016082 6400                       		bcc.s	locret_15B04
00016084 0640 0100                  		addi.w	#$100,d0
00016088 B068 000C                  		cmp.w	$C(a0),d0
0001608C 6500                       		bcs.s	locret_15B04
0001608E 117C 0001 003D             		move.b	#1,$3D(a0)
00016094 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001609A 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160A0 117C 0002 001A             		move.b	#2,$1A(a0)
000160A6 303C 00B0                  		move.w	#$B0,d0
000160AA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160B0                            
000160B0                            loc_15B02:
000160B0 588F                       		addq.l	#4,sp
000160B2                            
000160B2                            locret_15B04:
000160B2 4E75                       		rts	
000160B4                            ; ===========================================================================
000160B4                            
000160B4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000160B4 4EB9 0000 DB46             		jsr	SpeedToPos
000160BA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000160C0 5328 001E                  		subq.b	#1,$1E(a0)
000160C4 6A00                       		bpl.s	locret_15B24
000160C6 117C 0002 001E             		move.b	#2,$1E(a0)
000160CC 0868 0000 001A             		bchg	#0,$1A(a0)
000160D2                            
000160D2                            locret_15B24:
000160D2 4E75                       		rts	
000160D4                            ; ===========================================================================
000160D4                            
000160D4                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000160D4 4A28 003D                  		tst.b	$3D(a0)
000160D8 6600                       		bne.s	Obj6A_Animate04
000160DA 3038 D008                  		move.w	($FFFFD008).w,d0
000160DE 0640 00E0                  		addi.w	#$E0,d0
000160E2 9068 0008                  		sub.w	8(a0),d0
000160E6 6400                       		bcc.s	loc_15B74
000160E8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000160EC 0440 0080                  		subi.w	#$80,d0
000160F0 B068 000C                  		cmp.w	$C(a0),d0
000160F4 6400                       		bcc.s	locret_15B76
000160F6 0640 0100                  		addi.w	#$100,d0
000160FA B068 000C                  		cmp.w	$C(a0),d0
000160FE 6500                       		bcs.s	locret_15B76
00016100 117C 0001 003D             		move.b	#1,$3D(a0)
00016106 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001610C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016112 117C 0002 001A             		move.b	#2,$1A(a0)
00016118 303C 00B0                  		move.w	#$B0,d0
0001611C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016122                            
00016122                            loc_15B74:
00016122 588F                       		addq.l	#4,sp
00016124                            
00016124                            locret_15B76:
00016124 4E75                       		rts	
00016126                            ; ===========================================================================
00016126                            
00016126                            Obj6A_Animate04:
00016126 4EB9 0000 DB46             		jsr	SpeedToPos
0001612C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016132 5328 001E                  		subq.b	#1,$1E(a0)
00016136 6A00                       		bpl.s	locret_15B96
00016138 117C 0002 001E             		move.b	#2,$1E(a0)
0001613E 0868 0000 001A             		bchg	#0,$1A(a0)
00016144                            
00016144                            locret_15B96:
00016144 4E75                       		rts	
00016146                            ; ===========================================================================
00016146                            ; ---------------------------------------------------------------------------
00016146                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016146                            ; ---------------------------------------------------------------------------
00016146                            Map_obj6A:
00016146                            	include "_maps\obj6A.asm"
00016146                            ; ---------------------------------------------------------------------------
00016146                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016146                            ; ---------------------------------------------------------------------------
00016146 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001614A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001614E 07                         byte_15BA0:	dc.b 7
0001614F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016154 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016159 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001615E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016163 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016168 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001616D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016172 07                         byte_15BC4:	dc.b 7
00016173 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016178 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001617D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016182 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016187 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001618C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016191 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016196 04                         byte_15BE8:	dc.b 4
00016197 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001619C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161A1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161A6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161AB 04                         byte_15BFD:	dc.b 4
000161AC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161B1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161B6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161BB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161C0                            		even
000161C0                            		even
000161C0                            
000161C0                            ; ===========================================================================
000161C0                            ; ---------------------------------------------------------------------------
000161C0                            ; Object 6B - stomper (SBZ)
000161C0                            ; ---------------------------------------------------------------------------
000161C0                            
000161C0                            Obj6B:					; XREF: Obj_Index
000161C0 7000                       		moveq	#0,d0
000161C2 1028 0024                  		move.b	$24(a0),d0
000161C6 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000161CA 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000161CE                            ; ===========================================================================
000161CE 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000161D0 0000                       		dc.w Obj6B_Action-Obj6B_Index
000161D2                            
000161D2 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000161D6 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000161DA 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000161DE 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000161E2 8040 0005                  		dc.b  $80, $40,	  0,   5
000161E6                            ; ===========================================================================
000161E6                            
000161E6                            Obj6B_Main:				; XREF: Obj6B_Index
000161E6 5428 0024                  		addq.b	#2,$24(a0)
000161EA 7000                       		moveq	#0,d0
000161EC 1028 0028                  		move.b	$28(a0),d0
000161F0 E448                       		lsr.w	#2,d0
000161F2 0240 001C                  		andi.w	#$1C,d0
000161F6 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000161FA 115B 0019                  		move.b	(a3)+,$19(a0)
000161FE 115B 0016                  		move.b	(a3)+,$16(a0)
00016202 E448                       		lsr.w	#2,d0
00016204 1140 001A                  		move.b	d0,$1A(a0)
00016208 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016210 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016216 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001621C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001621E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016224 6700                       		beq.s	Obj6B_SBZ3
00016226                            
00016226                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016226 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001622A 7000                       		moveq	#0,d0
0001622C 1028 0023                  		move.b	$23(a0),d0
00016230 6700                       		beq.s	Obj6B_Delete
00016232 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016238                            
00016238                            Obj6B_Delete:
00016238 4EF9 0000 DBA8             		jmp	DeleteObject
0001623E                            ; ===========================================================================
0001623E                            
0001623E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001623E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016244 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001624A 6600                       		bne.s	Obj6B_SBZ12
0001624C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016250 7000                       		moveq	#0,d0
00016252 1028 0023                  		move.b	$23(a0),d0
00016256 6700                       		beq.s	Obj6B_SBZ12
00016258 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001625E 6700                       		beq.s	Obj6B_SBZ12
00016260 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016264 60C0                       		bra.s	Obj6B_ChkGone
00016266                            ; ===========================================================================
00016266                            
00016266                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016266 0028 0004 0001             		ori.b	#4,1(a0)
0001626C 117C 0004 0018             		move.b	#4,$18(a0)
00016272 3168 0008 0034             		move.w	8(a0),$34(a0)
00016278 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001627E 7000                       		moveq	#0,d0
00016280 101B                       		move.b	(a3)+,d0
00016282 3140 003C                  		move.w	d0,$3C(a0)
00016286 7000                       		moveq	#0,d0
00016288 1028 0028                  		move.b	$28(a0),d0
0001628C 6A00                       		bpl.s	Obj6B_Action
0001628E 0200 000F                  		andi.b	#$F,d0
00016292 1140 003E                  		move.b	d0,$3E(a0)
00016296 1153 0028                  		move.b	(a3),$28(a0)
0001629A 0C13 0005                  		cmpi.b	#5,(a3)
0001629E 6600                       		bne.s	Obj6B_ChkGone2
000162A0 08E8 0004 0001             		bset	#4,1(a0)
000162A6                            
000162A6                            Obj6B_ChkGone2:
000162A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162AA 7000                       		moveq	#0,d0
000162AC 1028 0023                  		move.b	$23(a0),d0
000162B0 6700                       		beq.s	Obj6B_Action
000162B2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000162B8                            
000162B8                            Obj6B_Action:				; XREF: Obj6B_Index
000162B8 3F28 0008                  		move.w	8(a0),-(sp)
000162BC 7000                       		moveq	#0,d0
000162BE 1028 0028                  		move.b	$28(a0),d0
000162C2 0240 000F                  		andi.w	#$F,d0
000162C6 D040                       		add.w	d0,d0
000162C8 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000162CC 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000162D0 381F                       		move.w	(sp)+,d4
000162D2 4A28 0001                  		tst.b	1(a0)
000162D6 6A00                       		bpl.s	Obj6B_ChkDel
000162D8 7200                       		moveq	#0,d1
000162DA 1228 0019                  		move.b	$19(a0),d1
000162DE 0641 000B                  		addi.w	#$B,d1
000162E2 7400                       		moveq	#0,d2
000162E4 1428 0016                  		move.b	$16(a0),d2
000162E8 3602                       		move.w	d2,d3
000162EA 5243                       		addq.w	#1,d3
000162EC 6100 9C4E                  		bsr.w	SolidObject
000162F0                            
000162F0                            Obj6B_ChkDel:
000162F0 3028 0034                  		move.w	$34(a0),d0
000162F4 0240 FF80                  		andi.w	#$FF80,d0
000162F8 3238 F700                  		move.w	($FFFFF700).w,d1
000162FC 0441 0080                  		subi.w	#$80,d1
00016300 0241 FF80                  		andi.w	#$FF80,d1
00016304 9041                       		sub.w	d1,d0
00016306 0C40 0280                  		cmpi.w	#$280,d0
0001630A 6200                       		bhi.s	loc_15D64
0001630C 4EF9 0000 DB6C             		jmp	DisplaySprite
00016312                            ; ===========================================================================
00016312                            
00016312                            loc_15D64:
00016312 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016318 6600                       		bne.s	Obj6B_Delete2
0001631A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001631E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016322 7000                       		moveq	#0,d0
00016324 1028 0023                  		move.b	$23(a0),d0
00016328 6700                       		beq.s	Obj6B_Delete2
0001632A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016330                            
00016330                            Obj6B_Delete2:
00016330 4EF9 0000 DBA8             		jmp	DeleteObject
00016336                            ; ===========================================================================
00016336 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001633A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001633E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016342                            ; ===========================================================================
00016342                            
00016342                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016342 4E75                       		rts	
00016344                            ; ===========================================================================
00016344                            
00016344                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016344 4A28 0038                  		tst.b	$38(a0)
00016348 6600                       		bne.s	loc_15DB4
0001634A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001634E 7000                       		moveq	#0,d0
00016350 1028 003E                  		move.b	$3E(a0),d0
00016354 0832 0000 0000             		btst	#0,(a2,d0.w)
0001635A 6700                       		beq.s	loc_15DC2
0001635C 117C 0001 0038             		move.b	#1,$38(a0)
00016362                            
00016362                            loc_15DB4:
00016362 3028 003C                  		move.w	$3C(a0),d0
00016366 B068 003A                  		cmp.w	$3A(a0),d0
0001636A 6700                       		beq.s	loc_15DE0
0001636C 5468 003A                  		addq.w	#2,$3A(a0)
00016370                            
00016370                            loc_15DC2:
00016370 3028 003A                  		move.w	$3A(a0),d0
00016374 0828 0000 0022             		btst	#0,$22(a0)
0001637A 6700                       		beq.s	loc_15DD4
0001637C 4440                       		neg.w	d0
0001637E 0640 0080                  		addi.w	#$80,d0
00016382                            
00016382                            loc_15DD4:
00016382 3228 0034                  		move.w	$34(a0),d1
00016386 9240                       		sub.w	d0,d1
00016388 3141 0008                  		move.w	d1,8(a0)
0001638C 4E75                       		rts	
0001638E                            ; ===========================================================================
0001638E                            
0001638E                            loc_15DE0:
0001638E 5228 0028                  		addq.b	#1,$28(a0)
00016392 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016398 4228 0038                  		clr.b	$38(a0)
0001639C 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163A0 7000                       		moveq	#0,d0
000163A2 1028 0023                  		move.b	$23(a0),d0
000163A6 67C8                       		beq.s	loc_15DC2
000163A8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163AE 60C0                       		bra.s	loc_15DC2
000163B0                            ; ===========================================================================
000163B0                            
000163B0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000163B0 4A28 0038                  		tst.b	$38(a0)
000163B4 6600                       		bne.s	loc_15E14
000163B6 5368 0036                  		subq.w	#1,$36(a0)
000163BA 6600                       		bne.s	loc_15E1E
000163BC 117C 0001 0038             		move.b	#1,$38(a0)
000163C2                            
000163C2                            loc_15E14:
000163C2 4A68 003A                  		tst.w	$3A(a0)
000163C6 6700                       		beq.s	loc_15E3C
000163C8 5568 003A                  		subq.w	#2,$3A(a0)
000163CC                            
000163CC                            loc_15E1E:
000163CC 3028 003A                  		move.w	$3A(a0),d0
000163D0 0828 0000 0022             		btst	#0,$22(a0)
000163D6 6700                       		beq.s	loc_15E30
000163D8 4440                       		neg.w	d0
000163DA 0640 0080                  		addi.w	#$80,d0
000163DE                            
000163DE                            loc_15E30:
000163DE 3228 0034                  		move.w	$34(a0),d1
000163E2 9240                       		sub.w	d0,d1
000163E4 3141 0008                  		move.w	d1,8(a0)
000163E8 4E75                       		rts	
000163EA                            ; ===========================================================================
000163EA                            
000163EA                            loc_15E3C:
000163EA 5328 0028                  		subq.b	#1,$28(a0)
000163EE 4228 0038                  		clr.b	$38(a0)
000163F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163F6 7000                       		moveq	#0,d0
000163F8 1028 0023                  		move.b	$23(a0),d0
000163FC 67CE                       		beq.s	loc_15E1E
000163FE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016404 60C6                       		bra.s	loc_15E1E
00016406                            ; ===========================================================================
00016406                            
00016406                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016406 4A28 0038                  		tst.b	$38(a0)
0001640A 6600                       		bne.s	loc_15E7C
0001640C 4A68 003A                  		tst.w	$3A(a0)
00016410 6700                       		beq.s	loc_15E6A
00016412 5368 003A                  		subq.w	#1,$3A(a0)
00016416 6000                       		bra.s	loc_15E8E
00016418                            ; ===========================================================================
00016418                            
00016418                            loc_15E6A:
00016418 5368 0036                  		subq.w	#1,$36(a0)
0001641C 6A00                       		bpl.s	loc_15E8E
0001641E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016424 117C 0001 0038             		move.b	#1,$38(a0)
0001642A                            
0001642A                            loc_15E7C:
0001642A 5068 003A                  		addq.w	#8,$3A(a0)
0001642E 3028 003A                  		move.w	$3A(a0),d0
00016432 B068 003C                  		cmp.w	$3C(a0),d0
00016436 6600                       		bne.s	loc_15E8E
00016438 4228 0038                  		clr.b	$38(a0)
0001643C                            
0001643C                            loc_15E8E:
0001643C 3028 003A                  		move.w	$3A(a0),d0
00016440 0828 0000 0022             		btst	#0,$22(a0)
00016446 6700                       		beq.s	loc_15EA0
00016448 4440                       		neg.w	d0
0001644A 0640 0038                  		addi.w	#$38,d0
0001644E                            
0001644E                            loc_15EA0:
0001644E 3228 0030                  		move.w	$30(a0),d1
00016452 D240                       		add.w	d0,d1
00016454 3141 000C                  		move.w	d1,$C(a0)
00016458 4E75                       		rts	
0001645A                            ; ===========================================================================
0001645A                            
0001645A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001645A 4A28 0038                  		tst.b	$38(a0)
0001645E 6600                       		bne.s	loc_15ED0
00016460 4A68 003A                  		tst.w	$3A(a0)
00016464 6700                       		beq.s	loc_15EBE
00016466 5168 003A                  		subq.w	#8,$3A(a0)
0001646A 6000                       		bra.s	loc_15EF0
0001646C                            ; ===========================================================================
0001646C                            
0001646C                            loc_15EBE:
0001646C 5368 0036                  		subq.w	#1,$36(a0)
00016470 6A00                       		bpl.s	loc_15EF0
00016472 317C 003C 0036             		move.w	#$3C,$36(a0)
00016478 117C 0001 0038             		move.b	#1,$38(a0)
0001647E                            
0001647E                            loc_15ED0:
0001647E 3028 003A                  		move.w	$3A(a0),d0
00016482 B068 003C                  		cmp.w	$3C(a0),d0
00016486 6700                       		beq.s	loc_15EE0
00016488 5068 003A                  		addq.w	#8,$3A(a0)
0001648C 6000                       		bra.s	loc_15EF0
0001648E                            ; ===========================================================================
0001648E                            
0001648E                            loc_15EE0:
0001648E 5368 0036                  		subq.w	#1,$36(a0)
00016492 6A00                       		bpl.s	loc_15EF0
00016494 317C 003C 0036             		move.w	#$3C,$36(a0)
0001649A 4228 0038                  		clr.b	$38(a0)
0001649E                            
0001649E                            loc_15EF0:
0001649E 3028 003A                  		move.w	$3A(a0),d0
000164A2 0828 0000 0022             		btst	#0,$22(a0)
000164A8 6700                       		beq.s	loc_15F02
000164AA 4440                       		neg.w	d0
000164AC 0640 0038                  		addi.w	#$38,d0
000164B0                            
000164B0                            loc_15F02:
000164B0 3228 0030                  		move.w	$30(a0),d1
000164B4 D240                       		add.w	d0,d1
000164B6 3141 000C                  		move.w	d1,$C(a0)
000164BA 4E75                       		rts	
000164BC                            ; ===========================================================================
000164BC                            
000164BC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000164BC 4A28 0038                  		tst.b	$38(a0)
000164C0 6600                       		bne.s	loc_15F3E
000164C2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000164C6 7000                       		moveq	#0,d0
000164C8 1028 003E                  		move.b	$3E(a0),d0
000164CC 0832 0000 0000             		btst	#0,(a2,d0.w)
000164D2 6700                       		beq.s	locret_15F5C
000164D4 117C 0001 0038             		move.b	#1,$38(a0)
000164DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164DE 7000                       		moveq	#0,d0
000164E0 1028 0023                  		move.b	$23(a0),d0
000164E4 6700                       		beq.s	loc_15F3E
000164E6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000164EC                            
000164EC                            loc_15F3E:
000164EC 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000164F4 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000164FC 3168 0008 0034             		move.w	8(a0),$34(a0)
00016502 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016508 6700                       		beq.s	loc_15F5E
0001650A                            
0001650A                            locret_15F5C:
0001650A 4E75                       		rts	
0001650C                            ; ===========================================================================
0001650C                            
0001650C                            loc_15F5E:
0001650C 4228 0028                  		clr.b	$28(a0)
00016510 4228 0038                  		clr.b	$38(a0)
00016514 4E75                       		rts	
00016516                            ; ===========================================================================
00016516                            ; ---------------------------------------------------------------------------
00016516                            ; Sprite mappings - stomper and	platforms (SBZ)
00016516                            ; ---------------------------------------------------------------------------
00016516                            Map_obj6B:
00016516                            	include "_maps\obj6B.asm"
00016516                            ; ---------------------------------------------------------------------------
00016516                            ; Sprite mappings - stomper and	platforms (SBZ)
00016516                            ; ---------------------------------------------------------------------------
00016516 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001651A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001651E 0000                       		dc.w byte_15FB0-Map_obj6B
00016520 04                         byte_15F72:	dc.b 4
00016521 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016526 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001652B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016530 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016535 08                         byte_15F87:	dc.b 8
00016536 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001653B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016540 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016545 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001654A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001654F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016554 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016559 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001655E 0E                         byte_15FB0:	dc.b $E
0001655F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016564 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016569 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001656E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016573 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016578 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001657D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016582 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016587 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001658C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016591 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016596 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001659B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000165A0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000165A6 00                         		even
000165A6 00                         		even
000165A6                            
000165A6                            ; ===========================================================================
000165A6                            ; ---------------------------------------------------------------------------
000165A6                            ; Object 6C - vanishing	platforms (SBZ)
000165A6                            ; ---------------------------------------------------------------------------
000165A6                            
000165A6                            Obj6C:					; XREF: Obj_Index
000165A6 7000                       		moveq	#0,d0
000165A8 1028 0024                  		move.b	$24(a0),d0
000165AC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000165B0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000165B4                            ; ===========================================================================
000165B4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000165B6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165B8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165BA 0000                       		dc.w loc_16068-Obj6C_Index
000165BC                            ; ===========================================================================
000165BC                            
000165BC                            Obj6C_Main:				; XREF: Obj6C_Index
000165BC 5C28 0024                  		addq.b	#6,$24(a0)
000165C0 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000165C8 317C 44C3 0002             		move.w	#$44C3,2(a0)
000165CE 0028 0004 0001             		ori.b	#4,1(a0)
000165D4 117C 0010 0019             		move.b	#$10,$19(a0)
000165DA 117C 0004 0018             		move.b	#4,$18(a0)
000165E0 7000                       		moveq	#0,d0
000165E2 1028 0028                  		move.b	$28(a0),d0	; get object type
000165E6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000165EA 5240                       		addq.w	#1,d0		; add 1
000165EC EF48                       		lsl.w	#7,d0		; multiply by $80
000165EE 3200                       		move.w	d0,d1
000165F0 5340                       		subq.w	#1,d0
000165F2 3140 0030                  		move.w	d0,$30(a0)
000165F6 3140 0032                  		move.w	d0,$32(a0)
000165FA 7000                       		moveq	#0,d0
000165FC 1028 0028                  		move.b	$28(a0),d0	; get object type
00016600 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016604 0641 0080                  		addi.w	#$80,d1
00016608 C0C1                       		mulu.w	d1,d0
0001660A E088                       		lsr.l	#8,d0
0001660C 3140 0036                  		move.w	d0,$36(a0)
00016610 5341                       		subq.w	#1,d1
00016612 3141 0038                  		move.w	d1,$38(a0)
00016616                            
00016616                            loc_16068:				; XREF: Obj6C_Index
00016616 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001661A 9068 0036                  		sub.w	$36(a0),d0
0001661E C068 0038                  		and.w	$38(a0),d0
00016622 6600                       		bne.s	Obj6C_Animate
00016624 5928 0024                  		subq.b	#4,$24(a0)
00016628 6000                       		bra.s	Obj6C_Vanish
0001662A                            ; ===========================================================================
0001662A                            
0001662A                            Obj6C_Animate:
0001662A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016630 4EB9 0000 AC42             		jsr	AnimateSprite
00016636 6000 95DC                  		bra.w	MarkObjGone
0001663A                            ; ===========================================================================
0001663A                            
0001663A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001663A 5368 0030                  		subq.w	#1,$30(a0)
0001663E 6A00                       		bpl.s	loc_160AA
00016640 317C 007F 0030             		move.w	#127,$30(a0)
00016646 4A28 001C                  		tst.b	$1C(a0)
0001664A 6700                       		beq.s	loc_160A4
0001664C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016652                            
00016652                            loc_160A4:
00016652 0868 0000 001C             		bchg	#0,$1C(a0)
00016658                            
00016658                            loc_160AA:
00016658 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001665E 4EB9 0000 AC42             		jsr	AnimateSprite
00016664 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001666A 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001666C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016672 6600                       		bne.s	loc_160D6
00016674 7200                       		moveq	#0,d1
00016676 1228 0019                  		move.b	$19(a0),d1
0001667A 4EB9 0000 789E             		jsr	(PlatformObject).l
00016680 6000 9592                  		bra.w	MarkObjGone
00016684                            ; ===========================================================================
00016684                            
00016684                            loc_160D6:
00016684 7200                       		moveq	#0,d1
00016686 1228 0019                  		move.b	$19(a0),d1
0001668A 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00016690 3428 0008                  		move.w	8(a0),d2
00016694 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
0001669A 6000 9578                  		bra.w	MarkObjGone
0001669E                            ; ===========================================================================
0001669E                            
0001669E                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001669E 0828 0003 0022             		btst	#3,$22(a0)
000166A4 6700                       		beq.s	Obj6C_Display
000166A6 43F8 D000                  		lea	($FFFFD000).w,a1
000166AA 08A9 0003 0022             		bclr	#3,$22(a1)
000166B0 08A8 0003 0022             		bclr	#3,$22(a0)
000166B6 117C 0002 0024             		move.b	#2,$24(a0)
000166BC 4228 0025                  		clr.b	$25(a0)
000166C0                            
000166C0                            Obj6C_Display:
000166C0 6000 9552                  		bra.w	MarkObjGone
000166C4                            ; ===========================================================================
000166C4                            Ani_obj6C:
000166C4                            	include "_anim\obj6C.asm"
000166C4                            ; ---------------------------------------------------------------------------
000166C4                            ; Animation script - vanishing platforms (SBZ)
000166C4                            ; ---------------------------------------------------------------------------
000166C4 0000                       		dc.w byte_1611A-Ani_obj6C
000166C6 0000                       		dc.w byte_16122-Ani_obj6C
000166C8 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000166D0 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000166D8                            		even
000166D8                            		even
000166D8                            
000166D8                            ; ---------------------------------------------------------------------------
000166D8                            ; Sprite mappings - vanishing platforms	(SBZ)
000166D8                            ; ---------------------------------------------------------------------------
000166D8                            Map_obj6C:
000166D8                            	include "_maps\obj6C.asm"
000166D8                            ; ---------------------------------------------------------------------------
000166D8                            ; Sprite mappings - vanishing platforms	(SBZ)
000166D8                            ; ---------------------------------------------------------------------------
000166D8 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000166DC 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000166E0 01                         byte_16132:	dc.b 1
000166E1 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000166E6 01                         byte_16138:	dc.b 1
000166E7 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000166EC 01                         byte_1613E:	dc.b 1
000166ED F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000166F2 00                         byte_16144:	dc.b 0
000166F4 00                         		even
000166F4 00                         		even
000166F4                            
000166F4                            ; ===========================================================================
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            ; Object 6E - electrocution orbs (SBZ)
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            
000166F4                            Obj6E:					; XREF: Obj_Index
000166F4 7000                       		moveq	#0,d0
000166F6 1028 0024                  		move.b	$24(a0),d0
000166FA 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000166FE 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016702                            ; ===========================================================================
00016702 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016704 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016706                            ; ===========================================================================
00016706                            
00016706                            Obj6E_Main:				; XREF: Obj6E_Index
00016706 5428 0024                  		addq.b	#2,$24(a0)
0001670A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016712 317C 047E 0002             		move.w	#$47E,2(a0)
00016718 0028 0004 0001             		ori.b	#4,1(a0)
0001671E 117C 0028 0019             		move.b	#$28,$19(a0)
00016724 7000                       		moveq	#0,d0
00016726 1028 0028                  		move.b	$28(a0),d0	; read object type
0001672A E948                       		lsl.w	#4,d0		; multiply by $10
0001672C 5340                       		subq.w	#1,d0
0001672E 3140 0034                  		move.w	d0,$34(a0)
00016732                            
00016732                            Obj6E_Shock:				; XREF: Obj6E_Index
00016732 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016736 C068 0034                  		and.w	$34(a0),d0
0001673A 6600                       		bne.s	Obj6E_Animate
0001673C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016742 4A28 0001                  		tst.b	1(a0)
00016746 6A00                       		bpl.s	Obj6E_Animate
00016748 303C 00B1                  		move.w	#$B1,d0
0001674C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
00016752                            
00016752                            Obj6E_Animate:
00016752 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016758 4EB9 0000 AC42             		jsr	AnimateSprite
0001675E 117C 0000 0020             		move.b	#0,$20(a0)
00016764 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001676A 6600                       		bne.s	Obj6E_Display	; if not, branch
0001676C 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016772                            
00016772                            Obj6E_Display:
00016772 6000 94A0                  		bra.w	MarkObjGone
00016776                            ; ===========================================================================
00016776                            Ani_obj6E:
00016776                            	include "_anim\obj6E.asm"
00016776                            ; ---------------------------------------------------------------------------
00016776                            ; Animation script - electrocution orbs (SBZ)
00016776                            ; ---------------------------------------------------------------------------
00016776 0000                       		dc.w byte_161CC-Ani_obj6E
00016778 0000                       		dc.w byte_161D0-Ani_obj6E
0001677A 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001677E 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001678E                            		even
0001678E                            		even
0001678E                            
0001678E                            ; ---------------------------------------------------------------------------
0001678E                            ; Sprite mappings - electrocution orbs (SBZ)
0001678E                            ; ---------------------------------------------------------------------------
0001678E                            Map_obj6E:
0001678E                            	include "_maps\obj6E.asm"
0001678E                            ; ---------------------------------------------------------------------------
0001678E                            ; Sprite mappings - electrocution orbs (SBZ)
0001678E                            ; ---------------------------------------------------------------------------
0001678E 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00016792 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016796 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
0001679A 02                         byte_161EC:	dc.b 2
0001679B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167A0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167A5 03                         byte_161F7:	dc.b 3
000167A6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000167AB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167B0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167B5 05                         byte_16207:	dc.b 5
000167B6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000167BB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167C0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167C5 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000167CA F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000167CF 04                         byte_16221:	dc.b 4
000167D0 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167D5 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167DA F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000167DF F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000167E4 06                         byte_16236:	dc.b 6
000167E5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167EA 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167EF F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000167F4 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000167F9 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000167FE F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016803 04                         byte_16255:	dc.b 4
00016804 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016809 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001680E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016813 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016818                            		even
00016818                            		even
00016818                            
00016818                            ; ===========================================================================
00016818                            ; ---------------------------------------------------------------------------
00016818                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016818                            ; ---------------------------------------------------------------------------
00016818                            
00016818                            Obj6F:					; XREF: Obj_Index
00016818 7000                       		moveq	#0,d0
0001681A 1028 0024                  		move.b	$24(a0),d0
0001681E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016822 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016826 3028 0030                  		move.w	$30(a0),d0
0001682A 0240 FF80                  		andi.w	#$FF80,d0
0001682E 3238 F700                  		move.w	($FFFFF700).w,d1
00016832 0441 0080                  		subi.w	#$80,d1
00016836 0241 FF80                  		andi.w	#$FF80,d1
0001683A 9041                       		sub.w	d1,d0
0001683C 0C40 0280                  		cmpi.w	#$280,d0
00016840 6200                       		bhi.s	loc_1629A
00016842                            
00016842                            Obj6F_Display:
00016842 4EF9 0000 DB6C             		jmp	DisplaySprite
00016848                            ; ===========================================================================
00016848                            
00016848                            loc_1629A:
00016848 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001684E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016850 0C40 FF80                  		cmpi.w	#-$80,d0
00016854 64EC                       		bcc.s	Obj6F_Display
00016856                            
00016856                            Obj6F_Act1or2:
00016856 1028 002F                  		move.b	$2F(a0),d0
0001685A 6A00                       		bpl.s	Obj6F_Delete
0001685C 0240 007F                  		andi.w	#$7F,d0
00016860 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016864 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001686A                            
0001686A                            Obj6F_Delete:
0001686A 4EF9 0000 DBA8             		jmp	DeleteObject
00016870                            ; ===========================================================================
00016870 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016872 0000                       		dc.w loc_163D8-Obj6F_Index
00016874                            ; ===========================================================================
00016874                            
00016874                            Obj6F_Main:				; XREF: Obj6F_Index
00016874 1028 0028                  		move.b	$28(a0),d0
00016878 6B00 0000                  		bmi.w	loc_16380
0001687C 5428 0024                  		addq.b	#2,$24(a0)
00016880 217C 0001 5EE8 0004        		move.l	#Map_obj69a,4(a0)
00016888 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001688E 117C 0010 0019             		move.b	#$10,$19(a0)
00016894 0028 0004 0001             		ori.b	#4,1(a0)
0001689A 117C 0004 0018             		move.b	#4,$18(a0)
000168A0 7000                       		moveq	#0,d0
000168A2 1028 0028                  		move.b	$28(a0),d0
000168A6 3200                       		move.w	d0,d1
000168A8 E648                       		lsr.w	#3,d0
000168AA 0240 001E                  		andi.w	#$1E,d0
000168AE 45FA 0000                  		lea	off_164A6(pc),a2
000168B2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000168B6 315A 0038                  		move.w	(a2)+,$38(a0)
000168BA 315A 0030                  		move.w	(a2)+,$30(a0)
000168BE 214A 003C                  		move.l	a2,$3C(a0)
000168C2 0241 000F                  		andi.w	#$F,d1
000168C6 E549                       		lsl.w	#2,d1
000168C8 1141 0038                  		move.b	d1,$38(a0)
000168CC 117C 0004 003A             		move.b	#4,$3A(a0)
000168D2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000168D6 6700                       		beq.s	loc_16356
000168D8 117C 0001 003B             		move.b	#1,$3B(a0)
000168DE 4428 003A                  		neg.b	$3A(a0)
000168E2 7200                       		moveq	#0,d1
000168E4 1228 0038                  		move.b	$38(a0),d1
000168E8 D228 003A                  		add.b	$3A(a0),d1
000168EC B228 0039                  		cmp.b	$39(a0),d1
000168F0 6500                       		bcs.s	loc_16352
000168F2 1001                       		move.b	d1,d0
000168F4 7200                       		moveq	#0,d1
000168F6 4A00                       		tst.b	d0
000168F8 6A00                       		bpl.s	loc_16352
000168FA 1228 0039                  		move.b	$39(a0),d1
000168FE 5901                       		subq.b	#4,d1
00016900                            
00016900                            loc_16352:
00016900 1141 0038                  		move.b	d1,$38(a0)
00016904                            
00016904                            loc_16356:
00016904 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001690A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016910 4A41                       		tst.w	d1
00016912 6600                       		bne.s	loc_1636C
00016914 117C 0001 001C             		move.b	#1,$1C(a0)
0001691A                            
0001691A                            loc_1636C:
0001691A 0C41 0008                  		cmpi.w	#8,d1
0001691E 6600                       		bne.s	loc_16378
00016920 117C 0000 001C             		move.b	#0,$1C(a0)
00016926                            
00016926                            loc_16378:
00016926 6100 C184                  		bsr.w	Obj63_ChangeDir
0001692A 6000 0000                  		bra.w	loc_163D8
0001692E                            ; ===========================================================================
0001692E                            
0001692E                            loc_16380:				; XREF: Obj6F_Main
0001692E 1140 002F                  		move.b	d0,$2F(a0)
00016932 0240 007F                  		andi.w	#$7F,d0
00016936 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001693A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016940 6700                       		beq.s	loc_1639A
00016942 4EF9 0000 DBA8             		jmp	DeleteObject
00016948                            ; ===========================================================================
00016948                            
00016948                            loc_1639A:
00016948 D040                       		add.w	d0,d0
0001694A 0240 001E                  		andi.w	#$1E,d0
0001694E 0640 0080                  		addi.w	#$80,d0
00016952 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016958 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001695C 321A                       		move.w	(a2)+,d1
0001695E 2248                       		movea.l	a0,a1
00016960 6000                       		bra.s	Obj6F_LoadPform
00016962                            ; ===========================================================================
00016962                            
00016962                            Obj6F_Loop:
00016962 4EB9 0000 DFF2             		jsr	SingleObjLoad
00016968 6600                       		bne.s	loc_163D0
0001696A                            
0001696A                            Obj6F_LoadPform:			; XREF: loc_1639A
0001696A 12BC 006F                  		move.b	#$6F,0(a1)
0001696E 335A 0008                  		move.w	(a2)+,8(a1)
00016972 335A 000C                  		move.w	(a2)+,$C(a1)
00016976 301A                       		move.w	(a2)+,d0
00016978 1340 0028                  		move.b	d0,$28(a1)
0001697C                            
0001697C                            loc_163D0:
0001697C 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016980                            
00016980 588F                       		addq.l	#4,sp
00016982 4E75                       		rts	
00016984                            ; ===========================================================================
00016984                            
00016984                            loc_163D8:				; XREF: Obj6F_Index
00016984 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0001698A 4EB9 0000 AC42             		jsr	AnimateSprite
00016990 4A28 001A                  		tst.b	$1A(a0)
00016994 6600                       		bne.s	loc_16404
00016996 3F28 0008                  		move.w	8(a0),-(sp)
0001699A 6100 0000                  		bsr.w	loc_16424
0001699E 323C 001B                  		move.w	#$1B,d1
000169A2 343C 0007                  		move.w	#7,d2
000169A6 3602                       		move.w	d2,d3
000169A8 5243                       		addq.w	#1,d3
000169AA 381F                       		move.w	(sp)+,d4
000169AC 6000 958E                  		bra.w	SolidObject
000169B0                            ; ===========================================================================
000169B0                            
000169B0                            loc_16404:
000169B0 0828 0003 0022             		btst	#3,$22(a0)
000169B6 6700                       		beq.s	loc_16420
000169B8 43F8 D000                  		lea	($FFFFD000).w,a1
000169BC 08A9 0003 0022             		bclr	#3,$22(a1)
000169C2 08A8 0003 0022             		bclr	#3,$22(a0)
000169C8 4228 0025                  		clr.b	$25(a0)
000169CC                            
000169CC                            loc_16420:
000169CC 6000 0002                  		bra.w	*+4
000169D0                            
000169D0                            loc_16424:
000169D0 3028 0008                  		move.w	8(a0),d0
000169D4 B068 0034                  		cmp.w	$34(a0),d0
000169D8 6600                       		bne.s	loc_16484
000169DA 3028 000C                  		move.w	$C(a0),d0
000169DE B068 0036                  		cmp.w	$36(a0),d0
000169E2 6600                       		bne.s	loc_16484
000169E4 7200                       		moveq	#0,d1
000169E6 1228 0038                  		move.b	$38(a0),d1
000169EA D228 003A                  		add.b	$3A(a0),d1
000169EE B228 0039                  		cmp.b	$39(a0),d1
000169F2 6500                       		bcs.s	loc_16456
000169F4 1001                       		move.b	d1,d0
000169F6 7200                       		moveq	#0,d1
000169F8 4A00                       		tst.b	d0
000169FA 6A00                       		bpl.s	loc_16456
000169FC 1228 0039                  		move.b	$39(a0),d1
00016A00 5901                       		subq.b	#4,d1
00016A02                            
00016A02                            loc_16456:
00016A02 1141 0038                  		move.b	d1,$38(a0)
00016A06 2268 003C                  		movea.l	$3C(a0),a1
00016A0A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A10 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A16 4A41                       		tst.w	d1
00016A18 6600                       		bne.s	loc_16474
00016A1A 117C 0001 001C             		move.b	#1,$1C(a0)
00016A20                            
00016A20                            loc_16474:
00016A20 0C41 0008                  		cmpi.w	#8,d1
00016A24 6600                       		bne.s	loc_16480
00016A26 117C 0000 001C             		move.b	#0,$1C(a0)
00016A2C                            
00016A2C                            loc_16480:
00016A2C 6100 C07E                  		bsr.w	Obj63_ChangeDir
00016A30                            
00016A30                            loc_16484:
00016A30 4EF9 0000 DB46             		jmp	SpeedToPos
00016A36                            ; ===========================================================================
00016A36                            Ani_obj6F:
00016A36                            	include "_anim\obj6F.asm"
00016A36                            ; ---------------------------------------------------------------------------
00016A36                            ; Animation script - platform on conveyor belt (SBZ)
00016A36                            ; ---------------------------------------------------------------------------
00016A36 0000                       		dc.w byte_1648E-Ani_obj6F
00016A38 0000                       		dc.w byte_164A2-Ani_obj6F
00016A3A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016A47 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016A4E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016A52 00                         		even
00016A52 00                         		even
00016A52                            
00016A52 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016A58 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016A5E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016A72 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016A86 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016A9A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016AAE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016AC2 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016AD6                            ; ===========================================================================
00016AD6                            ; ---------------------------------------------------------------------------
00016AD6                            ; Object 70 - large girder block (SBZ)
00016AD6                            ; ---------------------------------------------------------------------------
00016AD6                            
00016AD6                            Obj70:					; XREF: Obj_Index
00016AD6 7000                       		moveq	#0,d0
00016AD8 1028 0024                  		move.b	$24(a0),d0
00016ADC 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016AE0 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016AE4                            ; ===========================================================================
00016AE4 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016AE6 0000                       		dc.w Obj70_Action-Obj70_Index
00016AE8                            ; ===========================================================================
00016AE8                            
00016AE8                            Obj70_Main:				; XREF: Obj70_Index
00016AE8 5428 0024                  		addq.b	#2,$24(a0)
00016AEC 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016AF4 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016AFA 0028 0004 0001             		ori.b	#4,1(a0)
00016B00 117C 0004 0018             		move.b	#4,$18(a0)
00016B06 117C 0060 0019             		move.b	#$60,$19(a0)
00016B0C 117C 0018 0016             		move.b	#$18,$16(a0)
00016B12 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B18 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B1E 6100 0000                  		bsr.w	Obj70_Move2
00016B22                            
00016B22                            Obj70_Action:				; XREF: Obj70_Index
00016B22 3F28 0008                  		move.w	8(a0),-(sp)
00016B26 4A68 003A                  		tst.w	$3A(a0)
00016B2A 6700                       		beq.s	Obj70_Move
00016B2C 5368 003A                  		subq.w	#1,$3A(a0)
00016B30 6600                       		bne.s	Obj70_Solid
00016B32                            
00016B32                            Obj70_Move:
00016B32 4EB9 0000 DB46             		jsr	SpeedToPos
00016B38 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016B3C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016B3E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016B42                            
00016B42                            Obj70_Solid:
00016B42 381F                       		move.w	(sp)+,d4
00016B44 4A28 0001                  		tst.b	1(a0)
00016B48 6A00                       		bpl.s	Obj70_ChkDel
00016B4A 7200                       		moveq	#0,d1
00016B4C 1228 0019                  		move.b	$19(a0),d1
00016B50 0641 000B                  		addi.w	#$B,d1
00016B54 7400                       		moveq	#0,d2
00016B56 1428 0016                  		move.b	$16(a0),d2
00016B5A 3602                       		move.w	d2,d3
00016B5C 5243                       		addq.w	#1,d3
00016B5E 6100 93DC                  		bsr.w	SolidObject
00016B62                            
00016B62                            Obj70_ChkDel:
00016B62 3028 0032                  		move.w	$32(a0),d0
00016B66 0240 FF80                  		andi.w	#$FF80,d0
00016B6A 3238 F700                  		move.w	($FFFFF700).w,d1
00016B6E 0441 0080                  		subi.w	#$80,d1
00016B72 0241 FF80                  		andi.w	#$FF80,d1
00016B76 9041                       		sub.w	d1,d0
00016B78 0C40 0280                  		cmpi.w	#$280,d0
00016B7C 6200                       		bhi.s	Obj70_Delete
00016B7E 4EF9 0000 DB6C             		jmp	DisplaySprite
00016B84                            ; ===========================================================================
00016B84                            
00016B84                            Obj70_Delete:
00016B84 4EF9 0000 DBA8             		jmp	DeleteObject
00016B8A                            ; ===========================================================================
00016B8A                            
00016B8A                            Obj70_Move2:				; XREF: Obj70_Main
00016B8A 1028 0038                  		move.b	$38(a0),d0
00016B8E 0240 0018                  		andi.w	#$18,d0
00016B92 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016B98 43F1 0000                  		lea	(a1,d0.w),a1
00016B9C 3159 0010                  		move.w	(a1)+,$10(a0)
00016BA0 3159 0012                  		move.w	(a1)+,$12(a0)
00016BA4 3159 0034                  		move.w	(a1)+,$34(a0)
00016BA8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016BAC 317C 0007 003A             		move.w	#7,$3A(a0)
00016BB2 4E75                       		rts	
00016BB4                            ; ===========================================================================
00016BB4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016BBC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016BC4 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016BCC 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016BD4                            ; ---------------------------------------------------------------------------
00016BD4                            ; Sprite mappings - large girder block (SBZ)
00016BD4                            ; ---------------------------------------------------------------------------
00016BD4                            Map_obj70:
00016BD4                            	include "_maps\obj70.asm"
00016BD4                            ; ---------------------------------------------------------------------------
00016BD4                            ; Sprite mappings - large girder block (SBZ)
00016BD4                            ; ---------------------------------------------------------------------------
00016BD4 0000                       		dc.w byte_1662A-Map_obj70
00016BD6 0C                         byte_1662A:	dc.b $C
00016BD7 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016BDC 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016BE1 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016BE6 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016BEB E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016BF0 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016BF5 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016BFA 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016BFF E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C04 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C09 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C0E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C14 00                         		even
00016C14 00                         		even
00016C14                            
00016C14                            ; ===========================================================================
00016C14                            ; ---------------------------------------------------------------------------
00016C14                            ; Object 72 - teleporter (SBZ)
00016C14                            ; ---------------------------------------------------------------------------
00016C14                            
00016C14                            Obj72:					; XREF: Obj_Index
00016C14 7000                       		moveq	#0,d0
00016C16 1028 0024                  		move.b	$24(a0),d0
00016C1A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C1E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C22 3028 0008                  		move.w	8(a0),d0
00016C26 0240 FF80                  		andi.w	#$FF80,d0
00016C2A 3238 F700                  		move.w	($FFFFF700).w,d1
00016C2E 0441 0080                  		subi.w	#$80,d1
00016C32 0241 FF80                  		andi.w	#$FF80,d1
00016C36 9041                       		sub.w	d1,d0
00016C38 0C40 0280                  		cmpi.w	#$280,d0
00016C3C 6200                       		bhi.s	Obj72_Delete
00016C3E 4E75                       		rts	
00016C40                            ; ===========================================================================
00016C40                            
00016C40                            Obj72_Delete:
00016C40 4EF9 0000 DBA8             		jmp	DeleteObject
00016C46                            ; ===========================================================================
00016C46 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016C48 0000                       		dc.w loc_166C8-Obj72_Index
00016C4A 0000                       		dc.w loc_1675E-Obj72_Index
00016C4C 0000                       		dc.w loc_16798-Obj72_Index
00016C4E                            ; ===========================================================================
00016C4E                            
00016C4E                            Obj72_Main:				; XREF: Obj72_Index
00016C4E 5428 0024                  		addq.b	#2,$24(a0)
00016C52 1028 0028                  		move.b	$28(a0),d0
00016C56 D040                       		add.w	d0,d0
00016C58 0240 001E                  		andi.w	#$1E,d0
00016C5C 45FA 0000                  		lea	Obj72_Data(pc),a2
00016C60 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C64 315A 003A                  		move.w	(a2)+,$3A(a0)
00016C68 214A 003C                  		move.l	a2,$3C(a0)
00016C6C 315A 0036                  		move.w	(a2)+,$36(a0)
00016C70 315A 0038                  		move.w	(a2)+,$38(a0)
00016C74                            
00016C74                            loc_166C8:				; XREF: Obj72_Index
00016C74 43F8 D000                  		lea	($FFFFD000).w,a1
00016C78 3029 0008                  		move.w	8(a1),d0
00016C7C 9068 0008                  		sub.w	8(a0),d0
00016C80 0828 0000 0022             		btst	#0,$22(a0)
00016C86 6700                       		beq.s	loc_166E0
00016C88 0640 000F                  		addi.w	#$F,d0
00016C8C                            
00016C8C                            loc_166E0:
00016C8C 0C40 0010                  		cmpi.w	#$10,d0
00016C90 6400                       		bcc.s	locret_1675C
00016C92 3229 000C                  		move.w	$C(a1),d1
00016C96 9268 000C                  		sub.w	$C(a0),d1
00016C9A 0641 0020                  		addi.w	#$20,d1
00016C9E 0C41 0040                  		cmpi.w	#$40,d1
00016CA2 6400                       		bcc.s	locret_1675C
00016CA4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016CA8 6600                       		bne.s	locret_1675C
00016CAA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016CB0 6600                       		bne.s	loc_1670E
00016CB2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016CB8 6500                       		bcs.s	locret_1675C
00016CBA                            
00016CBA                            loc_1670E:
00016CBA 5428 0024                  		addq.b	#2,$24(a0)
00016CBE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016CC4 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016CCA 337C 0800 0014             		move.w	#$800,$14(a1)
00016CD0 337C 0000 0010             		move.w	#0,$10(a1)
00016CD6 337C 0000 0012             		move.w	#0,$12(a1)
00016CDC 08A8 0005 0022             		bclr	#5,$22(a0)
00016CE2 08A9 0005 0022             		bclr	#5,$22(a1)
00016CE8 08E9 0001 0022             		bset	#1,$22(a1)
00016CEE 3368 0008 0008             		move.w	8(a0),8(a1)
00016CF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016CFA 4228 0032                  		clr.b	$32(a0)
00016CFE 303C 00BE                  		move.w	#$BE,d0
00016D02 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D08                            
00016D08                            locret_1675C:
00016D08 4E75                       		rts	
00016D0A                            ; ===========================================================================
00016D0A                            
00016D0A                            loc_1675E:				; XREF: Obj72_Index
00016D0A 43F8 D000                  		lea	($FFFFD000).w,a1
00016D0E 1028 0032                  		move.b	$32(a0),d0
00016D12 5428 0032                  		addq.b	#2,$32(a0)
00016D16 4EB9 0000 2C22             		jsr	(CalcSine).l
00016D1C EA40                       		asr.w	#5,d0
00016D1E 3428 000C                  		move.w	$C(a0),d2
00016D22 9440                       		sub.w	d0,d2
00016D24 3342 000C                  		move.w	d2,$C(a1)
00016D28 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D2E 6600                       		bne.s	locret_16796
00016D30 6100 0000                  		bsr.w	sub_1681C
00016D34 5428 0024                  		addq.b	#2,$24(a0)
00016D38 303C 00BC                  		move.w	#$BC,d0
00016D3C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016D42                            
00016D42                            locret_16796:
00016D42 4E75                       		rts	
00016D44                            ; ===========================================================================
00016D44                            
00016D44                            loc_16798:				; XREF: Obj72_Index
00016D44 588F                       		addq.l	#4,sp
00016D46 43F8 D000                  		lea	($FFFFD000).w,a1
00016D4A 5328 002E                  		subq.b	#1,$2E(a0)
00016D4E 6A00                       		bpl.s	loc_167DA
00016D50 3368 0036 0008             		move.w	$36(a0),8(a1)
00016D56 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016D5C 7200                       		moveq	#0,d1
00016D5E 1228 003A                  		move.b	$3A(a0),d1
00016D62 5801                       		addq.b	#4,d1
00016D64 B228 003B                  		cmp.b	$3B(a0),d1
00016D68 6500                       		bcs.s	loc_167C2
00016D6A 7200                       		moveq	#0,d1
00016D6C 6000                       		bra.s	loc_16800
00016D6E                            ; ===========================================================================
00016D6E                            
00016D6E                            loc_167C2:
00016D6E 1141 003A                  		move.b	d1,$3A(a0)
00016D72 2468 003C                  		movea.l	$3C(a0),a2
00016D76 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016D7C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016D82 6000 0000                  		bra.w	sub_1681C
00016D86                            ; ===========================================================================
00016D86                            
00016D86                            loc_167DA:
00016D86 2429 0008                  		move.l	8(a1),d2
00016D8A 2629 000C                  		move.l	$C(a1),d3
00016D8E 3029 0010                  		move.w	$10(a1),d0
00016D92 48C0                       		ext.l	d0
00016D94 E180                       		asl.l	#8,d0
00016D96 D480                       		add.l	d0,d2
00016D98 3029 0012                  		move.w	$12(a1),d0
00016D9C 48C0                       		ext.l	d0
00016D9E E180                       		asl.l	#8,d0
00016DA0 D680                       		add.l	d0,d3
00016DA2 2342 0008                  		move.l	d2,8(a1)
00016DA6 2343 000C                  		move.l	d3,$C(a1)
00016DAA 4E75                       		rts	
00016DAC                            ; ===========================================================================
00016DAC                            
00016DAC                            loc_16800:
00016DAC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016DB2 4228 0024                  		clr.b	$24(a0)
00016DB6 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016DBA 337C 0000 0010             		move.w	#0,$10(a1)
00016DC0 337C 0200 0012             		move.w	#$200,$12(a1)
00016DC6 4E75                       		rts	
00016DC8                            
00016DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DC8                            
00016DC8                            
00016DC8                            sub_1681C:
00016DC8 7000                       		moveq	#0,d0
00016DCA 343C 1000                  		move.w	#$1000,d2
00016DCE 3028 0036                  		move.w	$36(a0),d0
00016DD2 9069 0008                  		sub.w	8(a1),d0
00016DD6 6C00                       		bge.s	loc_16830
00016DD8 4440                       		neg.w	d0
00016DDA 4442                       		neg.w	d2
00016DDC                            
00016DDC                            loc_16830:
00016DDC 7200                       		moveq	#0,d1
00016DDE 363C 1000                  		move.w	#$1000,d3
00016DE2 3228 0038                  		move.w	$38(a0),d1
00016DE6 9269 000C                  		sub.w	$C(a1),d1
00016DEA 6C00                       		bge.s	loc_16844
00016DEC 4441                       		neg.w	d1
00016DEE 4443                       		neg.w	d3
00016DF0                            
00016DF0                            loc_16844:
00016DF0 B240                       		cmp.w	d0,d1
00016DF2 6500                       		bcs.s	loc_1687A
00016DF4 7200                       		moveq	#0,d1
00016DF6 3228 0038                  		move.w	$38(a0),d1
00016DFA 9269 000C                  		sub.w	$C(a1),d1
00016DFE 4841                       		swap	d1
00016E00 83C3                       		divs.w	d3,d1
00016E02 7000                       		moveq	#0,d0
00016E04 3028 0036                  		move.w	$36(a0),d0
00016E08 9069 0008                  		sub.w	8(a1),d0
00016E0C 6700                       		beq.s	loc_16866
00016E0E 4840                       		swap	d0
00016E10 81C1                       		divs.w	d1,d0
00016E12                            
00016E12                            loc_16866:
00016E12 3340 0010                  		move.w	d0,$10(a1)
00016E16 3343 0012                  		move.w	d3,$12(a1)
00016E1A 4A41                       		tst.w	d1
00016E1C 6A00                       		bpl.s	loc_16874
00016E1E 4441                       		neg.w	d1
00016E20                            
00016E20                            loc_16874:
00016E20 3141 002E                  		move.w	d1,$2E(a0)
00016E24 4E75                       		rts	
00016E26                            ; ===========================================================================
00016E26                            
00016E26                            loc_1687A:
00016E26 7000                       		moveq	#0,d0
00016E28 3028 0036                  		move.w	$36(a0),d0
00016E2C 9069 0008                  		sub.w	8(a1),d0
00016E30 4840                       		swap	d0
00016E32 81C2                       		divs.w	d2,d0
00016E34 7200                       		moveq	#0,d1
00016E36 3228 0038                  		move.w	$38(a0),d1
00016E3A 9269 000C                  		sub.w	$C(a1),d1
00016E3E 6700                       		beq.s	loc_16898
00016E40 4841                       		swap	d1
00016E42 83C0                       		divs.w	d0,d1
00016E44                            
00016E44                            loc_16898:
00016E44 3341 0012                  		move.w	d1,$12(a1)
00016E48 3342 0010                  		move.w	d2,$10(a1)
00016E4C 4A40                       		tst.w	d0
00016E4E 6A00                       		bpl.s	loc_168A6
00016E50 4440                       		neg.w	d0
00016E52                            
00016E52                            loc_168A6:
00016E52 3140 002E                  		move.w	d0,$2E(a0)
00016E56 4E75                       		rts	
00016E58                            ; End of function sub_1681C
00016E58                            
00016E58                            ; ===========================================================================
00016E58 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016E5E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016E64 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016E68 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016E6E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016E74 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016E7A 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016E80 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016E86 0884 0298 0894             		dc.w $884, $298, $894
00016E8C 0270 0894 0190             		dc.w $270, $894, $190
00016E92 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016E98 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016E9E 1184 0498 1158             		dc.w $1184, $498, $1158
00016EA4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016EAA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016EB0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016EB6 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016EBC 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016EC2 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016EC8 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016ECE 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016ED4 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016EDA 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016EE0                            ; ===========================================================================
00016EE0                            ; ---------------------------------------------------------------------------
00016EE0                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016EE0                            ; ---------------------------------------------------------------------------
00016EE0                            
00016EE0                            Obj78:					; XREF: Obj_Index
00016EE0 7000                       		moveq	#0,d0
00016EE2 1028 0024                  		move.b	$24(a0),d0
00016EE6 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016EEA 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016EEE                            ; ===========================================================================
00016EEE 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016EF0 0000                       		dc.w Obj78_Action-Obj78_Index
00016EF2 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016EF4 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016EF6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016EF8 0000                       		dc.w Obj78_Delete-Obj78_Index
00016EFA 0000                       		dc.w loc_16CC0-Obj78_Index
00016EFC                            ; ===========================================================================
00016EFC                            
00016EFC                            locret_16950:
00016EFC 4E75                       		rts	
00016EFE                            ; ===========================================================================
00016EFE                            
00016EFE                            Obj78_Main:				; XREF: Obj78_Index
00016EFE 117C 0007 0016             		move.b	#7,$16(a0)
00016F04 117C 0008 0017             		move.b	#8,$17(a0)
00016F0A 4EB9 0000 DB1A             		jsr	ObjectFall
00016F10 4EBA E4B6                  		jsr	ObjHitFloor
00016F14 4A41                       		tst.w	d1
00016F16 6AE4                       		bpl.s	locret_16950
00016F18 D368 000C                  		add.w	d1,$C(a0)
00016F1C 4268 0012                  		clr.w	$12(a0)
00016F20 5428 0024                  		addq.b	#2,$24(a0)
00016F24 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F2C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F32 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F38 6700                       		beq.s	loc_16996
00016F3A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016F40                            
00016F40                            loc_16996:
00016F40 0228 0003 0001             		andi.b	#3,1(a0)
00016F46 0028 0004 0001             		ori.b	#4,1(a0)
00016F4C 1168 0001 0022             		move.b	1(a0),$22(a0)
00016F52 117C 0004 0018             		move.b	#4,$18(a0)
00016F58 117C 0008 0019             		move.b	#8,$19(a0)
00016F5E 117C 000B 0020             		move.b	#$B,$20(a0)
00016F64 3428 0008                  		move.w	8(a0),d2
00016F68 7A0C                       		moveq	#$C,d5
00016F6A 0828 0000 0022             		btst	#0,$22(a0)
00016F70 6700                       		beq.s	loc_169CA
00016F72 4445                       		neg.w	d5
00016F74                            
00016F74                            loc_169CA:
00016F74 1C3C 0004                  		move.b	#4,d6
00016F78 7600                       		moveq	#0,d3
00016F7A 7804                       		moveq	#4,d4
00016F7C 2448                       		movea.l	a0,a2
00016F7E 7202                       		moveq	#2,d1
00016F80                            
00016F80                            Obj78_LoadBody:
00016F80 4EB9 0000 E008             		jsr	SingleObjLoad2
00016F86 6600                       		bne.s	Obj78_QuitLoad
00016F88 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016F8C 1346 0024                  		move.b	d6,$24(a1)
00016F90 5406                       		addq.b	#2,d6
00016F92 2368 0004 0004             		move.l	4(a0),4(a1)
00016F98 3368 0002 0002             		move.w	2(a0),2(a1)
00016F9E 137C 0005 0018             		move.b	#5,$18(a1)
00016FA4 137C 0008 0019             		move.b	#8,$19(a1)
00016FAA 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016FB0 D445                       		add.w	d5,d2
00016FB2 3342 0008                  		move.w	d2,8(a1)
00016FB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016FBC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016FC2 1368 0022 0001             		move.b	$22(a0),1(a1)
00016FC8 137C 0008 001A             		move.b	#8,$1A(a1)
00016FCE 234A 003C                  		move.l	a2,$3C(a1)
00016FD2 1344 003C                  		move.b	d4,$3C(a1)
00016FD6 5804                       		addq.b	#4,d4
00016FD8 2449                       		movea.l	a1,a2
00016FDA                            
00016FDA                            Obj78_QuitLoad:
00016FDA 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016FDE                            
00016FDE 117C 0007 002A             		move.b	#7,$2A(a0)
00016FE4 4228 003C                  		clr.b	$3C(a0)
00016FE8                            
00016FE8                            Obj78_Action:				; XREF: Obj78_Index
00016FE8 4A28 0022                  		tst.b	$22(a0)
00016FEC 6B00 0000                  		bmi.w	loc_16C96
00016FF0 7000                       		moveq	#0,d0
00016FF2 1028 0025                  		move.b	$25(a0),d0
00016FF6 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016FFA 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016FFE 1228 002B                  		move.b	$2B(a0),d1
00017002 6A00                       		bpl.s	Obj78_Display
00017004 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001700A 1028 0026                  		move.b	$26(a0),d0
0001700E 0240 007F                  		andi.w	#$7F,d0
00017012 5828 0026                  		addq.b	#4,$26(a0)
00017016 1031 0000                  		move.b	(a1,d0.w),d0
0001701A 6A00                       		bpl.s	Obj78_AniHead
0001701C 08A8 0007 002B             		bclr	#7,$2B(a0)
00017022 6000                       		bra.s	Obj78_Display
00017024                            ; ===========================================================================
00017024                            
00017024                            Obj78_AniHead:
00017024 0201 0010                  		andi.b	#$10,d1
00017028 D001                       		add.b	d1,d0
0001702A 1140 001A                  		move.b	d0,$1A(a0)
0001702E                            
0001702E                            Obj78_Display:
0001702E 3028 0008                  		move.w	8(a0),d0
00017032 0240 FF80                  		andi.w	#$FF80,d0
00017036 3238 F700                  		move.w	($FFFFF700).w,d1
0001703A 0441 0080                  		subi.w	#$80,d1
0001703E 0241 FF80                  		andi.w	#$FF80,d1
00017042 9041                       		sub.w	d1,d0
00017044 0C40 0280                  		cmpi.w	#$280,d0
00017048 6200 0000                  		bhi.w	Obj78_ChkGone
0001704C 4EF9 0000 DB6C             		jmp	DisplaySprite
00017052                            ; ===========================================================================
00017052                            
00017052                            Obj78_ChkGone:
00017052 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017056 7000                       		moveq	#0,d0
00017058 1028 0023                  		move.b	$23(a0),d0
0001705C 6700                       		beq.s	loc_16ABC
0001705E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017064                            
00017064                            loc_16ABC:
00017064 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001706A 4E75                       		rts	
0001706C                            ; ===========================================================================
0001706C                            
0001706C                            Obj78_Delete:				; XREF: Obj78_Index
0001706C 4EF9 0000 DBA8             		jmp	DeleteObject
00017072                            ; ===========================================================================
00017072 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017074 0000                       		dc.w loc_16B02-Obj78_Index2
00017076                            ; ===========================================================================
00017076                            
00017076                            Obj78_Move:				; XREF: Obj78_Index2
00017076 5328 002A                  		subq.b	#1,$2A(a0)
0001707A 6B00                       		bmi.s	Obj78_Move2
0001707C 4E75                       		rts	
0001707E                            ; ===========================================================================
0001707E                            
0001707E                            Obj78_Move2:
0001707E 5428 0025                  		addq.b	#2,$25(a0)
00017082 117C 0010 002A             		move.b	#$10,$2A(a0)
00017088 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001708E 317C 0040 0014             		move.w	#$40,$14(a0)
00017094 0868 0004 002B             		bchg	#4,$2B(a0)
0001709A 6600                       		bne.s	loc_16AFC
0001709C 4268 0010                  		clr.w	$10(a0)
000170A0 4468 0014                  		neg.w	$14(a0)
000170A4                            
000170A4                            loc_16AFC:
000170A4 08E8 0007 002B             		bset	#7,$2B(a0)
000170AA                            
000170AA                            loc_16B02:				; XREF: Obj78_Index2
000170AA 5328 002A                  		subq.b	#1,$2A(a0)
000170AE 6B00                       		bmi.s	loc_16B5E
000170B0 2F28 0008                  		move.l	8(a0),-(sp)
000170B4 2428 0008                  		move.l	8(a0),d2
000170B8 3028 0010                  		move.w	$10(a0),d0
000170BC 0828 0000 0022             		btst	#0,$22(a0)
000170C2 6700                       		beq.s	loc_16B1E
000170C4 4440                       		neg.w	d0
000170C6                            
000170C6                            loc_16B1E:
000170C6 48C0                       		ext.l	d0
000170C8 E180                       		asl.l	#8,d0
000170CA D480                       		add.l	d0,d2
000170CC 2142 0008                  		move.l	d2,8(a0)
000170D0 4EBA E2F6                  		jsr	ObjHitFloor
000170D4 241F                       		move.l	(sp)+,d2
000170D6 0C41 FFF8                  		cmpi.w	#-8,d1
000170DA 6D00                       		blt.s	loc_16B70
000170DC 0C41 000C                  		cmpi.w	#$C,d1
000170E0 6C00                       		bge.s	loc_16B70
000170E2 D368 000C                  		add.w	d1,$C(a0)
000170E6 4842                       		swap	d2
000170E8 B468 0008                  		cmp.w	8(a0),d2
000170EC 6700                       		beq.s	locret_16B5C
000170EE 7000                       		moveq	#0,d0
000170F0 1028 003C                  		move.b	$3C(a0),d0
000170F4 5228 003C                  		addq.b	#1,$3C(a0)
000170F8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000170FE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017102                            
00017102                            locret_16B5C:
00017102 4E75                       		rts	
00017104                            ; ===========================================================================
00017104                            
00017104                            loc_16B5E:
00017104 5528 0025                  		subq.b	#2,$25(a0)
00017108 117C 0007 002A             		move.b	#7,$2A(a0)
0001710E 317C 0000 0010             		move.w	#0,$10(a0)
00017114 4E75                       		rts	
00017116                            ; ===========================================================================
00017116                            
00017116                            loc_16B70:
00017116 2142 0008                  		move.l	d2,8(a0)
0001711A 0868 0000 0022             		bchg	#0,$22(a0)
00017120 1168 0022 0001             		move.b	$22(a0),1(a0)
00017126 7000                       		moveq	#0,d0
00017128 1028 003C                  		move.b	$3C(a0),d0
0001712C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017132 5228 003C                  		addq.b	#1,$3C(a0)
00017136 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001713C 4E75                       		rts	
0001713E                            ; ===========================================================================
0001713E                            
0001713E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001713E 2268 003C                  		movea.l	$3C(a0),a1
00017142 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017148 6A00                       		bpl.s	Obj78_BodySeg1
0001714A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017150 1028 0026                  		move.b	$26(a0),d0
00017154 0240 007F                  		andi.w	#$7F,d0
00017158 5828 0026                  		addq.b	#4,$26(a0)
0001715C 4A31 0004                  		tst.b	4(a1,d0.w)
00017160 6A00                       		bpl.s	Obj78_AniBody
00017162 5828 0026                  		addq.b	#4,$26(a0)
00017166                            
00017166                            Obj78_AniBody:
00017166 1031 0000                  		move.b	(a1,d0.w),d0
0001716A 5000                       		addq.b	#8,d0
0001716C 1140 001A                  		move.b	d0,$1A(a0)
00017170                            
00017170                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017170 2268 003C                  		movea.l	$3C(a0),a1
00017174 4A28 0022                  		tst.b	$22(a0)
00017178 6B00 0000                  		bmi.w	loc_16C90
0001717C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017182 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017188 6700 0000                  		beq.w	loc_16C64
0001718C 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017192 3029 0010                  		move.w	$10(a1),d0
00017196 D069 0014                  		add.w	$14(a1),d0
0001719A 3140 0010                  		move.w	d0,$10(a0)
0001719E 2428 0008                  		move.l	8(a0),d2
000171A2 2602                       		move.l	d2,d3
000171A4 3028 0010                  		move.w	$10(a0),d0
000171A8 0828 0000 0022             		btst	#0,$22(a0)
000171AE 6700                       		beq.s	loc_16C0C
000171B0 4440                       		neg.w	d0
000171B2                            
000171B2                            loc_16C0C:
000171B2 48C0                       		ext.l	d0
000171B4 E180                       		asl.l	#8,d0
000171B6 D480                       		add.l	d0,d2
000171B8 2142 0008                  		move.l	d2,8(a0)
000171BC 4843                       		swap	d3
000171BE B668 0008                  		cmp.w	8(a0),d3
000171C2 6700                       		beq.s	loc_16C64
000171C4 7000                       		moveq	#0,d0
000171C6 1028 003C                  		move.b	$3C(a0),d0
000171CA 1231 002C                  		move.b	$2C(a1,d0.w),d1
000171CE 0C01 0080                  		cmpi.b	#-$80,d1
000171D2 6600                       		bne.s	loc_16C50
000171D4 4843                       		swap	d3
000171D6 2143 0008                  		move.l	d3,8(a0)
000171DA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000171DE 0868 0000 0022             		bchg	#0,$22(a0)
000171E4 1168 0022 0001             		move.b	$22(a0),1(a0)
000171EA 5228 003C                  		addq.b	#1,$3C(a0)
000171EE 0228 000F 003C             		andi.b	#$F,$3C(a0)
000171F4 6000                       		bra.s	loc_16C64
000171F6                            ; ===========================================================================
000171F6                            
000171F6                            loc_16C50:
000171F6 4881                       		ext.w	d1
000171F8 D368 000C                  		add.w	d1,$C(a0)
000171FC 5228 003C                  		addq.b	#1,$3C(a0)
00017200 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017206 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001720A                            
0001720A                            loc_16C64:
0001720A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017210 6700                       		beq.s	loc_16C90
00017212 0C11 0027                  		cmpi.b	#$27,0(a1)
00017216 6700                       		beq.s	loc_16C7C
00017218 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001721E 6600                       		bne.s	loc_16C82
00017220                            
00017220                            loc_16C7C:
00017220 117C 000A 0024             		move.b	#$A,$24(a0)
00017226                            
00017226                            loc_16C82:
00017226 4EF9 0000 DB6C             		jmp	DisplaySprite
0001722C                            
0001722C                            ; ===========================================================================
0001722C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017234                            ; ===========================================================================
00017234                            
00017234                            loc_16C90:
00017234 08E9 0007 0022             		bset	#7,$22(a1)
0001723A                            
0001723A                            loc_16C96:
0001723A 7000                       		moveq	#0,d0
0001723C 1028 0024                  		move.b	$24(a0),d0
00017240 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017244 0828 0000 0022             		btst	#0,$22(a0)
0001724A 6700                       		beq.s	loc_16CAA
0001724C 4440                       		neg.w	d0
0001724E                            
0001724E                            loc_16CAA:
0001724E 3140 0010                  		move.w	d0,$10(a0)
00017252 317C FC00 0012             		move.w	#-$400,$12(a0)
00017258 117C 000C 0024             		move.b	#$C,$24(a0)
0001725E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017264                            
00017264                            loc_16CC0:				; XREF: Obj78_Index
00017264 4EB9 0000 DB1A             		jsr	ObjectFall
0001726A 4A68 0012                  		tst.w	$12(a0)
0001726E 6B00                       		bmi.s	loc_16CE0
00017270 4EBA E156                  		jsr	ObjHitFloor
00017274 4A41                       		tst.w	d1
00017276 6A00                       		bpl.s	loc_16CE0
00017278 D368 000C                  		add.w	d1,$C(a0)
0001727C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017282                            
00017282                            loc_16CE0:
00017282 4A28 0001                  		tst.b	1(a0)
00017286 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001728A 4EF9 0000 DB6C             		jmp	DisplaySprite
00017290                            ; ===========================================================================
00017290                            Ani_obj78:
00017290                            	include "_anim\obj78.asm"
00017290                            ; ---------------------------------------------------------------------------
00017290                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017290                            ; ---------------------------------------------------------------------------
00017290 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000172A0 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000172B0 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000172C0 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000172D0 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000172E0 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000172F0 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017300 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017310                            	even
00017310                            	even
00017310                            
00017310                            ; ---------------------------------------------------------------------------
00017310                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017310                            ; ---------------------------------------------------------------------------
00017310                            Map_obj78:
00017310                            	include "_maps\obj78.asm"
00017310                            ; ---------------------------------------------------------------------------
00017310                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017310                            ; ---------------------------------------------------------------------------
00017310 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017314 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017318 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001731C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017320 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017324 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017328 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001732C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017330 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017334 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017338 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001733C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017340 01                         byte_16D9E:	dc.b 1
00017341 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017346 01                         byte_16DA4:	dc.b 1
00017347 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001734C 01                         byte_16DAA:	dc.b 1
0001734D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017352 01                         byte_16DB0:	dc.b 1
00017353 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017358 01                         byte_16DB6:	dc.b 1
00017359 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001735E 01                         byte_16DBC:	dc.b 1
0001735F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017364 01                         byte_16DC2:	dc.b 1
00017365 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001736A 01                         byte_16DC8:	dc.b 1
0001736B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017370 01                         byte_16DCE:	dc.b 1
00017371 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017376 01                         byte_16DD4:	dc.b 1
00017377 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001737C 01                         byte_16DDA:	dc.b 1
0001737D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017382 01                         byte_16DE0:	dc.b 1
00017383 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017388 01                         byte_16DE6:	dc.b 1
00017389 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001738E 01                         byte_16DEC:	dc.b 1
0001738F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017394 01                         byte_16DF2:	dc.b 1
00017395 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001739A 01                         byte_16DF8:	dc.b 1
0001739B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000173A0 01                         byte_16DFE:	dc.b 1
000173A1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000173A6 01                         byte_16E04:	dc.b 1
000173A7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000173AC 01                         byte_16E0A:	dc.b 1
000173AD F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000173B2 01                         byte_16E10:	dc.b 1
000173B3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000173B8 01                         byte_16E16:	dc.b 1
000173B9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000173BE 01                         byte_16E1C:	dc.b 1
000173BF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000173C4 01                         byte_16E22:	dc.b 1
000173C5 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000173CA 01                         byte_16E28:	dc.b 1
000173CB EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000173D0                            		even
000173D0                            		even
000173D0                            
000173D0                            ; ===========================================================================
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            ; Object 79 - lamppost
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            
000173D0                            Obj79:					; XREF: Obj_Index
000173D0 7000                       		moveq	#0,d0
000173D2 1028 0024                  		move.b	$24(a0),d0
000173D6 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000173DA 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000173DE 4EFA 8834                  		jmp	MarkObjGone
000173E2                            ; ===========================================================================
000173E2 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000173E4 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000173E6 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000173E8 0000                       		dc.w Obj79_Twirl-Obj79_Index
000173EA                            ; ===========================================================================
000173EA                            
000173EA                            Obj79_Main:				; XREF: Obj79_Index
000173EA 5428 0024                  		addq.b	#2,$24(a0)
000173EE 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000173F6 317C 07A0 0002             		move.w	#$7A0,2(a0)
000173FC 117C 0004 0001             		move.b	#4,1(a0)
00017402 117C 0008 0019             		move.b	#8,$19(a0)
00017408 117C 0005 0018             		move.b	#5,$18(a0)
0001740E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017412 7000                       		moveq	#0,d0
00017414 1028 0023                  		move.b	$23(a0),d0
00017418 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001741E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017424 6600                       		bne.s	Obj79_RedLamp
00017426 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001742A 0201 007F                  		andi.b	#$7F,d1
0001742E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017432 0202 007F                  		andi.b	#$7F,d2
00017436 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017438 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001743A                            
0001743A                            Obj79_RedLamp:
0001743A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017440 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017446 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001744C 4E75                       		rts	
0001744E                            ; ===========================================================================
0001744E                            
0001744E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001744E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017452 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017456 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001745A 6B00 0000                  		bmi.w	locret_16F90
0001745E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017462 0201 007F                  		andi.b	#$7F,d1
00017466 1428 0028                  		move.b	$28(a0),d2
0001746A 0202 007F                  		andi.b	#$7F,d2
0001746E B202                       		cmp.b	d2,d1
00017470 6500                       		bcs.s	Obj79_HitLamp
00017472 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017476 7000                       		moveq	#0,d0
00017478 1028 0023                  		move.b	$23(a0),d0
0001747C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017482 117C 0004 0024             		move.b	#4,$24(a0)
00017488 117C 0003 001A             		move.b	#3,$1A(a0)
0001748E 6000 0000                  		bra.w	locret_16F90
00017492                            ; ===========================================================================
00017492                            
00017492                            Obj79_HitLamp:
00017492 3038 D008                  		move.w	($FFFFD008).w,d0
00017496 9068 0008                  		sub.w	8(a0),d0
0001749A 5040                       		addq.w	#8,d0
0001749C 0C40 0010                  		cmpi.w	#$10,d0
000174A0 6400 0000                  		bcc.w	locret_16F90
000174A4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174A8 9068 000C                  		sub.w	$C(a0),d0
000174AC 0640 0040                  		addi.w	#$40,d0
000174B0 0C40 0068                  		cmpi.w	#$68,d0
000174B4 6400                       		bcc.s	locret_16F90
000174B6 303C 00A1                  		move.w	#$A1,d0
000174BA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
000174C0 5428 0024                  		addq.b	#2,$24(a0)
000174C4 4EB9 0000 DFF2             		jsr	SingleObjLoad
000174CA 6600                       		bne.s	loc_16F76
000174CC 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000174D0 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000174D6 3368 0008 0030             		move.w	8(a0),$30(a1)
000174DC 3368 000C 0032             		move.w	$C(a0),$32(a1)
000174E2 0469 0018 0032             		subi.w	#$18,$32(a1)
000174E8 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000174F0 337C 07A0 0002             		move.w	#$7A0,2(a1)
000174F6 137C 0004 0001             		move.b	#4,1(a1)
000174FC 137C 0008 0019             		move.b	#8,$19(a1)
00017502 137C 0004 0018             		move.b	#4,$18(a1)
00017508 137C 0002 001A             		move.b	#2,$1A(a1)
0001750E 337C 0020 0036             		move.w	#$20,$36(a1)
00017514                            
00017514                            loc_16F76:
00017514 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001751A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001751E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017522 7000                       		moveq	#0,d0
00017524 1028 0023                  		move.b	$23(a0),d0
00017528 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001752E                            
0001752E                            locret_16F90:
0001752E 4E75                       		rts	
00017530                            ; ===========================================================================
00017530                            
00017530                            Obj79_AfterHit:				; XREF: Obj79_Index
00017530 4E75                       		rts	
00017532                            ; ===========================================================================
00017532                            
00017532                            Obj79_Twirl:				; XREF: Obj79_Index
00017532 5368 0036                  		subq.w	#1,$36(a0)
00017536 6A00                       		bpl.s	loc_16FA0
00017538 117C 0004 0024             		move.b	#4,$24(a0)
0001753E                            
0001753E                            loc_16FA0:
0001753E 1028 0026                  		move.b	$26(a0),d0
00017542 0428 0010 0026             		subi.b	#$10,$26(a0)
00017548 0400 0040                  		subi.b	#$40,d0
0001754C 4EB9 0000 2C22             		jsr	(CalcSine).l
00017552 C3FC 0C00                  		muls.w	#$C00,d1
00017556 4841                       		swap	d1
00017558 D268 0030                  		add.w	$30(a0),d1
0001755C 3141 0008                  		move.w	d1,8(a0)
00017560 C1FC 0C00                  		muls.w	#$C00,d0
00017564 4840                       		swap	d0
00017566 D068 0032                  		add.w	$32(a0),d0
0001756A 3140 000C                  		move.w	d0,$C(a0)
0001756E 4E75                       		rts	
00017570                            ; ===========================================================================
00017570                            ; ---------------------------------------------------------------------------
00017570                            ; Subroutine to	store information when you hit a lamppost
00017570                            ; ---------------------------------------------------------------------------
00017570                            
00017570                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017570 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017576 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001757C 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017582 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017588 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001758E 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017594 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001759A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000175A0 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000175A6 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000175AC 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000175B2 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000175B8 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000175BE 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000175C4 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000175CA 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000175D0 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000175D6 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000175DC 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000175E2 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000175E8 4E75                       		rts	
000175EA                            
000175EA                            ; ---------------------------------------------------------------------------
000175EA                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000175EA                            ; ---------------------------------------------------------------------------
000175EA                            
000175EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000175EA                            
000175EA                            
000175EA                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000175EA 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000175F0 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000175F6 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000175FC 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017602 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017608 4278 FE20                  		clr.w	($FFFFFE20).w
0001760C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017610 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017616 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001761C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017620 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017626 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001762C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017632 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017638 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001763E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017644 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001764A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017650 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017656 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001765C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017662 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017668 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001766E 6600                       		bne.s	loc_170E4
00017670 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017676 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001767C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017682                            
00017682                            loc_170E4:
00017682 4A38 FE30                  		tst.b	($FFFFFE30).w
00017686 6A00                       		bpl.s	locret_170F6
00017688 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001768C 0440 00A0                  		subi.w	#$A0,d0
00017690 31C0 F728                  		move.w	d0,($FFFFF728).w
00017694                            
00017694                            locret_170F6:
00017694 4E75                       		rts	
00017696                            ; End of function Obj79_LoadInfo
00017696                            
00017696                            ; ===========================================================================
00017696                            ; ---------------------------------------------------------------------------
00017696                            ; Sprite mappings - lamppost
00017696                            ; ---------------------------------------------------------------------------
00017696                            Map_obj79:
00017696                            	include "_maps\obj79.asm"
00017696                            ; ---------------------------------------------------------------------------
00017696                            ; Sprite mappings - lamppost
00017696                            ; ---------------------------------------------------------------------------
00017696 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001769A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001769E 06                         byte_17100:	dc.b 6
0001769F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176A4 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176A9 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176AE F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176B3 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000176B8 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000176BD 04                         byte_1711F:	dc.b 4
000176BE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176C3 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176C8 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176CD F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176D2 02                         byte_17134:	dc.b 2
000176D3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000176D8 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000176DD 06                         byte_1713F:	dc.b 6
000176DE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176E3 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176E8 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176ED F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176F2 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000176F7 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000176FC                            		even
000176FC                            		even
000176FC                            
000176FC                            ; ===========================================================================
000176FC                            ; ---------------------------------------------------------------------------
000176FC                            ; Object 7D - hidden points at the end of a level
000176FC                            ; ---------------------------------------------------------------------------
000176FC                            
000176FC                            Obj7D:					; XREF: Obj_Index
000176FC 7000                       		moveq	#0,d0
000176FE 1028 0024                  		move.b	$24(a0),d0
00017702 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017706 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001770A                            ; ===========================================================================
0001770A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001770C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001770E                            ; ===========================================================================
0001770E                            
0001770E                            Obj7D_Main:				; XREF: Obj7D_Index
0001770E 7410                       		moveq	#$10,d2
00017710 3602                       		move.w	d2,d3
00017712 D643                       		add.w	d3,d3
00017714 43F8 D000                  		lea	($FFFFD000).w,a1
00017718 3029 0008                  		move.w	8(a1),d0
0001771C 9068 0008                  		sub.w	8(a0),d0
00017720 D042                       		add.w	d2,d0
00017722 B043                       		cmp.w	d3,d0
00017724 6400                       		bcc.s	Obj7D_ChkDel
00017726 3229 000C                  		move.w	$C(a1),d1
0001772A 9268 000C                  		sub.w	$C(a0),d1
0001772E D242                       		add.w	d2,d1
00017730 B243                       		cmp.w	d3,d1
00017732 6400                       		bcc.s	Obj7D_ChkDel
00017734 4A78 FE08                  		tst.w	($FFFFFE08).w
00017738 6600                       		bne.s	Obj7D_ChkDel
0001773A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001773E 6600                       		bne.s	Obj7D_ChkDel
00017740 5428 0024                  		addq.b	#2,$24(a0)
00017744 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001774C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017752 0028 0004 0001             		ori.b	#4,1(a0)
00017758 117C 0000 0018             		move.b	#0,$18(a0)
0001775E 117C 0010 0019             		move.b	#$10,$19(a0)
00017764 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001776A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017770 303C 00C9                  		move.w	#$C9,d0
00017774 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
0001777A 7000                       		moveq	#0,d0
0001777C 1028 0028                  		move.b	$28(a0),d0
00017780 D040                       		add.w	d0,d0
00017782 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017786 4EB9 0000 0000             		jsr	AddPoints
0001778C                            
0001778C                            Obj7D_ChkDel:
0001778C 3028 0008                  		move.w	8(a0),d0
00017790 0240 FF80                  		andi.w	#$FF80,d0
00017794 3238 F700                  		move.w	($FFFFF700).w,d1
00017798 0441 0080                  		subi.w	#$80,d1
0001779C 0241 FF80                  		andi.w	#$FF80,d1
000177A0 9041                       		sub.w	d1,d0
000177A2 0C40 0280                  		cmpi.w	#$280,d0
000177A6 6200                       		bhi.s	Obj7D_Delete
000177A8 4E75                       		rts	
000177AA                            ; ===========================================================================
000177AA                            
000177AA                            Obj7D_Delete:
000177AA 4EF9 0000 DBA8             		jmp	DeleteObject
000177B0                            ; ===========================================================================
000177B0 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000177B2 03E8                       		dc.w 1000
000177B4 0064                       		dc.w 100
000177B6 0001                       		dc.w 1
000177B8                            ; ===========================================================================
000177B8                            
000177B8                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000177B8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000177BC 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000177BE 3028 0008                  		move.w	8(a0),d0
000177C2 0240 FF80                  		andi.w	#-$80,d0
000177C6 3238 F700                  		move.w	($FFFFF700).w,d1
000177CA 0441 0080                  		subi.w	#$80,d1
000177CE 0241 FF80                  		andi.w	#-$80,d1
000177D2 9041                       		sub.w	d1,d0
000177D4 0C40 0280                  		cmpi.w	#$280,d0
000177D8 6200                       		bhi.s	Obj7D_Delete2
000177DA 4EF9 0000 DB6C             		jmp	DisplaySprite
000177E0                            ; ===========================================================================
000177E0                            
000177E0                            Obj7D_Delete2:
000177E0 4EF9 0000 DBA8             		jmp	DeleteObject
000177E6                            ; ===========================================================================
000177E6                            ; ---------------------------------------------------------------------------
000177E6                            ; Sprite mappings - hidden points at the end of	a level
000177E6                            ; ---------------------------------------------------------------------------
000177E6                            Map_obj7D:
000177E6                            	include "_maps\obj7D.asm"
000177E6                            ; ---------------------------------------------------------------------------
000177E6                            ; Sprite mappings - hidden points at the end of	a level
000177E6                            ; ---------------------------------------------------------------------------
000177E6 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000177EA 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000177EE 00                         byte_17250:	dc.b 0
000177EF 01                         byte_17251:	dc.b 1
000177F0 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000177F5 01                         byte_17257:	dc.b 1
000177F6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000177FB 01                         byte_1725D:	dc.b 1
000177FC F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017802 00                         		even
00017802 00                         		even
00017802                            
00017802                            ; ===========================================================================
00017802                            ; ---------------------------------------------------------------------------
00017802                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017802                            ; ---------------------------------------------------------------------------
00017802                            
00017802                            Obj8A:					; XREF: Obj_Index
00017802 7000                       		moveq	#0,d0
00017804 1028 0024                  		move.b	$24(a0),d0
00017808 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001780C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017810                            ; ===========================================================================
00017810 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017812 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017814                            ; ===========================================================================
00017814                            
00017814                            Obj8A_Main:				; XREF: Obj8A_Index
00017814 5428 0024                  		addq.b	#2,$24(a0)
00017818 317C 0120 0008             		move.w	#$120,8(a0)
0001781E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017824 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001782C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017832 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017836 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001783A 117C 0000 0001             		move.b	#0,1(a0)
00017840 117C 0000 0018             		move.b	#0,$18(a0)
00017846 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001784C 6600                       		bne.s	Obj8A_Display	; if not, branch
0001784E 317C 00A6 0002             		move.w	#$A6,2(a0)
00017854 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001785A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001785E 6700                       		beq.s	Obj8A_Display	; if not, branch
00017860 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017866 6600                       		bne.s	Obj8A_Display	; if not, branch
00017868 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001786E 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017874 4EF9 0000 DBA8             		jmp	DeleteObject
0001787A                            ; ===========================================================================
0001787A                            
0001787A                            Obj8A_Display:				; XREF: Obj8A_Index
0001787A 4EF9 0000 DB6C             		jmp	DisplaySprite
00017880                            ; ===========================================================================
00017880                            ; ---------------------------------------------------------------------------
00017880                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017880                            ; ---------------------------------------------------------------------------
00017880                            Map_obj8A:
00017880                            	include "_maps\obj8A.asm"
00017880                            ; --------------------------------------------------------------------------------
00017880                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017880                            ; --------------------------------------------------------------------------------
00017880                            
00017880                            SME_MD8yg:	
00017880 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
00017884 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
00017888 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
0001788C 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
00017890 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
00017894 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
00017896 0E                         SME_MD8yg_16:	dc.b $E	
00017897 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
0001789C F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000178A1 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000178A6 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000178AB F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000178B0 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000178B5 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
000178BA F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
000178BF F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
000178C4 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
000178C9 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
000178CE F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
000178D3 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
000178D8 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
000178DD 10                         SME_MD8yg_5D:	dc.b $10	
000178DE D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
000178E3 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
000178E8 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
000178ED D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
000178F2 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
000178F7 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
000178FC D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017901 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017906 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
0001790B 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017910 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017915 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
0001791A 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001791F 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017924 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017929 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001792E 0A                         SME_MD8yg_AE:	dc.b $A	
0001792F D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017934 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017939 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001793E D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
00017943 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017948 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
0001794D D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
00017952 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
00017957 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
0001795C 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
00017961 18                         SME_MD8yg_E1:	dc.b $18	
00017962 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
00017967 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
0001796C D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
00017971 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
00017976 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
0001797B D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
00017980 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
00017985 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
0001798A D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001798F D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
00017994 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017999 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
0001799E D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
000179A3 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
000179A8 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
000179AD 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
000179B2 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
000179B7 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
000179BC 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
000179C1 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
000179C6 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
000179CB 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
000179D0 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
000179D5 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
000179DA 14                         SME_MD8yg_15A:	dc.b $14	
000179DB D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
000179E0 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
000179E5 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
000179EA D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
000179EF D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
000179F4 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
000179F9 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
000179FE 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A03 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A08 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A0D 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A12 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A17 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A1C 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A21 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A26 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A2B 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A30 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A35 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017A3A 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017A3F 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017A40 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017A45 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017A4A D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017A4F D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017A54 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017A59 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017A5E D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017A63 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017A68 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017A6D D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017A72 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017A77 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017A7C 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017A81 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017A86 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017A8B 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017A90 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017A95 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017A9A 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017A9F 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017AA4 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017AA9 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017AAE 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017AB3 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017AB8 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017ABD 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017AC2 17                         SME_MD8yg_242:	dc.b $17	
00017AC3 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017AC8 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017ACD D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017AD2 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017AD7 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017ADC D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017AE1 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017AE6 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017AEB D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017AF0 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017AF5 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017AFA D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017AFF 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B04 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B09 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B0E 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B13 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B18 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B1D 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B22 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B27 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B2C 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B31 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B36 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B37 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017B3C D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017B41 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017B46 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017B4B D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017B50 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017B55 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017B5A D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017B5F D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017B64 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017B69 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017B6E D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017B73 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017B78 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017B7D 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017B82 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B87 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B8C 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017B91 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017B96 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017B9B 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017BA0 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017BA5 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017BAA 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017BAF 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017BB4 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017BB9 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017BBE 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017BC3 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017BC8 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017BCD 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017BD2 0F                         SME_MD8yg_352:	dc.b $F	
00017BD3 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017BD8 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017BDD F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017BE2 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017BE7 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017BEC F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017BF1 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017BF6 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017BFB F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C00 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C05 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C0A F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C0F F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C14 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C19 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C1E 08                         SME_MD8yg_39E:	dc.b 8	
00017C1F 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C24 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C29 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C2E 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C33 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C38 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017C3D 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017C42 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017C47 17                         SME_MD8yg_3C7:	dc.b $17	
00017C48 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017C4D D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017C52 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017C57 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017C5C D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017C61 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017C66 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017C6B E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017C70 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017C75 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017C7A D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017C7F D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017C84 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017C89 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017C8E E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017C93 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017C98 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017C9D E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017CA2 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017CA7 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017CAC F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017CB1 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017CB6 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017CBC 00                         		even
00017CBC 00                         		even
00017CBC                            
00017CBC                            ; ===========================================================================
00017CBC                            ; ---------------------------------------------------------------------------
00017CBC                            ; Object 3D - Eggman (GHZ)
00017CBC                            ; ---------------------------------------------------------------------------
00017CBC                            
00017CBC                            Obj3D:					; XREF: Obj_Index
00017CBC 7000                       		moveq	#0,d0
00017CBE 1028 0024                  		move.b	$24(a0),d0
00017CC2 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017CC6 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017CCA                            ; ===========================================================================
00017CCA 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017CCC 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017CCE 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017CD0 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017CD2                            
00017CD2 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017CD4 0401                       		dc.b 4,	1
00017CD6 0607                       		dc.b 6,	7
00017CD8                            ; ===========================================================================
00017CD8                            
00017CD8                            Obj3D_Main:				; XREF: Obj3D_Index
00017CD8 45F9 0001 7CD2             		lea	(Obj3D_ObjData).l,a2
00017CDE 2248                       		movea.l	a0,a1
00017CE0 7202                       		moveq	#2,d1
00017CE2 6000                       		bra.s	Obj3D_LoadBoss
00017CE4                            ; ===========================================================================
00017CE4                            
00017CE4                            Obj3D_Loop:
00017CE4 4EB9 0000 E008             		jsr	SingleObjLoad2
00017CEA 6600                       		bne.s	loc_17772
00017CEC                            
00017CEC                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017CEC 135A 0024                  		move.b	(a2)+,$24(a1)
00017CF0 12BC 003D                  		move.b	#$3D,0(a1)
00017CF4 3368 0008 0008             		move.w	8(a0),8(a1)
00017CFA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D00 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D08 337C 0400 0002             		move.w	#$400,2(a1)
00017D0E 137C 0004 0001             		move.b	#4,1(a1)
00017D14 137C 0020 0019             		move.b	#$20,$19(a1)
00017D1A 137C 0003 0018             		move.b	#3,$18(a1)
00017D20 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D24 2348 0034                  		move.l	a0,$34(a1)
00017D28 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D2C                            
00017D2C                            loc_17772:
00017D2C 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D32 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D38 117C 000F 0020             		move.b	#$F,$20(a0)
00017D3E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017D44                            
00017D44                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017D44 7000                       		moveq	#0,d0
00017D46 1028 0025                  		move.b	$25(a0),d0
00017D4A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017D4E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017D52 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017D58 4EB9 0000 AC42             		jsr	AnimateSprite
00017D5E 1028 0022                  		move.b	$22(a0),d0
00017D62 0200 0003                  		andi.b	#3,d0
00017D66 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017D6C 8128 0001                  		or.b	d0,1(a0)
00017D70 4EF9 0000 DB6C             		jmp	DisplaySprite
00017D76                            ; ===========================================================================
00017D76 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017D78 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017D7A 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017D7C 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017D7E 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017D80 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017D82 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017D84                            ; ===========================================================================
00017D84                            
00017D84                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017D84 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017D8A 6100 0000                  		bsr.w	BossMove
00017D8E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017D94 6600                       		bne.s	loc_177E6
00017D96 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017D9C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017DA0                            
00017DA0                            loc_177E6:
00017DA0 1028 003F                  		move.b	$3F(a0),d0
00017DA4 4EB9 0000 2C22             		jsr	(CalcSine).l
00017DAA EC40                       		asr.w	#6,d0
00017DAC D068 0038                  		add.w	$38(a0),d0
00017DB0 3140 000C                  		move.w	d0,$C(a0)
00017DB4 3168 0030 0008             		move.w	$30(a0),8(a0)
00017DBA 5428 003F                  		addq.b	#2,$3F(a0)
00017DBE 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017DC4 6400                       		bcc.s	locret_1784A
00017DC6 4A28 0022                  		tst.b	$22(a0)
00017DCA 6B00                       		bmi.s	loc_1784C
00017DCC 4A28 0020                  		tst.b	$20(a0)
00017DD0 6600                       		bne.s	locret_1784A
00017DD2 4A28 003E                  		tst.b	$3E(a0)
00017DD6 6600                       		bne.s	Obj3D_ShipFlash
00017DD8 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017DDE 303C 00AC                  		move.w	#$AC,d0
00017DE2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017DE8                            
00017DE8                            Obj3D_ShipFlash:
00017DE8 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017DEC 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017DEE 4A51                       		tst.w	(a1)
00017DF0 6600                       		bne.s	loc_1783C
00017DF2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017DF6                            
00017DF6                            loc_1783C:
00017DF6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017DF8 5328 003E                  		subq.b	#1,$3E(a0)
00017DFC 6600                       		bne.s	locret_1784A
00017DFE 117C 000F 0020             		move.b	#$F,$20(a0)
00017E04                            
00017E04                            locret_1784A:
00017E04 4E75                       		rts	
00017E06                            ; ===========================================================================
00017E06                            
00017E06                            loc_1784C:				; XREF: loc_177E6
00017E06 7064                       		moveq	#100,d0
00017E08 6100 0000                  		bsr.w	AddPoints
00017E0C 117C 0008 0025             		move.b	#8,$25(a0)
00017E12 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E18 4E75                       		rts	
00017E1A                            
00017E1A                            ; ---------------------------------------------------------------------------
00017E1A                            ; Defeated boss	subroutine
00017E1A                            ; ---------------------------------------------------------------------------
00017E1A                            
00017E1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E1A                            
00017E1A                            
00017E1A                            BossDefeated:
00017E1A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E1E 0200 0007                  		andi.b	#7,d0
00017E22 6600                       		bne.s	locret_178A2
00017E24 4EB9 0000 DFF2             		jsr	SingleObjLoad
00017E2A 6600                       		bne.s	locret_178A2
00017E2C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E30 3368 0008 0008             		move.w	8(a0),8(a1)
00017E36 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E3C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017E42 3200                       		move.w	d0,d1
00017E44 7200                       		moveq	#0,d1
00017E46 1200                       		move.b	d0,d1
00017E48 E409                       		lsr.b	#2,d1
00017E4A 0441 0020                  		subi.w	#$20,d1
00017E4E D369 0008                  		add.w	d1,8(a1)
00017E52 E048                       		lsr.w	#8,d0
00017E54 E608                       		lsr.b	#3,d0
00017E56 D169 000C                  		add.w	d0,$C(a1)
00017E5A                            
00017E5A                            locret_178A2:
00017E5A 4E75                       		rts	
00017E5C                            ; End of function BossDefeated
00017E5C                            
00017E5C                            ; ---------------------------------------------------------------------------
00017E5C                            ; Subroutine to	move a boss
00017E5C                            ; ---------------------------------------------------------------------------
00017E5C                            
00017E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E5C                            
00017E5C                            
00017E5C                            BossMove:
00017E5C 2428 0030                  		move.l	$30(a0),d2
00017E60 2628 0038                  		move.l	$38(a0),d3
00017E64 3028 0010                  		move.w	$10(a0),d0
00017E68 48C0                       		ext.l	d0
00017E6A E180                       		asl.l	#8,d0
00017E6C D480                       		add.l	d0,d2
00017E6E 3028 0012                  		move.w	$12(a0),d0
00017E72 48C0                       		ext.l	d0
00017E74 E180                       		asl.l	#8,d0
00017E76 D680                       		add.l	d0,d3
00017E78 2142 0030                  		move.l	d2,$30(a0)
00017E7C 2143 0038                  		move.l	d3,$38(a0)
00017E80 4E75                       		rts	
00017E82                            ; End of function BossMove
00017E82                            
00017E82                            ; ===========================================================================
00017E82                            
00017E82                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017E82 317C FF00 0010             		move.w	#-$100,$10(a0)
00017E88 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017E8E 6100 FFCC                  		bsr.w	BossMove
00017E92 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017E98 6600                       		bne.s	loc_17916
00017E9A 317C 0000 0010             		move.w	#0,$10(a0)
00017EA0 317C 0000 0012             		move.w	#0,$12(a0)
00017EA6 5428 0025                  		addq.b	#2,$25(a0)
00017EAA 4EB9 0000 E008             		jsr	SingleObjLoad2
00017EB0 6600                       		bne.s	loc_17910
00017EB2 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017EB6 3368 0030 0008             		move.w	$30(a0),8(a1)
00017EBC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017EC2 2348 0034                  		move.l	a0,$34(a1)
00017EC6                            
00017EC6                            loc_17910:
00017EC6 317C 0077 003C             		move.w	#$77,$3C(a0)
00017ECC                            
00017ECC                            loc_17916:
00017ECC 6000 FED2                  		bra.w	loc_177E6
00017ED0                            ; ===========================================================================
00017ED0                            
00017ED0                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017ED0 5368 003C                  		subq.w	#1,$3C(a0)
00017ED4 6A00                       		bpl.s	Obj3D_Reverse
00017ED6 5428 0025                  		addq.b	#2,$25(a0)
00017EDA 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017EE0 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017EE6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EEC 6600                       		bne.s	Obj3D_Reverse
00017EEE 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017EF4 317C 0040 0010             		move.w	#$40,$10(a0)
00017EFA                            
00017EFA                            Obj3D_Reverse:
00017EFA 0828 0000 0022             		btst	#0,$22(a0)
00017F00 6600                       		bne.s	loc_17950
00017F02 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F06                            
00017F06                            loc_17950:
00017F06 6000 FE98                  		bra.w	loc_177E6
00017F0A                            ; ===========================================================================
00017F0A                            
00017F0A                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F0A 5368 003C                  		subq.w	#1,$3C(a0)
00017F0E 6B00                       		bmi.s	loc_17960
00017F10 6100 FF4A                  		bsr.w	BossMove
00017F14 6000                       		bra.s	loc_17976
00017F16                            ; ===========================================================================
00017F16                            
00017F16                            loc_17960:
00017F16 0868 0000 0022             		bchg	#0,$22(a0)
00017F1C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F22 5528 0025                  		subq.b	#2,$25(a0)
00017F26 317C 0000 0010             		move.w	#0,$10(a0)
00017F2C                            
00017F2C                            loc_17976:
00017F2C 6000 FE72                  		bra.w	loc_177E6
00017F30                            ; ===========================================================================
00017F30                            
00017F30                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F30 5368 003C                  		subq.w	#1,$3C(a0)
00017F34 6B00                       		bmi.s	loc_17984
00017F36 6000 FEE2                  		bra.w	BossDefeated
00017F3A                            ; ===========================================================================
00017F3A                            
00017F3A                            loc_17984:
00017F3A 08E8 0000 0022             		bset	#0,$22(a0)
00017F40 08A8 0007 0022             		bclr	#7,$22(a0)
00017F46 4268 0010                  		clr.w	$10(a0)
00017F4A 5428 0025                  		addq.b	#2,$25(a0)
00017F4E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017F54 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017F58 6600                       		bne.s	locret_179AA
00017F5A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017F60                            
00017F60                            locret_179AA:
00017F60 4E75                       		rts	
00017F62                            ; ===========================================================================
00017F62                            
00017F62                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017F62 5268 003C                  		addq.w	#1,$3C(a0)
00017F66 6700                       		beq.s	loc_179BC
00017F68 6A00                       		bpl.s	loc_179C2
00017F6A 0668 0018 0012             		addi.w	#$18,$12(a0)
00017F70 6000                       		bra.s	loc_179EE
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            loc_179BC:
00017F72 4268 0012                  		clr.w	$12(a0)
00017F76 6000                       		bra.s	loc_179EE
00017F78                            ; ===========================================================================
00017F78                            
00017F78                            loc_179C2:
00017F78 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017F7E 6500                       		bcs.s	loc_179DA
00017F80 6700                       		beq.s	loc_179E0
00017F82 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017F88 6500                       		bcs.s	loc_179EE
00017F8A 5428 0025                  		addq.b	#2,$25(a0)
00017F8E 6000                       		bra.s	loc_179EE
00017F90                            ; ===========================================================================
00017F90                            
00017F90                            loc_179DA:
00017F90 5168 0012                  		subq.w	#8,$12(a0)
00017F94 6000                       		bra.s	loc_179EE
00017F96                            ; ===========================================================================
00017F96                            
00017F96                            loc_179E0:
00017F96 4268 0012                  		clr.w	$12(a0)
00017F9A 303C 0081                  		move.w	#$81,d0
00017F9E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00017FA4                            
00017FA4                            loc_179EE:
00017FA4 6100 FEB6                  		bsr.w	BossMove
00017FA8 6000 FDF6                  		bra.w	loc_177E6
00017FAC                            ; ===========================================================================
00017FAC                            
00017FAC                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017FAC 317C 0400 0010             		move.w	#$400,$10(a0)
00017FB2 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017FB8 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017FBE 6700                       		beq.s	loc_17A10
00017FC0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017FC4 6000                       		bra.s	loc_17A16
00017FC6                            ; ===========================================================================
00017FC6                            
00017FC6                            loc_17A10:
00017FC6 4A28 0001                  		tst.b	1(a0)
00017FCA 6A00                       		bpl.s	Obj3D_ShipDel
00017FCC                            
00017FCC                            loc_17A16:
00017FCC 6100 FE8E                  		bsr.w	BossMove
00017FD0 6000 FDCE                  		bra.w	loc_177E6
00017FD4                            ; ===========================================================================
00017FD4                            
00017FD4                            Obj3D_ShipDel:
00017FD4 4EF9 0000 DBA8             		jmp	DeleteObject
00017FDA                            ; ===========================================================================
00017FDA                            
00017FDA                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017FDA 7000                       		moveq	#0,d0
00017FDC 7201                       		moveq	#1,d1
00017FDE 2268 0034                  		movea.l	$34(a0),a1
00017FE2 1029 0025                  		move.b	$25(a1),d0
00017FE6 5900                       		subq.b	#4,d0
00017FE8 6600                       		bne.s	loc_17A3E
00017FEA 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017FF0 6600                       		bne.s	loc_17A46
00017FF2 7204                       		moveq	#4,d1
00017FF4                            
00017FF4                            loc_17A3E:
00017FF4 5D00                       		subq.b	#6,d0
00017FF6 6B00                       		bmi.s	loc_17A46
00017FF8 720A                       		moveq	#$A,d1
00017FFA 6000                       		bra.s	loc_17A5A
00017FFC                            ; ===========================================================================
00017FFC                            
00017FFC                            loc_17A46:
00017FFC 4A29 0020                  		tst.b	$20(a1)
00018000 6600                       		bne.s	loc_17A50
00018002 7205                       		moveq	#5,d1
00018004 6000                       		bra.s	loc_17A5A
00018006                            ; ===========================================================================
00018006                            
00018006                            loc_17A50:
00018006 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001800C 6500                       		bcs.s	loc_17A5A
0001800E 7204                       		moveq	#4,d1
00018010                            
00018010                            loc_17A5A:
00018010 1141 001C                  		move.b	d1,$1C(a0)
00018014 5500                       		subq.b	#2,d0
00018016 6600                       		bne.s	Obj3D_FaceDisp
00018018 117C 0006 001C             		move.b	#6,$1C(a0)
0001801E 4A28 0001                  		tst.b	1(a0)
00018022 6A00                       		bpl.s	Obj3D_FaceDel
00018024                            
00018024                            Obj3D_FaceDisp:
00018024 6000                       		bra.s	Obj3D_Display
00018026                            ; ===========================================================================
00018026                            
00018026                            Obj3D_FaceDel:
00018026 4EF9 0000 DBA8             		jmp	DeleteObject
0001802C                            ; ===========================================================================
0001802C                            
0001802C                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001802C 117C 0007 001C             		move.b	#7,$1C(a0)
00018032 2268 0034                  		movea.l	$34(a0),a1
00018036 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001803C 6600                       		bne.s	loc_17A96
0001803E 117C 000B 001C             		move.b	#$B,$1C(a0)
00018044 4A28 0001                  		tst.b	1(a0)
00018048 6A00                       		bpl.s	Obj3D_FlameDel
0001804A 6000                       		bra.s	Obj3D_FlameDisp
0001804C                            ; ===========================================================================
0001804C                            
0001804C                            loc_17A96:
0001804C 3029 0010                  		move.w	$10(a1),d0
00018050 6700                       		beq.s	Obj3D_FlameDisp
00018052 117C 0008 001C             		move.b	#8,$1C(a0)
00018058                            
00018058                            Obj3D_FlameDisp:
00018058 6000                       		bra.s	Obj3D_Display
0001805A                            ; ===========================================================================
0001805A                            
0001805A                            Obj3D_FlameDel:
0001805A 4EF9 0000 DBA8             		jmp	DeleteObject
00018060                            ; ===========================================================================
00018060                            
00018060                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018060 2268 0034                  		movea.l	$34(a0),a1
00018064 3169 0008 0008             		move.w	8(a1),8(a0)
0001806A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018070 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018076 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001807C 4EB9 0000 AC42             		jsr	AnimateSprite
00018082 1028 0022                  		move.b	$22(a0),d0
00018086 0200 0003                  		andi.b	#3,d0
0001808A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018090 8128 0001                  		or.b	d0,1(a0)
00018094 4EF9 0000 DB6C             		jmp	DisplaySprite
0001809A                            ; ===========================================================================
0001809A                            ; ---------------------------------------------------------------------------
0001809A                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001809A                            ; ---------------------------------------------------------------------------
0001809A                            
0001809A                            Obj48:					; XREF: Obj_Index
0001809A 7000                       		moveq	#0,d0
0001809C 1028 0024                  		move.b	$24(a0),d0
000180A0 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000180A4 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000180A8                            ; ===========================================================================
000180A8 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000180AA 0000                       		dc.w Obj48_Base-Obj48_Index
000180AC 0000                       		dc.w Obj48_Display2-Obj48_Index
000180AE 0000                       		dc.w loc_17C68-Obj48_Index
000180B0 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000180B2                            ; ===========================================================================
000180B2                            
000180B2                            Obj48_Main:				; XREF: Obj48_Index
000180B2 5428 0024                  		addq.b	#2,$24(a0)
000180B6 317C 4080 0026             		move.w	#$4080,$26(a0)
000180BC 317C FE00 003E             		move.w	#-$200,$3E(a0)
000180C2 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000180CA 317C 046C 0002             		move.w	#$46C,2(a0)
000180D0 45E8 0028                  		lea	$28(a0),a2
000180D4 14FC 0000                  		move.b	#0,(a2)+
000180D8 7205                       		moveq	#5,d1
000180DA 2248                       		movea.l	a0,a1
000180DC 6000                       		bra.s	loc_17B60
000180DE                            ; ===========================================================================
000180DE                            
000180DE                            Obj48_MakeLinks:
000180DE 4EB9 0000 E008             		jsr	SingleObjLoad2
000180E4 6600                       		bne.s	Obj48_MakeBall
000180E6 3368 0008 0008             		move.w	8(a0),8(a1)
000180EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180F2 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000180F6 137C 0006 0024             		move.b	#6,$24(a1)
000180FC 237C 0000 8096 0004        		move.l	#Map_obj15,4(a1)
00018104 337C 0380 0002             		move.w	#$380,2(a1)
0001810A 137C 0001 001A             		move.b	#1,$1A(a1)
00018110 5228 0028                  		addq.b	#1,$28(a0)
00018114                            
00018114                            loc_17B60:				; XREF: Obj48_Main
00018114 3A09                       		move.w	a1,d5
00018116 0445 D000                  		subi.w	#$D000,d5
0001811A EC4D                       		lsr.w	#6,d5
0001811C 0245 007F                  		andi.w	#$7F,d5
00018120 14C5                       		move.b	d5,(a2)+
00018122 137C 0004 0001             		move.b	#4,1(a1)
00018128 137C 0008 0019             		move.b	#8,$19(a1)
0001812E 137C 0006 0018             		move.b	#6,$18(a1)
00018134 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001813A 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001813E                            
0001813E                            Obj48_MakeBall:
0001813E 137C 0008 0024             		move.b	#8,$24(a1)
00018144 237C 0000 85F4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001814C 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018152 137C 0001 001A             		move.b	#1,$1A(a1)
00018158 137C 0005 0018             		move.b	#5,$18(a1)
0001815E 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018164 4E75                       		rts	
00018166                            ; ===========================================================================
00018166                            
00018166 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001816C                            
0001816C                            ; ===========================================================================
0001816C                            
0001816C                            Obj48_Base:				; XREF: Obj48_Index
0001816C 47F9 0001 8166             		lea	(Obj48_PosData).l,a3
00018172 45E8 0028                  		lea	$28(a0),a2
00018176 7C00                       		moveq	#0,d6
00018178 1C1A                       		move.b	(a2)+,d6
0001817A                            
0001817A                            loc_17BC6:
0001817A 7800                       		moveq	#0,d4
0001817C 181A                       		move.b	(a2)+,d4
0001817E ED4C                       		lsl.w	#6,d4
00018180 0684 00FF D000             		addi.l	#$FFD000,d4
00018186 2244                       		movea.l	d4,a1
00018188 101B                       		move.b	(a3)+,d0
0001818A B029 003C                  		cmp.b	$3C(a1),d0
0001818E 6700                       		beq.s	loc_17BE0
00018190 5229 003C                  		addq.b	#1,$3C(a1)
00018194                            
00018194                            loc_17BE0:
00018194 51CE FFE4                  		dbf	d6,loc_17BC6
00018198                            
00018198 B029 003C                  		cmp.b	$3C(a1),d0
0001819C 6600                       		bne.s	loc_17BFA
0001819E 2268 0034                  		movea.l	$34(a0),a1
000181A2 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000181A8 6600                       		bne.s	loc_17BFA
000181AA 5428 0024                  		addq.b	#2,$24(a0)
000181AE                            
000181AE                            loc_17BFA:
000181AE 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000181B4 6700                       		beq.s	Obj48_Display
000181B6 5268 0032                  		addq.w	#1,$32(a0)
000181BA                            
000181BA                            Obj48_Display:
000181BA 6100 0000                  		bsr.w	sub_17C2A
000181BE 1028 0026                  		move.b	$26(a0),d0
000181C2 4EB9 0000 8008             		jsr	(Obj15_Move2).l
000181C8 4EF9 0000 DB6C             		jmp	DisplaySprite
000181CE                            ; ===========================================================================
000181CE                            
000181CE                            Obj48_Display2:				; XREF: Obj48_Index
000181CE 6100 0000                  		bsr.w	sub_17C2A
000181D2 4EB9 0000 7FC8             		jsr	(Obj48_Move).l
000181D8 4EF9 0000 DB6C             		jmp	DisplaySprite
000181DE                            
000181DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181DE                            
000181DE                            
000181DE                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000181DE 2268 0034                  		movea.l	$34(a0),a1
000181E2 0628 0020 001B             		addi.b	#$20,$1B(a0)
000181E8 6400                       		bcc.s	loc_17C3C
000181EA 0868 0000 001A             		bchg	#0,$1A(a0)
000181F0                            
000181F0                            loc_17C3C:
000181F0 3169 0008 003A             		move.w	8(a1),$3A(a0)
000181F6 3029 000C                  		move.w	$C(a1),d0
000181FA D068 0032                  		add.w	$32(a0),d0
000181FE 3140 0038                  		move.w	d0,$38(a0)
00018202 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018208 4A29 0022                  		tst.b	$22(a1)
0001820C 6A00                       		bpl.s	locret_17C66
0001820E 10BC 003F                  		move.b	#$3F,0(a0)
00018212 117C 0000 0024             		move.b	#0,$24(a0)
00018218                            
00018218                            locret_17C66:
00018218 4E75                       		rts	
0001821A                            ; End of function sub_17C2A
0001821A                            
0001821A                            ; ===========================================================================
0001821A                            
0001821A                            loc_17C68:				; XREF: Obj48_Index
0001821A 2268 0034                  		movea.l	$34(a0),a1
0001821E 4A29 0022                  		tst.b	$22(a1)
00018222 6A00                       		bpl.s	Obj48_Display3
00018224 10BC 003F                  		move.b	#$3F,0(a0)
00018228 117C 0000 0024             		move.b	#0,$24(a0)
0001822E                            
0001822E                            Obj48_Display3:
0001822E 4EF9 0000 DB6C             		jmp	DisplaySprite
00018234                            ; ===========================================================================
00018234                            
00018234                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018234 7000                       		moveq	#0,d0
00018236 4A28 001A                  		tst.b	$1A(a0)
0001823A 6600                       		bne.s	Obj48_Vanish
0001823C 5200                       		addq.b	#1,d0
0001823E                            
0001823E                            Obj48_Vanish:
0001823E 1140 001A                  		move.b	d0,$1A(a0)
00018242 2268 0034                  		movea.l	$34(a0),a1
00018246 4A29 0022                  		tst.b	$22(a1)
0001824A 6A00                       		bpl.s	Obj48_Display4
0001824C 117C 0000 0020             		move.b	#0,$20(a0)
00018252 6100 FBC6                  		bsr.w	BossDefeated
00018256 5328 003C                  		subq.b	#1,$3C(a0)
0001825A 6A00                       		bpl.s	Obj48_Display4
0001825C 10BC 003F                  		move.b	#$3F,(a0)
00018260 117C 0000 0024             		move.b	#0,$24(a0)
00018266                            
00018266                            Obj48_Display4:
00018266 4EF9 0000 DB6C             		jmp	DisplaySprite
0001826C                            ; ===========================================================================
0001826C                            Ani_Eggman:
0001826C                            	include "_anim\Eggman.asm"
0001826C                            ; ---------------------------------------------------------------------------
0001826C                            ; Animation script - Eggman (bosses)
0001826C                            ; ---------------------------------------------------------------------------
0001826C 0000                       		dc.w byte_17CD4-Ani_Eggman
0001826E 0000                       		dc.w byte_17CD8-Ani_Eggman
00018270 0000                       		dc.w byte_17CDC-Ani_Eggman
00018272 0000                       		dc.w byte_17CE0-Ani_Eggman
00018274 0000                       		dc.w byte_17CE4-Ani_Eggman
00018276 0000                       		dc.w byte_17CE8-Ani_Eggman
00018278 0000                       		dc.w byte_17CEC-Ani_Eggman
0001827A 0000                       		dc.w byte_17CF0-Ani_Eggman
0001827C 0000                       		dc.w byte_17CF4-Ani_Eggman
0001827E 0000                       		dc.w byte_17CF8-Ani_Eggman
00018280 0000                       		dc.w byte_17CFC-Ani_Eggman
00018282 0000                       		dc.w byte_17D00-Ani_Eggman
00018284 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018288 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001828C 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018290 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018294 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018298 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001829C 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000182A0 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000182A4 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000182A8 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000182AC 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000182B0 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000182BC                            		even
000182BC                            		even
000182BC                            
000182BC                            ; ---------------------------------------------------------------------------
000182BC                            ; Sprite mappings - Eggman (boss levels)
000182BC                            ; ---------------------------------------------------------------------------
000182BC                            Map_Eggman:
000182BC                            	include "_maps\Eggman.asm"
000182BC                            Map_dc7e:
000182BC 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000182BE 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000182C0 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000182C2 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000182C4 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000182C6 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000182C8 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000182CA 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000182CC 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000182CE 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000182D0 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000182D2 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000182D4 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000182D6 06                         Map_dc7e_1A: 	dc.b $6
000182D7 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000182DC EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000182E1 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000182E6 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000182EB 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000182F0 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000182F5 02                         Map_dc7e_39: 	dc.b $2
000182F6 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000182FB EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018300 02                         Map_dc7e_44: 	dc.b $2
00018301 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018306 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001830B 03                         Map_dc7e_4F: 	dc.b $3
0001830C E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018311 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018316 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
0001831B 03                         Map_dc7e_5F: 	dc.b $3
0001831C E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018321 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018326 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
0001832B 03                         Map_dc7e_6F: 	dc.b $3
0001832C E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018331 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018336 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001833B 03                         Map_dc7e_7F: 	dc.b $3
0001833C E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018341 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018346 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001834B 04                         Map_dc7e_8F: 	dc.b $4
0001834C E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018351 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018356 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001835B EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018360 01                         Map_dc7e_A4: 	dc.b $1
00018361 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018366 01                         Map_dc7e_AA: 	dc.b $1
00018367 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001836C 00                         Map_dc7e_B0: 	dc.b $0
0001836D 02                         Map_dc7e_B1: 	dc.b $2
0001836E 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018373 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018378 02                         Map_dc7e_BC: 	dc.b $2
00018379 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001837E 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018384 00                         	even
00018384 00                         	even
00018384                            
00018384                            ; ---------------------------------------------------------------------------
00018384                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018384                            ; ---------------------------------------------------------------------------
00018384                            Map_BossItems:
00018384                            	include "_maps\Boss items.asm"
00018384                            ; ---------------------------------------------------------------------------
00018384                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018384                            ; ---------------------------------------------------------------------------
00018384 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018388 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001838C 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018390 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018394 01                         byte_17DE4:	dc.b 1
00018395 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001839A 02                         byte_17DEA:	dc.b 2
0001839B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000183A0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183A5 00                         		dc.b 0
000183A6 01                         byte_17DF6:	dc.b 1
000183A7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000183AC 01                         byte_17DFC:	dc.b 1
000183AD 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000183B2 01                         byte_17E02:	dc.b 1
000183B3 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000183B8 04                         byte_17E08:	dc.b 4
000183B9 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000183BE F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000183C3 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000183C8 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000183CD 00                         		dc.b 0
000183CE 02                         byte_17E1E:	dc.b 2
000183CF 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000183D4 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000183D9 00                         		dc.b 0
000183DA 02                         byte_17E2A:	dc.b 2
000183DB 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000183E0 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000183E6 00                         		even
000183E6 00                         		even
000183E6                            
000183E6                            ; ===========================================================================
000183E6                            ; ---------------------------------------------------------------------------
000183E6                            ; Object 77 - Eggman (LZ)
000183E6                            ; ---------------------------------------------------------------------------
000183E6                            
000183E6                            Obj77:					; XREF: Obj_Index
000183E6 7000                       		moveq	#0,d0
000183E8 1028 0024                  		move.b	$24(a0),d0
000183EC 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000183F0 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000183F4                            ; ===========================================================================
000183F4 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
000183F6 0000                       		dc.w Obj77_ShipMain-Obj77_Index
000183F8 0000                       		dc.w Obj77_FaceMain-Obj77_Index
000183FA 0000                       		dc.w Obj77_FlameMain-Obj77_Index
000183FC                            
000183FC 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
000183FE 0401                       		dc.b 4,	1
00018400 0607                       		dc.b 6,	7
00018402                            ; ===========================================================================
00018402                            
00018402                            Obj77_Main:				; XREF: Obj77_Index
00018402 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018408 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001840E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018414 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001841A 117C 000F 0020             		move.b	#$F,$20(a0)
00018420 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018426 117C 0004 0018             		move.b	#4,$18(a0)
0001842C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018430 2248                       		movea.l	a0,a1
00018432 7202                       		moveq	#2,d1
00018434 6000                       		bra.s	Obj77_LoadBoss
00018436                            ; ===========================================================================
00018436                            
00018436                            Obj77_Loop:
00018436 4EB9 0000 E008             		jsr	SingleObjLoad2
0001843C 6600                       		bne.s	Obj77_ShipMain
0001843E 12BC 0077                  		move.b	#$77,0(a1)
00018442 3368 0008 0008             		move.w	8(a0),8(a1)
00018448 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001844E                            
0001844E                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001844E 08A8 0000 0022             		bclr	#0,$22(a0)
00018454 4229 0025                  		clr.b	$25(a1)
00018458 135A 0024                  		move.b	(a2)+,$24(a1)
0001845C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018460 1368 0018 0018             		move.b	$18(a0),$18(a1)
00018466 237C 0001 82BC 0004        		move.l	#Map_Eggman,4(a1)
0001846E 337C 0400 0002             		move.w	#$400,2(a1)
00018474 137C 0004 0001             		move.b	#4,1(a1)
0001847A 137C 0020 0019             		move.b	#$20,$19(a1)
00018480 2348 0034                  		move.l	a0,$34(a1)
00018484 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018488                            
00018488                            Obj77_ShipMain:
00018488 43F8 D000                  		lea	($FFFFD000).w,a1
0001848C 7000                       		moveq	#0,d0
0001848E 1028 0025                  		move.b	$25(a0),d0
00018492 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018496 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001849A 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
000184A0 4EB9 0000 AC42             		jsr	AnimateSprite
000184A6 7003                       		moveq	#3,d0
000184A8 C028 0022                  		and.b	$22(a0),d0
000184AC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000184B2 8128 0001                  		or.b	d0,1(a0)
000184B6 4EF9 0000 DB6C             		jmp	DisplaySprite
000184BC                            ; ===========================================================================
000184BC 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000184C0 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000184C4 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000184C8 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000184CC                            ; ===========================================================================
000184CC                            
000184CC                            loc_17F1E:				; XREF: Obj77_ShipIndex
000184CC 3029 0008                  		move.w	8(a1),d0
000184D0 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000184D4 6500                       		bcs.s	loc_17F38
000184D6 317C FE80 0012             		move.w	#-$180,$12(a0)
000184DC 317C 0060 0010             		move.w	#$60,$10(a0)
000184E2 5428 0025                  		addq.b	#2,$25(a0)
000184E6                            
000184E6                            loc_17F38:
000184E6 6100 F974                  		bsr.w	BossMove
000184EA 3168 0038 000C             		move.w	$38(a0),$C(a0)
000184F0 3168 0030 0008             		move.w	$30(a0),8(a0)
000184F6                            
000184F6                            loc_17F48:
000184F6 4A28 003D                  		tst.b	$3D(a0)
000184FA 6600                       		bne.s	loc_17F8E
000184FC 4A28 0022                  		tst.b	$22(a0)
00018500 6B00                       		bmi.s	loc_17F92
00018502 4A28 0020                  		tst.b	$20(a0)
00018506 6600                       		bne.s	locret_17F8C
00018508 4A28 003E                  		tst.b	$3E(a0)
0001850C 6600                       		bne.s	loc_17F70
0001850E 117C 0020 003E             		move.b	#$20,$3E(a0)
00018514 303C 00AC                  		move.w	#$AC,d0
00018518 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001851E                            
0001851E                            loc_17F70:
0001851E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018522 7000                       		moveq	#0,d0
00018524 4A51                       		tst.w	(a1)
00018526 6600                       		bne.s	loc_17F7E
00018528 303C 0EEE                  		move.w	#$EEE,d0
0001852C                            
0001852C                            loc_17F7E:
0001852C 3280                       		move.w	d0,(a1)
0001852E 5328 003E                  		subq.b	#1,$3E(a0)
00018532 6600                       		bne.s	locret_17F8C
00018534 117C 000F 0020             		move.b	#$F,$20(a0)
0001853A                            
0001853A                            locret_17F8C:
0001853A 4E75                       		rts	
0001853C                            ; ===========================================================================
0001853C                            
0001853C                            loc_17F8E:				; XREF: loc_17F48
0001853C 6000 F8DC                  		bra.w	BossDefeated
00018540                            ; ===========================================================================
00018540                            
00018540                            loc_17F92:				; XREF: loc_17F48
00018540 7064                       		moveq	#100,d0
00018542 6100 0000                  		bsr.w	AddPoints
00018546 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001854C 4E75                       		rts	
0001854E                            ; ===========================================================================
0001854E                            
0001854E                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001854E 70FE                       		moveq	#-2,d0
00018550 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018556 6500                       		bcs.s	loc_17FB6
00018558 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001855E 4268 0010                  		clr.w	$10(a0)
00018562 5240                       		addq.w	#1,d0
00018564                            
00018564                            loc_17FB6:
00018564 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001856A 6E00                       		bgt.s	loc_17FCA
0001856C 317C 0500 0038             		move.w	#$500,$38(a0)
00018572 4268 0012                  		clr.w	$12(a0)
00018576 5240                       		addq.w	#1,d0
00018578                            
00018578                            loc_17FCA:
00018578 6600                       		bne.s	loc_17FDC
0001857A 317C 0140 0010             		move.w	#$140,$10(a0)
00018580 317C FE00 0012             		move.w	#-$200,$12(a0)
00018586 5428 0025                  		addq.b	#2,$25(a0)
0001858A                            
0001858A                            loc_17FDC:
0001858A 6000 FF5A                  		bra.w	loc_17F38
0001858E                            ; ===========================================================================
0001858E                            
0001858E                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001858E 70FE                       		moveq	#-2,d0
00018590 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018596 6500                       		bcs.s	loc_17FF6
00018598 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001859E 4268 0010                  		clr.w	$10(a0)
000185A2 5240                       		addq.w	#1,d0
000185A4                            
000185A4                            loc_17FF6:
000185A4 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000185AA 6E00                       		bgt.s	loc_1800A
000185AC 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000185B2 4268 0012                  		clr.w	$12(a0)
000185B6 5240                       		addq.w	#1,d0
000185B8                            
000185B8                            loc_1800A:
000185B8 6600                       		bne.s	loc_1801A
000185BA 317C FE80 0012             		move.w	#-$180,$12(a0)
000185C0 5428 0025                  		addq.b	#2,$25(a0)
000185C4 4228 003F                  		clr.b	$3F(a0)
000185C8                            
000185C8                            loc_1801A:
000185C8 6000 FF1C                  		bra.w	loc_17F38
000185CC                            ; ===========================================================================
000185CC                            
000185CC                            loc_1801E:				; XREF: Obj77_ShipIndex
000185CC 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000185D2 6E00                       		bgt.s	loc_1804E
000185D4 317C 0100 0038             		move.w	#$100,$38(a0)
000185DA 317C 0140 0010             		move.w	#$140,$10(a0)
000185E0 317C FF80 0012             		move.w	#-$80,$12(a0)
000185E6 4A28 003D                  		tst.b	$3D(a0)
000185EA 6700                       		beq.s	loc_18046
000185EC E1E8 0010                  		asl	$10(a0)
000185F0 E1E8 0012                  		asl	$12(a0)
000185F4                            
000185F4                            loc_18046:
000185F4 5428 0025                  		addq.b	#2,$25(a0)
000185F8 6000 FEEC                  		bra.w	loc_17F38
000185FC                            ; ===========================================================================
000185FC                            
000185FC                            loc_1804E:
000185FC 08E8 0000 0022             		bset	#0,$22(a0)
00018602 5428 003F                  		addq.b	#2,$3F(a0)
00018606 1028 003F                  		move.b	$3F(a0),d0
0001860A 4EB9 0000 2C22             		jsr	(CalcSine).l
00018610 4A41                       		tst.w	d1
00018612 6A00                       		bpl.s	loc_1806C
00018614 08A8 0000 0022             		bclr	#0,$22(a0)
0001861A                            
0001861A                            loc_1806C:
0001861A E840                       		asr.w	#4,d0
0001861C 4840                       		swap	d0
0001861E 4240                       		clr.w	d0
00018620 D0A8 0030                  		add.l	$30(a0),d0
00018624 4840                       		swap	d0
00018626 3140 0008                  		move.w	d0,8(a0)
0001862A 3028 0012                  		move.w	$12(a0),d0
0001862E 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018632 9268 000C                  		sub.w	$C(a0),d1
00018636 6500                       		bcs.s	loc_180A2
00018638 0441 0048                  		subi.w	#$48,d1
0001863C 6500                       		bcs.s	loc_180A2
0001863E E240                       		asr.w	#1,d0
00018640 0441 0028                  		subi.w	#$28,d1
00018644 6500                       		bcs.s	loc_180A2
00018646 E240                       		asr.w	#1,d0
00018648 0441 0028                  		subi.w	#$28,d1
0001864C 6500                       		bcs.s	loc_180A2
0001864E 7000                       		moveq	#0,d0
00018650                            
00018650                            loc_180A2:
00018650 48C0                       		ext.l	d0
00018652 E180                       		asl.l	#8,d0
00018654 4A28 003D                  		tst.b	$3D(a0)
00018658 6700                       		beq.s	loc_180AE
0001865A D080                       		add.l	d0,d0
0001865C                            
0001865C                            loc_180AE:
0001865C D1A8 0038                  		add.l	d0,$38(a0)
00018660 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018666 6000 FE8E                  		bra.w	loc_17F48
0001866A                            ; ===========================================================================
0001866A                            
0001866A                            loc_180BC:				; XREF: Obj77_ShipIndex
0001866A 70FE                       		moveq	#-2,d0
0001866C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018672 6500                       		bcs.s	loc_180D2
00018674 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001867A 4268 0010                  		clr.w	$10(a0)
0001867E 5240                       		addq.w	#1,d0
00018680                            
00018680                            loc_180D2:
00018680 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018686 6E00                       		bgt.s	loc_180E6
00018688 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001868E 4268 0012                  		clr.w	$12(a0)
00018692 5240                       		addq.w	#1,d0
00018694                            
00018694                            loc_180E6:
00018694 6600                       		bne.s	loc_180F2
00018696 5428 0025                  		addq.b	#2,$25(a0)
0001869A 08A8 0000 0022             		bclr	#0,$22(a0)
000186A0                            
000186A0                            loc_180F2:
000186A0 6000 FE44                  		bra.w	loc_17F38
000186A4                            ; ===========================================================================
000186A4                            
000186A4                            loc_180F6:				; XREF: Obj77_ShipIndex
000186A4 4A28 003D                  		tst.b	$3D(a0)
000186A8 6600                       		bne.s	loc_18112
000186AA 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000186B0 6D00                       		blt.s	loc_18126
000186B2 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000186B8 6E00                       		bgt.s	loc_18126
000186BA 117C 0032 003C             		move.b	#$32,$3C(a0)
000186C0                            
000186C0                            loc_18112:
000186C0 303C 0082                  		move.w	#$82,d0
000186C4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
000186CA 08E8 0000 0022             		bset	#0,$22(a0)
000186D0 5428 0025                  		addq.b	#2,$25(a0)
000186D4                            
000186D4                            loc_18126:
000186D4 6000 FE10                  		bra.w	loc_17F38
000186D8                            ; ===========================================================================
000186D8                            
000186D8                            loc_1812A:				; XREF: Obj77_ShipIndex
000186D8 4A28 003D                  		tst.b	$3D(a0)
000186DC 6600                       		bne.s	loc_18136
000186DE 5328 003C                  		subq.b	#1,$3C(a0)
000186E2 6600                       		bne.s	loc_1814E
000186E4                            
000186E4                            loc_18136:
000186E4 4228 003C                  		clr.b	$3C(a0)
000186E8 317C 0400 0010             		move.w	#$400,$10(a0)
000186EE 317C FFC0 0012             		move.w	#-$40,$12(a0)
000186F4 4228 003D                  		clr.b	$3D(a0)
000186F8 5428 0025                  		addq.b	#2,$25(a0)
000186FC                            
000186FC                            loc_1814E:
000186FC 6000 FDE8                  		bra.w	loc_17F38
00018700                            ; ===========================================================================
00018700                            
00018700                            loc_18152:				; XREF: Obj77_ShipIndex
00018700 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018706 6400                       		bcc.s	loc_18160
00018708 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001870C 6000                       		bra.s	loc_18166
0001870E                            ; ===========================================================================
0001870E                            
0001870E                            loc_18160:
0001870E 4A28 0001                  		tst.b	1(a0)
00018712 6A00                       		bpl.s	Obj77_ShipDel
00018714                            
00018714                            loc_18166:
00018714 6000 FDD0                  		bra.w	loc_17F38
00018718                            ; ===========================================================================
00018718                            
00018718                            Obj77_ShipDel:
00018718 4EF9 0000 DBA8             		jmp	DeleteObject
0001871E                            ; ===========================================================================
0001871E                            
0001871E                            Obj77_FaceMain:				; XREF: Obj77_Index
0001871E 2268 0034                  		movea.l	$34(a0),a1
00018722 1011                       		move.b	(a1),d0
00018724 B010                       		cmp.b	(a0),d0
00018726 6600                       		bne.s	Obj77_FaceDel
00018728 7000                       		moveq	#0,d0
0001872A 1029 0025                  		move.b	$25(a1),d0
0001872E 7201                       		moveq	#1,d1
00018730 4A28 003D                  		tst.b	$3D(a0)
00018734 6700                       		beq.s	loc_1818C
00018736 720A                       		moveq	#$A,d1
00018738 6000                       		bra.s	loc_181A0
0001873A                            ; ===========================================================================
0001873A                            
0001873A                            loc_1818C:
0001873A 4A29 0020                  		tst.b	$20(a1)
0001873E 6600                       		bne.s	loc_18196
00018740 7205                       		moveq	#5,d1
00018742 6000                       		bra.s	loc_181A0
00018744                            ; ===========================================================================
00018744                            
00018744                            loc_18196:
00018744 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001874A 6500                       		bcs.s	loc_181A0
0001874C 7204                       		moveq	#4,d1
0001874E                            
0001874E                            loc_181A0:
0001874E 1141 001C                  		move.b	d1,$1C(a0)
00018752 0C00 000E                  		cmpi.b	#$E,d0
00018756 6600                       		bne.s	loc_181B6
00018758 117C 0006 001C             		move.b	#6,$1C(a0)
0001875E 4A28 0001                  		tst.b	1(a0)
00018762 6A00                       		bpl.s	Obj77_FaceDel
00018764                            
00018764                            loc_181B6:
00018764 6000                       		bra.s	Obj77_Display
00018766                            ; ===========================================================================
00018766                            
00018766                            Obj77_FaceDel:
00018766 4EF9 0000 DBA8             		jmp	DeleteObject
0001876C                            ; ===========================================================================
0001876C                            
0001876C                            Obj77_FlameMain:			; XREF: Obj77_Index
0001876C 117C 0007 001C             		move.b	#7,$1C(a0)
00018772 2268 0034                  		movea.l	$34(a0),a1
00018776 1011                       		move.b	(a1),d0
00018778 B010                       		cmp.b	(a0),d0
0001877A 6600                       		bne.s	Obj77_FlameDel
0001877C 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018782 6600                       		bne.s	loc_181F0
00018784 117C 000B 001C             		move.b	#$B,$1C(a0)
0001878A 4A28 0001                  		tst.b	1(a0)
0001878E 6A00                       		bpl.s	Obj77_FlameDel
00018790 6000                       		bra.s	loc_181F0
00018792                            ; ===========================================================================
00018792 4A69 0010                  		tst.w	$10(a1)
00018796 6700                       		beq.s	loc_181F0
00018798 117C 0008 001C             		move.b	#8,$1C(a0)
0001879E                            
0001879E                            loc_181F0:
0001879E 6000                       		bra.s	Obj77_Display
000187A0                            ; ===========================================================================
000187A0                            
000187A0                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000187A0 4EF9 0000 DBA8             		jmp	DeleteObject
000187A6                            ; ===========================================================================
000187A6                            
000187A6                            Obj77_Display:
000187A6 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
000187AC 4EB9 0000 AC42             		jsr	AnimateSprite
000187B2 2268 0034                  		movea.l	$34(a0),a1
000187B6 3169 0008 0008             		move.w	8(a1),8(a0)
000187BC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000187C2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000187C8 7003                       		moveq	#3,d0
000187CA C028 0022                  		and.b	$22(a0),d0
000187CE 0228 00FC 0001             		andi.b	#-4,1(a0)
000187D4 8128 0001                  		or.b	d0,1(a0)
000187D8 4EF9 0000 DB6C             		jmp	DisplaySprite
000187DE                            ; ===========================================================================
000187DE                            ; ---------------------------------------------------------------------------
000187DE                            ; Object 73 - Eggman (MZ)
000187DE                            ; ---------------------------------------------------------------------------
000187DE                            
000187DE                            Obj73:					; XREF: Obj_Index
000187DE 7000                       		moveq	#0,d0
000187E0 1028 0024                  		move.b	$24(a0),d0
000187E4 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000187E8 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000187EC                            ; ===========================================================================
000187EC 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000187EE 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000187F0 0000                       		dc.w Obj73_FaceMain-Obj73_Index
000187F2 0000                       		dc.w Obj73_FlameMain-Obj73_Index
000187F4 0000                       		dc.w Obj73_TubeMain-Obj73_Index
000187F6                            
000187F6 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000187F9 0401 04                    		dc.b 4,	1, 4
000187FC 0607 04                    		dc.b 6,	7, 4
000187FF 0800 03                    		dc.b 8,	0, 3
00018802                            ; ===========================================================================
00018802                            
00018802                            Obj73_Main:				; XREF: Obj73_Index
00018802 3168 0008 0030             		move.w	8(a0),$30(a0)
00018808 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001880E 117C 000F 0020             		move.b	#$F,$20(a0)
00018814 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001881A 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001881E 2248                       		movea.l	a0,a1
00018820 7203                       		moveq	#3,d1
00018822 6000                       		bra.s	Obj73_LoadBoss
00018824                            ; ===========================================================================
00018824                            
00018824                            Obj73_Loop:
00018824 4EB9 0000 E008             		jsr	SingleObjLoad2
0001882A 6600                       		bne.s	Obj73_ShipMain
0001882C 12BC 0073                  		move.b	#$73,0(a1)
00018830 3368 0008 0008             		move.w	8(a0),8(a1)
00018836 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001883C                            
0001883C                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001883C 08A8 0000 0022             		bclr	#0,$22(a0)
00018842 4229 0025                  		clr.b	$25(a1)
00018846 135A 0024                  		move.b	(a2)+,$24(a1)
0001884A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001884E 135A 0018                  		move.b	(a2)+,$18(a1)
00018852 237C 0001 82BC 0004        		move.l	#Map_Eggman,4(a1)
0001885A 337C 0400 0002             		move.w	#$400,2(a1)
00018860 137C 0004 0001             		move.b	#4,1(a1)
00018866 137C 0020 0019             		move.b	#$20,$19(a1)
0001886C 2348 0034                  		move.l	a0,$34(a1)
00018870 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018874                            
00018874                            Obj73_ShipMain:
00018874 7000                       		moveq	#0,d0
00018876 1028 0025                  		move.b	$25(a0),d0
0001887A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001887E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018882 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
00018888 4EB9 0000 AC42             		jsr	AnimateSprite
0001888E 7003                       		moveq	#3,d0
00018890 C028 0022                  		and.b	$22(a0),d0
00018894 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001889A 8128 0001                  		or.b	d0,1(a0)
0001889E 4EF9 0000 DB6C             		jmp	DisplaySprite
000188A4                            ; ===========================================================================
000188A4 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000188A6 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000188A8 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000188AA 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000188AC 0000                       		dc.w loc_18582-Obj73_ShipIndex
000188AE                            ; ===========================================================================
000188AE                            
000188AE                            loc_18302:				; XREF: Obj73_ShipIndex
000188AE 1028 003F                  		move.b	$3F(a0),d0
000188B2 5428 003F                  		addq.b	#2,$3F(a0)
000188B6 4EB9 0000 2C22             		jsr	(CalcSine).l
000188BC E440                       		asr.w	#2,d0
000188BE 3140 0012                  		move.w	d0,$12(a0)
000188C2 317C FF00 0010             		move.w	#-$100,$10(a0)
000188C8 6100 F592                  		bsr.w	BossMove
000188CC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000188D2 6600                       		bne.s	loc_18334
000188D4 5428 0025                  		addq.b	#2,$25(a0)
000188D8 4228 0028                  		clr.b	$28(a0)
000188DC 42A8 0010                  		clr.l	$10(a0)
000188E0                            
000188E0                            loc_18334:
000188E0 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000188E6 1140 0034                  		move.b	d0,$34(a0)
000188EA                            
000188EA                            loc_1833E:
000188EA 3168 0038 000C             		move.w	$38(a0),$C(a0)
000188F0 3168 0030 0008             		move.w	$30(a0),8(a0)
000188F6 0C28 0004 0025             		cmpi.b	#4,$25(a0)
000188FC 6400                       		bcc.s	locret_18390
000188FE 4A28 0022                  		tst.b	$22(a0)
00018902 6B00                       		bmi.s	loc_18392
00018904 4A28 0020                  		tst.b	$20(a0)
00018908 6600                       		bne.s	locret_18390
0001890A 4A28 003E                  		tst.b	$3E(a0)
0001890E 6600                       		bne.s	loc_18374
00018910 117C 0028 003E             		move.b	#$28,$3E(a0)
00018916 303C 00AC                  		move.w	#$AC,d0
0001891A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018920                            
00018920                            loc_18374:
00018920 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018924 7000                       		moveq	#0,d0
00018926 4A51                       		tst.w	(a1)
00018928 6600                       		bne.s	loc_18382
0001892A 303C 0EEE                  		move.w	#$EEE,d0
0001892E                            
0001892E                            loc_18382:
0001892E 3280                       		move.w	d0,(a1)
00018930 5328 003E                  		subq.b	#1,$3E(a0)
00018934 6600                       		bne.s	locret_18390
00018936 117C 000F 0020             		move.b	#$F,$20(a0)
0001893C                            
0001893C                            locret_18390:
0001893C 4E75                       		rts	
0001893E                            ; ===========================================================================
0001893E                            
0001893E                            loc_18392:				; XREF: loc_1833E
0001893E 7064                       		moveq	#100,d0
00018940 6100 0000                  		bsr.w	AddPoints
00018944 117C 0004 0025             		move.b	#4,$25(a0)
0001894A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018950 4268 0010                  		clr.w	$10(a0)
00018954 4E75                       		rts	
00018956                            ; ===========================================================================
00018956                            
00018956                            loc_183AA:				; XREF: Obj73_ShipIndex
00018956 7000                       		moveq	#0,d0
00018958 1028 0028                  		move.b	$28(a0),d0
0001895C 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018960 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018964 0228 0006 0028             		andi.b	#6,$28(a0)
0001896A 6000 FF7E                  		bra.w	loc_1833E
0001896E                            ; ===========================================================================
0001896E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018970 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018972 0000                       		dc.w loc_183CA-off_183C2
00018974 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018976                            ; ===========================================================================
00018976                            
00018976                            loc_183CA:				; XREF: off_183C2
00018976 4A68 0010                  		tst.w	$10(a0)
0001897A 6600                       		bne.s	loc_183FE
0001897C 7040                       		moveq	#$40,d0
0001897E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018984 6700                       		beq.s	loc_183E6
00018986 6500                       		bcs.s	loc_183DE
00018988 4440                       		neg.w	d0
0001898A                            
0001898A                            loc_183DE:
0001898A 3140 0012                  		move.w	d0,$12(a0)
0001898E 6000 F4CC                  		bra.w	BossMove
00018992                            ; ===========================================================================
00018992                            
00018992                            loc_183E6:
00018992 317C 0200 0010             		move.w	#$200,$10(a0)
00018998 317C 0100 0012             		move.w	#$100,$12(a0)
0001899E 0828 0000 0022             		btst	#0,$22(a0)
000189A4 6600                       		bne.s	loc_183FE
000189A6 4468 0010                  		neg.w	$10(a0)
000189AA                            
000189AA                            loc_183FE:
000189AA 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000189B0 6400                       		bcc.s	Obj73_MakeLava
000189B2 6100 F4A8                  		bsr.w	BossMove
000189B6 5968 0012                  		subq.w	#4,$12(a0)
000189BA                            
000189BA                            Obj73_MakeLava:
000189BA 5328 0034                  		subq.b	#1,$34(a0)
000189BE 6400                       		bcc.s	loc_1845C
000189C0 4EB9 0000 DFF2             		jsr	SingleObjLoad
000189C6 6600                       		bne.s	loc_1844A
000189C8 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000189CC 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000189D2 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000189D8 0280 0000 FFFF             		andi.l	#$FFFF,d0
000189DE 80FC 0050                  		divu.w	#$50,d0
000189E2 4840                       		swap	d0
000189E4 0640 1878                  		addi.w	#$1878,d0
000189E8 3340 0008                  		move.w	d0,8(a1)
000189EC EE09                       		lsr.b	#7,d1
000189EE 337C 00FF 0028             		move.w	#$FF,$28(a1)
000189F4                            
000189F4                            loc_1844A:
000189F4 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000189FA 0200 001F                  		andi.b	#$1F,d0
000189FE 0600 0040                  		addi.b	#$40,d0
00018A02 1140 0034                  		move.b	d0,$34(a0)
00018A06                            
00018A06                            loc_1845C:
00018A06 0828 0000 0022             		btst	#0,$22(a0)
00018A0C 6700                       		beq.s	loc_18474
00018A0E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A14 6D00                       		blt.s	locret_1849C
00018A16 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A1C 6000                       		bra.s	loc_18482
00018A1E                            ; ===========================================================================
00018A1E                            
00018A1E                            loc_18474:
00018A1E 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A24 6E00                       		bgt.s	locret_1849C
00018A26 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A2C                            
00018A2C                            loc_18482:
00018A2C 4268 0010                  		clr.w	$10(a0)
00018A30 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A36 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A3C 6400                       		bcc.s	loc_18498
00018A3E 4468 0012                  		neg.w	$12(a0)
00018A42                            
00018A42                            loc_18498:
00018A42 5428 0028                  		addq.b	#2,$28(a0)
00018A46                            
00018A46                            locret_1849C:
00018A46 4E75                       		rts	
00018A48                            ; ===========================================================================
00018A48                            
00018A48                            Obj73_MakeLava2:			; XREF: off_183C2
00018A48 6100 F412                  		bsr.w	BossMove
00018A4C 3028 0038                  		move.w	$38(a0),d0
00018A50 0440 022C                  		subi.w	#$22C,d0
00018A54 6E00                       		bgt.s	locret_184F4
00018A56 303C 022C                  		move.w	#$22C,d0
00018A5A 4A68 0012                  		tst.w	$12(a0)
00018A5E 6700                       		beq.s	loc_184EA
00018A60 4268 0012                  		clr.w	$12(a0)
00018A64 317C 0050 003C             		move.w	#$50,$3C(a0)
00018A6A 0868 0000 0022             		bchg	#0,$22(a0)
00018A70 4EB9 0000 DFF2             		jsr	SingleObjLoad
00018A76 6600                       		bne.s	loc_184EA
00018A78 3368 0030 0008             		move.w	$30(a0),8(a1)
00018A7E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018A84 0669 0018 000C             		addi.w	#$18,$C(a1)
00018A8A 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018A8E 137C 0001 0028             		move.b	#1,$28(a1)
00018A94                            
00018A94                            loc_184EA:
00018A94 5368 003C                  		subq.w	#1,$3C(a0)
00018A98 6600                       		bne.s	locret_184F4
00018A9A 5428 0028                  		addq.b	#2,$28(a0)
00018A9E                            
00018A9E                            locret_184F4:
00018A9E 4E75                       		rts	
00018AA0                            ; ===========================================================================
00018AA0                            
00018AA0                            loc_184F6:				; XREF: Obj73_ShipIndex
00018AA0 5368 003C                  		subq.w	#1,$3C(a0)
00018AA4 6B00                       		bmi.s	loc_18500
00018AA6 6000 F372                  		bra.w	BossDefeated
00018AAA                            ; ===========================================================================
00018AAA                            
00018AAA                            loc_18500:
00018AAA 08E8 0000 0022             		bset	#0,$22(a0)
00018AB0 08A8 0007 0022             		bclr	#7,$22(a0)
00018AB6 4268 0010                  		clr.w	$10(a0)
00018ABA 5428 0025                  		addq.b	#2,$25(a0)
00018ABE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018AC4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018AC8 6600                       		bne.s	locret_1852A
00018ACA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018AD0 4268 0012                  		clr.w	$12(a0)
00018AD4                            
00018AD4                            locret_1852A:
00018AD4 4E75                       		rts	
00018AD6                            ; ===========================================================================
00018AD6                            
00018AD6                            loc_1852C:				; XREF: Obj73_ShipIndex
00018AD6 5268 003C                  		addq.w	#1,$3C(a0)
00018ADA 6700                       		beq.s	loc_18544
00018ADC 6A00                       		bpl.s	loc_1854E
00018ADE 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018AE4 6400                       		bcc.s	loc_18544
00018AE6 0668 0018 0012             		addi.w	#$18,$12(a0)
00018AEC 6000                       		bra.s	loc_1857A
00018AEE                            ; ===========================================================================
00018AEE                            
00018AEE                            loc_18544:
00018AEE 4268 0012                  		clr.w	$12(a0)
00018AF2 4268 003C                  		clr.w	$3C(a0)
00018AF6 6000                       		bra.s	loc_1857A
00018AF8                            ; ===========================================================================
00018AF8                            
00018AF8                            loc_1854E:
00018AF8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018AFE 6500                       		bcs.s	loc_18566
00018B00 6700                       		beq.s	loc_1856C
00018B02 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B08 6500                       		bcs.s	loc_1857A
00018B0A 5428 0025                  		addq.b	#2,$25(a0)
00018B0E 6000                       		bra.s	loc_1857A
00018B10                            ; ===========================================================================
00018B10                            
00018B10                            loc_18566:
00018B10 5168 0012                  		subq.w	#8,$12(a0)
00018B14 6000                       		bra.s	loc_1857A
00018B16                            ; ===========================================================================
00018B16                            
00018B16                            loc_1856C:
00018B16 4268 0012                  		clr.w	$12(a0)
00018B1A 303C 0083                  		move.w	#$83,d0
00018B1E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B24                            
00018B24                            loc_1857A:
00018B24 6100 F336                  		bsr.w	BossMove
00018B28 6000 FDC0                  		bra.w	loc_1833E
00018B2C                            ; ===========================================================================
00018B2C                            
00018B2C                            loc_18582:				; XREF: Obj73_ShipIndex
00018B2C 317C 0500 0010             		move.w	#$500,$10(a0)
00018B32 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B38 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018B3E 6400                       		bcc.s	loc_1859C
00018B40 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018B44 6000                       		bra.s	loc_185A2
00018B46                            ; ===========================================================================
00018B46                            
00018B46                            loc_1859C:
00018B46 4A28 0001                  		tst.b	1(a0)
00018B4A 6A00                       		bpl.s	Obj73_ShipDel
00018B4C                            
00018B4C                            loc_185A2:
00018B4C 6100 F30E                  		bsr.w	BossMove
00018B50 6000 FD98                  		bra.w	loc_1833E
00018B54                            ; ===========================================================================
00018B54                            
00018B54                            Obj73_ShipDel:
00018B54 4EF9 0000 DBA8             		jmp	DeleteObject
00018B5A                            ; ===========================================================================
00018B5A                            
00018B5A                            Obj73_FaceMain:				; XREF: Obj73_Index
00018B5A 7000                       		moveq	#0,d0
00018B5C 7201                       		moveq	#1,d1
00018B5E 2268 0034                  		movea.l	$34(a0),a1
00018B62 1029 0025                  		move.b	$25(a1),d0
00018B66 5540                       		subq.w	#2,d0
00018B68 6600                       		bne.s	loc_185D2
00018B6A 0829 0001 0028             		btst	#1,$28(a1)
00018B70 6700                       		beq.s	loc_185DA
00018B72 4A69 0012                  		tst.w	$12(a1)
00018B76 6600                       		bne.s	loc_185DA
00018B78 7204                       		moveq	#4,d1
00018B7A 6000                       		bra.s	loc_185EE
00018B7C                            ; ===========================================================================
00018B7C                            
00018B7C                            loc_185D2:
00018B7C 5500                       		subq.b	#2,d0
00018B7E 6B00                       		bmi.s	loc_185DA
00018B80 720A                       		moveq	#$A,d1
00018B82 6000                       		bra.s	loc_185EE
00018B84                            ; ===========================================================================
00018B84                            
00018B84                            loc_185DA:
00018B84 4A29 0020                  		tst.b	$20(a1)
00018B88 6600                       		bne.s	loc_185E4
00018B8A 7205                       		moveq	#5,d1
00018B8C 6000                       		bra.s	loc_185EE
00018B8E                            ; ===========================================================================
00018B8E                            
00018B8E                            loc_185E4:
00018B8E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018B94 6500                       		bcs.s	loc_185EE
00018B96 7204                       		moveq	#4,d1
00018B98                            
00018B98                            loc_185EE:
00018B98 1141 001C                  		move.b	d1,$1C(a0)
00018B9C 5900                       		subq.b	#4,d0
00018B9E 6600                       		bne.s	loc_18602
00018BA0 117C 0006 001C             		move.b	#6,$1C(a0)
00018BA6 4A28 0001                  		tst.b	1(a0)
00018BAA 6A00                       		bpl.s	Obj73_FaceDel
00018BAC                            
00018BAC                            loc_18602:
00018BAC 6000                       		bra.s	Obj73_Display
00018BAE                            ; ===========================================================================
00018BAE                            
00018BAE                            Obj73_FaceDel:
00018BAE 4EF9 0000 DBA8             		jmp	DeleteObject
00018BB4                            ; ===========================================================================
00018BB4                            
00018BB4                            Obj73_FlameMain:			; XREF: Obj73_Index
00018BB4 117C 0007 001C             		move.b	#7,$1C(a0)
00018BBA 2268 0034                  		movea.l	$34(a0),a1
00018BBE 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018BC4 6D00                       		blt.s	loc_1862A
00018BC6 117C 000B 001C             		move.b	#$B,$1C(a0)
00018BCC 4A28 0001                  		tst.b	1(a0)
00018BD0 6A00                       		bpl.s	Obj73_FlameDel
00018BD2 6000                       		bra.s	loc_18636
00018BD4                            ; ===========================================================================
00018BD4                            
00018BD4                            loc_1862A:
00018BD4 4A69 0010                  		tst.w	$10(a1)
00018BD8 6700                       		beq.s	loc_18636
00018BDA 117C 0008 001C             		move.b	#8,$1C(a0)
00018BE0                            
00018BE0                            loc_18636:
00018BE0 6000                       		bra.s	Obj73_Display
00018BE2                            ; ===========================================================================
00018BE2                            
00018BE2                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018BE2 4EF9 0000 DBA8             		jmp	DeleteObject
00018BE8                            ; ===========================================================================
00018BE8                            
00018BE8                            Obj73_Display:
00018BE8 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
00018BEE 4EB9 0000 AC42             		jsr	AnimateSprite
00018BF4                            
00018BF4                            loc_1864A:
00018BF4 2268 0034                  		movea.l	$34(a0),a1
00018BF8 3169 0008 0008             		move.w	8(a1),8(a0)
00018BFE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C04 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C0A 7003                       		moveq	#3,d0
00018C0C C028 0022                  		and.b	$22(a0),d0
00018C10 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C16 8128 0001                  		or.b	d0,1(a0)
00018C1A 4EF9 0000 DB6C             		jmp	DisplaySprite
00018C20                            ; ===========================================================================
00018C20                            
00018C20                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C20 2268 0034                  		movea.l	$34(a0),a1
00018C24 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C2A 6600                       		bne.s	loc_18688
00018C2C 4A28 0001                  		tst.b	1(a0)
00018C30 6A00                       		bpl.s	Obj73_TubeDel
00018C32                            
00018C32                            loc_18688:
00018C32 217C 0001 8384 0004        		move.l	#Map_BossItems,4(a0)
00018C3A 317C 246C 0002             		move.w	#$246C,2(a0)
00018C40 117C 0004 001A             		move.b	#4,$1A(a0)
00018C46 60AC                       		bra.s	loc_1864A
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            Obj73_TubeDel:
00018C48 4EF9 0000 DBA8             		jmp	DeleteObject
00018C4E                            ; ===========================================================================
00018C4E                            ; ---------------------------------------------------------------------------
00018C4E                            ; Object 74 - lava that	Eggman drops (MZ)
00018C4E                            ; ---------------------------------------------------------------------------
00018C4E                            
00018C4E                            Obj74:					; XREF: Obj_Index
00018C4E 7000                       		moveq	#0,d0
00018C50 1028 0024                  		move.b	$24(a0),d0
00018C54 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018C58 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018C5C 4EF9 0000 DB6C             		jmp	DisplaySprite
00018C62                            ; ===========================================================================
00018C62 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018C64 0000                       		dc.w Obj74_Action-Obj74_Index
00018C66 0000                       		dc.w loc_18886-Obj74_Index
00018C68 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018C6A                            ; ===========================================================================
00018C6A                            
00018C6A                            Obj74_Main:				; XREF: Obj74_Index
00018C6A 117C 0008 0016             		move.b	#8,$16(a0)
00018C70 117C 0008 0017             		move.b	#8,$17(a0)
00018C76 217C 0000 B830 0004        		move.l	#Map_obj14,4(a0)
00018C7E 317C 0345 0002             		move.w	#$345,2(a0)
00018C84 117C 0004 0001             		move.b	#4,1(a0)
00018C8A 117C 0005 0018             		move.b	#5,$18(a0)
00018C90 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018C96 117C 0008 0019             		move.b	#8,$19(a0)
00018C9C 5428 0024                  		addq.b	#2,$24(a0)
00018CA0 4A28 0028                  		tst.b	$28(a0)
00018CA4 6600                       		bne.s	loc_1870A
00018CA6 117C 008B 0020             		move.b	#$8B,$20(a0)
00018CAC 5428 0024                  		addq.b	#2,$24(a0)
00018CB0 6000 0000                  		bra.w	loc_18886
00018CB4                            ; ===========================================================================
00018CB4                            
00018CB4                            loc_1870A:
00018CB4 117C 001E 0029             		move.b	#$1E,$29(a0)
00018CBA 303C 00AE                  		move.w	#$AE,d0
00018CBE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018CC4                            
00018CC4                            Obj74_Action:				; XREF: Obj74_Index
00018CC4 7000                       		moveq	#0,d0
00018CC6 1028 0025                  		move.b	$25(a0),d0
00018CCA 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018CCE 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018CD2 4EB9 0000 DB46             		jsr	SpeedToPos
00018CD8 43F9 0000 EA26             		lea	(Ani_obj14).l,a1
00018CDE 4EB9 0000 AC42             		jsr	AnimateSprite
00018CE4 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018CEA 6200                       		bhi.s	Obj74_Delete
00018CEC 4E75                       		rts	
00018CEE                            ; ===========================================================================
00018CEE                            
00018CEE                            Obj74_Delete:
00018CEE 4EF9 0000 DBA8             		jmp	DeleteObject
00018CF4                            ; ===========================================================================
00018CF4 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018CF6 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018CF8 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018CFA 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018CFC                            ; ===========================================================================
00018CFC                            
00018CFC                            Obj74_Drop:				; XREF: Obj74_Index2
00018CFC 08E8 0001 0022             		bset	#1,$22(a0)
00018D02 5328 0029                  		subq.b	#1,$29(a0)
00018D06 6A00                       		bpl.s	locret_18780
00018D08 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D0E 4228 0028                  		clr.b	$28(a0)
00018D12 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D18 08A8 0001 0022             		bclr	#1,$22(a0)
00018D1E 6100 C6A8                  		bsr.w	ObjHitFloor
00018D22 4A41                       		tst.w	d1
00018D24 6A00                       		bpl.s	locret_18780
00018D26 5428 0025                  		addq.b	#2,$25(a0)
00018D2A                            
00018D2A                            locret_18780:
00018D2A 4E75                       		rts	
00018D2C                            ; ===========================================================================
00018D2C                            
00018D2C                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D2C 5568 000C                  		subq.w	#2,$C(a0)
00018D30 08E8 0007 0002             		bset	#7,2(a0)
00018D36 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018D3C 4268 0012                  		clr.w	$12(a0)
00018D40 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D46 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D4C 117C 0003 0029             		move.b	#3,$29(a0)
00018D52 4EB9 0000 E008             		jsr	SingleObjLoad2
00018D58 6600                       		bne.s	loc_187CA
00018D5A 47D1                       		lea	(a1),a3
00018D5C 45D0                       		lea	(a0),a2
00018D5E 7003                       		moveq	#3,d0
00018D60                            
00018D60                            Obj74_Loop:
00018D60 26DA                       		move.l	(a2)+,(a3)+
00018D62 26DA                       		move.l	(a2)+,(a3)+
00018D64 26DA                       		move.l	(a2)+,(a3)+
00018D66 26DA                       		move.l	(a2)+,(a3)+
00018D68 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018D6C                            
00018D6C 4469 0010                  		neg.w	$10(a1)
00018D70 5429 0025                  		addq.b	#2,$25(a1)
00018D74                            
00018D74                            loc_187CA:
00018D74 5428 0025                  		addq.b	#2,$25(a0)
00018D78 4E75                       		rts	
00018D7A                            
00018D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018D7A                            
00018D7A                            
00018D7A                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018D7A 4EB9 0000 E008             		jsr	SingleObjLoad2
00018D80 6600                       		bne.s	locret_187EE
00018D82 3368 0008 0008             		move.w	8(a0),8(a1)
00018D88 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018D8E 12BC 0074                  		move.b	#$74,(a1)
00018D92 337C 0067 0028             		move.w	#$67,$28(a1)
00018D98                            
00018D98                            locret_187EE:
00018D98 4E75                       		rts	
00018D9A                            ; End of function Obj74_Duplicate2
00018D9A                            
00018D9A                            ; ===========================================================================
00018D9A                            
00018D9A                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018D9A 6100 C62C                  		bsr.w	ObjHitFloor
00018D9E 4A41                       		tst.w	d1
00018DA0 6A00                       		bpl.s	loc_18826
00018DA2 3028 0008                  		move.w	8(a0),d0
00018DA6 0C40 1940                  		cmpi.w	#$1940,d0
00018DAA 6E00                       		bgt.s	loc_1882C
00018DAC 3228 0030                  		move.w	$30(a0),d1
00018DB0 B240                       		cmp.w	d0,d1
00018DB2 6700                       		beq.s	loc_1881E
00018DB4 0240 0010                  		andi.w	#$10,d0
00018DB8 0241 0010                  		andi.w	#$10,d1
00018DBC B240                       		cmp.w	d0,d1
00018DBE 6700                       		beq.s	loc_1881E
00018DC0 61B8                       		bsr.s	Obj74_Duplicate2
00018DC2 3168 0008 0032             		move.w	8(a0),$32(a0)
00018DC8                            
00018DC8                            loc_1881E:
00018DC8 3168 0008 0030             		move.w	8(a0),$30(a0)
00018DCE 4E75                       		rts	
00018DD0                            ; ===========================================================================
00018DD0                            
00018DD0                            loc_18826:
00018DD0 5428 0025                  		addq.b	#2,$25(a0)
00018DD4 4E75                       		rts	
00018DD6                            ; ===========================================================================
00018DD6                            
00018DD6                            loc_1882C:
00018DD6 5428 0024                  		addq.b	#2,$24(a0)
00018DDA 4E75                       		rts	
00018DDC                            ; ===========================================================================
00018DDC                            
00018DDC                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018DDC 08A8 0001 0022             		bclr	#1,$22(a0)
00018DE2 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018DE8 3028 0008                  		move.w	8(a0),d0
00018DEC 9068 0032                  		sub.w	$32(a0),d0
00018DF0 6A00                       		bpl.s	loc_1884A
00018DF2 4440                       		neg.w	d0
00018DF4                            
00018DF4                            loc_1884A:
00018DF4 0C40 0012                  		cmpi.w	#$12,d0
00018DF8 6600                       		bne.s	loc_18856
00018DFA 08A8 0007 0002             		bclr	#7,2(a0)
00018E00                            
00018E00                            loc_18856:
00018E00 6100 C5C6                  		bsr.w	ObjHitFloor
00018E04 4A41                       		tst.w	d1
00018E06 6A00                       		bpl.s	locret_1887E
00018E08 5328 0029                  		subq.b	#1,$29(a0)
00018E0C 6700                       		beq.s	Obj74_Delete2
00018E0E 4268 0012                  		clr.w	$12(a0)
00018E12 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E18 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E1E 08E8 0007 0002             		bset	#7,2(a0)
00018E24 5528 0025                  		subq.b	#2,$25(a0)
00018E28                            
00018E28                            locret_1887E:
00018E28 4E75                       		rts	
00018E2A                            ; ===========================================================================
00018E2A                            
00018E2A                            Obj74_Delete2:
00018E2A 4EF9 0000 DBA8             		jmp	DeleteObject
00018E30                            ; ===========================================================================
00018E30                            
00018E30                            loc_18886:				; XREF: Obj74_Index
00018E30 08E8 0007 0002             		bset	#7,2(a0)
00018E36 5328 0029                  		subq.b	#1,$29(a0)
00018E3A 6600                       		bne.s	Obj74_Animate
00018E3C 117C 0001 001C             		move.b	#1,$1C(a0)
00018E42 5968 000C                  		subq.w	#4,$C(a0)
00018E46 4228 0020                  		clr.b	$20(a0)
00018E4A                            
00018E4A                            Obj74_Animate:
00018E4A 43F9 0000 EA26             		lea	(Ani_obj14).l,a1
00018E50 4EF9 0000 AC42             		jmp	AnimateSprite
00018E56                            ; ===========================================================================
00018E56                            
00018E56                            Obj74_Delete3:				; XREF: Obj74_Index
00018E56 4EF9 0000 DBA8             		jmp	DeleteObject
00018E5C                            ; ===========================================================================
00018E5C                            
00018E5C                            Obj7A_Delete:
00018E5C 4EF9 0000 DBA8             		jmp	DeleteObject
00018E62                            ; ===========================================================================
00018E62                            ; ---------------------------------------------------------------------------
00018E62                            ; Object 7A - Eggman (SLZ)
00018E62                            ; ---------------------------------------------------------------------------
00018E62                            
00018E62                            Obj7A:					; XREF: Obj_Index
00018E62 7000                       		moveq	#0,d0
00018E64 1028 0024                  		move.b	$24(a0),d0
00018E68 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018E6C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018E70                            ; ===========================================================================
00018E70 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018E72 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018E74 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018E76 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018E78 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018E7A                            
00018E7A 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018E7D 0401 04                    		dc.b 4,	1, 4
00018E80 0607 04                    		dc.b 6,	7, 4
00018E83 0800 03                    		dc.b 8,	0, 3
00018E86                            ; ===========================================================================
00018E86                            
00018E86                            Obj7A_Main:				; XREF: Obj7A_Index
00018E86 317C 2188 0008             		move.w	#$2188,8(a0)
00018E8C 317C 0228 000C             		move.w	#$228,$C(a0)
00018E92 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E98 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018E9E 117C 000F 0020             		move.b	#$F,$20(a0)
00018EA4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018EAA 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018EAE 2248                       		movea.l	a0,a1
00018EB0 7203                       		moveq	#3,d1
00018EB2 6000                       		bra.s	Obj7A_LoadBoss
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            Obj7A_Loop:
00018EB4 4EB9 0000 E008             		jsr	SingleObjLoad2
00018EBA 6600                       		bne.s	loc_1895C
00018EBC 12BC 007A                  		move.b	#$7A,0(a1)
00018EC0 3368 0008 0008             		move.w	8(a0),8(a1)
00018EC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018ECC                            
00018ECC                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018ECC 08A8 0000 0022             		bclr	#0,$22(a0)
00018ED2 4229 0025                  		clr.b	$25(a1)
00018ED6 135A 0024                  		move.b	(a2)+,$24(a1)
00018EDA 135A 001C                  		move.b	(a2)+,$1C(a1)
00018EDE 135A 0018                  		move.b	(a2)+,$18(a1)
00018EE2 237C 0001 82BC 0004        		move.l	#Map_Eggman,4(a1)
00018EEA 337C 0400 0002             		move.w	#$400,2(a1)
00018EF0 137C 0004 0001             		move.b	#4,1(a1)
00018EF6 137C 0020 0019             		move.b	#$20,$19(a1)
00018EFC 2348 0034                  		move.l	a0,$34(a1)
00018F00 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F04                            
00018F04                            loc_1895C:
00018F04 43F8 D040                  		lea	($FFFFD040).w,a1
00018F08 45E8 002A                  		lea	$2A(a0),a2
00018F0C 705E                       		moveq	#$5E,d0
00018F0E 723E                       		moveq	#$3E,d1
00018F10                            
00018F10                            loc_18968:
00018F10 B011                       		cmp.b	(a1),d0
00018F12 6600                       		bne.s	loc_18974
00018F14 4A29 0028                  		tst.b	$28(a1)
00018F18 6700                       		beq.s	loc_18974
00018F1A 34C9                       		move.w	a1,(a2)+
00018F1C                            
00018F1C                            loc_18974:
00018F1C D2FC 0040                  		adda.w	#$40,a1
00018F20 51C9 FFEE                  		dbf	d1,loc_18968
00018F24                            
00018F24                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F24 7000                       		moveq	#0,d0
00018F26 1028 0025                  		move.b	$25(a0),d0
00018F2A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F2E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F32 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
00018F38 4EB9 0000 AC42             		jsr	AnimateSprite
00018F3E 7003                       		moveq	#3,d0
00018F40 C028 0022                  		and.b	$22(a0),d0
00018F44 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018F4A 8128 0001                  		or.b	d0,1(a0)
00018F4E 4EF9 0000 DB6C             		jmp	DisplaySprite
00018F54                            ; ===========================================================================
00018F54 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018F56 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018F58 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018F5A 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018F5C 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018F5E 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018F60                            ; ===========================================================================
00018F60                            
00018F60                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018F60 317C FF00 0010             		move.w	#-$100,$10(a0)
00018F66 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018F6C 6400                       		bcc.s	loc_189CA
00018F6E 5428 0025                  		addq.b	#2,$25(a0)
00018F72                            
00018F72                            loc_189CA:
00018F72 6100 EEE8                  		bsr.w	BossMove
00018F76 1028 003F                  		move.b	$3F(a0),d0
00018F7A 5428 003F                  		addq.b	#2,$3F(a0)
00018F7E 4EB9 0000 2C22             		jsr	(CalcSine).l
00018F84 EC40                       		asr.w	#6,d0
00018F86 D068 0038                  		add.w	$38(a0),d0
00018F8A 3140 000C                  		move.w	d0,$C(a0)
00018F8E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018F94 6000                       		bra.s	loc_189FE
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            loc_189EE:
00018F96 6100 EEC4                  		bsr.w	BossMove
00018F9A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018FA0 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FA6                            
00018FA6                            loc_189FE:
00018FA6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018FAC 6400                       		bcc.s	locret_18A44
00018FAE 4A28 0022                  		tst.b	$22(a0)
00018FB2 6B00                       		bmi.s	loc_18A46
00018FB4 4A28 0020                  		tst.b	$20(a0)
00018FB8 6600                       		bne.s	locret_18A44
00018FBA 4A28 003E                  		tst.b	$3E(a0)
00018FBE 6600                       		bne.s	loc_18A28
00018FC0 117C 0020 003E             		move.b	#$20,$3E(a0)
00018FC6 303C 00AC                  		move.w	#$AC,d0
00018FCA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018FD0                            
00018FD0                            loc_18A28:
00018FD0 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018FD4 7000                       		moveq	#0,d0
00018FD6 4A51                       		tst.w	(a1)
00018FD8 6600                       		bne.s	loc_18A36
00018FDA 303C 0EEE                  		move.w	#$EEE,d0
00018FDE                            
00018FDE                            loc_18A36:
00018FDE 3280                       		move.w	d0,(a1)
00018FE0 5328 003E                  		subq.b	#1,$3E(a0)
00018FE4 6600                       		bne.s	locret_18A44
00018FE6 117C 000F 0020             		move.b	#$F,$20(a0)
00018FEC                            
00018FEC                            locret_18A44:
00018FEC 4E75                       		rts	
00018FEE                            ; ===========================================================================
00018FEE                            
00018FEE                            loc_18A46:
00018FEE 7064                       		moveq	#100,d0
00018FF0 6100 0000                  		bsr.w	AddPoints
00018FF4 117C 0006 0025             		move.b	#6,$25(a0)
00018FFA 117C 0078 003C             		move.b	#$78,$3C(a0)
00019000 4268 0010                  		clr.w	$10(a0)
00019004 4E75                       		rts	
00019006                            ; ===========================================================================
00019006                            
00019006                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019006 3028 0030                  		move.w	$30(a0),d0
0001900A 317C 0200 0010             		move.w	#$200,$10(a0)
00019010 0828 0000 0022             		btst	#0,$22(a0)
00019016 6600                       		bne.s	loc_18A7C
00019018 4468 0010                  		neg.w	$10(a0)
0001901C 0C40 2008                  		cmpi.w	#$2008,d0
00019020 6E00                       		bgt.s	loc_18A88
00019022 6000                       		bra.s	loc_18A82
00019024                            ; ===========================================================================
00019024                            
00019024                            loc_18A7C:
00019024 0C40 2138                  		cmpi.w	#$2138,d0
00019028 6D00                       		blt.s	loc_18A88
0001902A                            
0001902A                            loc_18A82:
0001902A 0868 0000 0022             		bchg	#0,$22(a0)
00019030                            
00019030                            loc_18A88:
00019030 3028 0008                  		move.w	8(a0),d0
00019034 72FF                       		moveq	#-1,d1
00019036 7402                       		moveq	#2,d2
00019038 45E8 002A                  		lea	$2A(a0),a2
0001903C 7828                       		moveq	#$28,d4
0001903E 4A68 0010                  		tst.w	$10(a0)
00019042 6A00                       		bpl.s	loc_18A9E
00019044 4444                       		neg.w	d4
00019046                            
00019046                            loc_18A9E:
00019046 321A                       		move.w	(a2)+,d1
00019048 2641                       		movea.l	d1,a3
0001904A 082B 0003 0022             		btst	#3,$22(a3)
00019050 6600                       		bne.s	loc_18AB4
00019052 362B 0008                  		move.w	8(a3),d3
00019056 D644                       		add.w	d4,d3
00019058 9640                       		sub.w	d0,d3
0001905A 6700                       		beq.s	loc_18AC0
0001905C                            
0001905C                            loc_18AB4:
0001905C 51CA FFE8                  		dbf	d2,loc_18A9E
00019060                            
00019060 1142 0028                  		move.b	d2,$28(a0)
00019064 6000 FF0C                  		bra.w	loc_189CA
00019068                            ; ===========================================================================
00019068                            
00019068                            loc_18AC0:
00019068 1142 0028                  		move.b	d2,$28(a0)
0001906C 5428 0025                  		addq.b	#2,$25(a0)
00019070 117C 0028 003C             		move.b	#$28,$3C(a0)
00019076 6000 FEFA                  		bra.w	loc_189CA
0001907A                            ; ===========================================================================
0001907A                            
0001907A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001907A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019080 6600                       		bne.s	loc_18B36
00019082 70FF                       		moveq	#-1,d0
00019084 1028 0028                  		move.b	$28(a0),d0
00019088 4880                       		ext.w	d0
0001908A 6B00                       		bmi.s	loc_18B40
0001908C 5540                       		subq.w	#2,d0
0001908E 4440                       		neg.w	d0
00019090 D040                       		add.w	d0,d0
00019092 43E8 002A                  		lea	$2A(a0),a1
00019096 3031 0000                  		move.w	(a1,d0.w),d0
0001909A 2440                       		movea.l	d0,a2
0001909C 43F8 D040                  		lea	($FFFFD040).w,a1
000190A0 723E                       		moveq	#$3E,d1
000190A2                            
000190A2                            loc_18AFA:
000190A2 B0A9 003C                  		cmp.l	$3C(a1),d0
000190A6 6700                       		beq.s	loc_18B40
000190A8 D2FC 0040                  		adda.w	#$40,a1
000190AC 51C9 FFF4                  		dbf	d1,loc_18AFA
000190B0                            
000190B0 2F08                       		move.l	a0,-(sp)
000190B2 41D2                       		lea	(a2),a0
000190B4 4EB9 0000 E008             		jsr	SingleObjLoad2
000190BA 205F                       		movea.l	(sp)+,a0
000190BC 6600                       		bne.s	loc_18B40
000190BE 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000190C2 3368 0008 0008             		move.w	8(a0),8(a1)
000190C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190CE 0669 0020 000C             		addi.w	#$20,$C(a1)
000190D4 136A 0022 0022             		move.b	$22(a2),$22(a1)
000190DA 234A 003C                  		move.l	a2,$3C(a1)
000190DE                            
000190DE                            loc_18B36:
000190DE 5328 003C                  		subq.b	#1,$3C(a0)
000190E2 6700                       		beq.s	loc_18B40
000190E4 6000 FEC0                  		bra.w	loc_189FE
000190E8                            ; ===========================================================================
000190E8                            
000190E8                            loc_18B40:
000190E8 5528 0025                  		subq.b	#2,$25(a0)
000190EC 6000 FE84                  		bra.w	loc_189CA
000190F0                            ; ===========================================================================
000190F0                            
000190F0                            loc_18B48:				; XREF: Obj7A_ShipIndex
000190F0 5328 003C                  		subq.b	#1,$3C(a0)
000190F4 6B00                       		bmi.s	loc_18B52
000190F6 6000 ED22                  		bra.w	BossDefeated
000190FA                            ; ===========================================================================
000190FA                            
000190FA                            loc_18B52:
000190FA 5428 0025                  		addq.b	#2,$25(a0)
000190FE 4268 0012                  		clr.w	$12(a0)
00019102 08E8 0000 0022             		bset	#0,$22(a0)
00019108 08A8 0007 0022             		bclr	#7,$22(a0)
0001910E 4268 0010                  		clr.w	$10(a0)
00019112 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019118 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001911C 6600                       		bne.s	loc_18B7C
0001911E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019124                            
00019124                            loc_18B7C:
00019124 6000 FE80                  		bra.w	loc_189FE
00019128                            ; ===========================================================================
00019128                            
00019128                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019128 5228 003C                  		addq.b	#1,$3C(a0)
0001912C 6700                       		beq.s	loc_18B90
0001912E 6A00                       		bpl.s	loc_18B96
00019130 0668 0018 0012             		addi.w	#$18,$12(a0)
00019136 6000                       		bra.s	loc_18BC2
00019138                            ; ===========================================================================
00019138                            
00019138                            loc_18B90:
00019138 4268 0012                  		clr.w	$12(a0)
0001913C 6000                       		bra.s	loc_18BC2
0001913E                            ; ===========================================================================
0001913E                            
0001913E                            loc_18B96:
0001913E 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019144 6500                       		bcs.s	loc_18BAE
00019146 6700                       		beq.s	loc_18BB4
00019148 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001914E 6500                       		bcs.s	loc_18BC2
00019150 5428 0025                  		addq.b	#2,$25(a0)
00019154 6000                       		bra.s	loc_18BC2
00019156                            ; ===========================================================================
00019156                            
00019156                            loc_18BAE:
00019156 5168 0012                  		subq.w	#8,$12(a0)
0001915A 6000                       		bra.s	loc_18BC2
0001915C                            ; ===========================================================================
0001915C                            
0001915C                            loc_18BB4:
0001915C 4268 0012                  		clr.w	$12(a0)
00019160 303C 0084                  		move.w	#$84,d0
00019164 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
0001916A                            
0001916A                            loc_18BC2:
0001916A 6000 FE2A                  		bra.w	loc_189EE
0001916E                            ; ===========================================================================
0001916E                            
0001916E                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001916E 317C 0400 0010             		move.w	#$400,$10(a0)
00019174 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001917A 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019180 6400                       		bcc.s	loc_18BE0
00019182 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019186 6000                       		bra.s	loc_18BE8
00019188                            ; ===========================================================================
00019188                            
00019188                            loc_18BE0:
00019188 4A28 0001                  		tst.b	1(a0)
0001918C 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019190                            
00019190                            loc_18BE8:
00019190 6100 ECCA                  		bsr.w	BossMove
00019194 6000 FDDC                  		bra.w	loc_189CA
00019198                            ; ===========================================================================
00019198                            
00019198                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019198 7000                       		moveq	#0,d0
0001919A 7201                       		moveq	#1,d1
0001919C 2268 0034                  		movea.l	$34(a0),a1
000191A0 1029 0025                  		move.b	$25(a1),d0
000191A4 0C00 0006                  		cmpi.b	#6,d0
000191A8 6B00                       		bmi.s	loc_18C06
000191AA 720A                       		moveq	#$A,d1
000191AC 6000                       		bra.s	loc_18C1A
000191AE                            ; ===========================================================================
000191AE                            
000191AE                            loc_18C06:
000191AE 4A29 0020                  		tst.b	$20(a1)
000191B2 6600                       		bne.s	loc_18C10
000191B4 7205                       		moveq	#5,d1
000191B6 6000                       		bra.s	loc_18C1A
000191B8                            ; ===========================================================================
000191B8                            
000191B8                            loc_18C10:
000191B8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000191BE 6500                       		bcs.s	loc_18C1A
000191C0 7204                       		moveq	#4,d1
000191C2                            
000191C2                            loc_18C1A:
000191C2 1141 001C                  		move.b	d1,$1C(a0)
000191C6 0C00 000A                  		cmpi.b	#$A,d0
000191CA 6600                       		bne.s	loc_18C32
000191CC 117C 0006 001C             		move.b	#6,$1C(a0)
000191D2 4A28 0001                  		tst.b	1(a0)
000191D6 6A00 FC84                  		bpl.w	Obj7A_Delete
000191DA                            
000191DA                            loc_18C32:
000191DA 6000                       		bra.s	loc_18C6C
000191DC                            ; ===========================================================================
000191DC                            
000191DC                            Obj7A_FlameMain:			; XREF: Obj7A_Index
000191DC 117C 0008 001C             		move.b	#8,$1C(a0)
000191E2 2268 0034                  		movea.l	$34(a0),a1
000191E6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000191EC 6600                       		bne.s	loc_18C56
000191EE 4A28 0001                  		tst.b	1(a0)
000191F2 6A00 FC68                  		bpl.w	Obj7A_Delete
000191F6 117C 000B 001C             		move.b	#$B,$1C(a0)
000191FC 6000                       		bra.s	loc_18C6C
000191FE                            ; ===========================================================================
000191FE                            
000191FE                            loc_18C56:
000191FE 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019204 6E00                       		bgt.s	loc_18C6C
00019206 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001920C 6D00                       		blt.s	loc_18C6C
0001920E 117C 0007 001C             		move.b	#7,$1C(a0)
00019214                            
00019214                            loc_18C6C:
00019214 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
0001921A 4EB9 0000 AC42             		jsr	AnimateSprite
00019220                            
00019220                            loc_18C78:
00019220 2268 0034                  		movea.l	$34(a0),a1
00019224 3169 0008 0008             		move.w	8(a1),8(a0)
0001922A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019230 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019236 7003                       		moveq	#3,d0
00019238 C028 0022                  		and.b	$22(a0),d0
0001923C 0228 00FC 0001             		andi.b	#-4,1(a0)
00019242 8128 0001                  		or.b	d0,1(a0)
00019246 4EF9 0000 DB6C             		jmp	DisplaySprite
0001924C                            ; ===========================================================================
0001924C                            
0001924C                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001924C 2268 0034                  		movea.l	$34(a0),a1
00019250 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019256 6600                       		bne.s	loc_18CB8
00019258 4A28 0001                  		tst.b	1(a0)
0001925C 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019260                            
00019260                            loc_18CB8:
00019260 217C 0001 8384 0004        		move.l	#Map_BossItems,4(a0)
00019268 317C 246C 0002             		move.w	#$246C,2(a0)
0001926E 117C 0003 001A             		move.b	#3,$1A(a0)
00019274 60AA                       		bra.s	loc_18C78
00019276                            ; ===========================================================================
00019276                            ; ---------------------------------------------------------------------------
00019276                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019276                            ; ---------------------------------------------------------------------------
00019276                            
00019276                            Obj7B:					; XREF: Obj_Index
00019276 7000                       		moveq	#0,d0
00019278 1028 0024                  		move.b	$24(a0),d0
0001927C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019280 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019284 3028 0030                  		move.w	$30(a0),d0
00019288 0240 FF80                  		andi.w	#$FF80,d0
0001928C 3238 F700                  		move.w	($FFFFF700).w,d1
00019290 0441 0080                  		subi.w	#$80,d1
00019294 0241 FF80                  		andi.w	#$FF80,d1
00019298 9041                       		sub.w	d1,d0
0001929A 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001929E 0C40 0280                  		cmpi.w	#$280,d0
000192A2 6200 FBB8                  		bhi.w	Obj7A_Delete
000192A6 4EF9 0000 DB6C             		jmp	DisplaySprite
000192AC                            ; ===========================================================================
000192AC 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000192AE 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000192B0 0000                       		dc.w loc_18DC6-Obj7B_Index
000192B2 0000                       		dc.w loc_18EAA-Obj7B_Index
000192B4 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000192B6 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000192B8                            ; ===========================================================================
000192B8                            
000192B8                            Obj7B_Main:				; XREF: Obj7B_Index
000192B8 217C 0001 1F32 0004        		move.l	#Map_obj5Ea,4(a0)
000192C0 317C 0518 0002             		move.w	#$518,2(a0)
000192C6 117C 0001 001A             		move.b	#1,$1A(a0)
000192CC 0028 0004 0001             		ori.b	#4,1(a0)
000192D2 117C 0004 0018             		move.b	#4,$18(a0)
000192D8 117C 008B 0020             		move.b	#$8B,$20(a0)
000192DE 117C 000C 0019             		move.b	#$C,$19(a0)
000192E4 2268 003C                  		movea.l	$3C(a0),a1
000192E8 3169 0008 0030             		move.w	8(a1),$30(a0)
000192EE 3169 000C 0034             		move.w	$C(a1),$34(a0)
000192F4 08E8 0000 0022             		bset	#0,$22(a0)
000192FA 3028 0008                  		move.w	8(a0),d0
000192FE B069 0008                  		cmp.w	8(a1),d0
00019302 6E00                       		bgt.s	loc_18D68
00019304 08A8 0000 0022             		bclr	#0,$22(a0)
0001930A 117C 0002 003A             		move.b	#2,$3A(a0)
00019310                            
00019310                            loc_18D68:
00019310 5428 0024                  		addq.b	#2,$24(a0)
00019314                            
00019314                            Obj7B_Fall:				; XREF: Obj7B_Index
00019314 4EB9 0000 DB1A             		jsr	ObjectFall
0001931A 2268 003C                  		movea.l	$3C(a0),a1
0001931E 45F9 0000 0000             		lea	(word_19018).l,a2
00019324 7000                       		moveq	#0,d0
00019326 1029 001A                  		move.b	$1A(a1),d0
0001932A 3228 0008                  		move.w	8(a0),d1
0001932E 9268 0030                  		sub.w	$30(a0),d1
00019332 6400                       		bcc.s	loc_18D8E
00019334 5440                       		addq.w	#2,d0
00019336                            
00019336                            loc_18D8E:
00019336 D040                       		add.w	d0,d0
00019338 3228 0034                  		move.w	$34(a0),d1
0001933C D272 0000                  		add.w	(a2,d0.w),d1
00019340 B268 000C                  		cmp.w	$C(a0),d1
00019344 6E00                       		bgt.s	locret_18DC4
00019346 2268 003C                  		movea.l	$3C(a0),a1
0001934A 7202                       		moveq	#2,d1
0001934C 0828 0000 0022             		btst	#0,$22(a0)
00019352 6700                       		beq.s	loc_18DAE
00019354 7200                       		moveq	#0,d1
00019356                            
00019356                            loc_18DAE:
00019356 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001935C 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019362 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019368 6000 0000                  		bra.w	loc_18FA2
0001936C                            ; ===========================================================================
0001936C                            
0001936C                            locret_18DC4:
0001936C 4E75                       		rts	
0001936E                            ; ===========================================================================
0001936E                            
0001936E                            loc_18DC6:				; XREF: Obj7B_Index
0001936E 2268 003C                  		movea.l	$3C(a0),a1
00019372 7000                       		moveq	#0,d0
00019374 1028 003A                  		move.b	$3A(a0),d0
00019378 9029 003A                  		sub.b	$3A(a1),d0
0001937C 6700                       		beq.s	loc_18E2A
0001937E 6400                       		bcc.s	loc_18DDA
00019380 4400                       		neg.b	d0
00019382                            
00019382                            loc_18DDA:
00019382 323C F7E8                  		move.w	#-$818,d1
00019386 343C FEEC                  		move.w	#-$114,d2
0001938A 0C00 0001                  		cmpi.b	#1,d0
0001938E 6700                       		beq.s	loc_18E00
00019390 323C F6A0                  		move.w	#-$960,d1
00019394 343C FF0C                  		move.w	#-$F4,d2
00019398 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001939E 6D00                       		blt.s	loc_18E00
000193A0 323C F5E0                  		move.w	#-$A20,d1
000193A4 343C FF80                  		move.w	#-$80,d2
000193A8                            
000193A8                            loc_18E00:
000193A8 3141 0012                  		move.w	d1,$12(a0)
000193AC 3142 0010                  		move.w	d2,$10(a0)
000193B0 3028 0008                  		move.w	8(a0),d0
000193B4 9068 0030                  		sub.w	$30(a0),d0
000193B8 6400                       		bcc.s	loc_18E16
000193BA 4468 0010                  		neg.w	$10(a0)
000193BE                            
000193BE                            loc_18E16:
000193BE 117C 0001 001A             		move.b	#1,$1A(a0)
000193C4 317C 0020 0028             		move.w	#$20,$28(a0)
000193CA 5428 0024                  		addq.b	#2,$24(a0)
000193CE 6000 0000                  		bra.w	loc_18EAA
000193D2                            ; ===========================================================================
000193D2                            
000193D2                            loc_18E2A:				; XREF: loc_18DC6
000193D2 45F9 0000 0000             		lea	(word_19018).l,a2
000193D8 7000                       		moveq	#0,d0
000193DA 1029 001A                  		move.b	$1A(a1),d0
000193DE 343C 0028                  		move.w	#$28,d2
000193E2 3228 0008                  		move.w	8(a0),d1
000193E6 9268 0030                  		sub.w	$30(a0),d1
000193EA 6400                       		bcc.s	loc_18E48
000193EC 4442                       		neg.w	d2
000193EE 5440                       		addq.w	#2,d0
000193F0                            
000193F0                            loc_18E48:
000193F0 D040                       		add.w	d0,d0
000193F2 3228 0034                  		move.w	$34(a0),d1
000193F6 D272 0000                  		add.w	(a2,d0.w),d1
000193FA 3141 000C                  		move.w	d1,$C(a0)
000193FE D468 0030                  		add.w	$30(a0),d2
00019402 3142 0008                  		move.w	d2,8(a0)
00019406 4268 000E                  		clr.w	$E(a0)
0001940A 4268 000A                  		clr.w	$A(a0)
0001940E 5368 0028                  		subq.w	#1,$28(a0)
00019412 6600                       		bne.s	loc_18E7A
00019414 317C 0020 0028             		move.w	#$20,$28(a0)
0001941A 117C 0008 0024             		move.b	#8,$24(a0)
00019420 4E75                       		rts	
00019422                            ; ===========================================================================
00019422                            
00019422                            loc_18E7A:
00019422 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019428 6600                       		bne.s	loc_18E88
0001942A 117C 0005 001F             		move.b	#5,$1F(a0)
00019430                            
00019430                            loc_18E88:
00019430 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019436 6600                       		bne.s	loc_18E96
00019438 117C 0002 001F             		move.b	#2,$1F(a0)
0001943E                            
0001943E                            loc_18E96:
0001943E 5328 001E                  		subq.b	#1,$1E(a0)
00019442 6E00                       		bgt.s	locret_18EA8
00019444 0868 0000 001A             		bchg	#0,$1A(a0)
0001944A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019450                            
00019450                            locret_18EA8:
00019450 4E75                       		rts	
00019452                            ; ===========================================================================
00019452                            
00019452                            loc_18EAA:				; XREF: Obj7B_Index
00019452 43F8 D040                  		lea	($FFFFD040).w,a1
00019456 707A                       		moveq	#$7A,d0
00019458 7240                       		moveq	#$40,d1
0001945A 743E                       		moveq	#$3E,d2
0001945C                            
0001945C                            loc_18EB4:
0001945C B011                       		cmp.b	(a1),d0
0001945E 6700                       		beq.s	loc_18EC0
00019460 D2C1                       		adda.w	d1,a1
00019462 51CA FFF8                  		dbf	d2,loc_18EB4
00019466                            
00019466 6000                       		bra.s	loc_18F38
00019468                            ; ===========================================================================
00019468                            
00019468                            loc_18EC0:
00019468 3029 0008                  		move.w	8(a1),d0
0001946C 3229 000C                  		move.w	$C(a1),d1
00019470 3428 0008                  		move.w	8(a0),d2
00019474 3628 000C                  		move.w	$C(a0),d3
00019478 45FA 0000                  		lea	byte_19022(pc),a2
0001947C 47FA 0000                  		lea	byte_19026(pc),a3
00019480 181A                       		move.b	(a2)+,d4
00019482 4884                       		ext.w	d4
00019484 D044                       		add.w	d4,d0
00019486 181B                       		move.b	(a3)+,d4
00019488 4884                       		ext.w	d4
0001948A D444                       		add.w	d4,d2
0001948C B440                       		cmp.w	d0,d2
0001948E 6500                       		bcs.s	loc_18F38
00019490 181A                       		move.b	(a2)+,d4
00019492 4884                       		ext.w	d4
00019494 D044                       		add.w	d4,d0
00019496 181B                       		move.b	(a3)+,d4
00019498 4884                       		ext.w	d4
0001949A D444                       		add.w	d4,d2
0001949C B042                       		cmp.w	d2,d0
0001949E 6500                       		bcs.s	loc_18F38
000194A0 181A                       		move.b	(a2)+,d4
000194A2 4884                       		ext.w	d4
000194A4 D244                       		add.w	d4,d1
000194A6 181B                       		move.b	(a3)+,d4
000194A8 4884                       		ext.w	d4
000194AA D644                       		add.w	d4,d3
000194AC B641                       		cmp.w	d1,d3
000194AE 6500                       		bcs.s	loc_18F38
000194B0 181A                       		move.b	(a2)+,d4
000194B2 4884                       		ext.w	d4
000194B4 D244                       		add.w	d4,d1
000194B6 181B                       		move.b	(a3)+,d4
000194B8 4884                       		ext.w	d4
000194BA D644                       		add.w	d4,d3
000194BC B243                       		cmp.w	d3,d1
000194BE 6500                       		bcs.s	loc_18F38
000194C0 5428 0024                  		addq.b	#2,$24(a0)
000194C4 4268 0028                  		clr.w	$28(a0)
000194C8 4229 0020                  		clr.b	$20(a1)
000194CC 5329 0021                  		subq.b	#1,$21(a1)
000194D0 6600                       		bne.s	loc_18F38
000194D2 08E9 0007 0022             		bset	#7,$22(a1)
000194D8 4268 0010                  		clr.w	$10(a0)
000194DC 4268 0012                  		clr.w	$12(a0)
000194E0                            
000194E0                            loc_18F38:
000194E0 4A68 0012                  		tst.w	$12(a0)
000194E4 6A00                       		bpl.s	loc_18F5C
000194E6 4EB9 0000 DB1A             		jsr	ObjectFall
000194EC 3028 0034                  		move.w	$34(a0),d0
000194F0 0440 002F                  		subi.w	#$2F,d0
000194F4 B068 000C                  		cmp.w	$C(a0),d0
000194F8 6E00                       		bgt.s	loc_18F58
000194FA 4EB9 0000 DB1A             		jsr	ObjectFall
00019500                            
00019500                            loc_18F58:
00019500 6000 FF20                  		bra.w	loc_18E7A
00019504                            ; ===========================================================================
00019504                            
00019504                            loc_18F5C:
00019504 4EB9 0000 DB1A             		jsr	ObjectFall
0001950A 2268 003C                  		movea.l	$3C(a0),a1
0001950E 45F9 0000 0000             		lea	(word_19018).l,a2
00019514 7000                       		moveq	#0,d0
00019516 1029 001A                  		move.b	$1A(a1),d0
0001951A 3228 0008                  		move.w	8(a0),d1
0001951E 9268 0030                  		sub.w	$30(a0),d1
00019522 6400                       		bcc.s	loc_18F7E
00019524 5440                       		addq.w	#2,d0
00019526                            
00019526                            loc_18F7E:
00019526 D040                       		add.w	d0,d0
00019528 3228 0034                  		move.w	$34(a0),d1
0001952C D272 0000                  		add.w	(a2,d0.w),d1
00019530 B268 000C                  		cmp.w	$C(a0),d1
00019534 6ECA                       		bgt.s	loc_18F58
00019536 2268 003C                  		movea.l	$3C(a0),a1
0001953A 7202                       		moveq	#2,d1
0001953C 4A68 0010                  		tst.w	$10(a0)
00019540 6B00                       		bmi.s	loc_18F9C
00019542 7200                       		moveq	#0,d1
00019544                            
00019544                            loc_18F9C:
00019544 317C 0000 0028             		move.w	#0,$28(a0)
0001954A                            
0001954A                            loc_18FA2:
0001954A 1341 003A                  		move.b	d1,$3A(a1)
0001954E 1141 003A                  		move.b	d1,$3A(a0)
00019552 B229 001A                  		cmp.b	$1A(a1),d1
00019556 6700                       		beq.s	loc_19008
00019558 08A9 0003 0022             		bclr	#3,$22(a1)
0001955E 6700                       		beq.s	loc_19008
00019560 4229 0025                  		clr.b	$25(a1)
00019564 137C 0002 0024             		move.b	#2,$24(a1)
0001956A 45F8 D000                  		lea	($FFFFD000).w,a2
0001956E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019574 446A 0012                  		neg.w	$12(a2)
00019578 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001957E 6600                       		bne.s	loc_18FDC
00019580 E0EA 0012                  		asr	$12(a2)
00019584                            
00019584                            loc_18FDC:
00019584 08EA 0001 0022             		bset	#1,$22(a2)
0001958A 08AA 0003 0022             		bclr	#3,$22(a2)
00019590 422A 003C                  		clr.b	$3C(a2)
00019594 2F08                       		move.l	a0,-(sp)
00019596 41D2                       		lea	(a2),a0
00019598 4EBA A3B8                  		jsr	Obj01_ChkRoll
0001959C 205F                       		movea.l	(sp)+,a0
0001959E 157C 0002 0024             		move.b	#2,$24(a2)
000195A4 303C 00CC                  		move.w	#$CC,d0
000195A8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
000195AE                            
000195AE                            loc_19008:
000195AE 4268 0010                  		clr.w	$10(a0)
000195B2 4268 0012                  		clr.w	$12(a0)
000195B6 5428 0024                  		addq.b	#2,$24(a0)
000195BA 6000 FE66                  		bra.w	loc_18E7A
000195BE                            ; ===========================================================================
000195BE FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000195C8                            		even
000195C8 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000195CC                            		even
000195CC 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000195D0                            		even
000195D0                            ; ===========================================================================
000195D0                            
000195D0                            Obj7B_Explode:				; XREF: Obj7B_Index
000195D0 10BC 003F                  		move.b	#$3F,(a0)
000195D4 4228 0024                  		clr.b	$24(a0)
000195D8 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000195DE 6700                       		beq.s	Obj7B_MakeFrag
000195E0 4E75                       		rts	
000195E2                            ; ===========================================================================
000195E2                            
000195E2                            Obj7B_MakeFrag:
000195E2 3168 0034 000C             		move.w	$34(a0),$C(a0)
000195E8 7203                       		moveq	#3,d1
000195EA 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000195EE                            
000195EE                            Obj7B_Loop:
000195EE 4EB9 0000 DFF2             		jsr	SingleObjLoad
000195F4 6600                       		bne.s	loc_1909A
000195F6 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000195FA 137C 000A 0024             		move.b	#$A,$24(a1)
00019600 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019608 137C 0003 0018             		move.b	#3,$18(a1)
0001960E 337C 0518 0002             		move.w	#$518,2(a1)
00019614 3368 0008 0008             		move.w	8(a0),8(a1)
0001961A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019620 335A 0010                  		move.w	(a2)+,$10(a1)
00019624 335A 0012                  		move.w	(a2)+,$12(a1)
00019628 137C 0098 0020             		move.b	#$98,$20(a1)
0001962E 0029 0004 0001             		ori.b	#4,1(a1)
00019634 08E9 0007 0001             		bset	#7,1(a1)
0001963A 137C 000C 0019             		move.b	#$C,$19(a1)
00019640                            
00019640                            loc_1909A:
00019640 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019644                            
00019644 4E75                       		rts	
00019646                            ; ===========================================================================
00019646 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001964A FF60 FDC0                  		dc.w $FF60, $FDC0
0001964E 0100 FCC0                  		dc.w $100, $FCC0
00019652 00A0 FDC0                  		dc.w $A0, $FDC0
00019656                            ; ===========================================================================
00019656                            
00019656                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019656 4EB9 0000 DB46             		jsr	SpeedToPos
0001965C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019662 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019668 0668 0018 0012             		addi.w	#$18,$12(a0)
0001966E 7004                       		moveq	#4,d0
00019670 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019674 E448                       		lsr.w	#2,d0
00019676 1140 001A                  		move.b	d0,$1A(a0)
0001967A 4A28 0001                  		tst.b	1(a0)
0001967E 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019682 4E75                       		rts	
00019684                            ; ===========================================================================
00019684                            ; ---------------------------------------------------------------------------
00019684                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019684                            ; ---------------------------------------------------------------------------
00019684                            Map_obj7B:
00019684                            	include "_maps\obj7B.asm"
00019684                            ; ---------------------------------------------------------------------------
00019684                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019684                            ; ---------------------------------------------------------------------------
00019684 0000                       		dc.w byte_190E2-Map_obj7B
00019686 0000                       		dc.w byte_190E8-Map_obj7B
00019688 01                         byte_190E2:	dc.b 1
00019689 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001968E 01                         byte_190E8:	dc.b 1
0001968F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019694                            		even
00019694                            		even
00019694                            
00019694                            ; ===========================================================================
00019694                            ; ---------------------------------------------------------------------------
00019694                            ; Object 75 - Eggman (SYZ)
00019694                            ; ---------------------------------------------------------------------------
00019694                            
00019694                            Obj75:					; XREF: Obj_Index
00019694 7000                       		moveq	#0,d0
00019696 1028 0024                  		move.b	$24(a0),d0
0001969A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001969E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000196A2                            ; ===========================================================================
000196A2 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000196A4 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000196A6 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000196A8 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000196AA 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000196AC                            
000196AC 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000196AF 0401 05                    		dc.b 4,	1, 5
000196B2 0607 05                    		dc.b 6,	7, 5
000196B5 0800 05                    		dc.b 8,	0, 5
000196B8                            ; ===========================================================================
000196B8                            
000196B8                            Obj75_Main:				; XREF: Obj75_Index
000196B8 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000196BE 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000196C4 3168 0008 0030             		move.w	8(a0),$30(a0)
000196CA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000196D0 117C 000F 0020             		move.b	#$F,$20(a0)
000196D6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000196DC 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000196E0 2248                       		movea.l	a0,a1
000196E2 7203                       		moveq	#3,d1
000196E4 6000                       		bra.s	Obj75_LoadBoss
000196E6                            ; ===========================================================================
000196E6                            
000196E6                            Obj75_Loop:
000196E6 4EB9 0000 E008             		jsr	SingleObjLoad2
000196EC 6600                       		bne.s	Obj75_ShipMain
000196EE 12BC 0075                  		move.b	#$75,(a1)
000196F2 3368 0008 0008             		move.w	8(a0),8(a1)
000196F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000196FE                            
000196FE                            Obj75_LoadBoss:				; XREF: Obj75_Main
000196FE 08A8 0000 0022             		bclr	#0,$22(a0)
00019704 4229 0025                  		clr.b	$25(a1)
00019708 135A 0024                  		move.b	(a2)+,$24(a1)
0001970C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019710 135A 0018                  		move.b	(a2)+,$18(a1)
00019714 237C 0001 82BC 0004        		move.l	#Map_Eggman,4(a1)
0001971C 337C 0400 0002             		move.w	#$400,2(a1)
00019722 137C 0004 0001             		move.b	#4,1(a1)
00019728 137C 0020 0019             		move.b	#$20,$19(a1)
0001972E 2348 0034                  		move.l	a0,$34(a1)
00019732 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019736                            
00019736                            Obj75_ShipMain:				; XREF: Obj75_Index
00019736 7000                       		moveq	#0,d0
00019738 1028 0025                  		move.b	$25(a0),d0
0001973C 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019740 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019744 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
0001974A 4EB9 0000 AC42             		jsr	AnimateSprite
00019750 7003                       		moveq	#3,d0
00019752 C028 0022                  		and.b	$22(a0),d0
00019756 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001975C 8128 0001                  		or.b	d0,1(a0)
00019760 4EF9 0000 DB6C             		jmp	DisplaySprite
00019766                            ; ===========================================================================
00019766 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001976A 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001976E 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019772                            ; ===========================================================================
00019772                            
00019772                            loc_191CC:				; XREF: Obj75_ShipIndex
00019772 317C FF00 0010             		move.w	#-$100,$10(a0)
00019778 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001977E 6400                       		bcc.s	loc_191DE
00019780 5428 0025                  		addq.b	#2,$25(a0)
00019784                            
00019784                            loc_191DE:
00019784 1028 003F                  		move.b	$3F(a0),d0
00019788 5428 003F                  		addq.b	#2,$3F(a0)
0001978C 4EB9 0000 2C22             		jsr	(CalcSine).l
00019792 E440                       		asr.w	#2,d0
00019794 3140 0012                  		move.w	d0,$12(a0)
00019798                            
00019798                            loc_191F2:
00019798 6100 E6C2                  		bsr.w	BossMove
0001979C 3168 0038 000C             		move.w	$38(a0),$C(a0)
000197A2 3168 0030 0008             		move.w	$30(a0),8(a0)
000197A8                            
000197A8                            loc_19202:
000197A8 3028 0008                  		move.w	8(a0),d0
000197AC 0440 2C00                  		subi.w	#$2C00,d0
000197B0 EA48                       		lsr.w	#5,d0
000197B2 1140 0034                  		move.b	d0,$34(a0)
000197B6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000197BC 6400                       		bcc.s	locret_19256
000197BE 4A28 0022                  		tst.b	$22(a0)
000197C2 6B00                       		bmi.s	loc_19258
000197C4 4A28 0020                  		tst.b	$20(a0)
000197C8 6600                       		bne.s	locret_19256
000197CA 4A28 003E                  		tst.b	$3E(a0)
000197CE 6600                       		bne.s	loc_1923A
000197D0 117C 0020 003E             		move.b	#$20,$3E(a0)
000197D6 303C 00AC                  		move.w	#$AC,d0
000197DA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
000197E0                            
000197E0                            loc_1923A:
000197E0 43F8 FB22                  		lea	($FFFFFB22).w,a1
000197E4 7000                       		moveq	#0,d0
000197E6 4A51                       		tst.w	(a1)
000197E8 6600                       		bne.s	loc_19248
000197EA 303C 0EEE                  		move.w	#$EEE,d0
000197EE                            
000197EE                            loc_19248:
000197EE 3280                       		move.w	d0,(a1)
000197F0 5328 003E                  		subq.b	#1,$3E(a0)
000197F4 6600                       		bne.s	locret_19256
000197F6 117C 000F 0020             		move.b	#$F,$20(a0)
000197FC                            
000197FC                            locret_19256:
000197FC 4E75                       		rts	
000197FE                            ; ===========================================================================
000197FE                            
000197FE                            loc_19258:				; XREF: loc_19202
000197FE 7064                       		moveq	#100,d0
00019800 6100 0000                  		bsr.w	AddPoints
00019804 117C 0006 0025             		move.b	#6,$25(a0)
0001980A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019810 4268 0010                  		clr.w	$10(a0)
00019814 4E75                       		rts	
00019816                            ; ===========================================================================
00019816                            
00019816                            loc_19270:				; XREF: Obj75_ShipIndex
00019816 3028 0030                  		move.w	$30(a0),d0
0001981A 317C 0140 0010             		move.w	#$140,$10(a0)
00019820 0828 0000 0022             		btst	#0,$22(a0)
00019826 6600                       		bne.s	loc_1928E
00019828 4468 0010                  		neg.w	$10(a0)
0001982C 0C40 2C08                  		cmpi.w	#$2C08,d0
00019830 6E00                       		bgt.s	loc_1929E
00019832 6000                       		bra.s	loc_19294
00019834                            ; ===========================================================================
00019834                            
00019834                            loc_1928E:
00019834 0C40 2D38                  		cmpi.w	#$2D38,d0
00019838 6D00                       		blt.s	loc_1929E
0001983A                            
0001983A                            loc_19294:
0001983A 0868 0000 0022             		bchg	#0,$22(a0)
00019840 4228 003D                  		clr.b	$3D(a0)
00019844                            
00019844                            loc_1929E:
00019844 0440 2C10                  		subi.w	#$2C10,d0
00019848 0240 001F                  		andi.w	#$1F,d0
0001984C 0440 001F                  		subi.w	#$1F,d0
00019850 6A00                       		bpl.s	loc_192AE
00019852 4440                       		neg.w	d0
00019854                            
00019854                            loc_192AE:
00019854 5340                       		subq.w	#1,d0
00019856 6E00                       		bgt.s	loc_192E8
00019858 4A28 003D                  		tst.b	$3D(a0)
0001985C 6600                       		bne.s	loc_192E8
0001985E 3238 D008                  		move.w	($FFFFD008).w,d1
00019862 0441 2C00                  		subi.w	#$2C00,d1
00019866 EA41                       		asr.w	#5,d1
00019868 B228 0034                  		cmp.b	$34(a0),d1
0001986C 6600                       		bne.s	loc_192E8
0001986E 7000                       		moveq	#0,d0
00019870 1028 0034                  		move.b	$34(a0),d0
00019874 EB40                       		asl.w	#5,d0
00019876 0640 2C10                  		addi.w	#$2C10,d0
0001987A 3140 0030                  		move.w	d0,$30(a0)
0001987E 6100 0000                  		bsr.w	Obj75_FindBlocks
00019882 5428 0025                  		addq.b	#2,$25(a0)
00019886 4268 0028                  		clr.w	$28(a0)
0001988A 4268 0010                  		clr.w	$10(a0)
0001988E                            
0001988E                            loc_192E8:
0001988E 6000 FEF4                  		bra.w	loc_191DE
00019892                            ; ===========================================================================
00019892                            
00019892                            loc_192EC:				; XREF: Obj75_ShipIndex
00019892 7000                       		moveq	#0,d0
00019894 1028 0028                  		move.b	$28(a0),d0
00019898 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001989C 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000198A0                            ; ===========================================================================
000198A0 0000                       off_192FA:	dc.w loc_19302-off_192FA
000198A2 0000                       		dc.w loc_19348-off_192FA
000198A4 0000                       		dc.w loc_1938E-off_192FA
000198A6 0000                       		dc.w loc_193D0-off_192FA
000198A8                            ; ===========================================================================
000198A8                            
000198A8                            loc_19302:				; XREF: off_192FA
000198A8 317C 0180 0012             		move.w	#$180,$12(a0)
000198AE 3028 0038                  		move.w	$38(a0),d0
000198B2 0C40 0556                  		cmpi.w	#$556,d0
000198B6 6500                       		bcs.s	loc_19344
000198B8 317C 0556 0038             		move.w	#$556,$38(a0)
000198BE 4268 003C                  		clr.w	$3C(a0)
000198C2 70FF                       		moveq	#-1,d0
000198C4 3028 0036                  		move.w	$36(a0),d0
000198C8 6700                       		beq.s	loc_1933C
000198CA 2240                       		movea.l	d0,a1
000198CC 137C 00FF 0029             		move.b	#-1,$29(a1)
000198D2 117C 00FF 0029             		move.b	#-1,$29(a0)
000198D8 2348 0034                  		move.l	a0,$34(a1)
000198DC 317C 0032 003C             		move.w	#$32,$3C(a0)
000198E2                            
000198E2                            loc_1933C:
000198E2 4268 0012                  		clr.w	$12(a0)
000198E6 5428 0028                  		addq.b	#2,$28(a0)
000198EA                            
000198EA                            loc_19344:
000198EA 6000 FEAC                  		bra.w	loc_191F2
000198EE                            ; ===========================================================================
000198EE                            
000198EE                            loc_19348:				; XREF: off_192FA
000198EE 5368 003C                  		subq.w	#1,$3C(a0)
000198F2 6A00                       		bpl.s	loc_19366
000198F4 5428 0028                  		addq.b	#2,$28(a0)
000198F8 317C F800 0012             		move.w	#-$800,$12(a0)
000198FE 4A68 0036                  		tst.w	$36(a0)
00019902 6600                       		bne.s	loc_19362
00019904 E0E8 0012                  		asr	$12(a0)
00019908                            
00019908                            loc_19362:
00019908 7000                       		moveq	#0,d0
0001990A 6000                       		bra.s	loc_1937C
0001990C                            ; ===========================================================================
0001990C                            
0001990C                            loc_19366:
0001990C 7000                       		moveq	#0,d0
0001990E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019914 6E00                       		bgt.s	loc_1937C
00019916 7002                       		moveq	#2,d0
00019918 0828 0001 003D             		btst	#1,$3D(a0)
0001991E 6700                       		beq.s	loc_1937C
00019920 4440                       		neg.w	d0
00019922                            
00019922                            loc_1937C:
00019922 D068 0038                  		add.w	$38(a0),d0
00019926 3140 000C                  		move.w	d0,$C(a0)
0001992A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019930 6000 FE76                  		bra.w	loc_19202
00019934                            ; ===========================================================================
00019934                            
00019934                            loc_1938E:				; XREF: off_192FA
00019934 303C 04DA                  		move.w	#$4DA,d0
00019938 4A68 0036                  		tst.w	$36(a0)
0001993C 6700                       		beq.s	loc_1939C
0001993E 0440 0018                  		subi.w	#$18,d0
00019942                            
00019942                            loc_1939C:
00019942 B068 0038                  		cmp.w	$38(a0),d0
00019946 6D00                       		blt.s	loc_193BE
00019948 317C 0008 003C             		move.w	#8,$3C(a0)
0001994E 4A68 0036                  		tst.w	$36(a0)
00019952 6700                       		beq.s	loc_193B4
00019954 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001995A                            
0001995A                            loc_193B4:
0001995A 5428 0028                  		addq.b	#2,$28(a0)
0001995E 4268 0012                  		clr.w	$12(a0)
00019962 6000                       		bra.s	loc_193CC
00019964                            ; ===========================================================================
00019964                            
00019964                            loc_193BE:
00019964 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001996A 6C00                       		bge.s	loc_193CC
0001996C 0668 000C 0012             		addi.w	#$C,$12(a0)
00019972                            
00019972                            loc_193CC:
00019972 6000 FE24                  		bra.w	loc_191F2
00019976                            ; ===========================================================================
00019976                            
00019976                            loc_193D0:				; XREF: off_192FA
00019976 5368 003C                  		subq.w	#1,$3C(a0)
0001997A 6E00                       		bgt.s	loc_19406
0001997C 6B00                       		bmi.s	loc_193EE
0001997E 70FF                       		moveq	#-1,d0
00019980 3028 0036                  		move.w	$36(a0),d0
00019984 6700                       		beq.s	loc_193E8
00019986 2240                       		movea.l	d0,a1
00019988 137C 000A 0029             		move.b	#$A,$29(a1)
0001998E                            
0001998E                            loc_193E8:
0001998E 4268 0036                  		clr.w	$36(a0)
00019992 6000                       		bra.s	loc_19406
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_193EE:
00019994 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001999A 6600                       		bne.s	loc_19406
0001999C 4228 0029                  		clr.b	$29(a0)
000199A0 5528 0025                  		subq.b	#2,$25(a0)
000199A4 117C 00FF 003D             		move.b	#-1,$3D(a0)
000199AA 6000                       		bra.s	loc_19446
000199AC                            ; ===========================================================================
000199AC                            
000199AC                            loc_19406:
000199AC 7001                       		moveq	#1,d0
000199AE 4A68 0036                  		tst.w	$36(a0)
000199B2 6700                       		beq.s	loc_19410
000199B4 7002                       		moveq	#2,d0
000199B6                            
000199B6                            loc_19410:
000199B6 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
000199BC 6700                       		beq.s	loc_19424
000199BE 6D00                       		blt.s	loc_1941C
000199C0 4440                       		neg.w	d0
000199C2                            
000199C2                            loc_1941C:
000199C2 4A68 0036                  		tst.w	$36(a0)
000199C6 D168 0038                  		add.w	d0,$38(a0)
000199CA                            
000199CA                            loc_19424:
000199CA 7000                       		moveq	#0,d0
000199CC 4A68 0036                  		tst.w	$36(a0)
000199D0 6700                       		beq.s	loc_19438
000199D2 7002                       		moveq	#2,d0
000199D4 0828 0000 003D             		btst	#0,$3D(a0)
000199DA 6700                       		beq.s	loc_19438
000199DC 4440                       		neg.w	d0
000199DE                            
000199DE                            loc_19438:
000199DE D068 0038                  		add.w	$38(a0),d0
000199E2 3140 000C                  		move.w	d0,$C(a0)
000199E6 3168 0030 0008             		move.w	$30(a0),8(a0)
000199EC                            
000199EC                            loc_19446:
000199EC 6000 FDBA                  		bra.w	loc_19202
000199F0                            
000199F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000199F0                            
000199F0                            
000199F0                            Obj75_FindBlocks:			; XREF: loc_192AE
000199F0 4268 0036                  		clr.w	$36(a0)
000199F4 43F8 D040                  		lea	($FFFFD040).w,a1
000199F8 703E                       		moveq	#$3E,d0
000199FA 7276                       		moveq	#$76,d1
000199FC 1428 0034                  		move.b	$34(a0),d2
00019A00                            
00019A00                            Obj75_FindLoop:
00019A00 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A02 6600                       		bne.s	loc_1946A	; if not, branch
00019A04 B429 0028                  		cmp.b	$28(a1),d2
00019A08 6600                       		bne.s	loc_1946A
00019A0A 3149 0036                  		move.w	a1,$36(a0)
00019A0E 6000                       		bra.s	locret_19472
00019A10                            ; ===========================================================================
00019A10                            
00019A10                            loc_1946A:
00019A10 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A14 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A18                            
00019A18                            locret_19472:
00019A18 4E75                       		rts	
00019A1A                            ; End of function Obj75_FindBlocks
00019A1A                            
00019A1A                            ; ===========================================================================
00019A1A                            
00019A1A                            loc_19474:				; XREF: Obj75_ShipIndex
00019A1A 5368 003C                  		subq.w	#1,$3C(a0)
00019A1E 6B00                       		bmi.s	loc_1947E
00019A20 6000 E3F8                  		bra.w	BossDefeated
00019A24                            ; ===========================================================================
00019A24                            
00019A24                            loc_1947E:
00019A24 5428 0025                  		addq.b	#2,$25(a0)
00019A28 4268 0012                  		clr.w	$12(a0)
00019A2C 08E8 0000 0022             		bset	#0,$22(a0)
00019A32 08A8 0007 0022             		bclr	#7,$22(a0)
00019A38 4268 0010                  		clr.w	$10(a0)
00019A3C 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019A42 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019A46 6600                       		bne.s	loc_194A8
00019A48 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019A4E                            
00019A4E                            loc_194A8:
00019A4E 6000 FD58                  		bra.w	loc_19202
00019A52                            ; ===========================================================================
00019A52                            
00019A52                            loc_194AC:				; XREF: Obj75_ShipIndex
00019A52 5268 003C                  		addq.w	#1,$3C(a0)
00019A56 6700                       		beq.s	loc_194BC
00019A58 6A00                       		bpl.s	loc_194C2
00019A5A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A60 6000                       		bra.s	loc_194EE
00019A62                            ; ===========================================================================
00019A62                            
00019A62                            loc_194BC:
00019A62 4268 0012                  		clr.w	$12(a0)
00019A66 6000                       		bra.s	loc_194EE
00019A68                            ; ===========================================================================
00019A68                            
00019A68                            loc_194C2:
00019A68 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019A6E 6500                       		bcs.s	loc_194DA
00019A70 6700                       		beq.s	loc_194E0
00019A72 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019A78 6500                       		bcs.s	loc_194EE
00019A7A 5428 0025                  		addq.b	#2,$25(a0)
00019A7E 6000                       		bra.s	loc_194EE
00019A80                            ; ===========================================================================
00019A80                            
00019A80                            loc_194DA:
00019A80 5168 0012                  		subq.w	#8,$12(a0)
00019A84 6000                       		bra.s	loc_194EE
00019A86                            ; ===========================================================================
00019A86                            
00019A86                            loc_194E0:
00019A86 4268 0012                  		clr.w	$12(a0)
00019A8A 303C 0085                  		move.w	#$85,d0
00019A8E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019A94                            
00019A94                            loc_194EE:
00019A94 6000 FD02                  		bra.w	loc_191F2
00019A98                            ; ===========================================================================
00019A98                            
00019A98                            loc_194F2:				; XREF: Obj75_ShipIndex
00019A98 317C 0400 0010             		move.w	#$400,$10(a0)
00019A9E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AA4 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019AAA 6400                       		bcc.s	loc_1950C
00019AAC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AB0 6000                       		bra.s	loc_19512
00019AB2                            ; ===========================================================================
00019AB2                            
00019AB2                            loc_1950C:
00019AB2 4A28 0001                  		tst.b	1(a0)
00019AB6 6A00                       		bpl.s	Obj75_ShipDelete
00019AB8                            
00019AB8                            loc_19512:
00019AB8 6100 E3A2                  		bsr.w	BossMove
00019ABC 6000 FCC6                  		bra.w	loc_191DE
00019AC0                            ; ===========================================================================
00019AC0                            
00019AC0                            Obj75_ShipDelete:
00019AC0 4EF9 0000 DBA8             		jmp	DeleteObject
00019AC6                            ; ===========================================================================
00019AC6                            
00019AC6                            Obj75_FaceMain:				; XREF: Obj75_Index
00019AC6 7201                       		moveq	#1,d1
00019AC8 2268 0034                  		movea.l	$34(a0),a1
00019ACC 7000                       		moveq	#0,d0
00019ACE 1029 0025                  		move.b	$25(a1),d0
00019AD2 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019AD6 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019ADA 1141 001C                  		move.b	d1,$1C(a0)
00019ADE 1010                       		move.b	(a0),d0
00019AE0 B011                       		cmp.b	(a1),d0
00019AE2 6600                       		bne.s	Obj75_FaceDelete
00019AE4 6000                       		bra.s	loc_195BE
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            Obj75_FaceDelete:
00019AE6 4EF9 0000 DBA8             		jmp	DeleteObject
00019AEC                            ; ===========================================================================
00019AEC 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019AF0 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019AF4 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019AF8                            ; ===========================================================================
00019AF8                            
00019AF8                            loc_19552:				; XREF: off_19546
00019AF8 720A                       		moveq	#$A,d1
00019AFA 4E75                       		rts	
00019AFC                            ; ===========================================================================
00019AFC                            
00019AFC                            loc_19556:				; XREF: off_19546
00019AFC 7206                       		moveq	#6,d1
00019AFE 4E75                       		rts	
00019B00                            ; ===========================================================================
00019B00                            
00019B00                            loc_1955A:				; XREF: off_19546
00019B00 7000                       		moveq	#0,d0
00019B02 1029 0028                  		move.b	$28(a1),d0
00019B06 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B0A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B0E                            ; ===========================================================================
00019B0E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B12 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B16                            ; ===========================================================================
00019B16                            
00019B16                            loc_19570:				; XREF: off_19568
00019B16 6000                       		bra.s	loc_19574
00019B18                            ; ===========================================================================
00019B18                            
00019B18                            loc_19572:				; XREF: off_19568
00019B18 7206                       		moveq	#6,d1
00019B1A                            
00019B1A                            loc_19574:				; XREF: off_19546
00019B1A 4A29 0020                  		tst.b	$20(a1)
00019B1E 6600                       		bne.s	loc_1957E
00019B20 7205                       		moveq	#5,d1
00019B22 4E75                       		rts	
00019B24                            ; ===========================================================================
00019B24                            
00019B24                            loc_1957E:
00019B24 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B2A 6500                       		bcs.s	locret_19588
00019B2C 7204                       		moveq	#4,d1
00019B2E                            
00019B2E                            locret_19588:
00019B2E 4E75                       		rts	
00019B30                            ; ===========================================================================
00019B30                            
00019B30                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B30 117C 0007 001C             		move.b	#7,$1C(a0)
00019B36 2268 0034                  		movea.l	$34(a0),a1
00019B3A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019B40 6600                       		bne.s	loc_195AA
00019B42 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B48 4A28 0001                  		tst.b	1(a0)
00019B4C 6A00                       		bpl.s	Obj75_FlameDelete
00019B4E 6000                       		bra.s	loc_195B6
00019B50                            ; ===========================================================================
00019B50                            
00019B50                            loc_195AA:
00019B50 4A69 0010                  		tst.w	$10(a1)
00019B54 6700                       		beq.s	loc_195B6
00019B56 117C 0008 001C             		move.b	#8,$1C(a0)
00019B5C                            
00019B5C                            loc_195B6:
00019B5C 6000                       		bra.s	loc_195BE
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            Obj75_FlameDelete:
00019B5E 4EF9 0000 DBA8             		jmp	DeleteObject
00019B64                            ; ===========================================================================
00019B64                            
00019B64                            loc_195BE:
00019B64 43F9 0001 826C             		lea	(Ani_Eggman).l,a1
00019B6A 4EB9 0000 AC42             		jsr	AnimateSprite
00019B70 2268 0034                  		movea.l	$34(a0),a1
00019B74 3169 0008 0008             		move.w	8(a1),8(a0)
00019B7A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019B80                            
00019B80                            loc_195DA:
00019B80 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019B86 7003                       		moveq	#3,d0
00019B88 C028 0022                  		and.b	$22(a0),d0
00019B8C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B92 8128 0001                  		or.b	d0,1(a0)
00019B96 4EF9 0000 DB6C             		jmp	DisplaySprite
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019B9C 217C 0001 8384 0004        		move.l	#Map_BossItems,4(a0)
00019BA4 317C 246C 0002             		move.w	#$246C,2(a0)
00019BAA 117C 0005 001A             		move.b	#5,$1A(a0)
00019BB0 2268 0034                  		movea.l	$34(a0),a1
00019BB4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019BBA 6600                       		bne.s	loc_1961C
00019BBC 4A28 0001                  		tst.b	1(a0)
00019BC0 6A00                       		bpl.s	Obj75_SpikeDelete
00019BC2                            
00019BC2                            loc_1961C:
00019BC2 3169 0008 0008             		move.w	8(a1),8(a0)
00019BC8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BCE 3028 003C                  		move.w	$3C(a0),d0
00019BD2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019BD8 6600                       		bne.s	loc_19652
00019BDA 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019BE0 6700                       		beq.s	loc_1964C
00019BE2 4A29 0028                  		tst.b	$28(a1)
00019BE6 6600                       		bne.s	loc_19658
00019BE8 0C40 0094                  		cmpi.w	#$94,d0
00019BEC 6C00                       		bge.s	loc_19658
00019BEE 5E40                       		addq.w	#7,d0
00019BF0 6000                       		bra.s	loc_19658
00019BF2                            ; ===========================================================================
00019BF2                            
00019BF2                            loc_1964C:
00019BF2 4A69 003C                  		tst.w	$3C(a1)
00019BF6 6A00                       		bpl.s	loc_19658
00019BF8                            
00019BF8                            loc_19652:
00019BF8 4A40                       		tst.w	d0
00019BFA 6F00                       		ble.s	loc_19658
00019BFC 5B40                       		subq.w	#5,d0
00019BFE                            
00019BFE                            loc_19658:
00019BFE 3140 003C                  		move.w	d0,$3C(a0)
00019C02 E440                       		asr.w	#2,d0
00019C04 D168 000C                  		add.w	d0,$C(a0)
00019C08 117C 0008 0019             		move.b	#8,$19(a0)
00019C0E 117C 000C 0016             		move.b	#$C,$16(a0)
00019C14 4228 0020                  		clr.b	$20(a0)
00019C18 2268 0034                  		movea.l	$34(a0),a1
00019C1C 4A29 0020                  		tst.b	$20(a1)
00019C20 6700                       		beq.s	loc_19688
00019C22 4A29 0029                  		tst.b	$29(a1)
00019C26 6600                       		bne.s	loc_19688
00019C28 117C 0084 0020             		move.b	#$84,$20(a0)
00019C2E                            
00019C2E                            loc_19688:
00019C2E 6000 FF50                  		bra.w	loc_195DA
00019C32                            ; ===========================================================================
00019C32                            
00019C32                            Obj75_SpikeDelete:
00019C32 4EF9 0000 DBA8             		jmp	DeleteObject
00019C38                            ; ===========================================================================
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            
00019C38                            Obj76:					; XREF: Obj_Index
00019C38 7000                       		moveq	#0,d0
00019C3A 1028 0024                  		move.b	$24(a0),d0
00019C3E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019C42 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019C46                            ; ===========================================================================
00019C46 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019C48 0000                       		dc.w Obj76_Action-Obj76_Index
00019C4A 0000                       		dc.w loc_19762-Obj76_Index
00019C4C                            ; ===========================================================================
00019C4C                            
00019C4C                            Obj76_Main:				; XREF: Obj76_Index
00019C4C 7800                       		moveq	#0,d4
00019C4E 3A3C 2C10                  		move.w	#$2C10,d5
00019C52 7C09                       		moveq	#9,d6
00019C54 43D0                       		lea	(a0),a1
00019C56 6000                       		bra.s	Obj76_MakeBlock
00019C58                            ; ===========================================================================
00019C58                            
00019C58                            Obj76_Loop:
00019C58 4EB9 0000 DFF2             		jsr	SingleObjLoad
00019C5E 6600                       		bne.s	Obj76_ExitLoop
00019C60                            
00019C60                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019C60 12BC 0076                  		move.b	#$76,(a1)
00019C64 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019C6C 337C 4000 0002             		move.w	#$4000,2(a1)
00019C72 137C 0004 0001             		move.b	#4,1(a1)
00019C78 137C 0010 0019             		move.b	#$10,$19(a1)
00019C7E 137C 0010 0016             		move.b	#$10,$16(a1)
00019C84 137C 0003 0018             		move.b	#3,$18(a1)
00019C8A 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019C8E 337C 0582 000C             		move.w	#$582,$C(a1)
00019C94 3344 0028                  		move.w	d4,$28(a1)
00019C98 0644 0101                  		addi.w	#$101,d4
00019C9C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019CA0 5429 0024                  		addq.b	#2,$24(a1)
00019CA4 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019CA8                            
00019CA8                            Obj76_ExitLoop:
00019CA8 4E75                       		rts	
00019CAA                            ; ===========================================================================
00019CAA                            
00019CAA                            Obj76_Action:				; XREF: Obj76_Index
00019CAA 1028 0029                  		move.b	$29(a0),d0
00019CAE B028 0028                  		cmp.b	$28(a0),d0
00019CB2 6700                       		beq.s	Obj76_Solid
00019CB4 4A00                       		tst.b	d0
00019CB6 6B00                       		bmi.s	loc_19718
00019CB8                            
00019CB8                            loc_19712:
00019CB8 6100 0000                  		bsr.w	Obj76_Break
00019CBC 6000                       		bra.s	Obj76_Display
00019CBE                            ; ===========================================================================
00019CBE                            
00019CBE                            loc_19718:
00019CBE 2268 0034                  		movea.l	$34(a0),a1
00019CC2 4A29 0021                  		tst.b	$21(a1)
00019CC6 67F0                       		beq.s	loc_19712
00019CC8 3169 0008 0008             		move.w	8(a1),8(a0)
00019CCE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019CD4 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019CDA B2C8                       		cmpa.w	a0,a1
00019CDC 6500                       		bcs.s	Obj76_Display
00019CDE 3029 0012                  		move.w	$12(a1),d0
00019CE2 48C0                       		ext.l	d0
00019CE4 E080                       		asr.l	#8,d0
00019CE6 D168 000C                  		add.w	d0,$C(a0)
00019CEA 6000                       		bra.s	Obj76_Display
00019CEC                            ; ===========================================================================
00019CEC                            
00019CEC                            Obj76_Solid:				; XREF: Obj76_Action
00019CEC 323C 001B                  		move.w	#$1B,d1
00019CF0 343C 0010                  		move.w	#$10,d2
00019CF4 363C 0011                  		move.w	#$11,d3
00019CF8 3828 0008                  		move.w	8(a0),d4
00019CFC 4EB9 0000 FF3C             		jsr	SolidObject
00019D02                            
00019D02                            Obj76_Display:				; XREF: Obj76_Action
00019D02 4EF9 0000 DB6C             		jmp	DisplaySprite
00019D08                            ; ===========================================================================
00019D08                            
00019D08                            loc_19762:				; XREF: Obj76_Index
00019D08 4A28 0001                  		tst.b	1(a0)
00019D0C 6A00                       		bpl.s	Obj76_Delete
00019D0E 4EB9 0000 DB1A             		jsr	ObjectFall
00019D14 4EF9 0000 DB6C             		jmp	DisplaySprite
00019D1A                            ; ===========================================================================
00019D1A                            
00019D1A                            Obj76_Delete:
00019D1A 4EF9 0000 DBA8             		jmp	DeleteObject
00019D20                            
00019D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D20                            
00019D20                            
00019D20                            Obj76_Break:				; XREF: Obj76_Action
00019D20 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D24 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D28 7801                       		moveq	#1,d4
00019D2A 7203                       		moveq	#3,d1
00019D2C 7438                       		moveq	#$38,d2
00019D2E 5428 0024                  		addq.b	#2,$24(a0)
00019D32 117C 0008 0019             		move.b	#8,$19(a0)
00019D38 117C 0008 0016             		move.b	#8,$16(a0)
00019D3E 43D0                       		lea	(a0),a1
00019D40 6000                       		bra.s	Obj76_MakeFrag
00019D42                            ; ===========================================================================
00019D42                            
00019D42                            Obj76_LoopFrag:
00019D42 4EB9 0000 E008             		jsr	SingleObjLoad2
00019D48 6600                       		bne.s	loc_197D4
00019D4A                            
00019D4A                            Obj76_MakeFrag:
00019D4A 45D0                       		lea	(a0),a2
00019D4C 47D1                       		lea	(a1),a3
00019D4E 7603                       		moveq	#3,d3
00019D50                            
00019D50                            loc_197AA:
00019D50 26DA                       		move.l	(a2)+,(a3)+
00019D52 26DA                       		move.l	(a2)+,(a3)+
00019D54 26DA                       		move.l	(a2)+,(a3)+
00019D56 26DA                       		move.l	(a2)+,(a3)+
00019D58 51CB FFF6                  		dbf	d3,loc_197AA
00019D5C                            
00019D5C 335C 0010                  		move.w	(a4)+,$10(a1)
00019D60 335C 0012                  		move.w	(a4)+,$12(a1)
00019D64 361D                       		move.w	(a5)+,d3
00019D66 D769 0008                  		add.w	d3,8(a1)
00019D6A 361D                       		move.w	(a5)+,d3
00019D6C D769 000C                  		add.w	d3,$C(a1)
00019D70 1344 001A                  		move.b	d4,$1A(a1)
00019D74 5244                       		addq.w	#1,d4
00019D76 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019D7A                            
00019D7A                            loc_197D4:
00019D7A 303C 00CB                  		move.w	#$CB,d0
00019D7E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019D84                            ; End of function Obj76_Break
00019D84                            
00019D84                            ; ===========================================================================
00019D84 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019D88 0180 FE00                  		dc.w $180, $FE00
00019D8C FF00 FF00                  		dc.w $FF00, $FF00
00019D90 0100 FF00                  		dc.w $100, $FF00
00019D94 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019D98 0010 0000                  		dc.w $10, 0
00019D9C 0000 0010                  		dc.w 0,	$10
00019DA0 0010 0010                  		dc.w $10, $10
00019DA4                            ; ---------------------------------------------------------------------------
00019DA4                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019DA4                            ; ---------------------------------------------------------------------------
00019DA4                            Map_obj76:
00019DA4                            	include "_maps\obj76.asm"
00019DA4                            ; ---------------------------------------------------------------------------
00019DA4                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019DA4                            ; ---------------------------------------------------------------------------
00019DA4 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019DA8 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019DAC 0000                       		dc.w byte_19826-Map_obj76
00019DAE 02                         byte_19808:	dc.b 2
00019DAF F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019DB4 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019DB9 00                         		dc.b 0
00019DBA 01                         byte_19814:	dc.b 1
00019DBB F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019DC0 01                         byte_1981A:	dc.b 1
00019DC1 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019DC6 01                         byte_19820:	dc.b 1
00019DC7 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019DCC 01                         byte_19826:	dc.b 1
00019DCD F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019DD2                            		even
00019DD2                            		even
00019DD2                            
00019DD2                            ; ===========================================================================
00019DD2                            
00019DD2                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019DD2 4EF9 0000 DBA8             		jmp	DeleteObject
00019DD8                            ; ===========================================================================
00019DD8                            ; ---------------------------------------------------------------------------
00019DD8                            ; Object 82 - Eggman (SBZ2)
00019DD8                            ; ---------------------------------------------------------------------------
00019DD8                            
00019DD8                            Obj82:					; XREF: Obj_Index
00019DD8 7000                       		moveq	#0,d0
00019DDA 1028 0024                  		move.b	$24(a0),d0
00019DDE 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019DE2 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019DE6                            ; ===========================================================================
00019DE6 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019DE8 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019DEA 0000                       		dc.w Obj82_Switch-Obj82_Index
00019DEC                            
00019DEC 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019DEF 0400 03                    		dc.b 4,	0, 3
00019DF2                            ; ===========================================================================
00019DF2                            
00019DF2                            Obj82_Main:				; XREF: Obj82_Index
00019DF2 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019DF6 317C 2160 0008             		move.w	#$2160,8(a0)
00019DFC 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E02 117C 000F 0020             		move.b	#$F,$20(a0)
00019E08 117C 0010 0021             		move.b	#$10,$21(a0)
00019E0E 08A8 0000 0022             		bclr	#0,$22(a0)
00019E14 4228 0025                  		clr.b	$25(a0)
00019E18 115A 0024                  		move.b	(a2)+,$24(a0)
00019E1C 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E20 115A 0018                  		move.b	(a2)+,$18(a0)
00019E24 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E2C 317C 0400 0002             		move.w	#$400,2(a0)
00019E32 117C 0004 0001             		move.b	#4,1(a0)
00019E38 08E8 0007 0001             		bset	#7,1(a0)
00019E3E 117C 0020 0019             		move.b	#$20,$19(a0)
00019E44 4EB9 0000 E008             		jsr	SingleObjLoad2
00019E4A 6600                       		bne.s	Obj82_Eggman
00019E4C 2348 0034                  		move.l	a0,$34(a1)
00019E50 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019E54 337C 2130 0008             		move.w	#$2130,8(a1)
00019E5A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019E60 4228 0025                  		clr.b	$25(a0)
00019E64 135A 0024                  		move.b	(a2)+,$24(a1)
00019E68 135A 001C                  		move.b	(a2)+,$1C(a1)
00019E6C 135A 0018                  		move.b	(a2)+,$18(a1)
00019E70 237C 0000 C360 0004        		move.l	#Map_obj32,4(a1)
00019E78 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019E7E 137C 0004 0001             		move.b	#4,1(a1)
00019E84 08E9 0007 0001             		bset	#7,1(a1)
00019E8A 137C 0010 0019             		move.b	#$10,$19(a1)
00019E90 137C 0000 001A             		move.b	#0,$1A(a1)
00019E96                            
00019E96                            Obj82_Eggman:				; XREF: Obj82_Index
00019E96 7000                       		moveq	#0,d0
00019E98 1028 0025                  		move.b	$25(a0),d0
00019E9C 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019EA0 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019EA4 43FA 0000                  		lea	Ani_obj82(pc),a1
00019EA8 4EB9 0000 AC42             		jsr	AnimateSprite
00019EAE 4EF9 0000 DB6C             		jmp	DisplaySprite
00019EB4                            ; ===========================================================================
00019EB4 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019EB6 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019EB8 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019EBA 0000                       		dc.w loc_19934-Obj82_EggIndex
00019EBC                            ; ===========================================================================
00019EBC                            
00019EBC                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019EBC 3028 0008                  		move.w	8(a0),d0
00019EC0 9078 D008                  		sub.w	($FFFFD008).w,d0
00019EC4 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019EC8 6400                       		bcc.s	loc_19934	; if not, branch
00019ECA 5428 0025                  		addq.b	#2,$25(a0)
00019ECE 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019ED4 117C 0001 001C             		move.b	#1,$1C(a0)
00019EDA                            
00019EDA                            loc_19934:				; XREF: Obj82_EggIndex
00019EDA 4EF9 0000 DB46             		jmp	SpeedToPos
00019EE0                            ; ===========================================================================
00019EE0                            
00019EE0                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019EE0 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019EE4 6600                       		bne.s	loc_19954	; if time remains, branch
00019EE6 5428 0025                  		addq.b	#2,$25(a0)
00019EEA 117C 0002 001C             		move.b	#2,$1C(a0)
00019EF0 5868 000C                  		addq.w	#4,$C(a0)
00019EF4 317C 000F 003C             		move.w	#15,$3C(a0)
00019EFA                            
00019EFA                            loc_19954:
00019EFA 60DE                       		bra.s	loc_19934
00019EFC                            ; ===========================================================================
00019EFC                            
00019EFC                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019EFC 5368 003C                  		subq.w	#1,$3C(a0)
00019F00 6E00                       		bgt.s	loc_199D0
00019F02 6600                       		bne.s	loc_1996A
00019F04 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F0A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F10                            
00019F10                            loc_1996A:
00019F10 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F16 6E00                       		bgt.s	loc_19976
00019F18 4268 0010                  		clr.w	$10(a0)
00019F1C                            
00019F1C                            loc_19976:
00019F1C 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F22 4A68 0012                  		tst.w	$12(a0)
00019F26 6B00                       		bmi.s	Obj82_FindBlocks
00019F28 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F2E 6500                       		bcs.s	Obj82_FindBlocks
00019F30 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F36 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019F3C 6500                       		bcs.s	Obj82_FindBlocks
00019F3E 317C 059B 000C             		move.w	#$59B,$C(a0)
00019F44 4268 0012                  		clr.w	$12(a0)
00019F48                            
00019F48                            Obj82_FindBlocks:
00019F48 3028 0010                  		move.w	$10(a0),d0
00019F4C 8068 0012                  		or.w	$12(a0),d0
00019F50 6600                       		bne.s	loc_199D0
00019F52 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019F56 703E                       		moveq	#$3E,d0
00019F58 7240                       		moveq	#$40,d1
00019F5A                            
00019F5A                            Obj82_FindLoop:	
00019F5A D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019F5C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019F60 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019F64                            
00019F64 6600                       		bne.s	loc_199D0
00019F66 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019F6C 5428 0025                  		addq.b	#2,$25(a0)
00019F70 117C 0001 001C             		move.b	#1,$1C(a0)
00019F76                            
00019F76                            loc_199D0:
00019F76 6000 FF62                  		bra.w	loc_19934
00019F7A                            ; ===========================================================================
00019F7A                            
00019F7A                            Obj82_Switch:				; XREF: Obj82_Index
00019F7A 7000                       		moveq	#0,d0
00019F7C 1028 0025                  		move.b	$25(a0),d0
00019F80 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019F84 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019F88                            ; ===========================================================================
00019F88 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019F8A 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019F8C                            ; ===========================================================================
00019F8C                            
00019F8C                            loc_199E6:				; XREF: Obj82_SwIndex
00019F8C 2268 0034                  		movea.l	$34(a0),a1
00019F90 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019F96 6600                       		bne.s	Obj82_SwDisplay
00019F98 117C 0001 001A             		move.b	#1,$1A(a0)
00019F9E 5428 0025                  		addq.b	#2,$25(a0)
00019FA2                            
00019FA2                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019FA2 4EF9 0000 DB6C             		jmp	DisplaySprite
00019FA8                            ; ===========================================================================
00019FA8                            Ani_obj82:
00019FA8                            	include "_anim\obj82.asm"
00019FA8                            ; ---------------------------------------------------------------------------
00019FA8                            ; Animation script - Eggman (SBZ2)
00019FA8                            ; ---------------------------------------------------------------------------
00019FA8 0000                       		dc.w byte_19A10-Ani_obj82
00019FAA 0000                       		dc.w byte_19A14-Ani_obj82
00019FAC 0000                       		dc.w byte_19A18-Ani_obj82
00019FAE 0000                       		dc.w byte_19A20-Ani_obj82
00019FB0 0000                       		dc.w byte_19A24-Ani_obj82
00019FB2 0000                       		dc.w byte_19A2A-Ani_obj82
00019FB4 0000                       		dc.w byte_19A30-Ani_obj82
00019FB6 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019FBA 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019FBE 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019FC6 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019FCA 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019FD0 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019FD6 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019FDA                            		even
00019FDA                            		even
00019FDA                            
00019FDA                            ; ---------------------------------------------------------------------------
00019FDA                            ; Sprite mappings - Eggman (SBZ2)
00019FDA                            ; ---------------------------------------------------------------------------
00019FDA                            Map_obj82:
00019FDA                            	include "_maps\obj82.asm"
00019FDA                            ; ================================================================================
00019FDA                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
00019FDA                            ; ================================================================================
00019FDA                            
00019FDA                            DATAA16Z12RYSAF:
00019FDA 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
00019FDE 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
00019FE2 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
00019FE6 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
00019FEA 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
00019FEE 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
00019FF0 03                         DATAA16Z12RYSAF_0: dc.b $3
00019FF1 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
00019FF6 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
00019FFB 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A000 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A001 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A006 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A00B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A010 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A015 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A016 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A01B E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A020 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A025 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A02A 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A02B E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A030 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A035 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A03A 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A03B E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A040 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A045 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A04A E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A04F 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A050 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A055 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A05A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A05F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A064 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A065 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A06A E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A06F 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A074 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A079 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A07E F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A083 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A088 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A089 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A08E E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A093 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A098 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A09D 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A09E 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A0A3 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A0A8 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A0AD 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A0B2 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A0B7 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A0B8 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0BD E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0C2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0C7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0CC E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A0D1 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A0D6 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A0DB 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A0E0 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A0E1 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A0E6 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A0EB EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A0F0                            	even
0001A0F0                            	even
0001A0F0                            
0001A0F0                            ; ===========================================================================
0001A0F0                            ; ---------------------------------------------------------------------------
0001A0F0                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A0F0                            ; ---------------------------------------------------------------------------
0001A0F0                            
0001A0F0                            Obj83:					; XREF: Obj_Index
0001A0F0 7000                       		moveq	#0,d0
0001A0F2 1028 0024                  		move.b	$24(a0),d0
0001A0F6 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A0FA 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A0FE                            ; ===========================================================================
0001A0FE 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A100 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A102 0000                       		dc.w loc_19C36-Obj83_Index
0001A104 0000                       		dc.w loc_19C62-Obj83_Index
0001A106 0000                       		dc.w loc_19C72-Obj83_Index
0001A108 0000                       		dc.w loc_19C80-Obj83_Index
0001A10A                            ; ===========================================================================
0001A10A                            
0001A10A                            Obj83_Main:				; XREF: Obj83_Index
0001A10A 317C 2080 0008             		move.w	#$2080,8(a0)
0001A110 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A116 117C 0080 0019             		move.b	#$80,$19(a0)
0001A11C 117C 0010 0016             		move.b	#$10,$16(a0)
0001A122 117C 0004 0001             		move.b	#4,1(a0)
0001A128 08E8 0007 0001             		bset	#7,1(a0)
0001A12E 7800                       		moveq	#0,d4
0001A130 3A3C 2010                  		move.w	#$2010,d5
0001A134 7C07                       		moveq	#7,d6
0001A136 45E8 0030                  		lea	$30(a0),a2
0001A13A                            
0001A13A                            Obj83_MakeBlock:
0001A13A 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001A140 6600                       		bne.s	Obj83_ExitMake
0001A142 34C9                       		move.w	a1,(a2)+
0001A144 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A148 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A150 337C 4518 0002             		move.w	#$4518,2(a1)
0001A156 137C 0004 0001             		move.b	#4,1(a1)
0001A15C 137C 0010 0019             		move.b	#$10,$19(a1)
0001A162 137C 0010 0016             		move.b	#$10,$16(a1)
0001A168 137C 0003 0018             		move.b	#3,$18(a1)
0001A16E 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A172 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A178 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A17C 137C 0008 0024             		move.b	#8,$24(a1)
0001A182 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A186                            
0001A186                            Obj83_ExitMake:
0001A186 5428 0024                  		addq.b	#2,$24(a0)
0001A18A 4E75                       		rts	
0001A18C                            ; ===========================================================================
0001A18C                            
0001A18C                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A18C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A192 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A194 4228 001A                  		clr.b	$1A(a0)
0001A198 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A19C                            
0001A19C                            Obj83_Solid:
0001A19C 7000                       		moveq	#0,d0
0001A19E 1028 001A                  		move.b	$1A(a0),d0
0001A1A2 4400                       		neg.b	d0
0001A1A4 4880                       		ext.w	d0
0001A1A6 5040                       		addq.w	#8,d0
0001A1A8 E940                       		asl.w	#4,d0
0001A1AA 383C 2100                  		move.w	#$2100,d4
0001A1AE 9840                       		sub.w	d0,d4
0001A1B0 1140 0019                  		move.b	d0,$19(a0)
0001A1B4 3144 0008                  		move.w	d4,8(a0)
0001A1B8 720B                       		moveq	#$B,d1
0001A1BA D240                       		add.w	d0,d1
0001A1BC 7410                       		moveq	#$10,d2
0001A1BE 7611                       		moveq	#$11,d3
0001A1C0 4EF9 0000 FF3C             		jmp	SolidObject
0001A1C6                            ; ===========================================================================
0001A1C6                            
0001A1C6                            loc_19C36:				; XREF: Obj83_Index
0001A1C6 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A1CC 6400                       		bcc.s	Obj83_Solid2
0001A1CE 70FF                       		moveq	#-1,d0
0001A1D0 1028 001A                  		move.b	$1A(a0),d0
0001A1D4 4880                       		ext.w	d0
0001A1D6 D040                       		add.w	d0,d0
0001A1D8 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A1DC 2240                       		movea.l	d0,a1
0001A1DE 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A1E4 5228 001A                  		addq.b	#1,$1A(a0)
0001A1E8 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A1EE 6700                       		beq.s	loc_19C62
0001A1F0                            
0001A1F0                            Obj83_Solid2:
0001A1F0 60AA                       		bra.s	Obj83_Solid
0001A1F2                            ; ===========================================================================
0001A1F2                            
0001A1F2                            loc_19C62:				; XREF: Obj83_Index
0001A1F2 08A8 0003 0022             		bclr	#3,$22(a0)
0001A1F8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A1FE 6000 FBD2                  		bra.w	loc_1982C
0001A202                            ; ===========================================================================
0001A202                            
0001A202                            loc_19C72:				; XREF: Obj83_Index
0001A202 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A208 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A20A 4EF9 0000 DB6C             		jmp	DisplaySprite
0001A210                            ; ===========================================================================
0001A210                            
0001A210                            loc_19C80:				; XREF: Obj83_Index
0001A210 4A28 0001                  		tst.b	1(a0)
0001A214 6A00 FBBC                  		bpl.w	loc_1982C
0001A218 4EB9 0000 DB1A             		jsr	ObjectFall
0001A21E 4EF9 0000 DB6C             		jmp	DisplaySprite
0001A224                            ; ===========================================================================
0001A224                            
0001A224                            Obj83_Break:				; XREF: loc_19C72
0001A224 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A228 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A22C 7801                       		moveq	#1,d4
0001A22E 7203                       		moveq	#3,d1
0001A230 7438                       		moveq	#$38,d2
0001A232 5428 0024                  		addq.b	#2,$24(a0)
0001A236 117C 0008 0019             		move.b	#8,$19(a0)
0001A23C 117C 0008 0016             		move.b	#8,$16(a0)
0001A242 43D0                       		lea	(a0),a1
0001A244 6000                       		bra.s	Obj83_MakeFrag
0001A246                            ; ===========================================================================
0001A246                            
0001A246                            Obj83_LoopFrag:
0001A246 4EB9 0000 E008             		jsr	SingleObjLoad2
0001A24C 6600                       		bne.s	Obj83_BreakSnd
0001A24E                            
0001A24E                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A24E 45D0                       		lea	(a0),a2
0001A250 47D1                       		lea	(a1),a3
0001A252 7603                       		moveq	#3,d3
0001A254                            
0001A254                            loc_19CC4:
0001A254 26DA                       		move.l	(a2)+,(a3)+
0001A256 26DA                       		move.l	(a2)+,(a3)+
0001A258 26DA                       		move.l	(a2)+,(a3)+
0001A25A 26DA                       		move.l	(a2)+,(a3)+
0001A25C 51CB FFF6                  		dbf	d3,loc_19CC4
0001A260                            
0001A260 335C 0012                  		move.w	(a4)+,$12(a1)
0001A264 361D                       		move.w	(a5)+,d3
0001A266 D769 0008                  		add.w	d3,8(a1)
0001A26A 361D                       		move.w	(a5)+,d3
0001A26C D769 000C                  		add.w	d3,$C(a1)
0001A270 1344 001A                  		move.b	d4,$1A(a1)
0001A274 5244                       		addq.w	#1,d4
0001A276 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A27A                            
0001A27A                            Obj83_BreakSnd:
0001A27A 303C 00CB                  		move.w	#$CB,d0
0001A27E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A284 4EF9 0000 DB6C             		jmp	DisplaySprite
0001A28A                            ; ===========================================================================
0001A28A 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A28E 0120 00C0                  		dc.w $120, $C0
0001A292 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A296 0010 0000                  		dc.w $10, 0
0001A29A 0000 0010                  		dc.w 0,	$10
0001A29E 0010 0010                  		dc.w $10, $10
0001A2A2                            ; ---------------------------------------------------------------------------
0001A2A2                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2A2                            ; ---------------------------------------------------------------------------
0001A2A2                            Map_obj83:
0001A2A2                            	include "_maps\obj83.asm"
0001A2A2                            ; ---------------------------------------------------------------------------
0001A2A2                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2A2                            ; ---------------------------------------------------------------------------
0001A2A2 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A2A6 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A2AA 0000                       		dc.w byte_19D46-Map_obj83
0001A2AC 01                         byte_19D1C:	dc.b 1
0001A2AD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A2B2 02                         byte_19D22:	dc.b 2
0001A2B3 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A2B8 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A2BD 00                         		dc.b 0
0001A2BE 02                         byte_19D2E:	dc.b 2
0001A2BF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A2C4 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A2C9 00                         		dc.b 0
0001A2CA 02                         byte_19D3A:	dc.b 2
0001A2CB F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A2D0 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A2D5 00                         		dc.b 0
0001A2D6 02                         byte_19D46:	dc.b 2
0001A2D7 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A2DC F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A2E2 00                         		even
0001A2E2 00                         		even
0001A2E2                            
0001A2E2                            ; ===========================================================================
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2                            ; Object 85 - Eggman (FZ)
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2                            
0001A2E2                            Obj85_Delete:
0001A2E2 4EF9 0000 DBA8             		jmp	DeleteObject
0001A2E8                            ; ===========================================================================
0001A2E8                            
0001A2E8                            Obj85:					; XREF: Obj_Index
0001A2E8 7000                       		moveq	#0,d0
0001A2EA 1028 0024                  		move.b	$24(a0),d0
0001A2EE 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A2F2 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A2F6                            ; ===========================================================================
0001A2F6 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A2F8 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A2FA 0000                       		dc.w loc_1A38E-Obj85_Index
0001A2FC 0000                       		dc.w loc_1A346-Obj85_Index
0001A2FE 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A300 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A302 0000                       		dc.w loc_1A264-Obj85_Index
0001A304                            
0001A304 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A30A 0001 9FDA                  		dc.l Map_obj82		; mappings pointer
0001A30E 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A314 0000 0000                  		dc.l Map_obj84
0001A318 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A31E 0000 0000                  		dc.l Map_FZBoss
0001A322 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A328 0001 9FDA                  		dc.l Map_obj82
0001A32C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A332 0001 82BC                  		dc.l Map_Eggman
0001A336 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A33C 0001 82BC                  		dc.l Map_Eggman
0001A340                            
0001A340 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A345 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A34A 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A34F 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A354 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A359 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A35E                            ; ===========================================================================
0001A35E                            
0001A35E                            Obj85_Main:				; XREF: Obj85_Index
0001A35E 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A362 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A366 2248                       		movea.l	a0,a1
0001A368 7205                       		moveq	#5,d1
0001A36A 6000                       		bra.s	Obj85_LoadBoss
0001A36C                            ; ===========================================================================
0001A36C                            
0001A36C                            Obj85_Loop:
0001A36C 4EB9 0000 E008             		jsr	SingleObjLoad2
0001A372 6600                       		bne.s	loc_19E20
0001A374                            
0001A374                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A374 12BC 0085                  		move.b	#$85,(a1)
0001A378 335A 0008                  		move.w	(a2)+,8(a1)
0001A37C 335A 000C                  		move.w	(a2)+,$C(a1)
0001A380 335A 0002                  		move.w	(a2)+,2(a1)
0001A384 235A 0004                  		move.l	(a2)+,4(a1)
0001A388 135B 0024                  		move.b	(a3)+,$24(a1)
0001A38C 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A390 135B 0018                  		move.b	(a3)+,$18(a1)
0001A394 135B 0017                  		move.b	(a3)+,$17(a1)
0001A398 135B 0016                  		move.b	(a3)+,$16(a1)
0001A39C 137C 0004 0001             		move.b	#4,1(a1)
0001A3A2 08E8 0007 0001             		bset	#7,1(a0)
0001A3A8 2348 0034                  		move.l	a0,$34(a1)
0001A3AC 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A3B0                            
0001A3B0                            loc_19E20:
0001A3B0 45E8 0036                  		lea	$36(a0),a2
0001A3B4 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001A3BA 6600                       		bne.s	loc_19E5A
0001A3BC 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A3C0 3489                       		move.w	a1,(a2)
0001A3C2 2348 0034                  		move.l	a0,$34(a1)
0001A3C6 45E8 0038                  		lea	$38(a0),a2
0001A3CA 7400                       		moveq	#0,d2
0001A3CC 7203                       		moveq	#3,d1
0001A3CE                            
0001A3CE                            loc_19E3E:
0001A3CE 4EB9 0000 E008             		jsr	SingleObjLoad2
0001A3D4 6600                       		bne.s	loc_19E5A
0001A3D6 34C9                       		move.w	a1,(a2)+
0001A3D8 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A3DC 2348 0034                  		move.l	a0,$34(a1)
0001A3E0 1342 0028                  		move.b	d2,$28(a1)
0001A3E4 5442                       		addq.w	#2,d2
0001A3E6 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A3EA                            
0001A3EA                            loc_19E5A:
0001A3EA 317C 0000 0034             		move.w	#0,$34(a0)
0001A3F0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A3F6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A3FC                            
0001A3FC                            Obj85_Eggman:				; XREF: Obj85_Index
0001A3FC 7000                       		moveq	#0,d0
0001A3FE 1028 0034                  		move.b	$34(a0),d0
0001A402 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A406 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A40A 4EF9 0000 DB6C             		jmp	DisplaySprite
0001A410                            ; ===========================================================================
0001A410 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A414 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A418 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A41C 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A420                            ; ===========================================================================
0001A420                            
0001A420                            loc_19E90:				; XREF: off_19E80
0001A420 4AB8 F680                  		tst.l	($FFFFF680).w
0001A424 6600                       		bne.s	loc_19EA2
0001A426 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A42C 6500                       		bcs.s	loc_19EA2
0001A42E 5428 0034                  		addq.b	#2,$34(a0)
0001A432                            
0001A432                            loc_19EA2:
0001A432 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A436 4E75                       		rts	
0001A438                            ; ===========================================================================
0001A438                            
0001A438                            loc_19EA8:				; XREF: off_19E80
0001A438 4A68 0030                  		tst.w	$30(a0)
0001A43C 6A00                       		bpl.s	loc_19F10
0001A43E 4268 0030                  		clr.w	$30(a0)
0001A442 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A448 0240 000C                  		andi.w	#$C,d0
0001A44C 3200                       		move.w	d0,d1
0001A44E 5441                       		addq.w	#2,d1
0001A450 4A80                       		tst.l	d0
0001A452 6A00                       		bpl.s	loc_19EC6
0001A454 C141                       		exg	d1,d0
0001A456                            
0001A456                            loc_19EC6:
0001A456 43FA 0000                  		lea	word_19FD6(pc),a1
0001A45A 3031 0000                  		move.w	(a1,d0.w),d0
0001A45E 3231 1000                  		move.w	(a1,d1.w),d1
0001A462 3140 0030                  		move.w	d0,$30(a0)
0001A466 74FF                       		moveq	#-1,d2
0001A468 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A46C 2242                       		movea.l	d2,a1
0001A46E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A474 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A47A 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A47E 2242                       		movea.l	d2,a1
0001A480 137C 0001 0029             		move.b	#1,$29(a1)
0001A486 337C 0000 0030             		move.w	#0,$30(a1)
0001A48C 317C 0001 0032             		move.w	#1,$32(a0)
0001A492 4228 0035                  		clr.b	$35(a0)
0001A496 303C 00B7                  		move.w	#$B7,d0
0001A49A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A4A0                            
0001A4A0                            loc_19F10:
0001A4A0 4A68 0032                  		tst.w	$32(a0)
0001A4A4 6B00 0000                  		bmi.w	loc_19FA6
0001A4A8 08A8 0000 0022             		bclr	#0,$22(a0)
0001A4AE 3038 D008                  		move.w	($FFFFD008).w,d0
0001A4B2 9068 0008                  		sub.w	8(a0),d0
0001A4B6 6500                       		bcs.s	loc_19F2E
0001A4B8 08E8 0000 0022             		bset	#0,$22(a0)
0001A4BE                            
0001A4BE                            loc_19F2E:
0001A4BE 323C 002B                  		move.w	#$2B,d1
0001A4C2 343C 0014                  		move.w	#$14,d2
0001A4C6 363C 0014                  		move.w	#$14,d3
0001A4CA 3828 0008                  		move.w	8(a0),d4
0001A4CE 4EB9 0000 FF3C             		jsr	SolidObject
0001A4D4 4A44                       		tst.w	d4
0001A4D6 6E00                       		bgt.s	loc_19F50
0001A4D8                            
0001A4D8                            loc_19F48:
0001A4D8 4A28 0035                  		tst.b	$35(a0)
0001A4DC 6600                       		bne.s	loc_19F88
0001A4DE 6000                       		bra.s	loc_19F96
0001A4E0                            ; ===========================================================================
0001A4E0                            
0001A4E0                            loc_19F50:
0001A4E0 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A4E4 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A4EA 66EC                       		bne.s	loc_19F48
0001A4EC 303C 0300                  		move.w	#$300,d0
0001A4F0 0828 0000 0022             		btst	#0,$22(a0)
0001A4F6 6600                       		bne.s	loc_19F6A
0001A4F8 4440                       		neg.w	d0
0001A4FA                            
0001A4FA                            loc_19F6A:
0001A4FA 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A4FE 4A28 0035                  		tst.b	$35(a0)
0001A502 6600                       		bne.s	loc_19F88
0001A504 5328 0021                  		subq.b	#1,$21(a0)
0001A508 117C 0064 0035             		move.b	#$64,$35(a0)
0001A50E 303C 00AC                  		move.w	#$AC,d0
0001A512 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A518                            
0001A518                            loc_19F88:
0001A518 5328 0035                  		subq.b	#1,$35(a0)
0001A51C 6700                       		beq.s	loc_19F96
0001A51E 117C 0003 001C             		move.b	#3,$1C(a0)
0001A524 6000                       		bra.s	loc_19F9C
0001A526                            ; ===========================================================================
0001A526                            
0001A526                            loc_19F96:
0001A526 117C 0001 001C             		move.b	#1,$1C(a0)
0001A52C                            
0001A52C                            loc_19F9C:
0001A52C 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A530 4EF9 0000 AC42             		jmp	AnimateSprite
0001A536                            ; ===========================================================================
0001A536                            
0001A536                            loc_19FA6:
0001A536 4A28 0021                  		tst.b	$21(a0)
0001A53A 6700                       		beq.s	loc_19FBC
0001A53C 5428 0034                  		addq.b	#2,$34(a0)
0001A540 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A546 4268 0032                  		clr.w	$32(a0)
0001A54A 4E75                       		rts	
0001A54C                            ; ===========================================================================
0001A54C                            
0001A54C                            loc_19FBC:
0001A54C 117C 0006 0034             		move.b	#6,$34(a0)
0001A552 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A558 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A55E 117C 0014 0016             		move.b	#$14,$16(a0)
0001A564 4E75                       		rts	
0001A566                            ; ===========================================================================
0001A566 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A576                            ; ===========================================================================
0001A576                            
0001A576                            loc_19FE6:				; XREF: off_19E80
0001A576 70FF                       		moveq	#-1,d0
0001A578 3028 0036                  		move.w	$36(a0),d0
0001A57C 2240                       		movea.l	d0,a1
0001A57E 4A68 0030                  		tst.w	$30(a0)
0001A582 6A00                       		bpl.s	loc_1A000
0001A584 4268 0030                  		clr.w	$30(a0)
0001A588 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A58E 6100                       		bsr.s	loc_1A020
0001A590                            
0001A590                            loc_1A000:
0001A590 700F                       		moveq	#$F,d0
0001A592 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A596 6600                       		bne.s	loc_1A00A
0001A598 6100                       		bsr.s	loc_1A020
0001A59A                            
0001A59A                            loc_1A00A:
0001A59A 4A68 0032                  		tst.w	$32(a0)
0001A59E 6700                       		beq.s	locret_1A01E
0001A5A0 5528 0034                  		subq.b	#2,$34(a0)
0001A5A4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5AA 4268 0032                  		clr.w	$32(a0)
0001A5AE                            
0001A5AE                            locret_1A01E:
0001A5AE 4E75                       		rts	
0001A5B0                            ; ===========================================================================
0001A5B0                            
0001A5B0                            loc_1A020:
0001A5B0 303C 00B1                  		move.w	#$B1,d0
0001A5B4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A5BA                            ; ===========================================================================
0001A5BA                            
0001A5BA                            loc_1A02A:				; XREF: off_19E80
0001A5BA 117C 0030 0017             		move.b	#$30,$17(a0)
0001A5C0 08E8 0000 0022             		bset	#0,$22(a0)
0001A5C6 4EB9 0000 DB46             		jsr	SpeedToPos
0001A5CC 117C 0006 001A             		move.b	#6,$1A(a0)
0001A5D2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A5D8 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A5DE 6500                       		bcs.s	loc_1A070
0001A5E0 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A5E6 5428 0034                  		addq.b	#2,$34(a0)
0001A5EA 117C 0020 0017             		move.b	#$20,$17(a0)
0001A5F0 317C 0100 0010             		move.w	#$100,$10(a0)
0001A5F6 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A5FC 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A600                            
0001A600                            loc_1A070:
0001A600 6000 0000                  		bra.w	loc_1A166
0001A604                            ; ===========================================================================
0001A604                            
0001A604                            loc_1A074:				; XREF: off_19E80
0001A604 08E8 0000 0022             		bset	#0,$22(a0)
0001A60A 117C 0004 001C             		move.b	#4,$1C(a0)
0001A610 4EB9 0000 DB46             		jsr	SpeedToPos
0001A616 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A61C 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A622 6500                       		bcs.s	loc_1A09A
0001A624 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A62A                            
0001A62A                            loc_1A09A:
0001A62A 317C 0400 0010             		move.w	#$400,$10(a0)
0001A630 3028 0008                  		move.w	8(a0),d0
0001A634 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A638 6A00                       		bpl.s	loc_1A0B4
0001A63A 317C 0500 0010             		move.w	#$500,$10(a0)
0001A640 6000 0000                  		bra.w	loc_1A0F2
0001A644                            ; ===========================================================================
0001A644                            
0001A644                            loc_1A0B4:
0001A644 0440 0070                  		subi.w	#$70,d0
0001A648 6500                       		bcs.s	loc_1A0F2
0001A64A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A650 5140                       		subq.w	#8,d0
0001A652 6500                       		bcs.s	loc_1A0F2
0001A654 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A65A 5140                       		subq.w	#8,d0
0001A65C 6500                       		bcs.s	loc_1A0F2
0001A65E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A664 5140                       		subq.w	#8,d0
0001A666 6500                       		bcs.s	loc_1A0F2
0001A668 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A66E 5140                       		subq.w	#8,d0
0001A670 6500                       		bcs.s	loc_1A0F2
0001A672 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A678 0440 0038                  		subi.w	#$38,d0
0001A67C 6500                       		bcs.s	loc_1A0F2
0001A67E 4268 0010                  		clr.w	$10(a0)
0001A682                            
0001A682                            loc_1A0F2:
0001A682 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A688 6500                       		bcs.s	loc_1A110
0001A68A 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A690 317C 0240 0010             		move.w	#$240,$10(a0)
0001A696 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A69C 5428 0034                  		addq.b	#2,$34(a0)
0001A6A0                            
0001A6A0                            loc_1A110:
0001A6A0 6000                       		bra.s	loc_1A15C
0001A6A2                            ; ===========================================================================
0001A6A2                            
0001A6A2                            loc_1A112:				; XREF: off_19E80
0001A6A2 4EB9 0000 DB46             		jsr	SpeedToPos
0001A6A8 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A6AE 6500                       		bcs.s	loc_1A124
0001A6B0 4268 0010                  		clr.w	$10(a0)
0001A6B4                            
0001A6B4                            loc_1A124:
0001A6B4 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A6BA 4A68 0012                  		tst.w	$12(a0)
0001A6BE 6B00                       		bmi.s	loc_1A142
0001A6C0 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A6C6 6500                       		bcs.s	loc_1A142
0001A6C8 317C 0592 000C             		move.w	#$592,$C(a0)
0001A6CE 4268 0012                  		clr.w	$12(a0)
0001A6D2                            
0001A6D2                            loc_1A142:
0001A6D2 3028 0010                  		move.w	$10(a0),d0
0001A6D6 8068 0012                  		or.w	$12(a0),d0
0001A6DA 6600                       		bne.s	loc_1A15C
0001A6DC 5428 0034                  		addq.b	#2,$34(a0)
0001A6E0 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A6E6 117C 0001 0021             		move.b	#1,$21(a0)
0001A6EC                            
0001A6EC                            loc_1A15C:
0001A6EC 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A6F0 4EB9 0000 AC42             		jsr	AnimateSprite
0001A6F6                            
0001A6F6                            loc_1A166:
0001A6F6 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A6FC 6C00                       		bge.s	loc_1A172
0001A6FE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A702                            
0001A702                            loc_1A172:
0001A702 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A708 6C00                       		bge.s	locret_1A190
0001A70A 323C 001B                  		move.w	#$1B,d1
0001A70E 343C 0070                  		move.w	#$70,d2
0001A712 363C 0071                  		move.w	#$71,d3
0001A716 3828 0008                  		move.w	8(a0),d4
0001A71A 4EF9 0000 FF3C             		jmp	SolidObject
0001A720                            ; ===========================================================================
0001A720                            
0001A720                            locret_1A190:
0001A720 4E75                       		rts	
0001A722                            ; ===========================================================================
0001A722                            
0001A722                            loc_1A192:				; XREF: off_19E80
0001A722 217C 0001 82BC 0004        		move.l	#Map_Eggman,4(a0)
0001A72A 317C 0400 0002             		move.w	#$400,2(a0)
0001A730 117C 0000 001C             		move.b	#0,$1C(a0)
0001A736 08E8 0000 0022             		bset	#0,$22(a0)
0001A73C 4EB9 0000 DB46             		jsr	SpeedToPos
0001A742 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A748 6400                       		bcc.s	loc_1A1D0
0001A74A 317C 0180 0010             		move.w	#$180,$10(a0)
0001A750 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A756 117C 000F 0020             		move.b	#$F,$20(a0)
0001A75C 5428 0034                  		addq.b	#2,$34(a0)
0001A760                            
0001A760                            loc_1A1D0:
0001A760 6000 FF8A                  		bra.w	loc_1A15C
0001A764                            ; ===========================================================================
0001A764                            
0001A764                            loc_1A1D4:				; XREF: off_19E80
0001A764 08E8 0000 0022             		bset	#0,$22(a0)
0001A76A 4EB9 0000 DB46             		jsr	SpeedToPos
0001A770 4A68 0030                  		tst.w	$30(a0)
0001A774 6600                       		bne.s	loc_1A1FC
0001A776 4A28 0020                  		tst.b	$20(a0)
0001A77A 6600                       		bne.s	loc_1A216
0001A77C 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A782 303C 00AC                  		move.w	#$AC,d0
0001A786 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A78C                            
0001A78C                            loc_1A1FC:
0001A78C 5368 0030                  		subq.w	#1,$30(a0)
0001A790 6600                       		bne.s	loc_1A216
0001A792 4A28 0022                  		tst.b	$22(a0)
0001A796 6A00                       		bpl.s	loc_1A210
0001A798 317C 0060 0012             		move.w	#$60,$12(a0)
0001A79E 6000                       		bra.s	loc_1A216
0001A7A0                            ; ===========================================================================
0001A7A0                            
0001A7A0                            loc_1A210:
0001A7A0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7A6                            
0001A7A6                            loc_1A216:
0001A7A6 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A7AC 6D00                       		blt.s	loc_1A23A
0001A7AE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A7B4 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A7BA 4278 D014                  		clr.w	($FFFFD014).w
0001A7BE 4A68 0012                  		tst.w	$12(a0)
0001A7C2 6A00                       		bpl.s	loc_1A248
0001A7C4 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A7CA                            
0001A7CA                            loc_1A23A:
0001A7CA 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A7D0 6D00                       		blt.s	loc_1A248
0001A7D2 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A7D8                            
0001A7D8                            loc_1A248:
0001A7D8 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A7DE 6500                       		bcs.s	loc_1A260
0001A7E0 4A28 0001                  		tst.b	1(a0)
0001A7E4 6B00                       		bmi.s	loc_1A260
0001A7E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A7EC 6000 FAF4                  		bra.w	Obj85_Delete
0001A7F0                            ; ===========================================================================
0001A7F0                            
0001A7F0                            loc_1A260:
0001A7F0 6000 FEFA                  		bra.w	loc_1A15C
0001A7F4                            ; ===========================================================================
0001A7F4                            
0001A7F4                            loc_1A264:				; XREF: Obj85_Index
0001A7F4 2268 0034                  		movea.l	$34(a0),a1
0001A7F8 1011                       		move.b	(a1),d0
0001A7FA B010                       		cmp.b	(a0),d0
0001A7FC 6600 FAE4                  		bne.w	Obj85_Delete
0001A800 117C 0007 001C             		move.b	#7,$1C(a0)
0001A806 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A80C 6C00                       		bge.s	loc_1A280
0001A80E 6000                       		bra.s	loc_1A2A6
0001A810                            ; ===========================================================================
0001A810                            
0001A810                            loc_1A280:
0001A810 4A69 0010                  		tst.w	$10(a1)
0001A814 6700                       		beq.s	loc_1A28C
0001A816 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A81C                            
0001A81C                            loc_1A28C:
0001A81C 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A820 4EB9 0000 AC42             		jsr	AnimateSprite
0001A826                            
0001A826                            loc_1A296:
0001A826 2268 0034                  		movea.l	$34(a0),a1
0001A82A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A830 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A836                            
0001A836                            loc_1A2A6:
0001A836 2268 0034                  		movea.l	$34(a0),a1
0001A83A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A840 7003                       		moveq	#3,d0
0001A842 C028 0022                  		and.b	$22(a0),d0
0001A846 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A84C 8128 0001                  		or.b	d0,1(a0)
0001A850 4EF9 0000 DB6C             		jmp	DisplaySprite
0001A856                            ; ===========================================================================
0001A856                            
0001A856                            loc_1A2C6:				; XREF: Obj85_Index
0001A856 2268 0034                  		movea.l	$34(a0),a1
0001A85A 1011                       		move.b	(a1),d0
0001A85C B010                       		cmp.b	(a0),d0
0001A85E 6600 FA82                  		bne.w	Obj85_Delete
0001A862 0CA9 0001 82BC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A86A 6700                       		beq.s	loc_1A2E4
0001A86C 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A872 60C2                       		bra.s	loc_1A2A6
0001A874                            ; ===========================================================================
0001A874                            
0001A874                            loc_1A2E4:
0001A874 117C 0001 001C             		move.b	#1,$1C(a0)
0001A87A 4A29 0021                  		tst.b	$21(a1)
0001A87E 6F00                       		ble.s	loc_1A312
0001A880 117C 0006 001C             		move.b	#6,$1C(a0)
0001A886 217C 0001 82BC 0004        		move.l	#Map_Eggman,4(a0)
0001A88E 317C 0400 0002             		move.w	#$400,2(a0)
0001A894 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A898 4EB9 0000 AC42             		jsr	AnimateSprite
0001A89E 6000 FF86                  		bra.w	loc_1A296
0001A8A2                            ; ===========================================================================
0001A8A2                            
0001A8A2                            loc_1A312:
0001A8A2 4A28 0001                  		tst.b	1(a0)
0001A8A6 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A8AA 6100 D56E                  		bsr.w	BossDefeated
0001A8AE 117C 0002 0018             		move.b	#2,$18(a0)
0001A8B4 117C 0000 001C             		move.b	#0,$1C(a0)
0001A8BA 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A8C2 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A8C8 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A8CC 4EB9 0000 AC42             		jsr	AnimateSprite
0001A8D2 6000 FF52                  		bra.w	loc_1A296
0001A8D6                            ; ===========================================================================
0001A8D6                            
0001A8D6                            loc_1A346:				; XREF: Obj85_Index
0001A8D6 08E8 0000 0022             		bset	#0,$22(a0)
0001A8DC 2268 0034                  		movea.l	$34(a0),a1
0001A8E0 0CA9 0001 82BC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8E8 6700                       		beq.s	loc_1A35E
0001A8EA 6000 FF4A                  		bra.w	loc_1A2A6
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            loc_1A35E:
0001A8EE 3169 0008 0008             		move.w	8(a1),8(a0)
0001A8F4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A8FA 4A28 001E                  		tst.b	$1E(a0)
0001A8FE 6600                       		bne.s	loc_1A376
0001A900 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A906                            
0001A906                            loc_1A376:
0001A906 5328 001E                  		subq.b	#1,$1E(a0)
0001A90A 6E00                       		bgt.s	loc_1A38A
0001A90C 5228 001A                  		addq.b	#1,$1A(a0)
0001A910 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A916 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A91A                            
0001A91A                            loc_1A38A:
0001A91A 6000 FF0A                  		bra.w	loc_1A296
0001A91E                            ; ===========================================================================
0001A91E                            
0001A91E                            loc_1A38E:				; XREF: Obj85_Index
0001A91E 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A924 3038 D008                  		move.w	($FFFFD008).w,d0
0001A928 9068 0008                  		sub.w	8(a0),d0
0001A92C 6500                       		bcs.s	loc_1A3A6
0001A92E 4A28 0001                  		tst.b	1(a0)
0001A932 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A936                            
0001A936                            loc_1A3A6:
0001A936 4EF9 0000 DB6C             		jmp	DisplaySprite
0001A93C                            ; ===========================================================================
0001A93C                            
0001A93C                            loc_1A3AC:				; XREF: Obj85_Index
0001A93C 117C 0000 001A             		move.b	#0,$1A(a0)
0001A942 08E8 0000 0022             		bset	#0,$22(a0)
0001A948 2268 0034                  		movea.l	$34(a0),a1
0001A94C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A952 6600                       		bne.s	loc_1A3D0
0001A954 0CA9 0001 82BC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A95C 6700 F984                  		beq.w	Obj85_Delete
0001A960                            
0001A960                            loc_1A3D0:
0001A960 6000 FED4                  		bra.w	loc_1A2A6
0001A964                            ; ===========================================================================
0001A964                            Ani_obj85:
0001A964                            	include "_anim\obj85.asm"
0001A964                            ; ---------------------------------------------------------------------------
0001A964                            ; Animation script - Eggman (FZ)
0001A964                            ; ---------------------------------------------------------------------------
0001A964 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A966 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A96A                            		even
0001A96A                            		even
0001A96A                            
0001A96A                            Map_Eggman2:
0001A96A                            	include "_maps\Eggman2.asm"
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A                            ; Sprite mappings - Eggman (FZ)
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A96C 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A96E 06                         byte_1A3DE:	dc.b 6
0001A96F E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A974 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A979 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A97E FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A983 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A988 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A98D 06                         byte_1A3FD:	dc.b 6
0001A98E E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A993 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A998 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A99D FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9A2 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9A7 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9AC                            		even
0001A9AC                            		even
0001A9AC                            
0001A9AC                            Map_FZBoss:
0001A9AC                            	include "_maps\FZ boss.asm"
0001A9AC                            ; ---------------------------------------------------------------------------
0001A9AC                            ; Sprite mappings - boss (FZ)
0001A9AC                            ; ---------------------------------------------------------------------------
0001A9AC 0000                       		dc.w byte_1A422-Map_FZBoss
0001A9AE 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A9B0 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A9B2 02                         byte_1A422:	dc.b 2
0001A9B3 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A9B8 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A9BD 03                         byte_1A42D:	dc.b 3
0001A9BE 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A9C3 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A9C8 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A9CD 02                         byte_1A43D:	dc.b 2
0001A9CE 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A9D3 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A9D8                            		even
0001A9D8                            		even
0001A9D8                            
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            Obj84_Delete:
0001A9D8 4EF9 0000 DBA8             		jmp	DeleteObject
0001A9DE                            ; ===========================================================================
0001A9DE                            ; ---------------------------------------------------------------------------
0001A9DE                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A9DE                            ; ---------------------------------------------------------------------------
0001A9DE                            
0001A9DE                            Obj84:					; XREF: Obj_Index
0001A9DE 7000                       		moveq	#0,d0
0001A9E0 1028 0024                  		move.b	$24(a0),d0
0001A9E4 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A9E8 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A9EC                            ; ===========================================================================
0001A9EC 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A9EE 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A9F0 0000                       		dc.w loc_1A57E-Obj84_Index
0001A9F2                            
0001A9F2 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A9F6 2550 0620                  		dc.w $2550, $620
0001A9FA 2490 04C0                  		dc.w $2490, $4C0
0001A9FE 2510 04C0                  		dc.w $2510, $4C0
0001AA02                            ; ===========================================================================
0001AA02                            
0001AA02                            Obj84_Main:				; XREF: Obj84_Index
0001AA02 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA06 7000                       		moveq	#0,d0
0001AA08 1028 0028                  		move.b	$28(a0),d0
0001AA0C D040                       		add.w	d0,d0
0001AA0E D2C0                       		adda.w	d0,a1
0001AA10 117C 0004 0001             		move.b	#4,1(a0)
0001AA16 08E8 0007 0001             		bset	#7,1(a0)
0001AA1C 08E8 0004 0001             		bset	#4,1(a0)
0001AA22 317C 0300 0002             		move.w	#$300,2(a0)
0001AA28 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA30 3159 0008                  		move.w	(a1)+,8(a0)
0001AA34 3151 000C                  		move.w	(a1),$C(a0)
0001AA38 3159 0038                  		move.w	(a1)+,$38(a0)
0001AA3C 117C 0020 0016             		move.b	#$20,$16(a0)
0001AA42 117C 0060 0017             		move.b	#$60,$17(a0)
0001AA48 117C 0020 0019             		move.b	#$20,$19(a0)
0001AA4E 117C 0060 0016             		move.b	#$60,$16(a0)
0001AA54 117C 0003 0018             		move.b	#3,$18(a0)
0001AA5A 5428 0024                  		addq.b	#2,$24(a0)
0001AA5E                            
0001AA5E                            loc_1A4CE:				; XREF: Obj84_Index
0001AA5E 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AA64 6F00                       		ble.s	loc_1A4DC
0001AA66 08E8 0001 0001             		bset	#1,1(a0)
0001AA6C                            
0001AA6C                            loc_1A4DC:
0001AA6C 42A8 003C                  		clr.l	$3C(a0)
0001AA70 4A28 0029                  		tst.b	$29(a0)
0001AA74 6700                       		beq.s	loc_1A4EA
0001AA76 5428 0024                  		addq.b	#2,$24(a0)
0001AA7A                            
0001AA7A                            loc_1A4EA:
0001AA7A 2028 003C                  		move.l	$3C(a0),d0
0001AA7E 2228 0038                  		move.l	$38(a0),d1
0001AA82 D280                       		add.l	d0,d1
0001AA84 4841                       		swap	d1
0001AA86 3141 000C                  		move.w	d1,$C(a0)
0001AA8A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AA90 6600                       		bne.s	loc_1A524
0001AA92 4A68 0030                  		tst.w	$30(a0)
0001AA96 6A00                       		bpl.s	loc_1A524
0001AA98 70F6                       		moveq	#-$A,d0
0001AA9A 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAA0 6F00                       		ble.s	loc_1A514
0001AAA2 700E                       		moveq	#$E,d0
0001AAA4                            
0001AAA4                            loc_1A514:
0001AAA4 D240                       		add.w	d0,d1
0001AAA6 2268 0034                  		movea.l	$34(a0),a1
0001AAAA 3341 000C                  		move.w	d1,$C(a1)
0001AAAE 3368 0008 0008             		move.w	8(a0),8(a1)
0001AAB4                            
0001AAB4                            loc_1A524:
0001AAB4 323C 002B                  		move.w	#$2B,d1
0001AAB8 343C 0060                  		move.w	#$60,d2
0001AABC 363C 0061                  		move.w	#$61,d3
0001AAC0 3828 0008                  		move.w	8(a0),d4
0001AAC4 4EB9 0000 FF3C             		jsr	SolidObject
0001AACA 7000                       		moveq	#0,d0
0001AACC 3228 003C                  		move.w	$3C(a0),d1
0001AAD0 6A00                       		bpl.s	loc_1A550
0001AAD2 4441                       		neg.w	d1
0001AAD4 5141                       		subq.w	#8,d1
0001AAD6 6500                       		bcs.s	loc_1A55C
0001AAD8 5200                       		addq.b	#1,d0
0001AADA E841                       		asr.w	#4,d1
0001AADC D041                       		add.w	d1,d0
0001AADE 6000                       		bra.s	loc_1A55C
0001AAE0                            ; ===========================================================================
0001AAE0                            
0001AAE0                            loc_1A550:
0001AAE0 0441 0027                  		subi.w	#$27,d1
0001AAE4 6500                       		bcs.s	loc_1A55C
0001AAE6 5200                       		addq.b	#1,d0
0001AAE8 E841                       		asr.w	#4,d1
0001AAEA D041                       		add.w	d1,d0
0001AAEC                            
0001AAEC                            loc_1A55C:
0001AAEC 1140 001A                  		move.b	d0,$1A(a0)
0001AAF0 3038 D008                  		move.w	($FFFFD008).w,d0
0001AAF4 9068 0008                  		sub.w	8(a0),d0
0001AAF8 6B00                       		bmi.s	loc_1A578
0001AAFA 0440 0140                  		subi.w	#$140,d0
0001AAFE 6B00                       		bmi.s	loc_1A578
0001AB00 4A28 0001                  		tst.b	1(a0)
0001AB04 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB08                            
0001AB08                            loc_1A578:
0001AB08 4EF9 0000 DB6C             		jmp	DisplaySprite
0001AB0E                            ; ===========================================================================
0001AB0E                            
0001AB0E                            loc_1A57E:				; XREF: Obj84_Index
0001AB0E 7000                       		moveq	#0,d0
0001AB10 1028 0028                  		move.b	$28(a0),d0
0001AB14 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB18 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB1C 6000 FF5C                  		bra.w	loc_1A4EA
0001AB20                            ; ===========================================================================
0001AB20 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB22 0000                       		dc.w loc_1A598-off_1A590
0001AB24 0000                       		dc.w loc_1A604-off_1A590
0001AB26 0000                       		dc.w loc_1A604-off_1A590
0001AB28                            ; ===========================================================================
0001AB28                            
0001AB28                            loc_1A598:				; XREF: off_1A590
0001AB28 4A28 0029                  		tst.b	$29(a0)
0001AB2C 6600                       		bne.s	loc_1A5D4
0001AB2E 2268 0034                  		movea.l	$34(a0),a1
0001AB32 4A29 0021                  		tst.b	$21(a1)
0001AB36 6600                       		bne.s	loc_1A5B4
0001AB38 6100 D2E0                  		bsr.w	BossDefeated
0001AB3C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AB44                            
0001AB44                            loc_1A5B4:
0001AB44 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AB4C 6400                       		bcc.s	locret_1A602
0001AB4E 42A8 003C                  		clr.l	$3C(a0)
0001AB52 2268 0034                  		movea.l	$34(a0),a1
0001AB56 5369 0032                  		subq.w	#1,$32(a1)
0001AB5A 4269 0030                  		clr.w	$30(a1)
0001AB5E 5528 0024                  		subq.b	#2,$24(a0)
0001AB62 4E75                       		rts	
0001AB64                            ; ===========================================================================
0001AB64                            
0001AB64                            loc_1A5D4:
0001AB64 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AB6A 6C00                       		bge.s	loc_1A5E4
0001AB6C 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AB74                            
0001AB74                            loc_1A5E4:
0001AB74 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AB7C 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AB82 6E00                       		bgt.s	locret_1A602
0001AB84 4268 003E                  		clr.w	$3E(a0)
0001AB88 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AB8E 4228 0029                  		clr.b	$29(a0)
0001AB92                            
0001AB92                            locret_1A602:
0001AB92 4E75                       		rts	
0001AB94                            ; ===========================================================================
0001AB94                            
0001AB94                            loc_1A604:				; XREF: off_1A590
0001AB94 08E8 0001 0001             		bset	#1,1(a0)
0001AB9A 4A28 0029                  		tst.b	$29(a0)
0001AB9E 6600                       		bne.s	loc_1A646
0001ABA0 2268 0034                  		movea.l	$34(a0),a1
0001ABA4 4A29 0021                  		tst.b	$21(a1)
0001ABA8 6600                       		bne.s	loc_1A626
0001ABAA 6100 D26E                  		bsr.w	BossDefeated
0001ABAE 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001ABB6                            
0001ABB6                            loc_1A626:
0001ABB6 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001ABBE 6400                       		bcc.s	locret_1A674
0001ABC0 42A8 003C                  		clr.l	$3C(a0)
0001ABC4 2268 0034                  		movea.l	$34(a0),a1
0001ABC8 5369 0032                  		subq.w	#1,$32(a1)
0001ABCC 4269 0030                  		clr.w	$30(a1)
0001ABD0 5528 0024                  		subq.b	#2,$24(a0)
0001ABD4 4E75                       		rts	
0001ABD6                            ; ===========================================================================
0001ABD6                            
0001ABD6                            loc_1A646:
0001ABD6 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001ABDC 6D00                       		blt.s	loc_1A656
0001ABDE 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001ABE6                            
0001ABE6                            loc_1A656:
0001ABE6 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001ABEE 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001ABF4 6D00                       		blt.s	locret_1A674
0001ABF6 4268 003E                  		clr.w	$3E(a0)
0001ABFA 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC00 4228 0029                  		clr.b	$29(a0)
0001AC04                            
0001AC04                            locret_1A674:
0001AC04 4E75                       		rts	
0001AC06                            ; ===========================================================================
0001AC06                            ; ---------------------------------------------------------------------------
0001AC06                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC06                            ; ---------------------------------------------------------------------------
0001AC06                            Map_obj84:
0001AC06                            	include "_maps\obj84.asm"
0001AC06                            ; ---------------------------------------------------------------------------
0001AC06                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC06                            ; ---------------------------------------------------------------------------
0001AC06 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC0A 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC0E 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC12 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC16 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC1A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC1E 06                         byte_1A68E:	dc.b 6
0001AC1F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC24 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC29 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC2E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC33 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC38 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC3D 08                         byte_1A6AD:	dc.b 8
0001AC3E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC43 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC48 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC4D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC52 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC57 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC5C D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AC61 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AC66 0A                         byte_1A6D6:	dc.b $A
0001AC67 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC6C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC71 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC76 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC7B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC80 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC85 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AC8A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AC8F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AC94 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AC99 0C                         byte_1A709:	dc.b $C
0001AC9A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC9F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACA4 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACA9 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACAE B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACB3 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACB8 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACBD D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACC2 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACC7 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACCC 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ACD1 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ACD6 0D                         byte_1A746:	dc.b $D
0001ACD7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACDC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACE1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACE6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACEB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACF0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACF5 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACFA D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACFF F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD04 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD09 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD0E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD13 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD18 0E                         byte_1A788:	dc.b $E
0001AD19 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD1E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD23 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD28 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD2D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD32 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD37 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD3C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD41 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD46 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD4B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD50 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD55 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD5A 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AD5F 02                         byte_1A7CF:	dc.b 2
0001AD60 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AD65 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AD6A                            		even
0001AD6A                            		even
0001AD6A                            
0001AD6A                            ; ===========================================================================
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A                            ; Object 86 - energy balls (FZ)
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A                            
0001AD6A                            Obj86:					; XREF: Obj_Index
0001AD6A 7000                       		moveq	#0,d0
0001AD6C 1028 0024                  		move.b	$24(a0),d0
0001AD70 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AD74 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AD78                            ; ===========================================================================
0001AD78 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AD7A 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AD7C 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AD7E 0000                       		dc.w loc_1A962-Obj86_Index
0001AD80 0000                       		dc.w loc_1A982-Obj86_Index
0001AD82                            ; ===========================================================================
0001AD82                            
0001AD82                            Obj86_Main:				; XREF: Obj86_Index
0001AD82 317C 2588 0008             		move.w	#$2588,8(a0)
0001AD88 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AD8E 317C 0300 0002             		move.w	#$300,2(a0)
0001AD94 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AD9C 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADA2 117C 0003 0018             		move.b	#3,$18(a0)
0001ADA8 117C 0008 0017             		move.b	#8,$17(a0)
0001ADAE 117C 0008 0016             		move.b	#8,$16(a0)
0001ADB4 117C 0004 0001             		move.b	#4,1(a0)
0001ADBA 08E8 0007 0001             		bset	#7,1(a0)
0001ADC0 5428 0024                  		addq.b	#2,$24(a0)
0001ADC4                            
0001ADC4                            Obj86_Generator:			; XREF: Obj86_Index
0001ADC4 2268 0034                  		movea.l	$34(a0),a1
0001ADC8 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001ADCE 6600                       		bne.s	loc_1A850
0001ADD0 10BC 003F                  		move.b	#$3F,(a0)
0001ADD4 117C 0000 0024             		move.b	#0,$24(a0)
0001ADDA 4EF9 0000 DB6C             		jmp	DisplaySprite
0001ADE0                            ; ===========================================================================
0001ADE0                            
0001ADE0                            loc_1A850:
0001ADE0 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADE6 4A28 0029                  		tst.b	$29(a0)
0001ADEA 6700                       		beq.s	loc_1A86C
0001ADEC 5428 0024                  		addq.b	#2,$24(a0)
0001ADF0 117C 0001 001C             		move.b	#1,$1C(a0)
0001ADF6 117C 003E 0028             		move.b	#$3E,$28(a0)
0001ADFC                            
0001ADFC                            loc_1A86C:
0001ADFC 323C 0013                  		move.w	#$13,d1
0001AE00 343C 0008                  		move.w	#8,d2
0001AE04 363C 0011                  		move.w	#$11,d3
0001AE08 3828 0008                  		move.w	8(a0),d4
0001AE0C 4EB9 0000 FF3C             		jsr	SolidObject
0001AE12 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE16 9068 0008                  		sub.w	8(a0),d0
0001AE1A 6B00                       		bmi.s	loc_1A89A
0001AE1C 0440 0140                  		subi.w	#$140,d0
0001AE20 6B00                       		bmi.s	loc_1A89A
0001AE22 4A28 0001                  		tst.b	1(a0)
0001AE26 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE2A                            
0001AE2A                            loc_1A89A:
0001AE2A 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE2E 4EB9 0000 AC42             		jsr	AnimateSprite
0001AE34 4EF9 0000 DB6C             		jmp	DisplaySprite
0001AE3A                            ; ===========================================================================
0001AE3A                            
0001AE3A                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AE3A 4A28 0029                  		tst.b	$29(a0)
0001AE3E 6700 0000                  		beq.w	loc_1A954
0001AE42 4228 0029                  		clr.b	$29(a0)
0001AE46 D068 0030                  		add.w	$30(a0),d0
0001AE4A 0240 001E                  		andi.w	#$1E,d0
0001AE4E D4C0                       		adda.w	d0,a2
0001AE50 5868 0030                  		addq.w	#4,$30(a0)
0001AE54 4268 0032                  		clr.w	$32(a0)
0001AE58 7403                       		moveq	#3,d2
0001AE5A                            
0001AE5A                            Obj86_Loop:
0001AE5A 4EB9 0000 E008             		jsr	SingleObjLoad2
0001AE60 6600 0000                  		bne.w	loc_1A954
0001AE64 12BC 0086                  		move.b	#$86,(a1)
0001AE68 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE6E 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AE74 137C 0008 0024             		move.b	#8,$24(a1)
0001AE7A 337C 2300 0002             		move.w	#$2300,2(a1)
0001AE80 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AE88 137C 000C 0016             		move.b	#$C,$16(a1)
0001AE8E 137C 000C 0017             		move.b	#$C,$17(a1)
0001AE94 137C 0000 0020             		move.b	#0,$20(a1)
0001AE9A 137C 0003 0018             		move.b	#3,$18(a1)
0001AEA0 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AEA6 137C 0004 0001             		move.b	#4,1(a1)
0001AEAC 08E9 0007 0001             		bset	#7,1(a1)
0001AEB2 2348 0034                  		move.l	a0,$34(a1)
0001AEB6 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AEBC 3228 0032                  		move.w	$32(a0),d1
0001AEC0 C3FC FFB1                  		muls.w	#-$4F,d1
0001AEC4 0641 2578                  		addi.w	#$2578,d1
0001AEC8 0240 001F                  		andi.w	#$1F,d0
0001AECC 0440 0010                  		subi.w	#$10,d0
0001AED0 D041                       		add.w	d1,d0
0001AED2 3340 0030                  		move.w	d0,$30(a1)
0001AED6 5268 0032                  		addq.w	#1,$32(a0)
0001AEDA 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AEE0 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AEE4                            
0001AEE4                            loc_1A954:
0001AEE4 4A68 0032                  		tst.w	$32(a0)
0001AEE8 6600                       		bne.s	loc_1A95E
0001AEEA 5428 0024                  		addq.b	#2,$24(a0)
0001AEEE                            
0001AEEE                            loc_1A95E:
0001AEEE 6000 FF0C                  		bra.w	loc_1A86C
0001AEF2                            ; ===========================================================================
0001AEF2                            
0001AEF2                            loc_1A962:				; XREF: Obj86_Index
0001AEF2 117C 0002 001C             		move.b	#2,$1C(a0)
0001AEF8 4A68 0038                  		tst.w	$38(a0)
0001AEFC 6600                       		bne.s	loc_1A97E
0001AEFE 117C 0002 0024             		move.b	#2,$24(a0)
0001AF04 2268 0034                  		movea.l	$34(a0),a1
0001AF08 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF0E                            
0001AF0E                            loc_1A97E:
0001AF0E 6000 FEEC                  		bra.w	loc_1A86C
0001AF12                            ; ===========================================================================
0001AF12                            
0001AF12                            loc_1A982:				; XREF: Obj86_Index
0001AF12 7000                       		moveq	#0,d0
0001AF14 1028 0025                  		move.b	$25(a0),d0
0001AF18 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF1C 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF20 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF24 4EB9 0000 AC42             		jsr	AnimateSprite
0001AF2A 4EF9 0000 DB6C             		jmp	DisplaySprite
0001AF30                            ; ===========================================================================
0001AF30 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF32 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF34 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF36                            ; ===========================================================================
0001AF36                            
0001AF36                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF36 3028 0030                  		move.w	$30(a0),d0
0001AF3A 9068 0008                  		sub.w	8(a0),d0
0001AF3E E940                       		asl.w	#4,d0
0001AF40 3140 0010                  		move.w	d0,$10(a0)
0001AF44 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AF4A 5428 0025                  		addq.b	#2,$25(a0)
0001AF4E 4E75                       		rts	
0001AF50                            ; ===========================================================================
0001AF50                            
0001AF50                            loc_1A9C0:				; XREF: Obj86_Index2
0001AF50 4A68 0010                  		tst.w	$10(a0)
0001AF54 6700                       		beq.s	loc_1A9E6
0001AF56 4EB9 0000 DB46             		jsr	SpeedToPos
0001AF5C 3028 0008                  		move.w	8(a0),d0
0001AF60 9068 0030                  		sub.w	$30(a0),d0
0001AF64 6400                       		bcc.s	loc_1A9E6
0001AF66 4268 0010                  		clr.w	$10(a0)
0001AF6A D168 0008                  		add.w	d0,8(a0)
0001AF6E 2268 0034                  		movea.l	$34(a0),a1
0001AF72 5369 0032                  		subq.w	#1,$32(a1)
0001AF76                            
0001AF76                            loc_1A9E6:
0001AF76 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF7C 5368 0028                  		subq.w	#1,$28(a0)
0001AF80 6600                       		bne.s	locret_1AA1C
0001AF82 5428 0025                  		addq.b	#2,$25(a0)
0001AF86 117C 0001 001C             		move.b	#1,$1C(a0)
0001AF8C 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AF92 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AF98 7000                       		moveq	#0,d0
0001AF9A 3038 D008                  		move.w	($FFFFD008).w,d0
0001AF9E 9068 0008                  		sub.w	8(a0),d0
0001AFA2 3140 0010                  		move.w	d0,$10(a0)
0001AFA6 317C 0140 0012             		move.w	#$140,$12(a0)
0001AFAC                            
0001AFAC                            locret_1AA1C:
0001AFAC 4E75                       		rts	
0001AFAE                            ; ===========================================================================
0001AFAE                            
0001AFAE                            loc_1AA1E:				; XREF: Obj86_Index2
0001AFAE 4EB9 0000 DB46             		jsr	SpeedToPos
0001AFB4 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AFBA 6400                       		bcc.s	loc_1AA34
0001AFBC 5368 0028                  		subq.w	#1,$28(a0)
0001AFC0 6700                       		beq.s	loc_1AA34
0001AFC2 4E75                       		rts	
0001AFC4                            ; ===========================================================================
0001AFC4                            
0001AFC4                            loc_1AA34:
0001AFC4 2268 0034                  		movea.l	$34(a0),a1
0001AFC8 5369 0038                  		subq.w	#1,$38(a1)
0001AFCC 6000 FA0A                  		bra.w	Obj84_Delete
0001AFD0                            ; ===========================================================================
0001AFD0                            Ani_obj86:
0001AFD0                            	include "_anim\obj86.asm"
0001AFD0                            ; ---------------------------------------------------------------------------
0001AFD0                            ; Animation script - energy ball launcher (FZ)
0001AFD0                            ; ---------------------------------------------------------------------------
0001AFD0 0000                       		dc.w byte_1AA46-Ani_obj86
0001AFD2 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AFD4 0000                       		dc.w byte_1AA50-Ani_obj86
0001AFD6 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AFDA 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AFE0 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AFE6                            		even
0001AFE6                            		even
0001AFE6                            
0001AFE6                            ; ---------------------------------------------------------------------------
0001AFE6                            ; Sprite mappings - energy ball	launcher (FZ)
0001AFE6                            ; ---------------------------------------------------------------------------
0001AFE6                            Map_obj86:
0001AFE6                            	include "_maps\obj86.asm"
0001AFE6                            ; ---------------------------------------------------------------------------
0001AFE6                            ; Sprite mappings - energy ball	launcher (FZ)
0001AFE6                            ; ---------------------------------------------------------------------------
0001AFE6 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AFEA 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AFEE 01                         byte_1AA5E:	dc.b 1
0001AFEF F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AFF4 01                         byte_1AA64:	dc.b 1
0001AFF5 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AFFA 01                         byte_1AA6A:	dc.b 1
0001AFFB F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B000 01                         byte_1AA70:	dc.b 1
0001B001 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B006                            		even
0001B006                            		even
0001B006                            
0001B006                            Ani_obj86a:
0001B006                            	include "_anim\obj86a.asm"
0001B006                            ; ---------------------------------------------------------------------------
0001B006                            ; Animation script - energy balls (FZ)
0001B006                            ; ---------------------------------------------------------------------------
0001B006 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B008 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B00A 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B019 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B028 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B02C 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B036                            		even
0001B036                            		even
0001B036                            
0001B036                            ; ---------------------------------------------------------------------------
0001B036                            ; Sprite mappings - energy balls (FZ)
0001B036                            ; ---------------------------------------------------------------------------
0001B036                            Map_obj86a:
0001B036                            	include "_maps\obj86a.asm"
0001B036                            ; ---------------------------------------------------------------------------
0001B036                            ; Sprite mappings - energy balls (FZ)
0001B036                            ; ---------------------------------------------------------------------------
0001B036 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B03A 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B03E 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B042 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B046 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B04A 0000                       		dc.w byte_1AB20-Map_obj86a
0001B04C 02                         byte_1AABC:	dc.b 2
0001B04D F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B052 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B057 02                         byte_1AAC7:	dc.b 2
0001B058 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B05D F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B062 02                         byte_1AAD2:	dc.b 2
0001B063 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B068 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B06D 02                         byte_1AADD:	dc.b 2
0001B06E F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B073 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B078 02                         byte_1AAE8:	dc.b 2
0001B079 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B07E 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B083 02                         byte_1AAF3:	dc.b 2
0001B084 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B089 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B08E 01                         byte_1AAFE:	dc.b 1
0001B08F F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B094 01                         byte_1AB04:	dc.b 1
0001B095 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B09A 02                         byte_1AB0A:	dc.b 2
0001B09B F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B0A0 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B0A5 02                         byte_1AB15:	dc.b 2
0001B0A6 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B0AB F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B0B0 00                         byte_1AB20:	dc.b 0
0001B0B2 00                         		even
0001B0B2 00                         		even
0001B0B2                            
0001B0B2                            ; ===========================================================================
0001B0B2                            ; ---------------------------------------------------------------------------
0001B0B2                            ; Object 3E - prison capsule
0001B0B2                            ; ---------------------------------------------------------------------------
0001B0B2                            
0001B0B2                            Obj3E:					; XREF: Obj_Index
0001B0B2 7000                       		moveq	#0,d0
0001B0B4 1028 0024                  		move.b	$24(a0),d0
0001B0B8 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B0BC 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B0C0 3028 0008                  		move.w	8(a0),d0
0001B0C4 0240 FF80                  		andi.w	#$FF80,d0
0001B0C8 3238 F700                  		move.w	($FFFFF700).w,d1
0001B0CC 0441 0080                  		subi.w	#$80,d1
0001B0D0 0241 FF80                  		andi.w	#$FF80,d1
0001B0D4 9041                       		sub.w	d1,d0
0001B0D6 0C40 0280                  		cmpi.w	#$280,d0
0001B0DA 6200                       		bhi.s	Obj3E_Delete
0001B0DC 4EF9 0000 DB6C             		jmp	DisplaySprite
0001B0E2                            ; ===========================================================================
0001B0E2                            
0001B0E2                            Obj3E_Delete:
0001B0E2 4EF9 0000 DBA8             		jmp	DeleteObject
0001B0E8                            ; ===========================================================================
0001B0E8 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B0EA 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B0EC 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B0EE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B0F0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B0F2 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B0F4 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B0F6 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B0F8                            
0001B0F8 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B0FC 040C 0501                  		dc.b 4,	$C, 5, 1
0001B100 0610 0403                  		dc.b 6,	$10, 4,	3
0001B104 0810 0305                  		dc.b 8,	$10, 3,	5
0001B108                            ; ===========================================================================
0001B108                            
0001B108                            Obj3E_Main:				; XREF: Obj3E_Index
0001B108 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B110 317C 049D 0002             		move.w	#$49D,2(a0)
0001B116 117C 0004 0001             		move.b	#4,1(a0)
0001B11C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B122 7000                       		moveq	#0,d0
0001B124 1028 0028                  		move.b	$28(a0),d0
0001B128 E548                       		lsl.w	#2,d0
0001B12A 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B12E 1159 0024                  		move.b	(a1)+,$24(a0)
0001B132 1159 0019                  		move.b	(a1)+,$19(a0)
0001B136 1159 0018                  		move.b	(a1)+,$18(a0)
0001B13A 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B13E 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B142 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B144 117C 0006 0020             		move.b	#6,$20(a0)
0001B14A 117C 0008 0021             		move.b	#8,$21(a0)
0001B150                            
0001B150                            Obj3E_Not02:
0001B150 4E75                       		rts	
0001B152                            ; ===========================================================================
0001B152                            
0001B152                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B152 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B158 6700                       		beq.s	Obj3E_ChkOpened
0001B15A 323C 002B                  		move.w	#$2B,d1
0001B15E 343C 0018                  		move.w	#$18,d2
0001B162 363C 0018                  		move.w	#$18,d3
0001B166 3828 0008                  		move.w	8(a0),d4
0001B16A 4EF9 0000 FF3C             		jmp	SolidObject
0001B170                            ; ===========================================================================
0001B170                            
0001B170                            Obj3E_ChkOpened:
0001B170 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B174 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B176 4228 0025                  		clr.b	$25(a0)
0001B17A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B180 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B186                            
0001B186                            Obj3E_DoOpen:
0001B186 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B18C 4E75                       		rts	
0001B18E                            ; ===========================================================================
0001B18E                            
0001B18E                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B18E 323C 0017                  		move.w	#$17,d1
0001B192 343C 0008                  		move.w	#8,d2
0001B196 363C 0008                  		move.w	#8,d3
0001B19A 3828 0008                  		move.w	8(a0),d4
0001B19E 4EB9 0000 FF3C             		jsr	SolidObject
0001B1A4 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B1AA 4EB9 0000 AC42             		jsr	AnimateSprite
0001B1B0 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B1B6 4A28 0025                  		tst.b	$25(a0)
0001B1BA 6700                       		beq.s	locret_1AC60
0001B1BC 5068 000C                  		addq.w	#8,$C(a0)
0001B1C0 117C 000A 0024             		move.b	#$A,$24(a0)
0001B1C6 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B1CC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B1D0 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B1D4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B1DA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B1E0 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B1E2 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B1E8 6000                       		bra.s	Obj3E_ContinueCode
0001B1EA                            
0001B1EA                            Obj3E_MoveLeft:
0001B1EA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B1F0                            
0001B1F0                            Obj3E_ContinueCode:
0001B1F0 4228 0025                  		clr.b	$25(a0)
0001B1F4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1FA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B200                            
0001B200                            locret_1AC60:
0001B200 4E75                       		rts	
0001B202                            ; ===========================================================================
0001B202                            
0001B202                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B202 7007                       		moveq	#7,d0
0001B204 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B208 6600                       		bne.s	loc_1ACA0
0001B20A 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001B210 6600                       		bne.s	loc_1ACA0
0001B212 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B216 3368 0008 0008             		move.w	8(a0),8(a1)
0001B21C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B222 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B228 7200                       		moveq	#0,d1
0001B22A 1200                       		move.b	d0,d1
0001B22C E409                       		lsr.b	#2,d1
0001B22E 0441 0020                  		subi.w	#$20,d1
0001B232 D369 0008                  		add.w	d1,8(a1)
0001B236 E048                       		lsr.w	#8,d0
0001B238 E608                       		lsr.b	#3,d0
0001B23A D169 000C                  		add.w	d0,$C(a1)
0001B23E                            
0001B23E                            loc_1ACA0:
0001B23E 5368 001E                  		subq.w	#1,$1E(a0)
0001B242 6700                       		beq.s	Obj3E_MakeAnimal
0001B244 4E75                       		rts	
0001B246                            ; ===========================================================================
0001B246                            
0001B246                            Obj3E_MakeAnimal:
0001B246 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B24C 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B252 117C 0006 001A             		move.b	#6,$1A(a0)
0001B258 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B25E 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B264 7C07                       		moveq	#7,d6
0001B266 3A3C 009A                  		move.w	#$9A,d5
0001B26A 78E4                       		moveq	#-$1C,d4
0001B26C                            
0001B26C                            Obj3E_Loop:
0001B26C 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001B272 6600                       		bne.s	locret_1ACF8
0001B274 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B278 3368 0008 0008             		move.w	8(a0),8(a1)
0001B27E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B284 D969 0008                  		add.w	d4,8(a1)
0001B288 5E44                       		addq.w	#7,d4
0001B28A 3345 0036                  		move.w	d5,$36(a1)
0001B28E 5145                       		subq.w	#8,d5
0001B290 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B294                            
0001B294                            locret_1ACF8:
0001B294 4E75                       		rts	
0001B296                            ; ===========================================================================
0001B296                            
0001B296                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B296 7007                       		moveq	#7,d0
0001B298 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B29C 6600                       		bne.s	loc_1AD38
0001B29E 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001B2A4 6600                       		bne.s	loc_1AD38
0001B2A6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2AA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2B6 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B2BC 0240 001F                  		andi.w	#$1F,d0
0001B2C0 5D40                       		subq.w	#6,d0
0001B2C2 4A41                       		tst.w	d1
0001B2C4 6A00                       		bpl.s	loc_1AD2E
0001B2C6 4440                       		neg.w	d0
0001B2C8                            
0001B2C8                            loc_1AD2E:
0001B2C8 D169 0008                  		add.w	d0,8(a1)
0001B2CC 337C 000C 0036             		move.w	#$C,$36(a1)
0001B2D2                            
0001B2D2                            loc_1AD38:
0001B2D2 5368 001E                  		subq.w	#1,$1E(a0)
0001B2D6 6600                       		bne.s	locret_1AD48
0001B2D8 5428 0024                  		addq.b	#2,$24(a0)
0001B2DC 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B2E2                            
0001B2E2                            locret_1AD48:
0001B2E2 4E75                       		rts	
0001B2E4                            ; ===========================================================================
0001B2E4                            
0001B2E4                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B2E4 703E                       		moveq	#$3E,d0
0001B2E6 7228                       		moveq	#$28,d1
0001B2E8 7440                       		moveq	#$40,d2
0001B2EA 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B2EE                            
0001B2EE                            Obj3E_FindObj28:
0001B2EE B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B2F0 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B2F2 D2C2                       		adda.w	d2,a1		; next object RAM
0001B2F4 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B2F8                            
0001B2F8 4EB9 0000 F1F8             		jsr	GotThroughAct
0001B2FE 4EF9 0000 DBA8             		jmp	DeleteObject
0001B304                            ; ===========================================================================
0001B304                            
0001B304                            Obj3E_Obj28Found:
0001B304 4E75                       		rts	
0001B306                            ; ===========================================================================
0001B306                            Ani_obj3E:
0001B306                            	include "_anim\obj3E.asm"
0001B306                            ; ---------------------------------------------------------------------------
0001B306                            ; Animation script - prison capsule
0001B306                            ; ---------------------------------------------------------------------------
0001B306 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B308 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B30A 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B30E                            		even
0001B30E                            		even
0001B30E                            
0001B30E                            ; ---------------------------------------------------------------------------
0001B30E                            ; Sprite mappings - prison capsule
0001B30E                            ; ---------------------------------------------------------------------------
0001B30E                            Map_obj3E:
0001B30E                            	include "_maps\obj3E.asm"
0001B30E                            ; ---------------------------------------------------------------------------
0001B30E                            ; Sprite mappings - prison capsule
0001B30E                            ; ---------------------------------------------------------------------------
0001B30E 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B312 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B316 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B31A 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B31C 07                         byte_1AD82:	dc.b 7
0001B31D E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B322 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B327 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B32C F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B331 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B336 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B33B 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B340 01                         byte_1ADA6:	dc.b 1
0001B341 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B346 06                         byte_1ADAC:	dc.b 6
0001B347 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B34C 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B351 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B356 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B35B 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B360 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B365 01                         byte_1ADCB:	dc.b 1
0001B366 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B36B 02                         byte_1ADD1:	dc.b 2
0001B36C E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B371 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B376 01                         byte_1ADDC:	dc.b 1
0001B377 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B37C 00                         byte_1ADE2:	dc.b 0
0001B37E 00                         		even
0001B37E 00                         		even
0001B37E                            
0001B37E                            ; ---------------------------------------------------------------------------
0001B37E                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B37E                            ; ---------------------------------------------------------------------------
0001B37E                            
0001B37E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B37E                            
0001B37E                            
0001B37E                            TouchResponse:				; XREF: Obj01
0001B37E 4E71                       		nop	
0001B380 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B384 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B388 5142                       		subq.w	#8,d2
0001B38A 7A00                       		moveq	#0,d5
0001B38C 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B390 5705                       		subq.b	#3,d5
0001B392 9645                       		sub.w	d5,d3
0001B394 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B39A 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B39C 0643 000C                  		addi.w	#$C,d3
0001B3A0 7A0A                       		moveq	#$A,d5
0001B3A2                            
0001B3A2                            Touch_NoDuck:
0001B3A2 383C 0010                  		move.w	#$10,d4
0001B3A6 DA45                       		add.w	d5,d5
0001B3A8 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B3AC 3C3C 005F                  		move.w	#$5F,d6
0001B3B0                            
0001B3B0                            Touch_Loop:
0001B3B0 4A29 0001                  		tst.b	1(a1)
0001B3B4 6A00                       		bpl.s	Touch_NextObj
0001B3B6 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B3BA 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B3BC                            
0001B3BC                            Touch_NextObj:
0001B3BC 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B3C0 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B3C4                            
0001B3C4 7000                       		moveq	#0,d0
0001B3C6 4E75                       		rts	
0001B3C8                            ; ===========================================================================
0001B3C8 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B3CA 0C14                       		dc.b   $C, $14
0001B3CC 140C                       		dc.b  $14,  $C
0001B3CE 0410                       		dc.b	4, $10
0001B3D0 0C12                       		dc.b   $C, $12
0001B3D2 1010                       		dc.b  $10, $10
0001B3D4 0606                       		dc.b	6,   6
0001B3D6 180C                       		dc.b  $18,  $C
0001B3D8 0C10                       		dc.b   $C, $10
0001B3DA 100C                       		dc.b  $10,  $C
0001B3DC 0808                       		dc.b	8,   8
0001B3DE 1410                       		dc.b  $14, $10
0001B3E0 1408                       		dc.b  $14,   8
0001B3E2 0E0E                       		dc.b   $E,  $E
0001B3E4 1818                       		dc.b  $18, $18
0001B3E6 2810                       		dc.b  $28, $10
0001B3E8 1018                       		dc.b  $10, $18
0001B3EA 0810                       		dc.b	8, $10
0001B3EC 2070                       		dc.b  $20, $70
0001B3EE 4020                       		dc.b  $40, $20
0001B3F0 8020                       		dc.b  $80, $20
0001B3F2 2020                       		dc.b  $20, $20
0001B3F4 0808                       		dc.b	8,   8
0001B3F6 0404                       		dc.b	4,   4
0001B3F8 2008                       		dc.b  $20,   8
0001B3FA 0C0C                       		dc.b   $C,  $C
0001B3FC 0804                       		dc.b	8,   4
0001B3FE 1804                       		dc.b  $18,   4
0001B400 2804                       		dc.b  $28,   4
0001B402 0408                       		dc.b	4,   8
0001B404 0418                       		dc.b	4, $18
0001B406 0428                       		dc.b	4, $28
0001B408 0420                       		dc.b	4, $20
0001B40A 1818                       		dc.b  $18, $18
0001B40C 0C18                       		dc.b   $C, $18
0001B40E 4808                       		dc.b  $48,   8
0001B410                            ; ===========================================================================
0001B410                            
0001B410                            Touch_Height:				; XREF: TouchResponse
0001B410 0240 003F                  		andi.w	#$3F,d0
0001B414 D040                       		add.w	d0,d0
0001B416 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B41A 7200                       		moveq	#0,d1
0001B41C 121A                       		move.b	(a2)+,d1
0001B41E 3029 0008                  		move.w	8(a1),d0
0001B422 9041                       		sub.w	d1,d0
0001B424 9042                       		sub.w	d2,d0
0001B426 6400                       		bcc.s	loc_1AE98
0001B428 D241                       		add.w	d1,d1
0001B42A D041                       		add.w	d1,d0
0001B42C 6500                       		bcs.s	Touch_Width
0001B42E 6000 FF8C                  		bra.w	Touch_NextObj
0001B432                            ; ===========================================================================
0001B432                            
0001B432                            loc_1AE98:
0001B432 B044                       		cmp.w	d4,d0
0001B434 6200 FF86                  		bhi.w	Touch_NextObj
0001B438                            
0001B438                            Touch_Width:
0001B438 7200                       		moveq	#0,d1
0001B43A 121A                       		move.b	(a2)+,d1
0001B43C 3029 000C                  		move.w	$C(a1),d0
0001B440 9041                       		sub.w	d1,d0
0001B442 9043                       		sub.w	d3,d0
0001B444 6400                       		bcc.s	loc_1AEB6
0001B446 D241                       		add.w	d1,d1
0001B448 D240                       		add.w	d0,d1
0001B44A 6500                       		bcs.s	Touch_ChkValue
0001B44C 6000 FF6E                  		bra.w	Touch_NextObj
0001B450                            ; ===========================================================================
0001B450                            
0001B450                            loc_1AEB6:
0001B450 B045                       		cmp.w	d5,d0
0001B452 6200 FF68                  		bhi.w	Touch_NextObj
0001B456                            
0001B456                            Touch_ChkValue:
0001B456 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B45A 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B45E 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B462 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B466 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B46A 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B46C 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B470                            
0001B470                            ; touch	response is $40-$7F
0001B470                            
0001B470 1029 0020                  		move.b	$20(a1),d0
0001B474 0200 003F                  		andi.b	#$3F,d0
0001B478 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B47C 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B47E 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B484 6400 0000                  		bcc.w	locret_1AEF2
0001B488 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B48C                            
0001B48C                            locret_1AEF2:
0001B48C 4E75                       		rts	
0001B48E                            ; ===========================================================================
0001B48E                            
0001B48E                            Touch_Monitor:
0001B48E 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B492 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B494 3028 000C                  		move.w	$C(a0),d0
0001B498 0440 0010                  		subi.w	#$10,d0
0001B49C B069 000C                  		cmp.w	$C(a1),d0
0001B4A0 6500                       		bcs.s	locret_1AF2E
0001B4A2 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B4A6 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B4AC 4A29 0025                  		tst.b	$25(a1)
0001B4B0 6600                       		bne.s	locret_1AF2E
0001B4B2 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B4B6 4E75                       		rts	
0001B4B8                            ; ===========================================================================
0001B4B8                            
0001B4B8                            loc_1AF1E:
0001B4B8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B4BE 6600                       		bne.s	locret_1AF2E
0001B4C0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B4C4 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B4C8                            
0001B4C8                            locret_1AF2E:
0001B4C8 4E75                       		rts	
0001B4CA                            ; ===========================================================================
0001B4CA                            
0001B4CA                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B4CA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B4CE 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B4D0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B4D6 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B4DA                            
0001B4DA                            loc_1AF40:
0001B4DA 4A29 0021                  		tst.b	$21(a1)
0001B4DE 6700                       		beq.s	Touch_KillEnemy
0001B4E0 4468 0010                  		neg.w	$10(a0)
0001B4E4 4468 0012                  		neg.w	$12(a0)
0001B4E8 E0E8 0010                  		asr	$10(a0)
0001B4EC E0E8 0012                  		asr	$12(a0)
0001B4F0 137C 0000 0020             		move.b	#0,$20(a1)
0001B4F6 5329 0021                  		subq.b	#1,$21(a1)
0001B4FA 6600                       		bne.s	locret_1AF68
0001B4FC 08E9 0007 0022             		bset	#7,$22(a1)
0001B502                            
0001B502                            locret_1AF68:
0001B502 4E75                       		rts	
0001B504                            ; ===========================================================================
0001B504                            
0001B504                            Touch_KillEnemy:
0001B504 08E9 0007 0022             		bset	#7,$22(a1)
0001B50A 7000                       		moveq	#0,d0
0001B50C 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B510 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B514 0C40 0006                  		cmpi.w	#6,d0
0001B518 6500                       		bcs.s	loc_1AF82
0001B51A 7006                       		moveq	#6,d0
0001B51C                            
0001B51C                            loc_1AF82:
0001B51C 3340 003E                  		move.w	d0,$3E(a1)
0001B520 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B524 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B52A 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B52C 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B530 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B536                            
0001B536                            loc_1AF9C:
0001B536 6100 0000                  		bsr.w	AddPoints
0001B53A 7400                       		moveq	#0,d2	; GMZ
0001B53C 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B53E 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B540                            
0001B540                            TouchKE_Explode:
0001B540 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B544 137C 0000 0024             		move.b	#0,$24(a1)
0001B54A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B54E                            
0001B54E                            TouchKE_NextExplosion:
0001B54E 5802                       		addq.b	#4,d2
0001B550 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001B556 6600                       		bne.s	TouchKE_NoExplosion
0001B558 336A 0008 0008             		move.w	8(a2),8(a1)
0001B55E 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B564 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B568                            
0001B568                            TouchKE_NoExplosion:
0001B568 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B56A 4A68 0012                  		tst.w	$12(a0)
0001B56E 6B00                       		bmi.s	loc_1AFC2
0001B570 3028 000C                  		move.w	$C(a0),d0
0001B574 B069 000C                  		cmp.w	$C(a1),d0
0001B578 6400                       		bcc.s	loc_1AFCA
0001B57A 4468 0012                  		neg.w	$12(a0)
0001B57E 4E75                       		rts	
0001B580                            ; ===========================================================================
0001B580                            
0001B580                            loc_1AFC2:
0001B580 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B586 4E75                       		rts	
0001B588                            ; ===========================================================================
0001B588                            
0001B588                            loc_1AFCA:
0001B588 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B58E 4E75                       		rts	
0001B590                            ; ===========================================================================
0001B590 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B598                            ; ===========================================================================
0001B598                            
0001B598                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B598 08E9 0007 0022             		bset	#7,$22(a1)
0001B59E                            
0001B59E                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B59E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B5A2 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B5A4                            
0001B5A4                            loc_1AFE6:				; XREF: Touch_Hurt
0001B5A4 70FF                       		moveq	#-1,d0
0001B5A6 4E75                       		rts	
0001B5A8                            ; ===========================================================================
0001B5A8                            
0001B5A8                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B5A8 4E71                       		nop	
0001B5AA 4A68 0030                  		tst.w	$30(a0)
0001B5AE 66F4                       		bne.s	loc_1AFE6
0001B5B0 2449                       		movea.l	a1,a2
0001B5B2                            
0001B5B2                            ; End of function TouchResponse
0001B5B2                            ; continue straight to HurtSonic
0001B5B2                            
0001B5B2                            ; ---------------------------------------------------------------------------
0001B5B2                            ; Hurting Sonic	subroutine
0001B5B2                            ; ---------------------------------------------------------------------------
0001B5B2                            
0001B5B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5B2                            
0001B5B2                            
0001B5B2                            HurtSonic:
0001B5B2 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B5B6 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B5B8 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B5BC 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B5C0 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001B5C6 6600                       		bne.s	Hurt_Shield
0001B5C8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B5CC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5D8                            
0001B5D8                            Hurt_Shield:
0001B5D8 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B5DE 117C 0004 0024             		move.b	#4,$24(a0)
0001B5E4 6100 8760                  		bsr.w	Sonic_ResetOnFloor
0001B5E8 08E8 0001 0022             		bset	#1,$22(a0)
0001B5EE 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B5F4 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B5FA 0828 0006 0022             		btst	#6,$22(a0)
0001B600 6700                       		beq.s	Hurt_Reverse
0001B602 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B608 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B60E                            
0001B60E                            Hurt_Reverse:
0001B60E 3028 0008                  		move.w	8(a0),d0
0001B612 B06A 0008                  		cmp.w	8(a2),d0
0001B616 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B618 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B61C                            
0001B61C                            Hurt_ChkSpikes:
0001B61C 317C 0000 0014             		move.w	#0,$14(a0)
0001B622 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B628 317C 0078 0030             		move.w	#$78,$30(a0)
0001B62E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B632 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B636 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B638 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B63C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B63E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B642                            
0001B642                            Hurt_Sound:
0001B642 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B648 70FF                       		moveq	#-1,d0
0001B64A 4E75                       		rts	
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            Hurt_NoRings:
0001B64C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B650 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B654                            ; End of function HurtSonic
0001B654                            
0001B654                            ; ---------------------------------------------------------------------------
0001B654                            ; Subroutine to	kill Sonic
0001B654                            ; ---------------------------------------------------------------------------
0001B654                            
0001B654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B654                            
0001B654                            
0001B654                            KillSonic:
0001B654 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B658 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B65A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B660 117C 0006 0024             		move.b	#6,$24(a0)
0001B666 6100 86DE                  		bsr.w	Sonic_ResetOnFloor
0001B66A 08E8 0001 0022             		bset	#1,$22(a0)
0001B670 317C F900 0012             		move.w	#-$700,$12(a0)
0001B676 317C 0000 0010             		move.w	#0,$10(a0)
0001B67C 317C 0000 0014             		move.w	#0,$14(a0)
0001B682 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B688 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B68E 08E8 0007 0002             		bset	#7,2(a0)
0001B694 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B698 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B69C 6600                       		bne.s	Kill_Sound
0001B69E 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B6A2                            
0001B6A2                            Kill_Sound:
0001B6A2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6A8                            
0001B6A8                            Kill_NoDeath:
0001B6A8 70FF                       		moveq	#-1,d0
0001B6AA 4E75                       		rts	
0001B6AC                            ; End of function KillSonic
0001B6AC                            
0001B6AC                            
0001B6AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6AC                            
0001B6AC                            
0001B6AC                            Touch_Special:				; XREF: Touch_ChkValue
0001B6AC 1229 0020                  		move.b	$20(a1),d1
0001B6B0 0201 003F                  		andi.b	#$3F,d1
0001B6B4 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B6B8 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B6BA 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B6BE 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B6C0 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B6C4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B6C6 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B6CA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B6CC 4E75                       		rts	
0001B6CE                            ; ===========================================================================
0001B6CE                            
0001B6CE                            Touch_CatKiller:			; XREF: Touch_Special
0001B6CE 6000 FEC8                  		bra.w	loc_1AFDA
0001B6D2                            ; ===========================================================================
0001B6D2                            
0001B6D2                            Touch_Yadrin:				; XREF: Touch_Special
0001B6D2 9A40                       		sub.w	d0,d5
0001B6D4 0C45 0008                  		cmpi.w	#8,d5
0001B6D8 6400                       		bcc.s	loc_1B144
0001B6DA 3029 0008                  		move.w	8(a1),d0
0001B6DE 5940                       		subq.w	#4,d0
0001B6E0 0829 0000 0022             		btst	#0,$22(a1)
0001B6E6 6700                       		beq.s	loc_1B130
0001B6E8 0440 0010                  		subi.w	#$10,d0
0001B6EC                            
0001B6EC                            loc_1B130:
0001B6EC 9042                       		sub.w	d2,d0
0001B6EE 6400                       		bcc.s	loc_1B13C
0001B6F0 0640 0018                  		addi.w	#$18,d0
0001B6F4 6500                       		bcs.s	loc_1B140
0001B6F6 6000                       		bra.s	loc_1B144
0001B6F8                            ; ===========================================================================
0001B6F8                            
0001B6F8                            loc_1B13C:
0001B6F8 B044                       		cmp.w	d4,d0
0001B6FA 6200                       		bhi.s	loc_1B144
0001B6FC                            
0001B6FC                            loc_1B140:
0001B6FC 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B700                            ; ===========================================================================
0001B700                            
0001B700                            loc_1B144:
0001B700 6000 FDC8                  		bra.w	Touch_Enemy
0001B704                            ; ===========================================================================
0001B704                            
0001B704                            Touch_D7orE1:				; XREF: Touch_Special
0001B704 5229 0021                  		addq.b	#1,$21(a1)
0001B708 4E75                       		rts	
0001B70A                            ; End of function Touch_Special
0001B70A                            
0001B70A                            ; ---------------------------------------------------------------------------
0001B70A                            ; Subroutine to	show the special stage layout
0001B70A                            ; ---------------------------------------------------------------------------
0001B70A                            
0001B70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B70A                            
0001B70A                            
0001B70A                            SS_ShowLayout:				; XREF: SpecialStage
0001B70A 6100 0000                  		bsr.w	SS_AniWallsRings
0001B70E 6100 0000                  		bsr.w	SS_AniItems
0001B712 3F05                       		move.w	d5,-(sp)
0001B714 43F8 8000                  		lea	($FFFF8000).w,a1
0001B718 1038 F780                  		move.b	($FFFFF780).w,d0
0001B71C 0200 00FC                  		andi.b	#$FC,d0
0001B720 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B726 3800                       		move.w	d0,d4
0001B728 3A01                       		move.w	d1,d5
0001B72A C9FC 0018                  		muls.w	#$18,d4
0001B72E CBFC 0018                  		muls.w	#$18,d5
0001B732 7400                       		moveq	#0,d2
0001B734 3438 F700                  		move.w	($FFFFF700).w,d2
0001B738 84FC 0018                  		divu.w	#$18,d2
0001B73C 4842                       		swap	d2
0001B73E 4442                       		neg.w	d2
0001B740 0642 FF4C                  		addi.w	#-$B4,d2
0001B744 7600                       		moveq	#0,d3
0001B746 3638 F704                  		move.w	($FFFFF704).w,d3
0001B74A 86FC 0018                  		divu.w	#$18,d3
0001B74E 4843                       		swap	d3
0001B750 4443                       		neg.w	d3
0001B752 0643 FF4C                  		addi.w	#-$B4,d3
0001B756 3E3C 000F                  		move.w	#$F,d7
0001B75A                            
0001B75A                            loc_1B19E:
0001B75A 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B75E 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B762 4440                       		neg.w	d0
0001B764 C3C2                       		muls.w	d2,d1
0001B766 C1C3                       		muls.w	d3,d0
0001B768 2C00                       		move.l	d0,d6
0001B76A DC81                       		add.l	d1,d6
0001B76C 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B770 C1C2                       		muls.w	d2,d0
0001B772 C3C3                       		muls.w	d3,d1
0001B774 D280                       		add.l	d0,d1
0001B776 2406                       		move.l	d6,d2
0001B778 3C3C 000F                  		move.w	#$F,d6
0001B77C                            
0001B77C                            loc_1B1C0:
0001B77C 2002                       		move.l	d2,d0
0001B77E E080                       		asr.l	#8,d0
0001B780 32C0                       		move.w	d0,(a1)+
0001B782 2001                       		move.l	d1,d0
0001B784 E080                       		asr.l	#8,d0
0001B786 32C0                       		move.w	d0,(a1)+
0001B788 D485                       		add.l	d5,d2
0001B78A D284                       		add.l	d4,d1
0001B78C 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B790                            
0001B790 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B794 0643 0018                  		addi.w	#$18,d3
0001B798 51CF FFC0                  		dbf	d7,loc_1B19E
0001B79C                            
0001B79C 3A1F                       		move.w	(sp)+,d5
0001B79E 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B7A4 7000                       		moveq	#0,d0
0001B7A6 3038 F704                  		move.w	($FFFFF704).w,d0
0001B7AA 80FC 0018                  		divu.w	#$18,d0
0001B7AE C0FC 0080                  		mulu.w	#$80,d0
0001B7B2 D1C0                       		adda.l	d0,a0
0001B7B4 7000                       		moveq	#0,d0
0001B7B6 3038 F700                  		move.w	($FFFFF700).w,d0
0001B7BA 80FC 0018                  		divu.w	#$18,d0
0001B7BE D0C0                       		adda.w	d0,a0
0001B7C0 49F8 8000                  		lea	($FFFF8000).w,a4
0001B7C4 3E3C 000F                  		move.w	#$F,d7
0001B7C8                            
0001B7C8                            loc_1B20C:
0001B7C8 3C3C 000F                  		move.w	#$F,d6
0001B7CC                            
0001B7CC                            loc_1B210:
0001B7CC 7000                       		moveq	#0,d0
0001B7CE 1018                       		move.b	(a0)+,d0
0001B7D0 6700                       		beq.s	loc_1B268
0001B7D2 0C00 004E                  		cmpi.b	#$4E,d0
0001B7D6 6200                       		bhi.s	loc_1B268
0001B7D8 3614                       		move.w	(a4),d3
0001B7DA 0643 0120                  		addi.w	#$120,d3
0001B7DE 0C43 0070                  		cmpi.w	#$70,d3
0001B7E2 6500                       		bcs.s	loc_1B268
0001B7E4 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B7E8 6400                       		bcc.s	loc_1B268
0001B7EA 342C 0002                  		move.w	2(a4),d2
0001B7EE 0642 00F0                  		addi.w	#$F0,d2
0001B7F2 0C42 0070                  		cmpi.w	#$70,d2
0001B7F6 6500                       		bcs.s	loc_1B268
0001B7F8 0C42 0170                  		cmpi.w	#$170,d2
0001B7FC 6400                       		bcc.s	loc_1B268
0001B7FE 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B804 E748                       		lsl.w	#3,d0
0001B806 4BF5 0000                  		lea	(a5,d0.w),a5
0001B80A 225D                       		movea.l	(a5)+,a1
0001B80C 321D                       		move.w	(a5)+,d1
0001B80E D241                       		add.w	d1,d1
0001B810 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B814 365D                       		movea.w	(a5)+,a3
0001B816 7200                       		moveq	#0,d1
0001B818 1219                       		move.b	(a1)+,d1
0001B81A 5301                       		subq.b	#1,d1
0001B81C 6B00                       		bmi.s	loc_1B268
0001B81E 4EB9 0000 DCCA             		jsr	sub_D762
0001B824                            
0001B824                            loc_1B268:
0001B824 584C                       		addq.w	#4,a4
0001B826 51CE FFA4                  		dbf	d6,loc_1B210
0001B82A                            
0001B82A 41E8 0070                  		lea	$70(a0),a0
0001B82E 51CF FF98                  		dbf	d7,loc_1B20C
0001B832                            
0001B832 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B836 0C05 0050                  		cmpi.b	#$50,d5
0001B83A 6700                       		beq.s	loc_1B288
0001B83C 24BC 0000 0000             		move.l	#0,(a2)
0001B842 4E75                       		rts	
0001B844                            ; ===========================================================================
0001B844                            
0001B844                            loc_1B288:
0001B844 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B84A 4E75                       		rts	
0001B84C                            ; End of function SS_ShowLayout
0001B84C                            
0001B84C                            ; ---------------------------------------------------------------------------
0001B84C                            ; Subroutine to	animate	walls and rings	in the special stage
0001B84C                            ; ---------------------------------------------------------------------------
0001B84C                            
0001B84C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B84C                            
0001B84C                            
0001B84C                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B84C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B852 7000                       		moveq	#0,d0
0001B854 1038 F780                  		move.b	($FFFFF780).w,d0
0001B858 E408                       		lsr.b	#2,d0
0001B85A 0240 000F                  		andi.w	#$F,d0
0001B85E 7223                       		moveq	#$23,d1
0001B860                            
0001B860                            loc_1B2A4:
0001B860 3280                       		move.w	d0,(a1)
0001B862 5049                       		addq.w	#8,a1
0001B864 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B868                            
0001B868 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B86E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B872 6A00                       		bpl.s	loc_1B2C8
0001B874 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B87A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B87E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B884                            
0001B884                            loc_1B2C8:
0001B884 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B88A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B88E 6A00                       		bpl.s	loc_1B2E4
0001B890 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B896 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B89A 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B8A0                            
0001B8A0                            loc_1B2E4:
0001B8A0 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B8A4 1340 0138                  		move.b	d0,$138(a1)
0001B8A8 1340 0160                  		move.b	d0,$160(a1)
0001B8AC 1340 0148                  		move.b	d0,$148(a1)
0001B8B0 1340 0150                  		move.b	d0,$150(a1)
0001B8B4 1340 01D8                  		move.b	d0,$1D8(a1)
0001B8B8 1340 01E0                  		move.b	d0,$1E0(a1)
0001B8BC 1340 01E8                  		move.b	d0,$1E8(a1)
0001B8C0 1340 01F0                  		move.b	d0,$1F0(a1)
0001B8C4 1340 01F8                  		move.b	d0,$1F8(a1)
0001B8C8 1340 0200                  		move.b	d0,$200(a1)
0001B8CC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B8D0 6A00                       		bpl.s	loc_1B326
0001B8D2 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B8D8 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B8DC 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B8E2                            
0001B8E2                            loc_1B326:
0001B8E2 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B8E6 1340 0168                  		move.b	d0,$168(a1)
0001B8EA 1340 0170                  		move.b	d0,$170(a1)
0001B8EE 1340 0178                  		move.b	d0,$178(a1)
0001B8F2 1340 0180                  		move.b	d0,$180(a1)
0001B8F6 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B8FA 6A00                       		bpl.s	loc_1B350
0001B8FC 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B902 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B906 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B90C                            
0001B90C                            loc_1B350:
0001B90C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B912 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B918 7000                       		moveq	#0,d0
0001B91A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B91E D040                       		add.w	d0,d0
0001B920 41F0 0000                  		lea	(a0,d0.w),a0
0001B924 3290                       		move.w	(a0),(a1)
0001B926 3368 0002 0008             		move.w	2(a0),8(a1)
0001B92C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B932 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B938 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B93E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B944 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B94A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B950 D0FC 0020                  		adda.w	#$20,a0
0001B954 D2FC 0048                  		adda.w	#$48,a1
0001B958 3290                       		move.w	(a0),(a1)
0001B95A 3368 0002 0008             		move.w	2(a0),8(a1)
0001B960 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B966 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B96C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B972 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B978 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B97E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B984 D0FC 0020                  		adda.w	#$20,a0
0001B988 D2FC 0048                  		adda.w	#$48,a1
0001B98C 3290                       		move.w	(a0),(a1)
0001B98E 3368 0002 0008             		move.w	2(a0),8(a1)
0001B994 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B99A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9A0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9A6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9AC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9B2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9B8 D0FC 0020                  		adda.w	#$20,a0
0001B9BC D2FC 0048                  		adda.w	#$48,a1
0001B9C0 3290                       		move.w	(a0),(a1)
0001B9C2 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9C8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9CE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9D4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9DA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9E0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9E6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9EC D0FC 0020                  		adda.w	#$20,a0
0001B9F0 D2FC 0048                  		adda.w	#$48,a1
0001B9F4 4E75                       		rts	
0001B9F6                            ; End of function SS_AniWallsRings
0001B9F6                            
0001B9F6                            ; ===========================================================================
0001B9F6 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA06 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA16 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA26 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA36 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BA46 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BA56 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BA66 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BA76                            ; ---------------------------------------------------------------------------
0001BA76                            ; Subroutine to	remove items when you collect them in the special stage
0001BA76                            ; ---------------------------------------------------------------------------
0001BA76                            
0001BA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA76                            
0001BA76                            
0001BA76                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BA76 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BA7C 303C 001F                  		move.w	#$1F,d0
0001BA80                            
0001BA80                            loc_1B4C4:
0001BA80 4A12                       		tst.b	(a2)
0001BA82 6700                       		beq.s	locret_1B4CE
0001BA84 504A                       		addq.w	#8,a2
0001BA86 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BA8A                            
0001BA8A                            locret_1B4CE:
0001BA8A 4E75                       		rts	
0001BA8C                            ; End of function SS_RemoveCollectedItem
0001BA8C                            
0001BA8C                            ; ---------------------------------------------------------------------------
0001BA8C                            ; Subroutine to	animate	special	stage items when you touch them
0001BA8C                            ; ---------------------------------------------------------------------------
0001BA8C                            
0001BA8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA8C                            
0001BA8C                            
0001BA8C                            SS_AniItems:				; XREF: SS_ShowLayout
0001BA8C 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BA92 3E3C 001F                  		move.w	#$1F,d7
0001BA96                            
0001BA96                            loc_1B4DA:
0001BA96 7000                       		moveq	#0,d0
0001BA98 1010                       		move.b	(a0),d0
0001BA9A 6700                       		beq.s	loc_1B4E8
0001BA9C E548                       		lsl.w	#2,d0
0001BA9E 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BAA2 4E91                       		jsr	(a1)
0001BAA4                            
0001BAA4                            loc_1B4E8:
0001BAA4 5048                       		addq.w	#8,a0
0001BAA6                            
0001BAA6                            loc_1B4EA:
0001BAA6 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BAAA                            
0001BAAA 4E75                       		rts	
0001BAAC                            ; End of function SS_AniItems
0001BAAC                            
0001BAAC                            ; ===========================================================================
0001BAAC 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BAB0 0000 0000                  		dc.l SS_AniBumper
0001BAB4 0000 0000                  		dc.l SS_Ani1Up
0001BAB8 0000 0000                  		dc.l SS_AniReverse
0001BABC 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BAC0 0000 0000                  		dc.l SS_AniGlassBlock
0001BAC4                            ; ===========================================================================
0001BAC4                            
0001BAC4                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BAC4 5328 0002                  		subq.b	#1,2(a0)
0001BAC8 6A00                       		bpl.s	locret_1B530
0001BACA 117C 0005 0002             		move.b	#5,2(a0)
0001BAD0 7000                       		moveq	#0,d0
0001BAD2 1028 0003                  		move.b	3(a0),d0
0001BAD6 5228 0003                  		addq.b	#1,3(a0)
0001BADA 2268 0004                  		movea.l	4(a0),a1
0001BADE 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BAE2 1280                       		move.b	d0,(a1)
0001BAE4 6600                       		bne.s	locret_1B530
0001BAE6 4290                       		clr.l	(a0)
0001BAE8 42A8 0004                  		clr.l	4(a0)
0001BAEC                            
0001BAEC                            locret_1B530:
0001BAEC 4E75                       		rts	
0001BAEE                            ; ===========================================================================
0001BAEE 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BAF4                            ; ===========================================================================
0001BAF4                            
0001BAF4                            SS_AniBumper:				; XREF: SS_AniIndex
0001BAF4 5328 0002                  		subq.b	#1,2(a0)
0001BAF8 6A00                       		bpl.s	locret_1B566
0001BAFA 117C 0007 0002             		move.b	#7,2(a0)
0001BB00 7000                       		moveq	#0,d0
0001BB02 1028 0003                  		move.b	3(a0),d0
0001BB06 5228 0003                  		addq.b	#1,3(a0)
0001BB0A 2268 0004                  		movea.l	4(a0),a1
0001BB0E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB12 6600                       		bne.s	loc_1B564
0001BB14 4290                       		clr.l	(a0)
0001BB16 42A8 0004                  		clr.l	4(a0)
0001BB1A 12BC 0025                  		move.b	#$25,(a1)
0001BB1E 4E75                       		rts	
0001BB20                            ; ===========================================================================
0001BB20                            
0001BB20                            loc_1B564:
0001BB20 1280                       		move.b	d0,(a1)
0001BB22                            
0001BB22                            locret_1B566:
0001BB22 4E75                       		rts	
0001BB24                            ; ===========================================================================
0001BB24 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB2A                            ; ===========================================================================
0001BB2A                            
0001BB2A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB2A 5328 0002                  		subq.b	#1,2(a0)
0001BB2E 6A00                       		bpl.s	locret_1B596
0001BB30 117C 0005 0002             		move.b	#5,2(a0)
0001BB36 7000                       		moveq	#0,d0
0001BB38 1028 0003                  		move.b	3(a0),d0
0001BB3C 5228 0003                  		addq.b	#1,3(a0)
0001BB40 2268 0004                  		movea.l	4(a0),a1
0001BB44 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BB48 1280                       		move.b	d0,(a1)
0001BB4A 6600                       		bne.s	locret_1B596
0001BB4C 4290                       		clr.l	(a0)
0001BB4E 42A8 0004                  		clr.l	4(a0)
0001BB52                            
0001BB52                            locret_1B596:
0001BB52 4E75                       		rts	
0001BB54                            ; ===========================================================================
0001BB54 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BB5A                            ; ===========================================================================
0001BB5A                            
0001BB5A                            SS_AniReverse:				; XREF: SS_AniIndex
0001BB5A 5328 0002                  		subq.b	#1,2(a0)
0001BB5E 6A00                       		bpl.s	locret_1B5CC
0001BB60 117C 0007 0002             		move.b	#7,2(a0)
0001BB66 7000                       		moveq	#0,d0
0001BB68 1028 0003                  		move.b	3(a0),d0
0001BB6C 5228 0003                  		addq.b	#1,3(a0)
0001BB70 2268 0004                  		movea.l	4(a0),a1
0001BB74 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BB78 6600                       		bne.s	loc_1B5CA
0001BB7A 4290                       		clr.l	(a0)
0001BB7C 42A8 0004                  		clr.l	4(a0)
0001BB80 12BC 002B                  		move.b	#$2B,(a1)
0001BB84 4E75                       		rts	
0001BB86                            ; ===========================================================================
0001BB86                            
0001BB86                            loc_1B5CA:
0001BB86 1280                       		move.b	d0,(a1)
0001BB88                            
0001BB88                            locret_1B5CC:
0001BB88 4E75                       		rts	
0001BB8A                            ; ===========================================================================
0001BB8A 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BB90                            ; ===========================================================================
0001BB90                            
0001BB90                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BB90 5328 0002                  		subq.b	#1,2(a0)
0001BB94 6A00                       		bpl.s	locret_1B60C
0001BB96 117C 0005 0002             		move.b	#5,2(a0)
0001BB9C 7000                       		moveq	#0,d0
0001BB9E 1028 0003                  		move.b	3(a0),d0
0001BBA2 5228 0003                  		addq.b	#1,3(a0)
0001BBA6 2268 0004                  		movea.l	4(a0),a1
0001BBAA 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BBAE 1280                       		move.b	d0,(a1)
0001BBB0 6600                       		bne.s	locret_1B60C
0001BBB2 4290                       		clr.l	(a0)
0001BBB4 42A8 0004                  		clr.l	4(a0)
0001BBB8 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BBBE 303C 00A8                  		move.w	#$A8,d0
0001BBC2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BBC8                            
0001BBC8                            locret_1B60C:
0001BBC8 4E75                       		rts	
0001BBCA                            ; ===========================================================================
0001BBCA 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BBD0                            ; ===========================================================================
0001BBD0                            
0001BBD0                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BBD0 5328 0002                  		subq.b	#1,2(a0)
0001BBD4 6A00                       		bpl.s	locret_1B640
0001BBD6 117C 0001 0002             		move.b	#1,2(a0)
0001BBDC 7000                       		moveq	#0,d0
0001BBDE 1028 0003                  		move.b	3(a0),d0
0001BBE2 5228 0003                  		addq.b	#1,3(a0)
0001BBE6 2268 0004                  		movea.l	4(a0),a1
0001BBEA 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BBEE 1280                       		move.b	d0,(a1)
0001BBF0 6600                       		bne.s	locret_1B640
0001BBF2 12A8 0004                  		move.b	4(a0),(a1)
0001BBF6 4290                       		clr.l	(a0)
0001BBF8 42A8 0004                  		clr.l	4(a0)
0001BBFC                            
0001BBFC                            locret_1B640:
0001BBFC 4E75                       		rts	
0001BBFE                            ; ===========================================================================
0001BBFE 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC08                            ; ---------------------------------------------------------------------------
0001BC08                            ; Special stage	layout pointers
0001BC08                            ; ---------------------------------------------------------------------------
0001BC08                            SS_LayoutIndex:
0001BC08                            	include "_inc\Special stage layout pointers.asm"
0001BC08                            ; ---------------------------------------------------------------------------
0001BC08                            ; Special stage	layout pointers
0001BC08                            ; ---------------------------------------------------------------------------
0001BC08 0000 0000                  	dc.l SS_1
0001BC0C 0000 0000                  	dc.l SS_2
0001BC10 0000 0000                  	dc.l SS_3
0001BC14 0000 0000                  	dc.l SS_4
0001BC18 0000 0000                  	dc.l SS_5
0001BC1C 0000 0000                  	dc.l SS_6
0001BC20                            	even
0001BC20                            	even
0001BC20                            
0001BC20                            ; ---------------------------------------------------------------------------
0001BC20                            ; Special stage	start locations
0001BC20                            ; ---------------------------------------------------------------------------
0001BC20                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC38                            		even
0001BC38                            
0001BC38                            ; ---------------------------------------------------------------------------
0001BC38                            ; Subroutine to	load special stage layout
0001BC38                            ; ---------------------------------------------------------------------------
0001BC38                            
0001BC38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC38                            
0001BC38                            
0001BC38                            SS_Load:				; XREF: SpecialStage
0001BC38 7000                       		moveq	#0,d0
0001BC3A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BC3E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BC42 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BC48 6500                       		bcs.s	SS_ChkEmldNum
0001BC4A 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BC50                            
0001BC50                            SS_ChkEmldNum:
0001BC50 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BC56 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BC58 7200                       		moveq	#0,d1
0001BC5A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BC5E 5301                       		subq.b	#1,d1
0001BC60 6500                       		bcs.s	SS_LoadData
0001BC62 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BC66                            
0001BC66                            SS_ChkEmldLoop:	
0001BC66 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BC6A 6600                       		bne.s	SS_ChkEmldRepeat
0001BC6C 60CA                       		bra.s	SS_Load
0001BC6E                            ; ===========================================================================
0001BC6E                            
0001BC6E                            SS_ChkEmldRepeat:
0001BC6E 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BC72                            
0001BC72                            SS_LoadData:
0001BC72 E548                       		lsl.w	#2,d0
0001BC74 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BC78 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BC7C 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BC80 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BC84 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BC8A 303C 0000                  		move.w	#0,d0
0001BC8E 4EB9 0000 193E             		jsr	(EniDec).l
0001BC94 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BC9A 303C 0FFF                  		move.w	#$FFF,d0
0001BC9E                            
0001BC9E                            SS_ClrRAM3:
0001BC9E 4299                       		clr.l	(a1)+
0001BCA0 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BCA4                            
0001BCA4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BCAA 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BCB0 723F                       		moveq	#$3F,d1
0001BCB2                            
0001BCB2                            loc_1B6F6:
0001BCB2 743F                       		moveq	#$3F,d2
0001BCB4                            
0001BCB4                            loc_1B6F8:
0001BCB4 12D8                       		move.b	(a0)+,(a1)+
0001BCB6 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BCBA                            
0001BCBA 43E9 0040                  		lea	$40(a1),a1
0001BCBE 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BCC2                            
0001BCC2 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BCC8 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BCCE 724D                       		moveq	#$4D,d1
0001BCD0                            
0001BCD0                            loc_1B714:
0001BCD0 22D8                       		move.l	(a0)+,(a1)+
0001BCD2 32FC 0000                  		move.w	#0,(a1)+
0001BCD6 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BCDC 32D8                       		move.w	(a0)+,(a1)+
0001BCDE 51C9 FFF0                  		dbf	d1,loc_1B714
0001BCE2                            
0001BCE2 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BCE8 323C 003F                  		move.w	#$3F,d1
0001BCEC                            
0001BCEC                            loc_1B730:
0001BCEC                            
0001BCEC 4299                       		clr.l	(a1)+
0001BCEE 51C9 FFFC                  		dbf	d1,loc_1B730
0001BCF2                            
0001BCF2 4E75                       		rts	
0001BCF4                            ; End of function SS_Load
0001BCF4                            
0001BCF4                            ; ===========================================================================
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            ; Special stage	mappings and VRAM pointers
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            SS_MapIndex:
0001BCF4                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            ; Special stage	mappings and VRAM pointers
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BCF8 0142                       	dc.w $142		; VRAM setting
0001BCFA 0000 0000                  	dc.l Map_SSWalls
0001BCFE 0142                       	dc.w $142
0001BD00 0000 0000                  	dc.l Map_SSWalls
0001BD04 0142                       	dc.w $142
0001BD06 0000 0000                  	dc.l Map_SSWalls
0001BD0A 0142                       	dc.w $142
0001BD0C 0000 0000                  	dc.l Map_SSWalls
0001BD10 0142                       	dc.w $142
0001BD12 0000 0000                  	dc.l Map_SSWalls
0001BD16 0142                       	dc.w $142
0001BD18 0000 0000                  	dc.l Map_SSWalls
0001BD1C 0142                       	dc.w $142
0001BD1E 0000 0000                  	dc.l Map_SSWalls
0001BD22 0142                       	dc.w $142
0001BD24 0000 0000                  	dc.l Map_SSWalls
0001BD28 0142                       	dc.w $142
0001BD2A 0000 0000                  	dc.l Map_SSWalls
0001BD2E 2142                       	dc.w $2142
0001BD30 0000 0000                  	dc.l Map_SSWalls
0001BD34 2142                       	dc.w $2142
0001BD36 0000 0000                  	dc.l Map_SSWalls
0001BD3A 2142                       	dc.w $2142
0001BD3C 0000 0000                  	dc.l Map_SSWalls
0001BD40 2142                       	dc.w $2142
0001BD42 0000 0000                  	dc.l Map_SSWalls
0001BD46 2142                       	dc.w $2142
0001BD48 0000 0000                  	dc.l Map_SSWalls
0001BD4C 2142                       	dc.w $2142
0001BD4E 0000 0000                  	dc.l Map_SSWalls
0001BD52 2142                       	dc.w $2142
0001BD54 0000 0000                  	dc.l Map_SSWalls
0001BD58 2142                       	dc.w $2142
0001BD5A 0000 0000                  	dc.l Map_SSWalls
0001BD5E 2142                       	dc.w $2142
0001BD60 0000 0000                  	dc.l Map_SSWalls
0001BD64 4142                       	dc.w $4142
0001BD66 0000 0000                  	dc.l Map_SSWalls
0001BD6A 4142                       	dc.w $4142
0001BD6C 0000 0000                  	dc.l Map_SSWalls
0001BD70 4142                       	dc.w $4142
0001BD72 0000 0000                  	dc.l Map_SSWalls
0001BD76 4142                       	dc.w $4142
0001BD78 0000 0000                  	dc.l Map_SSWalls
0001BD7C 4142                       	dc.w $4142
0001BD7E 0000 0000                  	dc.l Map_SSWalls
0001BD82 4142                       	dc.w $4142
0001BD84 0000 0000                  	dc.l Map_SSWalls
0001BD88 4142                       	dc.w $4142
0001BD8A 0000 0000                  	dc.l Map_SSWalls
0001BD8E 4142                       	dc.w $4142
0001BD90 0000 0000                  	dc.l Map_SSWalls
0001BD94 4142                       	dc.w $4142
0001BD96 0000 0000                  	dc.l Map_SSWalls
0001BD9A 6142                       	dc.w $6142
0001BD9C 0000 0000                  	dc.l Map_SSWalls
0001BDA0 6142                       	dc.w $6142
0001BDA2 0000 0000                  	dc.l Map_SSWalls
0001BDA6 6142                       	dc.w $6142
0001BDA8 0000 0000                  	dc.l Map_SSWalls
0001BDAC 6142                       	dc.w $6142
0001BDAE 0000 0000                  	dc.l Map_SSWalls
0001BDB2 6142                       	dc.w $6142
0001BDB4 0000 0000                  	dc.l Map_SSWalls
0001BDB8 6142                       	dc.w $6142
0001BDBA 0000 0000                  	dc.l Map_SSWalls
0001BDBE 6142                       	dc.w $6142
0001BDC0 0000 0000                  	dc.l Map_SSWalls
0001BDC4 6142                       	dc.w $6142
0001BDC6 0000 0000                  	dc.l Map_SSWalls
0001BDCA 6142                       	dc.w $6142
0001BDCC 0000 F060                  	dc.l Map_obj47
0001BDD0 023B                       	dc.w $23B
0001BDD2 0000 0000                  	dc.l Map_SS_R
0001BDD6 0570                       	dc.w $570
0001BDD8 0000 0000                  	dc.l Map_SS_R
0001BDDC 0251                       	dc.w $251
0001BDDE 0000 0000                  	dc.l Map_SS_R
0001BDE2 0370                       	dc.w $370
0001BDE4 0000 0000                  	dc.l Map_SS_Up
0001BDE8 0263                       	dc.w $263
0001BDEA 0000 0000                  	dc.l Map_SS_Down
0001BDEE 0263                       	dc.w $263
0001BDF0 0000 0000                  	dc.l Map_SS_R
0001BDF4 22F0                       	dc.w $22F0
0001BDF6 0000 0000                  	dc.l Map_SS_Glass
0001BDFA 0470                       	dc.w $470
0001BDFC 0000 0000                  	dc.l Map_SS_Glass
0001BE00 05F0                       	dc.w $5F0
0001BE02 0000 0000                  	dc.l Map_SS_Glass
0001BE06 65F0                       	dc.w $65F0
0001BE08 0000 0000                  	dc.l Map_SS_Glass
0001BE0C 25F0                       	dc.w $25F0
0001BE0E 0000 0000                  	dc.l Map_SS_Glass
0001BE12 45F0                       	dc.w $45F0
0001BE14 0000 0000                  	dc.l Map_SS_R
0001BE18 02F0                       	dc.w $2F0
0001BE1A 0100 F060                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE1E 023B                       	dc.w $23B
0001BE20 0200 F060                  	dc.l Map_obj47+$2000000
0001BE24 023B                       	dc.w $23B
0001BE26 0000 0000                  	dc.l Map_SS_R
0001BE2A 0797                       	dc.w $797
0001BE2C 0000 0000                  	dc.l Map_SS_R
0001BE30 07A0                       	dc.w $7A0
0001BE32 0000 0000                  	dc.l Map_SS_R
0001BE36 07A9                       	dc.w $7A9
0001BE38 0000 0000                  	dc.l Map_SS_R
0001BE3C 0797                       	dc.w $797
0001BE3E 0000 0000                  	dc.l Map_SS_R
0001BE42 07A0                       	dc.w $7A0
0001BE44 0000 0000                  	dc.l Map_SS_R
0001BE48 07A9                       	dc.w $7A9
0001BE4A 0000 A3E0                  	dc.l Map_obj25
0001BE4E 27B2                       	dc.w $27B2
0001BE50 0000 0000                  	dc.l Map_SS_Chaos3
0001BE54 0770                       	dc.w $770
0001BE56 0000 0000                  	dc.l Map_SS_Chaos3
0001BE5A 2770                       	dc.w $2770
0001BE5C 0000 0000                  	dc.l Map_SS_Chaos3
0001BE60 4770                       	dc.w $4770
0001BE62 0000 0000                  	dc.l Map_SS_Chaos3
0001BE66 6770                       	dc.w $6770
0001BE68 0000 0000                  	dc.l Map_SS_Chaos1
0001BE6C 0770                       	dc.w $770
0001BE6E 0000 0000                  	dc.l Map_SS_Chaos2
0001BE72 0770                       	dc.w $770
0001BE74 0000 0000                  	dc.l Map_SS_R
0001BE78 04F0                       	dc.w $4F0
0001BE7A 0400 A3E0                  	dc.l Map_obj25+$4000000
0001BE7E 27B2                       	dc.w $27B2
0001BE80 0500 A3E0                  	dc.l Map_obj25+$5000000
0001BE84 27B2                       	dc.w $27B2
0001BE86 0600 A3E0                  	dc.l Map_obj25+$6000000
0001BE8A 27B2                       	dc.w $27B2
0001BE8C 0700 A3E0                  	dc.l Map_obj25+$7000000
0001BE90 27B2                       	dc.w $27B2
0001BE92 0000 0000                  	dc.l Map_SS_Glass
0001BE96 23F0                       	dc.w $23F0
0001BE98 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BE9C 23F0                       	dc.w $23F0
0001BE9E 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BEA2 23F0                       	dc.w $23F0
0001BEA4 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BEA8 23F0                       	dc.w $23F0
0001BEAA 0000 0000                  	dc.l Map_SS_R+$2000000
0001BEAE 04F0                       	dc.w $4F0
0001BEB0 0000 0000                  	dc.l Map_SS_Glass
0001BEB4 05F0                       	dc.w $5F0
0001BEB6 0000 0000                  	dc.l Map_SS_Glass
0001BEBA 65F0                       	dc.w $65F0
0001BEBC 0000 0000                  	dc.l Map_SS_Glass
0001BEC0 25F0                       	dc.w $25F0
0001BEC2 0000 0000                  	dc.l Map_SS_Glass
0001BEC6 45F0                       	dc.w $45F0
0001BEC6 45F0                       	dc.w $45F0
0001BEC8                            
0001BEC8                            ; ---------------------------------------------------------------------------
0001BEC8                            ; Sprite mappings - special stage "R" block
0001BEC8                            ; ---------------------------------------------------------------------------
0001BEC8                            Map_SS_R:
0001BEC8                            	include "_maps\SSRblock.asm"
0001BEC8                            ; ---------------------------------------------------------------------------
0001BEC8                            ; Sprite mappings - special stage "R" block
0001BEC8                            ; ---------------------------------------------------------------------------
0001BEC8 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BECC 0000                       		dc.w byte_1B91E-Map_SS_R
0001BECE 01                         byte_1B912:	dc.b 1
0001BECF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BED4 01                         byte_1B918:	dc.b 1
0001BED5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BEDA 00                         byte_1B91E:	dc.b 0
0001BEDC 00                         		even
0001BEDC 00                         		even
0001BEDC                            
0001BEDC                            ; ---------------------------------------------------------------------------
0001BEDC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BEDC                            ; ---------------------------------------------------------------------------
0001BEDC                            Map_SS_Glass:
0001BEDC                            	include "_maps\SSglassblock.asm"
0001BEDC                            ; ---------------------------------------------------------------------------
0001BEDC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BEDC                            ; ---------------------------------------------------------------------------
0001BEDC 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BEE0 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BEE4 01                         byte_1B928:	dc.b 1
0001BEE5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BEEA 01                         byte_1B92E:	dc.b 1
0001BEEB F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BEF0 01                         byte_1B934:	dc.b 1
0001BEF1 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BEF6 01                         byte_1B93A:	dc.b 1
0001BEF7 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BEFC                            		even
0001BEFC                            		even
0001BEFC                            
0001BEFC                            ; ---------------------------------------------------------------------------
0001BEFC                            ; Sprite mappings - special stage "UP" block
0001BEFC                            ; ---------------------------------------------------------------------------
0001BEFC                            Map_SS_Up:
0001BEFC                            	include "_maps\SSUPblock.asm"
0001BEFC                            ; ---------------------------------------------------------------------------
0001BEFC                            ; Sprite mappings - special stage "UP" block
0001BEFC                            ; ---------------------------------------------------------------------------
0001BEFC 0000                       		dc.w byte_1B944-Map_SS_Up
0001BEFE 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF00 01                         byte_1B944:	dc.b 1
0001BF01 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF06 01                         byte_1B94A:	dc.b 1
0001BF07 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF0C                            		even
0001BF0C                            		even
0001BF0C                            
0001BF0C                            ; ---------------------------------------------------------------------------
0001BF0C                            ; Sprite mappings - special stage "DOWN" block
0001BF0C                            ; ---------------------------------------------------------------------------
0001BF0C                            Map_SS_Down:
0001BF0C                            	include "_maps\SSDOWNblock.asm"
0001BF0C                            ; ---------------------------------------------------------------------------
0001BF0C                            ; Sprite mappings - special stage "DOWN" block
0001BF0C                            ; ---------------------------------------------------------------------------
0001BF0C 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF0E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF10 01                         byte_1B954:	dc.b 1
0001BF11 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF16 01                         byte_1B95A:	dc.b 1
0001BF17 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF1C                            		even
0001BF1C                            		even
0001BF1C                            
0001BF1C                            ; ---------------------------------------------------------------------------
0001BF1C                            ; Sprite mappings - special stage chaos	emeralds
0001BF1C                            ; ---------------------------------------------------------------------------
0001BF1C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF1E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF20 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF22 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF24 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF26 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF28 01                         byte_1B96C:	dc.b 1
0001BF29 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF2E 01                         byte_1B972:	dc.b 1
0001BF2F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF34 01                         byte_1B978:	dc.b 1
0001BF35 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BF3A 01                         byte_1B97E:	dc.b 1
0001BF3B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BF40                            		even
0001BF40                            ; ===========================================================================
0001BF40                            ; ---------------------------------------------------------------------------
0001BF40                            ; Object 09 - Sonic (special stage)
0001BF40                            ; ---------------------------------------------------------------------------
0001BF40                            
0001BF40                            Obj09:					; XREF: Obj_Index
0001BF40 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BF44 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BF46 6100 0000                  		bsr.w	SS_FixCamera
0001BF4A 6000 0000                  		bra.w	DebugMode
0001BF4E                            ; ===========================================================================
0001BF4E                            
0001BF4E                            Obj09_Normal:
0001BF4E 7000                       		moveq	#0,d0
0001BF50 1028 0024                  		move.b	$24(a0),d0
0001BF54 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BF58 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BF5C                            ; ===========================================================================
0001BF5C 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BF5E 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BF60 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BF62 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BF64                            ; ===========================================================================
0001BF64                            
0001BF64                            Obj09_Main:				; XREF: Obj09_Index
0001BF64 5428 0024                  		addq.b	#2,$24(a0)
0001BF68 117C 000E 0016             		move.b	#$E,$16(a0)
0001BF6E 117C 0007 0017             		move.b	#7,$17(a0)
0001BF74 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BF7C 317C 0780 0002             		move.w	#$780,2(a0)
0001BF82 117C 0004 0001             		move.b	#4,1(a0)
0001BF88 117C 0000 0018             		move.b	#0,$18(a0)
0001BF8E 117C 0002 001C             		move.b	#2,$1C(a0)
0001BF94 08E8 0002 0022             		bset	#2,$22(a0)
0001BF9A 08E8 0001 0022             		bset	#1,$22(a0)
0001BFA0                            
0001BFA0                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BFA0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BFA4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFA6 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BFAC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFAE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BFB4                            
0001BFB4                            Obj09_NoDebug:
0001BFB4 117C 0000 0030             		move.b	#0,$30(a0)
0001BFBA 7000                       		moveq	#0,d0
0001BFBC 1028 0022                  		move.b	$22(a0),d0
0001BFC0 0240 0002                  		andi.w	#2,d0
0001BFC4 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BFC8 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BFCC 4EBA 8210                  		jsr	LoadSonicDynPLC
0001BFD0 4EF9 0000 DB6C             		jmp	DisplaySprite
0001BFD6                            ; ===========================================================================
0001BFD6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BFD8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BFDA                            ; ===========================================================================
0001BFDA                            
0001BFDA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BFDA 6100 0000                  		bsr.w	Obj09_Jump
0001BFDE 6100 0000                  		bsr.w	Obj09_Move
0001BFE2 6100 0000                  		bsr.w	Obj09_Fall
0001BFE6 6000                       		bra.s	Obj09_Display
0001BFE8                            ; ===========================================================================
0001BFE8                            
0001BFE8                            Obj09_InAir:				; XREF: Obj09_Modes
0001BFE8 6100 0000                  		bsr.w	nullsub_2
0001BFEC 6100 0000                  		bsr.w	Obj09_Move
0001BFF0 6100 0000                  		bsr.w	Obj09_Fall
0001BFF4                            
0001BFF4                            Obj09_Display:				; XREF: Obj09_OnWall
0001BFF4 6100 0000                  		bsr.w	Obj09_ChkItems
0001BFF8 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BFFC 4EB9 0000 DB46             		jsr	SpeedToPos
0001C002 6100 0000                  		bsr.w	SS_FixCamera
0001C006 3038 F780                  		move.w	($FFFFF780).w,d0
0001C00A D078 F782                  		add.w	($FFFFF782).w,d0
0001C00E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C012 4EB9 0001 3F62             		jsr	Sonic_Animate
0001C018 4E75                       		rts	
0001C01A                            
0001C01A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C01A                            
0001C01A                            
0001C01A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C01A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C020 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C022 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C026                            
0001C026                            Obj09_ChkRight:
0001C026 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C02C 6700                       		beq.s	loc_1BA78	; if not, branch
0001C02E 6100 0000                  		bsr.w	Obj09_MoveRight
0001C032                            
0001C032                            loc_1BA78:
0001C032 1038 F602                  		move.b	($FFFFF602).w,d0
0001C036 0200 000C                  		andi.b	#$C,d0
0001C03A 6600                       		bne.s	loc_1BAA8
0001C03C 3028 0014                  		move.w	$14(a0),d0
0001C040 6700                       		beq.s	loc_1BAA8
0001C042 6B00                       		bmi.s	loc_1BA9A
0001C044 0440 000C                  		subi.w	#$C,d0
0001C048 6400                       		bcc.s	loc_1BA94
0001C04A 303C 0000                  		move.w	#0,d0
0001C04E                            
0001C04E                            loc_1BA94:
0001C04E 3140 0014                  		move.w	d0,$14(a0)
0001C052 6000                       		bra.s	loc_1BAA8
0001C054                            ; ===========================================================================
0001C054                            
0001C054                            loc_1BA9A:
0001C054 0640 000C                  		addi.w	#$C,d0
0001C058 6400                       		bcc.s	loc_1BAA4
0001C05A 303C 0000                  		move.w	#0,d0
0001C05E                            
0001C05E                            loc_1BAA4:
0001C05E 3140 0014                  		move.w	d0,$14(a0)
0001C062                            
0001C062                            loc_1BAA8:
0001C062 1038 F780                  		move.b	($FFFFF780).w,d0
0001C066 0600 0020                  		addi.b	#$20,d0
0001C06A 0200 00C0                  		andi.b	#$C0,d0
0001C06E 4400                       		neg.b	d0
0001C070 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C076 C3E8 0014                  		muls.w	$14(a0),d1
0001C07A D3A8 0008                  		add.l	d1,8(a0)
0001C07E C1E8 0014                  		muls.w	$14(a0),d0
0001C082 D1A8 000C                  		add.l	d0,$C(a0)
0001C086 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C08A 2428 000C                  		move.l	$C(a0),d2
0001C08E 2628 0008                  		move.l	8(a0),d3
0001C092 6100 0000                  		bsr.w	sub_1BCE8
0001C096 6700                       		beq.s	loc_1BAF2
0001C098 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C09C 93A8 0008                  		sub.l	d1,8(a0)
0001C0A0 91A8 000C                  		sub.l	d0,$C(a0)
0001C0A4 317C 0000 0014             		move.w	#0,$14(a0)
0001C0AA 4E75                       		rts	
0001C0AC                            ; ===========================================================================
0001C0AC                            
0001C0AC                            loc_1BAF2:
0001C0AC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0B0 4E75                       		rts	
0001C0B2                            ; End of function Obj09_Move
0001C0B2                            
0001C0B2                            
0001C0B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0B2                            
0001C0B2                            
0001C0B2                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C0B2 08E8 0000 0022             		bset	#0,$22(a0)
0001C0B8 3028 0014                  		move.w	$14(a0),d0
0001C0BC 6700                       		beq.s	loc_1BB06
0001C0BE 6A00                       		bpl.s	loc_1BB1A
0001C0C0                            
0001C0C0                            loc_1BB06:
0001C0C0 0440 000C                  		subi.w	#$C,d0
0001C0C4 0C40 F800                  		cmpi.w	#-$800,d0
0001C0C8 6E00                       		bgt.s	loc_1BB14
0001C0CA 303C F800                  		move.w	#-$800,d0
0001C0CE                            
0001C0CE                            loc_1BB14:
0001C0CE 3140 0014                  		move.w	d0,$14(a0)
0001C0D2 4E75                       		rts	
0001C0D4                            ; ===========================================================================
0001C0D4                            
0001C0D4                            loc_1BB1A:
0001C0D4 0440 0040                  		subi.w	#$40,d0
0001C0D8 6400                       		bcc.s	loc_1BB22
0001C0DA 4E71                       		nop	
0001C0DC                            
0001C0DC                            loc_1BB22:
0001C0DC 3140 0014                  		move.w	d0,$14(a0)
0001C0E0 4E75                       		rts	
0001C0E2                            ; End of function Obj09_MoveLeft
0001C0E2                            
0001C0E2                            
0001C0E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0E2                            
0001C0E2                            
0001C0E2                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C0E2 08A8 0000 0022             		bclr	#0,$22(a0)
0001C0E8 3028 0014                  		move.w	$14(a0),d0
0001C0EC 6B00                       		bmi.s	loc_1BB48
0001C0EE 0640 000C                  		addi.w	#$C,d0
0001C0F2 0C40 0800                  		cmpi.w	#$800,d0
0001C0F6 6D00                       		blt.s	loc_1BB42
0001C0F8 303C 0800                  		move.w	#$800,d0
0001C0FC                            
0001C0FC                            loc_1BB42:
0001C0FC 3140 0014                  		move.w	d0,$14(a0)
0001C100 6000                       		bra.s	locret_1BB54
0001C102                            ; ===========================================================================
0001C102                            
0001C102                            loc_1BB48:
0001C102 0640 0040                  		addi.w	#$40,d0
0001C106 6400                       		bcc.s	loc_1BB50
0001C108 4E71                       		nop	
0001C10A                            
0001C10A                            loc_1BB50:
0001C10A 3140 0014                  		move.w	d0,$14(a0)
0001C10E                            
0001C10E                            locret_1BB54:
0001C10E 4E75                       		rts	
0001C110                            ; End of function Obj09_MoveRight
0001C110                            
0001C110                            
0001C110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C110                            
0001C110                            
0001C110                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C110 1038 F603                  		move.b	($FFFFF603).w,d0
0001C114 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C118 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C11A 1038 F780                  		move.b	($FFFFF780).w,d0
0001C11E 0200 00FC                  		andi.b	#$FC,d0
0001C122 4400                       		neg.b	d0
0001C124 0400 0040                  		subi.b	#$40,d0
0001C128 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C12E C3FC 0680                  		muls.w	#$680,d1
0001C132 E081                       		asr.l	#8,d1
0001C134 3141 0010                  		move.w	d1,$10(a0)
0001C138 C1FC 0680                  		muls.w	#$680,d0
0001C13C E080                       		asr.l	#8,d0
0001C13E 3140 0012                  		move.w	d0,$12(a0)
0001C142 08E8 0001 0022             		bset	#1,$22(a0)
0001C148 303C 00A0                  		move.w	#$A0,d0
0001C14C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C152                            
0001C152                            Obj09_NoJump:
0001C152 4E75                       		rts	
0001C154                            ; End of function Obj09_Jump
0001C154                            
0001C154                            
0001C154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C154                            
0001C154                            
0001C154                            nullsub_2:				; XREF: Obj09_InAir
0001C154 4E75                       		rts	
0001C156                            ; End of function nullsub_2
0001C156                            
0001C156                            ; ===========================================================================
0001C156                            ; ---------------------------------------------------------------------------
0001C156                            ; unused subroutine to limit Sonic's upward vertical speed
0001C156                            ; ---------------------------------------------------------------------------
0001C156 323C FC00                  		move.w	#-$400,d1
0001C15A B268 0012                  		cmp.w	$12(a0),d1
0001C15E 6F00                       		ble.s	locret_1BBB4
0001C160 1038 F602                  		move.b	($FFFFF602).w,d0
0001C164 0200 0070                  		andi.b	#$70,d0
0001C168 6600                       		bne.s	locret_1BBB4
0001C16A 3141 0012                  		move.w	d1,$12(a0)
0001C16E                            
0001C16E                            locret_1BBB4:
0001C16E 4E75                       		rts	
0001C170                            ; ---------------------------------------------------------------------------
0001C170                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C170                            ; ---------------------------------------------------------------------------
0001C170                            
0001C170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C170                            
0001C170                            
0001C170                            SS_FixCamera:				; XREF: Obj09
0001C170 3428 000C                  		move.w	$C(a0),d2
0001C174 3628 0008                  		move.w	8(a0),d3
0001C178 3038 F700                  		move.w	($FFFFF700).w,d0
0001C17C 0443 00A0                  		subi.w	#$A0,d3
0001C180 6500                       		bcs.s	loc_1BBCE
0001C182 9043                       		sub.w	d3,d0
0001C184 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C188                            
0001C188                            loc_1BBCE:
0001C188 3038 F704                  		move.w	($FFFFF704).w,d0
0001C18C 0442 0070                  		subi.w	#$70,d2
0001C190 6500                       		bcs.s	locret_1BBDE
0001C192 9042                       		sub.w	d2,d0
0001C194 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C198                            
0001C198                            locret_1BBDE:
0001C198 4E75                       		rts	
0001C19A                            ; End of function SS_FixCamera
0001C19A                            
0001C19A                            ; ===========================================================================
0001C19A                            
0001C19A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C19A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C1A0 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C1A6 6600                       		bne.s	loc_1BBF4
0001C1A8 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C1AE                            
0001C1AE                            loc_1BBF4:
0001C1AE 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C1B4 6D00                       		blt.s	loc_1BC12
0001C1B6 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C1BC 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C1C2 5428 0024                  		addq.b	#2,$24(a0)
0001C1C6 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C1CC                            
0001C1CC                            loc_1BC12:
0001C1CC 3038 F780                  		move.w	($FFFFF780).w,d0
0001C1D0 D078 F782                  		add.w	($FFFFF782).w,d0
0001C1D4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C1D8 4EB9 0001 3F62             		jsr	Sonic_Animate
0001C1DE 4EB9 0001 41DE             		jsr	LoadSonicDynPLC
0001C1E4 6100 FF8A                  		bsr.w	SS_FixCamera
0001C1E8 4EF9 0000 DB6C             		jmp	DisplaySprite
0001C1EE                            ; ===========================================================================
0001C1EE                            
0001C1EE                            Obj09_Exit2:				; XREF: Obj09_Index
0001C1EE 5368 0038                  		subq.w	#1,$38(a0)
0001C1F2 6600                       		bne.s	loc_1BC40
0001C1F4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C1FA                            
0001C1FA                            loc_1BC40:
0001C1FA 4EB9 0001 3F62             		jsr	Sonic_Animate
0001C200 4EB9 0001 41DE             		jsr	LoadSonicDynPLC
0001C206 6100 FF68                  		bsr.w	SS_FixCamera
0001C20A 4EF9 0000 DB6C             		jmp	DisplaySprite
0001C210                            
0001C210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C210                            
0001C210                            
0001C210                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C210 2428 000C                  		move.l	$C(a0),d2
0001C214 2628 0008                  		move.l	8(a0),d3
0001C218 1038 F780                  		move.b	($FFFFF780).w,d0
0001C21C 0200 00FC                  		andi.b	#$FC,d0
0001C220 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C226 3828 0010                  		move.w	$10(a0),d4
0001C22A 48C4                       		ext.l	d4
0001C22C E184                       		asl.l	#8,d4
0001C22E C1FC 002A                  		muls.w	#$2A,d0
0001C232 D084                       		add.l	d4,d0
0001C234 3828 0012                  		move.w	$12(a0),d4
0001C238 48C4                       		ext.l	d4
0001C23A E184                       		asl.l	#8,d4
0001C23C C3FC 002A                  		muls.w	#$2A,d1
0001C240 D284                       		add.l	d4,d1
0001C242 D680                       		add.l	d0,d3
0001C244 6100 0000                  		bsr.w	sub_1BCE8
0001C248 6700                       		beq.s	loc_1BCB0
0001C24A 9680                       		sub.l	d0,d3
0001C24C 7000                       		moveq	#0,d0
0001C24E 3140 0010                  		move.w	d0,$10(a0)
0001C252 08A8 0001 0022             		bclr	#1,$22(a0)
0001C258 D481                       		add.l	d1,d2
0001C25A 6100 0000                  		bsr.w	sub_1BCE8
0001C25E 6700                       		beq.s	loc_1BCC6
0001C260 9481                       		sub.l	d1,d2
0001C262 7200                       		moveq	#0,d1
0001C264 3141 0012                  		move.w	d1,$12(a0)
0001C268 4E75                       		rts	
0001C26A                            ; ===========================================================================
0001C26A                            
0001C26A                            loc_1BCB0:
0001C26A D481                       		add.l	d1,d2
0001C26C 6100 0000                  		bsr.w	sub_1BCE8
0001C270 6700                       		beq.s	loc_1BCD4
0001C272 9481                       		sub.l	d1,d2
0001C274 7200                       		moveq	#0,d1
0001C276 3141 0012                  		move.w	d1,$12(a0)
0001C27A 08A8 0001 0022             		bclr	#1,$22(a0)
0001C280                            
0001C280                            loc_1BCC6:
0001C280 E080                       		asr.l	#8,d0
0001C282 E081                       		asr.l	#8,d1
0001C284 3140 0010                  		move.w	d0,$10(a0)
0001C288 3141 0012                  		move.w	d1,$12(a0)
0001C28C 4E75                       		rts	
0001C28E                            ; ===========================================================================
0001C28E                            
0001C28E                            loc_1BCD4:
0001C28E E080                       		asr.l	#8,d0
0001C290 E081                       		asr.l	#8,d1
0001C292 3140 0010                  		move.w	d0,$10(a0)
0001C296 3141 0012                  		move.w	d1,$12(a0)
0001C29A 08E8 0001 0022             		bset	#1,$22(a0)
0001C2A0 4E75                       		rts	
0001C2A2                            ; End of function Obj09_Fall
0001C2A2                            
0001C2A2                            
0001C2A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2A2                            
0001C2A2                            
0001C2A2                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C2A2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C2A8 7800                       		moveq	#0,d4
0001C2AA 4842                       		swap	d2
0001C2AC 3802                       		move.w	d2,d4
0001C2AE 4842                       		swap	d2
0001C2B0 0644 0044                  		addi.w	#$44,d4
0001C2B4 88FC 0018                  		divu.w	#$18,d4
0001C2B8 C8FC 0080                  		mulu.w	#$80,d4
0001C2BC D3C4                       		adda.l	d4,a1
0001C2BE 7800                       		moveq	#0,d4
0001C2C0 4843                       		swap	d3
0001C2C2 3803                       		move.w	d3,d4
0001C2C4 4843                       		swap	d3
0001C2C6 0644 0014                  		addi.w	#$14,d4
0001C2CA 88FC 0018                  		divu.w	#$18,d4
0001C2CE D2C4                       		adda.w	d4,a1
0001C2D0 7A00                       		moveq	#0,d5
0001C2D2 1819                       		move.b	(a1)+,d4
0001C2D4 6100                       		bsr.s	sub_1BD30
0001C2D6 1819                       		move.b	(a1)+,d4
0001C2D8 6100                       		bsr.s	sub_1BD30
0001C2DA D2FC 007E                  		adda.w	#$7E,a1
0001C2DE 1819                       		move.b	(a1)+,d4
0001C2E0 6100                       		bsr.s	sub_1BD30
0001C2E2 1819                       		move.b	(a1)+,d4
0001C2E4 6100                       		bsr.s	sub_1BD30
0001C2E6 4A05                       		tst.b	d5
0001C2E8 4E75                       		rts	
0001C2EA                            ; End of function sub_1BCE8
0001C2EA                            
0001C2EA                            
0001C2EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2EA                            
0001C2EA                            
0001C2EA                            sub_1BD30:				; XREF: sub_1BCE8
0001C2EA 6700                       		beq.s	locret_1BD44
0001C2EC 0C04 0028                  		cmpi.b	#$28,d4
0001C2F0 6700                       		beq.s	locret_1BD44
0001C2F2 0C04 003A                  		cmpi.b	#$3A,d4
0001C2F6 6500                       		bcs.s	loc_1BD46
0001C2F8 0C04 004B                  		cmpi.b	#$4B,d4
0001C2FC 6400                       		bcc.s	loc_1BD46
0001C2FE                            
0001C2FE                            locret_1BD44:
0001C2FE 4E75                       		rts	
0001C300                            ; ===========================================================================
0001C300                            
0001C300                            loc_1BD46:
0001C300 1144 0030                  		move.b	d4,$30(a0)
0001C304 2149 0032                  		move.l	a1,$32(a0)
0001C308 7AFF                       		moveq	#-1,d5
0001C30A 4E75                       		rts	
0001C30C                            ; End of function sub_1BD30
0001C30C                            
0001C30C                            
0001C30C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C30C                            
0001C30C                            
0001C30C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C30C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C312 7800                       		moveq	#0,d4
0001C314 3828 000C                  		move.w	$C(a0),d4
0001C318 0644 0050                  		addi.w	#$50,d4
0001C31C 88FC 0018                  		divu.w	#$18,d4
0001C320 C8FC 0080                  		mulu.w	#$80,d4
0001C324 D3C4                       		adda.l	d4,a1
0001C326 7800                       		moveq	#0,d4
0001C328 3828 0008                  		move.w	8(a0),d4
0001C32C 0644 0020                  		addi.w	#$20,d4
0001C330 88FC 0018                  		divu.w	#$18,d4
0001C334 D2C4                       		adda.w	d4,a1
0001C336 1811                       		move.b	(a1),d4
0001C338 6600                       		bne.s	Obj09_ChkCont
0001C33A 4A28 003A                  		tst.b	$3A(a0)
0001C33E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C342 7800                       		moveq	#0,d4
0001C344 4E75                       		rts	
0001C346                            ; ===========================================================================
0001C346                            
0001C346                            Obj09_ChkCont:
0001C346 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C34A 6600                       		bne.s	Obj09_Chk1Up
0001C34C 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C350 6600                       		bne.s	Obj09_GetCont
0001C352 14BC 0001                  		move.b	#1,(a2)
0001C356 2549 0004                  		move.l	a1,4(a2)
0001C35A                            
0001C35A                            Obj09_GetCont:
0001C35A 4EB9 0000 A0C8             		jsr	CollectRing
0001C360 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C366 6500                       		bcs.s	Obj09_NoCont
0001C368 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C36E 6600                       		bne.s	Obj09_NoCont
0001C370 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C374 303C 00BF                  		move.w	#$BF,d0
0001C378 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C37E                            
0001C37E                            Obj09_NoCont:
0001C37E 7800                       		moveq	#0,d4
0001C380 4E75                       		rts	
0001C382                            ; ===========================================================================
0001C382                            
0001C382                            Obj09_Chk1Up:
0001C382 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C386 6600                       		bne.s	Obj09_ChkEmer
0001C388 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C38C 6600                       		bne.s	Obj09_Get1Up
0001C38E 14BC 0003                  		move.b	#3,(a2)
0001C392 2549 0004                  		move.l	a1,4(a2)
0001C396                            
0001C396                            Obj09_Get1Up:
0001C396 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C39A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C39E 303C 0088                  		move.w	#$88,d0
0001C3A2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C3A8 7800                       		moveq	#0,d4
0001C3AA 4E75                       		rts	
0001C3AC                            ; ===========================================================================
0001C3AC                            
0001C3AC                            Obj09_ChkEmer:
0001C3AC 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C3B0 6500                       		bcs.s	Obj09_ChkGhost
0001C3B2 0C04 0040                  		cmpi.b	#$40,d4
0001C3B6 6200                       		bhi.s	Obj09_ChkGhost
0001C3B8 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C3BC 6600                       		bne.s	Obj09_GetEmer
0001C3BE 14BC 0005                  		move.b	#5,(a2)
0001C3C2 2549 0004                  		move.l	a1,4(a2)
0001C3C6                            
0001C3C6                            Obj09_GetEmer:
0001C3C6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C3CC 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C3CE 0404 003B                  		subi.b	#$3B,d4
0001C3D2 7000                       		moveq	#0,d0
0001C3D4 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C3D8 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C3DC 1584 0000                  		move.b	d4,(a2,d0.w)
0001C3E0 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C3E4                            
0001C3E4                            Obj09_NoEmer:
0001C3E4 303C 0093                  		move.w	#$93,d0
0001C3E8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C3EE 7800                       		moveq	#0,d4
0001C3F0 4E75                       		rts	
0001C3F2                            ; ===========================================================================
0001C3F2                            
0001C3F2                            Obj09_ChkGhost:
0001C3F2 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C3F6 6600                       		bne.s	Obj09_ChkGhostTag
0001C3F8 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C3FE                            
0001C3FE                            Obj09_ChkGhostTag:
0001C3FE 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C402 6600                       		bne.s	Obj09_NoGhost
0001C404 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C40A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C40C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C412                            
0001C412                            Obj09_NoGhost:
0001C412 78FF                       		moveq	#-1,d4
0001C414 4E75                       		rts	
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            Obj09_MakeGhostSolid:
0001C416 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C41C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C41E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C424 723F                       		moveq	#$3F,d1
0001C426                            
0001C426                            Obj09_GhostLoop2:
0001C426 743F                       		moveq	#$3F,d2
0001C428                            
0001C428                            Obj09_GhostLoop:
0001C428 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C42C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C42E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C432                            
0001C432                            Obj09_NoReplace:
0001C432 5249                       		addq.w	#1,a1
0001C434 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C438 43E9 0040                  		lea	$40(a1),a1
0001C43C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C440                            
0001C440                            Obj09_GhostNotSolid:
0001C440 4228 003A                  		clr.b	$3A(a0)
0001C444 7800                       		moveq	#0,d4
0001C446 4E75                       		rts	
0001C448                            ; End of function Obj09_ChkItems
0001C448                            
0001C448                            
0001C448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C448                            
0001C448                            
0001C448                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C448 1028 0030                  		move.b	$30(a0),d0
0001C44C 6600                       		bne.s	Obj09_ChkBumper
0001C44E 5328 0036                  		subq.b	#1,$36(a0)
0001C452 6A00                       		bpl.s	loc_1BEA0
0001C454 117C 0000 0036             		move.b	#0,$36(a0)
0001C45A                            
0001C45A                            loc_1BEA0:
0001C45A 5328 0037                  		subq.b	#1,$37(a0)
0001C45E 6A00                       		bpl.s	locret_1BEAC
0001C460 117C 0000 0037             		move.b	#0,$37(a0)
0001C466                            
0001C466                            locret_1BEAC:
0001C466 4E75                       		rts	
0001C468                            ; ===========================================================================
0001C468                            
0001C468                            Obj09_ChkBumper:
0001C468 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C46C 6600                       		bne.s	Obj09_GOAL
0001C46E 2228 0032                  		move.l	$32(a0),d1
0001C472 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C478 3401                       		move.w	d1,d2
0001C47A 0241 007F                  		andi.w	#$7F,d1
0001C47E C2FC 0018                  		mulu.w	#$18,d1
0001C482 0441 0014                  		subi.w	#$14,d1
0001C486 EE4A                       		lsr.w	#7,d2
0001C488 0242 007F                  		andi.w	#$7F,d2
0001C48C C4FC 0018                  		mulu.w	#$18,d2
0001C490 0442 0044                  		subi.w	#$44,d2
0001C494 9268 0008                  		sub.w	8(a0),d1
0001C498 9468 000C                  		sub.w	$C(a0),d2
0001C49C 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C4A2 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C4A8 C3FC F900                  		muls.w	#-$700,d1
0001C4AC E081                       		asr.l	#8,d1
0001C4AE 3141 0010                  		move.w	d1,$10(a0)
0001C4B2 C1FC F900                  		muls.w	#-$700,d0
0001C4B6 E080                       		asr.l	#8,d0
0001C4B8 3140 0012                  		move.w	d0,$12(a0)
0001C4BC 08E8 0001 0022             		bset	#1,$22(a0)
0001C4C2 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C4C6 6600                       		bne.s	Obj09_BumpSnd
0001C4C8 14BC 0002                  		move.b	#2,(a2)
0001C4CC 2028 0032                  		move.l	$32(a0),d0
0001C4D0 5380                       		subq.l	#1,d0
0001C4D2 2540 0004                  		move.l	d0,4(a2)
0001C4D6                            
0001C4D6                            Obj09_BumpSnd:
0001C4D6 303C 00B4                  		move.w	#$B4,d0
0001C4DA 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C4E0                            ; ===========================================================================
0001C4E0                            
0001C4E0                            Obj09_GOAL:
0001C4E0 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C4E4 6600                       		bne.s	Obj09_UPblock
0001C4E6 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C4EA 303C 00A8                  		move.w	#$A8,d0		; change item
0001C4EE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C4F4 4E75                       		rts	
0001C4F6                            ; ===========================================================================
0001C4F6                            
0001C4F6                            Obj09_UPblock:
0001C4F6 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C4FA 6600                       		bne.s	Obj09_DOWNblock
0001C4FC 4A28 0036                  		tst.b	$36(a0)
0001C500 6600 0000                  		bne.w	Obj09_NoGlass
0001C504 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C50A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C510 6700                       		beq.s	Obj09_UPsnd
0001C512 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C516 2268 0032                  		movea.l	$32(a0),a1
0001C51A 5389                       		subq.l	#1,a1
0001C51C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C520                            
0001C520                            Obj09_UPsnd:
0001C520 303C 00A9                  		move.w	#$A9,d0
0001C524 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C52A                            ; ===========================================================================
0001C52A                            
0001C52A                            Obj09_DOWNblock:
0001C52A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C52E 6600                       		bne.s	Obj09_Rblock
0001C530 4A28 0036                  		tst.b	$36(a0)
0001C534 6600 0000                  		bne.w	Obj09_NoGlass
0001C538 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C53E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C544 6600                       		bne.s	Obj09_DOWNsnd
0001C546 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C54A 2268 0032                  		movea.l	$32(a0),a1
0001C54E 5389                       		subq.l	#1,a1
0001C550 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C554                            
0001C554                            Obj09_DOWNsnd:
0001C554 303C 00A9                  		move.w	#$A9,d0
0001C558 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C55E                            ; ===========================================================================
0001C55E                            
0001C55E                            Obj09_Rblock:
0001C55E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C562 6600                       		bne.s	Obj09_ChkGlass
0001C564 4A28 0037                  		tst.b	$37(a0)
0001C568 6600 0000                  		bne.w	Obj09_NoGlass
0001C56C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C572 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C576 6600                       		bne.s	Obj09_RevStage
0001C578 14BC 0004                  		move.b	#4,(a2)
0001C57C 2028 0032                  		move.l	$32(a0),d0
0001C580 5380                       		subq.l	#1,d0
0001C582 2540 0004                  		move.l	d0,4(a2)
0001C586                            
0001C586                            Obj09_RevStage:
0001C586 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C58A 303C 00A9                  		move.w	#$A9,d0
0001C58E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C594                            ; ===========================================================================
0001C594                            
0001C594                            Obj09_ChkGlass:
0001C594 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C598 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C59A 0C00 002E                  		cmpi.b	#$2E,d0
0001C59E 6700                       		beq.s	Obj09_Glass
0001C5A0 0C00 002F                  		cmpi.b	#$2F,d0
0001C5A4 6700                       		beq.s	Obj09_Glass
0001C5A6 0C00 0030                  		cmpi.b	#$30,d0
0001C5AA 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C5AC                            
0001C5AC                            Obj09_Glass:
0001C5AC 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C5B0 6600                       		bne.s	Obj09_GlassSnd
0001C5B2 14BC 0006                  		move.b	#6,(a2)
0001C5B6 2268 0032                  		movea.l	$32(a0),a1
0001C5BA 5389                       		subq.l	#1,a1
0001C5BC 2549 0004                  		move.l	a1,4(a2)
0001C5C0 1011                       		move.b	(a1),d0
0001C5C2 5200                       		addq.b	#1,d0		; change glass type when touched
0001C5C4 0C00 0030                  		cmpi.b	#$30,d0
0001C5C8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C5CA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C5CC                            
0001C5CC                            Obj09_GlassUpdate:
0001C5CC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C5D0                            
0001C5D0                            Obj09_GlassSnd:
0001C5D0 303C 00BA                  		move.w	#$BA,d0
0001C5D4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C5DA                            ; ===========================================================================
0001C5DA                            
0001C5DA                            Obj09_NoGlass:
0001C5DA 4E75                       		rts	
0001C5DC                            ; End of function Obj09_ChkItems2
0001C5DC                            
0001C5DC                            ; ===========================================================================
0001C5DC                            ; ---------------------------------------------------------------------------
0001C5DC                            ; Object 10 - blank
0001C5DC                            ; ---------------------------------------------------------------------------
0001C5DC                            
0001C5DC                            Obj10:					; XREF: Obj_Index
0001C5DC 4E75                       		rts	
0001C5DE                            ; ---------------------------------------------------------------------------
0001C5DE                            ; Subroutine to	animate	level graphics
0001C5DE                            ; ---------------------------------------------------------------------------
0001C5DE                            
0001C5DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5DE                            
0001C5DE                            
0001C5DE                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C5DE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C5E2 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C5E4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C5EA 6100 0000                  		bsr.w	AniArt_GiantRing
0001C5EE 7000                       		moveq	#0,d0
0001C5F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C5F4 D040                       		add.w	d0,d0
0001C5F6 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C5FA 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C5FE                            ; ===========================================================================
0001C5FE                            
0001C5FE                            AniArt_Pause:
0001C5FE 4E75                       		rts	
0001C600                            ; End of function AniArt_Load
0001C600                            
0001C600                            ; ===========================================================================
0001C600 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C604 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C608 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C60C 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C60E                            ; ===========================================================================
0001C60E                            ; ---------------------------------------------------------------------------
0001C60E                            ; Animated pattern routine - Green Hill
0001C60E                            ; ---------------------------------------------------------------------------
0001C60E                            
0001C60E                            AniArt_GHZ:				; XREF: AniArt_Index
0001C60E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C612 6A00                       		bpl.s	loc_1C08A
0001C614 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C61A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C620 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C624 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C628 0240 0001                  		andi.w	#1,d0
0001C62C 6700                       		beq.s	loc_1C078
0001C62E 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C632                            
0001C632                            loc_1C078:
0001C632 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C63C 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C640 6000 0000                  		bra.w	LoadTiles
0001C644                            ; ===========================================================================
0001C644                            
0001C644                            loc_1C08A:
0001C644 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C648 6A00                       		bpl.s	loc_1C0C0
0001C64A 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C650 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C656 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C65A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C65E 0240 0001                  		andi.w	#1,d0
0001C662 6700                       		beq.s	loc_1C0AE
0001C664 43E9 0200                  		lea	$200(a1),a1
0001C668                            
0001C668                            loc_1C0AE:
0001C668 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C672 323C 000F                  		move.w	#$F,d1
0001C676 6000 0000                  		bra.w	LoadTiles
0001C67A                            ; ===========================================================================
0001C67A                            
0001C67A                            loc_1C0C0:
0001C67A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C67E 6A00                       		bpl.s	locret_1C10C
0001C680 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C686 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C68A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C68E 0240 0003                  		andi.w	#3,d0
0001C692 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C696 0800 0000                  		btst	#0,d0
0001C69A 6600                       		bne.s	loc_1C0E8
0001C69C 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C6A2                            
0001C6A2                            loc_1C0E8:
0001C6A2 EF48                       		lsl.w	#7,d0
0001C6A4 3200                       		move.w	d0,d1
0001C6A6 D040                       		add.w	d0,d0
0001C6A8 D041                       		add.w	d1,d0
0001C6AA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C6B4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C6BA 43F1 0000                  		lea	(a1,d0.w),a1
0001C6BE 323C 000B                  		move.w	#$B,d1
0001C6C2 6100 0000                  		bsr.w	LoadTiles
0001C6C6                            
0001C6C6                            locret_1C10C:
0001C6C6 4E75                       		rts	
0001C6C8                            ; ===========================================================================
0001C6C8 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C6CC                            ; ===========================================================================
0001C6CC                            ; ---------------------------------------------------------------------------
0001C6CC                            ; Animated pattern routine - Marble
0001C6CC                            ; ---------------------------------------------------------------------------
0001C6CC                            
0001C6CC                            AniArt_MZ:				; XREF: AniArt_Index
0001C6CC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C6D0 6A00                       		bpl.s	loc_1C150
0001C6D2 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C6D8 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C6DE 7000                       		moveq	#0,d0
0001C6E0 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C6E4 5200                       		addq.b	#1,d0
0001C6E6 0C00 0003                  		cmpi.b	#3,d0
0001C6EA 6600                       		bne.s	loc_1C134
0001C6EC 7000                       		moveq	#0,d0
0001C6EE                            
0001C6EE                            loc_1C134:
0001C6EE 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C6F2 C0FC 0100                  		mulu.w	#$100,d0
0001C6F6 D2C0                       		adda.w	d0,a1
0001C6F8 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C702 323C 0007                  		move.w	#7,d1
0001C706 6100 0000                  		bsr.w	LoadTiles
0001C70A                            
0001C70A                            loc_1C150:
0001C70A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C70E 6A00                       		bpl.s	loc_1C1AE
0001C710 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C716 7000                       		moveq	#0,d0
0001C718 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C71C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C722 EE58                       		ror.w	#7,d0
0001C724 D8C0                       		adda.w	d0,a4
0001C726 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C730 7600                       		moveq	#0,d3
0001C732 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C736 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C73A 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C73E 343C 0003                  		move.w	#3,d2
0001C742                            
0001C742                            loc_1C188:
0001C742 3003                       		move.w	d3,d0
0001C744 D040                       		add.w	d0,d0
0001C746 0240 001E                  		andi.w	#$1E,d0
0001C74A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C750 3033 0000                  		move.w	(a3,d0.w),d0
0001C754 47F3 0000                  		lea	(a3,d0.w),a3
0001C758 224C                       		movea.l	a4,a1
0001C75A 323C 001F                  		move.w	#$1F,d1
0001C75E 4E93                       		jsr	(a3)
0001C760 5843                       		addq.w	#4,d3
0001C762 51CA FFDE                  		dbf	d2,loc_1C188
0001C766 4E75                       		rts	
0001C768                            ; ===========================================================================
0001C768                            
0001C768                            loc_1C1AE:
0001C768 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C76C 6A00 0000                  		bpl.w	locret_1C1EA
0001C770 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C776 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C77C 7000                       		moveq	#0,d0
0001C77E 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C782 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C786 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C78C C0FC 00C0                  		mulu.w	#$C0,d0
0001C790 D2C0                       		adda.w	d0,a1
0001C792 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C79C 323C 0005                  		move.w	#5,d1
0001C7A0 6000 0000                  		bra.w	LoadTiles
0001C7A4                            ; ===========================================================================
0001C7A4                            
0001C7A4                            locret_1C1EA:
0001C7A4 4E75                       		rts	
0001C7A6                            ; ===========================================================================
0001C7A6                            ; ---------------------------------------------------------------------------
0001C7A6                            ; Animated pattern routine - Scrap Brain
0001C7A6                            ; ---------------------------------------------------------------------------
0001C7A6                            
0001C7A6                            AniArt_SBZ:				; XREF: AniArt_Index
0001C7A6 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C7AA 6700                       		beq.s	loc_1C1F8
0001C7AC 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C7B0 6000                       		bra.s	loc_1C250
0001C7B2                            ; ===========================================================================
0001C7B2                            
0001C7B2                            loc_1C1F8:
0001C7B2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C7B6 6A00                       		bpl.s	loc_1C250
0001C7B8 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C7BE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C7C4 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C7CE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C7D2 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C7D6 0240 0007                  		andi.w	#7,d0
0001C7DA 6700                       		beq.s	loc_1C234
0001C7DC 5340                       		subq.w	#1,d0
0001C7DE C0FC 0180                  		mulu.w	#$180,d0
0001C7E2 43F1 0000                  		lea	(a1,d0.w),a1
0001C7E6 323C 000B                  		move.w	#$B,d1
0001C7EA 6000 0000                  		bra.w	LoadTiles
0001C7EE                            ; ===========================================================================
0001C7EE                            
0001C7EE                            loc_1C234:
0001C7EE 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C7F4                            
0001C7F4                            loc_1C23A:
0001C7F4 323C 0005                  		move.w	#5,d1
0001C7F8 6100 0000                  		bsr.w	LoadTiles
0001C7FC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C802 323C 0005                  		move.w	#5,d1
0001C806 6000 0000                  		bra.w	LoadTiles
0001C80A                            ; ===========================================================================
0001C80A                            
0001C80A                            loc_1C250:
0001C80A 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C80E 6700                       		beq.s	loc_1C25C
0001C810 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C814 6000                       		bra.s	locret_1C2A0
0001C816                            ; ===========================================================================
0001C816                            
0001C816                            loc_1C25C:
0001C816 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C81A 6A00                       		bpl.s	locret_1C2A0
0001C81C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C822 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C828 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C832 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C836 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C83A 0240 0007                  		andi.w	#7,d0
0001C83E 6700                       		beq.s	loc_1C298
0001C840 5340                       		subq.w	#1,d0
0001C842 C0FC 0180                  		mulu.w	#$180,d0
0001C846 43F1 0000                  		lea	(a1,d0.w),a1
0001C84A 323C 000B                  		move.w	#$B,d1
0001C84E 6000 0000                  		bra.w	LoadTiles
0001C852                            ; ===========================================================================
0001C852                            
0001C852                            loc_1C298:
0001C852 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C858 609A                       		bra.s	loc_1C23A
0001C85A                            ; ===========================================================================
0001C85A                            
0001C85A                            locret_1C2A0:
0001C85A 4E75                       		rts	
0001C85C                            ; ===========================================================================
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C                            ; Animated pattern routine - ending sequence
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C                            
0001C85C                            AniArt_Ending:				; XREF: AniArt_Index
0001C85C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C860 6A00                       		bpl.s	loc_1C2F4
0001C862 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C868 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C86E 45F8 9400                  		lea	($FFFF9400).w,a2
0001C872 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C876 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C87A 0240 0001                  		andi.w	#1,d0
0001C87E 6700                       		beq.s	loc_1C2CE
0001C880 43E9 0200                  		lea	$200(a1),a1
0001C884 45EA 0200                  		lea	$200(a2),a2
0001C888                            
0001C888                            loc_1C2CE:
0001C888 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C892 323C 000F                  		move.w	#$F,d1
0001C896 6100 0000                  		bsr.w	LoadTiles
0001C89A 224A                       		movea.l	a2,a1
0001C89C 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C8A6 323C 000F                  		move.w	#$F,d1
0001C8AA 6000 0000                  		bra.w	LoadTiles
0001C8AE                            ; ===========================================================================
0001C8AE                            
0001C8AE                            loc_1C2F4:
0001C8AE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8B2 6A00                       		bpl.s	loc_1C33C
0001C8B4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C8BA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C8BE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C8C2 0240 0007                  		andi.w	#7,d0
0001C8C6 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C8CA EF48                       		lsl.w	#7,d0
0001C8CC 3200                       		move.w	d0,d1
0001C8CE D040                       		add.w	d0,d0
0001C8D0 D041                       		add.w	d1,d0
0001C8D2 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C8DC 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C8E2 43F1 0000                  		lea	(a1,d0.w),a1
0001C8E6 323C 000B                  		move.w	#$B,d1
0001C8EA 6000 0000                  		bra.w	LoadTiles
0001C8EE                            ; ===========================================================================
0001C8EE 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C8F6                            ; ===========================================================================
0001C8F6                            
0001C8F6                            loc_1C33C:
0001C8F6 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C8FA 6A00                       		bpl.s	loc_1C37A
0001C8FC 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C902 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C906 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C90A 0240 0003                  		andi.w	#3,d0
0001C90E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C912 E148                       		lsl.w	#8,d0
0001C914 D040                       		add.w	d0,d0
0001C916 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C920 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C924 43F1 0000                  		lea	(a1,d0.w),a1
0001C928 323C 000F                  		move.w	#$F,d1
0001C92C 6000 0000                  		bra.w	LoadTiles
0001C930                            ; ===========================================================================
0001C930 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C934                            ; ===========================================================================
0001C934                            
0001C934                            loc_1C37A:
0001C934 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C938 6A00                       		bpl.s	locret_1C3B4
0001C93A 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C940 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C944 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C948 0240 0003                  		andi.w	#3,d0
0001C94C 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C950 E148                       		lsl.w	#8,d0
0001C952 D040                       		add.w	d0,d0
0001C954 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C95E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C962 43F1 0000                  		lea	(a1,d0.w),a1
0001C966 323C 000F                  		move.w	#$F,d1
0001C96A 6000 0000                  		bra.w	LoadTiles
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            locret_1C3B4:
0001C96E 4E75                       		rts	
0001C970                            ; ===========================================================================
0001C970                            
0001C970                            AniArt_none:				; XREF: AniArt_Index
0001C970 4E75                       		rts	
0001C972                            
0001C972                            ; ---------------------------------------------------------------------------
0001C972                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C972                            ; ---------------------------------------------------------------------------
0001C972                            
0001C972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C972                            
0001C972                            
0001C972                            LoadTiles:
0001C972 2C99                       		move.l	(a1)+,(a6)
0001C974 2C99                       		move.l	(a1)+,(a6)
0001C976 2C99                       		move.l	(a1)+,(a6)
0001C978 2C99                       		move.l	(a1)+,(a6)
0001C97A 2C99                       		move.l	(a1)+,(a6)
0001C97C 2C99                       		move.l	(a1)+,(a6)
0001C97E 2C99                       		move.l	(a1)+,(a6)
0001C980 2C99                       		move.l	(a1)+,(a6)
0001C982 51C9 FFEE                  		dbf	d1,LoadTiles
0001C986 4E75                       		rts	
0001C988                            ; End of function LoadTiles
0001C988                            
0001C988                            ; ===========================================================================
0001C988                            ; ---------------------------------------------------------------------------
0001C988                            ; Animated pattern routine - more Marble Zone
0001C988                            ; ---------------------------------------------------------------------------
0001C988 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C98C 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C990 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C994 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C998 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C99C 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C9A0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C9A4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C9A8                            ; ===========================================================================
0001C9A8                            
0001C9A8                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C9A8 2C91                       		move.l	(a1),(a6)
0001C9AA 43E9 0010                  		lea	$10(a1),a1
0001C9AE 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C9B2 4E75                       		rts	
0001C9B4                            ; ===========================================================================
0001C9B4                            
0001C9B4                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C9B4 2029 0002                  		move.l	2(a1),d0
0001C9B8 1029 0001                  		move.b	1(a1),d0
0001C9BC E098                       		ror.l	#8,d0
0001C9BE 2C80                       		move.l	d0,(a6)
0001C9C0 43E9 0010                  		lea	$10(a1),a1
0001C9C4 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C9C8 4E75                       		rts	
0001C9CA                            ; ===========================================================================
0001C9CA                            
0001C9CA                            loc_1C410:				; XREF: AniArt_MZextra
0001C9CA 2CA9 0002                  		move.l	2(a1),(a6)
0001C9CE 43E9 0010                  		lea	$10(a1),a1
0001C9D2 51C9 FFF6                  		dbf	d1,loc_1C410
0001C9D6 4E75                       		rts	
0001C9D8                            ; ===========================================================================
0001C9D8                            
0001C9D8                            loc_1C41E:				; XREF: AniArt_MZextra
0001C9D8 2029 0004                  		move.l	4(a1),d0
0001C9DC 1029 0003                  		move.b	3(a1),d0
0001C9E0 E098                       		ror.l	#8,d0
0001C9E2 2C80                       		move.l	d0,(a6)
0001C9E4 43E9 0010                  		lea	$10(a1),a1
0001C9E8 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C9EC 4E75                       		rts	
0001C9EE                            ; ===========================================================================
0001C9EE                            
0001C9EE                            loc_1C434:				; XREF: AniArt_MZextra
0001C9EE 2CA9 0004                  		move.l	4(a1),(a6)
0001C9F2 43E9 0010                  		lea	$10(a1),a1
0001C9F6 51C9 FFF6                  		dbf	d1,loc_1C434
0001C9FA 4E75                       		rts	
0001C9FC                            ; ===========================================================================
0001C9FC                            
0001C9FC                            loc_1C442:				; XREF: AniArt_MZextra
0001C9FC 2029 0006                  		move.l	6(a1),d0
0001CA00 1029 0005                  		move.b	5(a1),d0
0001CA04 E098                       		ror.l	#8,d0
0001CA06 2C80                       		move.l	d0,(a6)
0001CA08 43E9 0010                  		lea	$10(a1),a1
0001CA0C 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA10 4E75                       		rts	
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            loc_1C458:				; XREF: AniArt_MZextra
0001CA12 2CA9 0006                  		move.l	6(a1),(a6)
0001CA16 43E9 0010                  		lea	$10(a1),a1
0001CA1A 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA1E 4E75                       		rts	
0001CA20                            ; ===========================================================================
0001CA20                            
0001CA20                            loc_1C466:				; XREF: AniArt_MZextra
0001CA20 2029 0008                  		move.l	8(a1),d0
0001CA24 1029 0007                  		move.b	7(a1),d0
0001CA28 E098                       		ror.l	#8,d0
0001CA2A 2C80                       		move.l	d0,(a6)
0001CA2C 43E9 0010                  		lea	$10(a1),a1
0001CA30 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA34 4E75                       		rts	
0001CA36                            ; ===========================================================================
0001CA36                            
0001CA36                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA36 2CA9 0008                  		move.l	8(a1),(a6)
0001CA3A 43E9 0010                  		lea	$10(a1),a1
0001CA3E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CA42 4E75                       		rts	
0001CA44                            ; ===========================================================================
0001CA44                            
0001CA44                            loc_1C48A:				; XREF: AniArt_MZextra
0001CA44 2029 000A                  		move.l	$A(a1),d0
0001CA48 1029 0009                  		move.b	9(a1),d0
0001CA4C E098                       		ror.l	#8,d0
0001CA4E 2C80                       		move.l	d0,(a6)
0001CA50 43E9 0010                  		lea	$10(a1),a1
0001CA54 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CA58 4E75                       		rts	
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CA5A 2CA9 000A                  		move.l	$A(a1),(a6)
0001CA5E 43E9 0010                  		lea	$10(a1),a1
0001CA62 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CA66 4E75                       		rts	
0001CA68                            ; ===========================================================================
0001CA68                            
0001CA68                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CA68 2029 000C                  		move.l	$C(a1),d0
0001CA6C 1029 000B                  		move.b	$B(a1),d0
0001CA70 E098                       		ror.l	#8,d0
0001CA72 2C80                       		move.l	d0,(a6)
0001CA74 43E9 0010                  		lea	$10(a1),a1
0001CA78 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CA7C 4E75                       		rts	
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CA7E 2CA9 000C                  		move.l	$C(a1),(a6)
0001CA82 43E9 0010                  		lea	$10(a1),a1
0001CA86 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CA8A 4E75                       		rts	
0001CA8C                            ; ===========================================================================
0001CA8C                            
0001CA8C                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CA8C 2029 000C                  		move.l	$C(a1),d0
0001CA90 E198                       		rol.l	#8,d0
0001CA92 1011                       		move.b	0(a1),d0
0001CA94 2C80                       		move.l	d0,(a6)
0001CA96 43E9 0010                  		lea	$10(a1),a1
0001CA9A 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CA9E 4E75                       		rts	
0001CAA0                            ; ===========================================================================
0001CAA0                            
0001CAA0                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CAA0 3CA9 000E                  		move.w	$E(a1),(a6)
0001CAA4 3C91                       		move.w	0(a1),(a6)
0001CAA6 43E9 0010                  		lea	$10(a1),a1
0001CAAA 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CAAE 4E75                       		rts	
0001CAB0                            ; ===========================================================================
0001CAB0                            
0001CAB0                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CAB0 2011                       		move.l	0(a1),d0
0001CAB2 1029 000F                  		move.b	$F(a1),d0
0001CAB6 E098                       		ror.l	#8,d0
0001CAB8 2C80                       		move.l	d0,(a6)
0001CABA 43E9 0010                  		lea	$10(a1),a1
0001CABE 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CAC2 4E75                       		rts	
0001CAC4                            
0001CAC4                            ; ---------------------------------------------------------------------------
0001CAC4                            ; Animated pattern routine - giant ring
0001CAC4                            ; ---------------------------------------------------------------------------
0001CAC4                            
0001CAC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC4                            
0001CAC4                            
0001CAC4                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CAC4 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CAC8 6600                       		bne.s	loc_1C518
0001CACA 4E75                       		rts	
0001CACC                            ; ===========================================================================
0001CACC                            
0001CACC                            loc_1C518:
0001CACC 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CAD2 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CAD8 7000                       		moveq	#0,d0
0001CADA 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CADE 43F1 0000                  		lea	(a1,d0.w),a1
0001CAE2 0640 8000                  		addi.w	#$8000,d0
0001CAE6 E588                       		lsl.l	#2,d0
0001CAE8 E448                       		lsr.w	#2,d0
0001CAEA 0040 4000                  		ori.w	#$4000,d0
0001CAEE 4840                       		swap	d0
0001CAF0 2D40 0004                  		move.l	d0,4(a6)
0001CAF4 323C 000D                  		move.w	#$D,d1
0001CAF8 6000 FE78                  		bra.w	LoadTiles
0001CAFC                            ; End of function AniArt_GiantRing
0001CAFC                            
0001CAFC                            ; ===========================================================================
0001CAFC                            ; ---------------------------------------------------------------------------
0001CAFC                            ; Object 21 - SCORE, TIME, RINGS
0001CAFC                            ; ---------------------------------------------------------------------------
0001CAFC                            
0001CAFC                            Obj21:					; XREF: Obj_Index
0001CAFC 7000                       		moveq	#0,d0
0001CAFE 1028 0024                  		move.b	$24(a0),d0
0001CB02 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB06 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB0A                            ; ===========================================================================
0001CB0A 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB0C 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB0E                            ; ===========================================================================
0001CB0E                            
0001CB0E                            Obj21_Main:				; XREF: Obj21_Main
0001CB0E 5428 0024                  		addq.b	#2,$24(a0)
0001CB12 317C 0090 0008             		move.w	#$90,8(a0)
0001CB18 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB1E 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB26 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB2C 117C 0000 0001             		move.b	#0,1(a0)
0001CB32 117C 0000 0018             		move.b	#0,$18(a0)
0001CB38                            
0001CB38                            Obj21_Flash:				; XREF: Obj21_Main
0001CB38 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CB3C 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CB3E 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CB42 4EF9 0000 DB6C             		jmp	DisplaySprite
0001CB48                            ; ===========================================================================
0001CB48                            
0001CB48                            Obj21_Flash2:
0001CB48 7000                       		moveq	#0,d0
0001CB4A 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CB50 6600                       		bne.s	Obj21_Display
0001CB52 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CB54 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CB5A 6600                       		bne.s	Obj21_Display	; if not, branch
0001CB5C 5440                       		addq.w	#2,d0		; make time counter flash red
0001CB5E                            
0001CB5E                            Obj21_Display:
0001CB5E 1140 001A                  		move.b	d0,$1A(a0)
0001CB62 4EF9 0000 DB6C             		jmp	DisplaySprite
0001CB68                            ; ===========================================================================
0001CB68                            ; ---------------------------------------------------------------------------
0001CB68                            ; Sprite mappings - SCORE, TIME, RINGS
0001CB68                            ; ---------------------------------------------------------------------------
0001CB68                            Map_obj21:
0001CB68                            	include "_maps\obj21.asm"
0001CB68                            ; ---------------------------------------------------------------------------
0001CB68                            ; Sprite mappings - SCORE, TIME, RINGS
0001CB68                            ; ---------------------------------------------------------------------------
0001CB68 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CB6C 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CB70 0A                         byte_1C5BC:	dc.b $A
0001CB71 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CB76 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CB7B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CB80 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CB85 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CB8A A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CB8F A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CB94 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CB99 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CB9E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CBA3 00                         		dc.b 0
0001CBA4 0A                         byte_1C5F0:	dc.b $A
0001CBA5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBAA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBAF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBB4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBB9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBBE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CBC3 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CBC8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBCD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBD2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CBD7 00                         		dc.b 0
0001CBD8 0A                         byte_1C624:	dc.b $A
0001CBD9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBDE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBE3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBE8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CBED 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBF2 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBF7 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBFC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC01 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC06 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC0B 00                         		dc.b 0
0001CC0C 0A                         byte_1C658:	dc.b $A
0001CC0D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC12 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC17 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC1C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC21 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC26 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC2B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC30 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC35 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC3A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC40 00                         		even
0001CC40 00                         		even
0001CC40                            
0001CC40                            ; ---------------------------------------------------------------------------
0001CC40                            ; Add points subroutine
0001CC40                            ; ---------------------------------------------------------------------------
0001CC40                            
0001CC40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC40                            
0001CC40                            
0001CC40                            AddPoints:
0001CC40 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CC46 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CC4A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CC4E D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CC50 223C 000F 423F             		move.l	#999999,d1
0001CC56 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CC58 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CC5C 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CC5E 2481                       		move.l	d1,(a2)
0001CC60                            
0001CC60                            loc_1C6AC:
0001CC60 2013                       		move.l	(a3),d0
0001CC62 B092                       		cmp.l	(a2),d0
0001CC64 6500 0000                  		bcs.w	locret_1C6B6
0001CC68 2480                       		move.l	d0,(a2)
0001CC6A                            
0001CC6A                            locret_1C6B6:
0001CC6A 4E75                       		rts	
0001CC6C                            ; End of function AddPoints
0001CC6C                            
0001CC6C                            ; ---------------------------------------------------------------------------
0001CC6C                            ; Subroutine to	update the HUD
0001CC6C                            ; ---------------------------------------------------------------------------
0001CC6C                            
0001CC6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC6C                            
0001CC6C                            
0001CC6C                            HudUpdate:
0001CC6C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CC70 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CC74 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CC78 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CC7A 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CC7E 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CC84 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CC88 6100 0000                  		bsr.w	Hud_Score
0001CC8C                            
0001CC8C                            Hud_ChkRings:
0001CC8C 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CC90 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CC92 6A00                       		bpl.s	loc_1C6E4
0001CC94 6100 0000                  		bsr.w	Hud_LoadZero
0001CC98                            
0001CC98                            loc_1C6E4:
0001CC98 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CC9C 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CCA2 7200                       		moveq	#0,d1
0001CCA4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CCA8 6100 0000                  		bsr.w	Hud_Rings
0001CCAC                            
0001CCAC                            Hud_ChkTime:
0001CCAC 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CCB0 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CCB2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CCB6 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CCB8 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CCBC 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CCC2 6700                       		beq.s	TimeOver	; if yes, branch
0001CCC4 5221                       		addq.b	#1,-(a1)
0001CCC6 0C11 003C                  		cmpi.b	#60,(a1)
0001CCCA 6500                       		bcs.s	Hud_ChkLives
0001CCCC 12BC 0000                  		move.b	#0,(a1)
0001CCD0 5221                       		addq.b	#1,-(a1)
0001CCD2 0C11 003C                  		cmpi.b	#60,(a1)
0001CCD6 6500                       		bcs.s	loc_1C734
0001CCD8 12BC 0000                  		move.b	#0,(a1)
0001CCDC 5221                       		addq.b	#1,-(a1)
0001CCDE 0C11 0009                  		cmpi.b	#9,(a1)
0001CCE2 6500                       		bcs.s	loc_1C734
0001CCE4 12BC 0009                  		move.b	#9,(a1)
0001CCE8                            
0001CCE8                            loc_1C734:
0001CCE8 203C 5E40 0003             		move.l	#$5E400003,d0
0001CCEE 7200                       		moveq	#0,d1
0001CCF0 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CCF4 6100 0000                  		bsr.w	Hud_Mins
0001CCF8 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CCFE 7200                       		moveq	#0,d1
0001CD00 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD04 6100 0000                  		bsr.w	Hud_Secs
0001CD08                            
0001CD08                            Hud_ChkLives:
0001CD08 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD0C 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD0E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD12 6100 0000                  		bsr.w	Hud_Lives
0001CD16                            
0001CD16                            Hud_ChkBonus:
0001CD16 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD1A 6700                       		beq.s	Hud_End		; if not, branch
0001CD1C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD20 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD2A 7200                       		moveq	#0,d1
0001CD2C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD30 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD34 7200                       		moveq	#0,d1
0001CD36 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CD3A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD3E                            
0001CD3E                            Hud_End:
0001CD3E 4E75                       		rts	
0001CD40                            ; ===========================================================================
0001CD40                            
0001CD40                            TimeOver:				; XREF: Hud_ChkTime
0001CD40 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CD44 41F8 D000                  		lea	($FFFFD000).w,a0
0001CD48 2448                       		movea.l	a0,a2
0001CD4A 6100 E908                  		bsr.w	KillSonic
0001CD4E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CD54 4E75                       		rts	
0001CD56                            ; ===========================================================================
0001CD56                            
0001CD56                            HudDebug:				; XREF: HudUpdate
0001CD56 6100 0000                  		bsr.w	HudDb_XY
0001CD5A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CD5E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CD60 6A00                       		bpl.s	HudDb_Rings
0001CD62 6100 0000                  		bsr.w	Hud_LoadZero
0001CD66                            
0001CD66                            HudDb_Rings:
0001CD66 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CD6A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CD70 7200                       		moveq	#0,d1
0001CD72 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CD76 6100 0000                  		bsr.w	Hud_Rings
0001CD7A                            
0001CD7A                            HudDb_ObjCount:
0001CD7A 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CD80 7200                       		moveq	#0,d1
0001CD82 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CD86 6100 0000                  		bsr.w	Hud_Secs
0001CD8A 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD8E 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CD90 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD94 6100 0000                  		bsr.w	Hud_Lives
0001CD98                            
0001CD98                            HudDb_ChkBonus:
0001CD98 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CD9C 6700                       		beq.s	HudDb_End	; if not, branch
0001CD9E 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CDA2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CDAC 7200                       		moveq	#0,d1
0001CDAE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CDB2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDB6 7200                       		moveq	#0,d1
0001CDB8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CDBC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDC0                            
0001CDC0                            HudDb_End:
0001CDC0 4E75                       		rts	
0001CDC2                            ; End of function HudUpdate
0001CDC2                            
0001CDC2                            ; ---------------------------------------------------------------------------
0001CDC2                            ; Subroutine to	load "0" on the	HUD
0001CDC2                            ; ---------------------------------------------------------------------------
0001CDC2                            
0001CDC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDC2                            
0001CDC2                            
0001CDC2                            Hud_LoadZero:				; XREF: HudUpdate
0001CDC2 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CDCC 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CDD0 343C 0002                  		move.w	#2,d2
0001CDD4 6000                       		bra.s	loc_1C83E
0001CDD6                            ; End of function Hud_LoadZero
0001CDD6                            
0001CDD6                            ; ---------------------------------------------------------------------------
0001CDD6                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CDD6                            ; ---------------------------------------------------------------------------
0001CDD6                            
0001CDD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDD6                            
0001CDD6                            
0001CDD6                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CDD6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CDDC 6100 0000                  		bsr.w	Hud_Lives
0001CDE0 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CDEA 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CDEE 343C 000E                  		move.w	#$E,d2
0001CDF2                            
0001CDF2                            loc_1C83E:				; XREF: Hud_LoadZero
0001CDF2 43FA 0000                  		lea	Art_Hud(pc),a1
0001CDF6                            
0001CDF6                            loc_1C842:
0001CDF6 323C 000F                  		move.w	#$F,d1
0001CDFA 101A                       		move.b	(a2)+,d0
0001CDFC 6B00                       		bmi.s	loc_1C85E
0001CDFE 4880                       		ext.w	d0
0001CE00 EB48                       		lsl.w	#5,d0
0001CE02 47F1 0000                  		lea	(a1,d0.w),a3
0001CE06                            
0001CE06                            loc_1C852:
0001CE06 2C9B                       		move.l	(a3)+,(a6)
0001CE08 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE0C                            
0001CE0C                            loc_1C858:
0001CE0C 51CA FFE8                  		dbf	d2,loc_1C842
0001CE10                            
0001CE10 4E75                       		rts	
0001CE12                            ; ===========================================================================
0001CE12                            
0001CE12                            loc_1C85E:
0001CE12 2CBC 0000 0000             		move.l	#0,(a6)
0001CE18 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE1C                            
0001CE1C 60EE                       		bra.s	loc_1C858
0001CE1E                            ; End of function Hud_Base
0001CE1E                            
0001CE1E                            ; ===========================================================================
0001CE1E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE2A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            ; Subroutine to	load debug mode	numbers	patterns
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            
0001CE2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE2E                            
0001CE2E                            
0001CE2E                            HudDb_XY:				; XREF: HudDebug
0001CE2E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE38 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CE3C 4841                       		swap	d1
0001CE3E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CE42 6100                       		bsr.s	HudDb_XY2
0001CE44 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CE48 4841                       		swap	d1
0001CE4A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CE4E                            ; End of function HudDb_XY
0001CE4E                            
0001CE4E                            
0001CE4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE4E                            
0001CE4E                            
0001CE4E                            HudDb_XY2:
0001CE4E 7C07                       		moveq	#7,d6
0001CE50 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CE56                            
0001CE56                            HudDb_XYLoop:
0001CE56 E959                       		rol.w	#4,d1
0001CE58 3401                       		move.w	d1,d2
0001CE5A 0242 000F                  		andi.w	#$F,d2
0001CE5E 0C42 000A                  		cmpi.w	#$A,d2
0001CE62 6500                       		bcs.s	loc_1C8B2
0001CE64 5E42                       		addq.w	#7,d2
0001CE66                            
0001CE66                            loc_1C8B2:
0001CE66 EB4A                       		lsl.w	#5,d2
0001CE68 47F1 2000                  		lea	(a1,d2.w),a3
0001CE6C 2C9B                       		move.l	(a3)+,(a6)
0001CE6E 2C9B                       		move.l	(a3)+,(a6)
0001CE70 2C9B                       		move.l	(a3)+,(a6)
0001CE72 2C9B                       		move.l	(a3)+,(a6)
0001CE74 2C9B                       		move.l	(a3)+,(a6)
0001CE76 2C9B                       		move.l	(a3)+,(a6)
0001CE78 2C9B                       		move.l	(a3)+,(a6)
0001CE7A 2C9B                       		move.l	(a3)+,(a6)
0001CE7C 4841                       		swap	d1
0001CE7E 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CE82                            
0001CE82 4E75                       		rts	
0001CE84                            ; End of function HudDb_XY2
0001CE84                            
0001CE84                            ; ---------------------------------------------------------------------------
0001CE84                            ; Subroutine to	load rings numbers patterns
0001CE84                            ; ---------------------------------------------------------------------------
0001CE84                            
0001CE84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE84                            
0001CE84                            
0001CE84                            Hud_Rings:				; XREF: HudUpdate
0001CE84 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CE8A 7C02                       		moveq	#2,d6
0001CE8C 6000                       		bra.s	Hud_LoadArt
0001CE8E                            ; End of function Hud_Rings
0001CE8E                            
0001CE8E                            ; ---------------------------------------------------------------------------
0001CE8E                            ; Subroutine to	load score numbers patterns
0001CE8E                            ; ---------------------------------------------------------------------------
0001CE8E                            
0001CE8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE8E                            
0001CE8E                            
0001CE8E                            Hud_Score:				; XREF: HudUpdate
0001CE8E 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CE94 7C05                       		moveq	#5,d6
0001CE96                            
0001CE96                            Hud_LoadArt:
0001CE96 7800                       		moveq	#0,d4
0001CE98 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE9C                            
0001CE9C                            Hud_ScoreLoop:
0001CE9C 7400                       		moveq	#0,d2
0001CE9E 261A                       		move.l	(a2)+,d3
0001CEA0                            
0001CEA0                            loc_1C8EC:
0001CEA0 9283                       		sub.l	d3,d1
0001CEA2 6500                       		bcs.s	loc_1C8F4
0001CEA4 5242                       		addq.w	#1,d2
0001CEA6 60F8                       		bra.s	loc_1C8EC
0001CEA8                            ; ===========================================================================
0001CEA8                            
0001CEA8                            loc_1C8F4:
0001CEA8 D283                       		add.l	d3,d1
0001CEAA 4A42                       		tst.w	d2
0001CEAC 6700                       		beq.s	loc_1C8FE
0001CEAE 383C 0001                  		move.w	#1,d4
0001CEB2                            
0001CEB2                            loc_1C8FE:
0001CEB2 4A44                       		tst.w	d4
0001CEB4 6700                       		beq.s	loc_1C92C
0001CEB6 ED4A                       		lsl.w	#6,d2
0001CEB8 2D40 0004                  		move.l	d0,4(a6)
0001CEBC 47F1 2000                  		lea	(a1,d2.w),a3
0001CEC0 2C9B                       		move.l	(a3)+,(a6)
0001CEC2 2C9B                       		move.l	(a3)+,(a6)
0001CEC4 2C9B                       		move.l	(a3)+,(a6)
0001CEC6 2C9B                       		move.l	(a3)+,(a6)
0001CEC8 2C9B                       		move.l	(a3)+,(a6)
0001CECA 2C9B                       		move.l	(a3)+,(a6)
0001CECC 2C9B                       		move.l	(a3)+,(a6)
0001CECE 2C9B                       		move.l	(a3)+,(a6)
0001CED0 2C9B                       		move.l	(a3)+,(a6)
0001CED2 2C9B                       		move.l	(a3)+,(a6)
0001CED4 2C9B                       		move.l	(a3)+,(a6)
0001CED6 2C9B                       		move.l	(a3)+,(a6)
0001CED8 2C9B                       		move.l	(a3)+,(a6)
0001CEDA 2C9B                       		move.l	(a3)+,(a6)
0001CEDC 2C9B                       		move.l	(a3)+,(a6)
0001CEDE 2C9B                       		move.l	(a3)+,(a6)
0001CEE0                            
0001CEE0                            loc_1C92C:
0001CEE0 0680 0040 0000             		addi.l	#$400000,d0
0001CEE6 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CEEA                            
0001CEEA 4E75                       		rts	
0001CEEC                            ; End of function Hud_Score
0001CEEC                            
0001CEEC                            ; ---------------------------------------------------------------------------
0001CEEC                            ; Subroutine to	load countdown numbers on the continue screen
0001CEEC                            ; ---------------------------------------------------------------------------
0001CEEC                            
0001CEEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEEC                            
0001CEEC                            
0001CEEC                            ContScrCounter:				; XREF: ContinueScreen
0001CEEC 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CEF6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CEFC 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF02 7C01                       		moveq	#1,d6
0001CF04 7800                       		moveq	#0,d4
0001CF06 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF0A                            
0001CF0A                            ContScr_Loop:
0001CF0A 7400                       		moveq	#0,d2
0001CF0C 261A                       		move.l	(a2)+,d3
0001CF0E                            
0001CF0E                            loc_1C95A:
0001CF0E 9283                       		sub.l	d3,d1
0001CF10 6500                       		bcs.s	loc_1C962
0001CF12 5242                       		addq.w	#1,d2
0001CF14 60F8                       		bra.s	loc_1C95A
0001CF16                            ; ===========================================================================
0001CF16                            
0001CF16                            loc_1C962:
0001CF16 D283                       		add.l	d3,d1
0001CF18 ED4A                       		lsl.w	#6,d2
0001CF1A 47F1 2000                  		lea	(a1,d2.w),a3
0001CF1E 2C9B                       		move.l	(a3)+,(a6)
0001CF20 2C9B                       		move.l	(a3)+,(a6)
0001CF22 2C9B                       		move.l	(a3)+,(a6)
0001CF24 2C9B                       		move.l	(a3)+,(a6)
0001CF26 2C9B                       		move.l	(a3)+,(a6)
0001CF28 2C9B                       		move.l	(a3)+,(a6)
0001CF2A 2C9B                       		move.l	(a3)+,(a6)
0001CF2C 2C9B                       		move.l	(a3)+,(a6)
0001CF2E 2C9B                       		move.l	(a3)+,(a6)
0001CF30 2C9B                       		move.l	(a3)+,(a6)
0001CF32 2C9B                       		move.l	(a3)+,(a6)
0001CF34 2C9B                       		move.l	(a3)+,(a6)
0001CF36 2C9B                       		move.l	(a3)+,(a6)
0001CF38 2C9B                       		move.l	(a3)+,(a6)
0001CF3A 2C9B                       		move.l	(a3)+,(a6)
0001CF3C 2C9B                       		move.l	(a3)+,(a6)
0001CF3E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CF42                            
0001CF42 4E75                       		rts	
0001CF44                            ; End of function ContScrCounter
0001CF44                            
0001CF44                            ; ===========================================================================
0001CF44                            ; ---------------------------------------------------------------------------
0001CF44                            ; HUD counter sizes
0001CF44                            ; ---------------------------------------------------------------------------
0001CF44 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CF48 0000 2710                  Hud_10000:	dc.l 10000
0001CF4C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CF50 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CF54 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CF58 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CF5C                            
0001CF5C                            ; ---------------------------------------------------------------------------
0001CF5C                            ; Subroutine to	load time numbers patterns
0001CF5C                            ; ---------------------------------------------------------------------------
0001CF5C                            
0001CF5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF5C                            
0001CF5C                            
0001CF5C                            Hud_Mins:				; XREF: Hud_ChkTime
0001CF5C 45F9 0001 CF58             		lea	(Hud_1).l,a2
0001CF62 7C00                       		moveq	#0,d6
0001CF64 6000                       		bra.s	loc_1C9BA
0001CF66                            ; End of function Hud_Mins
0001CF66                            
0001CF66                            
0001CF66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF66                            
0001CF66                            
0001CF66                            Hud_Secs:				; XREF: Hud_ChkTime
0001CF66 45F9 0001 CF54             		lea	(Hud_10).l,a2
0001CF6C 7C01                       		moveq	#1,d6
0001CF6E                            
0001CF6E                            loc_1C9BA:
0001CF6E 7800                       		moveq	#0,d4
0001CF70 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF74                            
0001CF74                            Hud_TimeLoop:
0001CF74 7400                       		moveq	#0,d2
0001CF76 261A                       		move.l	(a2)+,d3
0001CF78                            
0001CF78                            loc_1C9C4:
0001CF78 9283                       		sub.l	d3,d1
0001CF7A 6500                       		bcs.s	loc_1C9CC
0001CF7C 5242                       		addq.w	#1,d2
0001CF7E 60F8                       		bra.s	loc_1C9C4
0001CF80                            ; ===========================================================================
0001CF80                            
0001CF80                            loc_1C9CC:
0001CF80 D283                       		add.l	d3,d1
0001CF82 4A42                       		tst.w	d2
0001CF84 6700                       		beq.s	loc_1C9D6
0001CF86 383C 0001                  		move.w	#1,d4
0001CF8A                            
0001CF8A                            loc_1C9D6:
0001CF8A ED4A                       		lsl.w	#6,d2
0001CF8C 2D40 0004                  		move.l	d0,4(a6)
0001CF90 47F1 2000                  		lea	(a1,d2.w),a3
0001CF94 2C9B                       		move.l	(a3)+,(a6)
0001CF96 2C9B                       		move.l	(a3)+,(a6)
0001CF98 2C9B                       		move.l	(a3)+,(a6)
0001CF9A 2C9B                       		move.l	(a3)+,(a6)
0001CF9C 2C9B                       		move.l	(a3)+,(a6)
0001CF9E 2C9B                       		move.l	(a3)+,(a6)
0001CFA0 2C9B                       		move.l	(a3)+,(a6)
0001CFA2 2C9B                       		move.l	(a3)+,(a6)
0001CFA4 2C9B                       		move.l	(a3)+,(a6)
0001CFA6 2C9B                       		move.l	(a3)+,(a6)
0001CFA8 2C9B                       		move.l	(a3)+,(a6)
0001CFAA 2C9B                       		move.l	(a3)+,(a6)
0001CFAC 2C9B                       		move.l	(a3)+,(a6)
0001CFAE 2C9B                       		move.l	(a3)+,(a6)
0001CFB0 2C9B                       		move.l	(a3)+,(a6)
0001CFB2 2C9B                       		move.l	(a3)+,(a6)
0001CFB4 0680 0040 0000             		addi.l	#$400000,d0
0001CFBA 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CFBE                            
0001CFBE 4E75                       		rts	
0001CFC0                            ; End of function Hud_Secs
0001CFC0                            
0001CFC0                            ; ---------------------------------------------------------------------------
0001CFC0                            ; Subroutine to	load time/ring bonus numbers patterns
0001CFC0                            ; ---------------------------------------------------------------------------
0001CFC0                            
0001CFC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFC0                            
0001CFC0                            
0001CFC0                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CFC0 45F9 0001 CF4C             		lea	(Hud_1000).l,a2
0001CFC6 7C03                       		moveq	#3,d6
0001CFC8 7800                       		moveq	#0,d4
0001CFCA 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFCE                            
0001CFCE                            Hud_BonusLoop:
0001CFCE 7400                       		moveq	#0,d2
0001CFD0 261A                       		move.l	(a2)+,d3
0001CFD2                            
0001CFD2                            loc_1CA1E:
0001CFD2 9283                       		sub.l	d3,d1
0001CFD4 6500                       		bcs.s	loc_1CA26
0001CFD6 5242                       		addq.w	#1,d2
0001CFD8 60F8                       		bra.s	loc_1CA1E
0001CFDA                            ; ===========================================================================
0001CFDA                            
0001CFDA                            loc_1CA26:
0001CFDA D283                       		add.l	d3,d1
0001CFDC 4A42                       		tst.w	d2
0001CFDE 6700                       		beq.s	loc_1CA30
0001CFE0 383C 0001                  		move.w	#1,d4
0001CFE4                            
0001CFE4                            loc_1CA30:
0001CFE4 4A44                       		tst.w	d4
0001CFE6 6700                       		beq.s	Hud_ClrBonus
0001CFE8 ED4A                       		lsl.w	#6,d2
0001CFEA 47F1 2000                  		lea	(a1,d2.w),a3
0001CFEE 2C9B                       		move.l	(a3)+,(a6)
0001CFF0 2C9B                       		move.l	(a3)+,(a6)
0001CFF2 2C9B                       		move.l	(a3)+,(a6)
0001CFF4 2C9B                       		move.l	(a3)+,(a6)
0001CFF6 2C9B                       		move.l	(a3)+,(a6)
0001CFF8 2C9B                       		move.l	(a3)+,(a6)
0001CFFA 2C9B                       		move.l	(a3)+,(a6)
0001CFFC 2C9B                       		move.l	(a3)+,(a6)
0001CFFE 2C9B                       		move.l	(a3)+,(a6)
0001D000 2C9B                       		move.l	(a3)+,(a6)
0001D002 2C9B                       		move.l	(a3)+,(a6)
0001D004 2C9B                       		move.l	(a3)+,(a6)
0001D006 2C9B                       		move.l	(a3)+,(a6)
0001D008 2C9B                       		move.l	(a3)+,(a6)
0001D00A 2C9B                       		move.l	(a3)+,(a6)
0001D00C 2C9B                       		move.l	(a3)+,(a6)
0001D00E                            
0001D00E                            loc_1CA5A:
0001D00E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D012                            
0001D012 4E75                       		rts	
0001D014                            ; ===========================================================================
0001D014                            
0001D014                            Hud_ClrBonus:
0001D014 7A0F                       		moveq	#$F,d5
0001D016                            
0001D016                            Hud_ClrBonusLoop:
0001D016 2CBC 0000 0000             		move.l	#0,(a6)
0001D01C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D020                            
0001D020 60EC                       		bra.s	loc_1CA5A
0001D022                            ; End of function Hud_TimeRingBonus
0001D022                            
0001D022                            ; ---------------------------------------------------------------------------
0001D022                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D022                            ; ---------------------------------------------------------------------------
0001D022                            
0001D022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D022                            
0001D022                            
0001D022                            Hud_Lives:				; XREF: Hud_ChkLives
0001D022 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D028 7200                       		moveq	#0,d1
0001D02A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D02E 45F9 0001 CF54             		lea	(Hud_10).l,a2
0001D034 7C01                       		moveq	#1,d6
0001D036 7800                       		moveq	#0,d4
0001D038 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D03C                            
0001D03C                            Hud_LivesLoop:
0001D03C 2D40 0004                  		move.l	d0,4(a6)
0001D040 7400                       		moveq	#0,d2
0001D042 261A                       		move.l	(a2)+,d3
0001D044                            
0001D044                            loc_1CA90:
0001D044 9283                       		sub.l	d3,d1
0001D046 6500                       		bcs.s	loc_1CA98
0001D048 5242                       		addq.w	#1,d2
0001D04A 60F8                       		bra.s	loc_1CA90
0001D04C                            ; ===========================================================================
0001D04C                            
0001D04C                            loc_1CA98:
0001D04C D283                       		add.l	d3,d1
0001D04E 4A42                       		tst.w	d2
0001D050 6700                       		beq.s	loc_1CAA2
0001D052 383C 0001                  		move.w	#1,d4
0001D056                            
0001D056                            loc_1CAA2:
0001D056 4A44                       		tst.w	d4
0001D058 6700                       		beq.s	Hud_ClrLives
0001D05A                            
0001D05A                            loc_1CAA6:
0001D05A EB4A                       		lsl.w	#5,d2
0001D05C 47F1 2000                  		lea	(a1,d2.w),a3
0001D060 2C9B                       		move.l	(a3)+,(a6)
0001D062 2C9B                       		move.l	(a3)+,(a6)
0001D064 2C9B                       		move.l	(a3)+,(a6)
0001D066 2C9B                       		move.l	(a3)+,(a6)
0001D068 2C9B                       		move.l	(a3)+,(a6)
0001D06A 2C9B                       		move.l	(a3)+,(a6)
0001D06C 2C9B                       		move.l	(a3)+,(a6)
0001D06E 2C9B                       		move.l	(a3)+,(a6)
0001D070                            
0001D070                            loc_1CABC:
0001D070 0680 0040 0000             		addi.l	#$400000,d0
0001D076 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D07A                            
0001D07A 4E75                       		rts	
0001D07C                            ; ===========================================================================
0001D07C                            
0001D07C                            Hud_ClrLives:
0001D07C 4A46                       		tst.w	d6
0001D07E 67DA                       		beq.s	loc_1CAA6
0001D080 7A07                       		moveq	#7,d5
0001D082                            
0001D082                            Hud_ClrLivesLoop:
0001D082 2CBC 0000 0000             		move.l	#0,(a6)
0001D088 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D08C 60E2                       		bra.s	loc_1CABC
0001D08E                            ; End of function Hud_Lives
0001D08E                            
0001D08E                            ; ===========================================================================
0001D08E                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D38E                            		even
0001D38E                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D4CE                            		even
0001D4CE                            ; ===========================================================================
0001D4CE                            ; ---------------------------------------------------------------------------
0001D4CE                            ; When debug mode is currently in use
0001D4CE                            ; ---------------------------------------------------------------------------
0001D4CE                            
0001D4CE                            DebugMode:				; XREF: Obj01; Obj09
0001D4CE 7000                       		moveq	#0,d0
0001D4D0 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D4D4 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D4D8 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D4DC                            ; ===========================================================================
0001D4DC 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D4DE 0000                       		dc.w Debug_Skip-Debug_Index
0001D4E0                            ; ===========================================================================
0001D4E0                            
0001D4E0                            Debug_Main:				; XREF: Debug_Index
0001D4E0 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D4E4 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D4EA 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D4F0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D4F6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D4FC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D502 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D508 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D50E 117C 0000 001A             		move.b	#0,$1A(a0)
0001D514 117C 0000 001C             		move.b	#0,$1C(a0)
0001D51A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D520 6600                       		bne.s	Debug_Zone	; if not, branch
0001D522 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D528 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D52E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D530 6000                       		bra.s	Debug_UseList
0001D532                            ; ===========================================================================
0001D532                            
0001D532                            Debug_Zone:
0001D532 7000                       		moveq	#0,d0
0001D534 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D538                            
0001D538                            Debug_UseList:
0001D538 45F9 0000 0000             		lea	(DebugList).l,a2
0001D53E D040                       		add.w	d0,d0
0001D540 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D544 3C1A                       		move.w	(a2)+,d6
0001D546 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D54A 6200                       		bhi.s	loc_1CF9E
0001D54C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D552                            
0001D552                            loc_1CF9E:
0001D552 6100 0000                  		bsr.w	Debug_ShowItem
0001D556 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D55C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D562                            
0001D562                            Debug_Skip:				; XREF: Debug_Index
0001D562 7006                       		moveq	#6,d0
0001D564 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D56A 6700                       		beq.s	loc_1CFBE
0001D56C 7000                       		moveq	#0,d0
0001D56E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D572                            
0001D572                            loc_1CFBE:
0001D572 45F9 0000 0000             		lea	(DebugList).l,a2
0001D578 D040                       		add.w	d0,d0
0001D57A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D57E 3C1A                       		move.w	(a2)+,d6
0001D580 6100 0000                  		bsr.w	Debug_Control
0001D584 4EF9 0000 DB6C             		jmp	DisplaySprite
0001D58A                            
0001D58A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D58A                            
0001D58A                            
0001D58A                            Debug_Control:
0001D58A 7800                       		moveq	#0,d4
0001D58C 323C 0001                  		move.w	#1,d1
0001D590 1838 F605                  		move.b	($FFFFF605).w,d4
0001D594 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D598 6600                       		bne.s	loc_1D018	; if yes, branch
0001D59A 1038 F604                  		move.b	($FFFFF604).w,d0
0001D59E 0240 000F                  		andi.w	#$F,d0
0001D5A2 6600                       		bne.s	loc_1D000
0001D5A4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5AA 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D5B0 6000 0000                  		bra.w	Debug_BackItem
0001D5B4                            ; ===========================================================================
0001D5B4                            
0001D5B4                            loc_1D000:
0001D5B4 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D5B8 6600                       		bne.s	loc_1D01C
0001D5BA 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D5C0 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D5C4 6600                       		bne.s	loc_1D018
0001D5C6 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D5CC                            
0001D5CC                            loc_1D018:
0001D5CC 1838 F604                  		move.b	($FFFFF604).w,d4
0001D5D0                            
0001D5D0                            loc_1D01C:
0001D5D0 7200                       		moveq	#0,d1
0001D5D2 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D5D6 5241                       		addq.w	#1,d1
0001D5D8 4841                       		swap	d1
0001D5DA E881                       		asr.l	#4,d1
0001D5DC 2428 000C                  		move.l	$C(a0),d2
0001D5E0 2628 0008                  		move.l	8(a0),d3
0001D5E4 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D5E8 6700                       		beq.s	loc_1D03C	; if not, branch
0001D5EA 9481                       		sub.l	d1,d2
0001D5EC 6400                       		bcc.s	loc_1D03C
0001D5EE 7400                       		moveq	#0,d2
0001D5F0                            
0001D5F0                            loc_1D03C:
0001D5F0 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D5F4 6700                       		beq.s	loc_1D052	; if not, branch
0001D5F6 D481                       		add.l	d1,d2
0001D5F8 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D5FE 6500                       		bcs.s	loc_1D052
0001D600 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D606                            
0001D606                            loc_1D052:
0001D606 0804 0002                  		btst	#2,d4
0001D60A 6700                       		beq.s	loc_1D05E
0001D60C 9681                       		sub.l	d1,d3
0001D60E 6400                       		bcc.s	loc_1D05E
0001D610 7600                       		moveq	#0,d3
0001D612                            
0001D612                            loc_1D05E:
0001D612 0804 0003                  		btst	#3,d4
0001D616 6700                       		beq.s	loc_1D066
0001D618 D681                       		add.l	d1,d3
0001D61A                            
0001D61A                            loc_1D066:
0001D61A 2142 000C                  		move.l	d2,$C(a0)
0001D61E 2143 0008                  		move.l	d3,8(a0)
0001D622                            
0001D622                            Debug_BackItem:
0001D622 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D628 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D62A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D630 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D632 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D636 6400                       		bcc.s	Debug_NoLoop
0001D638 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D63C 6000                       		bra.s	Debug_NoLoop
0001D63E                            ; ===========================================================================
0001D63E                            
0001D63E                            Debug_NextItem:
0001D63E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D644 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D646 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D64A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D64E 6200                       		bhi.s	Debug_NoLoop
0001D650 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D656                            
0001D656                            Debug_NoLoop:
0001D656 6000 0000                  		bra.w	Debug_ShowItem
0001D65A                            ; ===========================================================================
0001D65A                            
0001D65A                            Debug_MakeItem:
0001D65A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D660 6700                       		beq.s	Debug_Exit	; if not, branch
0001D662 4EB9 0000 DFF2             		jsr	SingleObjLoad
0001D668 6600                       		bne.s	Debug_Exit
0001D66A 3368 0008 0008             		move.w	8(a0),8(a1)
0001D670 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D676 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D67A 1368 0001 0001             		move.b	1(a0),1(a1)
0001D680 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D686 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D68C 7000                       		moveq	#0,d0
0001D68E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D692 E748                       		lsl.w	#3,d0
0001D694 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D69A 4E75                       		rts	
0001D69C                            ; ===========================================================================
0001D69C                            
0001D69C                            Debug_Exit:
0001D69C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D6A2 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D6A4 7000                       		moveq	#0,d0
0001D6A6 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D6AA 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D6B2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D6B8 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D6BC 3140 000A                  		move.w	d0,$A(a0)
0001D6C0 3140 000E                  		move.w	d0,$E(a0)
0001D6C4 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D6CA 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D6D0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D6D6 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D6D8 4278 F780                  		clr.w	($FFFFF780).w
0001D6DC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D6E2 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D6EA 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D6F0 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D6F6 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D6FC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D702                            
0001D702                            Debug_DoNothing:
0001D702 4E75                       		rts	
0001D704                            ; End of function Debug_Control
0001D704                            
0001D704                            
0001D704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D704                            
0001D704                            
0001D704                            Debug_ShowItem:				; XREF: Debug_Main
0001D704 7000                       		moveq	#0,d0
0001D706 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D70A E748                       		lsl.w	#3,d0
0001D70C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D712 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D718 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D71E 4E75                       		rts	
0001D720                            ; End of function Debug_ShowItem
0001D720                            
0001D720                            ; ===========================================================================
0001D720                            ; ---------------------------------------------------------------------------
0001D720                            ; Debug	list pointers
0001D720                            ; ---------------------------------------------------------------------------
0001D720                            DebugList:
0001D720                            	include "_inc\Debug list pointers.asm"
0001D720                            ; ---------------------------------------------------------------------------
0001D720                            ; Debug	list pointers
0001D720                            ; ---------------------------------------------------------------------------
0001D720 0000                       	dc.w Debug_GHZ-DebugList
0001D722 0000                       	dc.w Debug_LZ-DebugList
0001D724 0000                       	dc.w Debug_MZ-DebugList
0001D726 0000                       	dc.w Debug_SLZ-DebugList
0001D728 0000                       	dc.w Debug_SYZ-DebugList
0001D72A 0000                       	dc.w Debug_SBZ-DebugList
0001D72C 0000                       	dc.w Debug_Ending-DebugList
0001D72C 0000                       	dc.w Debug_Ending-DebugList
0001D72E                            
0001D72E                            ; ---------------------------------------------------------------------------
0001D72E                            ; Debug	list - Green Hill
0001D72E                            ; ---------------------------------------------------------------------------
0001D72E                            Debug_GHZ:
0001D72E                            	include "_inc\Debug list - GHZ.asm"
0001D72E                            ; ---------------------------------------------------------------------------
0001D72E                            ; Debug	list - Green Hill
0001D72E                            ; ---------------------------------------------------------------------------
0001D72E 0010                       	dc.w $10			; number of items in list
0001D730 2500 A3E0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D734 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D738 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D73C 0000 0680                  	dc.b 0,	0, 6, $80
0001D740 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D744 0000 0400                  	dc.b 0,	0, 4, 0
0001D748 2200 9E94                  	dc.l Map_obj22+$22000000
0001D74C 0000 0444                  	dc.b 0,	0, 4, $44
0001D750 2B00 B090                  	dc.l Map_obj2B+$2B000000
0001D754 0000 047B                  	dc.b 0,	0, 4, $7B
0001D758 3600 D554                  	dc.l Map_obj36+$36000000
0001D75C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D760 1800 8586                  	dc.l Map_obj18+$18000000
0001D764 0000 4000                  	dc.b 0,	0, $40,	0
0001D768 3B00 D67A                  	dc.l Map_obj3B+$3B000000
0001D76C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D770 4000 FD06                  	dc.l Map_obj40+$40000000
0001D774 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D778 4100 E280                  	dc.l Map_obj41+$41000000
0001D77C 0000 0523                  	dc.b 0,	0, 5, $23
0001D780 4200 E4A6                  	dc.l Map_obj42+$42000000
0001D784 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D788 4400 E7B4                  	dc.l Map_obj44+$44000000
0001D78C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D790 1900 85F4                  	dc.l Map_obj48+$19000000
0001D794 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D798 7901 7696                  	dc.l Map_obj79+$79000000
0001D79C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7A0 4B00 A420                  	dc.l Map_obj4B+$4B000000
0001D7A4 0000 2400                  	dc.b 0,	0, $24,	0
0001D7A8 7D01 77E6                  	dc.l Map_obj7D+$7D000000
0001D7AC 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D7B0                            	even
0001D7B0                            	even
0001D7B0                            
0001D7B0                            ; ---------------------------------------------------------------------------
0001D7B0                            ; Debug	list - Labyrinth
0001D7B0                            ; ---------------------------------------------------------------------------
0001D7B0                            Debug_LZ:
0001D7B0                            	include "_inc\Debug list - LZ.asm"
0001D7B0                            ; ---------------------------------------------------------------------------
0001D7B0                            ; Debug	list - Labyrinth
0001D7B0                            ; ---------------------------------------------------------------------------
0001D7B0 0019                       	dc.w $19
0001D7B2 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D7B6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D7BA 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D7BE 0000 0680                  	dc.b 0,	0, 6, $80
0001D7C2 4100 E280                  	dc.l Map_obj41+$41000000
0001D7C6 0000 0523                  	dc.b 0,	0, 5, $23
0001D7CA 2C00 B136                  	dc.l Map_obj2C+$2C000000
0001D7CE 0800 2486                  	dc.b 8,	0, $24,	$86
0001D7D2 2D00 B322                  	dc.l Map_obj2D+$2D000000
0001D7D6 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D7DA 1601 24DA                  	dc.l Map_obj16+$16000000
0001D7DE 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D7E2 1601 24DA                  	dc.l Map_obj16+$16000000
0001D7E6 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D7EA 3300 C7A0                  	dc.l Map_obj33+$33000000
0001D7EE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D7F2 3200 C360                  	dc.l Map_obj32+$32000000
0001D7F6 0000 0513                  	dc.b 0,	0, 5, $13
0001D7FA 3600 D554                  	dc.l Map_obj36+$36000000
0001D7FE 0000 051B                  	dc.b 0,	0, 5, $1B
0001D802 5201 05FC                  	dc.l Map_obj52a+$52000000
0001D806 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D80A 6101 2702                  	dc.l Map_obj61+$61000000
0001D80E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D812 6101 2702                  	dc.l Map_obj61+$61000000
0001D816 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D81A 6101 2702                  	dc.l Map_obj61+$61000000
0001D81E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D822 6201 2856                  	dc.l Map_obj62+$62000000
0001D826 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D82A 6101 2702                  	dc.l Map_obj61+$61000000
0001D82E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D832 6101 2702                  	dc.l Map_obj61+$61000000
0001D836 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D83A 6301 2BB8                  	dc.l Map_obj63+$63000000
0001D83E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D842 6001 2424                  	dc.l Map_obj60+$60000000
0001D846 0000 0467                  	dc.b 0,	0, 4, $67
0001D84A 6401 2EFE                  	dc.l Map_obj64+$64000000
0001D84E 8413 8348                  	dc.b $84, $13, $83, $48
0001D852 6501 3086                  	dc.l Map_obj65+$65000000
0001D856 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D85A 6501 3086                  	dc.l Map_obj65+$65000000
0001D85E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D862 0B01 1874                  	dc.l Map_obj0B+$B000000
0001D866 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D86A 0C01 1944                  	dc.l Map_obj0C+$C000000
0001D86E 0200 4328                  	dc.b 2,	0, $43,	$28
0001D872 7901 7696                  	dc.l Map_obj79+$79000000
0001D876 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D87A                            	even
0001D87A                            	even
0001D87A                            
0001D87A                            ; ---------------------------------------------------------------------------
0001D87A                            ; Debug	list - Marble
0001D87A                            ; ---------------------------------------------------------------------------
0001D87A                            Debug_MZ:
0001D87A                            	include "_inc\Debug list - MZ.asm"
0001D87A                            ; ---------------------------------------------------------------------------
0001D87A                            ; Debug	list - Marble
0001D87A                            ; ---------------------------------------------------------------------------
0001D87A 0012                       	dc.w $12
0001D87C 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D880 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D884 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D888 0000 0680                  	dc.b 0,	0, 6, $80
0001D88C 2200 9E94                  	dc.l Map_obj22+$22000000
0001D890 0000 0444                  	dc.b 0,	0, 4, $44
0001D894 3600 D554                  	dc.l Map_obj36+$36000000
0001D898 0000 051B                  	dc.b 0,	0, 5, $1B
0001D89C 4100 E280                  	dc.l Map_obj41+$41000000
0001D8A0 0000 0523                  	dc.b 0,	0, 5, $23
0001D8A4 1300 B830                  	dc.l Map_obj14+$13000000
0001D8A8 0000 0345                  	dc.b 0,	0, 3, $45
0001D8AC 4600 EE66                  	dc.l Map_obj46+$46000000
0001D8B0 0000 4000                  	dc.b 0,	0, $40,	0
0001D8B4 4C00 F7B2                  	dc.l Map_obj4C+$4C000000
0001D8B8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D8BC 4E00 FA96                  	dc.l Map_obj4E+$4E000000
0001D8C0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D8C4 3300 C7A0                  	dc.l Map_obj33+$33000000
0001D8C8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D8CC 5000 FE94                  	dc.l Map_obj50+$50000000
0001D8D0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D8D4 5101 0330                  	dc.l Map_obj51+$51000000
0001D8D8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D8DC 5201 05A6                  	dc.l Map_obj52+$52000000
0001D8E0 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D8E4 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D8E8 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D8EC 5400 F778                  	dc.l Map_obj54+$54000000
0001D8F0 0000 8680                  	dc.b 0,	0, $86,	$80
0001D8F4 5501 079A                  	dc.l Map_obj55+$55000000
0001D8F8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D8FC 7801 7310                  	dc.l Map_obj78+$78000000
0001D900 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D904 7901 7696                  	dc.l Map_obj79+$79000000
0001D908 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D90C                            	even
0001D90C                            	even
0001D90C                            
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C                            ; Debug	list - Star Light
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C                            Debug_SLZ:
0001D90C                            	include "_inc\Debug list - SLZ.asm"
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C                            ; Debug	list - Star Light
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C 000F                       	dc.w $F
0001D90E 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D912 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D916 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D91A 0000 0680                  	dc.b 0,	0, 6, $80
0001D91E 5901 129C                  	dc.l Map_obj59+$59000000
0001D922 0000 4000                  	dc.b 0,	0, $40,	0
0001D926 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D92A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D92E 1800 85E4                  	dc.l Map_obj18b+$18000000
0001D932 0000 4000                  	dc.b 0,	0, $40,	0
0001D936 5A01 13D6                  	dc.l Map_obj5A+$5A000000
0001D93A 0000 4000                  	dc.b 0,	0, $40,	0
0001D93E 5B01 158E                  	dc.l Map_obj5B+$5B000000
0001D942 0000 4000                  	dc.b 0,	0, $40,	0
0001D946 5D01 1B5E                  	dc.l Map_obj5D+$5D000000
0001D94A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D94E 5E01 1EF0                  	dc.l Map_obj5E+$5E000000
0001D952 0000 0374                  	dc.b 0,	0, 3, $74
0001D956 4100 E280                  	dc.l Map_obj41+$41000000
0001D95A 0000 0523                  	dc.b 0,	0, 5, $23
0001D95E 1300 B830                  	dc.l Map_obj14+$13000000
0001D962 0000 0480                  	dc.b 0,	0, 4, $80
0001D966 1C00 8C9C                  	dc.l Map_obj1C+$1C000000
0001D96A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D96E 5F01 216E                  	dc.l Map_obj5F+$5F000000
0001D972 0000 0400                  	dc.b 0,	0, 4, 0
0001D976 6001 2424                  	dc.l Map_obj60+$60000000
0001D97A 0000 2429                  	dc.b 0,	0, $24,	$29
0001D97E 7901 7696                  	dc.l Map_obj79+$79000000
0001D982 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D986                            	even
0001D986                            	even
0001D986                            
0001D986                            ; ---------------------------------------------------------------------------
0001D986                            ; Debug	list - Spring Yard
0001D986                            ; ---------------------------------------------------------------------------
0001D986                            Debug_SYZ:
0001D986                            	include "_inc\Debug list - SYZ.asm"
0001D986                            ; ---------------------------------------------------------------------------
0001D986                            ; Debug	list - Spring Yard
0001D986                            ; ---------------------------------------------------------------------------
0001D986 000F                       	dc.w $F
0001D988 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D98C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D990 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D994 0000 0680                  	dc.b 0,	0, 6, $80
0001D998 3600 D554                  	dc.l Map_obj36+$36000000
0001D99C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9A0 4100 E280                  	dc.l Map_obj41+$41000000
0001D9A4 0000 0523                  	dc.b 0,	0, 5, $23
0001D9A8 4300 E706                  	dc.l Map_obj43+$43000000
0001D9AC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D9B0 1200 EEE4                  	dc.l Map_obj12+$12000000
0001D9B4 0000 0000                  	dc.b 0,	0, 0, 0
0001D9B8 4700 F060                  	dc.l Map_obj47+$47000000
0001D9BC 0000 0380                  	dc.b 0,	0, 3, $80
0001D9C0 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D9C4 0000 0400                  	dc.b 0,	0, 4, 0
0001D9C8 2200 9E94                  	dc.l Map_obj22+$22000000
0001D9CC 0000 0444                  	dc.b 0,	0, 4, $44
0001D9D0 5000 FE94                  	dc.l Map_obj50+$50000000
0001D9D4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D9D8 1800 85D2                  	dc.l Map_obj18a+$18000000
0001D9DC 0000 4000                  	dc.b 0,	0, $40,	0
0001D9E0 5601 0C5C                  	dc.l Map_obj56+$56000000
0001D9E4 0000 4000                  	dc.b 0,	0, $40,	0
0001D9E8 3200 C360                  	dc.l Map_obj32+$32000000
0001D9EC 0000 0513                  	dc.b 0,	0, 5, $13
0001D9F0 7801 7310                  	dc.l Map_obj78+$78000000
0001D9F4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D9F8 7901 7696                  	dc.l Map_obj79+$79000000
0001D9FC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA00                            	even
0001DA00                            	even
0001DA00                            
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00                            ; Debug	list - Scrap Brain
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00                            Debug_SBZ:
0001DA00                            	include "_inc\Debug list - SBZ.asm"
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00                            ; Debug	list - Scrap Brain
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00 001D                       	dc.w $1D
0001DA02 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DA06 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA0A 2600 A9E6                  	dc.l Map_obj26+$26000000
0001DA0E 0000 0680                  	dc.b 0,	0, 6, $80
0001DA12 5F01 216E                  	dc.l Map_obj5F+$5F000000
0001DA16 0000 0400                  	dc.b 0,	0, 4, 0
0001DA1A 6001 2424                  	dc.l Map_obj60+$60000000
0001DA1E 0000 0429                  	dc.b 0,	0, 4, $29
0001DA22 7801 7310                  	dc.l Map_obj78+$78000000
0001DA26 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA2A 1501 0FF8                  	dc.l Map_obj15b+$15000000
0001DA2E 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA32 6701 5C34                  	dc.l Map_obj67+$67000000
0001DA36 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DA3A 5201 05A6                  	dc.l Map_obj52+$52000000
0001DA3E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DA42 3200 C360                  	dc.l Map_obj32+$32000000
0001DA46 0000 0513                  	dc.b 0,	0, 5, $13
0001DA4A 6901 5E8E                  	dc.l Map_obj69+$69000000
0001DA4E 0300 4492                  	dc.b 3,	0, $44,	$92
0001DA52 6901 5EE8                  	dc.l Map_obj69a+$69000000
0001DA56 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DA5A 6A01 6146                  	dc.l Map_obj6A+$6A000000
0001DA5E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DA62 5300 8B8C                  	dc.l Map_obj53+$53000000
0001DA66 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DA6A 5201 05A6                  	dc.l Map_obj52+$52000000
0001DA6E 3903 4460                  	dc.b $39, 3, $44, $60
0001DA72 6B01 6516                  	dc.l Map_obj6B+$6B000000
0001DA76 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DA7A 2A00 8E32                  	dc.l Map_obj2A+$2A000000
0001DA7E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DA82 6B01 6516                  	dc.l Map_obj6B+$6B000000
0001DA86 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DA8A 6A01 6146                  	dc.l Map_obj6A+$6A000000
0001DA8E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DA92 6B01 6516                  	dc.l Map_obj6B+$6B000000
0001DA96 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DA9A 6A01 6146                  	dc.l Map_obj6A+$6A000000
0001DA9E 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DAA2 6B01 6516                  	dc.l Map_obj6B+$6B000000
0001DAA6 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DAAA 6C01 66D8                  	dc.l Map_obj6C+$6C000000
0001DAAE 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DAB2 6D00 EB56                  	dc.l Map_obj6D+$6D000000
0001DAB6 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DABA 6D00 EB56                  	dc.l Map_obj6D+$6D000000
0001DABE 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DAC2 6E01 678E                  	dc.l Map_obj6E+$6E000000
0001DAC6 0400 047E                  	dc.b 4,	0, 4, $7E
0001DACA 7001 6BD4                  	dc.l Map_obj70+$70000000
0001DACE 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DAD2 7101 1A04                  	dc.l Map_obj71+$71000000
0001DAD6 1100 8680                  	dc.b $11, 0, $86, $80
0001DADA 1E00 92F0                  	dc.l Map_obj1E+$1E000000
0001DADE 0400 2302                  	dc.b 4,	0, $23,	2
0001DAE2 7901 7696                  	dc.l Map_obj79+$79000000
0001DAE6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DAEA                            	even
0001DAEA                            	even
0001DAEA                            
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA                            ; Debug	list - ending sequence / special stage
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA                            Debug_Ending:
0001DAEA                            	include "_inc\Debug list - Ending and SS.asm"
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA                            ; Debug	list - ending sequence / special stage
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA 000D                       	dc.w $D
0001DAEC 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DAF0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAF4 4700 F060                  	dc.l Map_obj47+$47000000
0001DAF8 0000 0380                  	dc.b 0,	0, 3, $80
0001DAFC 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB00 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB04 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB08 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB0C 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB10 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB14 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB18 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB1C 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB20 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB24 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB28 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB2C 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB30 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB34 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB38 1100 0585                  	dc.b $11, 0, 5,	$85
0001DB3C 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB40 1200 0593                  	dc.b $12, 0, 5,	$93
0001DB44 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB48 1300 0565                  	dc.b $13, 0, 5,	$65
0001DB4C 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB50 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DB54                            	even
0001DB54                            	even
0001DB54                            
0001DB54                            ; ---------------------------------------------------------------------------
0001DB54                            ; Main level load blocks
0001DB54                            ; ---------------------------------------------------------------------------
0001DB54                            MainLoadBlocks:
0001DB54                            	include "_inc\Main level load blocks.asm"
0001DB54                            ; ---------------------------------------------------------------------------
0001DB54                            ; Main level load blocks
0001DB54                            ;
0001DB54                            ; ===FORMAT===
0001DB54                            ; level	patterns + (1st	PLC num	* 10^6)
0001DB54                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DB54                            ; 256x256 mappings
0001DB54                            ; blank, music (unused), pal index (unused), pal index
0001DB54                            ; ---------------------------------------------------------------------------
0001DB54 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DB58 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DB5C 0000 0000                  	dc.l Blk256_GHZ
0001DB60 0081 0404                  	dc.b 0,	$81, 4,	4
0001DB64 0000 0000                  	dc.l Nem_LZ+$6000000
0001DB68 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DB6C 0000 0000                  	dc.l Blk256_LZ
0001DB70 0082 0505                  	dc.b 0,	$82, 5,	5
0001DB74 0000 0000                  	dc.l Nem_MZ+$8000000
0001DB78 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DB7C 0000 0000                  	dc.l Blk256_MZ
0001DB80 0083 0606                  	dc.b 0,	$83, 6,	6
0001DB84 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DB88 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DB8C 0000 0000                  	dc.l Blk256_SLZ
0001DB90 0084 0707                  	dc.b 0,	$84, 7,	7
0001DB94 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DB98 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DB9C 0000 0000                  	dc.l Blk256_SYZ
0001DBA0 0085 0808                  	dc.b 0,	$85, 8,	8
0001DBA4 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DBA8 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DBAC 0000 0000                  	dc.l Blk256_SBZ
0001DBB0 0086 0909                  	dc.b 0,	$86, 9,	9
0001DBB4 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DBB8 0000 0000                  	dc.l Blk16_GHZ
0001DBBC 0000 0000                  	dc.l Blk256_GHZ
0001DBC0 0086 1313                  	dc.b 0,	$86, $13, $13
0001DBC4                            	even
0001DBC4                            	even
0001DBC4                            
0001DBC4                            ; ---------------------------------------------------------------------------
0001DBC4                            ; Pattern load cues
0001DBC4                            ; ---------------------------------------------------------------------------
0001DBC4                            ArtLoadCues:
0001DBC4                            	include "_inc\Pattern load cues.asm"
0001DBC4                            ; ---------------------------------------------------------------------------
0001DBC4                            ; Pattern load cues - index
0001DBC4                            ; ---------------------------------------------------------------------------
0001DBC4 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DBC8 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DBCC 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DBD0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DBD4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DBD8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DBDC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DBE0 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DBE4 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DBE8 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DBEC 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DBF0 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DBF4 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DBF8 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DBFC 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC00 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04                            ; Pattern load cues - standard block 1
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04 0004                       PLC_Main:	dc.w 4
0001DC06 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC0A F400                       		dc.w $F400
0001DC0C 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC10 D940                       		dc.w $D940
0001DC12 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC16 FA80                       		dc.w $FA80
0001DC18 0000 0000                  		dc.l Nem_Ring		; rings
0001DC1C F640                       		dc.w $F640
0001DC1E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC22 F2E0                       		dc.w $F2E0
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; Pattern load cues - standard block 2
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24 0002                       PLC_Main2:	dc.w 2
0001DC26 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC2A D000                       		dc.w $D000
0001DC2C 0000 0000                  		dc.l Nem_Shield		; shield
0001DC30 A820                       		dc.w $A820
0001DC32 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC36 AB80                       		dc.w $AB80
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38                            ; Pattern load cues - explosion
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38 0000                       PLC_Explode:	dc.w 0
0001DC3A 0000 0000                  		dc.l Nem_Explode	; explosion
0001DC3E B400                       		dc.w $B400
0001DC40                            ; ---------------------------------------------------------------------------
0001DC40                            ; Pattern load cues - game/time	over
0001DC40                            ; ---------------------------------------------------------------------------
0001DC40 0000                       PLC_GameOver:	dc.w 0
0001DC42 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DC46 ABC0                       		dc.w $ABC0
0001DC48                            ; ---------------------------------------------------------------------------
0001DC48                            ; Pattern load cues - Green Hill
0001DC48                            ; ---------------------------------------------------------------------------
0001DC48 000B                       PLC_GHZ:	dc.w $B
0001DC4A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DC4E 0000                       		dc.w 0
0001DC50 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DC54 39A0                       		dc.w $39A0
0001DC56 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DC5A 6B00                       		dc.w $6B00
0001DC5C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DC60 7A00                       		dc.w $7A00
0001DC62 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DC66 8000                       		dc.w $8000
0001DC68 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DC6C 8880                       		dc.w $8880
0001DC6E 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DC72 8F60                       		dc.w $8F60
0001DC74 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DC78 9360                       		dc.w $9360
0001DC7A 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DC7E 9E00                       		dc.w $9E00
0001DC80 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DC84 A360                       		dc.w $A360
0001DC86 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DC8A A460                       		dc.w $A460
0001DC8C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DC90 A660                       		dc.w $A660
0001DC92 0005                       PLC_GHZ2:	dc.w 5
0001DC94 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DC98 7000                       		dc.w $7000
0001DC9A 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DC9E 71C0                       		dc.w $71C0
0001DCA0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DCA4 7300                       		dc.w $7300
0001DCA6 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DCAA 7540                       		dc.w $7540
0001DCAC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DCB0 A1E0                       		dc.w $A1E0
0001DCB2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DCB6 6980                       		dc.w $6980
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8                            ; Pattern load cues - Labyrinth
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8 000B                       PLC_LZ:		dc.w $B
0001DCBA 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DCBE 0000                       		dc.w 0
0001DCC0 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DCC4 3C00                       		dc.w $3C00
0001DCC6 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DCCA 3E00                       		dc.w $3E00
0001DCCC 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DCD0 4B20                       		dc.w $4B20
0001DCD2 0000 0000                  		dc.l Nem_Water		; water	surface
0001DCD6 6000                       		dc.w $6000
0001DCD8 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DCDC 6200                       		dc.w $6200
0001DCDE 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DCE2 6500                       		dc.w $6500
0001DCE4 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DCE8 6900                       		dc.w $6900
0001DCEA 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DCEE 7780                       		dc.w $7780
0001DCF0 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DCF4 7880                       		dc.w $7880
0001DCF6 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DCFA 7980                       		dc.w $7980
0001DCFC 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD00 94C0                       		dc.w $94C0
0001DD02 000C                       PLC_LZ2:	dc.w $C
0001DD04 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD08 7BC0                       		dc.w $7BC0
0001DD0A 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD0E 7CC0                       		dc.w $7CC0
0001DD10 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD14 7EC0                       		dc.w $7EC0
0001DD16 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD1A 5D20                       		dc.w $5D20
0001DD1C 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD20 8800                       		dc.w $8800
0001DD22 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD26 89E0                       		dc.w $89E0
0001DD28 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD2C 8CE0                       		dc.w $8CE0
0001DD2E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD32 90C0                       		dc.w $90C0
0001DD34 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD38 A1E0                       		dc.w $A1E0
0001DD3A 0000 0000                  		dc.l Nem_Cork		; cork block
0001DD3E A000                       		dc.w $A000
0001DD40 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD44 A360                       		dc.w $A360
0001DD46 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD4A A460                       		dc.w $A460
0001DD4C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD50 A660                       		dc.w $A660
0001DD52                            ; ---------------------------------------------------------------------------
0001DD52                            ; Pattern load cues - Marble
0001DD52                            ; ---------------------------------------------------------------------------
0001DD52 0009                       PLC_MZ:		dc.w 9
0001DD54 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DD58 0000                       		dc.w 0
0001DD5A 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DD5E 6000                       		dc.w $6000
0001DD60 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DD64 68A0                       		dc.w $68A0
0001DD66 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DD6A 7000                       		dc.w $7000
0001DD6C 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DD70 71C0                       		dc.w $71C0
0001DD72 0000 0000                  		dc.l Nem_Lava		; lava
0001DD76 7500                       		dc.w $7500
0001DD78 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DD7C 8880                       		dc.w $8880
0001DD7E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DD82 8F60                       		dc.w $8F60
0001DD84 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DD88 9700                       		dc.w $9700
0001DD8A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DD8E 9FE0                       		dc.w $9FE0
0001DD90 0004                       PLC_MZ2:	dc.w 4
0001DD92 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DD96 A260                       		dc.w $A260
0001DD98 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD9C A360                       		dc.w $A360
0001DD9E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDA2 A460                       		dc.w $A460
0001DDA4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDA8 A660                       		dc.w $A660
0001DDAA 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DDAE 5700                       		dc.w $5700
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            ; Pattern load cues - Star Light
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0 0008                       PLC_SLZ:	dc.w 8
0001DDB2 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DDB6 0000                       		dc.w 0
0001DDB8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DDBC 8000                       		dc.w $8000
0001DDBE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DDC2 8520                       		dc.w $8520
0001DDC4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDC8 9000                       		dc.w $9000
0001DDCA 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DDCE 9C00                       		dc.w $9C00
0001DDD0 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DDD4 A260                       		dc.w $A260
0001DDD6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDDA A360                       		dc.w $A360
0001DDDC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDE0 A460                       		dc.w $A460
0001DDE2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDE6 A660                       		dc.w $A660
0001DDE8 0005                       PLC_SLZ2:	dc.w 5
0001DDEA 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DDEE 6E80                       		dc.w $6E80
0001DDF0 0000 0000                  		dc.l Nem_Fan		; fan
0001DDF4 7400                       		dc.w $7400
0001DDF6 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DDFA 7980                       		dc.w $7980
0001DDFC 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE00 7B80                       		dc.w $7B80
0001DE02 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE06 9B00                       		dc.w $9B00
0001DE08 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE0C 9E00                       		dc.w $9E00
0001DE0E                            ; ---------------------------------------------------------------------------
0001DE0E                            ; Pattern load cues - Spring Yard
0001DE0E                            ; ---------------------------------------------------------------------------
0001DE0E 0004                       PLC_SYZ:	dc.w 4
0001DE10 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE14 0000                       		dc.w 0
0001DE16 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE1A 8000                       		dc.w $8000
0001DE1C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE20 8880                       		dc.w $8880
0001DE22 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE26 8F60                       		dc.w $8F60
0001DE28 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE2C 9700                       		dc.w $9700
0001DE2E 0007                       PLC_SYZ2:	dc.w 7
0001DE30 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE34 7000                       		dc.w $7000
0001DE36 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE3A 72C0                       		dc.w $72C0
0001DE3C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DE40 7740                       		dc.w $7740
0001DE42 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DE46 9FE0                       		dc.w $9FE0
0001DE48 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DE4C A1E0                       		dc.w $A1E0
0001DE4E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE52 A360                       		dc.w $A360
0001DE54 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE58 A460                       		dc.w $A460
0001DE5A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE5E A660                       		dc.w $A660
0001DE60                            ; ---------------------------------------------------------------------------
0001DE60                            ; Pattern load cues - Scrap Brain
0001DE60                            ; ---------------------------------------------------------------------------
0001DE60 000B                       PLC_SBZ:	dc.w $B
0001DE62 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DE66 0000                       		dc.w 0
0001DE68 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DE6C 5800                       		dc.w $5800
0001DE6E 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DE72 5D00                       		dc.w $5D00
0001DE74 0000 0000                  		dc.l Nem_Girder		; girder
0001DE78 5E00                       		dc.w $5E00
0001DE7A 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DE7E 6040                       		dc.w $6040
0001DE80 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DE84 6880                       		dc.w $6880
0001DE86 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DE8A 6900                       		dc.w $6900
0001DE8C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE90 7220                       		dc.w $7220
0001DE92 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DE96 76A0                       		dc.w $76A0
0001DE98 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DE9C 7B20                       		dc.w $7B20
0001DE9E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DEA2 7EA0                       		dc.w $7EA0
0001DEA4 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DEA8 9860                       		dc.w $9860
0001DEAA 000C                       PLC_SBZ2:	dc.w $C
0001DEAC 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEB0 5600                       		dc.w $5600
0001DEB2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DEB6 8000                       		dc.w $8000
0001DEB8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DEBC 8520                       		dc.w $8520
0001DEBE 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DEC2 8C00                       		dc.w $8C00
0001DEC4 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DEC8 8DE0                       		dc.w $8DE0
0001DECA 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DECE 8FC0                       		dc.w $8FC0
0001DED0 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DED4 9240                       		dc.w $9240
0001DED6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DEDA 7F20                       		dc.w $7F20
0001DEDC 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DEE0 9BE0                       		dc.w $9BE0
0001DEE2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEE6 A1E0                       		dc.w $A1E0
0001DEE8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEEC A360                       		dc.w $A360
0001DEEE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEF2 A460                       		dc.w $A460
0001DEF4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEF8 A660                       		dc.w $A660
0001DEFA                            ; ---------------------------------------------------------------------------
0001DEFA                            ; Pattern load cues - title card
0001DEFA                            ; ---------------------------------------------------------------------------
0001DEFA 0000                       PLC_TitleCard:	dc.w 0
0001DEFC 0000 0000                  		dc.l Nem_TitleCard
0001DF00 B000                       		dc.w $B000
0001DF02                            ; ---------------------------------------------------------------------------
0001DF02                            ; Pattern load cues - act 3 boss
0001DF02                            ; ---------------------------------------------------------------------------
0001DF02 0005                       PLC_Boss:	dc.w 5
0001DF04 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF08 8000                       		dc.w $8000
0001DF0A 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF0E 8D80                       		dc.w $8D80
0001DF10 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF14 93A0                       		dc.w $93A0
0001DF16 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF1A A300                       		dc.w $A300
0001DF1C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF20 A300                       		dc.w $A300
0001DF22 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF26 A540                       		dc.w $A540
0001DF28                            ; ---------------------------------------------------------------------------
0001DF28                            ; Pattern load cues - act 1/2 signpost
0001DF28                            ; ---------------------------------------------------------------------------
0001DF28 0002                       PLC_Signpost:	dc.w 2
0001DF2A 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF2E D000                       		dc.w $D000
0001DF30 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF34 96C0                       		dc.w $96C0
0001DF36 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DF3A 8C40                       		dc.w $8C40
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C                            ; Pattern load cues - beta special stage warp effect
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C 0000                       PLC_Warp:	dc.w 0
0001DF3E 0000 0000                  		dc.l Nem_Warp
0001DF42 A820                       		dc.w $A820
0001DF44                            ; ---------------------------------------------------------------------------
0001DF44                            ; Pattern load cues - special stage
0001DF44                            ; ---------------------------------------------------------------------------
0001DF44 0010                       PLC_SpeStage:	dc.w $10
0001DF46 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DF4A 0000                       		dc.w 0
0001DF4C 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DF50 0A20                       		dc.w $A20
0001DF52 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DF56 2840                       		dc.w $2840
0001DF58 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DF5C 4760                       		dc.w $4760
0001DF5E 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DF62 4A20                       		dc.w $4A20
0001DF64 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DF68 4C60                       		dc.w $4C60
0001DF6A 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DF6E 5E00                       		dc.w $5E00
0001DF70 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DF74 6E00                       		dc.w $6E00
0001DF76 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DF7A 7E00                       		dc.w $7E00
0001DF7C 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DF80 8E00                       		dc.w $8E00
0001DF82 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DF86 9E00                       		dc.w $9E00
0001DF88 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DF8C AE00                       		dc.w $AE00
0001DF8E 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DF92 BE00                       		dc.w $BE00
0001DF94 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DF98 EE00                       		dc.w $EE00
0001DF9A 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DF9E F2E0                       		dc.w $F2E0
0001DFA0 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DFA4 F400                       		dc.w $F400
0001DFA6 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DFAA F520                       		dc.w $F520
0001DFAC 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DFB0 F2E0                       		dc.w $F2E0
0001DFB2 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DFB6 F400                       		dc.w $F400
0001DFB8 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DFBC F520                       		dc.w $F520
0001DFBE                            ; ---------------------------------------------------------------------------
0001DFBE                            ; Pattern load cues - GHZ animals
0001DFBE                            ; ---------------------------------------------------------------------------
0001DFBE 0001                       PLC_GHZAnimals:	dc.w 1
0001DFC0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DFC4 B000                       		dc.w $B000
0001DFC6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DFCA B240                       		dc.w $B240
0001DFCC                            ; ---------------------------------------------------------------------------
0001DFCC                            ; Pattern load cues - LZ animals
0001DFCC                            ; ---------------------------------------------------------------------------
0001DFCC 0001                       PLC_LZAnimals:	dc.w 1
0001DFCE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DFD2 B000                       		dc.w $B000
0001DFD4 0000 0000                  		dc.l Nem_Seal		; seal
0001DFD8 B240                       		dc.w $B240
0001DFDA                            ; ---------------------------------------------------------------------------
0001DFDA                            ; Pattern load cues - MZ animals
0001DFDA                            ; ---------------------------------------------------------------------------
0001DFDA 0001                       PLC_MZAnimals:	dc.w 1
0001DFDC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DFE0 B000                       		dc.w $B000
0001DFE2 0000 0000                  		dc.l Nem_Seal		; seal
0001DFE6 B240                       		dc.w $B240
0001DFE8                            ; ---------------------------------------------------------------------------
0001DFE8                            ; Pattern load cues - SLZ animals
0001DFE8                            ; ---------------------------------------------------------------------------
0001DFE8 0001                       PLC_SLZAnimals:	dc.w 1
0001DFEA 0000 0000                  		dc.l Nem_Pig		; pig
0001DFEE B000                       		dc.w $B000
0001DFF0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DFF4 B240                       		dc.w $B240
0001DFF6                            ; ---------------------------------------------------------------------------
0001DFF6                            ; Pattern load cues - SYZ animals
0001DFF6                            ; ---------------------------------------------------------------------------
0001DFF6 0001                       PLC_SYZAnimals:	dc.w 1
0001DFF8 0000 0000                  		dc.l Nem_Pig		; pig
0001DFFC B000                       		dc.w $B000
0001DFFE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E002 B240                       		dc.w $B240
0001E004                            ; ---------------------------------------------------------------------------
0001E004                            ; Pattern load cues - SBZ animals
0001E004                            ; ---------------------------------------------------------------------------
0001E004 0001                       PLC_SBZAnimals:	dc.w 1
0001E006 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E00A B000                       		dc.w $B000
0001E00C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E010 B240                       		dc.w $B240
0001E012                            ; ---------------------------------------------------------------------------
0001E012                            ; Pattern load cues - special stage results screen
0001E012                            ; ---------------------------------------------------------------------------
0001E012 0001                       PLC_SpeStResult:dc.w 1
0001E014 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E018 A820                       		dc.w $A820
0001E01A 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E01E AA20                       		dc.w $AA20
0001E020                            ; ---------------------------------------------------------------------------
0001E020                            ; Pattern load cues - ending sequence
0001E020                            ; ---------------------------------------------------------------------------
0001E020 000E                       PLC_Ending:	dc.w $E
0001E022 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E026 0000                       		dc.w 0
0001E028 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E02C 39A0                       		dc.w $39A0
0001E02E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E032 6B00                       		dc.w $6B00
0001E034 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E038 7400                       		dc.w $7400
0001E03A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E03E 78A0                       		dc.w $78A0
0001E040 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E044 7C20                       		dc.w $7C20
0001E046 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E04A A480                       		dc.w $A480
0001E04C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E050 AA60                       		dc.w $AA60
0001E052 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E056 ACA0                       		dc.w $ACA0
0001E058 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E05C AE60                       		dc.w $AE60
0001E05E 0000 0000                  		dc.l Nem_Seal		; seal
0001E062 B0A0                       		dc.w $B0A0
0001E064 0000 0000                  		dc.l Nem_Pig		; pig
0001E068 B260                       		dc.w $B260
0001E06A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E06E B4A0                       		dc.w $B4A0
0001E070 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E074 B660                       		dc.w $B660
0001E076 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E07A B8A0                       		dc.w $B8A0
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C 0002                       PLC_TryAgain:	dc.w 2
0001E07E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E082 78A0                       		dc.w $78A0
0001E084 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E088 7C20                       		dc.w $7C20
0001E08A 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E08E B400                       		dc.w $B400
0001E090                            ; ---------------------------------------------------------------------------
0001E090                            ; Pattern load cues - Eggman on SBZ 2
0001E090                            ; ---------------------------------------------------------------------------
0001E090 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E092 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E096 A300                       		dc.w $A300
0001E098 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E09C 8000                       		dc.w $8000
0001E09E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0A2 9400                       		dc.w $9400
0001E0A4                            ; ---------------------------------------------------------------------------
0001E0A4                            ; Pattern load cues - final boss
0001E0A4                            ; ---------------------------------------------------------------------------
0001E0A4 0004                       PLC_FZBoss:	dc.w 4
0001E0A6 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E0AA 7400                       		dc.w $7400
0001E0AC 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E0B0 6000                       		dc.w $6000
0001E0B2 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E0B6 8000                       		dc.w $8000
0001E0B8 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E0BC 8E00                       		dc.w $8E00
0001E0BE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E0C2 A540                       		dc.w $A540
0001E0C4                            		even
0001E0C4                            		even
0001E0C4                            
0001E0C4                            		incbin	misc\padding.bin
0001E1B2                            		even
0001E1B2                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E614                            		even
0001E614                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E70C                            		even
0001E70C                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E820                            		even
0001E820                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F82C                            		even
0001F82C                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022A82 00                         		even
00022A82                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022AB6                            		even
00022AB6                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022B74                            		even
00022B74                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002301C                            		even
0002301C                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002307A                            		even
0002307A                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00023C80                            		even
00023C80                            ; ---------------------------------------------------------------------------
00023C80                            ; Sprite mappings - Sonic
00023C80                            ; ---------------------------------------------------------------------------
00023C80                            Map_Sonic:
00023C80                            	include "_maps\Sonic.asm"
00023C80                            Map_0dcc:
00023C80 0000                       Map_0dcc_0: 	dc.w Map_0dcc_B6-Map_0dcc
00023C82 0000                       Map_0dcc_2: 	dc.w Map_0dcc_B7-Map_0dcc
00023C84 0000                       Map_0dcc_4: 	dc.w Map_0dcc_C2-Map_0dcc
00023C86 0000                       Map_0dcc_6: 	dc.w Map_0dcc_D2-Map_0dcc
00023C88 0000                       Map_0dcc_8: 	dc.w Map_0dcc_E2-Map_0dcc
00023C8A 0000                       Map_0dcc_A: 	dc.w Map_0dcc_F2-Map_0dcc
00023C8C 0000                       Map_0dcc_C: 	dc.w Map_0dcc_102-Map_0dcc
00023C8E 0000                       Map_0dcc_E: 	dc.w Map_0dcc_117-Map_0dcc
00023C90 0000                       Map_0dcc_10: 	dc.w Map_0dcc_122-Map_0dcc
00023C92 0000                       Map_0dcc_12: 	dc.w Map_0dcc_12D-Map_0dcc
00023C94 0000                       Map_0dcc_14: 	dc.w Map_0dcc_142-Map_0dcc
00023C96 0000                       Map_0dcc_16: 	dc.w Map_0dcc_14D-Map_0dcc
00023C98 0000                       Map_0dcc_18: 	dc.w Map_0dcc_15D-Map_0dcc
00023C9A 0000                       Map_0dcc_1A: 	dc.w Map_0dcc_177-Map_0dcc
00023C9C 0000                       Map_0dcc_1C: 	dc.w Map_0dcc_196-Map_0dcc
00023C9E 0000                       Map_0dcc_1E: 	dc.w Map_0dcc_1AB-Map_0dcc
00023CA0 0000                       Map_0dcc_20: 	dc.w Map_0dcc_1C5-Map_0dcc
00023CA2 0000                       Map_0dcc_22: 	dc.w Map_0dcc_1DA-Map_0dcc
00023CA4 0000                       Map_0dcc_24: 	dc.w Map_0dcc_1F4-Map_0dcc
00023CA6 0000                       Map_0dcc_26: 	dc.w Map_0dcc_209-Map_0dcc
00023CA8 0000                       Map_0dcc_28: 	dc.w Map_0dcc_214-Map_0dcc
00023CAA 0000                       Map_0dcc_2A: 	dc.w Map_0dcc_21F-Map_0dcc
00023CAC 0000                       Map_0dcc_2C: 	dc.w Map_0dcc_234-Map_0dcc
00023CAE 0000                       Map_0dcc_2E: 	dc.w Map_0dcc_23F-Map_0dcc
00023CB0 0000                       Map_0dcc_30: 	dc.w Map_0dcc_24F-Map_0dcc
00023CB2 0000                       Map_0dcc_32: 	dc.w Map_0dcc_26E-Map_0dcc
00023CB4 0000                       Map_0dcc_34: 	dc.w Map_0dcc_28D-Map_0dcc
00023CB6 0000                       Map_0dcc_36: 	dc.w Map_0dcc_2A2-Map_0dcc
00023CB8 0000                       Map_0dcc_38: 	dc.w Map_0dcc_2BC-Map_0dcc
00023CBA 0000                       Map_0dcc_3A: 	dc.w Map_0dcc_2D1-Map_0dcc
00023CBC 0000                       Map_0dcc_3C: 	dc.w Map_0dcc_2EB-Map_0dcc
00023CBE 0000                       Map_0dcc_3E: 	dc.w Map_0dcc_2F6-Map_0dcc
00023CC0 0000                       Map_0dcc_40: 	dc.w Map_0dcc_301-Map_0dcc
00023CC2 0000                       Map_0dcc_42: 	dc.w Map_0dcc_30C-Map_0dcc
00023CC4 0000                       Map_0dcc_44: 	dc.w Map_0dcc_317-Map_0dcc
00023CC6 0000                       Map_0dcc_46: 	dc.w Map_0dcc_32C-Map_0dcc
00023CC8 0000                       Map_0dcc_48: 	dc.w Map_0dcc_33C-Map_0dcc
00023CCA 0000                       Map_0dcc_4A: 	dc.w Map_0dcc_351-Map_0dcc
00023CCC 0000                       Map_0dcc_4C: 	dc.w Map_0dcc_361-Map_0dcc
00023CCE 0000                       Map_0dcc_4E: 	dc.w Map_0dcc_36C-Map_0dcc
00023CD0 0000                       Map_0dcc_50: 	dc.w Map_0dcc_377-Map_0dcc
00023CD2 0000                       Map_0dcc_52: 	dc.w Map_0dcc_382-Map_0dcc
00023CD4 0000                       Map_0dcc_54: 	dc.w Map_0dcc_38D-Map_0dcc
00023CD6 0000                       Map_0dcc_56: 	dc.w Map_0dcc_3A2-Map_0dcc
00023CD8 0000                       Map_0dcc_58: 	dc.w Map_0dcc_3AD-Map_0dcc
00023CDA 0000                       Map_0dcc_5A: 	dc.w Map_0dcc_3C2-Map_0dcc
00023CDC 0000                       Map_0dcc_5C: 	dc.w Map_0dcc_3CD-Map_0dcc
00023CDE 0000                       Map_0dcc_5E: 	dc.w Map_0dcc_3D3-Map_0dcc
00023CE0 0000                       Map_0dcc_60: 	dc.w Map_0dcc_3D9-Map_0dcc
00023CE2 0000                       Map_0dcc_62: 	dc.w Map_0dcc_3DF-Map_0dcc
00023CE4 0000                       Map_0dcc_64: 	dc.w Map_0dcc_3E5-Map_0dcc
00023CE6 0000                       Map_0dcc_66: 	dc.w Map_0dcc_3EB-Map_0dcc
00023CE8 0000                       Map_0dcc_68: 	dc.w Map_0dcc_3F6-Map_0dcc
00023CEA 0000                       Map_0dcc_6A: 	dc.w Map_0dcc_3FC-Map_0dcc
00023CEC 0000                       Map_0dcc_6C: 	dc.w Map_0dcc_407-Map_0dcc
00023CEE 0000                       Map_0dcc_6E: 	dc.w Map_0dcc_40D-Map_0dcc
00023CF0 0000                       Map_0dcc_70: 	dc.w Map_0dcc_418-Map_0dcc
00023CF2 0000                       Map_0dcc_72: 	dc.w Map_0dcc_42D-Map_0dcc
00023CF4 0000                       Map_0dcc_74: 	dc.w Map_0dcc_44C-Map_0dcc
00023CF6 0000                       Map_0dcc_76: 	dc.w Map_0dcc_45C-Map_0dcc
00023CF8 0000                       Map_0dcc_78: 	dc.w Map_0dcc_46C-Map_0dcc
00023CFA 0000                       Map_0dcc_7A: 	dc.w Map_0dcc_47C-Map_0dcc
00023CFC 0000                       Map_0dcc_7C: 	dc.w Map_0dcc_487-Map_0dcc
00023CFE 0000                       Map_0dcc_7E: 	dc.w Map_0dcc_497-Map_0dcc
00023D00 0000                       Map_0dcc_80: 	dc.w Map_0dcc_4A7-Map_0dcc
00023D02 0000                       Map_0dcc_82: 	dc.w Map_0dcc_4B7-Map_0dcc
00023D04 0000                       Map_0dcc_84: 	dc.w Map_0dcc_4CC-Map_0dcc
00023D06 0000                       Map_0dcc_86: 	dc.w Map_0dcc_4E1-Map_0dcc
00023D08 0000                       Map_0dcc_88: 	dc.w Map_0dcc_4FB-Map_0dcc
00023D0A 0000                       Map_0dcc_8A: 	dc.w Map_0dcc_515-Map_0dcc
00023D0C 0000                       Map_0dcc_8C: 	dc.w Map_0dcc_520-Map_0dcc
00023D0E 0000                       Map_0dcc_8E: 	dc.w Map_0dcc_530-Map_0dcc
00023D10 0000                       Map_0dcc_90: 	dc.w Map_0dcc_53B-Map_0dcc
00023D12 0000                       Map_0dcc_92: 	dc.w Map_0dcc_54B-Map_0dcc
00023D14 0000                       Map_0dcc_94: 	dc.w Map_0dcc_556-Map_0dcc
00023D16 0000                       Map_0dcc_96: 	dc.w Map_0dcc_566-Map_0dcc
00023D18 0000                       Map_0dcc_98: 	dc.w Map_0dcc_576-Map_0dcc
00023D1A 0000                       Map_0dcc_9A: 	dc.w Map_0dcc_590-Map_0dcc
00023D1C 0000                       Map_0dcc_9C: 	dc.w Map_0dcc_5AA-Map_0dcc
00023D1E 0000                       Map_0dcc_9E: 	dc.w Map_0dcc_5B5-Map_0dcc
00023D20 0000                       Map_0dcc_A0: 	dc.w Map_0dcc_5C5-Map_0dcc
00023D22 0000                       Map_0dcc_A2: 	dc.w Map_0dcc_5CB-Map_0dcc
00023D24 0000                       Map_0dcc_A4: 	dc.w Map_0dcc_5D1-Map_0dcc
00023D26 0000                       Map_0dcc_A6: 	dc.w Map_0dcc_5D7-Map_0dcc
00023D28 0000                       Map_0dcc_A8: 	dc.w Map_0dcc_5E7-Map_0dcc
00023D2A 0000                       Map_0dcc_AA: 	dc.w Map_0dcc_5F7-Map_0dcc
00023D2C 0000                       Map_0dcc_AC: 	dc.w Map_0dcc_607-Map_0dcc
00023D2E 0000                       Map_0dcc_AE: 	dc.w Map_0dcc_617-Map_0dcc
00023D30 0000                       Map_0dcc_B0: 	dc.w Map_0dcc_622-Map_0dcc
00023D32 0000                       Map_0dcc_B2: 	dc.w Map_0dcc_62D-Map_0dcc
00023D34 0000                       Map_0dcc_B4: 	dc.w Map_0dcc_63D-Map_0dcc
00023D36 00                         Map_0dcc_B6: 	dc.b $0
00023D37 02                         Map_0dcc_B7: 	dc.b $2
00023D38 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00023D3D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00023D42 03                         Map_0dcc_C2: 	dc.b $3
00023D43 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023D48 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023D4D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D52 03                         Map_0dcc_D2: 	dc.b $3
00023D53 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023D58 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023D5D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D62 03                         Map_0dcc_E2: 	dc.b $3
00023D63 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023D68 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023D6D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D72 03                         Map_0dcc_F2: 	dc.b $3
00023D73 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023D78 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023D7D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023D82 04                         Map_0dcc_102: 	dc.b $4
00023D83 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00023D88 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00023D8D FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00023D92 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00023D97 02                         Map_0dcc_117: 	dc.b $2
00023D98 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00023D9D FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00023DA2 02                         Map_0dcc_122: 	dc.b $2
00023DA3 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00023DA8 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00023DAD 04                         Map_0dcc_12D: 	dc.b $4
00023DAE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023DB3 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00023DB8 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00023DBD 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00023DC2 02                         Map_0dcc_142: 	dc.b $2
00023DC3 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00023DC8 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00023DCD 03                         Map_0dcc_14D: 	dc.b $3
00023DCE ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00023DD3 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00023DD8 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00023DDD 05                         Map_0dcc_15D: 	dc.b $5
00023DDE EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023DE3 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00023DE8 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00023DED 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00023DF2 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00023DF7 06                         Map_0dcc_177: 	dc.b $6
00023DF8 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023DFD EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E02 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00023E07 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00023E0C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00023E11 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00023E16 04                         Map_0dcc_196: 	dc.b $4
00023E17 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023E1C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023E21 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00023E26 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00023E2B 05                         Map_0dcc_1AB: 	dc.b $5
00023E2C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E31 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00023E36 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00023E3B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00023E40 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00023E45 04                         Map_0dcc_1C5: 	dc.b $4
00023E46 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023E4B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E50 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00023E55 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00023E5A 05                         Map_0dcc_1DA: 	dc.b $5
00023E5B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023E60 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023E65 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00023E6A FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00023E6F 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00023E74 04                         Map_0dcc_1F4: 	dc.b $4
00023E75 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00023E7A EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00023E7F FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00023E84 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00023E89 02                         Map_0dcc_209: 	dc.b $2
00023E8A F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00023E8F EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00023E94 02                         Map_0dcc_214: 	dc.b $2
00023E95 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00023E9A F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00023E9F 04                         Map_0dcc_21F: 	dc.b $4
00023EA0 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00023EA5 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00023EAA FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00023EAF 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00023EB4 02                         Map_0dcc_234: 	dc.b $2
00023EB5 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00023EBA F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00023EBF 03                         Map_0dcc_23F: 	dc.b $3
00023EC0 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00023EC5 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00023ECA F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00023ECF 06                         Map_0dcc_24F: 	dc.b $6
00023ED0 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023ED5 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00023EDA F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00023EDF F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00023EE4 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00023EE9 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00023EEE 06                         Map_0dcc_26E: 	dc.b $6
00023EEF FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023EF4 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00023EF9 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00023EFE F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00023F03 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00023F08 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00023F0D 04                         Map_0dcc_28D: 	dc.b $4
00023F0E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023F13 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00023F18 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00023F1D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023F22 05                         Map_0dcc_2A2: 	dc.b $5
00023F23 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023F28 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00023F2D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00023F32 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00023F37 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00023F3C 04                         Map_0dcc_2BC: 	dc.b $4
00023F3D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023F42 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023F47 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023F4C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023F51 05                         Map_0dcc_2D1: 	dc.b $5
00023F52 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023F57 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00023F5C F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00023F61 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023F66 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00023F6B 02                         Map_0dcc_2EB: 	dc.b $2
00023F6C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023F71 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023F76 02                         Map_0dcc_2F6: 	dc.b $2
00023F77 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023F7C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023F81 02                         Map_0dcc_301: 	dc.b $2
00023F82 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023F87 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023F8C 02                         Map_0dcc_30C: 	dc.b $2
00023F8D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023F92 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023F97 04                         Map_0dcc_317: 	dc.b $4
00023F98 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023F9D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FA2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FA7 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023FAC 03                         Map_0dcc_32C: 	dc.b $3
00023FAD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FB2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FB7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FBC 04                         Map_0dcc_33C: 	dc.b $4
00023FBD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FC2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FC7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FCC FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023FD1 03                         Map_0dcc_351: 	dc.b $3
00023FD2 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FD7 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023FDC FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023FE1 02                         Map_0dcc_361: 	dc.b $2
00023FE2 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023FE7 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023FEC 02                         Map_0dcc_36C: 	dc.b $2
00023FED F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023FF2 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023FF7 02                         Map_0dcc_377: 	dc.b $2
00023FF8 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023FFD F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024002 02                         Map_0dcc_382: 	dc.b $2
00024003 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024008 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002400D 04                         Map_0dcc_38D: 	dc.b $4
0002400E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024013 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024018 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002401D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024022 02                         Map_0dcc_3A2: 	dc.b $2
00024023 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024028 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002402D 04                         Map_0dcc_3AD: 	dc.b $4
0002402E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024033 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024038 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002403D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024042 02                         Map_0dcc_3C2: 	dc.b $2
00024043 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024048 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002404D 01                         Map_0dcc_3CD: 	dc.b $1
0002404E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024053 01                         Map_0dcc_3D3: 	dc.b $1
00024054 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024059 01                         Map_0dcc_3D9: 	dc.b $1
0002405A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002405F 01                         Map_0dcc_3DF: 	dc.b $1
00024060 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024065 01                         Map_0dcc_3E5: 	dc.b $1
00024066 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002406B 02                         Map_0dcc_3EB: 	dc.b $2
0002406C F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024071 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00024076 01                         Map_0dcc_3F6: 	dc.b $1
00024077 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002407C 02                         Map_0dcc_3FC: 	dc.b $2
0002407D EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00024082 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00024087 01                         Map_0dcc_407: 	dc.b $1
00024088 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002408D 02                         Map_0dcc_40D: 	dc.b $2
0002408E ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024093 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00024098 04                         Map_0dcc_418: 	dc.b $4
00024099 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002409E FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000240A3 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000240A8 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000240AD 06                         Map_0dcc_42D: 	dc.b $6
000240AE F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000240B3 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000240B8 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000240BD 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000240C2 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000240C7 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000240CC 03                         Map_0dcc_44C: 	dc.b $3
000240CD EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
000240D2 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
000240D7 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
000240DC 03                         Map_0dcc_45C: 	dc.b $3
000240DD EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
000240E2 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
000240E7 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
000240EC 03                         Map_0dcc_46C: 	dc.b $3
000240ED F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000240F2 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
000240F7 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
000240FC 02                         Map_0dcc_47C: 	dc.b $2
000240FD F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00024102 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00024107 03                         Map_0dcc_487: 	dc.b $3
00024108 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
0002410D FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00024112 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00024117 03                         Map_0dcc_497: 	dc.b $3
00024118 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002411D FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00024122 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00024127 03                         Map_0dcc_4A7: 	dc.b $3
00024128 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002412D 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00024132 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00024137 04                         Map_0dcc_4B7: 	dc.b $4
00024138 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002413D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00024142 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00024147 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002414C 04                         Map_0dcc_4CC: 	dc.b $4
0002414D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00024152 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00024157 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002415C F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00024161 05                         Map_0dcc_4E1: 	dc.b $5
00024162 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00024167 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002416C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00024171 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00024176 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002417B 05                         Map_0dcc_4FB: 	dc.b $5
0002417C E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00024181 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00024186 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002418B 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00024190 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00024195 02                         Map_0dcc_515: 	dc.b $2
00024196 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002419B 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000241A0 03                         Map_0dcc_520: 	dc.b $3
000241A1 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000241A6 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000241AB 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000241B0 02                         Map_0dcc_530: 	dc.b $2
000241B1 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000241B6 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000241BB 03                         Map_0dcc_53B: 	dc.b $3
000241BC EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000241C1 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000241C6 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000241CB 02                         Map_0dcc_54B: 	dc.b $2
000241CC EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000241D1 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000241D6 03                         Map_0dcc_556: 	dc.b $3
000241D7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000241DC 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000241E1 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000241E6 03                         Map_0dcc_566: 	dc.b $3
000241E7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000241EC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000241F1 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000241F6 05                         Map_0dcc_576: 	dc.b $5
000241F7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000241FC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024201 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024206 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002420B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00024210 05                         Map_0dcc_590: 	dc.b $5
00024211 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024216 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002421B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024220 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00024225 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002422A 02                         Map_0dcc_5AA: 	dc.b $2
0002422B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00024230 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00024235 03                         Map_0dcc_5B5: 	dc.b $3
00024236 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002423B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00024240 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00024245 01                         Map_0dcc_5C5: 	dc.b $1
00024246 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002424B 01                         Map_0dcc_5CB: 	dc.b $1
0002424C F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00024251 01                         Map_0dcc_5D1: 	dc.b $1
00024252 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00024257 03                         Map_0dcc_5D7: 	dc.b $3
00024258 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002425D FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00024262 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
00024267 03                         Map_0dcc_5E7: 	dc.b $3
00024268 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
0002426D FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00024272 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00024277 03                         Map_0dcc_5F7: 	dc.b $3
00024278 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002427D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00024282 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00024287 03                         Map_0dcc_607: 	dc.b $3
00024288 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002428D FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00024292 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00024297 02                         Map_0dcc_617: 	dc.b $2
00024298 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002429D F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000242A2 02                         Map_0dcc_622: 	dc.b $2
000242A3 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000242A8 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000242AD 03                         Map_0dcc_62D: 	dc.b $3
000242AE ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000242B3 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000242B8 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000242BD 02                         Map_0dcc_63D: 	dc.b $2
000242BE F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000242C3 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000242C8                            	even
000242C8                            	even
000242C8                            
000242C8                            ; ---------------------------------------------------------------------------
000242C8                            ; Uncompressed graphics	loading	array for Sonic
000242C8                            ; ---------------------------------------------------------------------------
000242C8                            SonicDynPLC:
000242C8                            	include "_inc\Sonic dynamic pattern load cues.asm"
000242C8                            DPLC_cc21:
000242C8 0000                       DPLC_cc21_0: 	dc.w DPLC_cc21_B6-DPLC_cc21
000242CA 0000                       DPLC_cc21_2: 	dc.w DPLC_cc21_B7-DPLC_cc21
000242CC 0000                       DPLC_cc21_4: 	dc.w DPLC_cc21_BC-DPLC_cc21
000242CE 0000                       DPLC_cc21_6: 	dc.w DPLC_cc21_C3-DPLC_cc21
000242D0 0000                       DPLC_cc21_8: 	dc.w DPLC_cc21_CA-DPLC_cc21
000242D2 0000                       DPLC_cc21_A: 	dc.w DPLC_cc21_D1-DPLC_cc21
000242D4 0000                       DPLC_cc21_C: 	dc.w DPLC_cc21_D8-DPLC_cc21
000242D6 0000                       DPLC_cc21_E: 	dc.w DPLC_cc21_E1-DPLC_cc21
000242D8 0000                       DPLC_cc21_10: 	dc.w DPLC_cc21_E6-DPLC_cc21
000242DA 0000                       DPLC_cc21_12: 	dc.w DPLC_cc21_EB-DPLC_cc21
000242DC 0000                       DPLC_cc21_14: 	dc.w DPLC_cc21_F4-DPLC_cc21
000242DE 0000                       DPLC_cc21_16: 	dc.w DPLC_cc21_F9-DPLC_cc21
000242E0 0000                       DPLC_cc21_18: 	dc.w DPLC_cc21_100-DPLC_cc21
000242E2 0000                       DPLC_cc21_1A: 	dc.w DPLC_cc21_10B-DPLC_cc21
000242E4 0000                       DPLC_cc21_1C: 	dc.w DPLC_cc21_118-DPLC_cc21
000242E6 0000                       DPLC_cc21_1E: 	dc.w DPLC_cc21_121-DPLC_cc21
000242E8 0000                       DPLC_cc21_20: 	dc.w DPLC_cc21_12C-DPLC_cc21
000242EA 0000                       DPLC_cc21_22: 	dc.w DPLC_cc21_135-DPLC_cc21
000242EC 0000                       DPLC_cc21_24: 	dc.w DPLC_cc21_140-DPLC_cc21
000242EE 0000                       DPLC_cc21_26: 	dc.w DPLC_cc21_149-DPLC_cc21
000242F0 0000                       DPLC_cc21_28: 	dc.w DPLC_cc21_14E-DPLC_cc21
000242F2 0000                       DPLC_cc21_2A: 	dc.w DPLC_cc21_153-DPLC_cc21
000242F4 0000                       DPLC_cc21_2C: 	dc.w DPLC_cc21_15C-DPLC_cc21
000242F6 0000                       DPLC_cc21_2E: 	dc.w DPLC_cc21_161-DPLC_cc21
000242F8 0000                       DPLC_cc21_30: 	dc.w DPLC_cc21_168-DPLC_cc21
000242FA 0000                       DPLC_cc21_32: 	dc.w DPLC_cc21_175-DPLC_cc21
000242FC 0000                       DPLC_cc21_34: 	dc.w DPLC_cc21_182-DPLC_cc21
000242FE 0000                       DPLC_cc21_36: 	dc.w DPLC_cc21_18B-DPLC_cc21
00024300 0000                       DPLC_cc21_38: 	dc.w DPLC_cc21_196-DPLC_cc21
00024302 0000                       DPLC_cc21_3A: 	dc.w DPLC_cc21_19F-DPLC_cc21
00024304 0000                       DPLC_cc21_3C: 	dc.w DPLC_cc21_1AA-DPLC_cc21
00024306 0000                       DPLC_cc21_3E: 	dc.w DPLC_cc21_1AF-DPLC_cc21
00024308 0000                       DPLC_cc21_40: 	dc.w DPLC_cc21_1B4-DPLC_cc21
0002430A 0000                       DPLC_cc21_42: 	dc.w DPLC_cc21_1B9-DPLC_cc21
0002430C 0000                       DPLC_cc21_44: 	dc.w DPLC_cc21_1BE-DPLC_cc21
0002430E 0000                       DPLC_cc21_46: 	dc.w DPLC_cc21_1C7-DPLC_cc21
00024310 0000                       DPLC_cc21_48: 	dc.w DPLC_cc21_1CE-DPLC_cc21
00024312 0000                       DPLC_cc21_4A: 	dc.w DPLC_cc21_1D7-DPLC_cc21
00024314 0000                       DPLC_cc21_4C: 	dc.w DPLC_cc21_1DE-DPLC_cc21
00024316 0000                       DPLC_cc21_4E: 	dc.w DPLC_cc21_1E3-DPLC_cc21
00024318 0000                       DPLC_cc21_50: 	dc.w DPLC_cc21_1E8-DPLC_cc21
0002431A 0000                       DPLC_cc21_52: 	dc.w DPLC_cc21_1ED-DPLC_cc21
0002431C 0000                       DPLC_cc21_54: 	dc.w DPLC_cc21_1F2-DPLC_cc21
0002431E 0000                       DPLC_cc21_56: 	dc.w DPLC_cc21_1FB-DPLC_cc21
00024320 0000                       DPLC_cc21_58: 	dc.w DPLC_cc21_200-DPLC_cc21
00024322 0000                       DPLC_cc21_5A: 	dc.w DPLC_cc21_209-DPLC_cc21
00024324 0000                       DPLC_cc21_5C: 	dc.w DPLC_cc21_20E-DPLC_cc21
00024326 0000                       DPLC_cc21_5E: 	dc.w DPLC_cc21_211-DPLC_cc21
00024328 0000                       DPLC_cc21_60: 	dc.w DPLC_cc21_214-DPLC_cc21
0002432A 0000                       DPLC_cc21_62: 	dc.w DPLC_cc21_217-DPLC_cc21
0002432C 0000                       DPLC_cc21_64: 	dc.w DPLC_cc21_21A-DPLC_cc21
0002432E 0000                       DPLC_cc21_66: 	dc.w DPLC_cc21_21D-DPLC_cc21
00024330 0000                       DPLC_cc21_68: 	dc.w DPLC_cc21_222-DPLC_cc21
00024332 0000                       DPLC_cc21_6A: 	dc.w DPLC_cc21_225-DPLC_cc21
00024334 0000                       DPLC_cc21_6C: 	dc.w DPLC_cc21_22A-DPLC_cc21
00024336 0000                       DPLC_cc21_6E: 	dc.w DPLC_cc21_22D-DPLC_cc21
00024338 0000                       DPLC_cc21_70: 	dc.w DPLC_cc21_232-DPLC_cc21
0002433A 0000                       DPLC_cc21_72: 	dc.w DPLC_cc21_23B-DPLC_cc21
0002433C 0000                       DPLC_cc21_74: 	dc.w DPLC_cc21_240-DPLC_cc21
0002433E 0000                       DPLC_cc21_76: 	dc.w DPLC_cc21_247-DPLC_cc21
00024340 0000                       DPLC_cc21_78: 	dc.w DPLC_cc21_24E-DPLC_cc21
00024342 0000                       DPLC_cc21_7A: 	dc.w DPLC_cc21_255-DPLC_cc21
00024344 0000                       DPLC_cc21_7C: 	dc.w DPLC_cc21_258-DPLC_cc21
00024346 0000                       DPLC_cc21_7E: 	dc.w DPLC_cc21_25F-DPLC_cc21
00024348 0000                       DPLC_cc21_80: 	dc.w DPLC_cc21_266-DPLC_cc21
0002434A 0000                       DPLC_cc21_82: 	dc.w DPLC_cc21_26D-DPLC_cc21
0002434C 0000                       DPLC_cc21_84: 	dc.w DPLC_cc21_276-DPLC_cc21
0002434E 0000                       DPLC_cc21_86: 	dc.w DPLC_cc21_27F-DPLC_cc21
00024350 0000                       DPLC_cc21_88: 	dc.w DPLC_cc21_28A-DPLC_cc21
00024352 0000                       DPLC_cc21_8A: 	dc.w DPLC_cc21_295-DPLC_cc21
00024354 0000                       DPLC_cc21_8C: 	dc.w DPLC_cc21_29A-DPLC_cc21
00024356 0000                       DPLC_cc21_8E: 	dc.w DPLC_cc21_2A1-DPLC_cc21
00024358 0000                       DPLC_cc21_90: 	dc.w DPLC_cc21_2A6-DPLC_cc21
0002435A 0000                       DPLC_cc21_92: 	dc.w DPLC_cc21_2AD-DPLC_cc21
0002435C 0000                       DPLC_cc21_94: 	dc.w DPLC_cc21_2B2-DPLC_cc21
0002435E 0000                       DPLC_cc21_96: 	dc.w DPLC_cc21_2B9-DPLC_cc21
00024360 0000                       DPLC_cc21_98: 	dc.w DPLC_cc21_2C0-DPLC_cc21
00024362 0000                       DPLC_cc21_9A: 	dc.w DPLC_cc21_2CB-DPLC_cc21
00024364 0000                       DPLC_cc21_9C: 	dc.w DPLC_cc21_2D6-DPLC_cc21
00024366 0000                       DPLC_cc21_9E: 	dc.w DPLC_cc21_2DB-DPLC_cc21
00024368 0000                       DPLC_cc21_A0: 	dc.w DPLC_cc21_2E2-DPLC_cc21
0002436A 0000                       DPLC_cc21_A2: 	dc.w DPLC_cc21_2E5-DPLC_cc21
0002436C 0000                       DPLC_cc21_A4: 	dc.w DPLC_cc21_2E8-DPLC_cc21
0002436E 0000                       DPLC_cc21_A6: 	dc.w DPLC_cc21_2EB-DPLC_cc21
00024370 0000                       DPLC_cc21_A8: 	dc.w DPLC_cc21_2F2-DPLC_cc21
00024372 0000                       DPLC_cc21_AA: 	dc.w DPLC_cc21_2F9-DPLC_cc21
00024374 0000                       DPLC_cc21_AC: 	dc.w DPLC_cc21_300-DPLC_cc21
00024376 0000                       DPLC_cc21_AE: 	dc.w DPLC_cc21_307-DPLC_cc21
00024378 0000                       DPLC_cc21_B0: 	dc.w DPLC_cc21_30C-DPLC_cc21
0002437A 0000                       DPLC_cc21_B2: 	dc.w DPLC_cc21_311-DPLC_cc21
0002437C 0000                       DPLC_cc21_B4: 	dc.w DPLC_cc21_316-DPLC_cc21
0002437E 00                         DPLC_cc21_B6: 	dc.b $0
0002437F 02                         DPLC_cc21_B7: 	dc.b $2
00024380 F000                       	dc.b $F0, $0
00024382 1010                       	dc.b $10, $10
00024384 03                         DPLC_cc21_BC: 	dc.b $3
00024385 5012                       	dc.b $50, $12
00024387 5018                       	dc.b $50, $18
00024389 201E                       	dc.b $20, $1E
0002438B 03                         DPLC_cc21_C3: 	dc.b $3
0002438C 5021                       	dc.b $50, $21
0002438E 5018                       	dc.b $50, $18
00024390 201E                       	dc.b $20, $1E
00024392 03                         DPLC_cc21_CA: 	dc.b $3
00024393 5021                       	dc.b $50, $21
00024395 5018                       	dc.b $50, $18
00024397 2027                       	dc.b $20, $27
00024399 03                         DPLC_cc21_D1: 	dc.b $3
0002439A 802A                       	dc.b $80, $2A
0002439C 2033                       	dc.b $20, $33
0002439E 2036                       	dc.b $20, $36
000243A0 04                         DPLC_cc21_D8: 	dc.b $4
000243A1 7039                       	dc.b $70, $39
000243A3 5041                       	dc.b $50, $41
000243A5 5047                       	dc.b $50, $47
000243A7 104D                       	dc.b $10, $4D
000243A9 02                         DPLC_cc21_E1: 	dc.b $2
000243AA 7039                       	dc.b $70, $39
000243AC B04F                       	dc.b $B0, $4F
000243AE 02                         DPLC_cc21_E6: 	dc.b $2
000243AF 505B                       	dc.b $50, $5B
000243B1 8061                       	dc.b $80, $61
000243B3 04                         DPLC_cc21_EB: 	dc.b $4
000243B4 505B                       	dc.b $50, $5B
000243B6 506A                       	dc.b $50, $6A
000243B8 5070                       	dc.b $50, $70
000243BA 1076                       	dc.b $10, $76
000243BC 02                         DPLC_cc21_F4: 	dc.b $2
000243BD F51B                       	dc.b $F5, $1B
000243BF 152B                       	dc.b $15, $2B
000243C1 03                         DPLC_cc21_F9: 	dc.b $3
000243C2 7039                       	dc.b $70, $39
000243C4 3079                       	dc.b $30, $79
000243C6 507D                       	dc.b $50, $7D
000243C8 05                         DPLC_cc21_100: 	dc.b $5
000243C9 5083                       	dc.b $50, $83
000243CB 5089                       	dc.b $50, $89
000243CD 208F                       	dc.b $20, $8F
000243CF 5092                       	dc.b $50, $92
000243D1 0098                       	dc.b $0, $98
000243D3 06                         DPLC_cc21_10B: 	dc.b $6
000243D4 5083                       	dc.b $50, $83
000243D6 1099                       	dc.b $10, $99
000243D8 309B                       	dc.b $30, $9B
000243DA 509F                       	dc.b $50, $9F
000243DC 30A5                       	dc.b $30, $A5
000243DE 00A9                       	dc.b $0, $A9
000243E0 04                         DPLC_cc21_118: 	dc.b $4
000243E1 50AA                       	dc.b $50, $AA
000243E3 10B0                       	dc.b $10, $B0
000243E5 70B2                       	dc.b $70, $B2
000243E7 20BA                       	dc.b $20, $BA
000243E9 05                         DPLC_cc21_121: 	dc.b $5
000243EA 50BD                       	dc.b $50, $BD
000243EC 30C3                       	dc.b $30, $C3
000243EE 70C7                       	dc.b $70, $C7
000243F0 20CF                       	dc.b $20, $CF
000243F2 10D2                       	dc.b $10, $D2
000243F4 04                         DPLC_cc21_12C: 	dc.b $4
000243F5 50BD                       	dc.b $50, $BD
000243F7 10D4                       	dc.b $10, $D4
000243F9 70D6                       	dc.b $70, $D6
000243FB 20DE                       	dc.b $20, $DE
000243FD 05                         DPLC_cc21_135: 	dc.b $5
000243FE 5083                       	dc.b $50, $83
00024400 1099                       	dc.b $10, $99
00024402 008F                       	dc.b $0, $8F
00024404 70E1                       	dc.b $70, $E1
00024406 20E9                       	dc.b $20, $E9
00024408 04                         DPLC_cc21_140: 	dc.b $4
00024409 70EC                       	dc.b $70, $EC
0002440B 50F4                       	dc.b $50, $F4
0002440D 10FA                       	dc.b $10, $FA
0002440F 50FC                       	dc.b $50, $FC
00024411 02                         DPLC_cc21_149: 	dc.b $2
00024412 70EC                       	dc.b $70, $EC
00024414 B102                       	dc.b $B1, $2
00024416 02                         DPLC_cc21_14E: 	dc.b $2
00024417 510E                       	dc.b $51, $E
00024419 8114                       	dc.b $81, $14
0002441B 04                         DPLC_cc21_153: 	dc.b $4
0002441C 510E                       	dc.b $51, $E
0002441E 511D                       	dc.b $51, $1D
00024420 1123                       	dc.b $11, $23
00024422 5125                       	dc.b $51, $25
00024424 02                         DPLC_cc21_15C: 	dc.b $2
00024425 510E                       	dc.b $51, $E
00024427 B12B                       	dc.b $B1, $2B
00024429 03                         DPLC_cc21_161: 	dc.b $3
0002442A 70EC                       	dc.b $70, $EC
0002442C 0102                       	dc.b $1, $2
0002442E 8137                       	dc.b $81, $37
00024430 06                         DPLC_cc21_168: 	dc.b $6
00024431 5140                       	dc.b $51, $40
00024433 1146                       	dc.b $11, $46
00024435 1148                       	dc.b $11, $48
00024437 814A                       	dc.b $81, $4A
00024439 0153                       	dc.b $1, $53
0002443B 0154                       	dc.b $1, $54
0002443D 06                         DPLC_cc21_175: 	dc.b $6
0002443E 5140                       	dc.b $51, $40
00024440 2155                       	dc.b $21, $55
00024442 1158                       	dc.b $11, $58
00024444 115A                       	dc.b $11, $5A
00024446 815C                       	dc.b $81, $5C
00024448 0153                       	dc.b $1, $53
0002444A 04                         DPLC_cc21_182: 	dc.b $4
0002444B 5165                       	dc.b $51, $65
0002444D 116B                       	dc.b $11, $6B
0002444F 816D                       	dc.b $81, $6D
00024451 1176                       	dc.b $11, $76
00024453 05                         DPLC_cc21_18B: 	dc.b $5
00024454 5178                       	dc.b $51, $78
00024456 217E                       	dc.b $21, $7E
00024458 1181                       	dc.b $11, $81
0002445A 7183                       	dc.b $71, $83
0002445C 218B                       	dc.b $21, $8B
0002445E 04                         DPLC_cc21_196: 	dc.b $4
0002445F 5178                       	dc.b $51, $78
00024461 118E                       	dc.b $11, $8E
00024463 8190                       	dc.b $81, $90
00024465 1199                       	dc.b $11, $99
00024467 05                         DPLC_cc21_19F: 	dc.b $5
00024468 5140                       	dc.b $51, $40
0002446A 819B                       	dc.b $81, $9B
0002446C 115A                       	dc.b $11, $5A
0002446E 11A4                       	dc.b $11, $A4
00024470 0153                       	dc.b $1, $53
00024472 02                         DPLC_cc21_1AA: 	dc.b $2
00024473 51A6                       	dc.b $51, $A6
00024475 B1AC                       	dc.b $B1, $AC
00024477 02                         DPLC_cc21_1AF: 	dc.b $2
00024478 505B                       	dc.b $50, $5B
0002447A B1B8                       	dc.b $B1, $B8
0002447C 02                         DPLC_cc21_1B4: 	dc.b $2
0002447D 51A6                       	dc.b $51, $A6
0002447F B1C4                       	dc.b $B1, $C4
00024481 02                         DPLC_cc21_1B9: 	dc.b $2
00024482 505B                       	dc.b $50, $5B
00024484 B1D0                       	dc.b $B1, $D0
00024486 04                         DPLC_cc21_1BE: 	dc.b $4
00024487 51DC                       	dc.b $51, $DC
00024489 11E2                       	dc.b $11, $E2
0002448B B1E4                       	dc.b $B1, $E4
0002448D 01F0                       	dc.b $1, $F0
0002448F 03                         DPLC_cc21_1C7: 	dc.b $3
00024490 51F1                       	dc.b $51, $F1
00024492 11F7                       	dc.b $11, $F7
00024494 B1F9                       	dc.b $B1, $F9
00024496 04                         DPLC_cc21_1CE: 	dc.b $4
00024497 51DC                       	dc.b $51, $DC
00024499 1205                       	dc.b $12, $5
0002449B B207                       	dc.b $B2, $7
0002449D 01F0                       	dc.b $1, $F0
0002449F 03                         DPLC_cc21_1D7: 	dc.b $3
000244A0 51F1                       	dc.b $51, $F1
000244A2 11F7                       	dc.b $11, $F7
000244A4 B213                       	dc.b $B2, $13
000244A6 02                         DPLC_cc21_1DE: 	dc.b $2
000244A7 521F                       	dc.b $52, $1F
000244A9 B225                       	dc.b $B2, $25
000244AB 02                         DPLC_cc21_1E3: 	dc.b $2
000244AC 510E                       	dc.b $51, $E
000244AE B231                       	dc.b $B2, $31
000244B0 02                         DPLC_cc21_1E8: 	dc.b $2
000244B1 521F                       	dc.b $52, $1F
000244B3 B23D                       	dc.b $B2, $3D
000244B5 02                         DPLC_cc21_1ED: 	dc.b $2
000244B6 510E                       	dc.b $51, $E
000244B8 B249                       	dc.b $B2, $49
000244BA 04                         DPLC_cc21_1F2: 	dc.b $4
000244BB 5255                       	dc.b $52, $55
000244BD 125B                       	dc.b $12, $5B
000244BF B25D                       	dc.b $B2, $5D
000244C1 0269                       	dc.b $2, $69
000244C3 02                         DPLC_cc21_1FB: 	dc.b $2
000244C4 726A                       	dc.b $72, $6A
000244C6 B272                       	dc.b $B2, $72
000244C8 04                         DPLC_cc21_200: 	dc.b $4
000244C9 5255                       	dc.b $52, $55
000244CB 127E                       	dc.b $12, $7E
000244CD B280                       	dc.b $B2, $80
000244CF 0269                       	dc.b $2, $69
000244D1 02                         DPLC_cc21_209: 	dc.b $2
000244D2 726A                       	dc.b $72, $6A
000244D4 B28C                       	dc.b $B2, $8C
000244D6 01                         DPLC_cc21_20E: 	dc.b $1
000244D7 F298                       	dc.b $F2, $98
000244D9 01                         DPLC_cc21_211: 	dc.b $1
000244DA F2A8                       	dc.b $F2, $A8
000244DC 01                         DPLC_cc21_214: 	dc.b $1
000244DD F2B8                       	dc.b $F2, $B8
000244DF 01                         DPLC_cc21_217: 	dc.b $1
000244E0 F2C8                       	dc.b $F2, $C8
000244E2 01                         DPLC_cc21_21A: 	dc.b $1
000244E3 F2D8                       	dc.b $F2, $D8
000244E5 02                         DPLC_cc21_21D: 	dc.b $2
000244E6 B2E8                       	dc.b $B2, $E8
000244E8 22F4                       	dc.b $22, $F4
000244EA 01                         DPLC_cc21_222: 	dc.b $1
000244EB F2F7                       	dc.b $F2, $F7
000244ED 02                         DPLC_cc21_225: 	dc.b $2
000244EE B307                       	dc.b $B3, $7
000244F0 2313                       	dc.b $23, $13
000244F2 01                         DPLC_cc21_22A: 	dc.b $1
000244F3 F316                       	dc.b $F3, $16
000244F5 02                         DPLC_cc21_22D: 	dc.b $2
000244F6 5326                       	dc.b $53, $26
000244F8 B32C                       	dc.b $B3, $2C
000244FA 04                         DPLC_cc21_232: 	dc.b $4
000244FB 5338                       	dc.b $53, $38
000244FD 733E                       	dc.b $73, $3E
000244FF 1346                       	dc.b $13, $46
00024501 0348                       	dc.b $3, $48
00024503 02                         DPLC_cc21_23B: 	dc.b $2
00024504 D349                       	dc.b $D3, $49
00024506 3517                       	dc.b $35, $17
00024508 03                         DPLC_cc21_240: 	dc.b $3
00024509 2357                       	dc.b $23, $57
0002450B 235A                       	dc.b $23, $5A
0002450D F35D                       	dc.b $F3, $5D
0002450F 03                         DPLC_cc21_247: 	dc.b $3
00024510 B36D                       	dc.b $B3, $6D
00024512 7379                       	dc.b $73, $79
00024514 0078                       	dc.b $0, $78
00024516 03                         DPLC_cc21_24E: 	dc.b $3
00024517 7381                       	dc.b $73, $81
00024519 3389                       	dc.b $33, $89
0002451B 238D                       	dc.b $23, $8D
0002451D 01                         DPLC_cc21_255: 	dc.b $1
0002451E 8390                       	dc.b $83, $90
00024520 03                         DPLC_cc21_258: 	dc.b $3
00024521 7399                       	dc.b $73, $99
00024523 03A1                       	dc.b $3, $A1
00024525 33A2                       	dc.b $33, $A2
00024527 03                         DPLC_cc21_25F: 	dc.b $3
00024528 73A6                       	dc.b $73, $A6
0002452A 33AE                       	dc.b $33, $AE
0002452C 23B2                       	dc.b $23, $B2
0002452E 03                         DPLC_cc21_266: 	dc.b $3
0002452F B3B5                       	dc.b $B3, $B5
00024531 13C1                       	dc.b $13, $C1
00024533 03C3                       	dc.b $3, $C3
00024535 04                         DPLC_cc21_26D: 	dc.b $4
00024536 B3C4                       	dc.b $B3, $C4
00024538 33D0                       	dc.b $33, $D0
0002453A 03D4                       	dc.b $3, $D4
0002453C 03D5                       	dc.b $3, $D5
0002453E 04                         DPLC_cc21_276: 	dc.b $4
0002453F B3D6                       	dc.b $B3, $D6
00024541 33E2                       	dc.b $33, $E2
00024543 03E6                       	dc.b $3, $E6
00024545 03E7                       	dc.b $3, $E7
00024547 05                         DPLC_cc21_27F: 	dc.b $5
00024548 83E8                       	dc.b $83, $E8
0002454A 13F1                       	dc.b $13, $F1
0002454C 53F3                       	dc.b $53, $F3
0002454E 13F9                       	dc.b $13, $F9
00024550 03FB                       	dc.b $3, $FB
00024552 05                         DPLC_cc21_28A: 	dc.b $5
00024553 83FC                       	dc.b $83, $FC
00024555 1405                       	dc.b $14, $5
00024557 53F3                       	dc.b $53, $F3
00024559 13F9                       	dc.b $13, $F9
0002455B 03FB                       	dc.b $3, $FB
0002455D 02                         DPLC_cc21_295: 	dc.b $2
0002455E 8407                       	dc.b $84, $7
00024560 7410                       	dc.b $74, $10
00024562 03                         DPLC_cc21_29A: 	dc.b $3
00024563 8418                       	dc.b $84, $18
00024565 2421                       	dc.b $24, $21
00024567 1424                       	dc.b $14, $24
00024569 02                         DPLC_cc21_2A1: 	dc.b $2
0002456A 8426                       	dc.b $84, $26
0002456C 742F                       	dc.b $74, $2F
0002456E 03                         DPLC_cc21_2A6: 	dc.b $3
0002456F 8418                       	dc.b $84, $18
00024571 2437                       	dc.b $24, $37
00024573 143A                       	dc.b $14, $3A
00024575 02                         DPLC_cc21_2AD: 	dc.b $2
00024576 543C                       	dc.b $54, $3C
00024578 B442                       	dc.b $B4, $42
0002457A 03                         DPLC_cc21_2B2: 	dc.b $3
0002457B 844E                       	dc.b $84, $4E
0002457D 3457                       	dc.b $34, $57
0002457F 045B                       	dc.b $4, $5B
00024581 03                         DPLC_cc21_2B9: 	dc.b $3
00024582 745C                       	dc.b $74, $5C
00024584 1464                       	dc.b $14, $64
00024586 B466                       	dc.b $B4, $66
00024588 05                         DPLC_cc21_2C0: 	dc.b $5
00024589 7472                       	dc.b $74, $72
0002458B 147A                       	dc.b $14, $7A
0002458D 547C                       	dc.b $54, $7C
0002458F 3482                       	dc.b $34, $82
00024591 0486                       	dc.b $4, $86
00024593 05                         DPLC_cc21_2CB: 	dc.b $5
00024594 7487                       	dc.b $74, $87
00024596 147A                       	dc.b $14, $7A
00024598 548F                       	dc.b $54, $8F
0002459A 3482                       	dc.b $34, $82
0002459C 0486                       	dc.b $4, $86
0002459E 02                         DPLC_cc21_2D6: 	dc.b $2
0002459F 2495                       	dc.b $24, $95
000245A1 F498                       	dc.b $F4, $98
000245A3 03                         DPLC_cc21_2DB: 	dc.b $3
000245A4 24A8                       	dc.b $24, $A8
000245A6 B4AB                       	dc.b $B4, $AB
000245A8 24B7                       	dc.b $24, $B7
000245AA 01                         DPLC_cc21_2E2: 	dc.b $1
000245AB B4BA                       	dc.b $B4, $BA
000245AD 01                         DPLC_cc21_2E5: 	dc.b $1
000245AE 54C6                       	dc.b $54, $C6
000245B0 01                         DPLC_cc21_2E8: 	dc.b $1
000245B1 14CC                       	dc.b $14, $CC
000245B3 03                         DPLC_cc21_2EB: 	dc.b $3
000245B4 7381                       	dc.b $73, $81
000245B6 3389                       	dc.b $33, $89
000245B8 238D                       	dc.b $23, $8D
000245BA 03                         DPLC_cc21_2F2: 	dc.b $3
000245BB 7399                       	dc.b $73, $99
000245BD 03A1                       	dc.b $3, $A1
000245BF 33A2                       	dc.b $33, $A2
000245C1 03                         DPLC_cc21_2F9: 	dc.b $3
000245C2 B4CE                       	dc.b $B4, $CE
000245C4 14DA                       	dc.b $14, $DA
000245C6 34DC                       	dc.b $34, $DC
000245C8 03                         DPLC_cc21_300: 	dc.b $3
000245C9 54E0                       	dc.b $54, $E0
000245CB B4E6                       	dc.b $B4, $E6
000245CD 1074                       	dc.b $10, $74
000245CF 02                         DPLC_cc21_307: 	dc.b $2
000245D0 F4F2                       	dc.b $F4, $F2
000245D2 2502                       	dc.b $25, $2
000245D4 02                         DPLC_cc21_30C: 	dc.b $2
000245D5 F505                       	dc.b $F5, $5
000245D7 1515                       	dc.b $15, $15
000245D9 02                         DPLC_cc21_311: 	dc.b $2
000245DA F52D                       	dc.b $F5, $2D
000245DC 253D                       	dc.b $25, $3D
000245DE 02                         DPLC_cc21_316: 	dc.b $2
000245DF F540                       	dc.b $F5, $40
000245E1 2550                       	dc.b $25, $50
000245E4 00                         	even
000245E4 00                         	even
000245E4                            
000245E4                            ; ---------------------------------------------------------------------------
000245E4                            ; Uncompressed graphics	- Sonic
000245E4                            ; ---------------------------------------------------------------------------
000245E4                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002F044                            		even
0002F044                            ; ---------------------------------------------------------------------------
0002F044                            ; Compressed graphics - various
0002F044                            ; ---------------------------------------------------------------------------
0002F044                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002F148                            		even
0002F148                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F182                            		even
0002F182                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002F318                            		even
0002F318                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002F460                            		even
0002F460                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F56A                            		even
0002F56A                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F5BC                            		even
0002F5BC                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F804                            		even
0002F804                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002F98A                            		even
0002F98A                            ; ---------------------------------------------------------------------------
0002F98A                            ; Sprite mappings - walls of the special stage
0002F98A                            ; ---------------------------------------------------------------------------
0002F98A                            Map_SSWalls:
0002F98A                            	include "_maps\SSwalls.asm"
0002F98A                            ; ---------------------------------------------------------------------------
0002F98A                            ; Sprite mappings - walls of the special stage
0002F98A                            ; ---------------------------------------------------------------------------
0002F98A 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002F98E 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002F992 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002F996 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002F99A 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002F99E 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002F9A2 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002F9A6 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002F9AA 01                         byte_2C584:	dc.b 1
0002F9AB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002F9B0 01                         byte_2C58A:	dc.b 1
0002F9B1 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002F9B6 01                         byte_2C590:	dc.b 1
0002F9B7 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002F9BC 01                         byte_2C596:	dc.b 1
0002F9BD F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002F9C2 01                         byte_2C59C:	dc.b 1
0002F9C3 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002F9C8 01                         byte_2C5A2:	dc.b 1
0002F9C9 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002F9CE 01                         byte_2C5A8:	dc.b 1
0002F9CF F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002F9D4 01                         byte_2C5AE:	dc.b 1
0002F9D5 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002F9DA 01                         byte_2C5B4:	dc.b 1
0002F9DB F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002F9E0 01                         byte_2C5BA:	dc.b 1
0002F9E1 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002F9E6 01                         byte_2C5C0:	dc.b 1
0002F9E7 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002F9EC 01                         byte_2C5C6:	dc.b 1
0002F9ED F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002F9F2 01                         byte_2C5CC:	dc.b 1
0002F9F3 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002F9F8 01                         byte_2C5D2:	dc.b 1
0002F9F9 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002F9FE 01                         byte_2C5D8:	dc.b 1
0002F9FF F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002FA04 01                         byte_2C5DE:	dc.b 1
0002FA05 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002FA0A                            		even
0002FA0A                            		even
0002FA0A                            ; ---------------------------------------------------------------------------
0002FA0A                            ; Compressed graphics - special stage
0002FA0A                            ; ---------------------------------------------------------------------------
0002FA0A                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00030342                            		even
00030342                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00030476                            		even
00030476                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00031106                            		even
00031106                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00031406                            		even
00031406                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000318FA                            		even
000318FA                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000319E8                            		even
000319E8                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00031AB8                            		even
00031AB8                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00031BAE                            		even
00031BAE                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031C0C                            		even
00031C0C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00031C9E                            		even
00031C9E                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031D60                            		even
00031D60                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031E2E                            		even
00031E2E                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00031EFA                            		even
00031EFA                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00031FC2                            		even
00031FC2                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003208C                            		even
0003208C                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003215C                            		even
0003215C                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00032350                            		even
00032350                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000324B8                            		even
000324B8                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00032568                            		even
00032568                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00032642                            		even
00032642                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000326C6                            		even
000326C6                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00032844                            		even
00032844                            ; ---------------------------------------------------------------------------
00032844                            ; Compressed graphics - GHZ stuff
00032844                            ; ---------------------------------------------------------------------------
00032844                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003288E                            		even
0003288E                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000329A8                            		even
000329A8                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00032A94                            		even
00032A94                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032ADC                            		even
00032ADC                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00032C7A                            		even
00032C7A                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00032CF6                            		even
00032CF6                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00032F0A                            		even
00032F0A                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00033036                            		even
00033036                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00033164                            		even
00033164                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00033202                            		even
00033202                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00033262                            		even
00033262                            ; ---------------------------------------------------------------------------
00033262                            ; Compressed graphics - LZ stuff
00033262                            ; ---------------------------------------------------------------------------
00033262                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00033386                            		even
00033386                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00033B7A                            		even
00033B7A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00033CFA                            		even
00033CFA                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00033E64                            		even
00033E64                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000344BA                            		even
000344BA                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00034570                            		even
00034570                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00034612                            		even
00034612                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003476E                            		even
0003476E                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000347D2                            		even
000347D2                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00034924                            		even
00034924                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034E06                            		even
00034E06                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00034F76                            		even
00034F76                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003522E                            		even
0003522E                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00035366                            		even
00035366                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00035490                            		even
00035490                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000355A0                            		even
000355A0                            ; ---------------------------------------------------------------------------
000355A0                            ; Compressed graphics - MZ stuff
000355A0                            ; ---------------------------------------------------------------------------
000355A0                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003582E                            		even
0003582E                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000358EC                            		even
000358EC                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000359A4                            		even
000359A4                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000359F8                            		even
000359F8                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00035CD6                            		even
00035CD6                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000365EC                            		even
000365EC                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00036750                            		even
00036750                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000367D8                            		even
000367D8                            ; ---------------------------------------------------------------------------
000367D8                            ; Compressed graphics - SLZ stuff
000367D8                            ; ---------------------------------------------------------------------------
000367D8                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00036A14                            		even
00036A14                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036B5A                            		even
00036B5A                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00036D9E                            		even
00036D9E                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00036E00                            		even
00036E00                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00036EE2                            		even
00036EE2                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000370C4                            		even
000370C4                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000371D0                            		even
000371D0                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00037274                            		even
00037274                            ; ---------------------------------------------------------------------------
00037274                            ; Compressed graphics - SYZ stuff
00037274                            ; ---------------------------------------------------------------------------
00037274                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000373DE                            		even
000373DE                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00037440                            		even
00037440                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00037522                            		even
00037522                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000377B0                            		even
000377B0                            ; ---------------------------------------------------------------------------
000377B0                            ; Compressed graphics - SBZ stuff
000377B0                            ; ---------------------------------------------------------------------------
000377B0                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00037804                            		even
00037804                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00037AA0                            		even
00037AA0                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00037CA4                            		even
00037CA4                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00037E42                            		even
00037E42                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00038172                            		even
00038172                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00038350                            		even
00038350                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000383A8                            		even
000383A8                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00038528                            		even
00038528                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00038626                            		even
00038626                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000387B2                            		even
000387B2                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00038802                            		even
00038802                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003885A                            		even
0003885A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00038956                            		even
00038956                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00038A6C                            		even
00038A6C                            ; ---------------------------------------------------------------------------
00038A6C                            ; Compressed graphics - enemies
00038A6C                            ; ---------------------------------------------------------------------------
00038A6C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00038E2C                            		even
00038E2C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00038FD6 00                         		even
00038FD6                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00039398 00                         		even
00039398                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00039580                            		even
00039580                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00039C6A                            		even
00039C6A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00039ED2                            		even
00039ED2                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003A15C                            		even
0003A15C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A680                            		even
0003A680                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A876                            		even
0003A876                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003AE94                            		even
0003AE94                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003B27C                            		even
0003B27C                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B578                            		even
0003B578                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003B7C0                            		even
0003B7C0                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003BA58                            		even
0003BA58                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003BC36                            		even
0003BC36                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003BDC4                            		even
0003BDC4                            ; ---------------------------------------------------------------------------
0003BDC4                            ; Compressed graphics - various
0003BDC4                            ; ---------------------------------------------------------------------------
0003BDC4                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003C3D2                            		even
0003C3D2                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003C4C8                            		even
0003C4C8                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C5CE                            		even
0003C5CE                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003C6C2                            		even
0003C6C2                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003CC06                            		even
0003CC06                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003D26C                            		even
0003D26C                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003D31C                            		even
0003D31C                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D4AE                            		even
0003D4AE                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D5B0                            		even
0003D5B0                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D68C                            		even
0003D68C                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003DB08                            		even
0003DB08                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003DBC8                            		even
0003DBC8                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003DD3C                            		even
0003DD3C                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003E03E                            		even
0003E03E                            ; ---------------------------------------------------------------------------
0003E03E                            ; Compressed graphics - continue screen
0003E03E                            ; ---------------------------------------------------------------------------
0003E03E                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003E2EE                            		even
0003E2EE                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E528                            		even
0003E528                            ; ---------------------------------------------------------------------------
0003E528                            ; Compressed graphics - animals
0003E528                            ; ---------------------------------------------------------------------------
0003E528                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E680                            		even
0003E680                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E7DC                            		even
0003E7DC                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E958                            		even
0003E958                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003EA74                            		even
0003EA74                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003EBAA                            		even
0003EBAA                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003ECE4                            		even
0003ECE4                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003EE40                            		even
0003EE40                            ; ---------------------------------------------------------------------------
0003EE40                            ; Compressed graphics - primary patterns and block mappings
0003EE40                            ; ---------------------------------------------------------------------------
0003EE40                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F754                            		even
0003F754                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00041062                            		even
00041062                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000423E2                            		even
000423E2                            Blk256_GHZ:	incbin	map256\ghz.bin
000446E0                            		even
000446E0                            Blk16_LZ:	incbin	map16\lz.bin
000449AA                            		even
000449AA                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00046436                            		even
00046436                            Blk256_LZ:	incbin	map256\lz.bin
00048C1A                            		even
00048C1A                            Blk16_MZ:	incbin	map16\mz.bin
00049376                            		even
00049376                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004BBFE                            		even
0004BBFE                            Blk256_MZ:	incbin	map256\mz.bin
0004D382                            		even
0004D382                            Blk16_SLZ:	incbin	map16\slz.bin
0004D668                            		even
0004D668                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004E78A                            		even
0004E78A                            Blk256_SLZ:	incbin	map256\slz.bin
0004E944                            		even
0004E944                            Blk16_SYZ:	incbin	map16\syz.bin
0004F56A                            		even
0004F56A                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00053AFC                            		even
00053AFC                            Blk256_SYZ:	incbin	map256\syz.bin
00055B58                            		even
00055B58                            Blk16_SBZ:	incbin	map16\sbz.bin
000569F2                            		even
000569F2                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005919E                            		even
0005919E                            Blk256_SBZ:	incbin	map256\sbz.bin
0005BBEE                            		even
0005BBEE                            ; ---------------------------------------------------------------------------
0005BBEE                            ; Compressed graphics - bosses and ending sequence
0005BBEE                            ; ---------------------------------------------------------------------------
0005BBEE                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005C408 00                         		even
0005C408                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005C6F2                            		even
0005C6F2                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005CF76                            		even
0005CF76                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005DCCC 00                         		even
0005DCCC                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005E434                            		even
0005E434                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005E9B4                            		even
0005E9B4                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005EAD4                            		even
0005EAD4                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005ECD2                            		even
0005ECD2                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005FEB0                            		even
0005FEB0                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000607F4                            		even
000607F4                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00060BCA                            		even
00060BCA                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006115A                            		even
0006115A                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000613E2                            		even
000613E2                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000619E0                            		even
000619E0                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00061C68                            		even
00061C68                            		incbin	misc\padding2.bin
00061D6C                            		even
00061D6C                            ; ---------------------------------------------------------------------------
00061D6C                            ; Collision data
00061D6C                            ; ---------------------------------------------------------------------------
00061D6C                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00061E6C                            		even
00061E6C                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00062E6C                            		even
00062E6C                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00063E6C                            		even
00063E6C                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00064024 00                         		even
00064024                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000640EC                            		even
000640EC                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006427C                            		even
0006427C                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00064470                            		even
00064470                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00064676                            		even
00064676                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000648CE                            		even
000648CE                            ; ---------------------------------------------------------------------------
000648CE                            ; Special layouts
000648CE                            ; ---------------------------------------------------------------------------
000648CE                            SS_1:		incbin	sslayout\1.bin
00064B48                            		even
00064B48                            SS_2:		incbin	sslayout\2.bin
00064F5A                            		even
00064F5A                            SS_3:		incbin	sslayout\3.bin
000652B6                            		even
000652B6                            SS_4:		incbin	sslayout\4.bin
00065790                            		even
00065790                            SS_5:		incbin	sslayout\5.bin
00065C62                            		even
00065C62                            SS_6:		incbin	sslayout\6.bin
00065F72                            		even
00065F72                            ; ---------------------------------------------------------------------------
00065F72                            ; Animated uncompressed graphics
00065F72                            ; ---------------------------------------------------------------------------
00065F72                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00066172                            		even
00066172                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00066572                            		even
00066572                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000669F2                            		even
000669F2                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00066CF2                            		even
00066CF2                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000672F2                            		even
000672F2                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000675F2                            		even
000675F2                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00068072                            		even
00068072                            
00068072                            ; ---------------------------------------------------------------------------
00068072                            ; Level	layout index
00068072                            ; ---------------------------------------------------------------------------
00068072 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00068078 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006807E 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00068084 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006808A 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00068090 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00068096 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006809C 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000680A2 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000680A8 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000680AE 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000680B4 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000680BA 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000680C0 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000680C6 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000680CC 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000680D2 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000680D8 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000680DE 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000680E4 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000680EA 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000680F0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000680F6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000680FC 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00068102 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068108 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006810E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068114 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006811A                            
0006811A                            Level_GHZ1:	incbin	levels\ghz1.bin
0006820C                            		even
0006820C 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00068210                            Level_GHZ2:	incbin	levels\ghz2.bin
000682D8                            		even
000682D8 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000682DC                            Level_GHZ3:	incbin	levels\ghz3.bin
000683FE                            		even
000683FE                            Level_GHZbg:	incbin	levels\ghzbg.bin
00068420                            		even
00068420 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00068424 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00068428                            
00068428                            Level_LZ1:	incbin	levels\lz1.bin
0006852A                            		even
0006852A                            Level_LZbg:	incbin	levels\lzbg.bin
0006862C                            		even
0006862C 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00068630                            Level_LZ2:	incbin	levels\lz2.bin
000686CA                            		even
000686CA 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000686CE                            Level_LZ3:	incbin	levels\lz3.bin
000687E8                            		even
000687E8 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000687EC                            Level_SBZ3:	incbin	levels\sbz3.bin
000688A6                            		even
000688A6 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000688AA                            
000688AA                            Level_MZ1:	incbin	levels\mz1.bin
00068948                            		even
00068948                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000689C2                            		even
000689C2                            Level_MZ2:	incbin	levels\mz2.bin
00068A66                            		even
00068A66                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00068AF8                            		even
00068AF8 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00068AFC                            Level_MZ3:	incbin	levels\mz3.bin
00068BDE                            		even
00068BDE                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00068C82 00                         		even
00068C82 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00068C86 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00068C8A                            
00068C8A                            Level_SLZ1:	incbin	levels\slz1.bin
00068D9C                            		even
00068D9C                            Level_SLZbg:	incbin	levels\slzbg.bin
00068DB6                            		even
00068DB6                            Level_SLZ2:	incbin	levels\slz2.bin
00068EA6                            		even
00068EA6                            Level_SLZ3:	incbin	levels\slz3.bin
00068FC0                            		even
00068FC0 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00068FC4                            
00068FC4                            Level_SYZ1:	incbin	levels\syz1.bin
00069080 00                         		even
00069080                            Level_SYZbg:	incbin	levels\syzbg.bin
000690BA                            		even
000690BA 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000690BE                            Level_SYZ2:	incbin	levels\syz2.bin
000691C2                            		even
000691C2 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000691C6                            Level_SYZ3:	incbin	levels\syz3.bin
00069320 00                         		even
00069320 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00069324 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00069328                            
00069328                            Level_SBZ1:	incbin	levels\sbz1.bin
0006944A                            		even
0006944A                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00069488                            		even
00069488                            Level_SBZ2:	incbin	levels\sbz2.bin
000695CA                            		even
000695CA                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00069734                            		even
00069734 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00069738 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006973C                            Level_End:	incbin	levels\ending.bin
0006976C 00                         		even
0006976C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00069770                            
00069770                            ; ---------------------------------------------------------------------------
00069770                            ; Animated uncompressed giant ring graphics
00069770                            ; ---------------------------------------------------------------------------
00069770                            Art_BigRing:	incbin	artunc\bigring.bin
0006A3B0                            		even
0006A3B0                            
0006A3B0                            		incbin	misc\padding3.bin
0006A44C                            		even
0006A44C                            
0006A44C                            ; ---------------------------------------------------------------------------
0006A44C                            ; Sprite locations index
0006A44C                            ; ---------------------------------------------------------------------------
0006A44C 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A450 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A454 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A458 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A45C 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A460 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A464 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A468 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A46C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A470 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A474 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A478 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A47C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A480 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A484 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A488 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A48C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A490 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A494 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A498 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A49C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4A0 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4A4 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4A8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4AC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4B0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4B4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4B8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4BC 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006A4C0 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006A4C4 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006A4C8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006A4CC 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006A4D0 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006A4D4 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006A4D8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006A4DC FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006A4E2                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006AD28                            		even
0006AD28                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006ADDC                            		even
0006ADDC                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006B820                            		even
0006B820                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006BBC8                            		even
0006BBC8                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006BEFE                            		even
0006BEFE                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006C44A                            		even
0006C44A                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006C8E2                            		even
0006C8E2                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006C914                            		even
0006C914                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006C946                            		even
0006C946                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006C978                            		even
0006C978                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006C9AA                            		even
0006C9AA                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006C9F4                            		even
0006C9F4                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006CA32                            		even
0006CA32                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006CD9E                            		even
0006CD9E                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006D248                            		even
0006D248                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006D7BE                            		even
0006D7BE                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006DD04                            		even
0006DD04                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006E16C                            		even
0006E16C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006E74E                            		even
0006E74E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006EDC0                            		even
0006EDC0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006F32A                            		even
0006F32A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006F930                            		even
0006F930                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007006E                            		even
0007006E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007074C                            		even
0007074C                            ObjPos_FZ:	incbin	objpos\fz.bin
0007075E                            		even
0007075E                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00070790                            		even
00070790                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000707C2                            		even
000707C2                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000707F4                            		even
000707F4                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00070826                            		even
00070826                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00070858                            		even
00070858                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00070890                            		even
00070890                            ObjPos_End:	incbin	objpos\ending.bin
000709EC                            		even
000709EC FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000709F2                            ; ---------------------------------------------------------------------------
000709F2                            		incbin	misc\padding4.bin
0007101C                            		even
0007101C                            
0007101C 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00071020 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00071024 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00071028 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007102C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00071030 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00071034                            ; ---------------------------------------------------------------------------
00071034                            ; PSG instruments used in music
00071034                            ; ---------------------------------------------------------------------------
00071034 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00071040 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007104C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00071058                            PSG1:		incbin	sound\psg1.bin
0007106F                            PSG2:		incbin	sound\psg2.bin
00071076                            PSG3:		incbin	sound\psg3.bin
00071087                            PSG4:		incbin	sound\psg4.bin
00071092                            PSG6:		incbin	sound\psg6.bin
000710A1                            PSG5:		incbin	sound\psg5.bin
000710CB                            PSG7:		incbin	sound\psg7.bin
000710E7                            PSG8:		incbin	sound\psg8.bin
0007110F                            PSG9:		incbin	sound\psg9.bin
00071120                            
00071120 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00071128                            ; ---------------------------------------------------------------------------
00071128                            ; Music	Pointers
00071128                            ; ---------------------------------------------------------------------------
00071128 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00071130 0000 0000 0000 0000        		dc.l Music83, Music84
00071138 0000 0000 0000 0000        		dc.l Music85, Music86
00071140 0000 0000 0000 0000        		dc.l Music87, Music88
00071148 0000 0000 0000 0000        		dc.l Music89, Music8A
00071150 0000 0000 0000 0000        		dc.l Music8B, Music8C
00071158 0000 0000 0000 0000        		dc.l Music8D, Music8E
00071160 0000 0000 0000 0000        		dc.l Music8F, Music90
00071168 0000 0000 0000 0000        		dc.l Music91, Music92
00071170 0000 0000 0000 0000        		dc.l Music93, Music94
00071178 0000 0000 0000 0000        		dc.l Music95, Music96
00071180 0000 0000 0000 0000        		dc.l Music97, Music98
00071188 0000 0000 0000 0000        		dc.l Music99, Music9A
00071190 0000 0000 0000 0000        		dc.l Music9B, Music9C
00071198 0000 0000 0000 0000        		dc.l Music9D, Music9E
000711A0 0000 0000                  		dc.l Music9F
000711A4                            ; ---------------------------------------------------------------------------
000711A4                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000711A4                            ; ---------------------------------------------------------------------------
000711A4 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000711B4 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000711C4 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000711D4 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000711E4 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000711F4 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00071204 9090 9090                  		dc.b $90, $90, $90, $90
00071208                            
00071208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071208                            
00071208                            
00071208                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00071208 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00071210 4E71                       		nop	
00071212 4E71                       		nop	
00071214 4E71                       		nop	
00071216                            
00071216                            loc_71B5A:
00071216 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007121E 66F6                       		bne.s	loc_71B5A
00071220                            
00071220 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00071228 6700                       		beq.s	loc_71B82
0007122A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071232 4E71                       		nop	
00071234 4E71                       		nop	
00071236 4E71                       		nop	
00071238 4E71                       		nop	
0007123A 4E71                       		nop	
0007123C 60CA                       		bra.s	sub_71B4C
0007123E                            ; ===========================================================================
0007123E                            
0007123E                            loc_71B82:
0007123E 4DF9 00FF F000             		lea	($FFF000).l,a6
00071244 422E 000E                  		clr.b	$E(a6)
00071248 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007124C 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00071250 532E 0001                  		subq.b	#1,1(a6)
00071254 6600                       		bne.s	loc_71B9E
00071256 4EBA 0000                  		jsr	sub_7260C(pc)
0007125A                            
0007125A                            loc_71B9E:
0007125A 102E 0004                  		move.b	4(a6),d0
0007125E 6700                       		beq.s	loc_71BA8
00071260 4EBA 0000                  		jsr	sub_72504(pc)
00071264                            
00071264                            loc_71BA8:
00071264 4A2E 0024                  		tst.b	$24(a6)
00071268 6700                       		beq.s	loc_71BB2
0007126A 4EBA 0000                  		jsr	sub_7267C(pc)
0007126E                            
0007126E                            loc_71BB2:
0007126E 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00071272 6700                       		beq.s	loc_71BBC	; if not, branch
00071274 4EBA 0000                  		jsr	Sound_Play(pc)
00071278                            
00071278                            loc_71BBC:
00071278 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007127E 6700                       		beq.s	loc_71BC8
00071280 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00071284                            
00071284                            loc_71BC8:
00071284 4BEE 0040                  		lea	$40(a6),a5
00071288 4A15                       		tst.b	(a5)
0007128A 6A00                       		bpl.s	loc_71BD4
0007128C 4EBA 0000                  		jsr	sub_71C4E(pc)
00071290                            
00071290                            loc_71BD4:
00071290 422E 0008                  		clr.b	8(a6)
00071294 7E05                       		moveq	#5,d7
00071296                            
00071296                            loc_71BDA:
00071296 DAFC 0030                  		adda.w	#$30,a5
0007129A 4A15                       		tst.b	(a5)
0007129C 6A00                       		bpl.s	loc_71BE6
0007129E 4EBA 0000                  		jsr	sub_71CCA(pc)
000712A2                            
000712A2                            loc_71BE6:
000712A2 51CF FFF2                  		dbf	d7,loc_71BDA
000712A6                            
000712A6 7E02                       		moveq	#2,d7
000712A8                            
000712A8                            loc_71BEC:
000712A8 DAFC 0030                  		adda.w	#$30,a5
000712AC 4A15                       		tst.b	(a5)
000712AE 6A00                       		bpl.s	loc_71BF8
000712B0 4EBA 0000                  		jsr	sub_72850(pc)
000712B4                            
000712B4                            loc_71BF8:
000712B4 51CF FFF2                  		dbf	d7,loc_71BEC
000712B8                            
000712B8 1D7C 0080 000E             		move.b	#$80,$E(a6)
000712BE 7E02                       		moveq	#2,d7
000712C0                            
000712C0                            loc_71C04:
000712C0 DAFC 0030                  		adda.w	#$30,a5
000712C4 4A15                       		tst.b	(a5)
000712C6 6A00                       		bpl.s	loc_71C10
000712C8 4EBA 0000                  		jsr	sub_71CCA(pc)
000712CC                            
000712CC                            loc_71C10:
000712CC 51CF FFF2                  		dbf	d7,loc_71C04
000712D0                            
000712D0 7E02                       		moveq	#2,d7
000712D2                            
000712D2                            loc_71C16:
000712D2 DAFC 0030                  		adda.w	#$30,a5
000712D6 4A15                       		tst.b	(a5)
000712D8 6A00                       		bpl.s	loc_71C22
000712DA 4EBA 0000                  		jsr	sub_72850(pc)
000712DE                            
000712DE                            loc_71C22:
000712DE 51CF FFF2                  		dbf	d7,loc_71C16
000712E2 1D7C 0040 000E             		move.b	#$40,$E(a6)
000712E8 DAFC 0030                  		adda.w	#$30,a5
000712EC 4A15                       		tst.b	(a5)
000712EE 6A00                       		bpl.s	loc_71C38
000712F0 4EBA 0000                  		jsr	sub_71CCA(pc)
000712F4                            
000712F4                            loc_71C38:
000712F4 DAFC 0030                  		adda.w	#$30,a5
000712F8 4A15                       		tst.b	(a5)
000712FA 6A00                       		bpl.s	loc_71C44
000712FC 4EBA 0000                  		jsr	sub_72850(pc)
00071300                            
00071300                            loc_71C44:
00071300 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071308 4E75                       		rts	
0007130A                            ; End of function sub_71B4C
0007130A                            
0007130A                            
0007130A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007130A                            
0007130A                            
0007130A                            sub_71C4E:				; XREF: sub_71B4C
0007130A 532D 000E                  		subq.b	#1,$E(a5)
0007130E 6600                       		bne.s	locret_71CAA
00071310 1D7C 0080 0008             		move.b	#$80,8(a6)
00071316 286D 0004                  		movea.l	4(a5),a4
0007131A                            
0007131A                            loc_71C5E:
0007131A 7A00                       		moveq	#0,d5
0007131C 1A1C                       		move.b	(a4)+,d5
0007131E 0C05 00E0                  		cmpi.b	#-$20,d5
00071322 6500                       		bcs.s	loc_71C6E
00071324 4EBA 0000                  		jsr	sub_72A5A(pc)
00071328 60F0                       		bra.s	loc_71C5E
0007132A                            ; ===========================================================================
0007132A                            
0007132A                            loc_71C6E:
0007132A 4A05                       		tst.b	d5
0007132C 6A00                       		bpl.s	loc_71C84
0007132E 1B45 0010                  		move.b	d5,$10(a5)
00071332 1A1C                       		move.b	(a4)+,d5
00071334 6A00                       		bpl.s	loc_71C84
00071336 534C                       		subq.w	#1,a4
00071338 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007133E 6000                       		bra.s	loc_71C88
00071340                            ; ===========================================================================
00071340                            
00071340                            loc_71C84:
00071340 4EBA 0000                  		jsr	sub_71D40(pc)
00071344                            
00071344                            loc_71C88:
00071344 2B4C 0004                  		move.l	a4,4(a5)
00071348 0815 0002                  		btst	#2,(a5)
0007134C 6600                       		bne.s	locret_71CAA
0007134E 7000                       		moveq	#0,d0
00071350 102D 0010                  		move.b	$10(a5),d0
00071354 0C00 0080                  		cmpi.b	#$80,d0
00071358 6700                       		beq.s	locret_71CAA
0007135A 0800 0003                  		btst	#3,d0
0007135E 6600                       		bne.s	loc_71CAC
00071360 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00071366                            
00071366                            locret_71CAA:
00071366 4E75                       		rts	
00071368                            ; ===========================================================================
00071368                            
00071368                            loc_71CAC:
00071368 0400 0088                  		subi.b	#$88,d0
0007136C 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00071370 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00071376 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007137E 4E75                       		rts	
00071380                            ; End of function sub_71C4E
00071380                            
00071380                            ; ===========================================================================
00071380 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00071386                            
00071386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071386                            
00071386                            
00071386                            sub_71CCA:				; XREF: sub_71B4C
00071386 532D 000E                  		subq.b	#1,$E(a5)
0007138A 6600                       		bne.s	loc_71CE0
0007138C 0895 0004                  		bclr	#4,(a5)
00071390 4EBA 0000                  		jsr	sub_71CEC(pc)
00071394 4EBA 0000                  		jsr	sub_71E18(pc)
00071398 6000 0000                  		bra.w	loc_726E2
0007139C                            ; ===========================================================================
0007139C                            
0007139C                            loc_71CE0:
0007139C 4EBA 0000                  		jsr	sub_71D9E(pc)
000713A0 4EBA 0000                  		jsr	sub_71DC6(pc)
000713A4 6000 0000                  		bra.w	loc_71E24
000713A8                            ; End of function sub_71CCA
000713A8                            
000713A8                            
000713A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000713A8                            
000713A8                            
000713A8                            sub_71CEC:				; XREF: sub_71CCA
000713A8 286D 0004                  		movea.l	4(a5),a4
000713AC 0895 0001                  		bclr	#1,(a5)
000713B0                            
000713B0                            loc_71CF4:
000713B0 7A00                       		moveq	#0,d5
000713B2 1A1C                       		move.b	(a4)+,d5
000713B4 0C05 00E0                  		cmpi.b	#-$20,d5
000713B8 6500                       		bcs.s	loc_71D04
000713BA 4EBA 0000                  		jsr	sub_72A5A(pc)
000713BE 60F0                       		bra.s	loc_71CF4
000713C0                            ; ===========================================================================
000713C0                            
000713C0                            loc_71D04:
000713C0 4EBA 0000                  		jsr	sub_726FE(pc)
000713C4 4A05                       		tst.b	d5
000713C6 6A00                       		bpl.s	loc_71D1A
000713C8 4EBA 0000                  		jsr	sub_71D22(pc)
000713CC 1A1C                       		move.b	(a4)+,d5
000713CE 6A00                       		bpl.s	loc_71D1A
000713D0 534C                       		subq.w	#1,a4
000713D2 6000 0000                  		bra.w	sub_71D60
000713D6                            ; ===========================================================================
000713D6                            
000713D6                            loc_71D1A:
000713D6 4EBA 0000                  		jsr	sub_71D40(pc)
000713DA 6000 0000                  		bra.w	sub_71D60
000713DE                            ; End of function sub_71CEC
000713DE                            
000713DE                            
000713DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000713DE                            
000713DE                            
000713DE                            sub_71D22:				; XREF: sub_71CEC
000713DE 0405 0080                  		subi.b	#$80,d5
000713E2 6700                       		beq.s	loc_71D58
000713E4 DA2D 0008                  		add.b	8(a5),d5
000713E8 0245 007F                  		andi.w	#$7F,d5
000713EC E34D                       		lsl.w	#1,d5
000713EE 41FA 0000                  		lea	word_72790(pc),a0
000713F2 3C30 5000                  		move.w	(a0,d5.w),d6
000713F6 3B46 0010                  		move.w	d6,$10(a5)
000713FA 4E75                       		rts	
000713FC                            ; End of function sub_71D22
000713FC                            
000713FC                            
000713FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000713FC                            
000713FC                            
000713FC                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000713FC 1005                       		move.b	d5,d0
000713FE 122D 0002                  		move.b	2(a5),d1
00071402                            
00071402                            loc_71D46:
00071402 5301                       		subq.b	#1,d1
00071404 6700                       		beq.s	loc_71D4E
00071406 D005                       		add.b	d5,d0
00071408 60F8                       		bra.s	loc_71D46
0007140A                            ; ===========================================================================
0007140A                            
0007140A                            loc_71D4E:
0007140A 1B40 000F                  		move.b	d0,$F(a5)
0007140E 1B40 000E                  		move.b	d0,$E(a5)
00071412 4E75                       		rts	
00071414                            ; End of function sub_71D40
00071414                            
00071414                            ; ===========================================================================
00071414                            
00071414                            loc_71D58:				; XREF: sub_71D22
00071414 08D5 0001                  		bset	#1,(a5)
00071418 426D 0010                  		clr.w	$10(a5)
0007141C                            
0007141C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007141C                            
0007141C                            
0007141C                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007141C 2B4C 0004                  		move.l	a4,4(a5)
00071420 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00071426 0815 0004                  		btst	#4,(a5)
0007142A 6600                       		bne.s	locret_71D9C
0007142C 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00071432 422D 000C                  		clr.b	$C(a5)
00071436 0815 0003                  		btst	#3,(a5)
0007143A 6700                       		beq.s	locret_71D9C
0007143C 206D 0014                  		movea.l	$14(a5),a0
00071440 1B58 0018                  		move.b	(a0)+,$18(a5)
00071444 1B58 0019                  		move.b	(a0)+,$19(a5)
00071448 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007144C 1018                       		move.b	(a0)+,d0
0007144E E208                       		lsr.b	#1,d0
00071450 1B40 001B                  		move.b	d0,$1B(a5)
00071454 426D 001C                  		clr.w	$1C(a5)
00071458                            
00071458                            locret_71D9C:
00071458 4E75                       		rts	
0007145A                            ; End of function sub_71D60
0007145A                            
0007145A                            
0007145A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007145A                            
0007145A                            
0007145A                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007145A 4A2D 0012                  		tst.b	$12(a5)
0007145E 6700                       		beq.s	locret_71DC4
00071460 532D 0012                  		subq.b	#1,$12(a5)
00071464 6600                       		bne.s	locret_71DC4
00071466 08D5 0001                  		bset	#1,(a5)
0007146A 4A2D 0001                  		tst.b	1(a5)
0007146E 6B00 0000                  		bmi.w	loc_71DBE
00071472 4EBA 0000                  		jsr	sub_726FE(pc)
00071476 584F                       		addq.w	#4,sp
00071478 4E75                       		rts	
0007147A                            ; ===========================================================================
0007147A                            
0007147A                            loc_71DBE:
0007147A 4EBA 0000                  		jsr	sub_729A0(pc)
0007147E 584F                       		addq.w	#4,sp
00071480                            
00071480                            locret_71DC4:
00071480 4E75                       		rts	
00071482                            ; End of function sub_71D9E
00071482                            
00071482                            
00071482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071482                            
00071482                            
00071482                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00071482 584F                       		addq.w	#4,sp
00071484 0815 0003                  		btst	#3,(a5)
00071488 6700                       		beq.s	locret_71E16
0007148A 4A2D 0018                  		tst.b	$18(a5)
0007148E 6700                       		beq.s	loc_71DDA
00071490 532D 0018                  		subq.b	#1,$18(a5)
00071494 4E75                       		rts	
00071496                            ; ===========================================================================
00071496                            
00071496                            loc_71DDA:
00071496 532D 0019                  		subq.b	#1,$19(a5)
0007149A 6700                       		beq.s	loc_71DE2
0007149C 4E75                       		rts	
0007149E                            ; ===========================================================================
0007149E                            
0007149E                            loc_71DE2:
0007149E 206D 0014                  		movea.l	$14(a5),a0
000714A2 1B68 0001 0019             		move.b	1(a0),$19(a5)
000714A8 4A2D 001B                  		tst.b	$1B(a5)
000714AC 6600                       		bne.s	loc_71DFE
000714AE 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000714B4 442D 001A                  		neg.b	$1A(a5)
000714B8 4E75                       		rts	
000714BA                            ; ===========================================================================
000714BA                            
000714BA                            loc_71DFE:
000714BA 532D 001B                  		subq.b	#1,$1B(a5)
000714BE 1C2D 001A                  		move.b	$1A(a5),d6
000714C2 4886                       		ext.w	d6
000714C4 DC6D 001C                  		add.w	$1C(a5),d6
000714C8 3B46 001C                  		move.w	d6,$1C(a5)
000714CC DC6D 0010                  		add.w	$10(a5),d6
000714D0 594F                       		subq.w	#4,sp
000714D2                            
000714D2                            locret_71E16:
000714D2 4E75                       		rts	
000714D4                            ; End of function sub_71DC6
000714D4                            
000714D4                            
000714D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000714D4                            
000714D4                            
000714D4                            sub_71E18:				; XREF: sub_71CCA
000714D4 0815 0001                  		btst	#1,(a5)
000714D8 6600                       		bne.s	locret_71E48
000714DA 3C2D 0010                  		move.w	$10(a5),d6
000714DE 6700                       		beq.s	loc_71E4A
000714E0                            
000714E0                            loc_71E24:				; XREF: sub_71CCA
000714E0 102D 001E                  		move.b	$1E(a5),d0
000714E4 4880                       		ext.w	d0
000714E6 DC40                       		add.w	d0,d6
000714E8 0815 0002                  		btst	#2,(a5)
000714EC 6600                       		bne.s	locret_71E48
000714EE 3206                       		move.w	d6,d1
000714F0 E049                       		lsr.w	#8,d1
000714F2 103C 00A4                  		move.b	#-$5C,d0
000714F6 4EBA 0000                  		jsr	sub_72722(pc)
000714FA 1206                       		move.b	d6,d1
000714FC 103C 00A0                  		move.b	#-$60,d0
00071500 4EBA 0000                  		jsr	sub_72722(pc)
00071504                            
00071504                            locret_71E48:
00071504 4E75                       		rts	
00071506                            ; ===========================================================================
00071506                            
00071506                            loc_71E4A:
00071506 08D5 0001                  		bset	#1,(a5)
0007150A 4E75                       		rts	
0007150C                            ; End of function sub_71E18
0007150C                            
0007150C                            ; ===========================================================================
0007150C                            
0007150C                            loc_71E50:				; XREF: sub_71B4C
0007150C 6B00                       		bmi.s	loc_71E94
0007150E 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00071514 6700 0000                  		beq.w	loc_71EFE
00071518 1D7C 0002 0003             		move.b	#2,3(a6)
0007151E 7602                       		moveq	#2,d3
00071520 103C 00B4                  		move.b	#-$4C,d0
00071524 7200                       		moveq	#0,d1
00071526                            
00071526                            loc_71E6A:
00071526 4EBA 0000                  		jsr	sub_7272E(pc)
0007152A 4EBA 0000                  		jsr	sub_72764(pc)
0007152E 5200                       		addq.b	#1,d0
00071530 51CB FFF4                  		dbf	d3,loc_71E6A
00071534                            
00071534 7602                       		moveq	#2,d3
00071536 7028                       		moveq	#$28,d0
00071538                            
00071538                            loc_71E7C:
00071538 1203                       		move.b	d3,d1
0007153A 4EBA 0000                  		jsr	sub_7272E(pc)
0007153E 5801                       		addq.b	#4,d1
00071540 4EBA 0000                  		jsr	sub_7272E(pc)
00071544 51CB FFF2                  		dbf	d3,loc_71E7C
00071548                            
00071548 4EBA 0000                  		jsr	sub_729B6(pc)
0007154C 6000 FDB2                  		bra.w	loc_71C44
00071550                            ; ===========================================================================
00071550                            
00071550                            loc_71E94:				; XREF: loc_71E50
00071550 422E 0003                  		clr.b	3(a6)
00071554 7630                       		moveq	#$30,d3
00071556 4BEE 0040                  		lea	$40(a6),a5
0007155A 7806                       		moveq	#6,d4
0007155C                            
0007155C                            loc_71EA0:
0007155C 0815 0007                  		btst	#7,(a5)
00071560 6700                       		beq.s	loc_71EB8
00071562 0815 0002                  		btst	#2,(a5)
00071566 6600                       		bne.s	loc_71EB8
00071568 103C 00B4                  		move.b	#-$4C,d0
0007156C 122D 000A                  		move.b	$A(a5),d1
00071570 4EBA 0000                  		jsr	sub_72722(pc)
00071574                            
00071574                            loc_71EB8:
00071574 DAC3                       		adda.w	d3,a5
00071576 51CC FFE4                  		dbf	d4,loc_71EA0
0007157A                            
0007157A 4BEE 0220                  		lea	$220(a6),a5
0007157E 7802                       		moveq	#2,d4
00071580                            
00071580                            loc_71EC4:
00071580 0815 0007                  		btst	#7,(a5)
00071584 6700                       		beq.s	loc_71EDC
00071586 0815 0002                  		btst	#2,(a5)
0007158A 6600                       		bne.s	loc_71EDC
0007158C 103C 00B4                  		move.b	#-$4C,d0
00071590 122D 000A                  		move.b	$A(a5),d1
00071594 4EBA 0000                  		jsr	sub_72722(pc)
00071598                            
00071598                            loc_71EDC:
00071598 DAC3                       		adda.w	d3,a5
0007159A 51CC FFE4                  		dbf	d4,loc_71EC4
0007159E                            
0007159E 4BEE 0340                  		lea	$340(a6),a5
000715A2 0815 0007                  		btst	#7,(a5)
000715A6 6700                       		beq.s	loc_71EFE
000715A8 0815 0002                  		btst	#2,(a5)
000715AC 6600                       		bne.s	loc_71EFE
000715AE 103C 00B4                  		move.b	#-$4C,d0
000715B2 122D 000A                  		move.b	$A(a5),d1
000715B6 4EBA 0000                  		jsr	sub_72722(pc)
000715BA                            
000715BA                            loc_71EFE:
000715BA 6000 FD44                  		bra.w	loc_71C44
000715BE                            
000715BE                            ; ---------------------------------------------------------------------------
000715BE                            ; Subroutine to	play a sound or	music track
000715BE                            ; ---------------------------------------------------------------------------
000715BE                            
000715BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000715BE                            
000715BE                            
000715BE                            Sound_Play:				; XREF: sub_71B4C
000715BE 2079 0007 101C             		movea.l	(Go_SoundTypes).l,a0
000715C4 43EE 000A                  		lea	$A(a6),a1	; load music track number
000715C8 1616                       		move.b	0(a6),d3
000715CA 7802                       		moveq	#2,d4
000715CC                            
000715CC                            loc_71F12:
000715CC 1011                       		move.b	(a1),d0		; move track number to d0
000715CE 1200                       		move.b	d0,d1
000715D0 4219                       		clr.b	(a1)+
000715D2 0400 0081                  		subi.b	#$81,d0
000715D6 6500                       		bcs.s	loc_71F3E
000715D8 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000715DE 6700                       		beq.s	loc_71F2C
000715E0 1D41 000A                  		move.b	d1,$A(a6)
000715E4 6000                       		bra.s	loc_71F3E
000715E6                            ; ===========================================================================
000715E6                            
000715E6                            loc_71F2C:
000715E6 0240 007F                  		andi.w	#$7F,d0
000715EA 1430 0000                  		move.b	(a0,d0.w),d2
000715EE B403                       		cmp.b	d3,d2
000715F0 6500                       		bcs.s	loc_71F3E
000715F2 1602                       		move.b	d2,d3
000715F4 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000715F8                            
000715F8                            loc_71F3E:
000715F8 51CC FFD2                  		dbf	d4,loc_71F12
000715FC                            
000715FC 4A03                       		tst.b	d3
000715FE 6B00                       		bmi.s	locret_71F4A
00071600 1C83                       		move.b	d3,0(a6)
00071602                            
00071602                            locret_71F4A:
00071602 4E75                       		rts	
00071604                            ; End of function Sound_Play
00071604                            
00071604                            
00071604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071604                            
00071604                            
00071604                            Sound_ChkValue:				; XREF: sub_71B4C
00071604 7E00                       		moveq	#0,d7
00071606 1E2E 0009                  		move.b	9(a6),d7
0007160A 6700 0000                  		beq.w	Sound_E4
0007160E 6A00                       		bpl.s	locret_71F8C
00071610 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00071616 0C07 009F                  		cmpi.b	#$9F,d7
0007161A 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007161E 0C07 00A0                  		cmpi.b	#$A0,d7
00071622 6500 0000                  		bcs.w	locret_71F8C
00071626 0C07 00CF                  		cmpi.b	#$CF,d7
0007162A 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007162E 0C07 00D0                  		cmpi.b	#$D0,d7
00071632 6500 0000                  		bcs.w	locret_71F8C
00071636 0C07 00E0                  		cmpi.b	#$E0,d7
0007163A 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007163E 0C07 00E5                  		cmpi.b	#$E5,d7
00071642 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00071644                            
00071644                            locret_71F8C:
00071644 4E75                       		rts	
00071646                            ; ===========================================================================
00071646                            
00071646                            Sound_E0toE5				; XREF: Sound_ChkValue
00071646 0407 00E0                  		subi.b	#$E0,d7
0007164A E54F                       		lsl.w	#2,d7
0007164C 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00071650                            ; ===========================================================================
00071650                            
00071650                            Sound_ExIndex:
00071650 6000 0000                  		bra.w	Sound_E0
00071654                            ; ===========================================================================
00071654 6000 0000                  		bra.w	Sound_E1
00071658                            ; ===========================================================================
00071658 6000 0000                  		bra.w	Sound_E2
0007165C                            ; ===========================================================================
0007165C 6000 0000                  		bra.w	Sound_E3
00071660                            ; ===========================================================================
00071660 6000 0000                  		bra.w	Sound_E4
00071664                            ; ===========================================================================
00071664 6000 0000                  		bra.w	Sound_E5
00071668                            ; ===========================================================================
00071668                            ; ---------------------------------------------------------------------------
00071668                            ; Play "Say-gaa" PCM sound
00071668                            ; ---------------------------------------------------------------------------
00071668                            
00071668                            Sound_E1:				  
00071668 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007166E 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00071674 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007167C                            PlayPCM_Loop:	  
0007167C 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00071682 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00071686 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007168A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007168C 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007168E 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00071692 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00071698 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007169C 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000716A2 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000716A4 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000716A6                            return_PlayPCM: 
000716A6 584F                       		addq.w	#4,sp 
000716A8 4E75                       		rts
000716AA                            		
000716AA                            ; ---------------------------------------------------------------------------
000716AA                            ; Play you are an idiot pcm sound
000716AA                            ; ---------------------------------------------------------------------------
000716AA                            
000716AA                            Sound_E5:  
000716AA 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000716B0 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
000716B6 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000716BE                            PlayPCM_LoopE5:	  
000716BE                            
000716BE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000716C4                            		
000716C4 5278 FE24                  		addq.w	#1,($FFFFFE24).w
000716C8                            		
000716C8 1038 FE24                  		move.b	($FFFFFE24).w,d0
000716CC 0200 000F                  		andi.b	#$F,d0
000716D0 6700                       		beq.s	SfxE5SwapPalette
000716D2                            		
000716D2 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000716D6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000716DA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000716DC 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
000716DE 60DE                       		bra.s	PlayPCM_LoopE5
000716E0                            		
000716E0                            SfxE5SwapPalette:
000716E0                            		
000716E0                            		
000716E0                            		
000716E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000716E6 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000716EC                            		
000716EC                            		
000716EC 0838 0004 FE24             		btst	#4,($FFFFFE24).w
000716F2 6700                       		beq.s	@not_black
000716F4 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000716FA 6000                       		bra.s	@merge
000716FC                            	@not_black:
000716FC 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00071702                            	@merge:
00071702 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00071706 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007170A 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00071710 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00071714                            		
00071714 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00071718 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007171C 60A0                       		bra.s	PlayPCM_LoopE5
0007171E                            		
0007171E                            ; ===========================================================================
0007171E                            ; ---------------------------------------------------------------------------
0007171E                            ; Play music track $81-$9F
0007171E                            ; ---------------------------------------------------------------------------
0007171E                            
0007171E                            Sound_81to9F:				; XREF: Sound_ChkValue
0007171E 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00071722 6600                       		bne.s	loc_72024	; if not, branch
00071724 4A2E 0027                  		tst.b	$27(a6)
00071728 6600 0000                  		bne.w	loc_721B6
0007172C 4BEE 0040                  		lea	$40(a6),a5
00071730 7009                       		moveq	#9,d0
00071732                            
00071732                            loc_71FE6:
00071732 0895 0002                  		bclr	#2,(a5)
00071736 DAFC 0030                  		adda.w	#$30,a5
0007173A 51C8 FFF6                  		dbf	d0,loc_71FE6
0007173E                            
0007173E 4BEE 0220                  		lea	$220(a6),a5
00071742 7005                       		moveq	#5,d0
00071744                            
00071744                            loc_71FF8:
00071744 0895 0007                  		bclr	#7,(a5)
00071748 DAFC 0030                  		adda.w	#$30,a5
0007174C 51C8 FFF6                  		dbf	d0,loc_71FF8
00071750 4216                       		clr.b	0(a6)
00071752 204E                       		movea.l	a6,a0
00071754 43EE 03A0                  		lea	$3A0(a6),a1
00071758 303C 0087                  		move.w	#$87,d0
0007175C                            
0007175C                            loc_72012:
0007175C 22D8                       		move.l	(a0)+,(a1)+
0007175E 51C8 FFFC                  		dbf	d0,loc_72012
00071762                            
00071762 1D7C 0080 0027             		move.b	#$80,$27(a6)
00071768 4216                       		clr.b	0(a6)
0007176A 6000                       		bra.s	loc_7202C
0007176C                            ; ===========================================================================
0007176C                            
0007176C                            loc_72024:
0007176C 422E 0027                  		clr.b	$27(a6)
00071770 422E 0026                  		clr.b	$26(a6)
00071774                            
00071774                            loc_7202C:
00071774 4EBA 0000                  		jsr	sub_725CA(pc)
00071778 2879 0007 102C             		movea.l	(off_719A0).l,a4
0007177E 0407 0081                  		subi.b	#$81,d7
00071782 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00071788 2879 0007 1024             		movea.l	(Go_MusicIndex).l,a4
0007178E E54F                       		lsl.w	#2,d7
00071790 2874 7000                  		movea.l	(a4,d7.w),a4
00071794 7000                       		moveq	#0,d0
00071796 3014                       		move.w	(a4),d0
00071798 D08C                       		add.l	a4,d0
0007179A 2D40 0018                  		move.l	d0,$18(a6)
0007179E 102C 0005                  		move.b	5(a4),d0
000717A2 1D40 0028                  		move.b	d0,$28(a6)
000717A6 4A2E 002A                  		tst.b	$2A(a6)
000717AA 6700                       		beq.s	loc_72068
000717AC 102E 0029                  		move.b	$29(a6),d0
000717B0                            
000717B0                            loc_72068:
000717B0 1D40 0002                  		move.b	d0,2(a6)
000717B4 1D40 0001                  		move.b	d0,1(a6)
000717B8 7200                       		moveq	#0,d1
000717BA 264C                       		movea.l	a4,a3
000717BC 5C4C                       		addq.w	#6,a4
000717BE 7E00                       		moveq	#0,d7
000717C0 1E2B 0002                  		move.b	2(a3),d7
000717C4 6700 0000                  		beq.w	loc_72114
000717C8 5307                       		subq.b	#1,d7
000717CA 123C 00C0                  		move.b	#-$40,d1
000717CE 182B 0004                  		move.b	4(a3),d4
000717D2 7C30                       		moveq	#$30,d6
000717D4 1A3C 0001                  		move.b	#1,d5
000717D8 43EE 0040                  		lea	$40(a6),a1
000717DC 45FA 0000                  		lea	byte_721BA(pc),a2
000717E0                            
000717E0                            loc_72098:
000717E0 08D1 0007                  		bset	#7,(a1)
000717E4 135A 0001                  		move.b	(a2)+,1(a1)
000717E8 1344 0002                  		move.b	d4,2(a1)
000717EC 1346 000D                  		move.b	d6,$D(a1)
000717F0 1341 000A                  		move.b	d1,$A(a1)
000717F4 1345 000E                  		move.b	d5,$E(a1)
000717F8 7000                       		moveq	#0,d0
000717FA 301C                       		move.w	(a4)+,d0
000717FC D08B                       		add.l	a3,d0
000717FE 2340 0004                  		move.l	d0,4(a1)
00071802 335C 0008                  		move.w	(a4)+,8(a1)
00071806 D2C6                       		adda.w	d6,a1
00071808 51CF FFD6                  		dbf	d7,loc_72098
0007180C 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00071812 6600                       		bne.s	loc_720D8
00071814 702B                       		moveq	#$2B,d0
00071816 7200                       		moveq	#0,d1
00071818 4EBA 0000                  		jsr	sub_7272E(pc)
0007181C 6000 0000                  		bra.w	loc_72114
00071820                            ; ===========================================================================
00071820                            
00071820                            loc_720D8:
00071820 7028                       		moveq	#$28,d0
00071822 7206                       		moveq	#6,d1
00071824 4EBA 0000                  		jsr	sub_7272E(pc)
00071828 103C 0042                  		move.b	#$42,d0
0007182C 727F                       		moveq	#$7F,d1
0007182E 4EBA 0000                  		jsr	sub_72764(pc)
00071832 103C 004A                  		move.b	#$4A,d0
00071836 727F                       		moveq	#$7F,d1
00071838 4EBA 0000                  		jsr	sub_72764(pc)
0007183C 103C 0046                  		move.b	#$46,d0
00071840 727F                       		moveq	#$7F,d1
00071842 4EBA 0000                  		jsr	sub_72764(pc)
00071846 103C 004E                  		move.b	#$4E,d0
0007184A 727F                       		moveq	#$7F,d1
0007184C 4EBA 0000                  		jsr	sub_72764(pc)
00071850 103C 00B6                  		move.b	#-$4A,d0
00071854 123C 00C0                  		move.b	#-$40,d1
00071858 4EBA 0000                  		jsr	sub_72764(pc)
0007185C                            
0007185C                            loc_72114:
0007185C 7E00                       		moveq	#0,d7
0007185E 1E2B 0003                  		move.b	3(a3),d7
00071862 6700                       		beq.s	loc_72154
00071864 5307                       		subq.b	#1,d7
00071866 43EE 0190                  		lea	$190(a6),a1
0007186A 45FA 0000                  		lea	byte_721C2(pc),a2
0007186E                            
0007186E                            loc_72126:
0007186E 08D1 0007                  		bset	#7,(a1)
00071872 135A 0001                  		move.b	(a2)+,1(a1)
00071876 1344 0002                  		move.b	d4,2(a1)
0007187A 1346 000D                  		move.b	d6,$D(a1)
0007187E 1345 000E                  		move.b	d5,$E(a1)
00071882 7000                       		moveq	#0,d0
00071884 301C                       		move.w	(a4)+,d0
00071886 D08B                       		add.l	a3,d0
00071888 2340 0004                  		move.l	d0,4(a1)
0007188C 335C 0008                  		move.w	(a4)+,8(a1)
00071890 101C                       		move.b	(a4)+,d0
00071892 135C 000B                  		move.b	(a4)+,$B(a1)
00071896 D2C6                       		adda.w	d6,a1
00071898 51CF FFD4                  		dbf	d7,loc_72126
0007189C                            
0007189C                            loc_72154:
0007189C 43EE 0220                  		lea	$220(a6),a1
000718A0 7E05                       		moveq	#5,d7
000718A2                            
000718A2                            loc_7215A:
000718A2 4A11                       		tst.b	(a1)
000718A4 6A00 0000                  		bpl.w	loc_7217C
000718A8 7000                       		moveq	#0,d0
000718AA 1029 0001                  		move.b	1(a1),d0
000718AE 6B00                       		bmi.s	loc_7216E
000718B0 5500                       		subq.b	#2,d0
000718B2 E508                       		lsl.b	#2,d0
000718B4 6000                       		bra.s	loc_72170
000718B6                            ; ===========================================================================
000718B6                            
000718B6                            loc_7216E:
000718B6 E608                       		lsr.b	#3,d0
000718B8                            
000718B8                            loc_72170:
000718B8 41FA 0000                  		lea	dword_722CC(pc),a0
000718BC 2070 0000                  		movea.l	(a0,d0.w),a0
000718C0 08D0 0002                  		bset	#2,(a0)
000718C4                            
000718C4                            loc_7217C:
000718C4 D2C6                       		adda.w	d6,a1
000718C6 51CF FFDA                  		dbf	d7,loc_7215A
000718CA                            
000718CA 4A6E 0340                  		tst.w	$340(a6)
000718CE 6A00                       		bpl.s	loc_7218E
000718D0 08EE 0002 0100             		bset	#2,$100(a6)
000718D6                            
000718D6                            loc_7218E:
000718D6 4A6E 0370                  		tst.w	$370(a6)
000718DA 6A00                       		bpl.s	loc_7219A
000718DC 08EE 0002 01F0             		bset	#2,$1F0(a6)
000718E2                            
000718E2                            loc_7219A:
000718E2 4BEE 0070                  		lea	$70(a6),a5
000718E6 7805                       		moveq	#5,d4
000718E8                            
000718E8                            loc_721A0:
000718E8 4EBA 0000                  		jsr	sub_726FE(pc)
000718EC DAC6                       		adda.w	d6,a5
000718EE 51CC FFF8                  		dbf	d4,loc_721A0
000718F2 7802                       		moveq	#2,d4
000718F4                            
000718F4                            loc_721AC:
000718F4 4EBA 0000                  		jsr	sub_729A0(pc)
000718F8 DAC6                       		adda.w	d6,a5
000718FA 51CC FFF8                  		dbf	d4,loc_721AC
000718FE                            
000718FE                            loc_721B6:
000718FE 584F                       		addq.w	#4,sp
00071900 4E75                       		rts	
00071902                            ; ===========================================================================
00071902 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007190A                            		even
0007190A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007190E                            		even
0007190E                            ; ===========================================================================
0007190E                            ; ---------------------------------------------------------------------------
0007190E                            ; Play normal sound effect
0007190E                            ; ---------------------------------------------------------------------------
0007190E                            
0007190E                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007190E 4A2E 0027                  		tst.b	$27(a6)
00071912 6600 0000                  		bne.w	loc_722C6
00071916 4A2E 0004                  		tst.b	4(a6)
0007191A 6600 0000                  		bne.w	loc_722C6
0007191E 4A2E 0024                  		tst.b	$24(a6)
00071922 6600 0000                  		bne.w	loc_722C6
00071926 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007192A 6600                       		bne.s	Sound_notB5	; if not, branch
0007192C 4A2E 002B                  		tst.b	$2B(a6)
00071930 6600                       		bne.s	loc_721EE
00071932 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00071936                            
00071936                            loc_721EE:
00071936 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007193C                            
0007193C                            Sound_notB5:
0007193C 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00071940 6600                       		bne.s	Sound_notA7	; if not, branch
00071942 4A2E 002C                  		tst.b	$2C(a6)
00071946 6600 0000                  		bne.w	locret_722C4
0007194A 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00071950                            
00071950                            Sound_notA7:
00071950 2079 0007 1028             		movea.l	(Go_SoundIndex).l,a0
00071956 0407 00A0                  		subi.b	#$A0,d7
0007195A E54F                       		lsl.w	#2,d7
0007195C 2670 7000                  		movea.l	(a0,d7.w),a3
00071960 224B                       		movea.l	a3,a1
00071962 7200                       		moveq	#0,d1
00071964 3219                       		move.w	(a1)+,d1
00071966 D28B                       		add.l	a3,d1
00071968 1A19                       		move.b	(a1)+,d5
0007196A 1E19                       		move.b	(a1)+,d7
0007196C 5307                       		subq.b	#1,d7
0007196E 7C30                       		moveq	#$30,d6
00071970                            
00071970                            loc_72228:
00071970 7600                       		moveq	#0,d3
00071972 1629 0001                  		move.b	1(a1),d3
00071976 1803                       		move.b	d3,d4
00071978 6B00                       		bmi.s	loc_72244
0007197A 5543                       		subq.w	#2,d3
0007197C E54B                       		lsl.w	#2,d3
0007197E 4BFA 0000                  		lea	dword_722CC(pc),a5
00071982 2A75 3000                  		movea.l	(a5,d3.w),a5
00071986 08D5 0002                  		bset	#2,(a5)
0007198A 6000                       		bra.s	loc_7226E
0007198C                            ; ===========================================================================
0007198C                            
0007198C                            loc_72244:
0007198C E64B                       		lsr.w	#3,d3
0007198E 4BFA 0000                  		lea	dword_722CC(pc),a5
00071992 2A75 3000                  		movea.l	(a5,d3.w),a5
00071996 08D5 0002                  		bset	#2,(a5)
0007199A 0C04 00C0                  		cmpi.b	#$C0,d4
0007199E 6600                       		bne.s	loc_7226E
000719A0 1004                       		move.b	d4,d0
000719A2 0000 001F                  		ori.b	#$1F,d0
000719A6 13C0 00C0 0011             		move.b	d0,($C00011).l
000719AC 0840 0005                  		bchg	#5,d0
000719B0 13C0 00C0 0011             		move.b	d0,($C00011).l
000719B6                            
000719B6                            loc_7226E:
000719B6 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000719BA 244D                       		movea.l	a5,a2
000719BC 700B                       		moveq	#$B,d0
000719BE                            
000719BE                            loc_72276:
000719BE 429A                       		clr.l	(a2)+
000719C0 51C8 FFFC                  		dbf	d0,loc_72276
000719C4                            
000719C4 3A99                       		move.w	(a1)+,(a5)
000719C6 1B45 0002                  		move.b	d5,2(a5)
000719CA 7000                       		moveq	#0,d0
000719CC 3019                       		move.w	(a1)+,d0
000719CE D08B                       		add.l	a3,d0
000719D0 2B40 0004                  		move.l	d0,4(a5)
000719D4 3B59 0008                  		move.w	(a1)+,8(a5)
000719D8 1B7C 0001 000E             		move.b	#1,$E(a5)
000719DE 1B46 000D                  		move.b	d6,$D(a5)
000719E2 4A04                       		tst.b	d4
000719E4 6B00                       		bmi.s	loc_722A8
000719E6 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000719EC 2B41 0020                  		move.l	d1,$20(a5)
000719F0                            
000719F0                            loc_722A8:
000719F0 51CF FF7E                  		dbf	d7,loc_72228
000719F4                            
000719F4 4A2E 0250                  		tst.b	$250(a6)
000719F8 6A00                       		bpl.s	loc_722B8
000719FA 08EE 0002 0340             		bset	#2,$340(a6)
00071A00                            
00071A00                            loc_722B8:
00071A00 4A2E 0310                  		tst.b	$310(a6)
00071A04 6A00                       		bpl.s	locret_722C4
00071A06 08EE 0002 0370             		bset	#2,$370(a6)
00071A0C                            
00071A0C                            locret_722C4:
00071A0C 4E75                       		rts	
00071A0E                            ; ===========================================================================
00071A0E                            
00071A0E                            loc_722C6:
00071A0E 4216                       		clr.b	0(a6)
00071A10 4E75                       		rts	
00071A12                            ; ===========================================================================
00071A12 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00071A16 0000 0000                  		dc.l 0
00071A1A 00FF F100                  		dc.l $FFF100
00071A1E 00FF F130                  		dc.l $FFF130
00071A22 00FF F190                  		dc.l $FFF190
00071A26 00FF F1C0                  		dc.l $FFF1C0
00071A2A 00FF F1F0                  		dc.l $FFF1F0
00071A2E 00FF F1F0                  		dc.l $FFF1F0
00071A32 00FF F220                  dword_722EC:	dc.l $FFF220
00071A36 0000 0000                  		dc.l 0
00071A3A 00FF F250                  		dc.l $FFF250
00071A3E 00FF F280                  		dc.l $FFF280
00071A42 00FF F2B0                  		dc.l $FFF2B0
00071A46 00FF F2E0                  		dc.l $FFF2E0
00071A4A 00FF F310                  		dc.l $FFF310
00071A4E 00FF F310                  		dc.l $FFF310
00071A52                            ; ===========================================================================
00071A52                            ; ---------------------------------------------------------------------------
00071A52                            ; Play GHZ waterfall sound
00071A52                            ; ---------------------------------------------------------------------------
00071A52                            
00071A52                            Sound_D0toDF:				; XREF: Sound_ChkValue
00071A52 4A2E 0027                  		tst.b	$27(a6)
00071A56 6600 0000                  		bne.w	locret_723C6
00071A5A 4A2E 0004                  		tst.b	4(a6)
00071A5E 6600 0000                  		bne.w	locret_723C6
00071A62 4A2E 0024                  		tst.b	$24(a6)
00071A66 6600 0000                  		bne.w	locret_723C6
00071A6A 2079 0007 1020             		movea.l	(Go_SoundD0).l,a0
00071A70 0407 00D0                  		subi.b	#$D0,d7
00071A74 E54F                       		lsl.w	#2,d7
00071A76 2670 7000                  		movea.l	(a0,d7.w),a3
00071A7A 224B                       		movea.l	a3,a1
00071A7C 7000                       		moveq	#0,d0
00071A7E 3019                       		move.w	(a1)+,d0
00071A80 D08B                       		add.l	a3,d0
00071A82 2D40 0020                  		move.l	d0,$20(a6)
00071A86 1A19                       		move.b	(a1)+,d5
00071A88 1E19                       		move.b	(a1)+,d7
00071A8A 5307                       		subq.b	#1,d7
00071A8C 7C30                       		moveq	#$30,d6
00071A8E                            
00071A8E                            loc_72348:
00071A8E 1829 0001                  		move.b	1(a1),d4
00071A92 6B00                       		bmi.s	loc_7235A
00071A94 08EE 0002 0100             		bset	#2,$100(a6)
00071A9A 4BEE 0340                  		lea	$340(a6),a5
00071A9E 6000                       		bra.s	loc_72364
00071AA0                            ; ===========================================================================
00071AA0                            
00071AA0                            loc_7235A:
00071AA0 08EE 0002 01F0             		bset	#2,$1F0(a6)
00071AA6 4BEE 0370                  		lea	$370(a6),a5
00071AAA                            
00071AAA                            loc_72364:
00071AAA 244D                       		movea.l	a5,a2
00071AAC 700B                       		moveq	#$B,d0
00071AAE                            
00071AAE                            loc_72368:
00071AAE 429A                       		clr.l	(a2)+
00071AB0 51C8 FFFC                  		dbf	d0,loc_72368
00071AB4                            
00071AB4 3A99                       		move.w	(a1)+,(a5)
00071AB6 1B45 0002                  		move.b	d5,2(a5)
00071ABA 7000                       		moveq	#0,d0
00071ABC 3019                       		move.w	(a1)+,d0
00071ABE D08B                       		add.l	a3,d0
00071AC0 2B40 0004                  		move.l	d0,4(a5)
00071AC4 3B59 0008                  		move.w	(a1)+,8(a5)
00071AC8 1B7C 0001 000E             		move.b	#1,$E(a5)
00071ACE 1B46 000D                  		move.b	d6,$D(a5)
00071AD2 4A04                       		tst.b	d4
00071AD4 6B00                       		bmi.s	loc_72396
00071AD6 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00071ADC                            
00071ADC                            loc_72396:
00071ADC 51CF FFB0                  		dbf	d7,loc_72348
00071AE0                            
00071AE0 4A2E 0250                  		tst.b	$250(a6)
00071AE4 6A00                       		bpl.s	loc_723A6
00071AE6 08EE 0002 0340             		bset	#2,$340(a6)
00071AEC                            
00071AEC                            loc_723A6:
00071AEC 4A2E 0310                  		tst.b	$310(a6)
00071AF0 6A00                       		bpl.s	locret_723C6
00071AF2 08EE 0002 0370             		bset	#2,$370(a6)
00071AF8 0004 001F                  		ori.b	#$1F,d4
00071AFC 13C4 00C0 0011             		move.b	d4,($C00011).l
00071B02 0844 0005                  		bchg	#5,d4
00071B06 13C4 00C0 0011             		move.b	d4,($C00011).l
00071B0C                            
00071B0C                            locret_723C6:
00071B0C 4E75                       		rts	
00071B0E                            ; End of function Sound_ChkValue
00071B0E                            
00071B0E                            ; ===========================================================================
00071B0E 00FF F100                  		dc.l $FFF100
00071B12 00FF F1F0                  		dc.l $FFF1F0
00071B16 00FF F250                  		dc.l $FFF250
00071B1A 00FF F310                  		dc.l $FFF310
00071B1E 00FF F340                  		dc.l $FFF340
00071B22 00FF F370                  		dc.l $FFF370
00071B26                            
00071B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B26                            
00071B26                            
00071B26                            Snd_FadeOut1:				; XREF: Sound_E0
00071B26 4216                       		clr.b	0(a6)
00071B28 4BEE 0220                  		lea	$220(a6),a5
00071B2C 7E05                       		moveq	#5,d7
00071B2E                            
00071B2E                            loc_723EA:
00071B2E 4A15                       		tst.b	(a5)
00071B30 6A00 0000                  		bpl.w	loc_72472
00071B34 0895 0007                  		bclr	#7,(a5)
00071B38 7600                       		moveq	#0,d3
00071B3A 162D 0001                  		move.b	1(a5),d3
00071B3E 6B00                       		bmi.s	loc_7243C
00071B40 4EBA 0000                  		jsr	sub_726FE(pc)
00071B44 0C03 0004                  		cmpi.b	#4,d3
00071B48 6600                       		bne.s	loc_72416
00071B4A 4A2E 0340                  		tst.b	$340(a6)
00071B4E 6A00                       		bpl.s	loc_72416
00071B50 4BEE 0340                  		lea	$340(a6),a5
00071B54 226E 0020                  		movea.l	$20(a6),a1
00071B58 6000                       		bra.s	loc_72428
00071B5A                            ; ===========================================================================
00071B5A                            
00071B5A                            loc_72416:
00071B5A 5503                       		subq.b	#2,d3
00071B5C E50B                       		lsl.b	#2,d3
00071B5E 41FA FEB2                  		lea	dword_722CC(pc),a0
00071B62 264D                       		movea.l	a5,a3
00071B64 2A70 3000                  		movea.l	(a0,d3.w),a5
00071B68 226E 0018                  		movea.l	$18(a6),a1
00071B6C                            
00071B6C                            loc_72428:
00071B6C 0895 0002                  		bclr	#2,(a5)
00071B70 08D5 0001                  		bset	#1,(a5)
00071B74 102D 000B                  		move.b	$B(a5),d0
00071B78 4EBA 0000                  		jsr	sub_72C4E(pc)
00071B7C 2A4B                       		movea.l	a3,a5
00071B7E 6000                       		bra.s	loc_72472
00071B80                            ; ===========================================================================
00071B80                            
00071B80                            loc_7243C:
00071B80 4EBA 0000                  		jsr	sub_729A0(pc)
00071B84 41EE 0370                  		lea	$370(a6),a0
00071B88 0C03 00E0                  		cmpi.b	#$E0,d3
00071B8C 6700                       		beq.s	loc_7245A
00071B8E 0C03 00C0                  		cmpi.b	#$C0,d3
00071B92 6700                       		beq.s	loc_7245A
00071B94 E60B                       		lsr.b	#3,d3
00071B96 41FA FE7A                  		lea	dword_722CC(pc),a0
00071B9A 2070 3000                  		movea.l	(a0,d3.w),a0
00071B9E                            
00071B9E                            loc_7245A:
00071B9E 0890 0002                  		bclr	#2,(a0)
00071BA2 08D0 0001                  		bset	#1,(a0)
00071BA6 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00071BAC 6600                       		bne.s	loc_72472
00071BAE 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00071BB6                            
00071BB6                            loc_72472:
00071BB6 DAFC 0030                  		adda.w	#$30,a5
00071BBA 51CF FF72                  		dbf	d7,loc_723EA
00071BBE                            
00071BBE 4E75                       		rts	
00071BC0                            ; End of function Snd_FadeOut1
00071BC0                            
00071BC0                            
00071BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071BC0                            
00071BC0                            
00071BC0                            Snd_FadeOut2:				; XREF: Sound_E0
00071BC0 4BEE 0340                  		lea	$340(a6),a5
00071BC4 4A15                       		tst.b	(a5)
00071BC6 6A00                       		bpl.s	loc_724AE
00071BC8 0895 0007                  		bclr	#7,(a5)
00071BCC 0815 0002                  		btst	#2,(a5)
00071BD0 6600                       		bne.s	loc_724AE
00071BD2 4EBA 0000                  		jsr	loc_7270A(pc)
00071BD6 4BEE 0100                  		lea	$100(a6),a5
00071BDA 0895 0002                  		bclr	#2,(a5)
00071BDE 08D5 0001                  		bset	#1,(a5)
00071BE2 4A15                       		tst.b	(a5)
00071BE4 6A00                       		bpl.s	loc_724AE
00071BE6 226E 0018                  		movea.l	$18(a6),a1
00071BEA 102D 000B                  		move.b	$B(a5),d0
00071BEE 4EBA 0000                  		jsr	sub_72C4E(pc)
00071BF2                            
00071BF2                            loc_724AE:
00071BF2 4BEE 0370                  		lea	$370(a6),a5
00071BF6 4A15                       		tst.b	(a5)
00071BF8 6A00                       		bpl.s	locret_724E4
00071BFA 0895 0007                  		bclr	#7,(a5)
00071BFE 0815 0002                  		btst	#2,(a5)
00071C02 6600                       		bne.s	locret_724E4
00071C04 4EBA 0000                  		jsr	loc_729A6(pc)
00071C08 4BEE 01F0                  		lea	$1F0(a6),a5
00071C0C 0895 0002                  		bclr	#2,(a5)
00071C10 08D5 0001                  		bset	#1,(a5)
00071C14 4A15                       		tst.b	(a5)
00071C16 6A00                       		bpl.s	locret_724E4
00071C18 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00071C1E 6600                       		bne.s	locret_724E4
00071C20 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00071C28                            
00071C28                            locret_724E4:
00071C28 4E75                       		rts	
00071C2A                            ; End of function Snd_FadeOut2
00071C2A                            
00071C2A                            ; ===========================================================================
00071C2A                            ; ---------------------------------------------------------------------------
00071C2A                            ; Fade out music
00071C2A                            ; ---------------------------------------------------------------------------
00071C2A                            
00071C2A                            Sound_E0:				; XREF: Sound_ExIndex
00071C2A 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00071C2E 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00071C32 1D7C 0003 0006             		move.b	#3,6(a6)
00071C38 1D7C 0028 0004             		move.b	#$28,4(a6)
00071C3E 422E 0040                  		clr.b	$40(a6)
00071C42 422E 002A                  		clr.b	$2A(a6)
00071C46 4E75                       		rts	
00071C48                            
00071C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C48                            
00071C48                            
00071C48                            sub_72504:				; XREF: sub_71B4C
00071C48 102E 0006                  		move.b	6(a6),d0
00071C4C 6700                       		beq.s	loc_72510
00071C4E 532E 0006                  		subq.b	#1,6(a6)
00071C52 4E75                       		rts	
00071C54                            ; ===========================================================================
00071C54                            
00071C54                            loc_72510:
00071C54 532E 0004                  		subq.b	#1,4(a6)
00071C58 6700 0000                  		beq.w	Sound_E4
00071C5C 1D7C 0003 0006             		move.b	#3,6(a6)
00071C62 4BEE 0070                  		lea	$70(a6),a5
00071C66 7E05                       		moveq	#5,d7
00071C68                            
00071C68                            loc_72524:
00071C68 4A15                       		tst.b	(a5)
00071C6A 6A00                       		bpl.s	loc_72538
00071C6C 522D 0009                  		addq.b	#1,9(a5)
00071C70 6A00                       		bpl.s	loc_72534
00071C72 0895 0007                  		bclr	#7,(a5)
00071C76 6000                       		bra.s	loc_72538
00071C78                            ; ===========================================================================
00071C78                            
00071C78                            loc_72534:
00071C78 4EBA 0000                  		jsr	sub_72CB4(pc)
00071C7C                            
00071C7C                            loc_72538:
00071C7C DAFC 0030                  		adda.w	#$30,a5
00071C80 51CF FFE6                  		dbf	d7,loc_72524
00071C84                            
00071C84 7E02                       		moveq	#2,d7
00071C86                            
00071C86                            loc_72542:
00071C86 4A15                       		tst.b	(a5)
00071C88 6A00                       		bpl.s	loc_72560
00071C8A 522D 0009                  		addq.b	#1,9(a5)
00071C8E 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00071C94 6500                       		bcs.s	loc_72558
00071C96 0895 0007                  		bclr	#7,(a5)
00071C9A 6000                       		bra.s	loc_72560
00071C9C                            ; ===========================================================================
00071C9C                            
00071C9C                            loc_72558:
00071C9C 1C2D 0009                  		move.b	9(a5),d6
00071CA0 4EBA 0000                  		jsr	sub_7296A(pc)
00071CA4                            
00071CA4                            loc_72560:
00071CA4 DAFC 0030                  		adda.w	#$30,a5
00071CA8 51CF FFDC                  		dbf	d7,loc_72542
00071CAC                            
00071CAC 4E75                       		rts	
00071CAE                            ; End of function sub_72504
00071CAE                            
00071CAE                            
00071CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CAE                            
00071CAE                            
00071CAE                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00071CAE 7602                       		moveq	#2,d3
00071CB0 7028                       		moveq	#$28,d0
00071CB2                            
00071CB2                            loc_7256E:
00071CB2 1203                       		move.b	d3,d1
00071CB4 4EBA 0000                  		jsr	sub_7272E(pc)
00071CB8 5801                       		addq.b	#4,d1
00071CBA 4EBA 0000                  		jsr	sub_7272E(pc)
00071CBE 51CB FFF2                  		dbf	d3,loc_7256E
00071CC2                            
00071CC2 7040                       		moveq	#$40,d0
00071CC4 727F                       		moveq	#$7F,d1
00071CC6 7802                       		moveq	#2,d4
00071CC8                            
00071CC8                            loc_72584:
00071CC8 7603                       		moveq	#3,d3
00071CCA                            
00071CCA                            loc_72586:
00071CCA 4EBA 0000                  		jsr	sub_7272E(pc)
00071CCE 4EBA 0000                  		jsr	sub_72764(pc)
00071CD2 5840                       		addq.w	#4,d0
00071CD4 51CB FFF4                  		dbf	d3,loc_72586
00071CD8                            
00071CD8 0400 000F                  		subi.b	#$F,d0
00071CDC 51CC FFEA                  		dbf	d4,loc_72584
00071CE0                            
00071CE0 4E75                       		rts	
00071CE2                            ; End of function sub_7256A
00071CE2                            
00071CE2                            ; ===========================================================================
00071CE2                            ; ---------------------------------------------------------------------------
00071CE2                            ; Stop music
00071CE2                            ; ---------------------------------------------------------------------------
00071CE2                            
00071CE2                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00071CE2 702B                       		moveq	#$2B,d0
00071CE4 123C 0080                  		move.b	#$80,d1
00071CE8 4EBA 0000                  		jsr	sub_7272E(pc)
00071CEC 7027                       		moveq	#$27,d0
00071CEE 7200                       		moveq	#0,d1
00071CF0 4EBA 0000                  		jsr	sub_7272E(pc)
00071CF4 204E                       		movea.l	a6,a0
00071CF6 303C 00E3                  		move.w	#$E3,d0
00071CFA                            
00071CFA                            loc_725B6:
00071CFA 4298                       		clr.l	(a0)+
00071CFC 51C8 FFFC                  		dbf	d0,loc_725B6
00071D00                            
00071D00 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00071D06 4EBA FFA6                  		jsr	sub_7256A(pc)
00071D0A 6000 0000                  		bra.w	sub_729B6
00071D0E                            
00071D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D0E                            
00071D0E                            
00071D0E                            sub_725CA:				; XREF: Sound_ChkValue
00071D0E 204E                       		movea.l	a6,a0
00071D10 1216                       		move.b	0(a6),d1
00071D12 142E 0027                  		move.b	$27(a6),d2
00071D16 162E 002A                  		move.b	$2A(a6),d3
00071D1A 182E 0026                  		move.b	$26(a6),d4
00071D1E 3A2E 000A                  		move.w	$A(a6),d5
00071D22 303C 0087                  		move.w	#$87,d0
00071D26                            
00071D26                            loc_725E4:
00071D26 4298                       		clr.l	(a0)+
00071D28 51C8 FFFC                  		dbf	d0,loc_725E4
00071D2C                            
00071D2C 1C81                       		move.b	d1,0(a6)
00071D2E 1D42 0027                  		move.b	d2,$27(a6)
00071D32 1D43 002A                  		move.b	d3,$2A(a6)
00071D36 1D44 0026                  		move.b	d4,$26(a6)
00071D3A 3D45 000A                  		move.w	d5,$A(a6)
00071D3E 1D7C 0080 0009             		move.b	#$80,9(a6)
00071D44 4EBA FF68                  		jsr	sub_7256A(pc)
00071D48 6000 0000                  		bra.w	sub_729B6
00071D4C                            ; End of function sub_725CA
00071D4C                            
00071D4C                            
00071D4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D4C                            
00071D4C                            
00071D4C                            sub_7260C:				; XREF: sub_71B4C
00071D4C 1D6E 0002 0001             		move.b	2(a6),1(a6)
00071D52 41EE 004E                  		lea	$4E(a6),a0
00071D56 7030                       		moveq	#$30,d0
00071D58 7209                       		moveq	#9,d1
00071D5A                            
00071D5A                            loc_7261A:
00071D5A 5210                       		addq.b	#1,(a0)
00071D5C D0C0                       		adda.w	d0,a0
00071D5E 51C9 FFFA                  		dbf	d1,loc_7261A
00071D62                            
00071D62 4E75                       		rts	
00071D64                            ; End of function sub_7260C
00071D64                            
00071D64                            ; ===========================================================================
00071D64                            ; ---------------------------------------------------------------------------
00071D64                            ; Speed	up music
00071D64                            ; ---------------------------------------------------------------------------
00071D64                            
00071D64                            Sound_E2:				; XREF: Sound_ExIndex
00071D64 4A2E 0027                  		tst.b	$27(a6)
00071D68 6600                       		bne.s	loc_7263E
00071D6A 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00071D70 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00071D76 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00071D7C 4E75                       		rts	
00071D7E                            ; ===========================================================================
00071D7E                            
00071D7E                            loc_7263E:
00071D7E 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00071D84 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00071D8A 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00071D90 4E75                       		rts	
00071D92                            ; ===========================================================================
00071D92                            ; ---------------------------------------------------------------------------
00071D92                            ; Change music back to normal speed
00071D92                            ; ---------------------------------------------------------------------------
00071D92                            
00071D92                            Sound_E3:				; XREF: Sound_ExIndex
00071D92 4A2E 0027                  		tst.b	$27(a6)
00071D96 6600                       		bne.s	loc_7266A
00071D98 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00071D9E 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00071DA4 422E 002A                  		clr.b	$2A(a6)
00071DA8 4E75                       		rts	
00071DAA                            ; ===========================================================================
00071DAA                            
00071DAA                            loc_7266A:
00071DAA 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00071DB0 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00071DB6 422E 03CA                  		clr.b	$3CA(a6)
00071DBA 4E75                       		rts	
00071DBC                            
00071DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071DBC                            
00071DBC                            
00071DBC                            sub_7267C:				; XREF: sub_71B4C
00071DBC 4A2E 0025                  		tst.b	$25(a6)
00071DC0 6700                       		beq.s	loc_72688
00071DC2 532E 0025                  		subq.b	#1,$25(a6)
00071DC6 4E75                       		rts	
00071DC8                            ; ===========================================================================
00071DC8                            
00071DC8                            loc_72688:
00071DC8 4A2E 0026                  		tst.b	$26(a6)
00071DCC 6700                       		beq.s	loc_726D6
00071DCE 532E 0026                  		subq.b	#1,$26(a6)
00071DD2 1D7C 0002 0025             		move.b	#2,$25(a6)
00071DD8 4BEE 0070                  		lea	$70(a6),a5
00071DDC 7E05                       		moveq	#5,d7
00071DDE                            
00071DDE                            loc_7269E:
00071DDE 4A15                       		tst.b	(a5)
00071DE0 6A00                       		bpl.s	loc_726AA
00071DE2 532D 0009                  		subq.b	#1,9(a5)
00071DE6 4EBA 0000                  		jsr	sub_72CB4(pc)
00071DEA                            
00071DEA                            loc_726AA:
00071DEA DAFC 0030                  		adda.w	#$30,a5
00071DEE 51CF FFEE                  		dbf	d7,loc_7269E
00071DF2 7E02                       		moveq	#2,d7
00071DF4                            
00071DF4                            loc_726B4:
00071DF4 4A15                       		tst.b	(a5)
00071DF6 6A00                       		bpl.s	loc_726CC
00071DF8 532D 0009                  		subq.b	#1,9(a5)
00071DFC 1C2D 0009                  		move.b	9(a5),d6
00071E00 0C06 0010                  		cmpi.b	#$10,d6
00071E04 6500                       		bcs.s	loc_726C8
00071E06 7C0F                       		moveq	#$F,d6
00071E08                            
00071E08                            loc_726C8:
00071E08 4EBA 0000                  		jsr	sub_7296A(pc)
00071E0C                            
00071E0C                            loc_726CC:
00071E0C DAFC 0030                  		adda.w	#$30,a5
00071E10 51CF FFE2                  		dbf	d7,loc_726B4
00071E14 4E75                       		rts	
00071E16                            ; ===========================================================================
00071E16                            
00071E16                            loc_726D6:
00071E16 08AE 0002 0040             		bclr	#2,$40(a6)
00071E1C 422E 0024                  		clr.b	$24(a6)
00071E20 4E75                       		rts	
00071E22                            ; End of function sub_7267C
00071E22                            
00071E22                            ; ===========================================================================
00071E22                            
00071E22                            loc_726E2:				; XREF: sub_71CCA
00071E22 0815 0001                  		btst	#1,(a5)
00071E26 6600                       		bne.s	locret_726FC
00071E28 0815 0002                  		btst	#2,(a5)
00071E2C 6600                       		bne.s	locret_726FC
00071E2E 7028                       		moveq	#$28,d0
00071E30 122D 0001                  		move.b	1(a5),d1
00071E34 0001 00F0                  		ori.b	#-$10,d1
00071E38 6000 0000                  		bra.w	sub_7272E
00071E3C                            ; ===========================================================================
00071E3C                            
00071E3C                            locret_726FC:
00071E3C 4E75                       		rts	
00071E3E                            
00071E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071E3E                            
00071E3E                            
00071E3E                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00071E3E 0815 0004                  		btst	#4,(a5)
00071E42 6600                       		bne.s	locret_72714
00071E44 0815 0002                  		btst	#2,(a5)
00071E48 6600                       		bne.s	locret_72714
00071E4A                            
00071E4A                            loc_7270A:				; XREF: Snd_FadeOut2
00071E4A 7028                       		moveq	#$28,d0
00071E4C 122D 0001                  		move.b	1(a5),d1
00071E50 6000 0000                  		bra.w	sub_7272E
00071E54                            ; ===========================================================================
00071E54                            
00071E54                            locret_72714:
00071E54 4E75                       		rts	
00071E56                            ; End of function sub_726FE
00071E56                            
00071E56                            ; ===========================================================================
00071E56                            
00071E56                            loc_72716:				; XREF: sub_72A5A
00071E56 0815 0002                  		btst	#2,(a5)
00071E5A 6600                       		bne.s	locret_72720
00071E5C 6000 0000                  		bra.w	sub_72722
00071E60                            ; ===========================================================================
00071E60                            
00071E60                            locret_72720:
00071E60 4E75                       		rts	
00071E62                            
00071E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071E62                            
00071E62                            
00071E62                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00071E62 082D 0002 0001             		btst	#2,1(a5)
00071E68 6600                       		bne.s	loc_7275A
00071E6A D02D 0001                  		add.b	1(a5),d0
00071E6E                            ; End of function sub_72722
00071E6E                            
00071E6E                            
00071E6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071E6E                            
00071E6E                            
00071E6E                            sub_7272E:				; XREF: loc_71E6A
00071E6E 1439 00A0 4000             		move.b	($A04000).l,d2
00071E74 0802 0007                  		btst	#7,d2
00071E78 66F4                       		bne.s	sub_7272E
00071E7A 13C0 00A0 4000             		move.b	d0,($A04000).l
00071E80 4E71                       		nop	
00071E82 4E71                       		nop	
00071E84 4E71                       		nop	
00071E86                            
00071E86                            loc_72746:
00071E86 1439 00A0 4000             		move.b	($A04000).l,d2
00071E8C 0802 0007                  		btst	#7,d2
00071E90 66F4                       		bne.s	loc_72746
00071E92                            
00071E92 13C1 00A0 4001             		move.b	d1,($A04001).l
00071E98 4E75                       		rts	
00071E9A                            ; End of function sub_7272E
00071E9A                            
00071E9A                            ; ===========================================================================
00071E9A                            
00071E9A                            loc_7275A:				; XREF: sub_72722
00071E9A 142D 0001                  		move.b	1(a5),d2
00071E9E 0882 0002                  		bclr	#2,d2
00071EA2 D002                       		add.b	d2,d0
00071EA4                            
00071EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071EA4                            
00071EA4                            
00071EA4                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00071EA4 1439 00A0 4000             		move.b	($A04000).l,d2
00071EAA 0802 0007                  		btst	#7,d2
00071EAE 66F4                       		bne.s	sub_72764
00071EB0 13C0 00A0 4002             		move.b	d0,($A04002).l
00071EB6 4E71                       		nop	
00071EB8 4E71                       		nop	
00071EBA 4E71                       		nop	
00071EBC                            
00071EBC                            loc_7277C:
00071EBC 1439 00A0 4000             		move.b	($A04000).l,d2
00071EC2 0802 0007                  		btst	#7,d2
00071EC6 66F4                       		bne.s	loc_7277C
00071EC8                            
00071EC8 13C1 00A0 4003             		move.b	d1,($A04003).l
00071ECE 4E75                       		rts	
00071ED0                            ; End of function sub_72764
00071ED0                            
00071ED0                            ; ===========================================================================
00071ED0 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00071EE2 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00071EF4 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00071F04 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00071F14 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00071F24 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00071F34 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00071F44 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00071F54 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00071F64 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00071F74 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00071F84 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00071F90                            
00071F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071F90                            
00071F90                            
00071F90                            sub_72850:				; XREF: sub_71B4C
00071F90 532D 000E                  		subq.b	#1,$E(a5)
00071F94 6600                       		bne.s	loc_72866
00071F96 0895 0004                  		bclr	#4,(a5)
00071F9A 4EBA 0000                  		jsr	sub_72878(pc)
00071F9E 4EBA 0000                  		jsr	sub_728DC(pc)
00071FA2 6000 0000                  		bra.w	loc_7292E
00071FA6                            ; ===========================================================================
00071FA6                            
00071FA6                            loc_72866:
00071FA6 4EBA F4B2                  		jsr	sub_71D9E(pc)
00071FAA 4EBA 0000                  		jsr	sub_72926(pc)
00071FAE 4EBA F4D2                  		jsr	sub_71DC6(pc)
00071FB2 4EBA 0000                  		jsr	sub_728E2(pc)
00071FB6 4E75                       		rts	
00071FB8                            ; End of function sub_72850
00071FB8                            
00071FB8                            
00071FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071FB8                            
00071FB8                            
00071FB8                            sub_72878:				; XREF: sub_72850
00071FB8 0895 0001                  		bclr	#1,(a5)
00071FBC 286D 0004                  		movea.l	4(a5),a4
00071FC0                            
00071FC0                            loc_72880:
00071FC0 7A00                       		moveq	#0,d5
00071FC2 1A1C                       		move.b	(a4)+,d5
00071FC4 0C05 00E0                  		cmpi.b	#$E0,d5
00071FC8 6500                       		bcs.s	loc_72890
00071FCA 4EBA 0000                  		jsr	sub_72A5A(pc)
00071FCE 60F0                       		bra.s	loc_72880
00071FD0                            ; ===========================================================================
00071FD0                            
00071FD0                            loc_72890:
00071FD0 4A05                       		tst.b	d5
00071FD2 6A00                       		bpl.s	loc_728A4
00071FD4 4EBA 0000                  		jsr	sub_728AC(pc)
00071FD8 1A1C                       		move.b	(a4)+,d5
00071FDA 4A05                       		tst.b	d5
00071FDC 6A00                       		bpl.s	loc_728A4
00071FDE 534C                       		subq.w	#1,a4
00071FE0 6000 F43A                  		bra.w	sub_71D60
00071FE4                            ; ===========================================================================
00071FE4                            
00071FE4                            loc_728A4:
00071FE4 4EBA F416                  		jsr	sub_71D40(pc)
00071FE8 6000 F432                  		bra.w	sub_71D60
00071FEC                            ; End of function sub_72878
00071FEC                            
00071FEC                            
00071FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071FEC                            
00071FEC                            
00071FEC                            sub_728AC:				; XREF: sub_72878
00071FEC 0405 0081                  		subi.b	#$81,d5
00071FF0 6500                       		bcs.s	loc_728CA
00071FF2 DA2D 0008                  		add.b	8(a5),d5
00071FF6 0245 007F                  		andi.w	#$7F,d5
00071FFA E34D                       		lsl.w	#1,d5
00071FFC 41FA 0000                  		lea	word_729CE(pc),a0
00072000 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00072006 6000 F414                  		bra.w	sub_71D60
0007200A                            ; ===========================================================================
0007200A                            
0007200A                            loc_728CA:
0007200A 08D5 0001                  		bset	#1,(a5)
0007200E 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00072014 4EBA F406                  		jsr	sub_71D60(pc)
00072018 6000 0000                  		bra.w	sub_729A0
0007201C                            ; End of function sub_728AC
0007201C                            
0007201C                            
0007201C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007201C                            
0007201C                            
0007201C                            sub_728DC:				; XREF: sub_72850
0007201C 3C2D 0010                  		move.w	$10(a5),d6
00072020 6B00                       		bmi.s	loc_72920
00072022                            ; End of function sub_728DC
00072022                            
00072022                            
00072022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072022                            
00072022                            
00072022                            sub_728E2:				; XREF: sub_72850
00072022 102D 001E                  		move.b	$1E(a5),d0
00072026 4880                       		ext.w	d0
00072028 DC40                       		add.w	d0,d6
0007202A 0815 0002                  		btst	#2,(a5)
0007202E 6600                       		bne.s	locret_7291E
00072030 0815 0001                  		btst	#1,(a5)
00072034 6600                       		bne.s	locret_7291E
00072036 102D 0001                  		move.b	1(a5),d0
0007203A 0C00 00E0                  		cmpi.b	#$E0,d0
0007203E 6600                       		bne.s	loc_72904
00072040 103C 00C0                  		move.b	#$C0,d0
00072044                            
00072044                            loc_72904:
00072044 3206                       		move.w	d6,d1
00072046 0201 000F                  		andi.b	#$F,d1
0007204A 8001                       		or.b	d1,d0
0007204C E84E                       		lsr.w	#4,d6
0007204E 0206 003F                  		andi.b	#$3F,d6
00072052 13C0 00C0 0011             		move.b	d0,($C00011).l
00072058 13C6 00C0 0011             		move.b	d6,($C00011).l
0007205E                            
0007205E                            locret_7291E:
0007205E 4E75                       		rts	
00072060                            ; End of function sub_728E2
00072060                            
00072060                            ; ===========================================================================
00072060                            
00072060                            loc_72920:				; XREF: sub_728DC
00072060 08D5 0001                  		bset	#1,(a5)
00072064 4E75                       		rts	
00072066                            
00072066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072066                            
00072066                            
00072066                            sub_72926:				; XREF: sub_72850
00072066 4A2D 000B                  		tst.b	$B(a5)
0007206A 6700 0000                  		beq.w	locret_7298A
0007206E                            
0007206E                            loc_7292E:				; XREF: sub_72850
0007206E 1C2D 0009                  		move.b	9(a5),d6
00072072 7000                       		moveq	#0,d0
00072074 102D 000B                  		move.b	$B(a5),d0
00072078 6700                       		beq.s	sub_7296A
0007207A 2079 0007 1030             		movea.l	(Go_PSGIndex).l,a0
00072080 5340                       		subq.w	#1,d0
00072082 E548                       		lsl.w	#2,d0
00072084 2070 0000                  		movea.l	(a0,d0.w),a0
00072088 102D 000C                  		move.b	$C(a5),d0
0007208C 1030 0000                  		move.b	(a0,d0.w),d0
00072090 522D 000C                  		addq.b	#1,$C(a5)
00072094 0800 0007                  		btst	#7,d0
00072098 6700                       		beq.s	loc_72960
0007209A 0C00 0080                  		cmpi.b	#$80,d0
0007209E 6700                       		beq.s	loc_7299A
000720A0                            
000720A0                            loc_72960:
000720A0 DC40                       		add.w	d0,d6
000720A2 0C06 0010                  		cmpi.b	#$10,d6
000720A6 6500                       		bcs.s	sub_7296A
000720A8 7C0F                       		moveq	#$F,d6
000720AA                            ; End of function sub_72926
000720AA                            
000720AA                            
000720AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000720AA                            
000720AA                            
000720AA                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000720AA 0815 0001                  		btst	#1,(a5)
000720AE 6600                       		bne.s	locret_7298A
000720B0 0815 0002                  		btst	#2,(a5)
000720B4 6600                       		bne.s	locret_7298A
000720B6 0815 0004                  		btst	#4,(a5)
000720BA 6600                       		bne.s	loc_7298C
000720BC                            
000720BC                            loc_7297C:
000720BC 8C2D 0001                  		or.b	1(a5),d6
000720C0 0606 0010                  		addi.b	#$10,d6
000720C4 13C6 00C0 0011             		move.b	d6,($C00011).l
000720CA                            
000720CA                            locret_7298A:
000720CA 4E75                       		rts	
000720CC                            ; ===========================================================================
000720CC                            
000720CC                            loc_7298C:
000720CC 4A2D 0013                  		tst.b	$13(a5)
000720D0 67EA                       		beq.s	loc_7297C
000720D2 4A2D 0012                  		tst.b	$12(a5)
000720D6 66E4                       		bne.s	loc_7297C
000720D8 4E75                       		rts	
000720DA                            ; End of function sub_7296A
000720DA                            
000720DA                            ; ===========================================================================
000720DA                            
000720DA                            loc_7299A:				; XREF: sub_72926
000720DA 532D 000C                  		subq.b	#1,$C(a5)
000720DE 4E75                       		rts	
000720E0                            
000720E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000720E0                            
000720E0                            
000720E0                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000720E0 0815 0002                  		btst	#2,(a5)
000720E4 6600                       		bne.s	locret_729B4
000720E6                            
000720E6                            loc_729A6:				; XREF: Snd_FadeOut2
000720E6 102D 0001                  		move.b	1(a5),d0
000720EA 0000 001F                  		ori.b	#$1F,d0
000720EE 13C0 00C0 0011             		move.b	d0,($C00011).l
000720F4                            
000720F4                            locret_729B4:
000720F4 4E75                       		rts	
000720F6                            ; End of function sub_729A0
000720F6                            
000720F6                            
000720F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000720F6                            
000720F6                            
000720F6                            sub_729B6:				; XREF: loc_71E7C
000720F6 41F9 00C0 0011             		lea	($C00011).l,a0
000720FC 10BC 009F                  		move.b	#$9F,(a0)
00072100 10BC 00BF                  		move.b	#$BF,(a0)
00072104 10BC 00DF                  		move.b	#$DF,(a0)
00072108 10BC 00FF                  		move.b	#$FF,(a0)
0007210C 4E75                       		rts	
0007210E                            ; End of function sub_729B6
0007210E                            
0007210E                            ; ===========================================================================
0007210E 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00072120 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00072132 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00072146 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007215A 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007216E 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00072182 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00072196 0011 0000                  		dc.w $11, 0
0007219A                            
0007219A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007219A                            
0007219A                            
0007219A                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007219A 0445 00E0                  		subi.w	#$E0,d5
0007219E E54D                       		lsl.w	#2,d5
000721A0 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000721A4                            ; End of function sub_72A5A
000721A4                            
000721A4                            ; ===========================================================================
000721A4                            
000721A4                            loc_72A64:
000721A4 6000 0000                  		bra.w	loc_72ACC
000721A8                            ; ===========================================================================
000721A8 6000 0000                  		bra.w	loc_72AEC
000721AC                            ; ===========================================================================
000721AC 6000 0000                  		bra.w	loc_72AF2
000721B0                            ; ===========================================================================
000721B0 6000 0000                  		bra.w	loc_72AF8
000721B4                            ; ===========================================================================
000721B4 6000 0000                  		bra.w	loc_72B14
000721B8                            ; ===========================================================================
000721B8 6000 0000                  		bra.w	loc_72B9E
000721BC                            ; ===========================================================================
000721BC 6000 0000                  		bra.w	loc_72BA4
000721C0                            ; ===========================================================================
000721C0 6000 0000                  		bra.w	loc_72BAE
000721C4                            ; ===========================================================================
000721C4 6000 0000                  		bra.w	loc_72BB4
000721C8                            ; ===========================================================================
000721C8 6000 0000                  		bra.w	loc_72BBE
000721CC                            ; ===========================================================================
000721CC 6000 0000                  		bra.w	loc_72BC6
000721D0                            ; ===========================================================================
000721D0 6000 0000                  		bra.w	loc_72BD0
000721D4                            ; ===========================================================================
000721D4 6000 0000                  		bra.w	loc_72BE6
000721D8                            ; ===========================================================================
000721D8 6000 0000                  		bra.w	loc_72BEE
000721DC                            ; ===========================================================================
000721DC 6000 0000                  		bra.w	loc_72BF4
000721E0                            ; ===========================================================================
000721E0 6000 0000                  		bra.w	loc_72C26
000721E4                            ; ===========================================================================
000721E4 6000 0000                  		bra.w	loc_72D30
000721E8                            ; ===========================================================================
000721E8 6000 0000                  		bra.w	loc_72D52
000721EC                            ; ===========================================================================
000721EC 6000 0000                  		bra.w	loc_72D58
000721F0                            ; ===========================================================================
000721F0 6000 0000                  		bra.w	loc_72E06
000721F4                            ; ===========================================================================
000721F4 6000 0000                  		bra.w	loc_72E20
000721F8                            ; ===========================================================================
000721F8 6000 0000                  		bra.w	loc_72E26
000721FC                            ; ===========================================================================
000721FC 6000 0000                  		bra.w	loc_72E2C
00072200                            ; ===========================================================================
00072200 6000 0000                  		bra.w	loc_72E38
00072204                            ; ===========================================================================
00072204 6000 0000                  		bra.w	loc_72E52
00072208                            ; ===========================================================================
00072208 6000 0000                  		bra.w	loc_72E64
0007220C                            ; ===========================================================================
0007220C                            
0007220C                            loc_72ACC:				; XREF: loc_72A64
0007220C 121C                       		move.b	(a4)+,d1
0007220E 4A2D 0001                  		tst.b	1(a5)
00072212 6B00                       		bmi.s	locret_72AEA
00072214 102D 000A                  		move.b	$A(a5),d0
00072218 0200 0037                  		andi.b	#$37,d0
0007221C 8200                       		or.b	d0,d1
0007221E 1B41 000A                  		move.b	d1,$A(a5)
00072222 103C 00B4                  		move.b	#$B4,d0
00072226 6000 FC2E                  		bra.w	loc_72716
0007222A                            ; ===========================================================================
0007222A                            
0007222A                            locret_72AEA:
0007222A 4E75                       		rts	
0007222C                            ; ===========================================================================
0007222C                            
0007222C                            loc_72AEC:				; XREF: loc_72A64
0007222C 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00072230 4E75                       		rts	
00072232                            ; ===========================================================================
00072232                            
00072232                            loc_72AF2:				; XREF: loc_72A64
00072232 1D5C 0007                  		move.b	(a4)+,7(a6)
00072236 4E75                       		rts	
00072238                            ; ===========================================================================
00072238                            
00072238                            loc_72AF8:				; XREF: loc_72A64
00072238 7000                       		moveq	#0,d0
0007223A 102D 000D                  		move.b	$D(a5),d0
0007223E 2875 0000                  		movea.l	(a5,d0.w),a4
00072242 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007224A 544C                       		addq.w	#2,a4
0007224C 5800                       		addq.b	#4,d0
0007224E 1B40 000D                  		move.b	d0,$D(a5)
00072252 4E75                       		rts	
00072254                            ; ===========================================================================
00072254                            
00072254                            loc_72B14:				; XREF: loc_72A64
00072254 204E                       		movea.l	a6,a0
00072256 43EE 03A0                  		lea	$3A0(a6),a1
0007225A 303C 0087                  		move.w	#$87,d0
0007225E                            
0007225E                            loc_72B1E:
0007225E 20D9                       		move.l	(a1)+,(a0)+
00072260 51C8 FFFC                  		dbf	d0,loc_72B1E
00072264                            
00072264 08EE 0002 0040             		bset	#2,$40(a6)
0007226A 264D                       		movea.l	a5,a3
0007226C 1C3C 0028                  		move.b	#$28,d6
00072270 9C2E 0026                  		sub.b	$26(a6),d6
00072274 7E05                       		moveq	#5,d7
00072276 4BEE 0070                  		lea	$70(a6),a5
0007227A                            
0007227A                            loc_72B3A:
0007227A 0815 0007                  		btst	#7,(a5)
0007227E 6700                       		beq.s	loc_72B5C
00072280 08D5 0001                  		bset	#1,(a5)
00072284 DD2D 0009                  		add.b	d6,9(a5)
00072288 0815 0002                  		btst	#2,(a5)
0007228C 6600                       		bne.s	loc_72B5C
0007228E 7000                       		moveq	#0,d0
00072290 102D 000B                  		move.b	$B(a5),d0
00072294 226E 0018                  		movea.l	$18(a6),a1
00072298 4EBA 0000                  		jsr	sub_72C4E(pc)
0007229C                            
0007229C                            loc_72B5C:
0007229C DAFC 0030                  		adda.w	#$30,a5
000722A0 51CF FFD8                  		dbf	d7,loc_72B3A
000722A4                            
000722A4 7E02                       		moveq	#2,d7
000722A6                            
000722A6                            loc_72B66:
000722A6 0815 0007                  		btst	#7,(a5)
000722AA 6700                       		beq.s	loc_72B78
000722AC 08D5 0001                  		bset	#1,(a5)
000722B0 4EBA FE2E                  		jsr	sub_729A0(pc)
000722B4 DD2D 0009                  		add.b	d6,9(a5)
000722B8                            
000722B8                            loc_72B78:
000722B8 DAFC 0030                  		adda.w	#$30,a5
000722BC 51CF FFE8                  		dbf	d7,loc_72B66
000722C0 2A4B                       		movea.l	a3,a5
000722C2 1D7C 0080 0024             		move.b	#$80,$24(a6)
000722C8 1D7C 0028 0026             		move.b	#$28,$26(a6)
000722CE 422E 0027                  		clr.b	$27(a6)
000722D2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000722DA 504F                       		addq.w	#8,sp
000722DC 4E75                       		rts	
000722DE                            ; ===========================================================================
000722DE                            
000722DE                            loc_72B9E:				; XREF: loc_72A64
000722DE 1B5C 0002                  		move.b	(a4)+,2(a5)
000722E2 4E75                       		rts	
000722E4                            ; ===========================================================================
000722E4                            
000722E4                            loc_72BA4:				; XREF: loc_72A64
000722E4 101C                       		move.b	(a4)+,d0
000722E6 D12D 0009                  		add.b	d0,9(a5)
000722EA 6000 0000                  		bra.w	sub_72CB4
000722EE                            ; ===========================================================================
000722EE                            
000722EE                            loc_72BAE:				; XREF: loc_72A64
000722EE 08D5 0004                  		bset	#4,(a5)
000722F2 4E75                       		rts	
000722F4                            ; ===========================================================================
000722F4                            
000722F4                            loc_72BB4:				; XREF: loc_72A64
000722F4 1B54 0012                  		move.b	(a4),$12(a5)
000722F8 1B5C 0013                  		move.b	(a4)+,$13(a5)
000722FC 4E75                       		rts	
000722FE                            ; ===========================================================================
000722FE                            
000722FE                            loc_72BBE:				; XREF: loc_72A64
000722FE 101C                       		move.b	(a4)+,d0
00072300 D12D 0008                  		add.b	d0,8(a5)
00072304 4E75                       		rts	
00072306                            ; ===========================================================================
00072306                            
00072306                            loc_72BC6:				; XREF: loc_72A64
00072306 1D54 0002                  		move.b	(a4),2(a6)
0007230A 1D5C 0001                  		move.b	(a4)+,1(a6)
0007230E 4E75                       		rts	
00072310                            ; ===========================================================================
00072310                            
00072310                            loc_72BD0:				; XREF: loc_72A64
00072310 41EE 0040                  		lea	$40(a6),a0
00072314 101C                       		move.b	(a4)+,d0
00072316 7230                       		moveq	#$30,d1
00072318 7409                       		moveq	#9,d2
0007231A                            
0007231A                            loc_72BDA:
0007231A 1140 0002                  		move.b	d0,2(a0)
0007231E D0C1                       		adda.w	d1,a0
00072320 51CA FFF8                  		dbf	d2,loc_72BDA
00072324                            
00072324 4E75                       		rts	
00072326                            ; ===========================================================================
00072326                            
00072326                            loc_72BE6:				; XREF: loc_72A64
00072326 101C                       		move.b	(a4)+,d0
00072328 D12D 0009                  		add.b	d0,9(a5)
0007232C 4E75                       		rts	
0007232E                            ; ===========================================================================
0007232E                            
0007232E                            loc_72BEE:				; XREF: loc_72A64
0007232E 422E 002C                  		clr.b	$2C(a6)
00072332 4E75                       		rts	
00072334                            ; ===========================================================================
00072334                            
00072334                            loc_72BF4:				; XREF: loc_72A64
00072334 0895 0007                  		bclr	#7,(a5)
00072338 0895 0004                  		bclr	#4,(a5)
0007233C 4EBA FB00                  		jsr	sub_726FE(pc)
00072340 4A2E 0250                  		tst.b	$250(a6)
00072344 6B00                       		bmi.s	loc_72C22
00072346 264D                       		movea.l	a5,a3
00072348 4BEE 0100                  		lea	$100(a6),a5
0007234C 226E 0018                  		movea.l	$18(a6),a1
00072350 0895 0002                  		bclr	#2,(a5)
00072354 08D5 0001                  		bset	#1,(a5)
00072358 102D 000B                  		move.b	$B(a5),d0
0007235C 4EBA 0000                  		jsr	sub_72C4E(pc)
00072360 2A4B                       		movea.l	a3,a5
00072362                            
00072362                            loc_72C22:
00072362 504F                       		addq.w	#8,sp
00072364 4E75                       		rts	
00072366                            ; ===========================================================================
00072366                            
00072366                            loc_72C26:				; XREF: loc_72A64
00072366 7000                       		moveq	#0,d0
00072368 101C                       		move.b	(a4)+,d0
0007236A 1B40 000B                  		move.b	d0,$B(a5)
0007236E 0815 0002                  		btst	#2,(a5)
00072372 6600 0000                  		bne.w	locret_72CAA
00072376 226E 0018                  		movea.l	$18(a6),a1
0007237A 4A2E 000E                  		tst.b	$E(a6)
0007237E 6700                       		beq.s	sub_72C4E
00072380 226D 0020                  		movea.l	$20(a5),a1
00072384 4A2E 000E                  		tst.b	$E(a6)
00072388 6B00                       		bmi.s	sub_72C4E
0007238A 226E 0020                  		movea.l	$20(a6),a1
0007238E                            
0007238E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007238E                            
0007238E                            
0007238E                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007238E 5340                       		subq.w	#1,d0
00072390 6B00                       		bmi.s	loc_72C5C
00072392 323C 0019                  		move.w	#$19,d1
00072396                            
00072396                            loc_72C56:
00072396 D2C1                       		adda.w	d1,a1
00072398 51C8 FFFC                  		dbf	d0,loc_72C56
0007239C                            
0007239C                            loc_72C5C:
0007239C 1219                       		move.b	(a1)+,d1
0007239E 1B41 001F                  		move.b	d1,$1F(a5)
000723A2 1801                       		move.b	d1,d4
000723A4 103C 00B0                  		move.b	#$B0,d0
000723A8 4EBA FAB8                  		jsr	sub_72722(pc)
000723AC 45FA 0000                  		lea	byte_72D18(pc),a2
000723B0 7613                       		moveq	#$13,d3
000723B2                            
000723B2                            loc_72C72:
000723B2 101A                       		move.b	(a2)+,d0
000723B4 1219                       		move.b	(a1)+,d1
000723B6 4EBA FAAA                  		jsr	sub_72722(pc)
000723BA 51CB FFF6                  		dbf	d3,loc_72C72
000723BE 7A03                       		moveq	#3,d5
000723C0 0244 0007                  		andi.w	#7,d4
000723C4 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000723C8 162D 0009                  		move.b	9(a5),d3
000723CC                            
000723CC                            loc_72C8C:
000723CC 101A                       		move.b	(a2)+,d0
000723CE 1219                       		move.b	(a1)+,d1
000723D0 E20C                       		lsr.b	#1,d4
000723D2 6400                       		bcc.s	loc_72C96
000723D4 D203                       		add.b	d3,d1
000723D6                            
000723D6                            loc_72C96:
000723D6 4EBA FA8A                  		jsr	sub_72722(pc)
000723DA 51CD FFF0                  		dbf	d5,loc_72C8C
000723DE 103C 00B4                  		move.b	#$B4,d0
000723E2 122D 000A                  		move.b	$A(a5),d1
000723E6 4EBA FA7A                  		jsr	sub_72722(pc)
000723EA                            
000723EA                            locret_72CAA:
000723EA 4E75                       		rts	
000723EC                            ; End of function sub_72C4E
000723EC                            
000723EC                            ; ===========================================================================
000723EC 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000723F4                            
000723F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000723F4                            
000723F4                            
000723F4                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000723F4 0815 0002                  		btst	#2,(a5)
000723F8 6600                       		bne.s	locret_72D16
000723FA 7000                       		moveq	#0,d0
000723FC 102D 000B                  		move.b	$B(a5),d0
00072400 226E 0018                  		movea.l	$18(a6),a1
00072404 4A2E 000E                  		tst.b	$E(a6)
00072408 6700                       		beq.s	loc_72CD8
0007240A 226E 0020                  		movea.l	$20(a6),a1
0007240E 4A2E 000E                  		tst.b	$E(a6)
00072412 6B00                       		bmi.s	loc_72CD8
00072414 226E 0020                  		movea.l	$20(a6),a1
00072418                            
00072418                            loc_72CD8:
00072418 5340                       		subq.w	#1,d0
0007241A 6B00                       		bmi.s	loc_72CE6
0007241C 323C 0019                  		move.w	#$19,d1
00072420                            
00072420                            loc_72CE0:
00072420 D2C1                       		adda.w	d1,a1
00072422 51C8 FFFC                  		dbf	d0,loc_72CE0
00072426                            
00072426                            loc_72CE6:
00072426 D2FC 0015                  		adda.w	#$15,a1
0007242A 45FA 0000                  		lea	byte_72D2C(pc),a2
0007242E 102D 001F                  		move.b	$1F(a5),d0
00072432 0240 0007                  		andi.w	#7,d0
00072436 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007243A 162D 0009                  		move.b	9(a5),d3
0007243E 6B00                       		bmi.s	locret_72D16
00072440 7A03                       		moveq	#3,d5
00072442                            
00072442                            loc_72D02:
00072442 101A                       		move.b	(a2)+,d0
00072444 1219                       		move.b	(a1)+,d1
00072446 E20C                       		lsr.b	#1,d4
00072448 6400                       		bcc.s	loc_72D12
0007244A D203                       		add.b	d3,d1
0007244C 6500                       		bcs.s	loc_72D12
0007244E 4EBA FA12                  		jsr	sub_72722(pc)
00072452                            
00072452                            loc_72D12:
00072452 51CD FFEE                  		dbf	d5,loc_72D02
00072456                            
00072456                            locret_72D16:
00072456 4E75                       		rts	
00072458                            ; End of function sub_72CB4
00072458                            
00072458                            ; ===========================================================================
00072458 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00072462 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007246C 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00072470                            ; ===========================================================================
00072470                            
00072470                            loc_72D30:				; XREF: loc_72A64
00072470 08D5 0003                  		bset	#3,(a5)
00072474 2B4C 0014                  		move.l	a4,$14(a5)
00072478 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007247C 1B5C 0019                  		move.b	(a4)+,$19(a5)
00072480 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00072484 101C                       		move.b	(a4)+,d0
00072486 E208                       		lsr.b	#1,d0
00072488 1B40 001B                  		move.b	d0,$1B(a5)
0007248C 426D 001C                  		clr.w	$1C(a5)
00072490 4E75                       		rts	
00072492                            ; ===========================================================================
00072492                            
00072492                            loc_72D52:				; XREF: loc_72A64
00072492 08D5 0003                  		bset	#3,(a5)
00072496 4E75                       		rts	
00072498                            ; ===========================================================================
00072498                            
00072498                            loc_72D58:				; XREF: loc_72A64
00072498 0895 0007                  		bclr	#7,(a5)
0007249C 0895 0004                  		bclr	#4,(a5)
000724A0 4A2D 0001                  		tst.b	1(a5)
000724A4 6B00                       		bmi.s	loc_72D74
000724A6 4A2E 0008                  		tst.b	8(a6)
000724AA 6B00 0000                  		bmi.w	loc_72E02
000724AE 4EBA F98E                  		jsr	sub_726FE(pc)
000724B2 6000                       		bra.s	loc_72D78
000724B4                            ; ===========================================================================
000724B4                            
000724B4                            loc_72D74:
000724B4 4EBA FC2A                  		jsr	sub_729A0(pc)
000724B8                            
000724B8                            loc_72D78:
000724B8 4A2E 000E                  		tst.b	$E(a6)
000724BC 6A00 0000                  		bpl.w	loc_72E02
000724C0 4216                       		clr.b	0(a6)
000724C2 7000                       		moveq	#0,d0
000724C4 102D 0001                  		move.b	1(a5),d0
000724C8 6B00                       		bmi.s	loc_72DCC
000724CA 41FA F546                  		lea	dword_722CC(pc),a0
000724CE 264D                       		movea.l	a5,a3
000724D0 0C00 0004                  		cmpi.b	#4,d0
000724D4 6600                       		bne.s	loc_72DA8
000724D6 4A2E 0340                  		tst.b	$340(a6)
000724DA 6A00                       		bpl.s	loc_72DA8
000724DC 4BEE 0340                  		lea	$340(a6),a5
000724E0 226E 0020                  		movea.l	$20(a6),a1
000724E4 6000                       		bra.s	loc_72DB8
000724E6                            ; ===========================================================================
000724E6                            
000724E6                            loc_72DA8:
000724E6 5500                       		subq.b	#2,d0
000724E8 E508                       		lsl.b	#2,d0
000724EA 2A70 0000                  		movea.l	(a0,d0.w),a5
000724EE 4A15                       		tst.b	(a5)
000724F0 6A00                       		bpl.s	loc_72DC8
000724F2 226E 0018                  		movea.l	$18(a6),a1
000724F6                            
000724F6                            loc_72DB8:
000724F6 0895 0002                  		bclr	#2,(a5)
000724FA 08D5 0001                  		bset	#1,(a5)
000724FE 102D 000B                  		move.b	$B(a5),d0
00072502 4EBA FE8A                  		jsr	sub_72C4E(pc)
00072506                            
00072506                            loc_72DC8:
00072506 2A4B                       		movea.l	a3,a5
00072508 6000                       		bra.s	loc_72E02
0007250A                            ; ===========================================================================
0007250A                            
0007250A                            loc_72DCC:
0007250A 41EE 0370                  		lea	$370(a6),a0
0007250E 4A10                       		tst.b	(a0)
00072510 6A00                       		bpl.s	loc_72DE0
00072512 0C00 00E0                  		cmpi.b	#$E0,d0
00072516 6700                       		beq.s	loc_72DEA
00072518 0C00 00C0                  		cmpi.b	#$C0,d0
0007251C 6700                       		beq.s	loc_72DEA
0007251E                            
0007251E                            loc_72DE0:
0007251E 41FA F4F2                  		lea	dword_722CC(pc),a0
00072522 E608                       		lsr.b	#3,d0
00072524 2070 0000                  		movea.l	(a0,d0.w),a0
00072528                            
00072528                            loc_72DEA:
00072528 0890 0002                  		bclr	#2,(a0)
0007252C 08D0 0001                  		bset	#1,(a0)
00072530 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00072536 6600                       		bne.s	loc_72E02
00072538 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00072540                            
00072540                            loc_72E02:
00072540 504F                       		addq.w	#8,sp
00072542 4E75                       		rts	
00072544                            ; ===========================================================================
00072544                            
00072544                            loc_72E06:				; XREF: loc_72A64
00072544 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007254A 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007254E 0815 0002                  		btst	#2,(a5)
00072552 6600                       		bne.s	locret_72E1E
00072554 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007255C                            
0007255C                            locret_72E1E:
0007255C 4E75                       		rts	
0007255E                            ; ===========================================================================
0007255E                            
0007255E                            loc_72E20:				; XREF: loc_72A64
0007255E 0895 0003                  		bclr	#3,(a5)
00072562 4E75                       		rts	
00072564                            ; ===========================================================================
00072564                            
00072564                            loc_72E26:				; XREF: loc_72A64
00072564 1B5C 000B                  		move.b	(a4)+,$B(a5)
00072568 4E75                       		rts	
0007256A                            ; ===========================================================================
0007256A                            
0007256A                            loc_72E2C:				; XREF: loc_72A64
0007256A 101C                       		move.b	(a4)+,d0
0007256C E148                       		lsl.w	#8,d0
0007256E 101C                       		move.b	(a4)+,d0
00072570 D8C0                       		adda.w	d0,a4
00072572 534C                       		subq.w	#1,a4
00072574 4E75                       		rts	
00072576                            ; ===========================================================================
00072576                            
00072576                            loc_72E38:				; XREF: loc_72A64
00072576 7000                       		moveq	#0,d0
00072578 101C                       		move.b	(a4)+,d0
0007257A 121C                       		move.b	(a4)+,d1
0007257C 4A35 0024                  		tst.b	$24(a5,d0.w)
00072580 6600                       		bne.s	loc_72E48
00072582 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00072586                            
00072586                            loc_72E48:
00072586 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007258A 66DE                       		bne.s	loc_72E2C
0007258C 544C                       		addq.w	#2,a4
0007258E 4E75                       		rts	
00072590                            ; ===========================================================================
00072590                            
00072590                            loc_72E52:				; XREF: loc_72A64
00072590 7000                       		moveq	#0,d0
00072592 102D 000D                  		move.b	$D(a5),d0
00072596 5900                       		subq.b	#4,d0
00072598 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007259C 1B40 000D                  		move.b	d0,$D(a5)
000725A0 60C8                       		bra.s	loc_72E2C
000725A2                            ; ===========================================================================
000725A2                            
000725A2                            loc_72E64:				; XREF: loc_72A64
000725A2 103C 0088                  		move.b	#$88,d0
000725A6 123C 000F                  		move.b	#$F,d1
000725AA 4EBA F8C2                  		jsr	sub_7272E(pc)
000725AE 103C 008C                  		move.b	#$8C,d0
000725B2 123C 000F                  		move.b	#$F,d1
000725B6 6000 F8B6                  		bra.w	sub_7272E
000725BA                            ; ===========================================================================
000725BA                            Kos_Z80:	incbin	sound\z80_1.bin
0007266A 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007266C 21                         		dc.b $21
0007266D 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007266F                            		incbin	sound\z80_2.bin
00073D1A                            		even
00073D1A                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007A51A                            		even
0007A51A                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00083DB8                            		even
00083DB8                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00084346                            		even
00084346                            Music84:	include	sound\music84.asm ; Star Light Act 1
00084346                            music84_Header:
00084346 =00000001                  smpsHeaderStartSong = 1
00084346 0000                       	smpsHeaderVoice     music84_Voices
00084348 0603                       	smpsHeaderChan      $06, $03
0008434A 0205                       	smpsHeaderTempo     $02, $05
0008434C                            
00084350 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00084354 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00084358 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008435C 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00084360 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00084364 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008436A 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00084370 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00084376                            
00084376                            ; FM1 Data
00084376                            music84_FM1:
00084376 E0C0                       	smpsPan             panCenter, $00
0008437A E107                       	smpsAlterNote       $07
0008437C 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00084380 E106                       	smpsAlterNote       $06
00084382 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00084386 E10B                       	smpsAlterNote       $0B
00084388 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008438E E10C                       	smpsAlterNote       $0C
00084390 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084393 E10B                       	smpsAlterNote       $0B
00084395 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084398 E109                       	smpsAlterNote       $09
0008439A E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008439F E108                       	smpsAlterNote       $08
000843A1 8001                       	dc.b	nRst, $01
000843A3 E10B                       	smpsAlterNote       $0B
000843A5 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000843AB E107                       	smpsAlterNote       $07
000843AD 9B03                       	dc.b	nD2, $03
000843AF                            
000843AF                            music84_Jump04:
000843AF E107                       	smpsAlterNote       $07
000843B1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000843B5 E10B                       	smpsAlterNote       $0B
000843B7 A202 8001                  	dc.b	nA2, $02, nRst, $01
000843BB E107                       	smpsAlterNote       $07
000843BD 9B03                       	dc.b	nD2, $03
000843BF E11A                       	smpsAlterNote       $1A
000843C1 A301                       	dc.b	nBb2, $01
000843C3 E1F2                       	smpsAlterNote       $F2
000843C5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000843C8 E1FF                       	smpsAlterNote       $FF
000843CA E701                       	dc.b	smpsNoAttack, $01
000843CC E111                       	smpsAlterNote       $11
000843CE E701                       	dc.b	smpsNoAttack, $01
000843D0 E106                       	smpsAlterNote       $06
000843D2 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000843D5 E107                       	smpsAlterNote       $07
000843D7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000843DB E108                       	smpsAlterNote       $08
000843DD 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000843E5 E109                       	smpsAlterNote       $09
000843E7 A003                       	dc.b	nG2, $03
000843E9 E10C                       	smpsAlterNote       $0C
000843EB A303 8001                  	dc.b	nBb2, $03, nRst, $01
000843EF E1FD                       	smpsAlterNote       $FD
000843F1 A401                       	dc.b	nB2, $01
000843F3 E109                       	smpsAlterNote       $09
000843F5 E701                       	dc.b	smpsNoAttack, $01
000843F7 E106                       	smpsAlterNote       $06
000843F9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000843FC E109                       	smpsAlterNote       $09
000843FE A007                       	dc.b	nG2, $07
00084400 E108                       	smpsAlterNote       $08
00084402 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00084406 E107                       	smpsAlterNote       $07
00084408 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008440E E10B                       	smpsAlterNote       $0B
00084410 A203 8001                  	dc.b	nA2, $03, nRst, $01
00084414 E107                       	smpsAlterNote       $07
00084416 9B03                       	dc.b	nD2, $03
00084418 E11A                       	smpsAlterNote       $1A
0008441A A301                       	dc.b	nBb2, $01
0008441C E1F9                       	smpsAlterNote       $F9
0008441E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084421 E107                       	smpsAlterNote       $07
00084423 E701                       	dc.b	smpsNoAttack, $01
00084425 E111                       	smpsAlterNote       $11
00084427 E701                       	dc.b	smpsNoAttack, $01
00084429 E106                       	smpsAlterNote       $06
0008442B E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00084430 E107                       	smpsAlterNote       $07
00084432 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008443A E1EC                       	smpsAlterNote       $EC
0008443C A101                       	dc.b	nAb2, $01
0008443E E108                       	smpsAlterNote       $08
00084440 E701                       	dc.b	smpsNoAttack, $01
00084442 E116                       	smpsAlterNote       $16
00084444 E701                       	dc.b	smpsNoAttack, $01
00084446 E1F5                       	smpsAlterNote       $F5
00084448 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008444B E10B                       	smpsAlterNote       $0B
0008444D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084451 E107                       	smpsAlterNote       $07
00084453 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00084459 E109                       	smpsAlterNote       $09
0008445B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008445F E10B                       	smpsAlterNote       $0B
00084461 9603                       	dc.b	nA1, $03
00084463 E107                       	smpsAlterNote       $07
00084465 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008446B E10B                       	smpsAlterNote       $0B
0008446D A203 8001                  	dc.b	nA2, $03, nRst, $01
00084471 E107                       	smpsAlterNote       $07
00084473 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084477 E11A                       	smpsAlterNote       $1A
00084479 A301                       	dc.b	nBb2, $01
0008447B E1F9                       	smpsAlterNote       $F9
0008447D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084480 E107                       	smpsAlterNote       $07
00084482 E701                       	dc.b	smpsNoAttack, $01
00084484 E1FB                       	smpsAlterNote       $FB
00084486 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084489 E106                       	smpsAlterNote       $06
0008448B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008448F E107                       	smpsAlterNote       $07
00084491 9B03                       	dc.b	nD2, $03
00084493 E108                       	smpsAlterNote       $08
00084495 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008449B E109                       	smpsAlterNote       $09
0008449D A002 8001                  	dc.b	nG2, $02, nRst, $01
000844A1 E10C                       	smpsAlterNote       $0C
000844A3 A303                       	dc.b	nBb2, $03
000844A5 E1F0                       	smpsAlterNote       $F0
000844A7 A401                       	dc.b	nB2, $01
000844A9 E1FD                       	smpsAlterNote       $FD
000844AB E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000844B0 E106                       	smpsAlterNote       $06
000844B2 8001                       	dc.b	nRst, $01
000844B4 E109                       	smpsAlterNote       $09
000844B6 A006 8001                  	dc.b	nG2, $06, nRst, $01
000844BA E108                       	smpsAlterNote       $08
000844BC 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000844C0 E107                       	smpsAlterNote       $07
000844C2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000844C8 E10B                       	smpsAlterNote       $0B
000844CA A203                       	dc.b	nA2, $03
000844CC E107                       	smpsAlterNote       $07
000844CE 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000844D2 E1F2                       	smpsAlterNote       $F2
000844D4 A401                       	dc.b	nB2, $01
000844D6 E1FF                       	smpsAlterNote       $FF
000844D8 E701                       	dc.b	smpsNoAttack, $01
000844DA E107                       	smpsAlterNote       $07
000844DC E701                       	dc.b	smpsNoAttack, $01
000844DE E1FB                       	smpsAlterNote       $FB
000844E0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000844E3 E106                       	smpsAlterNote       $06
000844E5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000844E9 E107                       	smpsAlterNote       $07
000844EB 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000844F5 E117                       	smpsAlterNote       $17
000844F7 A001                       	dc.b	nG2, $01
000844F9 E1FA                       	smpsAlterNote       $FA
000844FB E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000844FE E108                       	smpsAlterNote       $08
00084500 E701                       	dc.b	smpsNoAttack, $01
00084502 E1E7                       	smpsAlterNote       $E7
00084504 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084507 E103                       	smpsAlterNote       $03
00084509 E701                       	dc.b	smpsNoAttack, $01
0008450B E10B                       	smpsAlterNote       $0B
0008450D E702                       	dc.b	smpsNoAttack, $02
0008450F E107                       	smpsAlterNote       $07
00084511 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00084519 E106                       	smpsAlterNote       $06
0008451B 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00084521 E10C                       	smpsAlterNote       $0C
00084523 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00084529 E109                       	smpsAlterNote       $09
0008452B 9E03                       	dc.b	nF2, $03
0008452D E10C                       	smpsAlterNote       $0C
0008452F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084533 E1EA                       	smpsAlterNote       $EA
00084535 A201                       	dc.b	nA2, $01
00084537 E106                       	smpsAlterNote       $06
00084539 E701                       	dc.b	smpsNoAttack, $01
0008453B E1E2                       	smpsAlterNote       $E2
0008453D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084540 E1F0                       	smpsAlterNote       $F0
00084542 E701                       	dc.b	smpsNoAttack, $01
00084544 E10C                       	smpsAlterNote       $0C
00084546 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00084552 E116                       	smpsAlterNote       $16
00084554 9C01                       	dc.b	nEb2, $01
00084556 E105                       	smpsAlterNote       $05
00084558 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008455B E1F1                       	smpsAlterNote       $F1
0008455D E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084560 E1FF                       	smpsAlterNote       $FF
00084562 E701                       	dc.b	smpsNoAttack, $01
00084564 E109                       	smpsAlterNote       $09
00084566 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008456A E10C                       	smpsAlterNote       $0C
0008456C 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00084578 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008457E E109                       	smpsAlterNote       $09
00084580 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00084584 E10C                       	smpsAlterNote       $0C
00084586 9703                       	dc.b	nBb1, $03
00084588 E11A                       	smpsAlterNote       $1A
0008458A A101                       	dc.b	nAb2, $01
0008458C E1FB                       	smpsAlterNote       $FB
0008458E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084591 E10A                       	smpsAlterNote       $0A
00084593 E701                       	dc.b	smpsNoAttack, $01
00084595 E1E8                       	smpsAlterNote       $E8
00084597 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008459A E106                       	smpsAlterNote       $06
0008459C E701                       	dc.b	smpsNoAttack, $01
0008459E E10C                       	smpsAlterNote       $0C
000845A0 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000845AC E1F9                       	smpsAlterNote       $F9
000845AE 9D01                       	dc.b	nE2, $01
000845B0 E108                       	smpsAlterNote       $08
000845B2 E701                       	dc.b	smpsNoAttack, $01
000845B4 E1F6                       	smpsAlterNote       $F6
000845B6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000845B9 E109                       	smpsAlterNote       $09
000845BB E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000845BF E10C                       	smpsAlterNote       $0C
000845C1 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000845CD E108                       	smpsAlterNote       $08
000845CF 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000845D5 E106                       	smpsAlterNote       $06
000845D7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000845DB E108                       	smpsAlterNote       $08
000845DD 9D03                       	dc.b	nE2, $03
000845DF E1EB                       	smpsAlterNote       $EB
000845E1 A801                       	dc.b	nEb3, $01
000845E3 E109                       	smpsAlterNote       $09
000845E5 E701                       	dc.b	smpsNoAttack, $01
000845E7 E1FA                       	smpsAlterNote       $FA
000845E9 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000845EC E108                       	smpsAlterNote       $08
000845EE E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000845FA E1E9                       	smpsAlterNote       $E9
000845FC A301                       	dc.b	nBb2, $01
000845FE E107                       	smpsAlterNote       $07
00084600 E701                       	dc.b	smpsNoAttack, $01
00084602 E1F0                       	smpsAlterNote       $F0
00084604 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084607 E1F7                       	smpsAlterNote       $F7
00084609 E701                       	dc.b	smpsNoAttack, $01
0008460B E107                       	smpsAlterNote       $07
0008460D E701                       	dc.b	smpsNoAttack, $01
0008460F E106                       	smpsAlterNote       $06
00084611 E701                       	dc.b	smpsNoAttack, $01
00084613 E108                       	smpsAlterNote       $08
00084615 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008461B E106                       	smpsAlterNote       $06
0008461D A403 8001                  	dc.b	nB2, $03, nRst, $01
00084621 E108                       	smpsAlterNote       $08
00084623 9D03                       	dc.b	nE2, $03
00084625 E10B                       	smpsAlterNote       $0B
00084627 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008462F E108                       	smpsAlterNote       $08
00084631 9D03                       	dc.b	nE2, $03
00084633 E10B                       	smpsAlterNote       $0B
00084635 9603 8001                  	dc.b	nA1, $03, nRst, $01
00084639 E113                       	smpsAlterNote       $13
0008463B A001                       	dc.b	nG2, $01
0008463D E118                       	smpsAlterNote       $18
0008463F E701                       	dc.b	smpsNoAttack, $01
00084641 E1E9                       	smpsAlterNote       $E9
00084643 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00084646 E1F3                       	smpsAlterNote       $F3
00084648 E701                       	dc.b	smpsNoAttack, $01
0008464A E1FD                       	smpsAlterNote       $FD
0008464C E701                       	dc.b	smpsNoAttack, $01
0008464E E102                       	smpsAlterNote       $02
00084650 E701                       	dc.b	smpsNoAttack, $01
00084652 E107                       	smpsAlterNote       $07
00084654 8001                       	dc.b	nRst, $01
00084656 E10B                       	smpsAlterNote       $0B
00084658 9603                       	dc.b	nA1, $03
0008465A E10C                       	smpsAlterNote       $0C
0008465C 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00084662 E10B                       	smpsAlterNote       $0B
00084664 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00084670 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00084676 E107                       	smpsAlterNote       $07
00084678 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008467E E10B                       	smpsAlterNote       $0B
00084680 A203                       	dc.b	nA2, $03
00084682 E107                       	smpsAlterNote       $07
00084684 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084688 E1F2                       	smpsAlterNote       $F2
0008468A A401                       	dc.b	nB2, $01
0008468C E1FF                       	smpsAlterNote       $FF
0008468E E701                       	dc.b	smpsNoAttack, $01
00084690 E107                       	smpsAlterNote       $07
00084692 E701                       	dc.b	smpsNoAttack, $01
00084694 E1FB                       	smpsAlterNote       $FB
00084696 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084699 E106                       	smpsAlterNote       $06
0008469B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008469F E107                       	smpsAlterNote       $07
000846A1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000846A5 E108                       	smpsAlterNote       $08
000846A7 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000846AD E109                       	smpsAlterNote       $09
000846AF A003 8001                  	dc.b	nG2, $03, nRst, $01
000846B3 E10C                       	smpsAlterNote       $0C
000846B5 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000846B9 E1F0                       	smpsAlterNote       $F0
000846BB A401                       	dc.b	nB2, $01
000846BD E109                       	smpsAlterNote       $09
000846BF E701                       	dc.b	smpsNoAttack, $01
000846C1 E106                       	smpsAlterNote       $06
000846C3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000846C6 E109                       	smpsAlterNote       $09
000846C8 A007                       	dc.b	nG2, $07
000846CA E108                       	smpsAlterNote       $08
000846CC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000846D0 E107                       	smpsAlterNote       $07
000846D2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000846D8 E10B                       	smpsAlterNote       $0B
000846DA A202 8001                  	dc.b	nA2, $02, nRst, $01
000846DE E107                       	smpsAlterNote       $07
000846E0 9B03                       	dc.b	nD2, $03
000846E2 E11A                       	smpsAlterNote       $1A
000846E4 A301                       	dc.b	nBb2, $01
000846E6 E1F2                       	smpsAlterNote       $F2
000846E8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000846EB E1FF                       	smpsAlterNote       $FF
000846ED E701                       	dc.b	smpsNoAttack, $01
000846EF E111                       	smpsAlterNote       $11
000846F1 E701                       	dc.b	smpsNoAttack, $01
000846F3 E106                       	smpsAlterNote       $06
000846F5 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000846F8 E107                       	smpsAlterNote       $07
000846FA 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00084706 E117                       	smpsAlterNote       $17
00084708 A001                       	dc.b	nG2, $01
0008470A E1FA                       	smpsAlterNote       $FA
0008470C E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008470F E116                       	smpsAlterNote       $16
00084711 E701                       	dc.b	smpsNoAttack, $01
00084713 E1F5                       	smpsAlterNote       $F5
00084715 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084718 E103                       	smpsAlterNote       $03
0008471A E701                       	dc.b	smpsNoAttack, $01
0008471C E10B                       	smpsAlterNote       $0B
0008471E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084722 E107                       	smpsAlterNote       $07
00084724 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008472A E109                       	smpsAlterNote       $09
0008472C 9E03                       	dc.b	nF2, $03
0008472E E10B                       	smpsAlterNote       $0B
00084730 9603 8001                  	dc.b	nA1, $03, nRst, $01
00084734 E107                       	smpsAlterNote       $07
00084736 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008473C E10B                       	smpsAlterNote       $0B
0008473E A203 8001                  	dc.b	nA2, $03, nRst, $01
00084742 E107                       	smpsAlterNote       $07
00084744 9B03                       	dc.b	nD2, $03
00084746 E11A                       	smpsAlterNote       $1A
00084748 A301                       	dc.b	nBb2, $01
0008474A E1F9                       	smpsAlterNote       $F9
0008474C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008474F E107                       	smpsAlterNote       $07
00084751 E701                       	dc.b	smpsNoAttack, $01
00084753 E111                       	smpsAlterNote       $11
00084755 E701                       	dc.b	smpsNoAttack, $01
00084757 E106                       	smpsAlterNote       $06
00084759 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008475E E107                       	smpsAlterNote       $07
00084760 9B03                       	dc.b	nD2, $03
00084762 E108                       	smpsAlterNote       $08
00084764 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008476A E109                       	smpsAlterNote       $09
0008476C A003                       	dc.b	nG2, $03
0008476E E10C                       	smpsAlterNote       $0C
00084770 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084774 E1FD                       	smpsAlterNote       $FD
00084776 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008477B E106                       	smpsAlterNote       $06
0008477D 8001                       	dc.b	nRst, $01
0008477F E109                       	smpsAlterNote       $09
00084781 A006 8001                  	dc.b	nG2, $06, nRst, $01
00084785 E108                       	smpsAlterNote       $08
00084787 9C03                       	dc.b	nEb2, $03
00084789 E107                       	smpsAlterNote       $07
0008478B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00084791 E10B                       	smpsAlterNote       $0B
00084793 A203 8001                  	dc.b	nA2, $03, nRst, $01
00084797 E107                       	smpsAlterNote       $07
00084799 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008479D E11A                       	smpsAlterNote       $1A
0008479F A301                       	dc.b	nBb2, $01
000847A1 E1F9                       	smpsAlterNote       $F9
000847A3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000847A6 E107                       	smpsAlterNote       $07
000847A8 E701                       	dc.b	smpsNoAttack, $01
000847AA E1FB                       	smpsAlterNote       $FB
000847AC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000847AF E106                       	smpsAlterNote       $06
000847B1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000847B5 E107                       	smpsAlterNote       $07
000847B7 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000847BF E1EC                       	smpsAlterNote       $EC
000847C1 A101                       	dc.b	nAb2, $01
000847C3 E108                       	smpsAlterNote       $08
000847C5 E701                       	dc.b	smpsNoAttack, $01
000847C7 E1E7                       	smpsAlterNote       $E7
000847C9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000847CC E1F5                       	smpsAlterNote       $F5
000847CE E701                       	dc.b	smpsNoAttack, $01
000847D0 E10B                       	smpsAlterNote       $0B
000847D2 E702                       	dc.b	smpsNoAttack, $02
000847D4 E107                       	smpsAlterNote       $07
000847D6 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000847DC E106                       	smpsAlterNote       $06
000847DE 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000847E4 E10C                       	smpsAlterNote       $0C
000847E6 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000847EE E109                       	smpsAlterNote       $09
000847F0 9E03                       	dc.b	nF2, $03
000847F2 E10C                       	smpsAlterNote       $0C
000847F4 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000847F8 E1EA                       	smpsAlterNote       $EA
000847FA A201                       	dc.b	nA2, $01
000847FC E106                       	smpsAlterNote       $06
000847FE E701                       	dc.b	smpsNoAttack, $01
00084800 E114                       	smpsAlterNote       $14
00084802 E701                       	dc.b	smpsNoAttack, $01
00084804 E1F0                       	smpsAlterNote       $F0
00084806 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084809 E10C                       	smpsAlterNote       $0C
0008480B E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00084817 9703                       	dc.b	nBb1, $03
00084819 E116                       	smpsAlterNote       $16
0008481B 9C01                       	dc.b	nEb2, $01
0008481D E105                       	smpsAlterNote       $05
0008481F E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084822 E113                       	smpsAlterNote       $13
00084824 E701                       	dc.b	smpsNoAttack, $01
00084826 E1FF                       	smpsAlterNote       $FF
00084828 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008482B E109                       	smpsAlterNote       $09
0008482D E703                       	dc.b	smpsNoAttack, $03
0008482F E10C                       	smpsAlterNote       $0C
00084831 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008483D 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00084845 E109                       	smpsAlterNote       $09
00084847 9E03                       	dc.b	nF2, $03
00084849 E10C                       	smpsAlterNote       $0C
0008484B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008484F E1EC                       	smpsAlterNote       $EC
00084851 A201                       	dc.b	nA2, $01
00084853 E10A                       	smpsAlterNote       $0A
00084855 E701                       	dc.b	smpsNoAttack, $01
00084857 E1E8                       	smpsAlterNote       $E8
00084859 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008485C E1F7                       	smpsAlterNote       $F7
0008485E E701                       	dc.b	smpsNoAttack, $01
00084860 E10C                       	smpsAlterNote       $0C
00084862 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008486E E1EA                       	smpsAlterNote       $EA
00084870 9D01                       	dc.b	nE2, $01
00084872 E108                       	smpsAlterNote       $08
00084874 E701                       	dc.b	smpsNoAttack, $01
00084876 E1F6                       	smpsAlterNote       $F6
00084878 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008487B E105                       	smpsAlterNote       $05
0008487D E701                       	dc.b	smpsNoAttack, $01
0008487F E109                       	smpsAlterNote       $09
00084881 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084885 E10C                       	smpsAlterNote       $0C
00084887 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00084893 E108                       	smpsAlterNote       $08
00084895 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008489B E106                       	smpsAlterNote       $06
0008489D A403 8001                  	dc.b	nB2, $03, nRst, $01
000848A1 E108                       	smpsAlterNote       $08
000848A3 9D03                       	dc.b	nE2, $03
000848A5 E1EB                       	smpsAlterNote       $EB
000848A7 A801                       	dc.b	nEb3, $01
000848A9 E109                       	smpsAlterNote       $09
000848AB E701                       	dc.b	smpsNoAttack, $01
000848AD E1EB                       	smpsAlterNote       $EB
000848AF E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000848B2 E108                       	smpsAlterNote       $08
000848B4 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000848C0 E1E9                       	smpsAlterNote       $E9
000848C2 A301                       	dc.b	nBb2, $01
000848C4 E1F8                       	smpsAlterNote       $F8
000848C6 E701                       	dc.b	smpsNoAttack, $01
000848C8 E116                       	smpsAlterNote       $16
000848CA E701                       	dc.b	smpsNoAttack, $01
000848CC E1F7                       	smpsAlterNote       $F7
000848CE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000848D1 E107                       	smpsAlterNote       $07
000848D3 E701                       	dc.b	smpsNoAttack, $01
000848D5 E1EE                       	smpsAlterNote       $EE
000848D7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000848DA E106                       	smpsAlterNote       $06
000848DC 8001                       	dc.b	nRst, $01
000848DE E108                       	smpsAlterNote       $08
000848E0 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000848E6 E106                       	smpsAlterNote       $06
000848E8 A402 8001                  	dc.b	nB2, $02, nRst, $01
000848EC E108                       	smpsAlterNote       $08
000848EE 9D03                       	dc.b	nE2, $03
000848F0 E10B                       	smpsAlterNote       $0B
000848F2 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000848F8 E108                       	smpsAlterNote       $08
000848FA 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000848FE E10B                       	smpsAlterNote       $0B
00084900 9603                       	dc.b	nA1, $03
00084902 E10E                       	smpsAlterNote       $0E
00084904 A001                       	dc.b	nG2, $01
00084906 E118                       	smpsAlterNote       $18
00084908 E701                       	dc.b	smpsNoAttack, $01
0008490A E1E9                       	smpsAlterNote       $E9
0008490C E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008490F E1EE                       	smpsAlterNote       $EE
00084911 E701                       	dc.b	smpsNoAttack, $01
00084913 E1F8                       	smpsAlterNote       $F8
00084915 E701                       	dc.b	smpsNoAttack, $01
00084917 E102                       	smpsAlterNote       $02
00084919 E701                       	dc.b	smpsNoAttack, $01
0008491B E107                       	smpsAlterNote       $07
0008491D 8001                       	dc.b	nRst, $01
0008491F E10B                       	smpsAlterNote       $0B
00084921 9603                       	dc.b	nA1, $03
00084923 E10C                       	smpsAlterNote       $0C
00084925 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008492B E10B                       	smpsAlterNote       $0B
0008492D 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00084939 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008493D E10C                       	smpsAlterNote       $0C
0008493F 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008494B 8001                       	dc.b	nRst, $01
0008494D E10B                       	smpsAlterNote       $0B
0008494F 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00084957 E107                       	smpsAlterNote       $07
00084959 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008495D E10B                       	smpsAlterNote       $0B
0008495F 9603                       	dc.b	nA1, $03
00084961 E109                       	smpsAlterNote       $09
00084963 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00084967 E108                       	smpsAlterNote       $08
00084969 9D06                       	dc.b	nE2, $06
0008496B E107                       	smpsAlterNote       $07
0008496D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084971 E106                       	smpsAlterNote       $06
00084973 9903                       	dc.b	nC2, $03
00084975 E10C                       	smpsAlterNote       $0C
00084977 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008497B E10B                       	smpsAlterNote       $0B
0008497D 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00084989 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084993 E10C                       	smpsAlterNote       $0C
00084995 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000849A1 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000849AD 8001                       	dc.b	nRst, $01
000849AF E10B                       	smpsAlterNote       $0B
000849B1 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000849BD 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000849C9 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000849D5 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000849DF E10C                       	smpsAlterNote       $0C
000849E1 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000849ED E10B                       	smpsAlterNote       $0B
000849EF 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000849F7 E107                       	smpsAlterNote       $07
000849F9 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000849FD E10B                       	smpsAlterNote       $0B
000849FF 9603                       	dc.b	nA1, $03
00084A01 E109                       	smpsAlterNote       $09
00084A03 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00084A07 E108                       	smpsAlterNote       $08
00084A09 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00084A0D E107                       	smpsAlterNote       $07
00084A0F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084A13 E106                       	smpsAlterNote       $06
00084A15 9903                       	dc.b	nC2, $03
00084A17 E10C                       	smpsAlterNote       $0C
00084A19 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084A1D E10B                       	smpsAlterNote       $0B
00084A1F 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084A2B 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084A35 E10C                       	smpsAlterNote       $0C
00084A37 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00084A43 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00084A4F 8001                       	dc.b	nRst, $01
00084A51 E10B                       	smpsAlterNote       $0B
00084A53 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084A5F 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084A69 E10C                       	smpsAlterNote       $0C
00084A6B 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00084A77 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00084A83 E10B                       	smpsAlterNote       $0B
00084A85 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084A91 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00084A9B E10C                       	smpsAlterNote       $0C
00084A9D 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00084AA9 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00084AB5 E10B                       	smpsAlterNote       $0B
00084AB7 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00084AC3 8001                       	dc.b	nRst, $01
00084AC5 E1EC                       	smpsAlterNote       $EC
00084AC7 A101                       	dc.b	nAb2, $01
00084AC9 E1FA                       	smpsAlterNote       $FA
00084ACB E701                       	dc.b	smpsNoAttack, $01
00084ACD E116                       	smpsAlterNote       $16
00084ACF E701                       	dc.b	smpsNoAttack, $01
00084AD1 E1F5                       	smpsAlterNote       $F5
00084AD3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084AD6 E10B                       	smpsAlterNote       $0B
00084AD8 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00084AE4 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00084AF0 E107                       	smpsAlterNote       $07
00084AF2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084AF8 E10B                       	smpsAlterNote       $0B
00084AFA A203                       	dc.b	nA2, $03
00084AFC E107                       	smpsAlterNote       $07
00084AFE 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084B02 E1F3                       	smpsAlterNote       $F3
00084B04 A401                       	dc.b	nB2, $01
00084B06 E102                       	smpsAlterNote       $02
00084B08 E701                       	dc.b	smpsNoAttack, $01
00084B0A E109                       	smpsAlterNote       $09
00084B0C E701                       	dc.b	smpsNoAttack, $01
00084B0E E102                       	smpsAlterNote       $02
00084B10 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084B13 E106                       	smpsAlterNote       $06
00084B15 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084B19 E107                       	smpsAlterNote       $07
00084B1B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084B1F E108                       	smpsAlterNote       $08
00084B21 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00084B27 E109                       	smpsAlterNote       $09
00084B29 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084B2D E1F2                       	smpsAlterNote       $F2
00084B2F A401                       	dc.b	nB2, $01
00084B31 E1FF                       	smpsAlterNote       $FF
00084B33 E701                       	dc.b	smpsNoAttack, $01
00084B35 E111                       	smpsAlterNote       $11
00084B37 E701                       	dc.b	smpsNoAttack, $01
00084B39 E1FB                       	smpsAlterNote       $FB
00084B3B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084B3E E106                       	smpsAlterNote       $06
00084B40 E702                       	dc.b	smpsNoAttack, $02
00084B42 E109                       	smpsAlterNote       $09
00084B44 A007                       	dc.b	nG2, $07
00084B46 E108                       	smpsAlterNote       $08
00084B48 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00084B4C E107                       	smpsAlterNote       $07
00084B4E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084B54 E10B                       	smpsAlterNote       $0B
00084B56 A202 8001                  	dc.b	nA2, $02, nRst, $01
00084B5A E107                       	smpsAlterNote       $07
00084B5C 9B03                       	dc.b	nD2, $03
00084B5E E11A                       	smpsAlterNote       $1A
00084B60 A301                       	dc.b	nBb2, $01
00084B62 E1F2                       	smpsAlterNote       $F2
00084B64 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084B67 E1FF                       	smpsAlterNote       $FF
00084B69 E701                       	dc.b	smpsNoAttack, $01
00084B6B E111                       	smpsAlterNote       $11
00084B6D E701                       	dc.b	smpsNoAttack, $01
00084B6F E106                       	smpsAlterNote       $06
00084B71 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084B74 E107                       	smpsAlterNote       $07
00084B76 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00084B82 E117                       	smpsAlterNote       $17
00084B84 A001                       	dc.b	nG2, $01
00084B86 E1FA                       	smpsAlterNote       $FA
00084B88 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00084B8B E116                       	smpsAlterNote       $16
00084B8D E701                       	dc.b	smpsNoAttack, $01
00084B8F E1F5                       	smpsAlterNote       $F5
00084B91 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084B94 E103                       	smpsAlterNote       $03
00084B96 E701                       	dc.b	smpsNoAttack, $01
00084B98 E10B                       	smpsAlterNote       $0B
00084B9A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084B9E E107                       	smpsAlterNote       $07
00084BA0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084BA6 E109                       	smpsAlterNote       $09
00084BA8 9E03                       	dc.b	nF2, $03
00084BAA E10B                       	smpsAlterNote       $0B
00084BAC 9603 8001                  	dc.b	nA1, $03, nRst, $01
00084BB0 E107                       	smpsAlterNote       $07
00084BB2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00084BB8 E10B                       	smpsAlterNote       $0B
00084BBA A203 8001                  	dc.b	nA2, $03, nRst, $01
00084BBE E107                       	smpsAlterNote       $07
00084BC0 9B03                       	dc.b	nD2, $03
00084BC2 E11A                       	smpsAlterNote       $1A
00084BC4 A301                       	dc.b	nBb2, $01
00084BC6 E1F9                       	smpsAlterNote       $F9
00084BC8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084BCB E1FF                       	smpsAlterNote       $FF
00084BCD E701                       	dc.b	smpsNoAttack, $01
00084BCF E111                       	smpsAlterNote       $11
00084BD1 E701                       	dc.b	smpsNoAttack, $01
00084BD3 E106                       	smpsAlterNote       $06
00084BD5 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084BD8 E107                       	smpsAlterNote       $07
00084BDA 9B03                       	dc.b	nD2, $03
00084BDC E108                       	smpsAlterNote       $08
00084BDE 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00084BE4 E109                       	smpsAlterNote       $09
00084BE6 A003                       	dc.b	nG2, $03
00084BE8 E1F0                       	smpsAlterNote       $F0
00084BEA A501                       	dc.b	nC3, $01
00084BEC E106                       	smpsAlterNote       $06
00084BEE E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00084BF2 E109                       	smpsAlterNote       $09
00084BF4 A006 8001                  	dc.b	nG2, $06, nRst, $01
00084BF8 E108                       	smpsAlterNote       $08
00084BFA 9C03                       	dc.b	nEb2, $03
00084BFC E107                       	smpsAlterNote       $07
00084BFE 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00084C04 E10B                       	smpsAlterNote       $0B
00084C06 A203 8001                  	dc.b	nA2, $03, nRst, $01
00084C0A E107                       	smpsAlterNote       $07
00084C0C 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084C10 E11A                       	smpsAlterNote       $1A
00084C12 A301                       	dc.b	nBb2, $01
00084C14 E1F9                       	smpsAlterNote       $F9
00084C16 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084C19 E107                       	smpsAlterNote       $07
00084C1B E701                       	dc.b	smpsNoAttack, $01
00084C1D E1FB                       	smpsAlterNote       $FB
00084C1F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084C22 E106                       	smpsAlterNote       $06
00084C24 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084C28 E107                       	smpsAlterNote       $07
00084C2A 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00084C32 E1EC                       	smpsAlterNote       $EC
00084C34 A101                       	dc.b	nAb2, $01
00084C36 E108                       	smpsAlterNote       $08
00084C38 E701                       	dc.b	smpsNoAttack, $01
00084C3A E1E7                       	smpsAlterNote       $E7
00084C3C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084C3F E1F5                       	smpsAlterNote       $F5
00084C41 E701                       	dc.b	smpsNoAttack, $01
00084C43 E10B                       	smpsAlterNote       $0B
00084C45 E702                       	dc.b	smpsNoAttack, $02
00084C47 E107                       	smpsAlterNote       $07
00084C49 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00084C4F E106                       	smpsAlterNote       $06
00084C51 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00084C57 E10C                       	smpsAlterNote       $0C
00084C59 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00084C61 E109                       	smpsAlterNote       $09
00084C63 9E03                       	dc.b	nF2, $03
00084C65 E10C                       	smpsAlterNote       $0C
00084C67 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084C6B E1EA                       	smpsAlterNote       $EA
00084C6D A201                       	dc.b	nA2, $01
00084C6F E106                       	smpsAlterNote       $06
00084C71 E701                       	dc.b	smpsNoAttack, $01
00084C73 E114                       	smpsAlterNote       $14
00084C75 E701                       	dc.b	smpsNoAttack, $01
00084C77 E1F0                       	smpsAlterNote       $F0
00084C79 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084C7C E10C                       	smpsAlterNote       $0C
00084C7E E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00084C8A 9703                       	dc.b	nBb1, $03
00084C8C E116                       	smpsAlterNote       $16
00084C8E 9C01                       	dc.b	nEb2, $01
00084C90 E105                       	smpsAlterNote       $05
00084C92 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084C95 E113                       	smpsAlterNote       $13
00084C97 E701                       	dc.b	smpsNoAttack, $01
00084C99 E1FF                       	smpsAlterNote       $FF
00084C9B E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084C9E E109                       	smpsAlterNote       $09
00084CA0 E703                       	dc.b	smpsNoAttack, $03
00084CA2 E10C                       	smpsAlterNote       $0C
00084CA4 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00084CB0 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00084CB8 E109                       	smpsAlterNote       $09
00084CBA 9E03                       	dc.b	nF2, $03
00084CBC E10C                       	smpsAlterNote       $0C
00084CBE 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084CC2 E1EA                       	smpsAlterNote       $EA
00084CC4 A201                       	dc.b	nA2, $01
00084CC6 E106                       	smpsAlterNote       $06
00084CC8 E701                       	dc.b	smpsNoAttack, $01
00084CCA E1E2                       	smpsAlterNote       $E2
00084CCC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084CCF E1F0                       	smpsAlterNote       $F0
00084CD1 E701                       	dc.b	smpsNoAttack, $01
00084CD3 E10C                       	smpsAlterNote       $0C
00084CD5 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00084CE1 E116                       	smpsAlterNote       $16
00084CE3 9C01                       	dc.b	nEb2, $01
00084CE5 E105                       	smpsAlterNote       $05
00084CE7 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084CEA E1F1                       	smpsAlterNote       $F1
00084CEC E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084CEF E1FF                       	smpsAlterNote       $FF
00084CF1 E701                       	dc.b	smpsNoAttack, $01
00084CF3 E109                       	smpsAlterNote       $09
00084CF5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084CF9 E10C                       	smpsAlterNote       $0C
00084CFB 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00084D07 E106                       	smpsAlterNote       $06
00084D09 9903                       	dc.b	nC2, $03
00084D0B E107                       	smpsAlterNote       $07
00084D0D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084D11 E109                       	smpsAlterNote       $09
00084D13 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00084D19 E107                       	smpsAlterNote       $07
00084D1B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084D1F E108                       	smpsAlterNote       $08
00084D21 9D03                       	dc.b	nE2, $03
00084D23 E10B                       	smpsAlterNote       $0B
00084D25 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00084D2B E109                       	smpsAlterNote       $09
00084D2D 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00084D33 E10C                       	smpsAlterNote       $0C
00084D35 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00084D3B E106                       	smpsAlterNote       $06
00084D3D 9903                       	dc.b	nC2, $03
00084D3F E11A                       	smpsAlterNote       $1A
00084D41 A301                       	dc.b	nBb2, $01
00084D43 E1F9                       	smpsAlterNote       $F9
00084D45 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084D48 E1FF                       	smpsAlterNote       $FF
00084D4A E701                       	dc.b	smpsNoAttack, $01
00084D4C E111                       	smpsAlterNote       $11
00084D4E E701                       	dc.b	smpsNoAttack, $01
00084D50 E106                       	smpsAlterNote       $06
00084D52 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00084D59 E109                       	smpsAlterNote       $09
00084D5B A003                       	dc.b	nG2, $03
00084D5D E106                       	smpsAlterNote       $06
00084D5F 9907                       	dc.b	nC2, $07
00084D61 E107                       	smpsAlterNote       $07
00084D63 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00084D6B E10B                       	smpsAlterNote       $0B
00084D6D A203                       	dc.b	nA2, $03
00084D6F E107                       	smpsAlterNote       $07
00084D71 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084D75 E1F2                       	smpsAlterNote       $F2
00084D77 A401                       	dc.b	nB2, $01
00084D79 E1F9                       	smpsAlterNote       $F9
00084D7B E701                       	dc.b	smpsNoAttack, $01
00084D7D E107                       	smpsAlterNote       $07
00084D7F E701                       	dc.b	smpsNoAttack, $01
00084D81 E1FB                       	smpsAlterNote       $FB
00084D83 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084D86 E106                       	smpsAlterNote       $06
00084D88 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084D8C E107                       	smpsAlterNote       $07
00084D8E 9B03                       	dc.b	nD2, $03
00084D90 E108                       	smpsAlterNote       $08
00084D92 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00084D98 E109                       	smpsAlterNote       $09
00084D9A A003 8001                  	dc.b	nG2, $03, nRst, $01
00084D9E E1F2                       	smpsAlterNote       $F2
00084DA0 A401                       	dc.b	nB2, $01
00084DA2 E1F9                       	smpsAlterNote       $F9
00084DA4 E701                       	dc.b	smpsNoAttack, $01
00084DA6 E107                       	smpsAlterNote       $07
00084DA8 E701                       	dc.b	smpsNoAttack, $01
00084DAA E1FB                       	smpsAlterNote       $FB
00084DAC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084DAF E106                       	smpsAlterNote       $06
00084DB1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084DB5 E108                       	smpsAlterNote       $08
00084DB7 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00084DBB E10C                       	smpsAlterNote       $0C
00084DBD A302 8001                  	dc.b	nBb2, $02, nRst, $01
00084DC1 E107                       	smpsAlterNote       $07
00084DC3 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084DC9 E10B                       	smpsAlterNote       $0B
00084DCB A203                       	dc.b	nA2, $03
00084DCD E107                       	smpsAlterNote       $07
00084DCF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084DD3 E1F2                       	smpsAlterNote       $F2
00084DD5 A401                       	dc.b	nB2, $01
00084DD7 E1FF                       	smpsAlterNote       $FF
00084DD9 E701                       	dc.b	smpsNoAttack, $01
00084DDB E107                       	smpsAlterNote       $07
00084DDD E701                       	dc.b	smpsNoAttack, $01
00084DDF E1FB                       	smpsAlterNote       $FB
00084DE1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084DE4 E106                       	smpsAlterNote       $06
00084DE6 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084DEA E107                       	smpsAlterNote       $07
00084DEC 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084DF0 E108                       	smpsAlterNote       $08
00084DF2 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00084DF8 E109                       	smpsAlterNote       $09
00084DFA A003 8001                  	dc.b	nG2, $03, nRst, $01
00084DFE E1F2                       	smpsAlterNote       $F2
00084E00 A401                       	dc.b	nB2, $01
00084E02 E1FF                       	smpsAlterNote       $FF
00084E04 E701                       	dc.b	smpsNoAttack, $01
00084E06 E111                       	smpsAlterNote       $11
00084E08 E701                       	dc.b	smpsNoAttack, $01
00084E0A E1FB                       	smpsAlterNote       $FB
00084E0C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084E0F E106                       	smpsAlterNote       $06
00084E11 E702                       	dc.b	smpsNoAttack, $02
00084E13 E108                       	smpsAlterNote       $08
00084E15 9C07                       	dc.b	nEb2, $07
00084E17 E10C                       	smpsAlterNote       $0C
00084E19 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084E1D E107                       	smpsAlterNote       $07
00084E1F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084E25 E10B                       	smpsAlterNote       $0B
00084E27 A202 8001                  	dc.b	nA2, $02, nRst, $01
00084E2B E107                       	smpsAlterNote       $07
00084E2D 9B03                       	dc.b	nD2, $03
00084E2F E11A                       	smpsAlterNote       $1A
00084E31 A301                       	dc.b	nBb2, $01
00084E33 E1F2                       	smpsAlterNote       $F2
00084E35 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084E38 E1FF                       	smpsAlterNote       $FF
00084E3A E701                       	dc.b	smpsNoAttack, $01
00084E3C E111                       	smpsAlterNote       $11
00084E3E E701                       	dc.b	smpsNoAttack, $01
00084E40 E106                       	smpsAlterNote       $06
00084E42 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084E45 E107                       	smpsAlterNote       $07
00084E47 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084E4B E108                       	smpsAlterNote       $08
00084E4D 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00084E55 E109                       	smpsAlterNote       $09
00084E57 A003                       	dc.b	nG2, $03
00084E59 E11A                       	smpsAlterNote       $1A
00084E5B A301                       	dc.b	nBb2, $01
00084E5D E1F2                       	smpsAlterNote       $F2
00084E5F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084E62 E1FF                       	smpsAlterNote       $FF
00084E64 E701                       	dc.b	smpsNoAttack, $01
00084E66 E111                       	smpsAlterNote       $11
00084E68 E701                       	dc.b	smpsNoAttack, $01
00084E6A E106                       	smpsAlterNote       $06
00084E6C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084E6F E108                       	smpsAlterNote       $08
00084E71 9C07                       	dc.b	nEb2, $07
00084E73 E10C                       	smpsAlterNote       $0C
00084E75 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084E79 E107                       	smpsAlterNote       $07
00084E7B 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00084E87 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00084E91 E108                       	smpsAlterNote       $08
00084E93 9C06                       	dc.b	nEb2, $06
00084E95 E10C                       	smpsAlterNote       $0C
00084E97 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084E9B E108                       	smpsAlterNote       $08
00084E9D 9C03                       	dc.b	nEb2, $03
00084E9F E109                       	smpsAlterNote       $09
00084EA1 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084EA5 E10C                       	smpsAlterNote       $0C
00084EA7 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00084EAF E107                       	smpsAlterNote       $07
00084EB1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084EB5 F6F4 F8                    	smpsJump            music84_Jump04
00084EB8                            
00084EB8                            ; FM2 Data
00084EB8                            music84_FM2:
00084EB8 E0C0                       	smpsPan             panCenter, $00
00084EBC E10B                       	smpsAlterNote       $0B
00084EBE C603 8007                  	dc.b	nA5, $03, nRst, $07
00084EC2 E109                       	smpsAlterNote       $09
00084EC4 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00084EC8 E108                       	smpsAlterNote       $08
00084ECA C103 8004                  	dc.b	nE5, $03, nRst, $04
00084ED0 E080                       	smpsPan             panLeft, $00
00084ED2 E10C                       	smpsAlterNote       $0C
00084ED4 E6F9                       	smpsAlterVol        $F9
00084ED6 C703                       	dc.b	nBb5, $03
00084ED8 E10B                       	smpsAlterNote       $0B
00084EDA C603 8001                  	dc.b	nA5, $03, nRst, $01
00084EDE E109                       	smpsAlterNote       $09
00084EE0 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00084EE6 E108                       	smpsAlterNote       $08
00084EE8 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084EEC E106                       	smpsAlterNote       $06
00084EEE BD03                       	dc.b	nC5, $03
00084EF0 E10B                       	smpsAlterNote       $0B
00084EF2 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00084EF8 E0C0                       	smpsPan             panCenter, $00
00084EFA E107                       	smpsAlterNote       $07
00084EFC E606                       	smpsAlterVol        $06
00084EFE BF03                       	dc.b	nD5, $03
00084F00                            
00084F00                            music84_Jump03:
00084F00 E108                       	smpsAlterNote       $08
00084F02 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084F06 E109                       	smpsAlterNote       $09
00084F08 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00084F0E E10B                       	smpsAlterNote       $0B
00084F10 C607                       	dc.b	nA5, $07
00084F12 E107                       	smpsAlterNote       $07
00084F14 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084F18 E106                       	smpsAlterNote       $06
00084F1A C90D                       	dc.b	nC6, $0D
00084F1C E100                       	smpsAlterNote       $00
00084F1E E701                       	dc.b	smpsNoAttack, $01
00084F20 E1FF                       	smpsAlterNote       $FF
00084F22 E701                       	dc.b	smpsNoAttack, $01
00084F24 E103                       	smpsAlterNote       $03
00084F26 E701                       	dc.b	smpsNoAttack, $01
00084F28 E109                       	smpsAlterNote       $09
00084F2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F2E E106                       	smpsAlterNote       $06
00084F30 E701                       	dc.b	smpsNoAttack, $01
00084F32 E100                       	smpsAlterNote       $00
00084F34 E701                       	dc.b	smpsNoAttack, $01
00084F36 E10C                       	smpsAlterNote       $0C
00084F38 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084F3C E10B                       	smpsAlterNote       $0B
00084F3E C603                       	dc.b	nA5, $03
00084F40 E109                       	smpsAlterNote       $09
00084F42 C403 8001                  	dc.b	nG5, $03, nRst, $01
00084F46 E10B                       	smpsAlterNote       $0B
00084F48 C60D                       	dc.b	nA5, $0D
00084F4A E105                       	smpsAlterNote       $05
00084F4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F50 E10B                       	smpsAlterNote       $0B
00084F52 E701                       	dc.b	smpsNoAttack, $01
00084F54 E10E                       	smpsAlterNote       $0E
00084F56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F5A E108                       	smpsAlterNote       $08
00084F5C E701                       	dc.b	smpsNoAttack, $01
00084F5E E104                       	smpsAlterNote       $04
00084F60 E701                       	dc.b	smpsNoAttack, $01
00084F62 E105                       	smpsAlterNote       $05
00084F64 E701                       	dc.b	smpsNoAttack, $01
00084F66 E10B                       	smpsAlterNote       $0B
00084F68 E701                       	dc.b	smpsNoAttack, $01
00084F6A E10F                       	smpsAlterNote       $0F
00084F6C E701                       	dc.b	smpsNoAttack, $01
00084F6E E10B                       	smpsAlterNote       $0B
00084F70 E701                       	dc.b	smpsNoAttack, $01
00084F72 E108                       	smpsAlterNote       $08
00084F74 E701                       	dc.b	smpsNoAttack, $01
00084F76 E104                       	smpsAlterNote       $04
00084F78 E701                       	dc.b	smpsNoAttack, $01
00084F7A E108                       	smpsAlterNote       $08
00084F7C E701                       	dc.b	smpsNoAttack, $01
00084F7E E10E                       	smpsAlterNote       $0E
00084F80 E701                       	dc.b	smpsNoAttack, $01
00084F82 E10F                       	smpsAlterNote       $0F
00084F84 E701                       	dc.b	smpsNoAttack, $01
00084F86 E10B                       	smpsAlterNote       $0B
00084F88 E701                       	dc.b	smpsNoAttack, $01
00084F8A E105                       	smpsAlterNote       $05
00084F8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F90 E108                       	smpsAlterNote       $08
00084F92 E701                       	dc.b	smpsNoAttack, $01
00084F94 E10E                       	smpsAlterNote       $0E
00084F96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F9A E108                       	smpsAlterNote       $08
00084F9C E701                       	dc.b	smpsNoAttack, $01
00084F9E E105                       	smpsAlterNote       $05
00084FA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FA4 E10B                       	smpsAlterNote       $0B
00084FA6 E701                       	dc.b	smpsNoAttack, $01
00084FA8 E10F                       	smpsAlterNote       $0F
00084FAA E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00084FAE E107                       	smpsAlterNote       $07
00084FB0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084FB4 E108                       	smpsAlterNote       $08
00084FB6 C103                       	dc.b	nE5, $03
00084FB8 E109                       	smpsAlterNote       $09
00084FBA C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00084FC2 E10B                       	smpsAlterNote       $0B
00084FC4 C606 8001                  	dc.b	nA5, $06, nRst, $01
00084FC8 E107                       	smpsAlterNote       $07
00084FCA BF03                       	dc.b	nD5, $03
00084FCC E106                       	smpsAlterNote       $06
00084FCE C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00084FD2 E107                       	smpsAlterNote       $07
00084FD4 CB03                       	dc.b	nD6, $03
00084FD6 E10C                       	smpsAlterNote       $0C
00084FD8 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00084FDC E10B                       	smpsAlterNote       $0B
00084FDE C604 8001                  	dc.b	nA5, $04, nRst, $01
00084FE2 E109                       	smpsAlterNote       $09
00084FE4 C404                       	dc.b	nG5, $04
00084FE6 E10B                       	smpsAlterNote       $0B
00084FE8 C60D                       	dc.b	nA5, $0D
00084FEA E108                       	smpsAlterNote       $08
00084FEC E701                       	dc.b	smpsNoAttack, $01
00084FEE E104                       	smpsAlterNote       $04
00084FF0 E701                       	dc.b	smpsNoAttack, $01
00084FF2 E108                       	smpsAlterNote       $08
00084FF4 E701                       	dc.b	smpsNoAttack, $01
00084FF6 E10B                       	smpsAlterNote       $0B
00084FF8 E701                       	dc.b	smpsNoAttack, $01
00084FFA E10F                       	smpsAlterNote       $0F
00084FFC E701                       	dc.b	smpsNoAttack, $01
00084FFE E10B                       	smpsAlterNote       $0B
00085000 E701                       	dc.b	smpsNoAttack, $01
00085002 E105                       	smpsAlterNote       $05
00085004 E701                       	dc.b	smpsNoAttack, $01
00085006 E104                       	smpsAlterNote       $04
00085008 E701                       	dc.b	smpsNoAttack, $01
0008500A E108                       	smpsAlterNote       $08
0008500C E701                       	dc.b	smpsNoAttack, $01
0008500E E10E                       	smpsAlterNote       $0E
00085010 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085014 E10B                       	smpsAlterNote       $0B
00085016 E701                       	dc.b	smpsNoAttack, $01
00085018 E105                       	smpsAlterNote       $05
0008501A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008501E E10B                       	smpsAlterNote       $0B
00085020 E701                       	dc.b	smpsNoAttack, $01
00085022 E10E                       	smpsAlterNote       $0E
00085024 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085028 E108                       	smpsAlterNote       $08
0008502A E701                       	dc.b	smpsNoAttack, $01
0008502C E104                       	smpsAlterNote       $04
0008502E E701                       	dc.b	smpsNoAttack, $01
00085030 E105                       	smpsAlterNote       $05
00085032 E701                       	dc.b	smpsNoAttack, $01
00085034 E10B                       	smpsAlterNote       $0B
00085036 E701                       	dc.b	smpsNoAttack, $01
00085038 E10F                       	smpsAlterNote       $0F
0008503A E701                       	dc.b	smpsNoAttack, $01
0008503C E10B                       	smpsAlterNote       $0B
0008503E E701                       	dc.b	smpsNoAttack, $01
00085040 E108                       	smpsAlterNote       $08
00085042 E701                       	dc.b	smpsNoAttack, $01
00085044 E105                       	smpsAlterNote       $05
00085046 8001                       	dc.b	nRst, $01
00085048 E109                       	smpsAlterNote       $09
0008504A C401                       	dc.b	nG5, $01
0008504C E10B                       	smpsAlterNote       $0B
0008504E E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00085057 E109                       	smpsAlterNote       $09
00085059 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008505D E10B                       	smpsAlterNote       $0B
0008505F C604 8001                  	dc.b	nA5, $04, nRst, $01
00085063 E107                       	smpsAlterNote       $07
00085065 BF0D                       	dc.b	nD5, $0D
00085067 E101                       	smpsAlterNote       $01
00085069 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008506D E104                       	smpsAlterNote       $04
0008506F E701                       	dc.b	smpsNoAttack, $01
00085071 E10A                       	smpsAlterNote       $0A
00085073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085077 E104                       	smpsAlterNote       $04
00085079 E701                       	dc.b	smpsNoAttack, $01
0008507B E101                       	smpsAlterNote       $01
0008507D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085081 E107                       	smpsAlterNote       $07
00085083 E701                       	dc.b	smpsNoAttack, $01
00085085 E10B                       	smpsAlterNote       $0B
00085087 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008508B E108                       	smpsAlterNote       $08
0008508D C101                       	dc.b	nE5, $01
0008508F E109                       	smpsAlterNote       $09
00085091 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00085096 E10B                       	smpsAlterNote       $0B
00085098 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000850A0 E108                       	smpsAlterNote       $08
000850A2 CD06                       	dc.b	nE6, $06
000850A4 E109                       	smpsAlterNote       $09
000850A6 CE07                       	dc.b	nF6, $07
000850A8 E108                       	smpsAlterNote       $08
000850AA CD03 8001                  	dc.b	nE6, $03, nRst, $01
000850AE E106                       	smpsAlterNote       $06
000850B0 C903                       	dc.b	nC6, $03
000850B2 E109                       	smpsAlterNote       $09
000850B4 C403 8001                  	dc.b	nG5, $03, nRst, $01
000850B8 E10C                       	smpsAlterNote       $0C
000850BA C70D                       	dc.b	nBb5, $0D
000850BC E106                       	smpsAlterNote       $06
000850BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850C2 E109                       	smpsAlterNote       $09
000850C4 E701                       	dc.b	smpsNoAttack, $01
000850C6 E10F                       	smpsAlterNote       $0F
000850C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850CC E109                       	smpsAlterNote       $09
000850CE E701                       	dc.b	smpsNoAttack, $01
000850D0 E106                       	smpsAlterNote       $06
000850D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850D6 E10C                       	smpsAlterNote       $0C
000850D8 E701                       	dc.b	smpsNoAttack, $01
000850DA E110                       	smpsAlterNote       $10
000850DC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000850E0 E10B                       	smpsAlterNote       $0B
000850E2 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
000850E6 E105                       	smpsAlterNote       $05
000850E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850EC E10B                       	smpsAlterNote       $0B
000850EE E701                       	dc.b	smpsNoAttack, $01
000850F0 E10E                       	smpsAlterNote       $0E
000850F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850F6 E108                       	smpsAlterNote       $08
000850F8 E701                       	dc.b	smpsNoAttack, $01
000850FA E104                       	smpsAlterNote       $04
000850FC E701                       	dc.b	smpsNoAttack, $01
000850FE E105                       	smpsAlterNote       $05
00085100 E701                       	dc.b	smpsNoAttack, $01
00085102 E10B                       	smpsAlterNote       $0B
00085104 E701                       	dc.b	smpsNoAttack, $01
00085106 E10F                       	smpsAlterNote       $0F
00085108 E701                       	dc.b	smpsNoAttack, $01
0008510A E10B                       	smpsAlterNote       $0B
0008510C E701                       	dc.b	smpsNoAttack, $01
0008510E E108                       	smpsAlterNote       $08
00085110 E701                       	dc.b	smpsNoAttack, $01
00085112 E104                       	smpsAlterNote       $04
00085114 E701                       	dc.b	smpsNoAttack, $01
00085116 E108                       	smpsAlterNote       $08
00085118 E701                       	dc.b	smpsNoAttack, $01
0008511A E10E                       	smpsAlterNote       $0E
0008511C E701                       	dc.b	smpsNoAttack, $01
0008511E E10F                       	smpsAlterNote       $0F
00085120 E701                       	dc.b	smpsNoAttack, $01
00085122 E10B                       	smpsAlterNote       $0B
00085124 E701                       	dc.b	smpsNoAttack, $01
00085126 E105                       	smpsAlterNote       $05
00085128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008512C E108                       	smpsAlterNote       $08
0008512E E701                       	dc.b	smpsNoAttack, $01
00085130 E10E                       	smpsAlterNote       $0E
00085132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085136 E108                       	smpsAlterNote       $08
00085138 E701                       	dc.b	smpsNoAttack, $01
0008513A E105                       	smpsAlterNote       $05
0008513C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085140 E10B                       	smpsAlterNote       $0B
00085142 E701                       	dc.b	smpsNoAttack, $01
00085144 E10F                       	smpsAlterNote       $0F
00085146 E701                       	dc.b	smpsNoAttack, $01
00085148 E10E                       	smpsAlterNote       $0E
0008514A E701                       	dc.b	smpsNoAttack, $01
0008514C E108                       	smpsAlterNote       $08
0008514E E701                       	dc.b	smpsNoAttack, $01
00085150 E104                       	smpsAlterNote       $04
00085152 E701                       	dc.b	smpsNoAttack, $01
00085154 E108                       	smpsAlterNote       $08
00085156 E701                       	dc.b	smpsNoAttack, $01
00085158 E10E                       	smpsAlterNote       $0E
0008515A E701                       	dc.b	smpsNoAttack, $01
0008515C E10F                       	smpsAlterNote       $0F
0008515E E701                       	dc.b	smpsNoAttack, $01
00085160 E10B                       	smpsAlterNote       $0B
00085162 E701                       	dc.b	smpsNoAttack, $01
00085164 E105                       	smpsAlterNote       $05
00085166 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008516A E108                       	smpsAlterNote       $08
0008516C E701                       	dc.b	smpsNoAttack, $01
0008516E E10E                       	smpsAlterNote       $0E
00085170 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085174 E108                       	smpsAlterNote       $08
00085176 E701                       	dc.b	smpsNoAttack, $01
00085178 E105                       	smpsAlterNote       $05
0008517A E701                       	dc.b	smpsNoAttack, $01
0008517C E10B                       	smpsAlterNote       $0B
0008517E C60D                       	dc.b	nA5, $0D
00085180 E108                       	smpsAlterNote       $08
00085182 E701                       	dc.b	smpsNoAttack, $01
00085184 E104                       	smpsAlterNote       $04
00085186 E701                       	dc.b	smpsNoAttack, $01
00085188 E105                       	smpsAlterNote       $05
0008518A E701                       	dc.b	smpsNoAttack, $01
0008518C E10B                       	smpsAlterNote       $0B
0008518E E701                       	dc.b	smpsNoAttack, $01
00085190 E10F                       	smpsAlterNote       $0F
00085192 E701                       	dc.b	smpsNoAttack, $01
00085194 E10B                       	smpsAlterNote       $0B
00085196 E701                       	dc.b	smpsNoAttack, $01
00085198 E108                       	smpsAlterNote       $08
0008519A E701                       	dc.b	smpsNoAttack, $01
0008519C E104                       	smpsAlterNote       $04
0008519E E701                       	dc.b	smpsNoAttack, $01
000851A0 E108                       	smpsAlterNote       $08
000851A2 E701                       	dc.b	smpsNoAttack, $01
000851A4 E10E                       	smpsAlterNote       $0E
000851A6 E701                       	dc.b	smpsNoAttack, $01
000851A8 E10F                       	smpsAlterNote       $0F
000851AA E701                       	dc.b	smpsNoAttack, $01
000851AE E109                       	smpsAlterNote       $09
000851B0 E6FF                       	smpsAlterVol        $FF
000851B2 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000851BC E108                       	smpsAlterNote       $08
000851BE C103 800E                  	dc.b	nE5, $03, nRst, $0E
000851C4 E107                       	smpsAlterNote       $07
000851C6 E601                       	smpsAlterVol        $01
000851C8 BF03                       	dc.b	nD5, $03
000851CA E108                       	smpsAlterNote       $08
000851CC C103 8001                  	dc.b	nE5, $03, nRst, $01
000851D0 E109                       	smpsAlterNote       $09
000851D2 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000851D8 E10B                       	smpsAlterNote       $0B
000851DA C606 8001                  	dc.b	nA5, $06, nRst, $01
000851DE E107                       	smpsAlterNote       $07
000851E0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000851E4 E106                       	smpsAlterNote       $06
000851E6 C90D                       	dc.b	nC6, $0D
000851E8 E103                       	smpsAlterNote       $03
000851EA E701                       	dc.b	smpsNoAttack, $01
000851EC E1FF                       	smpsAlterNote       $FF
000851EE E701                       	dc.b	smpsNoAttack, $01
000851F0 E103                       	smpsAlterNote       $03
000851F2 E701                       	dc.b	smpsNoAttack, $01
000851F4 E109                       	smpsAlterNote       $09
000851F6 E701                       	dc.b	smpsNoAttack, $01
000851F8 E10A                       	smpsAlterNote       $0A
000851FA E701                       	dc.b	smpsNoAttack, $01
000851FC E106                       	smpsAlterNote       $06
000851FE E701                       	dc.b	smpsNoAttack, $01
00085200 E100                       	smpsAlterNote       $00
00085202 E701                       	dc.b	smpsNoAttack, $01
00085204 E10C                       	smpsAlterNote       $0C
00085206 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008520A E10B                       	smpsAlterNote       $0B
0008520C C603                       	dc.b	nA5, $03
0008520E E109                       	smpsAlterNote       $09
00085210 C403 8001                  	dc.b	nG5, $03, nRst, $01
00085214 E10B                       	smpsAlterNote       $0B
00085216 C60D                       	dc.b	nA5, $0D
00085218 E105                       	smpsAlterNote       $05
0008521A E701                       	dc.b	smpsNoAttack, $01
0008521C E104                       	smpsAlterNote       $04
0008521E E701                       	dc.b	smpsNoAttack, $01
00085220 E108                       	smpsAlterNote       $08
00085222 E701                       	dc.b	smpsNoAttack, $01
00085224 E10E                       	smpsAlterNote       $0E
00085226 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008522A E10B                       	smpsAlterNote       $0B
0008522C E701                       	dc.b	smpsNoAttack, $01
0008522E E105                       	smpsAlterNote       $05
00085230 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085234 E10B                       	smpsAlterNote       $0B
00085236 E701                       	dc.b	smpsNoAttack, $01
00085238 E10E                       	smpsAlterNote       $0E
0008523A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008523E E108                       	smpsAlterNote       $08
00085240 E701                       	dc.b	smpsNoAttack, $01
00085242 E104                       	smpsAlterNote       $04
00085244 E701                       	dc.b	smpsNoAttack, $01
00085246 E105                       	smpsAlterNote       $05
00085248 E701                       	dc.b	smpsNoAttack, $01
0008524A E10B                       	smpsAlterNote       $0B
0008524C E701                       	dc.b	smpsNoAttack, $01
0008524E E10F                       	smpsAlterNote       $0F
00085250 E701                       	dc.b	smpsNoAttack, $01
00085252 E10B                       	smpsAlterNote       $0B
00085254 E701                       	dc.b	smpsNoAttack, $01
00085256 E108                       	smpsAlterNote       $08
00085258 E701                       	dc.b	smpsNoAttack, $01
0008525A E104                       	smpsAlterNote       $04
0008525C E701                       	dc.b	smpsNoAttack, $01
0008525E E108                       	smpsAlterNote       $08
00085260 E701                       	dc.b	smpsNoAttack, $01
00085262 E10E                       	smpsAlterNote       $0E
00085264 E701                       	dc.b	smpsNoAttack, $01
00085266 E10F                       	smpsAlterNote       $0F
00085268 E701                       	dc.b	smpsNoAttack, $01
0008526A E10B                       	smpsAlterNote       $0B
0008526C E701                       	dc.b	smpsNoAttack, $01
0008526E E105                       	smpsAlterNote       $05
00085270 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085274 E108                       	smpsAlterNote       $08
00085276 E701                       	dc.b	smpsNoAttack, $01
00085278 E10E                       	smpsAlterNote       $0E
0008527A E701                       	dc.b	smpsNoAttack, $01
0008527C E10F                       	smpsAlterNote       $0F
0008527E 800F                       	dc.b	nRst, $0F
00085280 E107                       	smpsAlterNote       $07
00085282 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00085286 E108                       	smpsAlterNote       $08
00085288 C103                       	dc.b	nE5, $03
0008528A E109                       	smpsAlterNote       $09
0008528C C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00085292 E10B                       	smpsAlterNote       $0B
00085294 C606 8001                  	dc.b	nA5, $06, nRst, $01
00085298 E107                       	smpsAlterNote       $07
0008529A BF03                       	dc.b	nD5, $03
0008529C E106                       	smpsAlterNote       $06
0008529E C90E                       	dc.b	nC6, $0E
000852A0 E107                       	smpsAlterNote       $07
000852A2 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000852A6 E10C                       	smpsAlterNote       $0C
000852A8 C704                       	dc.b	nBb5, $04
000852AA E10B                       	smpsAlterNote       $0B
000852AC C604 8001                  	dc.b	nA5, $04, nRst, $01
000852B0 E109                       	smpsAlterNote       $09
000852B2 C404                       	dc.b	nG5, $04
000852B4 E10B                       	smpsAlterNote       $0B
000852B6 C60D                       	dc.b	nA5, $0D
000852B8 E108                       	smpsAlterNote       $08
000852BA E701                       	dc.b	smpsNoAttack, $01
000852BC E105                       	smpsAlterNote       $05
000852BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852C2 E10B                       	smpsAlterNote       $0B
000852C4 E701                       	dc.b	smpsNoAttack, $01
000852C6 E10F                       	smpsAlterNote       $0F
000852C8 E701                       	dc.b	smpsNoAttack, $01
000852CA E10E                       	smpsAlterNote       $0E
000852CC E701                       	dc.b	smpsNoAttack, $01
000852CE E108                       	smpsAlterNote       $08
000852D0 E701                       	dc.b	smpsNoAttack, $01
000852D2 E104                       	smpsAlterNote       $04
000852D4 E701                       	dc.b	smpsNoAttack, $01
000852D6 E108                       	smpsAlterNote       $08
000852D8 E701                       	dc.b	smpsNoAttack, $01
000852DA E10B                       	smpsAlterNote       $0B
000852DC E701                       	dc.b	smpsNoAttack, $01
000852DE E10F                       	smpsAlterNote       $0F
000852E0 E701                       	dc.b	smpsNoAttack, $01
000852E2 E10B                       	smpsAlterNote       $0B
000852E4 E701                       	dc.b	smpsNoAttack, $01
000852E6 E105                       	smpsAlterNote       $05
000852E8 E701                       	dc.b	smpsNoAttack, $01
000852EA E104                       	smpsAlterNote       $04
000852EC E701                       	dc.b	smpsNoAttack, $01
000852EE E108                       	smpsAlterNote       $08
000852F0 E701                       	dc.b	smpsNoAttack, $01
000852F2 E10E                       	smpsAlterNote       $0E
000852F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852F8 E10B                       	smpsAlterNote       $0B
000852FA E701                       	dc.b	smpsNoAttack, $01
000852FC E105                       	smpsAlterNote       $05
000852FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085302 E10B                       	smpsAlterNote       $0B
00085304 E701                       	dc.b	smpsNoAttack, $01
00085306 E10E                       	smpsAlterNote       $0E
00085308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008530C E108                       	smpsAlterNote       $08
0008530E E701                       	dc.b	smpsNoAttack, $01
00085310 E105                       	smpsAlterNote       $05
00085312 8001                       	dc.b	nRst, $01
00085314 E109                       	smpsAlterNote       $09
00085316 C402                       	dc.b	nG5, $02
00085318 E10B                       	smpsAlterNote       $0B
0008531A E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00085323 E109                       	smpsAlterNote       $09
00085325 C404                       	dc.b	nG5, $04
00085327 E10B                       	smpsAlterNote       $0B
00085329 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008532D E107                       	smpsAlterNote       $07
0008532F BF0D                       	dc.b	nD5, $0D
00085331 E101                       	smpsAlterNote       $01
00085333 E701                       	dc.b	smpsNoAttack, $01
00085335 E100                       	smpsAlterNote       $00
00085337 E701                       	dc.b	smpsNoAttack, $01
00085339 E104                       	smpsAlterNote       $04
0008533B E701                       	dc.b	smpsNoAttack, $01
0008533D E10A                       	smpsAlterNote       $0A
0008533F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085343 E107                       	smpsAlterNote       $07
00085345 E701                       	dc.b	smpsNoAttack, $01
00085347 E101                       	smpsAlterNote       $01
00085349 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008534D E107                       	smpsAlterNote       $07
0008534F E701                       	dc.b	smpsNoAttack, $01
00085351 E10A                       	smpsAlterNote       $0A
00085353 E701                       	dc.b	smpsNoAttack, $01
00085355 E10B                       	smpsAlterNote       $0B
00085357 8001                       	dc.b	nRst, $01
00085359 E108                       	smpsAlterNote       $08
0008535B C101                       	dc.b	nE5, $01
0008535D E109                       	smpsAlterNote       $09
0008535F E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00085364 E10B                       	smpsAlterNote       $0B
00085366 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008536E E108                       	smpsAlterNote       $08
00085370 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085374 E109                       	smpsAlterNote       $09
00085376 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008537A E108                       	smpsAlterNote       $08
0008537C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00085380 E106                       	smpsAlterNote       $06
00085382 C903                       	dc.b	nC6, $03
00085384 E109                       	smpsAlterNote       $09
00085386 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008538A E10C                       	smpsAlterNote       $0C
0008538C C70D                       	dc.b	nBb5, $0D
0008538E E109                       	smpsAlterNote       $09
00085390 E701                       	dc.b	smpsNoAttack, $01
00085392 E105                       	smpsAlterNote       $05
00085394 E701                       	dc.b	smpsNoAttack, $01
00085396 E109                       	smpsAlterNote       $09
00085398 E701                       	dc.b	smpsNoAttack, $01
0008539A E10F                       	smpsAlterNote       $0F
0008539C E701                       	dc.b	smpsNoAttack, $01
0008539E E110                       	smpsAlterNote       $10
000853A0 E701                       	dc.b	smpsNoAttack, $01
000853A2 E10C                       	smpsAlterNote       $0C
000853A4 E701                       	dc.b	smpsNoAttack, $01
000853A6 E106                       	smpsAlterNote       $06
000853A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853AC E109                       	smpsAlterNote       $09
000853AE E701                       	dc.b	smpsNoAttack, $01
000853B0 E10F                       	smpsAlterNote       $0F
000853B2 E701                       	dc.b	smpsNoAttack, $01
000853B4 E110                       	smpsAlterNote       $10
000853B6 8001                       	dc.b	nRst, $01
000853B8 E10B                       	smpsAlterNote       $0B
000853BA C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000853C0 E105                       	smpsAlterNote       $05
000853C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853C6 E108                       	smpsAlterNote       $08
000853C8 E701                       	dc.b	smpsNoAttack, $01
000853CA E10E                       	smpsAlterNote       $0E
000853CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853D0 E108                       	smpsAlterNote       $08
000853D2 E701                       	dc.b	smpsNoAttack, $01
000853D4 E105                       	smpsAlterNote       $05
000853D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853DA E10B                       	smpsAlterNote       $0B
000853DC E701                       	dc.b	smpsNoAttack, $01
000853DE E10F                       	smpsAlterNote       $0F
000853E0 E701                       	dc.b	smpsNoAttack, $01
000853E2 E10E                       	smpsAlterNote       $0E
000853E4 E701                       	dc.b	smpsNoAttack, $01
000853E6 E108                       	smpsAlterNote       $08
000853E8 E701                       	dc.b	smpsNoAttack, $01
000853EA E104                       	smpsAlterNote       $04
000853EC E701                       	dc.b	smpsNoAttack, $01
000853EE E108                       	smpsAlterNote       $08
000853F0 E701                       	dc.b	smpsNoAttack, $01
000853F2 E10B                       	smpsAlterNote       $0B
000853F4 E701                       	dc.b	smpsNoAttack, $01
000853F6 E10F                       	smpsAlterNote       $0F
000853F8 E701                       	dc.b	smpsNoAttack, $01
000853FA E10B                       	smpsAlterNote       $0B
000853FC E701                       	dc.b	smpsNoAttack, $01
000853FE E105                       	smpsAlterNote       $05
00085400 E701                       	dc.b	smpsNoAttack, $01
00085402 E104                       	smpsAlterNote       $04
00085404 E701                       	dc.b	smpsNoAttack, $01
00085406 E108                       	smpsAlterNote       $08
00085408 E701                       	dc.b	smpsNoAttack, $01
0008540A E10E                       	smpsAlterNote       $0E
0008540C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085410 E10B                       	smpsAlterNote       $0B
00085412 E701                       	dc.b	smpsNoAttack, $01
00085414 E105                       	smpsAlterNote       $05
00085416 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008541A E10B                       	smpsAlterNote       $0B
0008541C E701                       	dc.b	smpsNoAttack, $01
0008541E E10E                       	smpsAlterNote       $0E
00085420 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085424 E108                       	smpsAlterNote       $08
00085426 E701                       	dc.b	smpsNoAttack, $01
00085428 E104                       	smpsAlterNote       $04
0008542A E701                       	dc.b	smpsNoAttack, $01
0008542C E105                       	smpsAlterNote       $05
0008542E E701                       	dc.b	smpsNoAttack, $01
00085430 E10B                       	smpsAlterNote       $0B
00085432 E701                       	dc.b	smpsNoAttack, $01
00085434 E10F                       	smpsAlterNote       $0F
00085436 E701                       	dc.b	smpsNoAttack, $01
00085438 E10B                       	smpsAlterNote       $0B
0008543A E701                       	dc.b	smpsNoAttack, $01
0008543C E108                       	smpsAlterNote       $08
0008543E E701                       	dc.b	smpsNoAttack, $01
00085440 E104                       	smpsAlterNote       $04
00085442 E701                       	dc.b	smpsNoAttack, $01
00085444 E108                       	smpsAlterNote       $08
00085446 E701                       	dc.b	smpsNoAttack, $01
00085448 E10E                       	smpsAlterNote       $0E
0008544A E701                       	dc.b	smpsNoAttack, $01
0008544C E10F                       	smpsAlterNote       $0F
0008544E E701                       	dc.b	smpsNoAttack, $01
00085450 E10B                       	smpsAlterNote       $0B
00085452 E701                       	dc.b	smpsNoAttack, $01
00085454 E105                       	smpsAlterNote       $05
00085456 E701                       	dc.b	smpsNoAttack, $01
00085458 E10B                       	smpsAlterNote       $0B
0008545A C60E                       	dc.b	nA5, $0E
0008545C E105                       	smpsAlterNote       $05
0008545E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085462 E10B                       	smpsAlterNote       $0B
00085464 E701                       	dc.b	smpsNoAttack, $01
00085466 E10E                       	smpsAlterNote       $0E
00085468 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008546C E108                       	smpsAlterNote       $08
0008546E E701                       	dc.b	smpsNoAttack, $01
00085470 E104                       	smpsAlterNote       $04
00085472 E701                       	dc.b	smpsNoAttack, $01
00085474 E105                       	smpsAlterNote       $05
00085476 E701                       	dc.b	smpsNoAttack, $01
00085478 E10B                       	smpsAlterNote       $0B
0008547A E701                       	dc.b	smpsNoAttack, $01
0008547C E10F                       	smpsAlterNote       $0F
0008547E E701                       	dc.b	smpsNoAttack, $01
00085480 E10B                       	smpsAlterNote       $0B
00085482 E701                       	dc.b	smpsNoAttack, $01
00085484 E108                       	smpsAlterNote       $08
00085486 E701                       	dc.b	smpsNoAttack, $01
00085488 E104                       	smpsAlterNote       $04
0008548A E701                       	dc.b	smpsNoAttack, $01
0008548C E108                       	smpsAlterNote       $08
0008548E E701                       	dc.b	smpsNoAttack, $01
00085490 E10E                       	smpsAlterNote       $0E
00085492 E701                       	dc.b	smpsNoAttack, $01
00085494 E10F                       	smpsAlterNote       $0F
00085496 E701                       	dc.b	smpsNoAttack, $01
00085498 E10B                       	smpsAlterNote       $0B
0008549A E701                       	dc.b	smpsNoAttack, $01
0008549C E105                       	smpsAlterNote       $05
0008549E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854A2 E108                       	smpsAlterNote       $08
000854A4 E701                       	dc.b	smpsNoAttack, $01
000854A6 E10E                       	smpsAlterNote       $0E
000854A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854AC E108                       	smpsAlterNote       $08
000854AE E701                       	dc.b	smpsNoAttack, $01
000854B0 E105                       	smpsAlterNote       $05
000854B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854B6 E10B                       	smpsAlterNote       $0B
000854B8 E701                       	dc.b	smpsNoAttack, $01
000854BA E10F                       	smpsAlterNote       $0F
000854BC E701                       	dc.b	smpsNoAttack, $01
000854BE E10E                       	smpsAlterNote       $0E
000854C0 E701                       	dc.b	smpsNoAttack, $01
000854C2 E108                       	smpsAlterNote       $08
000854C4 E701                       	dc.b	smpsNoAttack, $01
000854C6 E104                       	smpsAlterNote       $04
000854C8 E701                       	dc.b	smpsNoAttack, $01
000854CA E108                       	smpsAlterNote       $08
000854CC E701                       	dc.b	smpsNoAttack, $01
000854CE E10E                       	smpsAlterNote       $0E
000854D0 E701                       	dc.b	smpsNoAttack, $01
000854D2 E10F                       	smpsAlterNote       $0F
000854D4 E701                       	dc.b	smpsNoAttack, $01
000854D6 E10B                       	smpsAlterNote       $0B
000854D8 E701                       	dc.b	smpsNoAttack, $01
000854DA E105                       	smpsAlterNote       $05
000854DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854E0 E108                       	smpsAlterNote       $08
000854E2 E701                       	dc.b	smpsNoAttack, $01
000854E4 E10E                       	smpsAlterNote       $0E
000854E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854EA E108                       	smpsAlterNote       $08
000854EC E701                       	dc.b	smpsNoAttack, $01
000854EE E105                       	smpsAlterNote       $05
000854F0 E701                       	dc.b	smpsNoAttack, $01
000854F4 E10B                       	smpsAlterNote       $0B
000854F6 E6FD                       	smpsAlterVol        $FD
000854F8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000854FC E109                       	smpsAlterNote       $09
000854FE C404                       	dc.b	nG5, $04
00085500 E10B                       	smpsAlterNote       $0B
00085502 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085506 E107                       	smpsAlterNote       $07
00085508 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008550E E10B                       	smpsAlterNote       $0B
00085510 C604                       	dc.b	nA5, $04
00085512 E109                       	smpsAlterNote       $09
00085514 C404 8001                  	dc.b	nG5, $04, nRst, $01
00085518 E10B                       	smpsAlterNote       $0B
0008551A C604                       	dc.b	nA5, $04
0008551C E108                       	smpsAlterNote       $08
0008551E C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00085526 E106                       	smpsAlterNote       $06
00085528 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008552C E10C                       	smpsAlterNote       $0C
0008552E C704                       	dc.b	nBb5, $04
00085530 E10B                       	smpsAlterNote       $0B
00085532 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085536 E109                       	smpsAlterNote       $09
00085538 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00085542 E10B                       	smpsAlterNote       $0B
00085544 C60D                       	dc.b	nA5, $0D
00085546 E108                       	smpsAlterNote       $08
00085548 E701                       	dc.b	smpsNoAttack, $01
0008554A E104                       	smpsAlterNote       $04
0008554C E701                       	dc.b	smpsNoAttack, $01
0008554E E108                       	smpsAlterNote       $08
00085550 E701                       	dc.b	smpsNoAttack, $01
00085552 E10E                       	smpsAlterNote       $0E
00085554 E701                       	dc.b	smpsNoAttack, $01
00085556 E10F                       	smpsAlterNote       $0F
00085558 E701                       	dc.b	smpsNoAttack, $01
0008555A E10B                       	smpsAlterNote       $0B
0008555C E701                       	dc.b	smpsNoAttack, $01
0008555E E105                       	smpsAlterNote       $05
00085560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085564 E108                       	smpsAlterNote       $08
00085566 E701                       	dc.b	smpsNoAttack, $01
00085568 E10E                       	smpsAlterNote       $0E
0008556A E701                       	dc.b	smpsNoAttack, $01
0008556C E10F                       	smpsAlterNote       $0F
0008556E 8001                       	dc.b	nRst, $01
00085570 E109                       	smpsAlterNote       $09
00085572 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00085578 E108                       	smpsAlterNote       $08
0008557A C10D                       	dc.b	nE5, $0D
0008557C E102                       	smpsAlterNote       $02
0008557E E701                       	dc.b	smpsNoAttack, $01
00085580 E101                       	smpsAlterNote       $01
00085582 E701                       	dc.b	smpsNoAttack, $01
00085584 E105                       	smpsAlterNote       $05
00085586 E701                       	dc.b	smpsNoAttack, $01
00085588 E10B                       	smpsAlterNote       $0B
0008558A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008558E E108                       	smpsAlterNote       $08
00085590 E701                       	dc.b	smpsNoAttack, $01
00085592 E102                       	smpsAlterNote       $02
00085594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085598 E108                       	smpsAlterNote       $08
0008559A E701                       	dc.b	smpsNoAttack, $01
0008559C E10B                       	smpsAlterNote       $0B
0008559E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855A2 E105                       	smpsAlterNote       $05
000855A4 E701                       	dc.b	smpsNoAttack, $01
000855A6 E101                       	smpsAlterNote       $01
000855A8 E701                       	dc.b	smpsNoAttack, $01
000855AA E102                       	smpsAlterNote       $02
000855AC E701                       	dc.b	smpsNoAttack, $01
000855AE E108                       	smpsAlterNote       $08
000855B0 E701                       	dc.b	smpsNoAttack, $01
000855B2 E10C                       	smpsAlterNote       $0C
000855B4 E701                       	dc.b	smpsNoAttack, $01
000855B6 E108                       	smpsAlterNote       $08
000855B8 E701                       	dc.b	smpsNoAttack, $01
000855BA E105                       	smpsAlterNote       $05
000855BC E701                       	dc.b	smpsNoAttack, $01
000855BE E101                       	smpsAlterNote       $01
000855C0 E701                       	dc.b	smpsNoAttack, $01
000855C2 E105                       	smpsAlterNote       $05
000855C4 E701                       	dc.b	smpsNoAttack, $01
000855C6 E10B                       	smpsAlterNote       $0B
000855C8 E701                       	dc.b	smpsNoAttack, $01
000855CA E10C                       	smpsAlterNote       $0C
000855CC E701                       	dc.b	smpsNoAttack, $01
000855CE E108                       	smpsAlterNote       $08
000855D0 E701                       	dc.b	smpsNoAttack, $01
000855D2 E102                       	smpsAlterNote       $02
000855D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855D8 E105                       	smpsAlterNote       $05
000855DA E701                       	dc.b	smpsNoAttack, $01
000855DC E10B                       	smpsAlterNote       $0B
000855DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855E2 E105                       	smpsAlterNote       $05
000855E4 E701                       	dc.b	smpsNoAttack, $01
000855E6 E102                       	smpsAlterNote       $02
000855E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855EC E108                       	smpsAlterNote       $08
000855EE E701                       	dc.b	smpsNoAttack, $01
000855F0 E10C                       	smpsAlterNote       $0C
000855F2 E701                       	dc.b	smpsNoAttack, $01
000855F4 E10B                       	smpsAlterNote       $0B
000855F6 E701                       	dc.b	smpsNoAttack, $01
000855F8 E105                       	smpsAlterNote       $05
000855FA E701                       	dc.b	smpsNoAttack, $01
000855FC E101                       	smpsAlterNote       $01
000855FE E701                       	dc.b	smpsNoAttack, $01
00085600 E105                       	smpsAlterNote       $05
00085602 E701                       	dc.b	smpsNoAttack, $01
00085604 E108                       	smpsAlterNote       $08
00085606 E701                       	dc.b	smpsNoAttack, $01
00085608 E10C                       	smpsAlterNote       $0C
0008560A E701                       	dc.b	smpsNoAttack, $01
0008560C E108                       	smpsAlterNote       $08
0008560E E701                       	dc.b	smpsNoAttack, $01
00085610 E102                       	smpsAlterNote       $02
00085612 E701                       	dc.b	smpsNoAttack, $01
00085614 E101                       	smpsAlterNote       $01
00085616 E701                       	dc.b	smpsNoAttack, $01
00085618 E105                       	smpsAlterNote       $05
0008561A E701                       	dc.b	smpsNoAttack, $01
0008561C E10B                       	smpsAlterNote       $0B
0008561E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085622 E108                       	smpsAlterNote       $08
00085624 E701                       	dc.b	smpsNoAttack, $01
00085626 E102                       	smpsAlterNote       $02
00085628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008562C E108                       	smpsAlterNote       $08
0008562E E701                       	dc.b	smpsNoAttack, $01
00085630 E10B                       	smpsAlterNote       $0B
00085632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085636 E105                       	smpsAlterNote       $05
00085638 E701                       	dc.b	smpsNoAttack, $01
0008563A E101                       	smpsAlterNote       $01
0008563C E701                       	dc.b	smpsNoAttack, $01
0008563E E102                       	smpsAlterNote       $02
00085640 E701                       	dc.b	smpsNoAttack, $01
00085642 E108                       	smpsAlterNote       $08
00085644 E701                       	dc.b	smpsNoAttack, $01
00085646 E10C                       	smpsAlterNote       $0C
00085648 E701                       	dc.b	smpsNoAttack, $01
0008564A E108                       	smpsAlterNote       $08
0008564C E701                       	dc.b	smpsNoAttack, $01
0008564E E105                       	smpsAlterNote       $05
00085650 E701                       	dc.b	smpsNoAttack, $01
00085652 E101                       	smpsAlterNote       $01
00085654 E701                       	dc.b	smpsNoAttack, $01
00085656 E105                       	smpsAlterNote       $05
00085658 E701                       	dc.b	smpsNoAttack, $01
0008565A E10B                       	smpsAlterNote       $0B
0008565C E701                       	dc.b	smpsNoAttack, $01
0008565E E10C                       	smpsAlterNote       $0C
00085660 E701                       	dc.b	smpsNoAttack, $01
00085662 E108                       	smpsAlterNote       $08
00085664 E701                       	dc.b	smpsNoAttack, $01
00085666 E102                       	smpsAlterNote       $02
00085668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008566C E105                       	smpsAlterNote       $05
0008566E E701                       	dc.b	smpsNoAttack, $01
00085670 E10B                       	smpsAlterNote       $0B
00085672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085676 E105                       	smpsAlterNote       $05
00085678 E701                       	dc.b	smpsNoAttack, $01
0008567A E101                       	smpsAlterNote       $01
0008567C E701                       	dc.b	smpsNoAttack, $01
0008567E E102                       	smpsAlterNote       $02
00085680 E701                       	dc.b	smpsNoAttack, $01
00085682 E108                       	smpsAlterNote       $08
00085684 E701                       	dc.b	smpsNoAttack, $01
00085686 E10C                       	smpsAlterNote       $0C
00085688 E701                       	dc.b	smpsNoAttack, $01
0008568A E108                       	smpsAlterNote       $08
0008568C E701                       	dc.b	smpsNoAttack, $01
0008568E E105                       	smpsAlterNote       $05
00085690 E701                       	dc.b	smpsNoAttack, $01
00085692 E101                       	smpsAlterNote       $01
00085694 E701                       	dc.b	smpsNoAttack, $01
00085696 E105                       	smpsAlterNote       $05
00085698 E701                       	dc.b	smpsNoAttack, $01
0008569A E10B                       	smpsAlterNote       $0B
0008569C E701                       	dc.b	smpsNoAttack, $01
0008569E E10C                       	smpsAlterNote       $0C
000856A0 E701                       	dc.b	smpsNoAttack, $01
000856A2 E108                       	smpsAlterNote       $08
000856A4 E701                       	dc.b	smpsNoAttack, $01
000856A6 E102                       	smpsAlterNote       $02
000856A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856AC E105                       	smpsAlterNote       $05
000856AE E701                       	dc.b	smpsNoAttack, $01
000856B0 E10B                       	smpsAlterNote       $0B
000856B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856B6 E105                       	smpsAlterNote       $05
000856B8 E701                       	dc.b	smpsNoAttack, $01
000856BA E102                       	smpsAlterNote       $02
000856BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856C0 E108                       	smpsAlterNote       $08
000856C2 E701                       	dc.b	smpsNoAttack, $01
000856C4 E10C                       	smpsAlterNote       $0C
000856C6 E701                       	dc.b	smpsNoAttack, $01
000856C8 E10B                       	smpsAlterNote       $0B
000856CA E701                       	dc.b	smpsNoAttack, $01
000856CC E105                       	smpsAlterNote       $05
000856CE E701                       	dc.b	smpsNoAttack, $01
000856D0 E101                       	smpsAlterNote       $01
000856D2 E701                       	dc.b	smpsNoAttack, $01
000856D4 E105                       	smpsAlterNote       $05
000856D6 E701                       	dc.b	smpsNoAttack, $01
000856D8 E108                       	smpsAlterNote       $08
000856DA E701                       	dc.b	smpsNoAttack, $01
000856DC E10C                       	smpsAlterNote       $0C
000856DE E701                       	dc.b	smpsNoAttack, $01
000856E2 E10B                       	smpsAlterNote       $0B
000856E4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000856E8 E109                       	smpsAlterNote       $09
000856EA C404                       	dc.b	nG5, $04
000856EC E10B                       	smpsAlterNote       $0B
000856EE C604 8001                  	dc.b	nA5, $04, nRst, $01
000856F2 E107                       	smpsAlterNote       $07
000856F4 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000856FA E10B                       	smpsAlterNote       $0B
000856FC C604                       	dc.b	nA5, $04
000856FE E109                       	smpsAlterNote       $09
00085700 C404 8001                  	dc.b	nG5, $04, nRst, $01
00085704 E10B                       	smpsAlterNote       $0B
00085706 C604                       	dc.b	nA5, $04
00085708 E108                       	smpsAlterNote       $08
0008570A C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00085710 E106                       	smpsAlterNote       $06
00085712 C904 8001                  	dc.b	nC6, $04, nRst, $01
00085716 E10C                       	smpsAlterNote       $0C
00085718 C704                       	dc.b	nBb5, $04
0008571A E10B                       	smpsAlterNote       $0B
0008571C C604 8001                  	dc.b	nA5, $04, nRst, $01
00085720 E109                       	smpsAlterNote       $09
00085722 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008572C E10B                       	smpsAlterNote       $0B
0008572E C60D                       	dc.b	nA5, $0D
00085730 E108                       	smpsAlterNote       $08
00085732 E701                       	dc.b	smpsNoAttack, $01
00085734 E104                       	smpsAlterNote       $04
00085736 E701                       	dc.b	smpsNoAttack, $01
00085738 E108                       	smpsAlterNote       $08
0008573A E701                       	dc.b	smpsNoAttack, $01
0008573C E10B                       	smpsAlterNote       $0B
0008573E E701                       	dc.b	smpsNoAttack, $01
00085740 E10F                       	smpsAlterNote       $0F
00085742 E701                       	dc.b	smpsNoAttack, $01
00085744 E10B                       	smpsAlterNote       $0B
00085746 E701                       	dc.b	smpsNoAttack, $01
00085748 E105                       	smpsAlterNote       $05
0008574A E701                       	dc.b	smpsNoAttack, $01
0008574C E104                       	smpsAlterNote       $04
0008574E E701                       	dc.b	smpsNoAttack, $01
00085750 E108                       	smpsAlterNote       $08
00085752 E701                       	dc.b	smpsNoAttack, $01
00085754 E10E                       	smpsAlterNote       $0E
00085756 E701                       	dc.b	smpsNoAttack, $01
00085758 E10F                       	smpsAlterNote       $0F
0008575A 8001                       	dc.b	nRst, $01
0008575C E109                       	smpsAlterNote       $09
0008575E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00085764 E108                       	smpsAlterNote       $08
00085766 C10D                       	dc.b	nE5, $0D
00085768 E105                       	smpsAlterNote       $05
0008576A E701                       	dc.b	smpsNoAttack, $01
0008576C E101                       	smpsAlterNote       $01
0008576E E701                       	dc.b	smpsNoAttack, $01
00085770 E105                       	smpsAlterNote       $05
00085772 E701                       	dc.b	smpsNoAttack, $01
00085774 E10B                       	smpsAlterNote       $0B
00085776 E701                       	dc.b	smpsNoAttack, $01
00085778 E10C                       	smpsAlterNote       $0C
0008577A E701                       	dc.b	smpsNoAttack, $01
0008577C E108                       	smpsAlterNote       $08
0008577E E701                       	dc.b	smpsNoAttack, $01
00085780 E102                       	smpsAlterNote       $02
00085782 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085786 E105                       	smpsAlterNote       $05
00085788 E701                       	dc.b	smpsNoAttack, $01
0008578A E10B                       	smpsAlterNote       $0B
0008578C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085790 E105                       	smpsAlterNote       $05
00085792 E701                       	dc.b	smpsNoAttack, $01
00085794 E102                       	smpsAlterNote       $02
00085796 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008579A E108                       	smpsAlterNote       $08
0008579C E701                       	dc.b	smpsNoAttack, $01
0008579E E10C                       	smpsAlterNote       $0C
000857A0 E701                       	dc.b	smpsNoAttack, $01
000857A2 E10B                       	smpsAlterNote       $0B
000857A4 E701                       	dc.b	smpsNoAttack, $01
000857A6 E105                       	smpsAlterNote       $05
000857A8 E701                       	dc.b	smpsNoAttack, $01
000857AA E101                       	smpsAlterNote       $01
000857AC E701                       	dc.b	smpsNoAttack, $01
000857AE E105                       	smpsAlterNote       $05
000857B0 E701                       	dc.b	smpsNoAttack, $01
000857B2 E108                       	smpsAlterNote       $08
000857B4 E701                       	dc.b	smpsNoAttack, $01
000857B6 E10C                       	smpsAlterNote       $0C
000857B8 E701                       	dc.b	smpsNoAttack, $01
000857BA E108                       	smpsAlterNote       $08
000857BC E701                       	dc.b	smpsNoAttack, $01
000857BE E102                       	smpsAlterNote       $02
000857C0 E701                       	dc.b	smpsNoAttack, $01
000857C2 E101                       	smpsAlterNote       $01
000857C4 E701                       	dc.b	smpsNoAttack, $01
000857C6 E105                       	smpsAlterNote       $05
000857C8 E701                       	dc.b	smpsNoAttack, $01
000857CA E10B                       	smpsAlterNote       $0B
000857CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857D0 E108                       	smpsAlterNote       $08
000857D2 E701                       	dc.b	smpsNoAttack, $01
000857D4 E102                       	smpsAlterNote       $02
000857D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857DA E108                       	smpsAlterNote       $08
000857DC E701                       	dc.b	smpsNoAttack, $01
000857DE E10B                       	smpsAlterNote       $0B
000857E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857E4 E105                       	smpsAlterNote       $05
000857E6 E701                       	dc.b	smpsNoAttack, $01
000857E8 E101                       	smpsAlterNote       $01
000857EA E701                       	dc.b	smpsNoAttack, $01
000857EC E102                       	smpsAlterNote       $02
000857EE E701                       	dc.b	smpsNoAttack, $01
000857F0 E108                       	smpsAlterNote       $08
000857F2 E701                       	dc.b	smpsNoAttack, $01
000857F4 E10C                       	smpsAlterNote       $0C
000857F6 E701                       	dc.b	smpsNoAttack, $01
000857F8 E108                       	smpsAlterNote       $08
000857FA E701                       	dc.b	smpsNoAttack, $01
000857FC E105                       	smpsAlterNote       $05
000857FE E701                       	dc.b	smpsNoAttack, $01
00085800 E101                       	smpsAlterNote       $01
00085802 E701                       	dc.b	smpsNoAttack, $01
00085804 E105                       	smpsAlterNote       $05
00085806 E701                       	dc.b	smpsNoAttack, $01
00085808 E10B                       	smpsAlterNote       $0B
0008580A E701                       	dc.b	smpsNoAttack, $01
0008580C E10C                       	smpsAlterNote       $0C
0008580E E701                       	dc.b	smpsNoAttack, $01
00085810 E108                       	smpsAlterNote       $08
00085812 E701                       	dc.b	smpsNoAttack, $01
00085814 E102                       	smpsAlterNote       $02
00085816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008581A E108                       	smpsAlterNote       $08
0008581C E701                       	dc.b	smpsNoAttack, $01
0008581E E10B                       	smpsAlterNote       $0B
00085820 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085824 E105                       	smpsAlterNote       $05
00085826 E701                       	dc.b	smpsNoAttack, $01
00085828 E101                       	smpsAlterNote       $01
0008582A E701                       	dc.b	smpsNoAttack, $01
0008582C E102                       	smpsAlterNote       $02
0008582E E701                       	dc.b	smpsNoAttack, $01
00085830 E108                       	smpsAlterNote       $08
00085832 E701                       	dc.b	smpsNoAttack, $01
00085834 E10C                       	smpsAlterNote       $0C
00085836 E701                       	dc.b	smpsNoAttack, $01
00085838 E108                       	smpsAlterNote       $08
0008583A E701                       	dc.b	smpsNoAttack, $01
0008583C E105                       	smpsAlterNote       $05
0008583E E701                       	dc.b	smpsNoAttack, $01
00085840 E101                       	smpsAlterNote       $01
00085842 E701                       	dc.b	smpsNoAttack, $01
00085844 E105                       	smpsAlterNote       $05
00085846 E701                       	dc.b	smpsNoAttack, $01
00085848 E10B                       	smpsAlterNote       $0B
0008584A E701                       	dc.b	smpsNoAttack, $01
0008584C E10C                       	smpsAlterNote       $0C
0008584E E701                       	dc.b	smpsNoAttack, $01
00085850 E108                       	smpsAlterNote       $08
00085852 E701                       	dc.b	smpsNoAttack, $01
00085854 E102                       	smpsAlterNote       $02
00085856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008585A E105                       	smpsAlterNote       $05
0008585C E701                       	dc.b	smpsNoAttack, $01
0008585E E10B                       	smpsAlterNote       $0B
00085860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085864 E105                       	smpsAlterNote       $05
00085866 E701                       	dc.b	smpsNoAttack, $01
00085868 E102                       	smpsAlterNote       $02
0008586A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008586E E108                       	smpsAlterNote       $08
00085870 E701                       	dc.b	smpsNoAttack, $01
00085872 E10C                       	smpsAlterNote       $0C
00085874 E701                       	dc.b	smpsNoAttack, $01
00085876 E10B                       	smpsAlterNote       $0B
00085878 E701                       	dc.b	smpsNoAttack, $01
0008587A E105                       	smpsAlterNote       $05
0008587C E701                       	dc.b	smpsNoAttack, $01
0008587E E101                       	smpsAlterNote       $01
00085880 E701                       	dc.b	smpsNoAttack, $01
00085882 E105                       	smpsAlterNote       $05
00085884 E701                       	dc.b	smpsNoAttack, $01
00085886 E108                       	smpsAlterNote       $08
00085888 E701                       	dc.b	smpsNoAttack, $01
0008588A E10C                       	smpsAlterNote       $0C
0008588C E701                       	dc.b	smpsNoAttack, $01
0008588E E108                       	smpsAlterNote       $08
00085890 E701                       	dc.b	smpsNoAttack, $01
00085892 E102                       	smpsAlterNote       $02
00085894 E701                       	dc.b	smpsNoAttack, $01
00085896 E101                       	smpsAlterNote       $01
00085898 E701                       	dc.b	smpsNoAttack, $01
0008589A E105                       	smpsAlterNote       $05
0008589C E701                       	dc.b	smpsNoAttack, $01
0008589E E10B                       	smpsAlterNote       $0B
000858A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858A4 E108                       	smpsAlterNote       $08
000858A6 E701                       	dc.b	smpsNoAttack, $01
000858A8 E102                       	smpsAlterNote       $02
000858AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858AE E108                       	smpsAlterNote       $08
000858B0 E701                       	dc.b	smpsNoAttack, $01
000858B2 E10B                       	smpsAlterNote       $0B
000858B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858B8 E105                       	smpsAlterNote       $05
000858BA E701                       	dc.b	smpsNoAttack, $01
000858BC E102                       	smpsAlterNote       $02
000858BE 8001                       	dc.b	nRst, $01
000858C0 E107                       	smpsAlterNote       $07
000858C2 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000858C6 E108                       	smpsAlterNote       $08
000858C8 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000858CC E102                       	smpsAlterNote       $02
000858CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858D2 E108                       	smpsAlterNote       $08
000858D4 E701                       	dc.b	smpsNoAttack, $01
000858D6 E10B                       	smpsAlterNote       $0B
000858D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858DC E105                       	smpsAlterNote       $05
000858DE E701                       	dc.b	smpsNoAttack, $01
000858E0 E101                       	smpsAlterNote       $01
000858E2 E701                       	dc.b	smpsNoAttack, $01
000858E4 E102                       	smpsAlterNote       $02
000858E6 E701                       	dc.b	smpsNoAttack, $01
000858E8 E108                       	smpsAlterNote       $08
000858EA E701                       	dc.b	smpsNoAttack, $01
000858EC E10C                       	smpsAlterNote       $0C
000858EE E701                       	dc.b	smpsNoAttack, $01
000858F0 E108                       	smpsAlterNote       $08
000858F2 E701                       	dc.b	smpsNoAttack, $01
000858F4 E105                       	smpsAlterNote       $05
000858F6 E701                       	dc.b	smpsNoAttack, $01
000858F8 E101                       	smpsAlterNote       $01
000858FA E701                       	dc.b	smpsNoAttack, $01
000858FC E105                       	smpsAlterNote       $05
000858FE E701                       	dc.b	smpsNoAttack, $01
00085900 E10B                       	smpsAlterNote       $0B
00085902 E701                       	dc.b	smpsNoAttack, $01
00085904 E10C                       	smpsAlterNote       $0C
00085906 E701                       	dc.b	smpsNoAttack, $01
00085908 E108                       	smpsAlterNote       $08
0008590A E701                       	dc.b	smpsNoAttack, $01
0008590C E102                       	smpsAlterNote       $02
0008590E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085912 E105                       	smpsAlterNote       $05
00085914 E701                       	dc.b	smpsNoAttack, $01
00085916 E10B                       	smpsAlterNote       $0B
00085918 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008591C E105                       	smpsAlterNote       $05
0008591E E701                       	dc.b	smpsNoAttack, $01
00085920 E102                       	smpsAlterNote       $02
00085922 E701                       	dc.b	smpsNoAttack, $01
00085924 E109                       	smpsAlterNote       $09
00085926 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008592A E108                       	smpsAlterNote       $08
0008592C C10D                       	dc.b	nE5, $0D
0008592E E105                       	smpsAlterNote       $05
00085930 E701                       	dc.b	smpsNoAttack, $01
00085932 E101                       	smpsAlterNote       $01
00085934 E701                       	dc.b	smpsNoAttack, $01
00085936 E102                       	smpsAlterNote       $02
00085938 E701                       	dc.b	smpsNoAttack, $01
0008593A E108                       	smpsAlterNote       $08
0008593C E701                       	dc.b	smpsNoAttack, $01
0008593E E10C                       	smpsAlterNote       $0C
00085940 E701                       	dc.b	smpsNoAttack, $01
00085942 E108                       	smpsAlterNote       $08
00085944 E701                       	dc.b	smpsNoAttack, $01
00085946 E105                       	smpsAlterNote       $05
00085948 E701                       	dc.b	smpsNoAttack, $01
0008594A E101                       	smpsAlterNote       $01
0008594C E701                       	dc.b	smpsNoAttack, $01
0008594E E105                       	smpsAlterNote       $05
00085950 E701                       	dc.b	smpsNoAttack, $01
00085952 E10B                       	smpsAlterNote       $0B
00085954 E701                       	dc.b	smpsNoAttack, $01
00085956 E10C                       	smpsAlterNote       $0C
00085958 E701                       	dc.b	smpsNoAttack, $01
0008595A E108                       	smpsAlterNote       $08
0008595C E701                       	dc.b	smpsNoAttack, $01
0008595E E102                       	smpsAlterNote       $02
00085960 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00085968 E10B                       	smpsAlterNote       $0B
0008596A BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008596E E10C                       	smpsAlterNote       $0C
00085970 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00085974 E10B                       	smpsAlterNote       $0B
00085976 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008597C E107                       	smpsAlterNote       $07
0008597E BF03                       	dc.b	nD5, $03
00085980 E108                       	smpsAlterNote       $08
00085982 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085986 E109                       	smpsAlterNote       $09
00085988 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008598E E10B                       	smpsAlterNote       $0B
00085990 C606 8001                  	dc.b	nA5, $06, nRst, $01
00085994 E107                       	smpsAlterNote       $07
00085996 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008599A E106                       	smpsAlterNote       $06
0008599C C90D                       	dc.b	nC6, $0D
0008599E E103                       	smpsAlterNote       $03
000859A0 E701                       	dc.b	smpsNoAttack, $01
000859A2 E1FF                       	smpsAlterNote       $FF
000859A4 E701                       	dc.b	smpsNoAttack, $01
000859A6 E103                       	smpsAlterNote       $03
000859A8 E701                       	dc.b	smpsNoAttack, $01
000859AA E109                       	smpsAlterNote       $09
000859AC E701                       	dc.b	smpsNoAttack, $01
000859AE E10A                       	smpsAlterNote       $0A
000859B0 E701                       	dc.b	smpsNoAttack, $01
000859B2 E106                       	smpsAlterNote       $06
000859B4 E701                       	dc.b	smpsNoAttack, $01
000859B6 E100                       	smpsAlterNote       $00
000859B8 E701                       	dc.b	smpsNoAttack, $01
000859BA E10C                       	smpsAlterNote       $0C
000859BC C703 8001                  	dc.b	nBb5, $03, nRst, $01
000859C0 E10B                       	smpsAlterNote       $0B
000859C2 C603                       	dc.b	nA5, $03
000859C4 E109                       	smpsAlterNote       $09
000859C6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000859CA E10B                       	smpsAlterNote       $0B
000859CC C60D                       	dc.b	nA5, $0D
000859CE E105                       	smpsAlterNote       $05
000859D0 E701                       	dc.b	smpsNoAttack, $01
000859D2 E104                       	smpsAlterNote       $04
000859D4 E701                       	dc.b	smpsNoAttack, $01
000859D6 E108                       	smpsAlterNote       $08
000859D8 E701                       	dc.b	smpsNoAttack, $01
000859DA E10E                       	smpsAlterNote       $0E
000859DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859E0 E10B                       	smpsAlterNote       $0B
000859E2 E701                       	dc.b	smpsNoAttack, $01
000859E4 E105                       	smpsAlterNote       $05
000859E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859EA E10B                       	smpsAlterNote       $0B
000859EC E701                       	dc.b	smpsNoAttack, $01
000859EE E10E                       	smpsAlterNote       $0E
000859F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859F4 E108                       	smpsAlterNote       $08
000859F6 E701                       	dc.b	smpsNoAttack, $01
000859F8 E104                       	smpsAlterNote       $04
000859FA E701                       	dc.b	smpsNoAttack, $01
000859FC E105                       	smpsAlterNote       $05
000859FE E701                       	dc.b	smpsNoAttack, $01
00085A00 E10B                       	smpsAlterNote       $0B
00085A02 E701                       	dc.b	smpsNoAttack, $01
00085A04 E10F                       	smpsAlterNote       $0F
00085A06 E701                       	dc.b	smpsNoAttack, $01
00085A08 E10B                       	smpsAlterNote       $0B
00085A0A E701                       	dc.b	smpsNoAttack, $01
00085A0C E108                       	smpsAlterNote       $08
00085A0E E701                       	dc.b	smpsNoAttack, $01
00085A10 E104                       	smpsAlterNote       $04
00085A12 E701                       	dc.b	smpsNoAttack, $01
00085A14 E108                       	smpsAlterNote       $08
00085A16 E701                       	dc.b	smpsNoAttack, $01
00085A18 E10E                       	smpsAlterNote       $0E
00085A1A E701                       	dc.b	smpsNoAttack, $01
00085A1C E10F                       	smpsAlterNote       $0F
00085A1E E701                       	dc.b	smpsNoAttack, $01
00085A20 E10B                       	smpsAlterNote       $0B
00085A22 E701                       	dc.b	smpsNoAttack, $01
00085A24 E105                       	smpsAlterNote       $05
00085A26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A2A E108                       	smpsAlterNote       $08
00085A2C E701                       	dc.b	smpsNoAttack, $01
00085A2E E10E                       	smpsAlterNote       $0E
00085A30 E701                       	dc.b	smpsNoAttack, $01
00085A32 E10F                       	smpsAlterNote       $0F
00085A34 800F                       	dc.b	nRst, $0F
00085A36 E107                       	smpsAlterNote       $07
00085A38 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00085A3C E108                       	smpsAlterNote       $08
00085A3E C103                       	dc.b	nE5, $03
00085A40 E109                       	smpsAlterNote       $09
00085A42 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00085A48 E10B                       	smpsAlterNote       $0B
00085A4A C607                       	dc.b	nA5, $07
00085A4C E107                       	smpsAlterNote       $07
00085A4E BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085A52 E106                       	smpsAlterNote       $06
00085A54 C90D                       	dc.b	nC6, $0D
00085A56 E107                       	smpsAlterNote       $07
00085A58 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00085A5C E10C                       	smpsAlterNote       $0C
00085A5E C704                       	dc.b	nBb5, $04
00085A60 E10B                       	smpsAlterNote       $0B
00085A62 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085A66 E109                       	smpsAlterNote       $09
00085A68 C404                       	dc.b	nG5, $04
00085A6A E10B                       	smpsAlterNote       $0B
00085A6C C60D                       	dc.b	nA5, $0D
00085A6E E108                       	smpsAlterNote       $08
00085A70 E701                       	dc.b	smpsNoAttack, $01
00085A72 E105                       	smpsAlterNote       $05
00085A74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A78 E10B                       	smpsAlterNote       $0B
00085A7A E701                       	dc.b	smpsNoAttack, $01
00085A7C E10F                       	smpsAlterNote       $0F
00085A7E E701                       	dc.b	smpsNoAttack, $01
00085A80 E10E                       	smpsAlterNote       $0E
00085A82 E701                       	dc.b	smpsNoAttack, $01
00085A84 E108                       	smpsAlterNote       $08
00085A86 E701                       	dc.b	smpsNoAttack, $01
00085A88 E104                       	smpsAlterNote       $04
00085A8A E701                       	dc.b	smpsNoAttack, $01
00085A8C E108                       	smpsAlterNote       $08
00085A8E E701                       	dc.b	smpsNoAttack, $01
00085A90 E10B                       	smpsAlterNote       $0B
00085A92 E701                       	dc.b	smpsNoAttack, $01
00085A94 E10F                       	smpsAlterNote       $0F
00085A96 E701                       	dc.b	smpsNoAttack, $01
00085A98 E10B                       	smpsAlterNote       $0B
00085A9A E701                       	dc.b	smpsNoAttack, $01
00085A9C E105                       	smpsAlterNote       $05
00085A9E E701                       	dc.b	smpsNoAttack, $01
00085AA0 E104                       	smpsAlterNote       $04
00085AA2 E701                       	dc.b	smpsNoAttack, $01
00085AA4 E108                       	smpsAlterNote       $08
00085AA6 E701                       	dc.b	smpsNoAttack, $01
00085AA8 E10E                       	smpsAlterNote       $0E
00085AAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AAE E10B                       	smpsAlterNote       $0B
00085AB0 E701                       	dc.b	smpsNoAttack, $01
00085AB2 E105                       	smpsAlterNote       $05
00085AB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AB8 E10B                       	smpsAlterNote       $0B
00085ABA E701                       	dc.b	smpsNoAttack, $01
00085ABC E10E                       	smpsAlterNote       $0E
00085ABE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AC2 E108                       	smpsAlterNote       $08
00085AC4 E701                       	dc.b	smpsNoAttack, $01
00085AC6 E105                       	smpsAlterNote       $05
00085AC8 8001                       	dc.b	nRst, $01
00085ACA E109                       	smpsAlterNote       $09
00085ACC C401 8001                  	dc.b	nG5, $01, nRst, $01
00085AD0 E10B                       	smpsAlterNote       $0B
00085AD2 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00085ADA E109                       	smpsAlterNote       $09
00085ADC C404                       	dc.b	nG5, $04
00085ADE E10B                       	smpsAlterNote       $0B
00085AE0 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085AE4 E107                       	smpsAlterNote       $07
00085AE6 BF0D                       	dc.b	nD5, $0D
00085AE8 E101                       	smpsAlterNote       $01
00085AEA E701                       	dc.b	smpsNoAttack, $01
00085AEC E100                       	smpsAlterNote       $00
00085AEE E701                       	dc.b	smpsNoAttack, $01
00085AF0 E104                       	smpsAlterNote       $04
00085AF2 E701                       	dc.b	smpsNoAttack, $01
00085AF4 E10A                       	smpsAlterNote       $0A
00085AF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AFA E107                       	smpsAlterNote       $07
00085AFC E701                       	dc.b	smpsNoAttack, $01
00085AFE E101                       	smpsAlterNote       $01
00085B00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B04 E107                       	smpsAlterNote       $07
00085B06 E701                       	dc.b	smpsNoAttack, $01
00085B08 E10A                       	smpsAlterNote       $0A
00085B0A E701                       	dc.b	smpsNoAttack, $01
00085B0C E10B                       	smpsAlterNote       $0B
00085B0E 8001                       	dc.b	nRst, $01
00085B10 E108                       	smpsAlterNote       $08
00085B12 8001                       	dc.b	nRst, $01
00085B14 E109                       	smpsAlterNote       $09
00085B16 8001 C401                  	dc.b	nRst, $01, nG5, $01
00085B1A E10B                       	smpsAlterNote       $0B
00085B1C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00085B24 E108                       	smpsAlterNote       $08
00085B26 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085B2A E109                       	smpsAlterNote       $09
00085B2C CE06 8001                  	dc.b	nF6, $06, nRst, $01
00085B30 E108                       	smpsAlterNote       $08
00085B32 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00085B36 E106                       	smpsAlterNote       $06
00085B38 C903                       	dc.b	nC6, $03
00085B3A E109                       	smpsAlterNote       $09
00085B3C C403 8001                  	dc.b	nG5, $03, nRst, $01
00085B40 E10C                       	smpsAlterNote       $0C
00085B42 C70D                       	dc.b	nBb5, $0D
00085B44 E109                       	smpsAlterNote       $09
00085B46 E701                       	dc.b	smpsNoAttack, $01
00085B48 E105                       	smpsAlterNote       $05
00085B4A E701                       	dc.b	smpsNoAttack, $01
00085B4C E109                       	smpsAlterNote       $09
00085B4E E701                       	dc.b	smpsNoAttack, $01
00085B50 E10F                       	smpsAlterNote       $0F
00085B52 E701                       	dc.b	smpsNoAttack, $01
00085B54 E110                       	smpsAlterNote       $10
00085B56 E701                       	dc.b	smpsNoAttack, $01
00085B58 E10C                       	smpsAlterNote       $0C
00085B5A E701                       	dc.b	smpsNoAttack, $01
00085B5C E106                       	smpsAlterNote       $06
00085B5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B62 E109                       	smpsAlterNote       $09
00085B64 E701                       	dc.b	smpsNoAttack, $01
00085B66 E10F                       	smpsAlterNote       $0F
00085B68 E701                       	dc.b	smpsNoAttack, $01
00085B6A E110                       	smpsAlterNote       $10
00085B6C 8001                       	dc.b	nRst, $01
00085B6E E10B                       	smpsAlterNote       $0B
00085B70 C606 8001                  	dc.b	nA5, $06, nRst, $01
00085B74 E109                       	smpsAlterNote       $09
00085B76 C40D                       	dc.b	nG5, $0D
00085B78 E103                       	smpsAlterNote       $03
00085B7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B7E E106                       	smpsAlterNote       $06
00085B80 E701                       	dc.b	smpsNoAttack, $01
00085B82 E10C                       	smpsAlterNote       $0C
00085B84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B88 E106                       	smpsAlterNote       $06
00085B8A E701                       	dc.b	smpsNoAttack, $01
00085B8C E103                       	smpsAlterNote       $03
00085B8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B92 E109                       	smpsAlterNote       $09
00085B94 E701                       	dc.b	smpsNoAttack, $01
00085B96 E10D                       	smpsAlterNote       $0D
00085B98 E701                       	dc.b	smpsNoAttack, $01
00085B9A E10C                       	smpsAlterNote       $0C
00085B9C E701                       	dc.b	smpsNoAttack, $01
00085B9E E106                       	smpsAlterNote       $06
00085BA0 E701                       	dc.b	smpsNoAttack, $01
00085BA2 E102                       	smpsAlterNote       $02
00085BA4 E701                       	dc.b	smpsNoAttack, $01
00085BA6 E103                       	smpsAlterNote       $03
00085BA8 8001                       	dc.b	nRst, $01
00085BAA E10B                       	smpsAlterNote       $0B
00085BAC C60D                       	dc.b	nA5, $0D
00085BAE E108                       	smpsAlterNote       $08
00085BB0 E701                       	dc.b	smpsNoAttack, $01
00085BB2 E104                       	smpsAlterNote       $04
00085BB4 E701                       	dc.b	smpsNoAttack, $01
00085BB6 E108                       	smpsAlterNote       $08
00085BB8 E701                       	dc.b	smpsNoAttack, $01
00085BBA E10B                       	smpsAlterNote       $0B
00085BBC E701                       	dc.b	smpsNoAttack, $01
00085BBE E10F                       	smpsAlterNote       $0F
00085BC0 E701                       	dc.b	smpsNoAttack, $01
00085BC2 E10B                       	smpsAlterNote       $0B
00085BC4 E701                       	dc.b	smpsNoAttack, $01
00085BC6 E105                       	smpsAlterNote       $05
00085BC8 E701                       	dc.b	smpsNoAttack, $01
00085BCA E104                       	smpsAlterNote       $04
00085BCC E701                       	dc.b	smpsNoAttack, $01
00085BCE E108                       	smpsAlterNote       $08
00085BD0 E701                       	dc.b	smpsNoAttack, $01
00085BD2 E10E                       	smpsAlterNote       $0E
00085BD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BD8 E10B                       	smpsAlterNote       $0B
00085BDA E701                       	dc.b	smpsNoAttack, $01
00085BDC E105                       	smpsAlterNote       $05
00085BDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BE2 E10C                       	smpsAlterNote       $0C
00085BE4 C70E                       	dc.b	nBb5, $0E
00085BE6 E106                       	smpsAlterNote       $06
00085BE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BEC E10C                       	smpsAlterNote       $0C
00085BEE E701                       	dc.b	smpsNoAttack, $01
00085BF0 E10F                       	smpsAlterNote       $0F
00085BF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BF6 E109                       	smpsAlterNote       $09
00085BF8 E701                       	dc.b	smpsNoAttack, $01
00085BFA E105                       	smpsAlterNote       $05
00085BFC E701                       	dc.b	smpsNoAttack, $01
00085BFE E106                       	smpsAlterNote       $06
00085C00 E701                       	dc.b	smpsNoAttack, $01
00085C02 E10C                       	smpsAlterNote       $0C
00085C04 E701                       	dc.b	smpsNoAttack, $01
00085C06 E110                       	smpsAlterNote       $10
00085C08 E701                       	dc.b	smpsNoAttack, $01
00085C0A E10C                       	smpsAlterNote       $0C
00085C0C E701                       	dc.b	smpsNoAttack, $01
00085C0E E109                       	smpsAlterNote       $09
00085C10 E701                       	dc.b	smpsNoAttack, $01
00085C12 E105                       	smpsAlterNote       $05
00085C14 E701                       	dc.b	smpsNoAttack, $01
00085C16 E106                       	smpsAlterNote       $06
00085C18 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00085C1C E107                       	smpsAlterNote       $07
00085C1E CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00085C23 E108                       	smpsAlterNote       $08
00085C25 CD0D                       	dc.b	nE6, $0D
00085C27 E107                       	smpsAlterNote       $07
00085C29 CB0D                       	dc.b	nD6, $0D
00085C2B E104                       	smpsAlterNote       $04
00085C2D E701                       	dc.b	smpsNoAttack, $01
00085C2F E100                       	smpsAlterNote       $00
00085C31 E701                       	dc.b	smpsNoAttack, $01
00085C33 E101                       	smpsAlterNote       $01
00085C35 E701                       	dc.b	smpsNoAttack, $01
00085C37 E107                       	smpsAlterNote       $07
00085C39 E701                       	dc.b	smpsNoAttack, $01
00085C3B E10B                       	smpsAlterNote       $0B
00085C3D E701                       	dc.b	smpsNoAttack, $01
00085C3F E107                       	smpsAlterNote       $07
00085C41 E701                       	dc.b	smpsNoAttack, $01
00085C43 E104                       	smpsAlterNote       $04
00085C45 E701                       	dc.b	smpsNoAttack, $01
00085C47 E100                       	smpsAlterNote       $00
00085C49 E701                       	dc.b	smpsNoAttack, $01
00085C4B E104                       	smpsAlterNote       $04
00085C4D E701                       	dc.b	smpsNoAttack, $01
00085C4F E10A                       	smpsAlterNote       $0A
00085C51 E701                       	dc.b	smpsNoAttack, $01
00085C53 E10B                       	smpsAlterNote       $0B
00085C55 E701                       	dc.b	smpsNoAttack, $01
00085C57 E108                       	smpsAlterNote       $08
00085C59 CC0D                       	dc.b	nEb6, $0D
00085C5B E105                       	smpsAlterNote       $05
00085C5D E701                       	dc.b	smpsNoAttack, $01
00085C5F E101                       	smpsAlterNote       $01
00085C61 E701                       	dc.b	smpsNoAttack, $01
00085C63 E102                       	smpsAlterNote       $02
00085C65 E701                       	dc.b	smpsNoAttack, $01
00085C67 E108                       	smpsAlterNote       $08
00085C69 E701                       	dc.b	smpsNoAttack, $01
00085C6B E106                       	smpsAlterNote       $06
00085C6D C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00085C79 8001                       	dc.b	nRst, $01
00085C7B E107                       	smpsAlterNote       $07
00085C7D CB0D                       	dc.b	nD6, $0D
00085C7F E104                       	smpsAlterNote       $04
00085C81 E701                       	dc.b	smpsNoAttack, $01
00085C83 E100                       	smpsAlterNote       $00
00085C85 E701                       	dc.b	smpsNoAttack, $01
00085C87 E104                       	smpsAlterNote       $04
00085C89 E701                       	dc.b	smpsNoAttack, $01
00085C8B E107                       	smpsAlterNote       $07
00085C8D E701                       	dc.b	smpsNoAttack, $01
00085C8F E10B                       	smpsAlterNote       $0B
00085C91 E701                       	dc.b	smpsNoAttack, $01
00085C93 E107                       	smpsAlterNote       $07
00085C95 E701                       	dc.b	smpsNoAttack, $01
00085C97 E101                       	smpsAlterNote       $01
00085C99 E701                       	dc.b	smpsNoAttack, $01
00085C9B E100                       	smpsAlterNote       $00
00085C9D E701                       	dc.b	smpsNoAttack, $01
00085C9F E104                       	smpsAlterNote       $04
00085CA1 E701                       	dc.b	smpsNoAttack, $01
00085CA3 E10A                       	smpsAlterNote       $0A
00085CA5 E701                       	dc.b	smpsNoAttack, $01
00085CA7 E10B                       	smpsAlterNote       $0B
00085CA9 8001                       	dc.b	nRst, $01
00085CAB E109                       	smpsAlterNote       $09
00085CAD CE0A                       	dc.b	nF6, $0A
00085CAF E108                       	smpsAlterNote       $08
00085CB1 CC07                       	dc.b	nEb6, $07
00085CB3 E106                       	smpsAlterNote       $06
00085CB5 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00085CC1 E107                       	smpsAlterNote       $07
00085CC3 CB0D                       	dc.b	nD6, $0D
00085CC5 E101                       	smpsAlterNote       $01
00085CC7 E701                       	dc.b	smpsNoAttack, $01
00085CC9 E100                       	smpsAlterNote       $00
00085CCB E701                       	dc.b	smpsNoAttack, $01
00085CCD E104                       	smpsAlterNote       $04
00085CCF E701                       	dc.b	smpsNoAttack, $01
00085CD1 E10A                       	smpsAlterNote       $0A
00085CD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CD7 E107                       	smpsAlterNote       $07
00085CD9 E701                       	dc.b	smpsNoAttack, $01
00085CDB E101                       	smpsAlterNote       $01
00085CDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CE1 E107                       	smpsAlterNote       $07
00085CE3 E701                       	dc.b	smpsNoAttack, $01
00085CE5 E10A                       	smpsAlterNote       $0A
00085CE7 E701                       	dc.b	smpsNoAttack, $01
00085CE9 E10B                       	smpsAlterNote       $0B
00085CEB 8001                       	dc.b	nRst, $01
00085CED E108                       	smpsAlterNote       $08
00085CEF CC0D                       	dc.b	nEb6, $0D
00085CF1 E102                       	smpsAlterNote       $02
00085CF3 E701                       	dc.b	smpsNoAttack, $01
00085CF5 E101                       	smpsAlterNote       $01
00085CF7 E701                       	dc.b	smpsNoAttack, $01
00085CF9 E105                       	smpsAlterNote       $05
00085CFB E701                       	dc.b	smpsNoAttack, $01
00085CFD E108                       	smpsAlterNote       $08
00085CFF 8001                       	dc.b	nRst, $01
00085D01 E106                       	smpsAlterNote       $06
00085D03 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00085D0F 8001                       	dc.b	nRst, $01
00085D11 E107                       	smpsAlterNote       $07
00085D13 CB0D                       	dc.b	nD6, $0D
00085D15 E101                       	smpsAlterNote       $01
00085D17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D1B E104                       	smpsAlterNote       $04
00085D1D E701                       	dc.b	smpsNoAttack, $01
00085D1F E10A                       	smpsAlterNote       $0A
00085D21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D25 E104                       	smpsAlterNote       $04
00085D27 E701                       	dc.b	smpsNoAttack, $01
00085D29 E101                       	smpsAlterNote       $01
00085D2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D2F E107                       	smpsAlterNote       $07
00085D31 E701                       	dc.b	smpsNoAttack, $01
00085D33 E10B                       	smpsAlterNote       $0B
00085D35 E701                       	dc.b	smpsNoAttack, $01
00085D37 E10A                       	smpsAlterNote       $0A
00085D39 E701                       	dc.b	smpsNoAttack, $01
00085D3B E104                       	smpsAlterNote       $04
00085D3D E701                       	dc.b	smpsNoAttack, $01
00085D3F E100                       	smpsAlterNote       $00
00085D41 E701                       	dc.b	smpsNoAttack, $01
00085D43 E101                       	smpsAlterNote       $01
00085D45 801C                       	dc.b	nRst, $1C
00085D49 E107                       	smpsAlterNote       $07
00085D4B BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085D4F E603                       	smpsAlterVol        $03
00085D51 F6F1 AD                    	smpsJump            music84_Jump03
00085D54                            
00085D54                            ; FM3 Data
00085D54                            music84_FM3:
00085D54 E0C0                       	smpsPan             panCenter, $00
00085D58 E109                       	smpsAlterNote       $09
00085D5A C203 8007                  	dc.b	nF5, $03, nRst, $07
00085D5E E108                       	smpsAlterNote       $08
00085D60 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00085D64 E10B                       	smpsAlterNote       $0B
00085D66 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00085D6C E040                       	smpsPan             panRight, $00
00085D6E E110                       	smpsAlterNote       $10
00085D70 E6F9                       	smpsAlterVol        $F9
00085D72 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00085D76 E10F                       	smpsAlterNote       $0F
00085D78 C603                       	dc.b	nA5, $03
00085D7A E10D                       	smpsAlterNote       $0D
00085D7C C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00085D82 E10C                       	smpsAlterNote       $0C
00085D84 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085D88 E10A                       	smpsAlterNote       $0A
00085D8A BD02 8001                  	dc.b	nC5, $02, nRst, $01
00085D8E E10F                       	smpsAlterNote       $0F
00085D90 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00085D94 E0C0                       	smpsPan             panCenter, $00
00085D98 E109                       	smpsAlterNote       $09
00085D9A E609                       	smpsAlterVol        $09
00085D9C B603                       	dc.b	nF4, $03
00085D9E                            
00085D9E                            music84_Jump02:
00085D9E E70A                       	dc.b	smpsNoAttack, $0A
00085DA0 E103                       	smpsAlterNote       $03
00085DA2 E701                       	dc.b	smpsNoAttack, $01
00085DA4 E102                       	smpsAlterNote       $02
00085DA6 E701                       	dc.b	smpsNoAttack, $01
00085DA8 E106                       	smpsAlterNote       $06
00085DAA E701                       	dc.b	smpsNoAttack, $01
00085DAC E10C                       	smpsAlterNote       $0C
00085DAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DB2 E109                       	smpsAlterNote       $09
00085DB4 E701                       	dc.b	smpsNoAttack, $01
00085DB6 E103                       	smpsAlterNote       $03
00085DB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DBC E109                       	smpsAlterNote       $09
00085DBE E701                       	dc.b	smpsNoAttack, $01
00085DC0 E10C                       	smpsAlterNote       $0C
00085DC2 E701                       	dc.b	smpsNoAttack, $01
00085DC4 E10D                       	smpsAlterNote       $0D
00085DC6 8001                       	dc.b	nRst, $01
00085DC8 E109                       	smpsAlterNote       $09
00085DCA B80D                       	dc.b	nG4, $0D
00085DCC E103                       	smpsAlterNote       $03
00085DCE E701                       	dc.b	smpsNoAttack, $01
00085DD0 E102                       	smpsAlterNote       $02
00085DD2 E701                       	dc.b	smpsNoAttack, $01
00085DD4 E106                       	smpsAlterNote       $06
00085DD6 E701                       	dc.b	smpsNoAttack, $01
00085DD8 E10C                       	smpsAlterNote       $0C
00085DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DDE E109                       	smpsAlterNote       $09
00085DE0 E701                       	dc.b	smpsNoAttack, $01
00085DE2 E103                       	smpsAlterNote       $03
00085DE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DE8 E109                       	smpsAlterNote       $09
00085DEA E701                       	dc.b	smpsNoAttack, $01
00085DEC E10C                       	smpsAlterNote       $0C
00085DEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DF2 E106                       	smpsAlterNote       $06
00085DF4 E701                       	dc.b	smpsNoAttack, $01
00085DF6 E102                       	smpsAlterNote       $02
00085DF8 E701                       	dc.b	smpsNoAttack, $01
00085DFA E103                       	smpsAlterNote       $03
00085DFC E701                       	dc.b	smpsNoAttack, $01
00085DFE E109                       	smpsAlterNote       $09
00085E00 E701                       	dc.b	smpsNoAttack, $01
00085E02 E10D                       	smpsAlterNote       $0D
00085E04 E701                       	dc.b	smpsNoAttack, $01
00085E06 E109                       	smpsAlterNote       $09
00085E08 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085E0C E10B                       	smpsAlterNote       $0B
00085E0E BA0D                       	dc.b	nA4, $0D
00085E10 E105                       	smpsAlterNote       $05
00085E12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E16 E108                       	smpsAlterNote       $08
00085E18 E701                       	dc.b	smpsNoAttack, $01
00085E1A E10E                       	smpsAlterNote       $0E
00085E1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E20 E108                       	smpsAlterNote       $08
00085E22 E701                       	dc.b	smpsNoAttack, $01
00085E24 E104                       	smpsAlterNote       $04
00085E26 E701                       	dc.b	smpsNoAttack, $01
00085E28 E105                       	smpsAlterNote       $05
00085E2A E701                       	dc.b	smpsNoAttack, $01
00085E2C E10B                       	smpsAlterNote       $0B
00085E2E E701                       	dc.b	smpsNoAttack, $01
00085E30 E10F                       	smpsAlterNote       $0F
00085E32 E701                       	dc.b	smpsNoAttack, $01
00085E34 E10B                       	smpsAlterNote       $0B
00085E36 E701                       	dc.b	smpsNoAttack, $01
00085E38 E108                       	smpsAlterNote       $08
00085E3A E701                       	dc.b	smpsNoAttack, $01
00085E3C E104                       	smpsAlterNote       $04
00085E3E E701                       	dc.b	smpsNoAttack, $01
00085E40 E108                       	smpsAlterNote       $08
00085E42 E701                       	dc.b	smpsNoAttack, $01
00085E44 E10E                       	smpsAlterNote       $0E
00085E46 E701                       	dc.b	smpsNoAttack, $01
00085E48 E10F                       	smpsAlterNote       $0F
00085E4A E701                       	dc.b	smpsNoAttack, $01
00085E4C E10B                       	smpsAlterNote       $0B
00085E4E E701                       	dc.b	smpsNoAttack, $01
00085E50 E105                       	smpsAlterNote       $05
00085E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E56 E108                       	smpsAlterNote       $08
00085E58 E701                       	dc.b	smpsNoAttack, $01
00085E5A E10E                       	smpsAlterNote       $0E
00085E5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E60 E108                       	smpsAlterNote       $08
00085E62 E701                       	dc.b	smpsNoAttack, $01
00085E64 E105                       	smpsAlterNote       $05
00085E66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E6A E10B                       	smpsAlterNote       $0B
00085E6C E701                       	dc.b	smpsNoAttack, $01
00085E6E E10F                       	smpsAlterNote       $0F
00085E70 E701                       	dc.b	smpsNoAttack, $01
00085E72 E10E                       	smpsAlterNote       $0E
00085E74 E701                       	dc.b	smpsNoAttack, $01
00085E76 E108                       	smpsAlterNote       $08
00085E78 E701                       	dc.b	smpsNoAttack, $01
00085E7A E104                       	smpsAlterNote       $04
00085E7C E701                       	dc.b	smpsNoAttack, $01
00085E7E E105                       	smpsAlterNote       $05
00085E80 8001                       	dc.b	nRst, $01
00085E82 E108                       	smpsAlterNote       $08
00085E84 B50A                       	dc.b	nE4, $0A
00085E86 E109                       	smpsAlterNote       $09
00085E88 B60D                       	dc.b	nF4, $0D
00085E8A E106                       	smpsAlterNote       $06
00085E8C E701                       	dc.b	smpsNoAttack, $01
00085E8E E103                       	smpsAlterNote       $03
00085E90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E94 E109                       	smpsAlterNote       $09
00085E96 E701                       	dc.b	smpsNoAttack, $01
00085E98 E10D                       	smpsAlterNote       $0D
00085E9A E701                       	dc.b	smpsNoAttack, $01
00085E9C E10C                       	smpsAlterNote       $0C
00085E9E E701                       	dc.b	smpsNoAttack, $01
00085EA0 E106                       	smpsAlterNote       $06
00085EA2 E701                       	dc.b	smpsNoAttack, $01
00085EA4 E102                       	smpsAlterNote       $02
00085EA6 E701                       	dc.b	smpsNoAttack, $01
00085EA8 E106                       	smpsAlterNote       $06
00085EAA E701                       	dc.b	smpsNoAttack, $01
00085EAC E109                       	smpsAlterNote       $09
00085EAE E701                       	dc.b	smpsNoAttack, $01
00085EB0 E10D                       	smpsAlterNote       $0D
00085EB2 E701                       	dc.b	smpsNoAttack, $01
00085EB4 E109                       	smpsAlterNote       $09
00085EB6 B80D                       	dc.b	nG4, $0D
00085EB8 E106                       	smpsAlterNote       $06
00085EBA E701                       	dc.b	smpsNoAttack, $01
00085EBC E103                       	smpsAlterNote       $03
00085EBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EC2 E109                       	smpsAlterNote       $09
00085EC4 E701                       	dc.b	smpsNoAttack, $01
00085EC6 E10D                       	smpsAlterNote       $0D
00085EC8 E701                       	dc.b	smpsNoAttack, $01
00085ECA E10C                       	smpsAlterNote       $0C
00085ECC E701                       	dc.b	smpsNoAttack, $01
00085ECE E106                       	smpsAlterNote       $06
00085ED0 E701                       	dc.b	smpsNoAttack, $01
00085ED2 E102                       	smpsAlterNote       $02
00085ED4 E701                       	dc.b	smpsNoAttack, $01
00085ED6 E106                       	smpsAlterNote       $06
00085ED8 E701                       	dc.b	smpsNoAttack, $01
00085EDA E109                       	smpsAlterNote       $09
00085EDC E701                       	dc.b	smpsNoAttack, $01
00085EDE E10D                       	smpsAlterNote       $0D
00085EE0 E701                       	dc.b	smpsNoAttack, $01
00085EE2 E109                       	smpsAlterNote       $09
00085EE4 E701                       	dc.b	smpsNoAttack, $01
00085EE6 E103                       	smpsAlterNote       $03
00085EE8 E701                       	dc.b	smpsNoAttack, $01
00085EEA E102                       	smpsAlterNote       $02
00085EEC E701                       	dc.b	smpsNoAttack, $01
00085EEE E106                       	smpsAlterNote       $06
00085EF0 E701                       	dc.b	smpsNoAttack, $01
00085EF2 E10C                       	smpsAlterNote       $0C
00085EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EF8 E109                       	smpsAlterNote       $09
00085EFA E701                       	dc.b	smpsNoAttack, $01
00085EFC E10B                       	smpsAlterNote       $0B
00085EFE BA0D                       	dc.b	nA4, $0D
00085F00 E108                       	smpsAlterNote       $08
00085F02 E701                       	dc.b	smpsNoAttack, $01
00085F04 E104                       	smpsAlterNote       $04
00085F06 E701                       	dc.b	smpsNoAttack, $01
00085F08 E108                       	smpsAlterNote       $08
00085F0A E701                       	dc.b	smpsNoAttack, $01
00085F0C E10B                       	smpsAlterNote       $0B
00085F0E E701                       	dc.b	smpsNoAttack, $01
00085F10 E10F                       	smpsAlterNote       $0F
00085F12 E701                       	dc.b	smpsNoAttack, $01
00085F14 E10B                       	smpsAlterNote       $0B
00085F16 E701                       	dc.b	smpsNoAttack, $01
00085F18 E105                       	smpsAlterNote       $05
00085F1A E701                       	dc.b	smpsNoAttack, $01
00085F1C E104                       	smpsAlterNote       $04
00085F1E E701                       	dc.b	smpsNoAttack, $01
00085F20 E108                       	smpsAlterNote       $08
00085F22 E701                       	dc.b	smpsNoAttack, $01
00085F24 E10E                       	smpsAlterNote       $0E
00085F26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F2A E10B                       	smpsAlterNote       $0B
00085F2C E701                       	dc.b	smpsNoAttack, $01
00085F2E E105                       	smpsAlterNote       $05
00085F30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F34 E10B                       	smpsAlterNote       $0B
00085F36 E701                       	dc.b	smpsNoAttack, $01
00085F38 E10E                       	smpsAlterNote       $0E
00085F3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F3E E108                       	smpsAlterNote       $08
00085F40 E701                       	dc.b	smpsNoAttack, $01
00085F42 E104                       	smpsAlterNote       $04
00085F44 E701                       	dc.b	smpsNoAttack, $01
00085F46 E105                       	smpsAlterNote       $05
00085F48 E701                       	dc.b	smpsNoAttack, $01
00085F4A E10B                       	smpsAlterNote       $0B
00085F4C E701                       	dc.b	smpsNoAttack, $01
00085F4E E10F                       	smpsAlterNote       $0F
00085F50 E701                       	dc.b	smpsNoAttack, $01
00085F52 E10B                       	smpsAlterNote       $0B
00085F54 E701                       	dc.b	smpsNoAttack, $01
00085F56 E108                       	smpsAlterNote       $08
00085F58 E701                       	dc.b	smpsNoAttack, $01
00085F5A E105                       	smpsAlterNote       $05
00085F5C 8001                       	dc.b	nRst, $01
00085F5E E109                       	smpsAlterNote       $09
00085F60 B609 8001                  	dc.b	nF4, $09, nRst, $01
00085F64 E108                       	smpsAlterNote       $08
00085F66 B506 8001                  	dc.b	nE4, $06, nRst, $01
00085F6A E107                       	smpsAlterNote       $07
00085F6C B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085F70 E108                       	smpsAlterNote       $08
00085F72 B502 8001                  	dc.b	nE4, $02, nRst, $01
00085F76 E109                       	smpsAlterNote       $09
00085F78 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00085F7E E10B                       	smpsAlterNote       $0B
00085F80 BA0D                       	dc.b	nA4, $0D
00085F82 E108                       	smpsAlterNote       $08
00085F84 E701                       	dc.b	smpsNoAttack, $01
00085F86 E104                       	smpsAlterNote       $04
00085F88 E701                       	dc.b	smpsNoAttack, $01
00085F8A E108                       	smpsAlterNote       $08
00085F8C E701                       	dc.b	smpsNoAttack, $01
00085F8E E10E                       	smpsAlterNote       $0E
00085F90 E701                       	dc.b	smpsNoAttack, $01
00085F92 E10F                       	smpsAlterNote       $0F
00085F94 E701                       	dc.b	smpsNoAttack, $01
00085F96 E10B                       	smpsAlterNote       $0B
00085F98 E701                       	dc.b	smpsNoAttack, $01
00085F9A E105                       	smpsAlterNote       $05
00085F9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FA0 E108                       	smpsAlterNote       $08
00085FA2 E701                       	dc.b	smpsNoAttack, $01
00085FA4 E10E                       	smpsAlterNote       $0E
00085FA6 E701                       	dc.b	smpsNoAttack, $01
00085FA8 E10F                       	smpsAlterNote       $0F
00085FAA 8001                       	dc.b	nRst, $01
00085FAC E109                       	smpsAlterNote       $09
00085FAE C20D                       	dc.b	nF5, $0D
00085FB0 E103                       	smpsAlterNote       $03
00085FB2 E701                       	dc.b	smpsNoAttack, $01
00085FB4 E102                       	smpsAlterNote       $02
00085FB6 E701                       	dc.b	smpsNoAttack, $01
00085FB8 E106                       	smpsAlterNote       $06
00085FBA E701                       	dc.b	smpsNoAttack, $01
00085FBC E10C                       	smpsAlterNote       $0C
00085FBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FC2 E109                       	smpsAlterNote       $09
00085FC4 E701                       	dc.b	smpsNoAttack, $01
00085FC6 E103                       	smpsAlterNote       $03
00085FC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FCC E109                       	smpsAlterNote       $09
00085FCE E701                       	dc.b	smpsNoAttack, $01
00085FD0 E10C                       	smpsAlterNote       $0C
00085FD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FD6 E106                       	smpsAlterNote       $06
00085FD8 E701                       	dc.b	smpsNoAttack, $01
00085FDA E102                       	smpsAlterNote       $02
00085FDC E701                       	dc.b	smpsNoAttack, $01
00085FDE E103                       	smpsAlterNote       $03
00085FE0 E701                       	dc.b	smpsNoAttack, $01
00085FE2 E109                       	smpsAlterNote       $09
00085FE4 E701                       	dc.b	smpsNoAttack, $01
00085FE6 E10D                       	smpsAlterNote       $0D
00085FE8 E701                       	dc.b	smpsNoAttack, $01
00085FEA E109                       	smpsAlterNote       $09
00085FEC E701                       	dc.b	smpsNoAttack, $01
00085FEE E106                       	smpsAlterNote       $06
00085FF0 E701                       	dc.b	smpsNoAttack, $01
00085FF2 E102                       	smpsAlterNote       $02
00085FF4 E701                       	dc.b	smpsNoAttack, $01
00085FF6 E106                       	smpsAlterNote       $06
00085FF8 E701                       	dc.b	smpsNoAttack, $01
00085FFA E10C                       	smpsAlterNote       $0C
00085FFC E701                       	dc.b	smpsNoAttack, $01
00085FFE E10D                       	smpsAlterNote       $0D
00086000 E701                       	dc.b	smpsNoAttack, $01
00086002 E109                       	smpsAlterNote       $09
00086004 E701                       	dc.b	smpsNoAttack, $01
00086006 E103                       	smpsAlterNote       $03
00086008 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008600C E106                       	smpsAlterNote       $06
0008600E E701                       	dc.b	smpsNoAttack, $01
00086010 E10C                       	smpsAlterNote       $0C
00086012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086016 E106                       	smpsAlterNote       $06
00086018 E701                       	dc.b	smpsNoAttack, $01
0008601A E103                       	smpsAlterNote       $03
0008601C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086020 E109                       	smpsAlterNote       $09
00086022 E701                       	dc.b	smpsNoAttack, $01
00086024 E10D                       	smpsAlterNote       $0D
00086026 E701                       	dc.b	smpsNoAttack, $01
00086028 E10C                       	smpsAlterNote       $0C
0008602A E701                       	dc.b	smpsNoAttack, $01
0008602C E106                       	smpsAlterNote       $06
0008602E E701                       	dc.b	smpsNoAttack, $01
00086030 E102                       	smpsAlterNote       $02
00086032 E701                       	dc.b	smpsNoAttack, $01
00086034 E106                       	smpsAlterNote       $06
00086036 E701                       	dc.b	smpsNoAttack, $01
00086038 E109                       	smpsAlterNote       $09
0008603A E701                       	dc.b	smpsNoAttack, $01
0008603C E10D                       	smpsAlterNote       $0D
0008603E E701                       	dc.b	smpsNoAttack, $01
00086040 E109                       	smpsAlterNote       $09
00086042 E701                       	dc.b	smpsNoAttack, $01
00086044 E103                       	smpsAlterNote       $03
00086046 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008604A E109                       	smpsAlterNote       $09
0008604C C206                       	dc.b	nF5, $06
0008604E E108                       	smpsAlterNote       $08
00086050 C10E                       	dc.b	nE5, $0E
00086052 E102                       	smpsAlterNote       $02
00086054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086058 E108                       	smpsAlterNote       $08
0008605A E701                       	dc.b	smpsNoAttack, $01
0008605C E10B                       	smpsAlterNote       $0B
0008605E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086062 E105                       	smpsAlterNote       $05
00086064 E701                       	dc.b	smpsNoAttack, $01
00086066 E101                       	smpsAlterNote       $01
00086068 E701                       	dc.b	smpsNoAttack, $01
0008606A E102                       	smpsAlterNote       $02
0008606C E701                       	dc.b	smpsNoAttack, $01
0008606E E108                       	smpsAlterNote       $08
00086070 E701                       	dc.b	smpsNoAttack, $01
00086072 E10C                       	smpsAlterNote       $0C
00086074 E701                       	dc.b	smpsNoAttack, $01
00086076 E107                       	smpsAlterNote       $07
00086078 BF0E                       	dc.b	nD5, $0E
0008607A E101                       	smpsAlterNote       $01
0008607C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086080 E107                       	smpsAlterNote       $07
00086082 E701                       	dc.b	smpsNoAttack, $01
00086084 E10A                       	smpsAlterNote       $0A
00086086 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008608A E104                       	smpsAlterNote       $04
0008608C E701                       	dc.b	smpsNoAttack, $01
0008608E E100                       	smpsAlterNote       $00
00086090 E701                       	dc.b	smpsNoAttack, $01
00086092 E104                       	smpsAlterNote       $04
00086094 E701                       	dc.b	smpsNoAttack, $01
00086096 E107                       	smpsAlterNote       $07
00086098 E701                       	dc.b	smpsNoAttack, $01
0008609A E10B                       	smpsAlterNote       $0B
0008609C E701                       	dc.b	smpsNoAttack, $01
0008609E E107                       	smpsAlterNote       $07
000860A0 E701                       	dc.b	smpsNoAttack, $01
000860A2 E101                       	smpsAlterNote       $01
000860A4 E701                       	dc.b	smpsNoAttack, $01
000860A6 E100                       	smpsAlterNote       $00
000860A8 E701                       	dc.b	smpsNoAttack, $01
000860AA E104                       	smpsAlterNote       $04
000860AC E701                       	dc.b	smpsNoAttack, $01
000860AE E10A                       	smpsAlterNote       $0A
000860B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860B4 E107                       	smpsAlterNote       $07
000860B6 E701                       	dc.b	smpsNoAttack, $01
000860B8 E101                       	smpsAlterNote       $01
000860BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860BE E107                       	smpsAlterNote       $07
000860C0 E701                       	dc.b	smpsNoAttack, $01
000860C2 E10A                       	smpsAlterNote       $0A
000860C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860C8 E104                       	smpsAlterNote       $04
000860CA E701                       	dc.b	smpsNoAttack, $01
000860CC E100                       	smpsAlterNote       $00
000860CE E701                       	dc.b	smpsNoAttack, $01
000860D0 E101                       	smpsAlterNote       $01
000860D2 E701                       	dc.b	smpsNoAttack, $01
000860D4 E107                       	smpsAlterNote       $07
000860D6 E701                       	dc.b	smpsNoAttack, $01
000860D8 E10B                       	smpsAlterNote       $0B
000860DA E701                       	dc.b	smpsNoAttack, $01
000860DC E107                       	smpsAlterNote       $07
000860DE E701                       	dc.b	smpsNoAttack, $01
000860E0 E104                       	smpsAlterNote       $04
000860E2 E701                       	dc.b	smpsNoAttack, $01
000860E4 E100                       	smpsAlterNote       $00
000860E6 E701                       	dc.b	smpsNoAttack, $01
000860E8 E104                       	smpsAlterNote       $04
000860EA E701                       	dc.b	smpsNoAttack, $01
000860EC E10A                       	smpsAlterNote       $0A
000860EE E701                       	dc.b	smpsNoAttack, $01
000860F0 E10B                       	smpsAlterNote       $0B
000860F2 E701                       	dc.b	smpsNoAttack, $01
000860F4 E107                       	smpsAlterNote       $07
000860F6 E701                       	dc.b	smpsNoAttack, $01
000860F8 E101                       	smpsAlterNote       $01
000860FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860FE E104                       	smpsAlterNote       $04
00086100 E701                       	dc.b	smpsNoAttack, $01
00086102 E10A                       	smpsAlterNote       $0A
00086104 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086108 E104                       	smpsAlterNote       $04
0008610A E701                       	dc.b	smpsNoAttack, $01
0008610C E101                       	smpsAlterNote       $01
0008610E E701                       	dc.b	smpsNoAttack, $01
00086112 E107                       	smpsAlterNote       $07
00086114 E6FF                       	smpsAlterVol        $FF
00086116 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00086122 8004                       	dc.b	nRst, $04
00086126 E109                       	smpsAlterNote       $09
00086128 E602                       	smpsAlterVol        $02
0008612A B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00086130 E108                       	smpsAlterNote       $08
00086132 B502 8001                  	dc.b	nE4, $02, nRst, $01
00086136 E109                       	smpsAlterNote       $09
00086138 B60D                       	dc.b	nF4, $0D
0008613A E106                       	smpsAlterNote       $06
0008613C E701                       	dc.b	smpsNoAttack, $01
0008613E E102                       	smpsAlterNote       $02
00086140 E701                       	dc.b	smpsNoAttack, $01
00086142 E106                       	smpsAlterNote       $06
00086144 E701                       	dc.b	smpsNoAttack, $01
00086146 E109                       	smpsAlterNote       $09
00086148 E701                       	dc.b	smpsNoAttack, $01
0008614A E10D                       	smpsAlterNote       $0D
0008614C E701                       	dc.b	smpsNoAttack, $01
0008614E E109                       	smpsAlterNote       $09
00086150 E701                       	dc.b	smpsNoAttack, $01
00086152 E103                       	smpsAlterNote       $03
00086154 E701                       	dc.b	smpsNoAttack, $01
00086156 E102                       	smpsAlterNote       $02
00086158 E701                       	dc.b	smpsNoAttack, $01
0008615A E106                       	smpsAlterNote       $06
0008615C E701                       	dc.b	smpsNoAttack, $01
0008615E E10C                       	smpsAlterNote       $0C
00086160 E701                       	dc.b	smpsNoAttack, $01
00086162 E10D                       	smpsAlterNote       $0D
00086164 8001                       	dc.b	nRst, $01
00086166 E109                       	smpsAlterNote       $09
00086168 B80D                       	dc.b	nG4, $0D
0008616A E106                       	smpsAlterNote       $06
0008616C E701                       	dc.b	smpsNoAttack, $01
0008616E E102                       	smpsAlterNote       $02
00086170 E701                       	dc.b	smpsNoAttack, $01
00086172 E106                       	smpsAlterNote       $06
00086174 E701                       	dc.b	smpsNoAttack, $01
00086176 E10C                       	smpsAlterNote       $0C
00086178 E701                       	dc.b	smpsNoAttack, $01
0008617A E10D                       	smpsAlterNote       $0D
0008617C E701                       	dc.b	smpsNoAttack, $01
0008617E E109                       	smpsAlterNote       $09
00086180 E701                       	dc.b	smpsNoAttack, $01
00086182 E103                       	smpsAlterNote       $03
00086184 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086188 E106                       	smpsAlterNote       $06
0008618A E701                       	dc.b	smpsNoAttack, $01
0008618C E10C                       	smpsAlterNote       $0C
0008618E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086192 E106                       	smpsAlterNote       $06
00086194 E701                       	dc.b	smpsNoAttack, $01
00086196 E103                       	smpsAlterNote       $03
00086198 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008619C E109                       	smpsAlterNote       $09
0008619E E701                       	dc.b	smpsNoAttack, $01
000861A0 E10D                       	smpsAlterNote       $0D
000861A2 E701                       	dc.b	smpsNoAttack, $01
000861A4 E10C                       	smpsAlterNote       $0C
000861A6 E701                       	dc.b	smpsNoAttack, $01
000861A8 E109                       	smpsAlterNote       $09
000861AA 8001                       	dc.b	nRst, $01
000861AC E10B                       	smpsAlterNote       $0B
000861AE BA03                       	dc.b	nA4, $03
000861B0 E10C                       	smpsAlterNote       $0C
000861B2 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000861B6 E10B                       	smpsAlterNote       $0B
000861B8 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000861BE E10C                       	smpsAlterNote       $0C
000861C0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000861C4 E10B                       	smpsAlterNote       $0B
000861C6 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000861CC E10C                       	smpsAlterNote       $0C
000861CE D303                       	dc.b	nBb6, $03
000861D0 E10B                       	smpsAlterNote       $0B
000861D2 D20D                       	dc.b	nA6, $0D
000861D4 E108                       	smpsAlterNote       $08
000861D6 E701                       	dc.b	smpsNoAttack, $01
000861D8 E104                       	smpsAlterNote       $04
000861DA E701                       	dc.b	smpsNoAttack, $01
000861DC E105                       	smpsAlterNote       $05
000861DE E701                       	dc.b	smpsNoAttack, $01
000861E0 E10B                       	smpsAlterNote       $0B
000861E2 E701                       	dc.b	smpsNoAttack, $01
000861E4 E10F                       	smpsAlterNote       $0F
000861E6 E701                       	dc.b	smpsNoAttack, $01
000861E8 E10B                       	smpsAlterNote       $0B
000861EA E701                       	dc.b	smpsNoAttack, $01
000861EC E108                       	smpsAlterNote       $08
000861EE E701                       	dc.b	smpsNoAttack, $01
000861F0 E104                       	smpsAlterNote       $04
000861F2 E701                       	dc.b	smpsNoAttack, $01
000861F4 E108                       	smpsAlterNote       $08
000861F6 E701                       	dc.b	smpsNoAttack, $01
000861F8 E10E                       	smpsAlterNote       $0E
000861FA E701                       	dc.b	smpsNoAttack, $01
000861FC E10F                       	smpsAlterNote       $0F
000861FE E701                       	dc.b	smpsNoAttack, $01
00086200 E10B                       	smpsAlterNote       $0B
00086202 E701                       	dc.b	smpsNoAttack, $01
00086204 E105                       	smpsAlterNote       $05
00086206 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008620C E109                       	smpsAlterNote       $09
0008620E CE07                       	dc.b	nF6, $07
00086210 E108                       	smpsAlterNote       $08
00086212 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086216 E109                       	smpsAlterNote       $09
00086218 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008621C E108                       	smpsAlterNote       $08
0008621E CC0D                       	dc.b	nEb6, $0D
00086220 E102                       	smpsAlterNote       $02
00086222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086226 E108                       	smpsAlterNote       $08
00086228 E701                       	dc.b	smpsNoAttack, $01
0008622A E10B                       	smpsAlterNote       $0B
0008622C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086230 E105                       	smpsAlterNote       $05
00086232 E701                       	dc.b	smpsNoAttack, $01
00086234 E101                       	smpsAlterNote       $01
00086236 E701                       	dc.b	smpsNoAttack, $01
00086238 E102                       	smpsAlterNote       $02
0008623A E701                       	dc.b	smpsNoAttack, $01
0008623C E108                       	smpsAlterNote       $08
0008623E E701                       	dc.b	smpsNoAttack, $01
00086240 E10C                       	smpsAlterNote       $0C
00086242 E701                       	dc.b	smpsNoAttack, $01
00086244 E108                       	smpsAlterNote       $08
00086246 E701                       	dc.b	smpsNoAttack, $01
00086248 E105                       	smpsAlterNote       $05
0008624A E701                       	dc.b	smpsNoAttack, $01
0008624C E101                       	smpsAlterNote       $01
0008624E E701                       	dc.b	smpsNoAttack, $01
00086250 E105                       	smpsAlterNote       $05
00086252 E701                       	dc.b	smpsNoAttack, $01
00086254 E10B                       	smpsAlterNote       $0B
00086256 E701                       	dc.b	smpsNoAttack, $01
00086258 E10C                       	smpsAlterNote       $0C
0008625A E701                       	dc.b	smpsNoAttack, $01
0008625C E108                       	smpsAlterNote       $08
0008625E E701                       	dc.b	smpsNoAttack, $01
00086260 E107                       	smpsAlterNote       $07
00086262 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008626C E10B                       	smpsAlterNote       $0B
0008626E C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00086278 E109                       	smpsAlterNote       $09
0008627A C203                       	dc.b	nF5, $03
0008627C E108                       	smpsAlterNote       $08
0008627E C103 8001                  	dc.b	nE5, $03, nRst, $01
00086282 E109                       	smpsAlterNote       $09
00086284 C20D                       	dc.b	nF5, $0D
00086286 E108                       	smpsAlterNote       $08
00086288 C10E                       	dc.b	nE5, $0E
0008628A E107                       	smpsAlterNote       $07
0008628C BF0D                       	dc.b	nD5, $0D
0008628E E104                       	smpsAlterNote       $04
00086290 E701                       	dc.b	smpsNoAttack, $01
00086292 E100                       	smpsAlterNote       $00
00086294 E701                       	dc.b	smpsNoAttack, $01
00086296 E104                       	smpsAlterNote       $04
00086298 E701                       	dc.b	smpsNoAttack, $01
0008629A E107                       	smpsAlterNote       $07
0008629C E701                       	dc.b	smpsNoAttack, $01
0008629E E10B                       	smpsAlterNote       $0B
000862A0 E701                       	dc.b	smpsNoAttack, $01
000862A2 E107                       	smpsAlterNote       $07
000862A4 E701                       	dc.b	smpsNoAttack, $01
000862A6 E101                       	smpsAlterNote       $01
000862A8 E701                       	dc.b	smpsNoAttack, $01
000862AA E100                       	smpsAlterNote       $00
000862AC E701                       	dc.b	smpsNoAttack, $01
000862AE E104                       	smpsAlterNote       $04
000862B0 E701                       	dc.b	smpsNoAttack, $01
000862B2 E10A                       	smpsAlterNote       $0A
000862B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862B8 E107                       	smpsAlterNote       $07
000862BA E701                       	dc.b	smpsNoAttack, $01
000862BC E101                       	smpsAlterNote       $01
000862BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862C2 E107                       	smpsAlterNote       $07
000862C4 E701                       	dc.b	smpsNoAttack, $01
000862C6 E10A                       	smpsAlterNote       $0A
000862C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862CC E104                       	smpsAlterNote       $04
000862CE E701                       	dc.b	smpsNoAttack, $01
000862D0 E100                       	smpsAlterNote       $00
000862D2 E701                       	dc.b	smpsNoAttack, $01
000862D4 E101                       	smpsAlterNote       $01
000862D6 E701                       	dc.b	smpsNoAttack, $01
000862D8 E107                       	smpsAlterNote       $07
000862DA E701                       	dc.b	smpsNoAttack, $01
000862DC E10B                       	smpsAlterNote       $0B
000862DE E701                       	dc.b	smpsNoAttack, $01
000862E0 E107                       	smpsAlterNote       $07
000862E2 E701                       	dc.b	smpsNoAttack, $01
000862E4 E104                       	smpsAlterNote       $04
000862E6 E701                       	dc.b	smpsNoAttack, $01
000862E8 E100                       	smpsAlterNote       $00
000862EA E701                       	dc.b	smpsNoAttack, $01
000862EC E104                       	smpsAlterNote       $04
000862EE E701                       	dc.b	smpsNoAttack, $01
000862F0 E10A                       	smpsAlterNote       $0A
000862F2 E701                       	dc.b	smpsNoAttack, $01
000862F4 E10B                       	smpsAlterNote       $0B
000862F6 E701                       	dc.b	smpsNoAttack, $01
000862F8 E107                       	smpsAlterNote       $07
000862FA E701                       	dc.b	smpsNoAttack, $01
000862FC E101                       	smpsAlterNote       $01
000862FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086302 E104                       	smpsAlterNote       $04
00086304 E701                       	dc.b	smpsNoAttack, $01
00086306 E10A                       	smpsAlterNote       $0A
00086308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008630C E104                       	smpsAlterNote       $04
0008630E E701                       	dc.b	smpsNoAttack, $01
00086310 E101                       	smpsAlterNote       $01
00086312 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086316 E107                       	smpsAlterNote       $07
00086318 E701                       	dc.b	smpsNoAttack, $01
0008631A E10B                       	smpsAlterNote       $0B
0008631C E701                       	dc.b	smpsNoAttack, $01
0008631E E10A                       	smpsAlterNote       $0A
00086320 E701                       	dc.b	smpsNoAttack, $01
00086322 E104                       	smpsAlterNote       $04
00086324 E701                       	dc.b	smpsNoAttack, $01
00086326 E100                       	smpsAlterNote       $00
00086328 E701                       	dc.b	smpsNoAttack, $01
0008632A E104                       	smpsAlterNote       $04
0008632C E701                       	dc.b	smpsNoAttack, $01
0008632E E107                       	smpsAlterNote       $07
00086330 E701                       	dc.b	smpsNoAttack, $01
00086332 E10B                       	smpsAlterNote       $0B
00086334 E701                       	dc.b	smpsNoAttack, $01
00086336 E107                       	smpsAlterNote       $07
00086338 E701                       	dc.b	smpsNoAttack, $01
0008633A E101                       	smpsAlterNote       $01
0008633C E701                       	dc.b	smpsNoAttack, $01
0008633E E100                       	smpsAlterNote       $00
00086340 E701                       	dc.b	smpsNoAttack, $01
00086342 E104                       	smpsAlterNote       $04
00086344 E701                       	dc.b	smpsNoAttack, $01
00086346 E10A                       	smpsAlterNote       $0A
00086348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008634C E107                       	smpsAlterNote       $07
0008634E E701                       	dc.b	smpsNoAttack, $01
00086350 E101                       	smpsAlterNote       $01
00086352 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086356 E107                       	smpsAlterNote       $07
00086358 E701                       	dc.b	smpsNoAttack, $01
0008635A E10A                       	smpsAlterNote       $0A
0008635C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086360 E104                       	smpsAlterNote       $04
00086362 E701                       	dc.b	smpsNoAttack, $01
00086364 E100                       	smpsAlterNote       $00
00086366 E701                       	dc.b	smpsNoAttack, $01
00086368 E101                       	smpsAlterNote       $01
0008636A E701                       	dc.b	smpsNoAttack, $01
0008636C E107                       	smpsAlterNote       $07
0008636E E701                       	dc.b	smpsNoAttack, $01
00086370 E10B                       	smpsAlterNote       $0B
00086372 E701                       	dc.b	smpsNoAttack, $01
00086374 E107                       	smpsAlterNote       $07
00086376 E701                       	dc.b	smpsNoAttack, $01
00086378 E104                       	smpsAlterNote       $04
0008637A E701                       	dc.b	smpsNoAttack, $01
0008637C E100                       	smpsAlterNote       $00
0008637E E701                       	dc.b	smpsNoAttack, $01
00086380 E101                       	smpsAlterNote       $01
00086382 8001                       	dc.b	nRst, $01
00086384 E109                       	smpsAlterNote       $09
00086386 C20D                       	dc.b	nF5, $0D
00086388 E106                       	smpsAlterNote       $06
0008638A E701                       	dc.b	smpsNoAttack, $01
0008638C E102                       	smpsAlterNote       $02
0008638E E701                       	dc.b	smpsNoAttack, $01
00086390 E106                       	smpsAlterNote       $06
00086392 E701                       	dc.b	smpsNoAttack, $01
00086394 E10C                       	smpsAlterNote       $0C
00086396 E701                       	dc.b	smpsNoAttack, $01
00086398 E10D                       	smpsAlterNote       $0D
0008639A E701                       	dc.b	smpsNoAttack, $01
0008639C E109                       	smpsAlterNote       $09
0008639E E701                       	dc.b	smpsNoAttack, $01
000863A0 E103                       	smpsAlterNote       $03
000863A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863A6 E106                       	smpsAlterNote       $06
000863A8 E701                       	dc.b	smpsNoAttack, $01
000863AA E10C                       	smpsAlterNote       $0C
000863AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863B0 E106                       	smpsAlterNote       $06
000863B2 E701                       	dc.b	smpsNoAttack, $01
000863B4 E103                       	smpsAlterNote       $03
000863B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863BA E109                       	smpsAlterNote       $09
000863BC E701                       	dc.b	smpsNoAttack, $01
000863BE E10D                       	smpsAlterNote       $0D
000863C0 E701                       	dc.b	smpsNoAttack, $01
000863C2 E10C                       	smpsAlterNote       $0C
000863C4 E701                       	dc.b	smpsNoAttack, $01
000863C6 E109                       	smpsAlterNote       $09
000863C8 8001                       	dc.b	nRst, $01
000863CA E108                       	smpsAlterNote       $08
000863CC C10D                       	dc.b	nE5, $0D
000863CE E109                       	smpsAlterNote       $09
000863D0 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000863D4 E108                       	smpsAlterNote       $08
000863D6 C10D                       	dc.b	nE5, $0D
000863D8 E102                       	smpsAlterNote       $02
000863DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863DE E105                       	smpsAlterNote       $05
000863E0 E701                       	dc.b	smpsNoAttack, $01
000863E2 E108                       	smpsAlterNote       $08
000863E4 8001                       	dc.b	nRst, $01
000863E6 E107                       	smpsAlterNote       $07
000863E8 BF0D                       	dc.b	nD5, $0D
000863EA E108                       	smpsAlterNote       $08
000863EC C107                       	dc.b	nE5, $07
000863EE E109                       	smpsAlterNote       $09
000863F0 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000863F6 E10B                       	smpsAlterNote       $0B
000863F8 C603                       	dc.b	nA5, $03
000863FA E10C                       	smpsAlterNote       $0C
000863FC C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00086402 E10B                       	smpsAlterNote       $0B
00086404 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008640A E109                       	smpsAlterNote       $09
0008640C D003                       	dc.b	nG6, $03
0008640E E108                       	smpsAlterNote       $08
00086410 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00086414 E10B                       	smpsAlterNote       $0B
00086416 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008641A E108                       	smpsAlterNote       $08
0008641C C102                       	dc.b	nE5, $02
00086420 E10C                       	smpsAlterNote       $0C
00086422 E6FB                       	smpsAlterVol        $FB
00086424 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00086430 8001                       	dc.b	nRst, $01
00086432 E10B                       	smpsAlterNote       $0B
00086434 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008643C E107                       	smpsAlterNote       $07
0008643E A706 8001                  	dc.b	nD3, $06, nRst, $01
00086442 E10B                       	smpsAlterNote       $0B
00086444 A203                       	dc.b	nA2, $03
00086446 E109                       	smpsAlterNote       $09
00086448 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008644C E108                       	smpsAlterNote       $08
0008644E A906                       	dc.b	nE3, $06
00086450 E107                       	smpsAlterNote       $07
00086452 A703 8001                  	dc.b	nD3, $03, nRst, $01
00086456 E106                       	smpsAlterNote       $06
00086458 A503                       	dc.b	nC3, $03
0008645A E10C                       	smpsAlterNote       $0C
0008645C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00086460 E10B                       	smpsAlterNote       $0B
00086462 A203 8004                  	dc.b	nA2, $03, nRst, $04
00086466 E11B                       	smpsAlterNote       $1B
00086468 C401                       	dc.b	nG5, $01
0008646A E1F4                       	smpsAlterNote       $F4
0008646C E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008646F E106                       	smpsAlterNote       $06
00086471 E701                       	dc.b	smpsNoAttack, $01
00086473 E10F                       	smpsAlterNote       $0F
00086475 E701                       	dc.b	smpsNoAttack, $01
00086477 E1E4                       	smpsAlterNote       $E4
00086479 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008647C E1F6                       	smpsAlterNote       $F6
0008647E E701                       	dc.b	smpsNoAttack, $01
00086480 E108                       	smpsAlterNote       $08
00086482 E701                       	dc.b	smpsNoAttack, $01
00086484 E10B                       	smpsAlterNote       $0B
00086486 E706                       	dc.b	smpsNoAttack, $06
00086488 E105                       	smpsAlterNote       $05
0008648A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008648E E108                       	smpsAlterNote       $08
00086490 E701                       	dc.b	smpsNoAttack, $01
00086492 E10E                       	smpsAlterNote       $0E
00086494 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086498 E108                       	smpsAlterNote       $08
0008649A E701                       	dc.b	smpsNoAttack, $01
0008649C E105                       	smpsAlterNote       $05
0008649E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864A2 E10B                       	smpsAlterNote       $0B
000864A4 E701                       	dc.b	smpsNoAttack, $01
000864A6 E10F                       	smpsAlterNote       $0F
000864A8 E701                       	dc.b	smpsNoAttack, $01
000864AA E10E                       	smpsAlterNote       $0E
000864AC E701                       	dc.b	smpsNoAttack, $01
000864AE E108                       	smpsAlterNote       $08
000864B0 E701                       	dc.b	smpsNoAttack, $01
000864B2 E104                       	smpsAlterNote       $04
000864B4 E701                       	dc.b	smpsNoAttack, $01
000864B6 E108                       	smpsAlterNote       $08
000864B8 E701                       	dc.b	smpsNoAttack, $01
000864BA E10B                       	smpsAlterNote       $0B
000864BC E701                       	dc.b	smpsNoAttack, $01
000864BE E10F                       	smpsAlterNote       $0F
000864C0 E701                       	dc.b	smpsNoAttack, $01
000864C2 E10B                       	smpsAlterNote       $0B
000864C4 E701                       	dc.b	smpsNoAttack, $01
000864C6 E105                       	smpsAlterNote       $05
000864C8 E701                       	dc.b	smpsNoAttack, $01
000864CA E104                       	smpsAlterNote       $04
000864CC E701                       	dc.b	smpsNoAttack, $01
000864CE E108                       	smpsAlterNote       $08
000864D0 E701                       	dc.b	smpsNoAttack, $01
000864D2 E10E                       	smpsAlterNote       $0E
000864D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864D8 E10B                       	smpsAlterNote       $0B
000864DA E701                       	dc.b	smpsNoAttack, $01
000864DC E105                       	smpsAlterNote       $05
000864DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864E2 E10B                       	smpsAlterNote       $0B
000864E4 E701                       	dc.b	smpsNoAttack, $01
000864E6 E10E                       	smpsAlterNote       $0E
000864E8 E701                       	dc.b	smpsNoAttack, $01
000864EA E10F                       	smpsAlterNote       $0F
000864EC 8001                       	dc.b	nRst, $01
000864EE E109                       	smpsAlterNote       $09
000864F0 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000864F6 E108                       	smpsAlterNote       $08
000864F8 C101 8001                  	dc.b	nE5, $01, nRst, $01
000864FC E109                       	smpsAlterNote       $09
000864FE C202                       	dc.b	nF5, $02
00086500 E108                       	smpsAlterNote       $08
00086502 C102                       	dc.b	nE5, $02
00086504 E107                       	smpsAlterNote       $07
00086506 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008650A E108                       	smpsAlterNote       $08
0008650C C101 8001                  	dc.b	nE5, $01, nRst, $01
00086510 E107                       	smpsAlterNote       $07
00086512 BF02                       	dc.b	nD5, $02
00086514 E106                       	smpsAlterNote       $06
00086516 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008651A E107                       	smpsAlterNote       $07
0008651C BF01 8001                  	dc.b	nD5, $01, nRst, $01
00086520 E106                       	smpsAlterNote       $06
00086522 BD02                       	dc.b	nC5, $02
00086524 E10C                       	smpsAlterNote       $0C
00086526 BB02                       	dc.b	nBb4, $02
00086528 E106                       	smpsAlterNote       $06
0008652A BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008652E E10C                       	smpsAlterNote       $0C
00086530 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00086534 E10B                       	smpsAlterNote       $0B
00086536 BA02                       	dc.b	nA4, $02
00086538 E10C                       	smpsAlterNote       $0C
0008653A BB02                       	dc.b	nBb4, $02
0008653C E10B                       	smpsAlterNote       $0B
0008653E BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00086548 E108                       	smpsAlterNote       $08
0008654A B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00086552 E107                       	smpsAlterNote       $07
00086554 BE02                       	dc.b	nCs5, $02
00086556 E10B                       	smpsAlterNote       $0B
00086558 BA02                       	dc.b	nA4, $02
0008655A E109                       	smpsAlterNote       $09
0008655C B802 8001                  	dc.b	nG4, $02, nRst, $01
00086560 E108                       	smpsAlterNote       $08
00086562 B501 8001                  	dc.b	nE4, $01, nRst, $01
00086566 E10B                       	smpsAlterNote       $0B
00086568 AE02                       	dc.b	nA3, $02
0008656A E10C                       	smpsAlterNote       $0C
0008656C A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00086578 E10B                       	smpsAlterNote       $0B
0008657A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00086582 E107                       	smpsAlterNote       $07
00086584 A706 8001                  	dc.b	nD3, $06, nRst, $01
00086588 E10B                       	smpsAlterNote       $0B
0008658A A203                       	dc.b	nA2, $03
0008658C E109                       	smpsAlterNote       $09
0008658E AA03 8001                  	dc.b	nF3, $03, nRst, $01
00086592 E108                       	smpsAlterNote       $08
00086594 A906 8001                  	dc.b	nE3, $06, nRst, $01
00086598 E107                       	smpsAlterNote       $07
0008659A A702 8001                  	dc.b	nD3, $02, nRst, $01
0008659E E106                       	smpsAlterNote       $06
000865A0 A503                       	dc.b	nC3, $03
000865A2 E10C                       	smpsAlterNote       $0C
000865A4 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000865AA E107                       	smpsAlterNote       $07
000865AC B20D                       	dc.b	nCs4, $0D
000865AE E104                       	smpsAlterNote       $04
000865B0 E701                       	dc.b	smpsNoAttack, $01
000865B2 E100                       	smpsAlterNote       $00
000865B4 E701                       	dc.b	smpsNoAttack, $01
000865B6 E104                       	smpsAlterNote       $04
000865B8 E701                       	dc.b	smpsNoAttack, $01
000865BA E10A                       	smpsAlterNote       $0A
000865BC E701                       	dc.b	smpsNoAttack, $01
000865BE E10B                       	smpsAlterNote       $0B
000865C0 E701                       	dc.b	smpsNoAttack, $01
000865C2 E107                       	smpsAlterNote       $07
000865C4 E701                       	dc.b	smpsNoAttack, $01
000865C6 E101                       	smpsAlterNote       $01
000865C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865CC E104                       	smpsAlterNote       $04
000865CE E701                       	dc.b	smpsNoAttack, $01
000865D0 E10A                       	smpsAlterNote       $0A
000865D2 E701                       	dc.b	smpsNoAttack, $01
000865D4 E10B                       	smpsAlterNote       $0B
000865D6 8001                       	dc.b	nRst, $01
000865D8 E107                       	smpsAlterNote       $07
000865DA B30D                       	dc.b	nD4, $0D
000865DC E104                       	smpsAlterNote       $04
000865DE E701                       	dc.b	smpsNoAttack, $01
000865E0 E100                       	smpsAlterNote       $00
000865E2 E701                       	dc.b	smpsNoAttack, $01
000865E4 E104                       	smpsAlterNote       $04
000865E6 E701                       	dc.b	smpsNoAttack, $01
000865E8 E10A                       	smpsAlterNote       $0A
000865EA E701                       	dc.b	smpsNoAttack, $01
000865EC E10B                       	smpsAlterNote       $0B
000865EE E701                       	dc.b	smpsNoAttack, $01
000865F0 E107                       	smpsAlterNote       $07
000865F2 E701                       	dc.b	smpsNoAttack, $01
000865F4 E101                       	smpsAlterNote       $01
000865F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865FA E104                       	smpsAlterNote       $04
000865FC E701                       	dc.b	smpsNoAttack, $01
000865FE E10A                       	smpsAlterNote       $0A
00086600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086604 E104                       	smpsAlterNote       $04
00086606 E701                       	dc.b	smpsNoAttack, $01
00086608 E101                       	smpsAlterNote       $01
0008660A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008660E E107                       	smpsAlterNote       $07
00086610 E701                       	dc.b	smpsNoAttack, $01
00086612 E10B                       	smpsAlterNote       $0B
00086614 E701                       	dc.b	smpsNoAttack, $01
00086616 E10A                       	smpsAlterNote       $0A
00086618 E701                       	dc.b	smpsNoAttack, $01
0008661A E107                       	smpsAlterNote       $07
0008661C 8001                       	dc.b	nRst, $01
0008661E E108                       	smpsAlterNote       $08
00086620 B50D                       	dc.b	nE4, $0D
00086622 E102                       	smpsAlterNote       $02
00086624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086628 E105                       	smpsAlterNote       $05
0008662A E701                       	dc.b	smpsNoAttack, $01
0008662C E10B                       	smpsAlterNote       $0B
0008662E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086632 E105                       	smpsAlterNote       $05
00086634 E701                       	dc.b	smpsNoAttack, $01
00086636 E102                       	smpsAlterNote       $02
00086638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008663C E108                       	smpsAlterNote       $08
0008663E E701                       	dc.b	smpsNoAttack, $01
00086640 E10C                       	smpsAlterNote       $0C
00086642 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086646 E107                       	smpsAlterNote       $07
00086648 B30D                       	dc.b	nD4, $0D
0008664A E101                       	smpsAlterNote       $01
0008664C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086650 E104                       	smpsAlterNote       $04
00086652 E701                       	dc.b	smpsNoAttack, $01
00086654 E10A                       	smpsAlterNote       $0A
00086656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008665A E104                       	smpsAlterNote       $04
0008665C E701                       	dc.b	smpsNoAttack, $01
0008665E E101                       	smpsAlterNote       $01
00086660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086664 E107                       	smpsAlterNote       $07
00086666 E701                       	dc.b	smpsNoAttack, $01
00086668 E10B                       	smpsAlterNote       $0B
0008666A E701                       	dc.b	smpsNoAttack, $01
0008666C E10A                       	smpsAlterNote       $0A
0008666E E701                       	dc.b	smpsNoAttack, $01
00086670 E104                       	smpsAlterNote       $04
00086672 E701                       	dc.b	smpsNoAttack, $01
00086674 E100                       	smpsAlterNote       $00
00086676 E701                       	dc.b	smpsNoAttack, $01
00086678 E104                       	smpsAlterNote       $04
0008667A E701                       	dc.b	smpsNoAttack, $01
0008667C E107                       	smpsAlterNote       $07
0008667E E701                       	dc.b	smpsNoAttack, $01
00086680 E10B                       	smpsAlterNote       $0B
00086682 E701                       	dc.b	smpsNoAttack, $01
00086684 E107                       	smpsAlterNote       $07
00086686 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008668A E101                       	smpsAlterNote       $01
0008668C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086690 E107                       	smpsAlterNote       $07
00086692 E701                       	dc.b	smpsNoAttack, $01
00086694 E10A                       	smpsAlterNote       $0A
00086696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008669A E104                       	smpsAlterNote       $04
0008669C E701                       	dc.b	smpsNoAttack, $01
0008669E E100                       	smpsAlterNote       $00
000866A0 E701                       	dc.b	smpsNoAttack, $01
000866A2 E101                       	smpsAlterNote       $01
000866A4 E701                       	dc.b	smpsNoAttack, $01
000866A6 E107                       	smpsAlterNote       $07
000866A8 E701                       	dc.b	smpsNoAttack, $01
000866AA E10B                       	smpsAlterNote       $0B
000866AC E701                       	dc.b	smpsNoAttack, $01
000866AE E107                       	smpsAlterNote       $07
000866B0 B30E                       	dc.b	nD4, $0E
000866B2 E101                       	smpsAlterNote       $01
000866B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866B8 E107                       	smpsAlterNote       $07
000866BA E701                       	dc.b	smpsNoAttack, $01
000866BC E10A                       	smpsAlterNote       $0A
000866BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866C2 E104                       	smpsAlterNote       $04
000866C4 E701                       	dc.b	smpsNoAttack, $01
000866C6 E100                       	smpsAlterNote       $00
000866C8 E701                       	dc.b	smpsNoAttack, $01
000866CA E101                       	smpsAlterNote       $01
000866CC E701                       	dc.b	smpsNoAttack, $01
000866CE E107                       	smpsAlterNote       $07
000866D0 E701                       	dc.b	smpsNoAttack, $01
000866D2 E10B                       	smpsAlterNote       $0B
000866D4 E701                       	dc.b	smpsNoAttack, $01
000866D6 E107                       	smpsAlterNote       $07
000866D8 E701                       	dc.b	smpsNoAttack, $01
000866DA E104                       	smpsAlterNote       $04
000866DC E701                       	dc.b	smpsNoAttack, $01
000866DE E100                       	smpsAlterNote       $00
000866E0 E701                       	dc.b	smpsNoAttack, $01
000866E2 E104                       	smpsAlterNote       $04
000866E4 E701                       	dc.b	smpsNoAttack, $01
000866E6 E10A                       	smpsAlterNote       $0A
000866E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866EC E107                       	smpsAlterNote       $07
000866EE E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000866F2 E104                       	smpsAlterNote       $04
000866F4 E701                       	dc.b	smpsNoAttack, $01
000866F6 E100                       	smpsAlterNote       $00
000866F8 E701                       	dc.b	smpsNoAttack, $01
000866FA E101                       	smpsAlterNote       $01
000866FC E701                       	dc.b	smpsNoAttack, $01
000866FE E107                       	smpsAlterNote       $07
00086700 E701                       	dc.b	smpsNoAttack, $01
00086702 E10B                       	smpsAlterNote       $0B
00086704 E701                       	dc.b	smpsNoAttack, $01
00086706 E107                       	smpsAlterNote       $07
00086708 E701                       	dc.b	smpsNoAttack, $01
0008670A E104                       	smpsAlterNote       $04
0008670C E701                       	dc.b	smpsNoAttack, $01
0008670E E100                       	smpsAlterNote       $00
00086710 E701                       	dc.b	smpsNoAttack, $01
00086712 E104                       	smpsAlterNote       $04
00086714 E701                       	dc.b	smpsNoAttack, $01
00086716 E10A                       	smpsAlterNote       $0A
00086718 E701                       	dc.b	smpsNoAttack, $01
0008671A E10B                       	smpsAlterNote       $0B
0008671C E701                       	dc.b	smpsNoAttack, $01
00086720 E6FF                       	smpsAlterVol        $FF
00086722 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008672E 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00086736 E109                       	smpsAlterNote       $09
00086738 E601                       	smpsAlterVol        $01
0008673A B60D                       	dc.b	nF4, $0D
0008673C E106                       	smpsAlterNote       $06
0008673E E701                       	dc.b	smpsNoAttack, $01
00086740 E102                       	smpsAlterNote       $02
00086742 E701                       	dc.b	smpsNoAttack, $01
00086744 E106                       	smpsAlterNote       $06
00086746 E701                       	dc.b	smpsNoAttack, $01
00086748 E109                       	smpsAlterNote       $09
0008674A E701                       	dc.b	smpsNoAttack, $01
0008674C E10D                       	smpsAlterNote       $0D
0008674E E701                       	dc.b	smpsNoAttack, $01
00086750 E109                       	smpsAlterNote       $09
00086752 E701                       	dc.b	smpsNoAttack, $01
00086754 E103                       	smpsAlterNote       $03
00086756 E701                       	dc.b	smpsNoAttack, $01
00086758 E102                       	smpsAlterNote       $02
0008675A E701                       	dc.b	smpsNoAttack, $01
0008675C E106                       	smpsAlterNote       $06
0008675E E701                       	dc.b	smpsNoAttack, $01
00086760 E10C                       	smpsAlterNote       $0C
00086762 E701                       	dc.b	smpsNoAttack, $01
00086764 E10D                       	smpsAlterNote       $0D
00086766 8001                       	dc.b	nRst, $01
00086768 E109                       	smpsAlterNote       $09
0008676A B80D                       	dc.b	nG4, $0D
0008676C E106                       	smpsAlterNote       $06
0008676E E701                       	dc.b	smpsNoAttack, $01
00086770 E102                       	smpsAlterNote       $02
00086772 E701                       	dc.b	smpsNoAttack, $01
00086774 E106                       	smpsAlterNote       $06
00086776 E701                       	dc.b	smpsNoAttack, $01
00086778 E109                       	smpsAlterNote       $09
0008677A E701                       	dc.b	smpsNoAttack, $01
0008677C E10D                       	smpsAlterNote       $0D
0008677E E701                       	dc.b	smpsNoAttack, $01
00086780 E109                       	smpsAlterNote       $09
00086782 E701                       	dc.b	smpsNoAttack, $01
00086784 E103                       	smpsAlterNote       $03
00086786 E701                       	dc.b	smpsNoAttack, $01
00086788 E102                       	smpsAlterNote       $02
0008678A E701                       	dc.b	smpsNoAttack, $01
0008678C E106                       	smpsAlterNote       $06
0008678E E701                       	dc.b	smpsNoAttack, $01
00086790 E10C                       	smpsAlterNote       $0C
00086792 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086796 E106                       	smpsAlterNote       $06
00086798 E701                       	dc.b	smpsNoAttack, $01
0008679A E103                       	smpsAlterNote       $03
0008679C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867A0 E109                       	smpsAlterNote       $09
000867A2 E701                       	dc.b	smpsNoAttack, $01
000867A4 E10D                       	smpsAlterNote       $0D
000867A6 E701                       	dc.b	smpsNoAttack, $01
000867A8 E10C                       	smpsAlterNote       $0C
000867AA E701                       	dc.b	smpsNoAttack, $01
000867AC E109                       	smpsAlterNote       $09
000867AE 8001                       	dc.b	nRst, $01
000867B0 E10B                       	smpsAlterNote       $0B
000867B2 BA0D                       	dc.b	nA4, $0D
000867B4 E105                       	smpsAlterNote       $05
000867B6 E701                       	dc.b	smpsNoAttack, $01
000867B8 E104                       	smpsAlterNote       $04
000867BA E701                       	dc.b	smpsNoAttack, $01
000867BC E108                       	smpsAlterNote       $08
000867BE E701                       	dc.b	smpsNoAttack, $01
000867C0 E10E                       	smpsAlterNote       $0E
000867C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867C6 E10B                       	smpsAlterNote       $0B
000867C8 E701                       	dc.b	smpsNoAttack, $01
000867CA E105                       	smpsAlterNote       $05
000867CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867D0 E10B                       	smpsAlterNote       $0B
000867D2 E701                       	dc.b	smpsNoAttack, $01
000867D4 E10E                       	smpsAlterNote       $0E
000867D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867DA E108                       	smpsAlterNote       $08
000867DC E701                       	dc.b	smpsNoAttack, $01
000867DE E104                       	smpsAlterNote       $04
000867E0 E701                       	dc.b	smpsNoAttack, $01
000867E2 E105                       	smpsAlterNote       $05
000867E4 E701                       	dc.b	smpsNoAttack, $01
000867E6 E10B                       	smpsAlterNote       $0B
000867E8 E701                       	dc.b	smpsNoAttack, $01
000867EA E10F                       	smpsAlterNote       $0F
000867EC E701                       	dc.b	smpsNoAttack, $01
000867EE E10B                       	smpsAlterNote       $0B
000867F0 E701                       	dc.b	smpsNoAttack, $01
000867F2 E108                       	smpsAlterNote       $08
000867F4 E701                       	dc.b	smpsNoAttack, $01
000867F6 E104                       	smpsAlterNote       $04
000867F8 E701                       	dc.b	smpsNoAttack, $01
000867FA E108                       	smpsAlterNote       $08
000867FC E701                       	dc.b	smpsNoAttack, $01
000867FE E10E                       	smpsAlterNote       $0E
00086800 E701                       	dc.b	smpsNoAttack, $01
00086802 E10F                       	smpsAlterNote       $0F
00086804 E701                       	dc.b	smpsNoAttack, $01
00086806 E10B                       	smpsAlterNote       $0B
00086808 E701                       	dc.b	smpsNoAttack, $01
0008680A E105                       	smpsAlterNote       $05
0008680C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086810 E108                       	smpsAlterNote       $08
00086812 E701                       	dc.b	smpsNoAttack, $01
00086814 E10E                       	smpsAlterNote       $0E
00086816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008681A E108                       	smpsAlterNote       $08
0008681C E701                       	dc.b	smpsNoAttack, $01
0008681E E105                       	smpsAlterNote       $05
00086820 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086824 E108                       	smpsAlterNote       $08
00086826 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008682A E109                       	smpsAlterNote       $09
0008682C B60D                       	dc.b	nF4, $0D
0008682E E103                       	smpsAlterNote       $03
00086830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086834 E106                       	smpsAlterNote       $06
00086836 E701                       	dc.b	smpsNoAttack, $01
00086838 E10C                       	smpsAlterNote       $0C
0008683A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008683E E106                       	smpsAlterNote       $06
00086840 E701                       	dc.b	smpsNoAttack, $01
00086842 E103                       	smpsAlterNote       $03
00086844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086848 E109                       	smpsAlterNote       $09
0008684A E701                       	dc.b	smpsNoAttack, $01
0008684C E10D                       	smpsAlterNote       $0D
0008684E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086852 E109                       	smpsAlterNote       $09
00086854 B80D                       	dc.b	nG4, $0D
00086856 E103                       	smpsAlterNote       $03
00086858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008685C E109                       	smpsAlterNote       $09
0008685E E701                       	dc.b	smpsNoAttack, $01
00086860 E10C                       	smpsAlterNote       $0C
00086862 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086866 E106                       	smpsAlterNote       $06
00086868 E701                       	dc.b	smpsNoAttack, $01
0008686A E102                       	smpsAlterNote       $02
0008686C E701                       	dc.b	smpsNoAttack, $01
0008686E E103                       	smpsAlterNote       $03
00086870 E701                       	dc.b	smpsNoAttack, $01
00086872 E109                       	smpsAlterNote       $09
00086874 E701                       	dc.b	smpsNoAttack, $01
00086876 E10D                       	smpsAlterNote       $0D
00086878 E701                       	dc.b	smpsNoAttack, $01
0008687A E109                       	smpsAlterNote       $09
0008687C E701                       	dc.b	smpsNoAttack, $01
0008687E E106                       	smpsAlterNote       $06
00086880 E701                       	dc.b	smpsNoAttack, $01
00086882 E102                       	smpsAlterNote       $02
00086884 E701                       	dc.b	smpsNoAttack, $01
00086886 E106                       	smpsAlterNote       $06
00086888 E701                       	dc.b	smpsNoAttack, $01
0008688A E10C                       	smpsAlterNote       $0C
0008688C E701                       	dc.b	smpsNoAttack, $01
0008688E E10D                       	smpsAlterNote       $0D
00086890 E701                       	dc.b	smpsNoAttack, $01
00086892 E109                       	smpsAlterNote       $09
00086894 E701                       	dc.b	smpsNoAttack, $01
00086896 E10B                       	smpsAlterNote       $0B
00086898 BA0D                       	dc.b	nA4, $0D
0008689A E108                       	smpsAlterNote       $08
0008689C E701                       	dc.b	smpsNoAttack, $01
0008689E E105                       	smpsAlterNote       $05
000868A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868A4 E10B                       	smpsAlterNote       $0B
000868A6 E701                       	dc.b	smpsNoAttack, $01
000868A8 E10F                       	smpsAlterNote       $0F
000868AA E701                       	dc.b	smpsNoAttack, $01
000868AC E10E                       	smpsAlterNote       $0E
000868AE E701                       	dc.b	smpsNoAttack, $01
000868B0 E108                       	smpsAlterNote       $08
000868B2 E701                       	dc.b	smpsNoAttack, $01
000868B4 E104                       	smpsAlterNote       $04
000868B6 E701                       	dc.b	smpsNoAttack, $01
000868B8 E108                       	smpsAlterNote       $08
000868BA E701                       	dc.b	smpsNoAttack, $01
000868BC E10B                       	smpsAlterNote       $0B
000868BE E701                       	dc.b	smpsNoAttack, $01
000868C0 E10F                       	smpsAlterNote       $0F
000868C2 E701                       	dc.b	smpsNoAttack, $01
000868C4 E10B                       	smpsAlterNote       $0B
000868C6 E701                       	dc.b	smpsNoAttack, $01
000868C8 E105                       	smpsAlterNote       $05
000868CA E701                       	dc.b	smpsNoAttack, $01
000868CC E104                       	smpsAlterNote       $04
000868CE E701                       	dc.b	smpsNoAttack, $01
000868D0 E108                       	smpsAlterNote       $08
000868D2 E701                       	dc.b	smpsNoAttack, $01
000868D4 E10E                       	smpsAlterNote       $0E
000868D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868DA E10B                       	smpsAlterNote       $0B
000868DC E701                       	dc.b	smpsNoAttack, $01
000868DE E105                       	smpsAlterNote       $05
000868E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868E4 E10B                       	smpsAlterNote       $0B
000868E6 E701                       	dc.b	smpsNoAttack, $01
000868E8 E10E                       	smpsAlterNote       $0E
000868EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868EE E108                       	smpsAlterNote       $08
000868F0 E701                       	dc.b	smpsNoAttack, $01
000868F2 E105                       	smpsAlterNote       $05
000868F4 8001                       	dc.b	nRst, $01
000868F6 E109                       	smpsAlterNote       $09
000868F8 B60A                       	dc.b	nF4, $0A
000868FA E108                       	smpsAlterNote       $08
000868FC B507                       	dc.b	nE4, $07
000868FE E107                       	smpsAlterNote       $07
00086900 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00086904 E108                       	smpsAlterNote       $08
00086906 B503                       	dc.b	nE4, $03
00086908 E109                       	smpsAlterNote       $09
0008690A B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00086912 E10B                       	smpsAlterNote       $0B
00086914 BA0D                       	dc.b	nA4, $0D
00086916 E108                       	smpsAlterNote       $08
00086918 E701                       	dc.b	smpsNoAttack, $01
0008691A E104                       	smpsAlterNote       $04
0008691C E701                       	dc.b	smpsNoAttack, $01
0008691E E108                       	smpsAlterNote       $08
00086920 E701                       	dc.b	smpsNoAttack, $01
00086922 E10B                       	smpsAlterNote       $0B
00086924 E701                       	dc.b	smpsNoAttack, $01
00086926 E10F                       	smpsAlterNote       $0F
00086928 E701                       	dc.b	smpsNoAttack, $01
0008692A E10B                       	smpsAlterNote       $0B
0008692C E701                       	dc.b	smpsNoAttack, $01
0008692E E105                       	smpsAlterNote       $05
00086930 E701                       	dc.b	smpsNoAttack, $01
00086932 E104                       	smpsAlterNote       $04
00086934 E701                       	dc.b	smpsNoAttack, $01
00086936 E108                       	smpsAlterNote       $08
00086938 E701                       	dc.b	smpsNoAttack, $01
0008693A E10E                       	smpsAlterNote       $0E
0008693C E701                       	dc.b	smpsNoAttack, $01
0008693E E10F                       	smpsAlterNote       $0F
00086940 8001                       	dc.b	nRst, $01
00086942 E109                       	smpsAlterNote       $09
00086944 C20D                       	dc.b	nF5, $0D
00086946 E106                       	smpsAlterNote       $06
00086948 E701                       	dc.b	smpsNoAttack, $01
0008694A E102                       	smpsAlterNote       $02
0008694C E701                       	dc.b	smpsNoAttack, $01
0008694E E106                       	smpsAlterNote       $06
00086950 E701                       	dc.b	smpsNoAttack, $01
00086952 E109                       	smpsAlterNote       $09
00086954 E701                       	dc.b	smpsNoAttack, $01
00086956 E10D                       	smpsAlterNote       $0D
00086958 E701                       	dc.b	smpsNoAttack, $01
0008695A E109                       	smpsAlterNote       $09
0008695C E701                       	dc.b	smpsNoAttack, $01
0008695E E103                       	smpsAlterNote       $03
00086960 E701                       	dc.b	smpsNoAttack, $01
00086962 E102                       	smpsAlterNote       $02
00086964 E701                       	dc.b	smpsNoAttack, $01
00086966 E106                       	smpsAlterNote       $06
00086968 E701                       	dc.b	smpsNoAttack, $01
0008696A E10C                       	smpsAlterNote       $0C
0008696C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086970 E109                       	smpsAlterNote       $09
00086972 E701                       	dc.b	smpsNoAttack, $01
00086974 E103                       	smpsAlterNote       $03
00086976 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008697A E109                       	smpsAlterNote       $09
0008697C E701                       	dc.b	smpsNoAttack, $01
0008697E E10C                       	smpsAlterNote       $0C
00086980 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086984 E106                       	smpsAlterNote       $06
00086986 E701                       	dc.b	smpsNoAttack, $01
00086988 E102                       	smpsAlterNote       $02
0008698A E701                       	dc.b	smpsNoAttack, $01
0008698C E103                       	smpsAlterNote       $03
0008698E E701                       	dc.b	smpsNoAttack, $01
00086990 E109                       	smpsAlterNote       $09
00086992 E701                       	dc.b	smpsNoAttack, $01
00086994 E10D                       	smpsAlterNote       $0D
00086996 E701                       	dc.b	smpsNoAttack, $01
00086998 E109                       	smpsAlterNote       $09
0008699A E701                       	dc.b	smpsNoAttack, $01
0008699C E106                       	smpsAlterNote       $06
0008699E E701                       	dc.b	smpsNoAttack, $01
000869A0 E102                       	smpsAlterNote       $02
000869A2 E701                       	dc.b	smpsNoAttack, $01
000869A4 E106                       	smpsAlterNote       $06
000869A6 E701                       	dc.b	smpsNoAttack, $01
000869A8 E10C                       	smpsAlterNote       $0C
000869AA E701                       	dc.b	smpsNoAttack, $01
000869AC E10D                       	smpsAlterNote       $0D
000869AE E701                       	dc.b	smpsNoAttack, $01
000869B0 E109                       	smpsAlterNote       $09
000869B2 E701                       	dc.b	smpsNoAttack, $01
000869B4 E103                       	smpsAlterNote       $03
000869B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869BA E106                       	smpsAlterNote       $06
000869BC E701                       	dc.b	smpsNoAttack, $01
000869BE E10C                       	smpsAlterNote       $0C
000869C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869C4 E106                       	smpsAlterNote       $06
000869C6 E701                       	dc.b	smpsNoAttack, $01
000869C8 E103                       	smpsAlterNote       $03
000869CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869CE E109                       	smpsAlterNote       $09
000869D0 E701                       	dc.b	smpsNoAttack, $01
000869D2 E10D                       	smpsAlterNote       $0D
000869D4 E701                       	dc.b	smpsNoAttack, $01
000869D6 E10C                       	smpsAlterNote       $0C
000869D8 E701                       	dc.b	smpsNoAttack, $01
000869DA E106                       	smpsAlterNote       $06
000869DC E701                       	dc.b	smpsNoAttack, $01
000869DE E103                       	smpsAlterNote       $03
000869E0 8001                       	dc.b	nRst, $01
000869E2 E109                       	smpsAlterNote       $09
000869E4 C206 8001                  	dc.b	nF5, $06, nRst, $01
000869EA E10C                       	smpsAlterNote       $0C
000869EC E601                       	smpsAlterVol        $01
000869EE BB0D                       	dc.b	nBb4, $0D
000869F0 E106                       	smpsAlterNote       $06
000869F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869F6 E109                       	smpsAlterNote       $09
000869F8 E701                       	dc.b	smpsNoAttack, $01
000869FA E10F                       	smpsAlterNote       $0F
000869FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A00 E109                       	smpsAlterNote       $09
00086A02 E701                       	dc.b	smpsNoAttack, $01
00086A04 E106                       	smpsAlterNote       $06
00086A06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A0A E10C                       	smpsAlterNote       $0C
00086A0C E701                       	dc.b	smpsNoAttack, $01
00086A0E E110                       	smpsAlterNote       $10
00086A10 E701                       	dc.b	smpsNoAttack, $01
00086A12 E10F                       	smpsAlterNote       $0F
00086A14 E701                       	dc.b	smpsNoAttack, $01
00086A16 E109                       	smpsAlterNote       $09
00086A18 E701                       	dc.b	smpsNoAttack, $01
00086A1A E105                       	smpsAlterNote       $05
00086A1C E701                       	dc.b	smpsNoAttack, $01
00086A1E E106                       	smpsAlterNote       $06
00086A20 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00086A24 E103                       	smpsAlterNote       $03
00086A26 E701                       	dc.b	smpsNoAttack, $01
00086A28 E1FF                       	smpsAlterNote       $FF
00086A2A E701                       	dc.b	smpsNoAttack, $01
00086A2C E103                       	smpsAlterNote       $03
00086A2E E701                       	dc.b	smpsNoAttack, $01
00086A30 E106                       	smpsAlterNote       $06
00086A32 E701                       	dc.b	smpsNoAttack, $01
00086A34 E10A                       	smpsAlterNote       $0A
00086A36 E701                       	dc.b	smpsNoAttack, $01
00086A38 E106                       	smpsAlterNote       $06
00086A3A E701                       	dc.b	smpsNoAttack, $01
00086A3C E100                       	smpsAlterNote       $00
00086A3E E701                       	dc.b	smpsNoAttack, $01
00086A40 E1FF                       	smpsAlterNote       $FF
00086A42 E701                       	dc.b	smpsNoAttack, $01
00086A44 E103                       	smpsAlterNote       $03
00086A46 E701                       	dc.b	smpsNoAttack, $01
00086A48 E109                       	smpsAlterNote       $09
00086A4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A4E E106                       	smpsAlterNote       $06
00086A50 E701                       	dc.b	smpsNoAttack, $01
00086A52 E100                       	smpsAlterNote       $00
00086A54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A58 E107                       	smpsAlterNote       $07
00086A5A BF0E                       	dc.b	nD5, $0E
00086A5C E101                       	smpsAlterNote       $01
00086A5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A62 E107                       	smpsAlterNote       $07
00086A64 E701                       	dc.b	smpsNoAttack, $01
00086A66 E10A                       	smpsAlterNote       $0A
00086A68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A6C E104                       	smpsAlterNote       $04
00086A6E E701                       	dc.b	smpsNoAttack, $01
00086A70 E100                       	smpsAlterNote       $00
00086A72 E701                       	dc.b	smpsNoAttack, $01
00086A74 E101                       	smpsAlterNote       $01
00086A76 E701                       	dc.b	smpsNoAttack, $01
00086A78 E107                       	smpsAlterNote       $07
00086A7A E701                       	dc.b	smpsNoAttack, $01
00086A7C E10B                       	smpsAlterNote       $0B
00086A7E E701                       	dc.b	smpsNoAttack, $01
00086A80 E107                       	smpsAlterNote       $07
00086A82 E701                       	dc.b	smpsNoAttack, $01
00086A84 E104                       	smpsAlterNote       $04
00086A86 E701                       	dc.b	smpsNoAttack, $01
00086A88 E100                       	smpsAlterNote       $00
00086A8A E701                       	dc.b	smpsNoAttack, $01
00086A8C E101                       	smpsAlterNote       $01
00086A8E 8001                       	dc.b	nRst, $01
00086A90 E108                       	smpsAlterNote       $08
00086A92 C10C                       	dc.b	nE5, $0C
00086A94 E109                       	smpsAlterNote       $09
00086A96 C201 8001                  	dc.b	nF5, $01, nRst, $01
00086A9A E10A                       	smpsAlterNote       $0A
00086A9C 8001                       	dc.b	nRst, $01
00086A9E E109                       	smpsAlterNote       $09
00086AA0 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00086AA4 E106                       	smpsAlterNote       $06
00086AA6 E701                       	dc.b	smpsNoAttack, $01
00086AA8 E102                       	smpsAlterNote       $02
00086AAA E701                       	dc.b	smpsNoAttack, $01
00086AAC E103                       	smpsAlterNote       $03
00086AAE E701                       	dc.b	smpsNoAttack, $01
00086AB0 E109                       	smpsAlterNote       $09
00086AB2 E701                       	dc.b	smpsNoAttack, $01
00086AB4 E10D                       	smpsAlterNote       $0D
00086AB6 E701                       	dc.b	smpsNoAttack, $01
00086AB8 E109                       	smpsAlterNote       $09
00086ABA E701                       	dc.b	smpsNoAttack, $01
00086ABC E106                       	smpsAlterNote       $06
00086ABE E701                       	dc.b	smpsNoAttack, $01
00086AC0 E102                       	smpsAlterNote       $02
00086AC2 E701                       	dc.b	smpsNoAttack, $01
00086AC4 E106                       	smpsAlterNote       $06
00086AC6 E701                       	dc.b	smpsNoAttack, $01
00086AC8 E10C                       	smpsAlterNote       $0C
00086ACA E701                       	dc.b	smpsNoAttack, $01
00086ACC E10D                       	smpsAlterNote       $0D
00086ACE E701                       	dc.b	smpsNoAttack, $01
00086AD0 E109                       	smpsAlterNote       $09
00086AD2 C40D                       	dc.b	nG5, $0D
00086AD4 E106                       	smpsAlterNote       $06
00086AD6 E701                       	dc.b	smpsNoAttack, $01
00086AD8 E102                       	smpsAlterNote       $02
00086ADA E701                       	dc.b	smpsNoAttack, $01
00086ADC E103                       	smpsAlterNote       $03
00086ADE E701                       	dc.b	smpsNoAttack, $01
00086AE0 E109                       	smpsAlterNote       $09
00086AE2 E701                       	dc.b	smpsNoAttack, $01
00086AE4 E108                       	smpsAlterNote       $08
00086AE6 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00086AF2 E109                       	smpsAlterNote       $09
00086AF4 C20D                       	dc.b	nF5, $0D
00086AF6 E106                       	smpsAlterNote       $06
00086AF8 E701                       	dc.b	smpsNoAttack, $01
00086AFA E102                       	smpsAlterNote       $02
00086AFC E701                       	dc.b	smpsNoAttack, $01
00086AFE E106                       	smpsAlterNote       $06
00086B00 E701                       	dc.b	smpsNoAttack, $01
00086B02 E109                       	smpsAlterNote       $09
00086B04 E701                       	dc.b	smpsNoAttack, $01
00086B06 E10D                       	smpsAlterNote       $0D
00086B08 E701                       	dc.b	smpsNoAttack, $01
00086B0A E109                       	smpsAlterNote       $09
00086B0C E701                       	dc.b	smpsNoAttack, $01
00086B0E E103                       	smpsAlterNote       $03
00086B10 E701                       	dc.b	smpsNoAttack, $01
00086B12 E102                       	smpsAlterNote       $02
00086B14 E701                       	dc.b	smpsNoAttack, $01
00086B16 E106                       	smpsAlterNote       $06
00086B18 E701                       	dc.b	smpsNoAttack, $01
00086B1A E10C                       	smpsAlterNote       $0C
00086B1C E701                       	dc.b	smpsNoAttack, $01
00086B1E E10D                       	smpsAlterNote       $0D
00086B20 8001                       	dc.b	nRst, $01
00086B22 E112                       	smpsAlterNote       $12
00086B24 C401                       	dc.b	nG5, $01
00086B26 E1EB                       	smpsAlterNote       $EB
00086B28 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00086B2B E1FD                       	smpsAlterNote       $FD
00086B2D E701                       	dc.b	smpsNoAttack, $01
00086B2F E10F                       	smpsAlterNote       $0F
00086B31 E701                       	dc.b	smpsNoAttack, $01
00086B33 E118                       	smpsAlterNote       $18
00086B35 E701                       	dc.b	smpsNoAttack, $01
00086B37 E1ED                       	smpsAlterNote       $ED
00086B39 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00086B3C E1FF                       	smpsAlterNote       $FF
00086B3E E701                       	dc.b	smpsNoAttack, $01
00086B40 E10B                       	smpsAlterNote       $0B
00086B42 E703                       	dc.b	smpsNoAttack, $03
00086B44 E109                       	smpsAlterNote       $09
00086B46 C407                       	dc.b	nG5, $07
00086B48 E108                       	smpsAlterNote       $08
00086B4A C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00086B56 E109                       	smpsAlterNote       $09
00086B58 C20D                       	dc.b	nF5, $0D
00086B5A E103                       	smpsAlterNote       $03
00086B5C E701                       	dc.b	smpsNoAttack, $01
00086B5E E102                       	smpsAlterNote       $02
00086B60 E701                       	dc.b	smpsNoAttack, $01
00086B62 E106                       	smpsAlterNote       $06
00086B64 E701                       	dc.b	smpsNoAttack, $01
00086B66 E10C                       	smpsAlterNote       $0C
00086B68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B6C E109                       	smpsAlterNote       $09
00086B6E E701                       	dc.b	smpsNoAttack, $01
00086B70 E103                       	smpsAlterNote       $03
00086B72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B76 E109                       	smpsAlterNote       $09
00086B78 E701                       	dc.b	smpsNoAttack, $01
00086B7A E10C                       	smpsAlterNote       $0C
00086B7C E701                       	dc.b	smpsNoAttack, $01
00086B7E E10D                       	smpsAlterNote       $0D
00086B80 8001                       	dc.b	nRst, $01
00086B82 E10B                       	smpsAlterNote       $0B
00086B84 C609 8001                  	dc.b	nA5, $09, nRst, $01
00086B88 E109                       	smpsAlterNote       $09
00086B8A B806 8001                  	dc.b	nG4, $06, nRst, $01
00086B8E E108                       	smpsAlterNote       $08
00086B90 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00086B9C 8001                       	dc.b	nRst, $01
00086B9E E109                       	smpsAlterNote       $09
00086BA0 C20D                       	dc.b	nF5, $0D
00086BA2 E103                       	smpsAlterNote       $03
00086BA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086BA8 E106                       	smpsAlterNote       $06
00086BAA E701                       	dc.b	smpsNoAttack, $01
00086BAC E10C                       	smpsAlterNote       $0C
00086BAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086BB2 E106                       	smpsAlterNote       $06
00086BB4 E701                       	dc.b	smpsNoAttack, $01
00086BB6 E103                       	smpsAlterNote       $03
00086BB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086BBC E109                       	smpsAlterNote       $09
00086BBE E701                       	dc.b	smpsNoAttack, $01
00086BC0 E10D                       	smpsAlterNote       $0D
00086BC2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086BC8 E108                       	smpsAlterNote       $08
00086BCA E6FF                       	smpsAlterVol        $FF
00086BCC A806                       	dc.b	nEb3, $06
00086BCE E10C                       	smpsAlterNote       $0C
00086BD0 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00086BD4 E108                       	smpsAlterNote       $08
00086BD6 A803                       	dc.b	nEb3, $03
00086BD8 E109                       	smpsAlterNote       $09
00086BDA AC03 8001                  	dc.b	nG3, $03, nRst, $01
00086BDE E10C                       	smpsAlterNote       $0C
00086BE0 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00086BEA E109                       	smpsAlterNote       $09
00086BEC E602                       	smpsAlterVol        $02
00086BEE B604                       	dc.b	nF4, $04
00086BF0 E602                       	smpsAlterVol        $02
00086BF2 F6F1 AA                    	smpsJump            music84_Jump02
00086BF5                            
00086BF5                            ; FM4 Data
00086BF5                            music84_FM4:
00086BF7 E040                       	smpsPan             panRight, $00
00086BF9 8003                       	dc.b	nRst, $03
00086BFB E10F                       	smpsAlterNote       $0F
00086BFD C603 8008                  	dc.b	nA5, $03, nRst, $08
00086C01 E10D                       	smpsAlterNote       $0D
00086C03 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00086C07 E10C                       	smpsAlterNote       $0C
00086C09 C103 8004                  	dc.b	nE5, $03, nRst, $04
00086C0F E6FE                       	smpsAlterVol        $FE
00086C11 E110                       	smpsAlterNote       $10
00086C13 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086C17 E10F                       	smpsAlterNote       $0F
00086C19 C602 8001                  	dc.b	nA5, $02, nRst, $01
00086C1D E10D                       	smpsAlterNote       $0D
00086C1F C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00086C28 E10C                       	smpsAlterNote       $0C
00086C2A C103                       	dc.b	nE5, $03
00086C2C E10A                       	smpsAlterNote       $0A
00086C2E BD03 8001                  	dc.b	nC5, $03, nRst, $01
00086C34 03                         	dc.b	$03
00086C35                            
00086C35                            music84_Jump01:
00086C35 E10B                       	smpsAlterNote       $0B
00086C37 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086C3B E10C                       	smpsAlterNote       $0C
00086C3D C102 8001                  	dc.b	nE5, $02, nRst, $01
00086C41 E10D                       	smpsAlterNote       $0D
00086C43 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00086C4D E10B                       	smpsAlterNote       $0B
00086C4F BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00086C53 E107                       	smpsAlterNote       $07
00086C55 E701                       	dc.b	smpsNoAttack, $01
00086C57 E103                       	smpsAlterNote       $03
00086C59 E701                       	dc.b	smpsNoAttack, $01
00086C5B E104                       	smpsAlterNote       $04
00086C5D E701                       	dc.b	smpsNoAttack, $01
00086C5F E10A                       	smpsAlterNote       $0A
00086C61 E701                       	dc.b	smpsNoAttack, $01
00086C63 E10E                       	smpsAlterNote       $0E
00086C65 E701                       	dc.b	smpsNoAttack, $01
00086C67 E10A                       	smpsAlterNote       $0A
00086C69 E701                       	dc.b	smpsNoAttack, $01
00086C6B E107                       	smpsAlterNote       $07
00086C6D E701                       	dc.b	smpsNoAttack, $01
00086C6F E104                       	smpsAlterNote       $04
00086C71 8001                       	dc.b	nRst, $01
00086C73 E110                       	smpsAlterNote       $10
00086C75 C703                       	dc.b	nBb5, $03
00086C77 E10F                       	smpsAlterNote       $0F
00086C79 C603 8001                  	dc.b	nA5, $03, nRst, $01
00086C7D E10D                       	smpsAlterNote       $0D
00086C7F C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00086C85 E10C                       	smpsAlterNote       $0C
00086C87 E701                       	dc.b	smpsNoAttack, $01
00086C89 E108                       	smpsAlterNote       $08
00086C8B E701                       	dc.b	smpsNoAttack, $01
00086C8D E10C                       	smpsAlterNote       $0C
00086C8F E701                       	dc.b	smpsNoAttack, $01
00086C91 E10F                       	smpsAlterNote       $0F
00086C93 E701                       	dc.b	smpsNoAttack, $01
00086C95 E113                       	smpsAlterNote       $13
00086C97 E701                       	dc.b	smpsNoAttack, $01
00086C99 E10F                       	smpsAlterNote       $0F
00086C9B E701                       	dc.b	smpsNoAttack, $01
00086C9D E109                       	smpsAlterNote       $09
00086C9F E701                       	dc.b	smpsNoAttack, $01
00086CA1 E108                       	smpsAlterNote       $08
00086CA3 E701                       	dc.b	smpsNoAttack, $01
00086CA5 E10C                       	smpsAlterNote       $0C
00086CA7 E701                       	dc.b	smpsNoAttack, $01
00086CA9 E112                       	smpsAlterNote       $12
00086CAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CAF E10C                       	smpsAlterNote       $0C
00086CB1 E701                       	dc.b	smpsNoAttack, $01
00086CB3 E109                       	smpsAlterNote       $09
00086CB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CB9 E10F                       	smpsAlterNote       $0F
00086CBB E701                       	dc.b	smpsNoAttack, $01
00086CBD E113                       	smpsAlterNote       $13
00086CBF E701                       	dc.b	smpsNoAttack, $01
00086CC1 E112                       	smpsAlterNote       $12
00086CC3 E701                       	dc.b	smpsNoAttack, $01
00086CC5 E10C                       	smpsAlterNote       $0C
00086CC7 E701                       	dc.b	smpsNoAttack, $01
00086CC9 E108                       	smpsAlterNote       $08
00086CCB E701                       	dc.b	smpsNoAttack, $01
00086CCD E10C                       	smpsAlterNote       $0C
00086CCF E701                       	dc.b	smpsNoAttack, $01
00086CD1 E10F                       	smpsAlterNote       $0F
00086CD3 E701                       	dc.b	smpsNoAttack, $01
00086CD5 E113                       	smpsAlterNote       $13
00086CD7 E701                       	dc.b	smpsNoAttack, $01
00086CD9 E10F                       	smpsAlterNote       $0F
00086CDB E701                       	dc.b	smpsNoAttack, $01
00086CDD E109                       	smpsAlterNote       $09
00086CDF E701                       	dc.b	smpsNoAttack, $01
00086CE1 E108                       	smpsAlterNote       $08
00086CE3 E701                       	dc.b	smpsNoAttack, $01
00086CE5 E10C                       	smpsAlterNote       $0C
00086CE7 E701                       	dc.b	smpsNoAttack, $01
00086CE9 E112                       	smpsAlterNote       $12
00086CEB E701                       	dc.b	smpsNoAttack, $01
00086CED E113                       	smpsAlterNote       $13
00086CEF 800F                       	dc.b	nRst, $0F
00086CF1 E10B                       	smpsAlterNote       $0B
00086CF3 BF03                       	dc.b	nD5, $03
00086CF5 E10C                       	smpsAlterNote       $0C
00086CF7 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086CFB E10D                       	smpsAlterNote       $0D
00086CFD C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00086D05 E10B                       	smpsAlterNote       $0B
00086D07 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00086D11 E110                       	smpsAlterNote       $10
00086D13 C704                       	dc.b	nBb5, $04
00086D15 E10F                       	smpsAlterNote       $0F
00086D17 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086D1B E10D                       	smpsAlterNote       $0D
00086D1D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00086D23 E109                       	smpsAlterNote       $09
00086D25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D29 E10F                       	smpsAlterNote       $0F
00086D2B E701                       	dc.b	smpsNoAttack, $01
00086D2D E112                       	smpsAlterNote       $12
00086D2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D33 E10C                       	smpsAlterNote       $0C
00086D35 E701                       	dc.b	smpsNoAttack, $01
00086D37 E108                       	smpsAlterNote       $08
00086D39 E701                       	dc.b	smpsNoAttack, $01
00086D3B E109                       	smpsAlterNote       $09
00086D3D E701                       	dc.b	smpsNoAttack, $01
00086D3F E10F                       	smpsAlterNote       $0F
00086D41 E701                       	dc.b	smpsNoAttack, $01
00086D43 E113                       	smpsAlterNote       $13
00086D45 E701                       	dc.b	smpsNoAttack, $01
00086D47 E10F                       	smpsAlterNote       $0F
00086D49 E701                       	dc.b	smpsNoAttack, $01
00086D4B E10C                       	smpsAlterNote       $0C
00086D4D E701                       	dc.b	smpsNoAttack, $01
00086D4F E108                       	smpsAlterNote       $08
00086D51 E701                       	dc.b	smpsNoAttack, $01
00086D53 E10C                       	smpsAlterNote       $0C
00086D55 E701                       	dc.b	smpsNoAttack, $01
00086D57 E112                       	smpsAlterNote       $12
00086D59 E701                       	dc.b	smpsNoAttack, $01
00086D5B E113                       	smpsAlterNote       $13
00086D5D E701                       	dc.b	smpsNoAttack, $01
00086D5F E10F                       	smpsAlterNote       $0F
00086D61 E701                       	dc.b	smpsNoAttack, $01
00086D63 E109                       	smpsAlterNote       $09
00086D65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D69 E10C                       	smpsAlterNote       $0C
00086D6B E701                       	dc.b	smpsNoAttack, $01
00086D6D E112                       	smpsAlterNote       $12
00086D6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D73 E10C                       	smpsAlterNote       $0C
00086D75 E701                       	dc.b	smpsNoAttack, $01
00086D77 E109                       	smpsAlterNote       $09
00086D79 E701                       	dc.b	smpsNoAttack, $01
00086D7B E10D                       	smpsAlterNote       $0D
00086D7D C401 8001                  	dc.b	nG5, $01, nRst, $01
00086D81 E10F                       	smpsAlterNote       $0F
00086D83 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00086D8D E10D                       	smpsAlterNote       $0D
00086D8F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00086D95 E10B                       	smpsAlterNote       $0B
00086D97 BF0D                       	dc.b	nD5, $0D
00086D99 E108                       	smpsAlterNote       $08
00086D9B E701                       	dc.b	smpsNoAttack, $01
00086D9D E104                       	smpsAlterNote       $04
00086D9F E701                       	dc.b	smpsNoAttack, $01
00086DA1 E108                       	smpsAlterNote       $08
00086DA3 E701                       	dc.b	smpsNoAttack, $01
00086DA5 E10B                       	smpsAlterNote       $0B
00086DA7 E701                       	dc.b	smpsNoAttack, $01
00086DA9 E10F                       	smpsAlterNote       $0F
00086DAB E701                       	dc.b	smpsNoAttack, $01
00086DAD E10B                       	smpsAlterNote       $0B
00086DAF E701                       	dc.b	smpsNoAttack, $01
00086DB1 E105                       	smpsAlterNote       $05
00086DB3 E701                       	dc.b	smpsNoAttack, $01
00086DB5 E104                       	smpsAlterNote       $04
00086DB7 E701                       	dc.b	smpsNoAttack, $01
00086DB9 E108                       	smpsAlterNote       $08
00086DBB E701                       	dc.b	smpsNoAttack, $01
00086DBD E10E                       	smpsAlterNote       $0E
00086DBF E701                       	dc.b	smpsNoAttack, $01
00086DC1 E10F                       	smpsAlterNote       $0F
00086DC3 8001                       	dc.b	nRst, $01
00086DC5 E10C                       	smpsAlterNote       $0C
00086DC7 C101                       	dc.b	nE5, $01
00086DC9 E10D                       	smpsAlterNote       $0D
00086DCB C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00086DD1 E10F                       	smpsAlterNote       $0F
00086DD3 C606 8001                  	dc.b	nA5, $06, nRst, $01
00086DD7 E10C                       	smpsAlterNote       $0C
00086DD9 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086DDD E10D                       	smpsAlterNote       $0D
00086DDF CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086DE3 E10C                       	smpsAlterNote       $0C
00086DE5 CD03                       	dc.b	nE6, $03
00086DE7 E10A                       	smpsAlterNote       $0A
00086DE9 C903 8001                  	dc.b	nC6, $03, nRst, $01
00086DED E10D                       	smpsAlterNote       $0D
00086DEF C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00086DF7 E109                       	smpsAlterNote       $09
00086DF9 E701                       	dc.b	smpsNoAttack, $01
00086DFB E10D                       	smpsAlterNote       $0D
00086DFD E701                       	dc.b	smpsNoAttack, $01
00086DFF E110                       	smpsAlterNote       $10
00086E01 E701                       	dc.b	smpsNoAttack, $01
00086E03 E114                       	smpsAlterNote       $14
00086E05 E701                       	dc.b	smpsNoAttack, $01
00086E07 E110                       	smpsAlterNote       $10
00086E09 E701                       	dc.b	smpsNoAttack, $01
00086E0B E10A                       	smpsAlterNote       $0A
00086E0D E701                       	dc.b	smpsNoAttack, $01
00086E0F E109                       	smpsAlterNote       $09
00086E11 E701                       	dc.b	smpsNoAttack, $01
00086E13 E10D                       	smpsAlterNote       $0D
00086E15 E701                       	dc.b	smpsNoAttack, $01
00086E17 E113                       	smpsAlterNote       $13
00086E19 E701                       	dc.b	smpsNoAttack, $01
00086E1B E114                       	smpsAlterNote       $14
00086E1D 8001                       	dc.b	nRst, $01
00086E1F E10F                       	smpsAlterNote       $0F
00086E21 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00086E27 E10C                       	smpsAlterNote       $0C
00086E29 E701                       	dc.b	smpsNoAttack, $01
00086E2B E108                       	smpsAlterNote       $08
00086E2D E701                       	dc.b	smpsNoAttack, $01
00086E2F E10C                       	smpsAlterNote       $0C
00086E31 E701                       	dc.b	smpsNoAttack, $01
00086E33 E112                       	smpsAlterNote       $12
00086E35 E701                       	dc.b	smpsNoAttack, $01
00086E37 E113                       	smpsAlterNote       $13
00086E39 E701                       	dc.b	smpsNoAttack, $01
00086E3B E10F                       	smpsAlterNote       $0F
00086E3D E701                       	dc.b	smpsNoAttack, $01
00086E3F E109                       	smpsAlterNote       $09
00086E41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E45 E10C                       	smpsAlterNote       $0C
00086E47 E701                       	dc.b	smpsNoAttack, $01
00086E49 E112                       	smpsAlterNote       $12
00086E4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E4F E10C                       	smpsAlterNote       $0C
00086E51 E701                       	dc.b	smpsNoAttack, $01
00086E53 E109                       	smpsAlterNote       $09
00086E55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E59 E10F                       	smpsAlterNote       $0F
00086E5B E701                       	dc.b	smpsNoAttack, $01
00086E5D E113                       	smpsAlterNote       $13
00086E5F E701                       	dc.b	smpsNoAttack, $01
00086E61 E112                       	smpsAlterNote       $12
00086E63 E701                       	dc.b	smpsNoAttack, $01
00086E65 E10C                       	smpsAlterNote       $0C
00086E67 E701                       	dc.b	smpsNoAttack, $01
00086E69 E108                       	smpsAlterNote       $08
00086E6B E701                       	dc.b	smpsNoAttack, $01
00086E6D E10C                       	smpsAlterNote       $0C
00086E6F E701                       	dc.b	smpsNoAttack, $01
00086E71 E10F                       	smpsAlterNote       $0F
00086E73 E701                       	dc.b	smpsNoAttack, $01
00086E75 E113                       	smpsAlterNote       $13
00086E77 E701                       	dc.b	smpsNoAttack, $01
00086E79 E10F                       	smpsAlterNote       $0F
00086E7B E701                       	dc.b	smpsNoAttack, $01
00086E7D E109                       	smpsAlterNote       $09
00086E7F E701                       	dc.b	smpsNoAttack, $01
00086E81 E108                       	smpsAlterNote       $08
00086E83 E701                       	dc.b	smpsNoAttack, $01
00086E85 E10C                       	smpsAlterNote       $0C
00086E87 E701                       	dc.b	smpsNoAttack, $01
00086E89 E112                       	smpsAlterNote       $12
00086E8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E8F E10F                       	smpsAlterNote       $0F
00086E91 E701                       	dc.b	smpsNoAttack, $01
00086E93 E109                       	smpsAlterNote       $09
00086E95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E99 E10F                       	smpsAlterNote       $0F
00086E9B E701                       	dc.b	smpsNoAttack, $01
00086E9D E113                       	smpsAlterNote       $13
00086E9F E701                       	dc.b	smpsNoAttack, $01
00086EA1 E112                       	smpsAlterNote       $12
00086EA3 E701                       	dc.b	smpsNoAttack, $01
00086EA5 E10C                       	smpsAlterNote       $0C
00086EA7 E701                       	dc.b	smpsNoAttack, $01
00086EA9 E108                       	smpsAlterNote       $08
00086EAB E701                       	dc.b	smpsNoAttack, $01
00086EAD E10C                       	smpsAlterNote       $0C
00086EAF E701                       	dc.b	smpsNoAttack, $01
00086EB1 E10F                       	smpsAlterNote       $0F
00086EB3 E701                       	dc.b	smpsNoAttack, $01
00086EB5 E113                       	smpsAlterNote       $13
00086EB7 E701                       	dc.b	smpsNoAttack, $01
00086EB9 E10F                       	smpsAlterNote       $0F
00086EBB E701                       	dc.b	smpsNoAttack, $01
00086EBD E109                       	smpsAlterNote       $09
00086EBF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086EC3 E10F                       	smpsAlterNote       $0F
00086EC5 C60D                       	dc.b	nA5, $0D
00086EC7 E109                       	smpsAlterNote       $09
00086EC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ECD E10C                       	smpsAlterNote       $0C
00086ECF E701                       	dc.b	smpsNoAttack, $01
00086ED1 E112                       	smpsAlterNote       $12
00086ED3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ED7 E10C                       	smpsAlterNote       $0C
00086ED9 E701                       	dc.b	smpsNoAttack, $01
00086EDB E109                       	smpsAlterNote       $09
00086EDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EE1 E10F                       	smpsAlterNote       $0F
00086EE3 E701                       	dc.b	smpsNoAttack, $01
00086EE5 E113                       	smpsAlterNote       $13
00086EE7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086EED E10D                       	smpsAlterNote       $0D
00086EEF C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00086EF7 E10C                       	smpsAlterNote       $0C
00086EF9 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00086EFF E6FF                       	smpsAlterVol        $FF
00086F01 E10B                       	smpsAlterNote       $0B
00086F03 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086F07 E10C                       	smpsAlterNote       $0C
00086F09 C103                       	dc.b	nE5, $03
00086F0B E10D                       	smpsAlterNote       $0D
00086F0D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00086F17 E10B                       	smpsAlterNote       $0B
00086F19 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00086F1D E107                       	smpsAlterNote       $07
00086F1F E701                       	dc.b	smpsNoAttack, $01
00086F21 E104                       	smpsAlterNote       $04
00086F23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F27 E10A                       	smpsAlterNote       $0A
00086F29 E701                       	dc.b	smpsNoAttack, $01
00086F2B E10D                       	smpsAlterNote       $0D
00086F2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F31 E107                       	smpsAlterNote       $07
00086F33 E701                       	dc.b	smpsNoAttack, $01
00086F35 E104                       	smpsAlterNote       $04
00086F37 8001                       	dc.b	nRst, $01
00086F39 E110                       	smpsAlterNote       $10
00086F3B C703                       	dc.b	nBb5, $03
00086F3D E10F                       	smpsAlterNote       $0F
00086F3F C603 8001                  	dc.b	nA5, $03, nRst, $01
00086F43 E10D                       	smpsAlterNote       $0D
00086F45 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00086F49 E10C                       	smpsAlterNote       $0C
00086F4B E701                       	dc.b	smpsNoAttack, $01
00086F4D E108                       	smpsAlterNote       $08
00086F4F E701                       	dc.b	smpsNoAttack, $01
00086F51 E109                       	smpsAlterNote       $09
00086F53 E701                       	dc.b	smpsNoAttack, $01
00086F55 E10F                       	smpsAlterNote       $0F
00086F57 E701                       	dc.b	smpsNoAttack, $01
00086F59 E113                       	smpsAlterNote       $13
00086F5B E701                       	dc.b	smpsNoAttack, $01
00086F5D E10F                       	smpsAlterNote       $0F
00086F5F E701                       	dc.b	smpsNoAttack, $01
00086F61 E10C                       	smpsAlterNote       $0C
00086F63 E701                       	dc.b	smpsNoAttack, $01
00086F65 E108                       	smpsAlterNote       $08
00086F67 E701                       	dc.b	smpsNoAttack, $01
00086F69 E10C                       	smpsAlterNote       $0C
00086F6B E701                       	dc.b	smpsNoAttack, $01
00086F6D E112                       	smpsAlterNote       $12
00086F6F E701                       	dc.b	smpsNoAttack, $01
00086F71 E113                       	smpsAlterNote       $13
00086F73 E701                       	dc.b	smpsNoAttack, $01
00086F75 E10F                       	smpsAlterNote       $0F
00086F77 E701                       	dc.b	smpsNoAttack, $01
00086F79 E109                       	smpsAlterNote       $09
00086F7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F7F E10C                       	smpsAlterNote       $0C
00086F81 E701                       	dc.b	smpsNoAttack, $01
00086F83 E112                       	smpsAlterNote       $12
00086F85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F89 E10C                       	smpsAlterNote       $0C
00086F8B E701                       	dc.b	smpsNoAttack, $01
00086F8D E109                       	smpsAlterNote       $09
00086F8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F93 E10F                       	smpsAlterNote       $0F
00086F95 E701                       	dc.b	smpsNoAttack, $01
00086F97 E113                       	smpsAlterNote       $13
00086F99 E701                       	dc.b	smpsNoAttack, $01
00086F9B E112                       	smpsAlterNote       $12
00086F9D E701                       	dc.b	smpsNoAttack, $01
00086F9F E10C                       	smpsAlterNote       $0C
00086FA1 E701                       	dc.b	smpsNoAttack, $01
00086FA3 E108                       	smpsAlterNote       $08
00086FA5 E701                       	dc.b	smpsNoAttack, $01
00086FA7 E10C                       	smpsAlterNote       $0C
00086FA9 E701                       	dc.b	smpsNoAttack, $01
00086FAB E10F                       	smpsAlterNote       $0F
00086FAD E701                       	dc.b	smpsNoAttack, $01
00086FAF E113                       	smpsAlterNote       $13
00086FB1 E701                       	dc.b	smpsNoAttack, $01
00086FB3 E10F                       	smpsAlterNote       $0F
00086FB5 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00086FB9 E110                       	smpsAlterNote       $10
00086FBB BB03                       	dc.b	nBb4, $03
00086FBD E10F                       	smpsAlterNote       $0F
00086FBF BA06 8001                  	dc.b	nA4, $06, nRst, $01
00086FC3 E10B                       	smpsAlterNote       $0B
00086FC5 BF03                       	dc.b	nD5, $03
00086FC7 E10C                       	smpsAlterNote       $0C
00086FC9 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086FCD E10D                       	smpsAlterNote       $0D
00086FCF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00086FD9 E10B                       	smpsAlterNote       $0B
00086FDB BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00086FE7 E110                       	smpsAlterNote       $10
00086FE9 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086FED E10F                       	smpsAlterNote       $0F
00086FEF C604                       	dc.b	nA5, $04
00086FF1 E10D                       	smpsAlterNote       $0D
00086FF3 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00086FF9 E109                       	smpsAlterNote       $09
00086FFB E701                       	dc.b	smpsNoAttack, $01
00086FFD E108                       	smpsAlterNote       $08
00086FFF E701                       	dc.b	smpsNoAttack, $01
00087001 E10C                       	smpsAlterNote       $0C
00087003 E701                       	dc.b	smpsNoAttack, $01
00087005 E112                       	smpsAlterNote       $12
00087007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008700B E10F                       	smpsAlterNote       $0F
0008700D E701                       	dc.b	smpsNoAttack, $01
0008700F E109                       	smpsAlterNote       $09
00087011 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087015 E10F                       	smpsAlterNote       $0F
00087017 E701                       	dc.b	smpsNoAttack, $01
00087019 E112                       	smpsAlterNote       $12
0008701B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008701F E10C                       	smpsAlterNote       $0C
00087021 E701                       	dc.b	smpsNoAttack, $01
00087023 E108                       	smpsAlterNote       $08
00087025 E701                       	dc.b	smpsNoAttack, $01
00087027 E109                       	smpsAlterNote       $09
00087029 E701                       	dc.b	smpsNoAttack, $01
0008702B E10F                       	smpsAlterNote       $0F
0008702D E701                       	dc.b	smpsNoAttack, $01
0008702F E113                       	smpsAlterNote       $13
00087031 E701                       	dc.b	smpsNoAttack, $01
00087033 E10F                       	smpsAlterNote       $0F
00087035 E701                       	dc.b	smpsNoAttack, $01
00087037 E10C                       	smpsAlterNote       $0C
00087039 E701                       	dc.b	smpsNoAttack, $01
0008703B E108                       	smpsAlterNote       $08
0008703D E701                       	dc.b	smpsNoAttack, $01
0008703F E10C                       	smpsAlterNote       $0C
00087041 E701                       	dc.b	smpsNoAttack, $01
00087043 E112                       	smpsAlterNote       $12
00087045 E701                       	dc.b	smpsNoAttack, $01
00087047 E113                       	smpsAlterNote       $13
00087049 E701                       	dc.b	smpsNoAttack, $01
0008704B E10F                       	smpsAlterNote       $0F
0008704D E701                       	dc.b	smpsNoAttack, $01
0008704F E109                       	smpsAlterNote       $09
00087051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087055 E10C                       	smpsAlterNote       $0C
00087057 E701                       	dc.b	smpsNoAttack, $01
00087059 E112                       	smpsAlterNote       $12
0008705B E701                       	dc.b	smpsNoAttack, $01
0008705D E113                       	smpsAlterNote       $13
0008705F 8001                       	dc.b	nRst, $01
00087061 E10F                       	smpsAlterNote       $0F
00087063 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008706F C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00087077 E10D                       	smpsAlterNote       $0D
00087079 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008707F E10B                       	smpsAlterNote       $0B
00087081 BF0D                       	dc.b	nD5, $0D
00087083 E108                       	smpsAlterNote       $08
00087085 E701                       	dc.b	smpsNoAttack, $01
00087087 E104                       	smpsAlterNote       $04
00087089 E701                       	dc.b	smpsNoAttack, $01
0008708B E105                       	smpsAlterNote       $05
0008708D E701                       	dc.b	smpsNoAttack, $01
0008708F E10B                       	smpsAlterNote       $0B
00087091 E701                       	dc.b	smpsNoAttack, $01
00087093 E10F                       	smpsAlterNote       $0F
00087095 E701                       	dc.b	smpsNoAttack, $01
00087097 E10B                       	smpsAlterNote       $0B
00087099 E701                       	dc.b	smpsNoAttack, $01
0008709B E108                       	smpsAlterNote       $08
0008709D E701                       	dc.b	smpsNoAttack, $01
0008709F E104                       	smpsAlterNote       $04
000870A1 E701                       	dc.b	smpsNoAttack, $01
000870A3 E108                       	smpsAlterNote       $08
000870A5 E701                       	dc.b	smpsNoAttack, $01
000870A7 E10E                       	smpsAlterNote       $0E
000870A9 E701                       	dc.b	smpsNoAttack, $01
000870AB E10F                       	smpsAlterNote       $0F
000870AD E701                       	dc.b	smpsNoAttack, $01
000870AF E10C                       	smpsAlterNote       $0C
000870B1 C101                       	dc.b	nE5, $01
000870B3 E10D                       	smpsAlterNote       $0D
000870B5 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000870BD E10F                       	smpsAlterNote       $0F
000870BF C607                       	dc.b	nA5, $07
000870C1 E10C                       	smpsAlterNote       $0C
000870C3 CD07                       	dc.b	nE6, $07
000870C5 E10D                       	smpsAlterNote       $0D
000870C7 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000870CB E10C                       	smpsAlterNote       $0C
000870CD CD03                       	dc.b	nE6, $03
000870CF E10A                       	smpsAlterNote       $0A
000870D1 C903 8001                  	dc.b	nC6, $03, nRst, $01
000870D5 E10D                       	smpsAlterNote       $0D
000870D7 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000870DD E10A                       	smpsAlterNote       $0A
000870DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870E3 E110                       	smpsAlterNote       $10
000870E5 E701                       	dc.b	smpsNoAttack, $01
000870E7 E114                       	smpsAlterNote       $14
000870E9 E701                       	dc.b	smpsNoAttack, $01
000870EB E113                       	smpsAlterNote       $13
000870ED E701                       	dc.b	smpsNoAttack, $01
000870EF E10D                       	smpsAlterNote       $0D
000870F1 E701                       	dc.b	smpsNoAttack, $01
000870F3 E109                       	smpsAlterNote       $09
000870F5 E701                       	dc.b	smpsNoAttack, $01
000870F7 E10D                       	smpsAlterNote       $0D
000870F9 E701                       	dc.b	smpsNoAttack, $01
000870FB E110                       	smpsAlterNote       $10
000870FD E701                       	dc.b	smpsNoAttack, $01
000870FF E114                       	smpsAlterNote       $14
00087101 E701                       	dc.b	smpsNoAttack, $01
00087103 E10F                       	smpsAlterNote       $0F
00087105 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00087109 E10C                       	smpsAlterNote       $0C
0008710B E701                       	dc.b	smpsNoAttack, $01
0008710D E108                       	smpsAlterNote       $08
0008710F E701                       	dc.b	smpsNoAttack, $01
00087111 E10C                       	smpsAlterNote       $0C
00087113 E701                       	dc.b	smpsNoAttack, $01
00087115 E10F                       	smpsAlterNote       $0F
00087117 E701                       	dc.b	smpsNoAttack, $01
00087119 E113                       	smpsAlterNote       $13
0008711B E701                       	dc.b	smpsNoAttack, $01
0008711D E10F                       	smpsAlterNote       $0F
0008711F E701                       	dc.b	smpsNoAttack, $01
00087121 E109                       	smpsAlterNote       $09
00087123 E701                       	dc.b	smpsNoAttack, $01
00087125 E108                       	smpsAlterNote       $08
00087127 E701                       	dc.b	smpsNoAttack, $01
00087129 E10C                       	smpsAlterNote       $0C
0008712B E701                       	dc.b	smpsNoAttack, $01
0008712D E112                       	smpsAlterNote       $12
0008712F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087133 E10F                       	smpsAlterNote       $0F
00087135 E701                       	dc.b	smpsNoAttack, $01
00087137 E109                       	smpsAlterNote       $09
00087139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008713D E10F                       	smpsAlterNote       $0F
0008713F E701                       	dc.b	smpsNoAttack, $01
00087141 E112                       	smpsAlterNote       $12
00087143 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087147 E10C                       	smpsAlterNote       $0C
00087149 E701                       	dc.b	smpsNoAttack, $01
0008714B E108                       	smpsAlterNote       $08
0008714D E701                       	dc.b	smpsNoAttack, $01
0008714F E109                       	smpsAlterNote       $09
00087151 E701                       	dc.b	smpsNoAttack, $01
00087153 E10F                       	smpsAlterNote       $0F
00087155 E701                       	dc.b	smpsNoAttack, $01
00087157 E113                       	smpsAlterNote       $13
00087159 E701                       	dc.b	smpsNoAttack, $01
0008715B E10F                       	smpsAlterNote       $0F
0008715D E701                       	dc.b	smpsNoAttack, $01
0008715F E10C                       	smpsAlterNote       $0C
00087161 E701                       	dc.b	smpsNoAttack, $01
00087163 E108                       	smpsAlterNote       $08
00087165 E701                       	dc.b	smpsNoAttack, $01
00087167 E10C                       	smpsAlterNote       $0C
00087169 E701                       	dc.b	smpsNoAttack, $01
0008716B E112                       	smpsAlterNote       $12
0008716D E701                       	dc.b	smpsNoAttack, $01
0008716F E113                       	smpsAlterNote       $13
00087171 E701                       	dc.b	smpsNoAttack, $01
00087173 E10F                       	smpsAlterNote       $0F
00087175 E701                       	dc.b	smpsNoAttack, $01
00087177 E109                       	smpsAlterNote       $09
00087179 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008717D E10C                       	smpsAlterNote       $0C
0008717F E701                       	dc.b	smpsNoAttack, $01
00087181 E112                       	smpsAlterNote       $12
00087183 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087187 E10C                       	smpsAlterNote       $0C
00087189 E701                       	dc.b	smpsNoAttack, $01
0008718B E109                       	smpsAlterNote       $09
0008718D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087191 E10F                       	smpsAlterNote       $0F
00087193 E701                       	dc.b	smpsNoAttack, $01
00087195 E113                       	smpsAlterNote       $13
00087197 E701                       	dc.b	smpsNoAttack, $01
00087199 E112                       	smpsAlterNote       $12
0008719B E701                       	dc.b	smpsNoAttack, $01
0008719D E10C                       	smpsAlterNote       $0C
0008719F E701                       	dc.b	smpsNoAttack, $01
000871A1 E109                       	smpsAlterNote       $09
000871A3 8001                       	dc.b	nRst, $01
000871A5 E10F                       	smpsAlterNote       $0F
000871A7 C60D                       	dc.b	nA5, $0D
000871A9 E10C                       	smpsAlterNote       $0C
000871AB E701                       	dc.b	smpsNoAttack, $01
000871AD E108                       	smpsAlterNote       $08
000871AF E701                       	dc.b	smpsNoAttack, $01
000871B1 E10C                       	smpsAlterNote       $0C
000871B3 E701                       	dc.b	smpsNoAttack, $01
000871B5 E112                       	smpsAlterNote       $12
000871B7 E701                       	dc.b	smpsNoAttack, $01
000871B9 E113                       	smpsAlterNote       $13
000871BB E701                       	dc.b	smpsNoAttack, $01
000871BD E10F                       	smpsAlterNote       $0F
000871BF E701                       	dc.b	smpsNoAttack, $01
000871C1 E109                       	smpsAlterNote       $09
000871C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871C7 E10C                       	smpsAlterNote       $0C
000871C9 E701                       	dc.b	smpsNoAttack, $01
000871CB E112                       	smpsAlterNote       $12
000871CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871D1 E10C                       	smpsAlterNote       $0C
000871D3 E701                       	dc.b	smpsNoAttack, $01
000871D5 E109                       	smpsAlterNote       $09
000871D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871DB E10F                       	smpsAlterNote       $0F
000871DD E701                       	dc.b	smpsNoAttack, $01
000871DF E113                       	smpsAlterNote       $13
000871E1 E701                       	dc.b	smpsNoAttack, $01
000871E3 E112                       	smpsAlterNote       $12
000871E5 E701                       	dc.b	smpsNoAttack, $01
000871E7 E10C                       	smpsAlterNote       $0C
000871E9 E701                       	dc.b	smpsNoAttack, $01
000871EB E108                       	smpsAlterNote       $08
000871ED E701                       	dc.b	smpsNoAttack, $01
000871EF E10C                       	smpsAlterNote       $0C
000871F1 E701                       	dc.b	smpsNoAttack, $01
000871F3 E10F                       	smpsAlterNote       $0F
000871F5 E701                       	dc.b	smpsNoAttack, $01
000871F7 E113                       	smpsAlterNote       $13
000871F9 E701                       	dc.b	smpsNoAttack, $01
000871FB E10F                       	smpsAlterNote       $0F
000871FD E701                       	dc.b	smpsNoAttack, $01
000871FF E109                       	smpsAlterNote       $09
00087201 E701                       	dc.b	smpsNoAttack, $01
00087203 E108                       	smpsAlterNote       $08
00087205 E701                       	dc.b	smpsNoAttack, $01
00087207 E10C                       	smpsAlterNote       $0C
00087209 E701                       	dc.b	smpsNoAttack, $01
0008720B E112                       	smpsAlterNote       $12
0008720D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087211 E10F                       	smpsAlterNote       $0F
00087213 E701                       	dc.b	smpsNoAttack, $01
00087215 E109                       	smpsAlterNote       $09
00087217 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008721B E10F                       	smpsAlterNote       $0F
0008721D E701                       	dc.b	smpsNoAttack, $01
0008721F E112                       	smpsAlterNote       $12
00087221 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087225 E10C                       	smpsAlterNote       $0C
00087227 E701                       	dc.b	smpsNoAttack, $01
00087229 E108                       	smpsAlterNote       $08
0008722B E701                       	dc.b	smpsNoAttack, $01
0008722D E10C                       	smpsAlterNote       $0C
0008722F E701                       	dc.b	smpsNoAttack, $01
00087231 E10F                       	smpsAlterNote       $0F
00087233 E701                       	dc.b	smpsNoAttack, $01
00087235 E113                       	smpsAlterNote       $13
00087237 E701                       	dc.b	smpsNoAttack, $01
00087239 E10F                       	smpsAlterNote       $0F
0008723B E701                       	dc.b	smpsNoAttack, $01
0008723D E109                       	smpsAlterNote       $09
0008723F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087245 E601                       	smpsAlterVol        $01
00087247 E10F                       	smpsAlterNote       $0F
00087249 C604                       	dc.b	nA5, $04
0008724B E10D                       	smpsAlterNote       $0D
0008724D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00087253 E10B                       	smpsAlterNote       $0B
00087255 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008725D E10F                       	smpsAlterNote       $0F
0008725F C604 8001                  	dc.b	nA5, $04, nRst, $01
00087263 E10D                       	smpsAlterNote       $0D
00087265 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008726B E10C                       	smpsAlterNote       $0C
0008726D C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00087273 E10A                       	smpsAlterNote       $0A
00087275 C904 8001                  	dc.b	nC6, $04, nRst, $01
00087279 E110                       	smpsAlterNote       $10
0008727B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008727F E10F                       	smpsAlterNote       $0F
00087281 C604                       	dc.b	nA5, $04
00087283 E10D                       	smpsAlterNote       $0D
00087285 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00087291 E109                       	smpsAlterNote       $09
00087293 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087297 E10F                       	smpsAlterNote       $0F
00087299 E701                       	dc.b	smpsNoAttack, $01
0008729B E112                       	smpsAlterNote       $12
0008729D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872A1 E10C                       	smpsAlterNote       $0C
000872A3 E701                       	dc.b	smpsNoAttack, $01
000872A5 E108                       	smpsAlterNote       $08
000872A7 E701                       	dc.b	smpsNoAttack, $01
000872A9 E10C                       	smpsAlterNote       $0C
000872AB E701                       	dc.b	smpsNoAttack, $01
000872AD E10F                       	smpsAlterNote       $0F
000872AF E701                       	dc.b	smpsNoAttack, $01
000872B1 E113                       	smpsAlterNote       $13
000872B3 E701                       	dc.b	smpsNoAttack, $01
000872B5 E10D                       	smpsAlterNote       $0D
000872B7 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000872BD E10C                       	smpsAlterNote       $0C
000872BF C10D                       	dc.b	nE5, $0D
000872C1 E109                       	smpsAlterNote       $09
000872C3 E701                       	dc.b	smpsNoAttack, $01
000872C5 E105                       	smpsAlterNote       $05
000872C7 E701                       	dc.b	smpsNoAttack, $01
000872C9 E106                       	smpsAlterNote       $06
000872CB E701                       	dc.b	smpsNoAttack, $01
000872CD E10C                       	smpsAlterNote       $0C
000872CF E701                       	dc.b	smpsNoAttack, $01
000872D1 E110                       	smpsAlterNote       $10
000872D3 E701                       	dc.b	smpsNoAttack, $01
000872D5 E10C                       	smpsAlterNote       $0C
000872D7 E701                       	dc.b	smpsNoAttack, $01
000872D9 E109                       	smpsAlterNote       $09
000872DB E701                       	dc.b	smpsNoAttack, $01
000872DD E105                       	smpsAlterNote       $05
000872DF E701                       	dc.b	smpsNoAttack, $01
000872E1 E109                       	smpsAlterNote       $09
000872E3 E701                       	dc.b	smpsNoAttack, $01
000872E5 E10F                       	smpsAlterNote       $0F
000872E7 E701                       	dc.b	smpsNoAttack, $01
000872E9 E110                       	smpsAlterNote       $10
000872EB E701                       	dc.b	smpsNoAttack, $01
000872ED E10C                       	smpsAlterNote       $0C
000872EF E701                       	dc.b	smpsNoAttack, $01
000872F1 E106                       	smpsAlterNote       $06
000872F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872F7 E109                       	smpsAlterNote       $09
000872F9 E701                       	dc.b	smpsNoAttack, $01
000872FB E10F                       	smpsAlterNote       $0F
000872FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087301 E109                       	smpsAlterNote       $09
00087303 E701                       	dc.b	smpsNoAttack, $01
00087305 E106                       	smpsAlterNote       $06
00087307 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008730B E10C                       	smpsAlterNote       $0C
0008730D E701                       	dc.b	smpsNoAttack, $01
0008730F E110                       	smpsAlterNote       $10
00087311 E701                       	dc.b	smpsNoAttack, $01
00087313 E10F                       	smpsAlterNote       $0F
00087315 E701                       	dc.b	smpsNoAttack, $01
00087317 E109                       	smpsAlterNote       $09
00087319 E701                       	dc.b	smpsNoAttack, $01
0008731B E105                       	smpsAlterNote       $05
0008731D E701                       	dc.b	smpsNoAttack, $01
0008731F E109                       	smpsAlterNote       $09
00087321 E701                       	dc.b	smpsNoAttack, $01
00087323 E10C                       	smpsAlterNote       $0C
00087325 E701                       	dc.b	smpsNoAttack, $01
00087327 E110                       	smpsAlterNote       $10
00087329 E701                       	dc.b	smpsNoAttack, $01
0008732B E10C                       	smpsAlterNote       $0C
0008732D E701                       	dc.b	smpsNoAttack, $01
0008732F E106                       	smpsAlterNote       $06
00087331 E701                       	dc.b	smpsNoAttack, $01
00087333 E105                       	smpsAlterNote       $05
00087335 E701                       	dc.b	smpsNoAttack, $01
00087337 E109                       	smpsAlterNote       $09
00087339 E701                       	dc.b	smpsNoAttack, $01
0008733B E10F                       	smpsAlterNote       $0F
0008733D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087341 E10C                       	smpsAlterNote       $0C
00087343 E701                       	dc.b	smpsNoAttack, $01
00087345 E106                       	smpsAlterNote       $06
00087347 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008734B E10C                       	smpsAlterNote       $0C
0008734D E701                       	dc.b	smpsNoAttack, $01
0008734F E10F                       	smpsAlterNote       $0F
00087351 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087355 E109                       	smpsAlterNote       $09
00087357 E701                       	dc.b	smpsNoAttack, $01
00087359 E105                       	smpsAlterNote       $05
0008735B E701                       	dc.b	smpsNoAttack, $01
0008735D E106                       	smpsAlterNote       $06
0008735F E701                       	dc.b	smpsNoAttack, $01
00087361 E10C                       	smpsAlterNote       $0C
00087363 E701                       	dc.b	smpsNoAttack, $01
00087365 E110                       	smpsAlterNote       $10
00087367 E701                       	dc.b	smpsNoAttack, $01
00087369 E10C                       	smpsAlterNote       $0C
0008736B E701                       	dc.b	smpsNoAttack, $01
0008736D E109                       	smpsAlterNote       $09
0008736F E701                       	dc.b	smpsNoAttack, $01
00087371 E105                       	smpsAlterNote       $05
00087373 E701                       	dc.b	smpsNoAttack, $01
00087375 E109                       	smpsAlterNote       $09
00087377 E701                       	dc.b	smpsNoAttack, $01
00087379 E10F                       	smpsAlterNote       $0F
0008737B E701                       	dc.b	smpsNoAttack, $01
0008737D E110                       	smpsAlterNote       $10
0008737F E701                       	dc.b	smpsNoAttack, $01
00087381 E10C                       	smpsAlterNote       $0C
00087383 E701                       	dc.b	smpsNoAttack, $01
00087385 E106                       	smpsAlterNote       $06
00087387 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008738B E109                       	smpsAlterNote       $09
0008738D E701                       	dc.b	smpsNoAttack, $01
0008738F E10F                       	smpsAlterNote       $0F
00087391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087395 E109                       	smpsAlterNote       $09
00087397 E701                       	dc.b	smpsNoAttack, $01
00087399 E106                       	smpsAlterNote       $06
0008739B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008739F E10C                       	smpsAlterNote       $0C
000873A1 E701                       	dc.b	smpsNoAttack, $01
000873A3 E110                       	smpsAlterNote       $10
000873A5 E701                       	dc.b	smpsNoAttack, $01
000873A7 E10F                       	smpsAlterNote       $0F
000873A9 E701                       	dc.b	smpsNoAttack, $01
000873AB E109                       	smpsAlterNote       $09
000873AD E701                       	dc.b	smpsNoAttack, $01
000873AF E105                       	smpsAlterNote       $05
000873B1 E701                       	dc.b	smpsNoAttack, $01
000873B3 E109                       	smpsAlterNote       $09
000873B5 E701                       	dc.b	smpsNoAttack, $01
000873B7 E10C                       	smpsAlterNote       $0C
000873B9 E701                       	dc.b	smpsNoAttack, $01
000873BB E110                       	smpsAlterNote       $10
000873BD E701                       	dc.b	smpsNoAttack, $01
000873BF E10C                       	smpsAlterNote       $0C
000873C1 E701                       	dc.b	smpsNoAttack, $01
000873C3 E106                       	smpsAlterNote       $06
000873C5 E701                       	dc.b	smpsNoAttack, $01
000873C7 E105                       	smpsAlterNote       $05
000873C9 E701                       	dc.b	smpsNoAttack, $01
000873CB E109                       	smpsAlterNote       $09
000873CD E701                       	dc.b	smpsNoAttack, $01
000873CF E10F                       	smpsAlterNote       $0F
000873D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873D5 E109                       	smpsAlterNote       $09
000873D7 E701                       	dc.b	smpsNoAttack, $01
000873D9 E106                       	smpsAlterNote       $06
000873DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873DF E10C                       	smpsAlterNote       $0C
000873E1 E701                       	dc.b	smpsNoAttack, $01
000873E3 E110                       	smpsAlterNote       $10
000873E5 E701                       	dc.b	smpsNoAttack, $01
000873E7 E10F                       	smpsAlterNote       $0F
000873E9 E701                       	dc.b	smpsNoAttack, $01
000873EB E109                       	smpsAlterNote       $09
000873ED E701                       	dc.b	smpsNoAttack, $01
000873EF E105                       	smpsAlterNote       $05
000873F1 E701                       	dc.b	smpsNoAttack, $01
000873F3 E109                       	smpsAlterNote       $09
000873F5 E701                       	dc.b	smpsNoAttack, $01
000873F7 E10C                       	smpsAlterNote       $0C
000873F9 E701                       	dc.b	smpsNoAttack, $01
000873FB E110                       	smpsAlterNote       $10
000873FD E701                       	dc.b	smpsNoAttack, $01
000873FF E10C                       	smpsAlterNote       $0C
00087401 E701                       	dc.b	smpsNoAttack, $01
00087403 E106                       	smpsAlterNote       $06
00087405 E701                       	dc.b	smpsNoAttack, $01
00087407 E105                       	smpsAlterNote       $05
00087409 E701                       	dc.b	smpsNoAttack, $01
0008740B E109                       	smpsAlterNote       $09
0008740D E701                       	dc.b	smpsNoAttack, $01
0008740F E10F                       	smpsAlterNote       $0F
00087411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087415 E10C                       	smpsAlterNote       $0C
00087417 E701                       	dc.b	smpsNoAttack, $01
00087419 E106                       	smpsAlterNote       $06
0008741B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008741F E10C                       	smpsAlterNote       $0C
00087421 E701                       	dc.b	smpsNoAttack, $01
00087423 E10F                       	smpsAlterNote       $0F
00087425 E701                       	dc.b	smpsNoAttack, $01
00087427 E110                       	smpsAlterNote       $10
00087429 8001                       	dc.b	nRst, $01
0008742B E10F                       	smpsAlterNote       $0F
0008742D C604                       	dc.b	nA5, $04
0008742F E10D                       	smpsAlterNote       $0D
00087431 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00087437 E10B                       	smpsAlterNote       $0B
00087439 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008743F E10F                       	smpsAlterNote       $0F
00087441 C604 8001                  	dc.b	nA5, $04, nRst, $01
00087445 E10D                       	smpsAlterNote       $0D
00087447 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008744D E10C                       	smpsAlterNote       $0C
0008744F C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00087455 E10A                       	smpsAlterNote       $0A
00087457 C904                       	dc.b	nC6, $04
00087459 E110                       	smpsAlterNote       $10
0008745B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008745F E10F                       	smpsAlterNote       $0F
00087461 C604                       	dc.b	nA5, $04
00087463 E10D                       	smpsAlterNote       $0D
00087465 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00087471 E109                       	smpsAlterNote       $09
00087473 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087477 E10F                       	smpsAlterNote       $0F
00087479 E701                       	dc.b	smpsNoAttack, $01
0008747B E112                       	smpsAlterNote       $12
0008747D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087481 E10C                       	smpsAlterNote       $0C
00087483 E701                       	dc.b	smpsNoAttack, $01
00087485 E108                       	smpsAlterNote       $08
00087487 E701                       	dc.b	smpsNoAttack, $01
00087489 E109                       	smpsAlterNote       $09
0008748B E701                       	dc.b	smpsNoAttack, $01
0008748D E10F                       	smpsAlterNote       $0F
0008748F E701                       	dc.b	smpsNoAttack, $01
00087491 E113                       	smpsAlterNote       $13
00087493 E701                       	dc.b	smpsNoAttack, $01
00087495 E10D                       	smpsAlterNote       $0D
00087497 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008749D E10C                       	smpsAlterNote       $0C
0008749F C10D                       	dc.b	nE5, $0D
000874A1 E109                       	smpsAlterNote       $09
000874A3 E701                       	dc.b	smpsNoAttack, $01
000874A5 E106                       	smpsAlterNote       $06
000874A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874AB E10C                       	smpsAlterNote       $0C
000874AD E701                       	dc.b	smpsNoAttack, $01
000874AF E110                       	smpsAlterNote       $10
000874B1 E701                       	dc.b	smpsNoAttack, $01
000874B3 E10F                       	smpsAlterNote       $0F
000874B5 E701                       	dc.b	smpsNoAttack, $01
000874B7 E109                       	smpsAlterNote       $09
000874B9 E701                       	dc.b	smpsNoAttack, $01
000874BB E105                       	smpsAlterNote       $05
000874BD E701                       	dc.b	smpsNoAttack, $01
000874BF E109                       	smpsAlterNote       $09
000874C1 E701                       	dc.b	smpsNoAttack, $01
000874C3 E10C                       	smpsAlterNote       $0C
000874C5 E701                       	dc.b	smpsNoAttack, $01
000874C7 E110                       	smpsAlterNote       $10
000874C9 E701                       	dc.b	smpsNoAttack, $01
000874CB E10C                       	smpsAlterNote       $0C
000874CD E701                       	dc.b	smpsNoAttack, $01
000874CF E106                       	smpsAlterNote       $06
000874D1 E701                       	dc.b	smpsNoAttack, $01
000874D3 E105                       	smpsAlterNote       $05
000874D5 E701                       	dc.b	smpsNoAttack, $01
000874D7 E109                       	smpsAlterNote       $09
000874D9 E701                       	dc.b	smpsNoAttack, $01
000874DB E10F                       	smpsAlterNote       $0F
000874DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874E1 E10C                       	smpsAlterNote       $0C
000874E3 E701                       	dc.b	smpsNoAttack, $01
000874E5 E106                       	smpsAlterNote       $06
000874E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874EB E10C                       	smpsAlterNote       $0C
000874ED E701                       	dc.b	smpsNoAttack, $01
000874EF E10F                       	smpsAlterNote       $0F
000874F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874F5 E109                       	smpsAlterNote       $09
000874F7 E701                       	dc.b	smpsNoAttack, $01
000874F9 E105                       	smpsAlterNote       $05
000874FB E701                       	dc.b	smpsNoAttack, $01
000874FD E106                       	smpsAlterNote       $06
000874FF E701                       	dc.b	smpsNoAttack, $01
00087501 E10C                       	smpsAlterNote       $0C
00087503 E701                       	dc.b	smpsNoAttack, $01
00087505 E110                       	smpsAlterNote       $10
00087507 E701                       	dc.b	smpsNoAttack, $01
00087509 E10C                       	smpsAlterNote       $0C
0008750B E701                       	dc.b	smpsNoAttack, $01
0008750D E109                       	smpsAlterNote       $09
0008750F E701                       	dc.b	smpsNoAttack, $01
00087511 E105                       	smpsAlterNote       $05
00087513 E701                       	dc.b	smpsNoAttack, $01
00087515 E109                       	smpsAlterNote       $09
00087517 E701                       	dc.b	smpsNoAttack, $01
00087519 E10F                       	smpsAlterNote       $0F
0008751B E701                       	dc.b	smpsNoAttack, $01
0008751D E110                       	smpsAlterNote       $10
0008751F E701                       	dc.b	smpsNoAttack, $01
00087521 E10C                       	smpsAlterNote       $0C
00087523 E701                       	dc.b	smpsNoAttack, $01
00087525 E106                       	smpsAlterNote       $06
00087527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008752B E109                       	smpsAlterNote       $09
0008752D E701                       	dc.b	smpsNoAttack, $01
0008752F E10F                       	smpsAlterNote       $0F
00087531 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087535 E109                       	smpsAlterNote       $09
00087537 E701                       	dc.b	smpsNoAttack, $01
00087539 E106                       	smpsAlterNote       $06
0008753B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008753F E10C                       	smpsAlterNote       $0C
00087541 E701                       	dc.b	smpsNoAttack, $01
00087543 E110                       	smpsAlterNote       $10
00087545 E701                       	dc.b	smpsNoAttack, $01
00087547 E10F                       	smpsAlterNote       $0F
00087549 E701                       	dc.b	smpsNoAttack, $01
0008754B E109                       	smpsAlterNote       $09
0008754D E701                       	dc.b	smpsNoAttack, $01
0008754F E105                       	smpsAlterNote       $05
00087551 E701                       	dc.b	smpsNoAttack, $01
00087553 E109                       	smpsAlterNote       $09
00087555 E701                       	dc.b	smpsNoAttack, $01
00087557 E10F                       	smpsAlterNote       $0F
00087559 E701                       	dc.b	smpsNoAttack, $01
0008755B E110                       	smpsAlterNote       $10
0008755D E701                       	dc.b	smpsNoAttack, $01
0008755F E10C                       	smpsAlterNote       $0C
00087561 E701                       	dc.b	smpsNoAttack, $01
00087563 E106                       	smpsAlterNote       $06
00087565 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087569 E109                       	smpsAlterNote       $09
0008756B E701                       	dc.b	smpsNoAttack, $01
0008756D E10F                       	smpsAlterNote       $0F
0008756F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087573 E109                       	smpsAlterNote       $09
00087575 E701                       	dc.b	smpsNoAttack, $01
00087577 E106                       	smpsAlterNote       $06
00087579 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008757D E10C                       	smpsAlterNote       $0C
0008757F E701                       	dc.b	smpsNoAttack, $01
00087581 E110                       	smpsAlterNote       $10
00087583 E701                       	dc.b	smpsNoAttack, $01
00087585 E10F                       	smpsAlterNote       $0F
00087587 E701                       	dc.b	smpsNoAttack, $01
00087589 E109                       	smpsAlterNote       $09
0008758B E701                       	dc.b	smpsNoAttack, $01
0008758D E105                       	smpsAlterNote       $05
0008758F E701                       	dc.b	smpsNoAttack, $01
00087591 E109                       	smpsAlterNote       $09
00087593 E701                       	dc.b	smpsNoAttack, $01
00087595 E10C                       	smpsAlterNote       $0C
00087597 E701                       	dc.b	smpsNoAttack, $01
00087599 E110                       	smpsAlterNote       $10
0008759B E701                       	dc.b	smpsNoAttack, $01
0008759D E10C                       	smpsAlterNote       $0C
0008759F E701                       	dc.b	smpsNoAttack, $01
000875A1 E106                       	smpsAlterNote       $06
000875A3 E701                       	dc.b	smpsNoAttack, $01
000875A5 E105                       	smpsAlterNote       $05
000875A7 E701                       	dc.b	smpsNoAttack, $01
000875A9 E109                       	smpsAlterNote       $09
000875AB E701                       	dc.b	smpsNoAttack, $01
000875AD E10F                       	smpsAlterNote       $0F
000875AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875B3 E10C                       	smpsAlterNote       $0C
000875B5 E701                       	dc.b	smpsNoAttack, $01
000875B7 E106                       	smpsAlterNote       $06
000875B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875BD E10C                       	smpsAlterNote       $0C
000875BF E701                       	dc.b	smpsNoAttack, $01
000875C1 E10F                       	smpsAlterNote       $0F
000875C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875C7 E109                       	smpsAlterNote       $09
000875C9 E701                       	dc.b	smpsNoAttack, $01
000875CB E105                       	smpsAlterNote       $05
000875CD E701                       	dc.b	smpsNoAttack, $01
000875CF E106                       	smpsAlterNote       $06
000875D1 E701                       	dc.b	smpsNoAttack, $01
000875D3 E10C                       	smpsAlterNote       $0C
000875D5 E701                       	dc.b	smpsNoAttack, $01
000875D7 E110                       	smpsAlterNote       $10
000875D9 E701                       	dc.b	smpsNoAttack, $01
000875DB E10C                       	smpsAlterNote       $0C
000875DD E701                       	dc.b	smpsNoAttack, $01
000875DF E109                       	smpsAlterNote       $09
000875E1 E701                       	dc.b	smpsNoAttack, $01
000875E3 E105                       	smpsAlterNote       $05
000875E5 E701                       	dc.b	smpsNoAttack, $01
000875E7 E109                       	smpsAlterNote       $09
000875E9 E701                       	dc.b	smpsNoAttack, $01
000875EB E10F                       	smpsAlterNote       $0F
000875ED E701                       	dc.b	smpsNoAttack, $01
000875EF E110                       	smpsAlterNote       $10
000875F1 E701                       	dc.b	smpsNoAttack, $01
000875F3 E10C                       	smpsAlterNote       $0C
000875F5 E701                       	dc.b	smpsNoAttack, $01
000875F7 E106                       	smpsAlterNote       $06
000875F9 E701                       	dc.b	smpsNoAttack, $01
000875FB E10B                       	smpsAlterNote       $0B
000875FD BF02                       	dc.b	nD5, $02
000875FF E10C                       	smpsAlterNote       $0C
00087601 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00087607 E109                       	smpsAlterNote       $09
00087609 E701                       	dc.b	smpsNoAttack, $01
0008760B E105                       	smpsAlterNote       $05
0008760D E701                       	dc.b	smpsNoAttack, $01
0008760F E109                       	smpsAlterNote       $09
00087611 E701                       	dc.b	smpsNoAttack, $01
00087613 E10F                       	smpsAlterNote       $0F
00087615 E701                       	dc.b	smpsNoAttack, $01
00087617 E110                       	smpsAlterNote       $10
00087619 E701                       	dc.b	smpsNoAttack, $01
0008761B E10C                       	smpsAlterNote       $0C
0008761D E701                       	dc.b	smpsNoAttack, $01
0008761F E106                       	smpsAlterNote       $06
00087621 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087625 E109                       	smpsAlterNote       $09
00087627 E701                       	dc.b	smpsNoAttack, $01
00087629 E10F                       	smpsAlterNote       $0F
0008762B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008762F E109                       	smpsAlterNote       $09
00087631 E701                       	dc.b	smpsNoAttack, $01
00087633 E106                       	smpsAlterNote       $06
00087635 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087639 E10C                       	smpsAlterNote       $0C
0008763B E701                       	dc.b	smpsNoAttack, $01
0008763D E110                       	smpsAlterNote       $10
0008763F E701                       	dc.b	smpsNoAttack, $01
00087641 E10F                       	smpsAlterNote       $0F
00087643 E701                       	dc.b	smpsNoAttack, $01
00087645 E109                       	smpsAlterNote       $09
00087647 E701                       	dc.b	smpsNoAttack, $01
00087649 E105                       	smpsAlterNote       $05
0008764B E701                       	dc.b	smpsNoAttack, $01
0008764D E109                       	smpsAlterNote       $09
0008764F E701                       	dc.b	smpsNoAttack, $01
00087651 E10C                       	smpsAlterNote       $0C
00087653 E701                       	dc.b	smpsNoAttack, $01
00087655 E110                       	smpsAlterNote       $10
00087657 E701                       	dc.b	smpsNoAttack, $01
00087659 E10C                       	smpsAlterNote       $0C
0008765B E701                       	dc.b	smpsNoAttack, $01
0008765D E106                       	smpsAlterNote       $06
0008765F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087663 E10D                       	smpsAlterNote       $0D
00087665 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008766D E10C                       	smpsAlterNote       $0C
0008766F C10D                       	dc.b	nE5, $0D
00087671 E106                       	smpsAlterNote       $06
00087673 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087677 E109                       	smpsAlterNote       $09
00087679 E701                       	dc.b	smpsNoAttack, $01
0008767B E10F                       	smpsAlterNote       $0F
0008767D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087681 E109                       	smpsAlterNote       $09
00087683 E701                       	dc.b	smpsNoAttack, $01
00087685 E106                       	smpsAlterNote       $06
00087687 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008768B E10C                       	smpsAlterNote       $0C
0008768D E701                       	dc.b	smpsNoAttack, $01
0008768F E110                       	smpsAlterNote       $10
00087691 E701                       	dc.b	smpsNoAttack, $01
00087693 E10F                       	smpsAlterNote       $0F
00087695 E701                       	dc.b	smpsNoAttack, $01
00087697 E109                       	smpsAlterNote       $09
00087699 E701                       	dc.b	smpsNoAttack, $01
0008769B E105                       	smpsAlterNote       $05
0008769D E701                       	dc.b	smpsNoAttack, $01
0008769F E106                       	smpsAlterNote       $06
000876A1 800F                       	dc.b	nRst, $0F
000876A5 E6FF                       	smpsAlterVol        $FF
000876A7 E10F                       	smpsAlterNote       $0F
000876A9 BA01                       	dc.b	nA4, $01
000876AB E110                       	smpsAlterNote       $10
000876AD BB02                       	dc.b	nBb4, $02
000876AF E10F                       	smpsAlterNote       $0F
000876B1 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000876B7 E10B                       	smpsAlterNote       $0B
000876B9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000876BD E10C                       	smpsAlterNote       $0C
000876BF C103                       	dc.b	nE5, $03
000876C1 E10D                       	smpsAlterNote       $0D
000876C3 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000876CD E10B                       	smpsAlterNote       $0B
000876CF BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
000876D3 E104                       	smpsAlterNote       $04
000876D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876D9 E10A                       	smpsAlterNote       $0A
000876DB E701                       	dc.b	smpsNoAttack, $01
000876DD E10D                       	smpsAlterNote       $0D
000876DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876E3 E107                       	smpsAlterNote       $07
000876E5 E701                       	dc.b	smpsNoAttack, $01
000876E7 E104                       	smpsAlterNote       $04
000876E9 8001                       	dc.b	nRst, $01
000876EB E110                       	smpsAlterNote       $10
000876ED C703                       	dc.b	nBb5, $03
000876EF E10F                       	smpsAlterNote       $0F
000876F1 C603 8001                  	dc.b	nA5, $03, nRst, $01
000876F5 E10D                       	smpsAlterNote       $0D
000876F7 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000876FB E10C                       	smpsAlterNote       $0C
000876FD E701                       	dc.b	smpsNoAttack, $01
000876FF E108                       	smpsAlterNote       $08
00087701 E701                       	dc.b	smpsNoAttack, $01
00087703 E109                       	smpsAlterNote       $09
00087705 E701                       	dc.b	smpsNoAttack, $01
00087707 E10F                       	smpsAlterNote       $0F
00087709 E701                       	dc.b	smpsNoAttack, $01
0008770B E113                       	smpsAlterNote       $13
0008770D E701                       	dc.b	smpsNoAttack, $01
0008770F E10F                       	smpsAlterNote       $0F
00087711 E701                       	dc.b	smpsNoAttack, $01
00087713 E10C                       	smpsAlterNote       $0C
00087715 E701                       	dc.b	smpsNoAttack, $01
00087717 E108                       	smpsAlterNote       $08
00087719 E701                       	dc.b	smpsNoAttack, $01
0008771B E10C                       	smpsAlterNote       $0C
0008771D E701                       	dc.b	smpsNoAttack, $01
0008771F E112                       	smpsAlterNote       $12
00087721 E701                       	dc.b	smpsNoAttack, $01
00087723 E113                       	smpsAlterNote       $13
00087725 E701                       	dc.b	smpsNoAttack, $01
00087727 E10F                       	smpsAlterNote       $0F
00087729 E701                       	dc.b	smpsNoAttack, $01
0008772B E109                       	smpsAlterNote       $09
0008772D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087731 E10C                       	smpsAlterNote       $0C
00087733 E701                       	dc.b	smpsNoAttack, $01
00087735 E112                       	smpsAlterNote       $12
00087737 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008773B E10C                       	smpsAlterNote       $0C
0008773D E701                       	dc.b	smpsNoAttack, $01
0008773F E109                       	smpsAlterNote       $09
00087741 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087745 E10F                       	smpsAlterNote       $0F
00087747 E701                       	dc.b	smpsNoAttack, $01
00087749 E113                       	smpsAlterNote       $13
0008774B E701                       	dc.b	smpsNoAttack, $01
0008774D E112                       	smpsAlterNote       $12
0008774F E701                       	dc.b	smpsNoAttack, $01
00087751 E10C                       	smpsAlterNote       $0C
00087753 E701                       	dc.b	smpsNoAttack, $01
00087755 E108                       	smpsAlterNote       $08
00087757 E701                       	dc.b	smpsNoAttack, $01
00087759 E10C                       	smpsAlterNote       $0C
0008775B E701                       	dc.b	smpsNoAttack, $01
0008775D E10F                       	smpsAlterNote       $0F
0008775F E701                       	dc.b	smpsNoAttack, $01
00087761 E113                       	smpsAlterNote       $13
00087763 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00087767 E10B                       	smpsAlterNote       $0B
00087769 BF03                       	dc.b	nD5, $03
0008776B E10C                       	smpsAlterNote       $0C
0008776D C103 8001                  	dc.b	nE5, $03, nRst, $01
00087771 E10D                       	smpsAlterNote       $0D
00087773 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008777D E10B                       	smpsAlterNote       $0B
0008777F BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008778B E110                       	smpsAlterNote       $10
0008778D C704 8001                  	dc.b	nBb5, $04, nRst, $01
00087791 E10F                       	smpsAlterNote       $0F
00087793 C604                       	dc.b	nA5, $04
00087795 E10D                       	smpsAlterNote       $0D
00087797 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008779D E109                       	smpsAlterNote       $09
0008779F E701                       	dc.b	smpsNoAttack, $01
000877A1 E108                       	smpsAlterNote       $08
000877A3 E701                       	dc.b	smpsNoAttack, $01
000877A5 E10C                       	smpsAlterNote       $0C
000877A7 E701                       	dc.b	smpsNoAttack, $01
000877A9 E112                       	smpsAlterNote       $12
000877AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877AF E10F                       	smpsAlterNote       $0F
000877B1 E701                       	dc.b	smpsNoAttack, $01
000877B3 E109                       	smpsAlterNote       $09
000877B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877B9 E10F                       	smpsAlterNote       $0F
000877BB E701                       	dc.b	smpsNoAttack, $01
000877BD E112                       	smpsAlterNote       $12
000877BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877C3 E10C                       	smpsAlterNote       $0C
000877C5 E701                       	dc.b	smpsNoAttack, $01
000877C7 E108                       	smpsAlterNote       $08
000877C9 E701                       	dc.b	smpsNoAttack, $01
000877CB E109                       	smpsAlterNote       $09
000877CD E701                       	dc.b	smpsNoAttack, $01
000877CF E10F                       	smpsAlterNote       $0F
000877D1 E701                       	dc.b	smpsNoAttack, $01
000877D3 E113                       	smpsAlterNote       $13
000877D5 E701                       	dc.b	smpsNoAttack, $01
000877D7 E10F                       	smpsAlterNote       $0F
000877D9 E701                       	dc.b	smpsNoAttack, $01
000877DB E10C                       	smpsAlterNote       $0C
000877DD E701                       	dc.b	smpsNoAttack, $01
000877DF E108                       	smpsAlterNote       $08
000877E1 E701                       	dc.b	smpsNoAttack, $01
000877E3 E10C                       	smpsAlterNote       $0C
000877E5 E701                       	dc.b	smpsNoAttack, $01
000877E7 E112                       	smpsAlterNote       $12
000877E9 E701                       	dc.b	smpsNoAttack, $01
000877EB E113                       	smpsAlterNote       $13
000877ED E701                       	dc.b	smpsNoAttack, $01
000877EF E10F                       	smpsAlterNote       $0F
000877F1 E701                       	dc.b	smpsNoAttack, $01
000877F3 E109                       	smpsAlterNote       $09
000877F5 E701                       	dc.b	smpsNoAttack, $01
000877F7 E10D                       	smpsAlterNote       $0D
000877F9 C402                       	dc.b	nG5, $02
000877FB E10F                       	smpsAlterNote       $0F
000877FD C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00087807 E10D                       	smpsAlterNote       $0D
00087809 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008780F E10B                       	smpsAlterNote       $0B
00087811 BF0D                       	dc.b	nD5, $0D
00087813 E108                       	smpsAlterNote       $08
00087815 E701                       	dc.b	smpsNoAttack, $01
00087817 E104                       	smpsAlterNote       $04
00087819 E701                       	dc.b	smpsNoAttack, $01
0008781B E105                       	smpsAlterNote       $05
0008781D E701                       	dc.b	smpsNoAttack, $01
0008781F E10B                       	smpsAlterNote       $0B
00087821 E701                       	dc.b	smpsNoAttack, $01
00087823 E10F                       	smpsAlterNote       $0F
00087825 E701                       	dc.b	smpsNoAttack, $01
00087827 E10B                       	smpsAlterNote       $0B
00087829 E701                       	dc.b	smpsNoAttack, $01
0008782B E108                       	smpsAlterNote       $08
0008782D E701                       	dc.b	smpsNoAttack, $01
0008782F E104                       	smpsAlterNote       $04
00087831 E701                       	dc.b	smpsNoAttack, $01
00087833 E108                       	smpsAlterNote       $08
00087835 E701                       	dc.b	smpsNoAttack, $01
00087837 E10E                       	smpsAlterNote       $0E
00087839 E701                       	dc.b	smpsNoAttack, $01
0008783B E10F                       	smpsAlterNote       $0F
0008783D E701                       	dc.b	smpsNoAttack, $01
0008783F E10C                       	smpsAlterNote       $0C
00087841 C101                       	dc.b	nE5, $01
00087843 E10D                       	smpsAlterNote       $0D
00087845 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008784D E10F                       	smpsAlterNote       $0F
0008784F C607                       	dc.b	nA5, $07
00087851 E10C                       	smpsAlterNote       $0C
00087853 CD07                       	dc.b	nE6, $07
00087855 E10D                       	smpsAlterNote       $0D
00087857 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008785B E10C                       	smpsAlterNote       $0C
0008785D CD03                       	dc.b	nE6, $03
0008785F E10A                       	smpsAlterNote       $0A
00087861 C903 8001                  	dc.b	nC6, $03, nRst, $01
00087865 E10D                       	smpsAlterNote       $0D
00087867 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008786D E10A                       	smpsAlterNote       $0A
0008786F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087873 E110                       	smpsAlterNote       $10
00087875 E701                       	dc.b	smpsNoAttack, $01
00087877 E114                       	smpsAlterNote       $14
00087879 E701                       	dc.b	smpsNoAttack, $01
0008787B E113                       	smpsAlterNote       $13
0008787D E701                       	dc.b	smpsNoAttack, $01
0008787F E10D                       	smpsAlterNote       $0D
00087881 E701                       	dc.b	smpsNoAttack, $01
00087883 E109                       	smpsAlterNote       $09
00087885 E701                       	dc.b	smpsNoAttack, $01
00087887 E10D                       	smpsAlterNote       $0D
00087889 E701                       	dc.b	smpsNoAttack, $01
0008788B E110                       	smpsAlterNote       $10
0008788D E701                       	dc.b	smpsNoAttack, $01
0008788F E114                       	smpsAlterNote       $14
00087891 E701                       	dc.b	smpsNoAttack, $01
00087893 E10F                       	smpsAlterNote       $0F
00087895 C607                       	dc.b	nA5, $07
00087897 E10D                       	smpsAlterNote       $0D
00087899 C40D                       	dc.b	nG5, $0D
0008789B E10A                       	smpsAlterNote       $0A
0008789D E701                       	dc.b	smpsNoAttack, $01
0008789F E106                       	smpsAlterNote       $06
000878A1 E701                       	dc.b	smpsNoAttack, $01
000878A3 E10A                       	smpsAlterNote       $0A
000878A5 E701                       	dc.b	smpsNoAttack, $01
000878A7 E10D                       	smpsAlterNote       $0D
000878A9 E701                       	dc.b	smpsNoAttack, $01
000878AB E111                       	smpsAlterNote       $11
000878AD E701                       	dc.b	smpsNoAttack, $01
000878AF E10D                       	smpsAlterNote       $0D
000878B1 E701                       	dc.b	smpsNoAttack, $01
000878B3 E107                       	smpsAlterNote       $07
000878B5 E701                       	dc.b	smpsNoAttack, $01
000878B7 E106                       	smpsAlterNote       $06
000878B9 E701                       	dc.b	smpsNoAttack, $01
000878BB E10A                       	smpsAlterNote       $0A
000878BD E701                       	dc.b	smpsNoAttack, $01
000878BF E110                       	smpsAlterNote       $10
000878C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878C5 E10D                       	smpsAlterNote       $0D
000878C7 E701                       	dc.b	smpsNoAttack, $01
000878C9 E107                       	smpsAlterNote       $07
000878CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878CF E10F                       	smpsAlterNote       $0F
000878D1 C60E                       	dc.b	nA5, $0E
000878D3 E109                       	smpsAlterNote       $09
000878D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878D9 E10F                       	smpsAlterNote       $0F
000878DB E701                       	dc.b	smpsNoAttack, $01
000878DD E112                       	smpsAlterNote       $12
000878DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878E3 E10C                       	smpsAlterNote       $0C
000878E5 E701                       	dc.b	smpsNoAttack, $01
000878E7 E108                       	smpsAlterNote       $08
000878E9 E701                       	dc.b	smpsNoAttack, $01
000878EB E109                       	smpsAlterNote       $09
000878ED E701                       	dc.b	smpsNoAttack, $01
000878EF E10F                       	smpsAlterNote       $0F
000878F1 E701                       	dc.b	smpsNoAttack, $01
000878F3 E113                       	smpsAlterNote       $13
000878F5 E701                       	dc.b	smpsNoAttack, $01
000878F7 E10F                       	smpsAlterNote       $0F
000878F9 E701                       	dc.b	smpsNoAttack, $01
000878FB E10C                       	smpsAlterNote       $0C
000878FD E701                       	dc.b	smpsNoAttack, $01
000878FF E108                       	smpsAlterNote       $08
00087901 E701                       	dc.b	smpsNoAttack, $01
00087903 E109                       	smpsAlterNote       $09
00087905 8001                       	dc.b	nRst, $01
00087907 E110                       	smpsAlterNote       $10
00087909 C70D                       	dc.b	nBb5, $0D
0008790B E10D                       	smpsAlterNote       $0D
0008790D E701                       	dc.b	smpsNoAttack, $01
0008790F E109                       	smpsAlterNote       $09
00087911 E701                       	dc.b	smpsNoAttack, $01
00087913 E10D                       	smpsAlterNote       $0D
00087915 E701                       	dc.b	smpsNoAttack, $01
00087917 E113                       	smpsAlterNote       $13
00087919 E701                       	dc.b	smpsNoAttack, $01
0008791B E114                       	smpsAlterNote       $14
0008791D E701                       	dc.b	smpsNoAttack, $01
0008791F E110                       	smpsAlterNote       $10
00087921 E701                       	dc.b	smpsNoAttack, $01
00087923 E10A                       	smpsAlterNote       $0A
00087925 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087929 E10D                       	smpsAlterNote       $0D
0008792B E701                       	dc.b	smpsNoAttack, $01
0008792D E113                       	smpsAlterNote       $13
0008792F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087933 E10D                       	smpsAlterNote       $0D
00087935 E701                       	dc.b	smpsNoAttack, $01
00087937 E10A                       	smpsAlterNote       $0A
00087939 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00087943 E10B                       	smpsAlterNote       $0B
00087945 8001                       	dc.b	nRst, $01
00087947 E10C                       	smpsAlterNote       $0C
00087949 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008794D E10B                       	smpsAlterNote       $0B
0008794F CB0D                       	dc.b	nD6, $0D
00087951 E105                       	smpsAlterNote       $05
00087953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087957 E108                       	smpsAlterNote       $08
00087959 E701                       	dc.b	smpsNoAttack, $01
0008795B E10E                       	smpsAlterNote       $0E
0008795D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087961 E108                       	smpsAlterNote       $08
00087963 E701                       	dc.b	smpsNoAttack, $01
00087965 E105                       	smpsAlterNote       $05
00087967 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008796B E10B                       	smpsAlterNote       $0B
0008796D E701                       	dc.b	smpsNoAttack, $01
0008796F E10F                       	smpsAlterNote       $0F
00087971 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087975 E10C                       	smpsAlterNote       $0C
00087977 CC0D                       	dc.b	nEb6, $0D
00087979 E106                       	smpsAlterNote       $06
0008797B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008797F E109                       	smpsAlterNote       $09
00087981 E701                       	dc.b	smpsNoAttack, $01
00087983 E10C                       	smpsAlterNote       $0C
00087985 8001                       	dc.b	nRst, $01
00087987 E10A                       	smpsAlterNote       $0A
00087989 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00087995 CB0E                       	dc.b	nD6, $0E
00087997 E105                       	smpsAlterNote       $05
00087999 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008799D E10B                       	smpsAlterNote       $0B
0008799F E701                       	dc.b	smpsNoAttack, $01
000879A1 E10E                       	smpsAlterNote       $0E
000879A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879A7 E108                       	smpsAlterNote       $08
000879A9 E701                       	dc.b	smpsNoAttack, $01
000879AB E104                       	smpsAlterNote       $04
000879AD E701                       	dc.b	smpsNoAttack, $01
000879AF E105                       	smpsAlterNote       $05
000879B1 E701                       	dc.b	smpsNoAttack, $01
000879B3 E10B                       	smpsAlterNote       $0B
000879B5 E701                       	dc.b	smpsNoAttack, $01
000879B7 E10F                       	smpsAlterNote       $0F
000879B9 E701                       	dc.b	smpsNoAttack, $01
000879BB E10D                       	smpsAlterNote       $0D
000879BD CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000879C1 E10C                       	smpsAlterNote       $0C
000879C3 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000879C7 E10A                       	smpsAlterNote       $0A
000879C9 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
000879D5 CB0D                       	dc.b	nD6, $0D
000879D7 E108                       	smpsAlterNote       $08
000879D9 E701                       	dc.b	smpsNoAttack, $01
000879DB E104                       	smpsAlterNote       $04
000879DD E701                       	dc.b	smpsNoAttack, $01
000879DF E105                       	smpsAlterNote       $05
000879E1 E701                       	dc.b	smpsNoAttack, $01
000879E3 E10B                       	smpsAlterNote       $0B
000879E5 E701                       	dc.b	smpsNoAttack, $01
000879E7 E10F                       	smpsAlterNote       $0F
000879E9 E701                       	dc.b	smpsNoAttack, $01
000879EB E10B                       	smpsAlterNote       $0B
000879ED E701                       	dc.b	smpsNoAttack, $01
000879EF E108                       	smpsAlterNote       $08
000879F1 E701                       	dc.b	smpsNoAttack, $01
000879F3 E104                       	smpsAlterNote       $04
000879F5 E701                       	dc.b	smpsNoAttack, $01
000879F7 E108                       	smpsAlterNote       $08
000879F9 E701                       	dc.b	smpsNoAttack, $01
000879FB E10E                       	smpsAlterNote       $0E
000879FD E701                       	dc.b	smpsNoAttack, $01
000879FF E10F                       	smpsAlterNote       $0F
00087A01 E701                       	dc.b	smpsNoAttack, $01
00087A03 E10C                       	smpsAlterNote       $0C
00087A05 CC0D                       	dc.b	nEb6, $0D
00087A07 E109                       	smpsAlterNote       $09
00087A09 E701                       	dc.b	smpsNoAttack, $01
00087A0B E105                       	smpsAlterNote       $05
00087A0D E701                       	dc.b	smpsNoAttack, $01
00087A0F E106                       	smpsAlterNote       $06
00087A11 E701                       	dc.b	smpsNoAttack, $01
00087A13 E10C                       	smpsAlterNote       $0C
00087A15 E701                       	dc.b	smpsNoAttack, $01
00087A17 E10A                       	smpsAlterNote       $0A
00087A19 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00087A25 CB0D                       	dc.b	nD6, $0D
00087A27 E108                       	smpsAlterNote       $08
00087A29 E701                       	dc.b	smpsNoAttack, $01
00087A2B E104                       	smpsAlterNote       $04
00087A2D E701                       	dc.b	smpsNoAttack, $01
00087A2F E108                       	smpsAlterNote       $08
00087A31 E701                       	dc.b	smpsNoAttack, $01
00087A33 E10B                       	smpsAlterNote       $0B
00087A35 E701                       	dc.b	smpsNoAttack, $01
00087A37 E10F                       	smpsAlterNote       $0F
00087A39 E701                       	dc.b	smpsNoAttack, $01
00087A3B E10B                       	smpsAlterNote       $0B
00087A3D E701                       	dc.b	smpsNoAttack, $01
00087A3F E105                       	smpsAlterNote       $05
00087A41 E701                       	dc.b	smpsNoAttack, $01
00087A43 E104                       	smpsAlterNote       $04
00087A45 E701                       	dc.b	smpsNoAttack, $01
00087A47 E108                       	smpsAlterNote       $08
00087A49 E701                       	dc.b	smpsNoAttack, $01
00087A4B E10E                       	smpsAlterNote       $0E
00087A4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A51 E10B                       	smpsAlterNote       $0B
00087A53 E701                       	dc.b	smpsNoAttack, $01
00087A55 E105                       	smpsAlterNote       $05
00087A57 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00087A5F 03                         	dc.b	$03
00087A60 E601                       	smpsAlterVol        $01
00087A62 F6F1 D1                    	smpsJump            music84_Jump01
00087A65                            
00087A65                            ; FM5 Data
00087A65                            music84_FM5:
00087A67 E080                       	smpsPan             panLeft, $00
00087A69 8003                       	dc.b	nRst, $03
00087A6B E10D                       	smpsAlterNote       $0D
00087A6D C203 8008                  	dc.b	nF5, $03, nRst, $08
00087A71 E10C                       	smpsAlterNote       $0C
00087A73 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00087A77 E10F                       	smpsAlterNote       $0F
00087A79 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00087A7F E6FE                       	smpsAlterVol        $FE
00087A81 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00087A87 E10D                       	smpsAlterNote       $0D
00087A89 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00087A8F E10C                       	smpsAlterNote       $0C
00087A91 C102 8001                  	dc.b	nE5, $02, nRst, $01
00087A95 E10A                       	smpsAlterNote       $0A
00087A97 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00087A9D 03                         	dc.b	$03
00087A9E                            
00087A9E                            music84_Jump00:
00087A9E 8004                       	dc.b	nRst, $04
00087AA0 E602                       	smpsAlterVol        $02
00087AA2 E10D                       	smpsAlterNote       $0D
00087AA4 B60D                       	dc.b	nF4, $0D
00087AA6 E107                       	smpsAlterNote       $07
00087AA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AAC E10A                       	smpsAlterNote       $0A
00087AAE E701                       	dc.b	smpsNoAttack, $01
00087AB0 E110                       	smpsAlterNote       $10
00087AB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AB6 E10A                       	smpsAlterNote       $0A
00087AB8 E701                       	dc.b	smpsNoAttack, $01
00087ABA E107                       	smpsAlterNote       $07
00087ABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AC0 E10D                       	smpsAlterNote       $0D
00087AC2 E701                       	dc.b	smpsNoAttack, $01
00087AC4 E111                       	smpsAlterNote       $11
00087AC6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087ACA E10D                       	smpsAlterNote       $0D
00087ACC B80D                       	dc.b	nG4, $0D
00087ACE E107                       	smpsAlterNote       $07
00087AD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AD4 E10A                       	smpsAlterNote       $0A
00087AD6 E701                       	dc.b	smpsNoAttack, $01
00087AD8 E110                       	smpsAlterNote       $10
00087ADA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087ADE E10A                       	smpsAlterNote       $0A
00087AE0 E701                       	dc.b	smpsNoAttack, $01
00087AE2 E107                       	smpsAlterNote       $07
00087AE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AE8 E10D                       	smpsAlterNote       $0D
00087AEA E701                       	dc.b	smpsNoAttack, $01
00087AEC E111                       	smpsAlterNote       $11
00087AEE E701                       	dc.b	smpsNoAttack, $01
00087AF0 E110                       	smpsAlterNote       $10
00087AF2 E701                       	dc.b	smpsNoAttack, $01
00087AF4 E10A                       	smpsAlterNote       $0A
00087AF6 E701                       	dc.b	smpsNoAttack, $01
00087AF8 E106                       	smpsAlterNote       $06
00087AFA E701                       	dc.b	smpsNoAttack, $01
00087AFC E10A                       	smpsAlterNote       $0A
00087AFE E701                       	dc.b	smpsNoAttack, $01
00087B00 E10D                       	smpsAlterNote       $0D
00087B02 E701                       	dc.b	smpsNoAttack, $01
00087B04 E111                       	smpsAlterNote       $11
00087B06 E701                       	dc.b	smpsNoAttack, $01
00087B08 E10D                       	smpsAlterNote       $0D
00087B0A E701                       	dc.b	smpsNoAttack, $01
00087B0C E10F                       	smpsAlterNote       $0F
00087B0E BA0E                       	dc.b	nA4, $0E
00087B10 E109                       	smpsAlterNote       $09
00087B12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B16 E10F                       	smpsAlterNote       $0F
00087B18 E701                       	dc.b	smpsNoAttack, $01
00087B1A E112                       	smpsAlterNote       $12
00087B1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B20 E10C                       	smpsAlterNote       $0C
00087B22 E701                       	dc.b	smpsNoAttack, $01
00087B24 E108                       	smpsAlterNote       $08
00087B26 E701                       	dc.b	smpsNoAttack, $01
00087B28 E109                       	smpsAlterNote       $09
00087B2A E701                       	dc.b	smpsNoAttack, $01
00087B2C E10F                       	smpsAlterNote       $0F
00087B2E E701                       	dc.b	smpsNoAttack, $01
00087B30 E113                       	smpsAlterNote       $13
00087B32 E701                       	dc.b	smpsNoAttack, $01
00087B34 E10F                       	smpsAlterNote       $0F
00087B36 E701                       	dc.b	smpsNoAttack, $01
00087B38 E109                       	smpsAlterNote       $09
00087B3A E701                       	dc.b	smpsNoAttack, $01
00087B3C E108                       	smpsAlterNote       $08
00087B3E E701                       	dc.b	smpsNoAttack, $01
00087B40 E10C                       	smpsAlterNote       $0C
00087B42 E701                       	dc.b	smpsNoAttack, $01
00087B44 E112                       	smpsAlterNote       $12
00087B46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B4A E10F                       	smpsAlterNote       $0F
00087B4C E701                       	dc.b	smpsNoAttack, $01
00087B4E E109                       	smpsAlterNote       $09
00087B50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B54 E10F                       	smpsAlterNote       $0F
00087B56 E701                       	dc.b	smpsNoAttack, $01
00087B58 E112                       	smpsAlterNote       $12
00087B5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B5E E10C                       	smpsAlterNote       $0C
00087B60 E701                       	dc.b	smpsNoAttack, $01
00087B62 E108                       	smpsAlterNote       $08
00087B64 E701                       	dc.b	smpsNoAttack, $01
00087B66 E109                       	smpsAlterNote       $09
00087B68 E701                       	dc.b	smpsNoAttack, $01
00087B6A E10F                       	smpsAlterNote       $0F
00087B6C E701                       	dc.b	smpsNoAttack, $01
00087B6E E113                       	smpsAlterNote       $13
00087B70 E701                       	dc.b	smpsNoAttack, $01
00087B72 E10F                       	smpsAlterNote       $0F
00087B74 E701                       	dc.b	smpsNoAttack, $01
00087B76 E10C                       	smpsAlterNote       $0C
00087B78 E701                       	dc.b	smpsNoAttack, $01
00087B7A E108                       	smpsAlterNote       $08
00087B7C E701                       	dc.b	smpsNoAttack, $01
00087B7E E109                       	smpsAlterNote       $09
00087B80 8001                       	dc.b	nRst, $01
00087B82 E10C                       	smpsAlterNote       $0C
00087B84 B50A                       	dc.b	nE4, $0A
00087B86 E10D                       	smpsAlterNote       $0D
00087B88 B60D                       	dc.b	nF4, $0D
00087B8A E10A                       	smpsAlterNote       $0A
00087B8C E701                       	dc.b	smpsNoAttack, $01
00087B8E E106                       	smpsAlterNote       $06
00087B90 E701                       	dc.b	smpsNoAttack, $01
00087B92 E107                       	smpsAlterNote       $07
00087B94 E701                       	dc.b	smpsNoAttack, $01
00087B96 E10D                       	smpsAlterNote       $0D
00087B98 E701                       	dc.b	smpsNoAttack, $01
00087B9A E111                       	smpsAlterNote       $11
00087B9C E701                       	dc.b	smpsNoAttack, $01
00087B9E E10D                       	smpsAlterNote       $0D
00087BA0 E701                       	dc.b	smpsNoAttack, $01
00087BA2 E10A                       	smpsAlterNote       $0A
00087BA4 E701                       	dc.b	smpsNoAttack, $01
00087BA6 E106                       	smpsAlterNote       $06
00087BA8 E701                       	dc.b	smpsNoAttack, $01
00087BAA E10A                       	smpsAlterNote       $0A
00087BAC E701                       	dc.b	smpsNoAttack, $01
00087BAE E110                       	smpsAlterNote       $10
00087BB0 E701                       	dc.b	smpsNoAttack, $01
00087BB2 E111                       	smpsAlterNote       $11
00087BB4 E701                       	dc.b	smpsNoAttack, $01
00087BB6 E10D                       	smpsAlterNote       $0D
00087BB8 B80D                       	dc.b	nG4, $0D
00087BBA E10A                       	smpsAlterNote       $0A
00087BBC E701                       	dc.b	smpsNoAttack, $01
00087BBE E106                       	smpsAlterNote       $06
00087BC0 E701                       	dc.b	smpsNoAttack, $01
00087BC2 E107                       	smpsAlterNote       $07
00087BC4 E701                       	dc.b	smpsNoAttack, $01
00087BC6 E10D                       	smpsAlterNote       $0D
00087BC8 E701                       	dc.b	smpsNoAttack, $01
00087BCA E111                       	smpsAlterNote       $11
00087BCC E701                       	dc.b	smpsNoAttack, $01
00087BCE E10D                       	smpsAlterNote       $0D
00087BD0 E701                       	dc.b	smpsNoAttack, $01
00087BD2 E10A                       	smpsAlterNote       $0A
00087BD4 E701                       	dc.b	smpsNoAttack, $01
00087BD6 E106                       	smpsAlterNote       $06
00087BD8 E701                       	dc.b	smpsNoAttack, $01
00087BDA E10A                       	smpsAlterNote       $0A
00087BDC E701                       	dc.b	smpsNoAttack, $01
00087BDE E110                       	smpsAlterNote       $10
00087BE0 E701                       	dc.b	smpsNoAttack, $01
00087BE2 E111                       	smpsAlterNote       $11
00087BE4 E701                       	dc.b	smpsNoAttack, $01
00087BE6 E10D                       	smpsAlterNote       $0D
00087BE8 E701                       	dc.b	smpsNoAttack, $01
00087BEA E107                       	smpsAlterNote       $07
00087BEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BF0 E10A                       	smpsAlterNote       $0A
00087BF2 E701                       	dc.b	smpsNoAttack, $01
00087BF4 E110                       	smpsAlterNote       $10
00087BF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BFA E10D                       	smpsAlterNote       $0D
00087BFC 8001                       	dc.b	nRst, $01
00087BFE E10F                       	smpsAlterNote       $0F
00087C00 BA0D                       	dc.b	nA4, $0D
00087C02 E10C                       	smpsAlterNote       $0C
00087C04 E701                       	dc.b	smpsNoAttack, $01
00087C06 E108                       	smpsAlterNote       $08
00087C08 E701                       	dc.b	smpsNoAttack, $01
00087C0A E10C                       	smpsAlterNote       $0C
00087C0C E701                       	dc.b	smpsNoAttack, $01
00087C0E E112                       	smpsAlterNote       $12
00087C10 E701                       	dc.b	smpsNoAttack, $01
00087C12 E113                       	smpsAlterNote       $13
00087C14 E701                       	dc.b	smpsNoAttack, $01
00087C16 E10F                       	smpsAlterNote       $0F
00087C18 E701                       	dc.b	smpsNoAttack, $01
00087C1A E109                       	smpsAlterNote       $09
00087C1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C20 E10C                       	smpsAlterNote       $0C
00087C22 E701                       	dc.b	smpsNoAttack, $01
00087C24 E112                       	smpsAlterNote       $12
00087C26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C2A E10C                       	smpsAlterNote       $0C
00087C2C E701                       	dc.b	smpsNoAttack, $01
00087C2E E109                       	smpsAlterNote       $09
00087C30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C34 E10F                       	smpsAlterNote       $0F
00087C36 E701                       	dc.b	smpsNoAttack, $01
00087C38 E113                       	smpsAlterNote       $13
00087C3A E701                       	dc.b	smpsNoAttack, $01
00087C3C E112                       	smpsAlterNote       $12
00087C3E E701                       	dc.b	smpsNoAttack, $01
00087C40 E10C                       	smpsAlterNote       $0C
00087C42 E701                       	dc.b	smpsNoAttack, $01
00087C44 E108                       	smpsAlterNote       $08
00087C46 E701                       	dc.b	smpsNoAttack, $01
00087C48 E10C                       	smpsAlterNote       $0C
00087C4A E701                       	dc.b	smpsNoAttack, $01
00087C4C E10F                       	smpsAlterNote       $0F
00087C4E E701                       	dc.b	smpsNoAttack, $01
00087C50 E113                       	smpsAlterNote       $13
00087C52 E701                       	dc.b	smpsNoAttack, $01
00087C54 E10F                       	smpsAlterNote       $0F
00087C56 E701                       	dc.b	smpsNoAttack, $01
00087C58 E109                       	smpsAlterNote       $09
00087C5A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087C5E E10D                       	smpsAlterNote       $0D
00087C60 B609 8001                  	dc.b	nF4, $09, nRst, $01
00087C64 E10C                       	smpsAlterNote       $0C
00087C66 B506 8001                  	dc.b	nE4, $06, nRst, $01
00087C6A E10B                       	smpsAlterNote       $0B
00087C6C B30D                       	dc.b	nD4, $0D
00087C6E E10C                       	smpsAlterNote       $0C
00087C70 B503 8001                  	dc.b	nE4, $03, nRst, $01
00087C74 E10D                       	smpsAlterNote       $0D
00087C76 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00087C7E E109                       	smpsAlterNote       $09
00087C80 E701                       	dc.b	smpsNoAttack, $01
00087C82 E108                       	smpsAlterNote       $08
00087C84 E701                       	dc.b	smpsNoAttack, $01
00087C86 E10C                       	smpsAlterNote       $0C
00087C88 E701                       	dc.b	smpsNoAttack, $01
00087C8A E112                       	smpsAlterNote       $12
00087C8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C90 E10F                       	smpsAlterNote       $0F
00087C92 E701                       	dc.b	smpsNoAttack, $01
00087C94 E109                       	smpsAlterNote       $09
00087C96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C9A E10F                       	smpsAlterNote       $0F
00087C9C E701                       	dc.b	smpsNoAttack, $01
00087C9E E112                       	smpsAlterNote       $12
00087CA0 E701                       	dc.b	smpsNoAttack, $01
00087CA2 E113                       	smpsAlterNote       $13
00087CA4 8001                       	dc.b	nRst, $01
00087CA6 E10D                       	smpsAlterNote       $0D
00087CA8 C20D                       	dc.b	nF5, $0D
00087CAA E107                       	smpsAlterNote       $07
00087CAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CB0 E10A                       	smpsAlterNote       $0A
00087CB2 E701                       	dc.b	smpsNoAttack, $01
00087CB4 E110                       	smpsAlterNote       $10
00087CB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CBA E10A                       	smpsAlterNote       $0A
00087CBC E701                       	dc.b	smpsNoAttack, $01
00087CBE E107                       	smpsAlterNote       $07
00087CC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CC4 E10D                       	smpsAlterNote       $0D
00087CC6 E701                       	dc.b	smpsNoAttack, $01
00087CC8 E111                       	smpsAlterNote       $11
00087CCA E701                       	dc.b	smpsNoAttack, $01
00087CCC E110                       	smpsAlterNote       $10
00087CCE E701                       	dc.b	smpsNoAttack, $01
00087CD0 E10A                       	smpsAlterNote       $0A
00087CD2 E701                       	dc.b	smpsNoAttack, $01
00087CD4 E106                       	smpsAlterNote       $06
00087CD6 E701                       	dc.b	smpsNoAttack, $01
00087CD8 E10A                       	smpsAlterNote       $0A
00087CDA E701                       	dc.b	smpsNoAttack, $01
00087CDC E10D                       	smpsAlterNote       $0D
00087CDE E701                       	dc.b	smpsNoAttack, $01
00087CE0 E111                       	smpsAlterNote       $11
00087CE2 E701                       	dc.b	smpsNoAttack, $01
00087CE4 E10D                       	smpsAlterNote       $0D
00087CE6 E701                       	dc.b	smpsNoAttack, $01
00087CE8 E107                       	smpsAlterNote       $07
00087CEA E701                       	dc.b	smpsNoAttack, $01
00087CEC E106                       	smpsAlterNote       $06
00087CEE E701                       	dc.b	smpsNoAttack, $01
00087CF0 E10A                       	smpsAlterNote       $0A
00087CF2 E701                       	dc.b	smpsNoAttack, $01
00087CF4 E110                       	smpsAlterNote       $10
00087CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CFA E10D                       	smpsAlterNote       $0D
00087CFC E701                       	dc.b	smpsNoAttack, $01
00087CFE E107                       	smpsAlterNote       $07
00087D00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D04 E10D                       	smpsAlterNote       $0D
00087D06 E701                       	dc.b	smpsNoAttack, $01
00087D08 E110                       	smpsAlterNote       $10
00087D0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D0E E10A                       	smpsAlterNote       $0A
00087D10 E701                       	dc.b	smpsNoAttack, $01
00087D12 E106                       	smpsAlterNote       $06
00087D14 E701                       	dc.b	smpsNoAttack, $01
00087D16 E107                       	smpsAlterNote       $07
00087D18 E701                       	dc.b	smpsNoAttack, $01
00087D1A E10D                       	smpsAlterNote       $0D
00087D1C E701                       	dc.b	smpsNoAttack, $01
00087D1E E111                       	smpsAlterNote       $11
00087D20 E701                       	dc.b	smpsNoAttack, $01
00087D22 E10D                       	smpsAlterNote       $0D
00087D24 E701                       	dc.b	smpsNoAttack, $01
00087D26 E10A                       	smpsAlterNote       $0A
00087D28 E701                       	dc.b	smpsNoAttack, $01
00087D2A E106                       	smpsAlterNote       $06
00087D2C E701                       	dc.b	smpsNoAttack, $01
00087D2E E10A                       	smpsAlterNote       $0A
00087D30 E701                       	dc.b	smpsNoAttack, $01
00087D32 E110                       	smpsAlterNote       $10
00087D34 E701                       	dc.b	smpsNoAttack, $01
00087D36 E111                       	smpsAlterNote       $11
00087D38 E701                       	dc.b	smpsNoAttack, $01
00087D3A E10D                       	smpsAlterNote       $0D
00087D3C E701                       	dc.b	smpsNoAttack, $01
00087D3E E107                       	smpsAlterNote       $07
00087D40 E701                       	dc.b	smpsNoAttack, $01
00087D42 E10D                       	smpsAlterNote       $0D
00087D44 C207                       	dc.b	nF5, $07
00087D46 E10C                       	smpsAlterNote       $0C
00087D48 C10D                       	dc.b	nE5, $0D
00087D4A E109                       	smpsAlterNote       $09
00087D4C E701                       	dc.b	smpsNoAttack, $01
00087D4E E106                       	smpsAlterNote       $06
00087D50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D54 E10C                       	smpsAlterNote       $0C
00087D56 E701                       	dc.b	smpsNoAttack, $01
00087D58 E110                       	smpsAlterNote       $10
00087D5A E701                       	dc.b	smpsNoAttack, $01
00087D5C E10F                       	smpsAlterNote       $0F
00087D5E E701                       	dc.b	smpsNoAttack, $01
00087D60 E109                       	smpsAlterNote       $09
00087D62 E701                       	dc.b	smpsNoAttack, $01
00087D64 E105                       	smpsAlterNote       $05
00087D66 E701                       	dc.b	smpsNoAttack, $01
00087D68 E109                       	smpsAlterNote       $09
00087D6A E701                       	dc.b	smpsNoAttack, $01
00087D6C E10C                       	smpsAlterNote       $0C
00087D6E E701                       	dc.b	smpsNoAttack, $01
00087D70 E110                       	smpsAlterNote       $10
00087D72 E701                       	dc.b	smpsNoAttack, $01
00087D74 E10B                       	smpsAlterNote       $0B
00087D76 BF0D                       	dc.b	nD5, $0D
00087D78 E108                       	smpsAlterNote       $08
00087D7A E701                       	dc.b	smpsNoAttack, $01
00087D7C E105                       	smpsAlterNote       $05
00087D7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D82 E10B                       	smpsAlterNote       $0B
00087D84 E701                       	dc.b	smpsNoAttack, $01
00087D86 E10F                       	smpsAlterNote       $0F
00087D88 E701                       	dc.b	smpsNoAttack, $01
00087D8A E10E                       	smpsAlterNote       $0E
00087D8C E701                       	dc.b	smpsNoAttack, $01
00087D8E E108                       	smpsAlterNote       $08
00087D90 E701                       	dc.b	smpsNoAttack, $01
00087D92 E104                       	smpsAlterNote       $04
00087D94 E701                       	dc.b	smpsNoAttack, $01
00087D96 E108                       	smpsAlterNote       $08
00087D98 E701                       	dc.b	smpsNoAttack, $01
00087D9A E10E                       	smpsAlterNote       $0E
00087D9C E701                       	dc.b	smpsNoAttack, $01
00087D9E E10F                       	smpsAlterNote       $0F
00087DA0 E701                       	dc.b	smpsNoAttack, $01
00087DA2 E10B                       	smpsAlterNote       $0B
00087DA4 E701                       	dc.b	smpsNoAttack, $01
00087DA6 E105                       	smpsAlterNote       $05
00087DA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DAC E108                       	smpsAlterNote       $08
00087DAE E701                       	dc.b	smpsNoAttack, $01
00087DB0 E10E                       	smpsAlterNote       $0E
00087DB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DB6 E108                       	smpsAlterNote       $08
00087DB8 E701                       	dc.b	smpsNoAttack, $01
00087DBA E105                       	smpsAlterNote       $05
00087DBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DC0 E10B                       	smpsAlterNote       $0B
00087DC2 E701                       	dc.b	smpsNoAttack, $01
00087DC4 E10F                       	smpsAlterNote       $0F
00087DC6 E701                       	dc.b	smpsNoAttack, $01
00087DC8 E10E                       	smpsAlterNote       $0E
00087DCA E701                       	dc.b	smpsNoAttack, $01
00087DCC E108                       	smpsAlterNote       $08
00087DCE E701                       	dc.b	smpsNoAttack, $01
00087DD0 E104                       	smpsAlterNote       $04
00087DD2 E701                       	dc.b	smpsNoAttack, $01
00087DD4 E108                       	smpsAlterNote       $08
00087DD6 E701                       	dc.b	smpsNoAttack, $01
00087DD8 E10B                       	smpsAlterNote       $0B
00087DDA E701                       	dc.b	smpsNoAttack, $01
00087DDC E10F                       	smpsAlterNote       $0F
00087DDE E701                       	dc.b	smpsNoAttack, $01
00087DE0 E10B                       	smpsAlterNote       $0B
00087DE2 E701                       	dc.b	smpsNoAttack, $01
00087DE4 E105                       	smpsAlterNote       $05
00087DE6 E701                       	dc.b	smpsNoAttack, $01
00087DE8 E104                       	smpsAlterNote       $04
00087DEA E701                       	dc.b	smpsNoAttack, $01
00087DEC E108                       	smpsAlterNote       $08
00087DEE E701                       	dc.b	smpsNoAttack, $01
00087DF0 E10E                       	smpsAlterNote       $0E
00087DF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DF6 E10B                       	smpsAlterNote       $0B
00087DF8 E701                       	dc.b	smpsNoAttack, $01
00087DFA E105                       	smpsAlterNote       $05
00087DFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E00 E10B                       	smpsAlterNote       $0B
00087E02 E701                       	dc.b	smpsNoAttack, $01
00087E04 E10E                       	smpsAlterNote       $0E
00087E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E0A E108                       	smpsAlterNote       $08
00087E0C E701                       	dc.b	smpsNoAttack, $01
00087E0E E105                       	smpsAlterNote       $05
00087E10 8001                       	dc.b	nRst, $01
00087E14 E601                       	smpsAlterVol        $01
00087E16 E10B                       	smpsAlterNote       $0B
00087E18 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00087E24 8004                       	dc.b	nRst, $04
00087E28 E6FF                       	smpsAlterVol        $FF
00087E2A E10D                       	smpsAlterNote       $0D
00087E2C B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00087E34 E10C                       	smpsAlterNote       $0C
00087E36 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00087E3B E10D                       	smpsAlterNote       $0D
00087E3D B60D                       	dc.b	nF4, $0D
00087E3F E10A                       	smpsAlterNote       $0A
00087E41 E701                       	dc.b	smpsNoAttack, $01
00087E43 E106                       	smpsAlterNote       $06
00087E45 E701                       	dc.b	smpsNoAttack, $01
00087E47 E10A                       	smpsAlterNote       $0A
00087E49 E701                       	dc.b	smpsNoAttack, $01
00087E4B E110                       	smpsAlterNote       $10
00087E4D E701                       	dc.b	smpsNoAttack, $01
00087E4F E111                       	smpsAlterNote       $11
00087E51 E701                       	dc.b	smpsNoAttack, $01
00087E53 E10D                       	smpsAlterNote       $0D
00087E55 E701                       	dc.b	smpsNoAttack, $01
00087E57 E107                       	smpsAlterNote       $07
00087E59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E5D E10A                       	smpsAlterNote       $0A
00087E5F E701                       	dc.b	smpsNoAttack, $01
00087E61 E110                       	smpsAlterNote       $10
00087E63 E701                       	dc.b	smpsNoAttack, $01
00087E65 E111                       	smpsAlterNote       $11
00087E67 8001                       	dc.b	nRst, $01
00087E69 E10D                       	smpsAlterNote       $0D
00087E6B B80D                       	dc.b	nG4, $0D
00087E6D E10A                       	smpsAlterNote       $0A
00087E6F E701                       	dc.b	smpsNoAttack, $01
00087E71 E106                       	smpsAlterNote       $06
00087E73 E701                       	dc.b	smpsNoAttack, $01
00087E75 E10A                       	smpsAlterNote       $0A
00087E77 E701                       	dc.b	smpsNoAttack, $01
00087E79 E110                       	smpsAlterNote       $10
00087E7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E7F E10D                       	smpsAlterNote       $0D
00087E81 E701                       	dc.b	smpsNoAttack, $01
00087E83 E107                       	smpsAlterNote       $07
00087E85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E89 E10D                       	smpsAlterNote       $0D
00087E8B E701                       	dc.b	smpsNoAttack, $01
00087E8D E110                       	smpsAlterNote       $10
00087E8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E93 E10A                       	smpsAlterNote       $0A
00087E95 E701                       	dc.b	smpsNoAttack, $01
00087E97 E106                       	smpsAlterNote       $06
00087E99 E701                       	dc.b	smpsNoAttack, $01
00087E9B E107                       	smpsAlterNote       $07
00087E9D E701                       	dc.b	smpsNoAttack, $01
00087E9F E10D                       	smpsAlterNote       $0D
00087EA1 E701                       	dc.b	smpsNoAttack, $01
00087EA3 E111                       	smpsAlterNote       $11
00087EA5 E701                       	dc.b	smpsNoAttack, $01
00087EA7 E10D                       	smpsAlterNote       $0D
00087EA9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087EAD E10F                       	smpsAlterNote       $0F
00087EAF BA02 8001                  	dc.b	nA4, $02, nRst, $01
00087EB3 E110                       	smpsAlterNote       $10
00087EB5 BB03                       	dc.b	nBb4, $03
00087EB7 E10F                       	smpsAlterNote       $0F
00087EB9 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00087EBF E110                       	smpsAlterNote       $10
00087EC1 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00087EC5 E10F                       	smpsAlterNote       $0F
00087EC7 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00087ECD E110                       	smpsAlterNote       $10
00087ECF D302 8001                  	dc.b	nBb6, $02, nRst, $01
00087ED3 E10F                       	smpsAlterNote       $0F
00087ED5 D20D                       	dc.b	nA6, $0D
00087ED7 E10C                       	smpsAlterNote       $0C
00087ED9 E701                       	dc.b	smpsNoAttack, $01
00087EDB E108                       	smpsAlterNote       $08
00087EDD E701                       	dc.b	smpsNoAttack, $01
00087EDF E10C                       	smpsAlterNote       $0C
00087EE1 E701                       	dc.b	smpsNoAttack, $01
00087EE3 E10F                       	smpsAlterNote       $0F
00087EE5 E701                       	dc.b	smpsNoAttack, $01
00087EE7 E113                       	smpsAlterNote       $13
00087EE9 E701                       	dc.b	smpsNoAttack, $01
00087EEB E10F                       	smpsAlterNote       $0F
00087EED E701                       	dc.b	smpsNoAttack, $01
00087EEF E109                       	smpsAlterNote       $09
00087EF1 E701                       	dc.b	smpsNoAttack, $01
00087EF3 E108                       	smpsAlterNote       $08
00087EF5 E701                       	dc.b	smpsNoAttack, $01
00087EF7 E10C                       	smpsAlterNote       $0C
00087EF9 E701                       	dc.b	smpsNoAttack, $01
00087EFB E112                       	smpsAlterNote       $12
00087EFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F01 E10F                       	smpsAlterNote       $0F
00087F03 E701                       	dc.b	smpsNoAttack, $01
00087F05 E109                       	smpsAlterNote       $09
00087F07 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00087F0D E10D                       	smpsAlterNote       $0D
00087F0F CE07                       	dc.b	nF6, $07
00087F11 E10C                       	smpsAlterNote       $0C
00087F13 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00087F17 E10D                       	smpsAlterNote       $0D
00087F19 CE03                       	dc.b	nF6, $03
00087F1B E10C                       	smpsAlterNote       $0C
00087F1D CC0D                       	dc.b	nEb6, $0D
00087F1F E109                       	smpsAlterNote       $09
00087F21 E701                       	dc.b	smpsNoAttack, $01
00087F23 E106                       	smpsAlterNote       $06
00087F25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F29 E10C                       	smpsAlterNote       $0C
00087F2B E701                       	dc.b	smpsNoAttack, $01
00087F2D E110                       	smpsAlterNote       $10
00087F2F E701                       	dc.b	smpsNoAttack, $01
00087F31 E10F                       	smpsAlterNote       $0F
00087F33 E701                       	dc.b	smpsNoAttack, $01
00087F35 E109                       	smpsAlterNote       $09
00087F37 E701                       	dc.b	smpsNoAttack, $01
00087F39 E105                       	smpsAlterNote       $05
00087F3B E701                       	dc.b	smpsNoAttack, $01
00087F3D E109                       	smpsAlterNote       $09
00087F3F E701                       	dc.b	smpsNoAttack, $01
00087F41 E10C                       	smpsAlterNote       $0C
00087F43 E701                       	dc.b	smpsNoAttack, $01
00087F45 E110                       	smpsAlterNote       $10
00087F47 E701                       	dc.b	smpsNoAttack, $01
00087F49 E10C                       	smpsAlterNote       $0C
00087F4B E701                       	dc.b	smpsNoAttack, $01
00087F4D E106                       	smpsAlterNote       $06
00087F4F E701                       	dc.b	smpsNoAttack, $01
00087F51 E105                       	smpsAlterNote       $05
00087F53 E701                       	dc.b	smpsNoAttack, $01
00087F55 E109                       	smpsAlterNote       $09
00087F57 E701                       	dc.b	smpsNoAttack, $01
00087F59 E10F                       	smpsAlterNote       $0F
00087F5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F5F E10C                       	smpsAlterNote       $0C
00087F61 E701                       	dc.b	smpsNoAttack, $01
00087F63 E10B                       	smpsAlterNote       $0B
00087F65 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00087F6F E10F                       	smpsAlterNote       $0F
00087F71 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00087F7B E10D                       	smpsAlterNote       $0D
00087F7D C203                       	dc.b	nF5, $03
00087F7F E10C                       	smpsAlterNote       $0C
00087F81 C103 8001                  	dc.b	nE5, $03, nRst, $01
00087F85 E10D                       	smpsAlterNote       $0D
00087F87 C20D                       	dc.b	nF5, $0D
00087F89 E10C                       	smpsAlterNote       $0C
00087F8B C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00087F8F E10B                       	smpsAlterNote       $0B
00087F91 BF0D                       	dc.b	nD5, $0D
00087F93 E108                       	smpsAlterNote       $08
00087F95 E701                       	dc.b	smpsNoAttack, $01
00087F97 E104                       	smpsAlterNote       $04
00087F99 E701                       	dc.b	smpsNoAttack, $01
00087F9B E108                       	smpsAlterNote       $08
00087F9D E701                       	dc.b	smpsNoAttack, $01
00087F9F E10E                       	smpsAlterNote       $0E
00087FA1 E701                       	dc.b	smpsNoAttack, $01
00087FA3 E10F                       	smpsAlterNote       $0F
00087FA5 E701                       	dc.b	smpsNoAttack, $01
00087FA7 E10B                       	smpsAlterNote       $0B
00087FA9 E701                       	dc.b	smpsNoAttack, $01
00087FAB E105                       	smpsAlterNote       $05
00087FAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FB1 E108                       	smpsAlterNote       $08
00087FB3 E701                       	dc.b	smpsNoAttack, $01
00087FB5 E10E                       	smpsAlterNote       $0E
00087FB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FBB E108                       	smpsAlterNote       $08
00087FBD E701                       	dc.b	smpsNoAttack, $01
00087FBF E105                       	smpsAlterNote       $05
00087FC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FC5 E10B                       	smpsAlterNote       $0B
00087FC7 E701                       	dc.b	smpsNoAttack, $01
00087FC9 E10F                       	smpsAlterNote       $0F
00087FCB E701                       	dc.b	smpsNoAttack, $01
00087FCD E10E                       	smpsAlterNote       $0E
00087FCF E701                       	dc.b	smpsNoAttack, $01
00087FD1 E108                       	smpsAlterNote       $08
00087FD3 E701                       	dc.b	smpsNoAttack, $01
00087FD5 E104                       	smpsAlterNote       $04
00087FD7 E701                       	dc.b	smpsNoAttack, $01
00087FD9 E108                       	smpsAlterNote       $08
00087FDB E701                       	dc.b	smpsNoAttack, $01
00087FDD E10B                       	smpsAlterNote       $0B
00087FDF E701                       	dc.b	smpsNoAttack, $01
00087FE1 E10F                       	smpsAlterNote       $0F
00087FE3 E701                       	dc.b	smpsNoAttack, $01
00087FE5 E10B                       	smpsAlterNote       $0B
00087FE7 E701                       	dc.b	smpsNoAttack, $01
00087FE9 E105                       	smpsAlterNote       $05
00087FEB E701                       	dc.b	smpsNoAttack, $01
00087FED E104                       	smpsAlterNote       $04
00087FEF E701                       	dc.b	smpsNoAttack, $01
00087FF1 E108                       	smpsAlterNote       $08
00087FF3 E701                       	dc.b	smpsNoAttack, $01
00087FF5 E10E                       	smpsAlterNote       $0E
00087FF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FFB E10B                       	smpsAlterNote       $0B
00087FFD E701                       	dc.b	smpsNoAttack, $01
00087FFF E105                       	smpsAlterNote       $05
00088001 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088005 E10B                       	smpsAlterNote       $0B
00088007 E701                       	dc.b	smpsNoAttack, $01
00088009 E10E                       	smpsAlterNote       $0E
0008800B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008800F E108                       	smpsAlterNote       $08
00088011 E701                       	dc.b	smpsNoAttack, $01
00088013 E104                       	smpsAlterNote       $04
00088015 E701                       	dc.b	smpsNoAttack, $01
00088017 E105                       	smpsAlterNote       $05
00088019 E701                       	dc.b	smpsNoAttack, $01
0008801B E10B                       	smpsAlterNote       $0B
0008801D E701                       	dc.b	smpsNoAttack, $01
0008801F E10F                       	smpsAlterNote       $0F
00088021 E701                       	dc.b	smpsNoAttack, $01
00088023 E10B                       	smpsAlterNote       $0B
00088025 E701                       	dc.b	smpsNoAttack, $01
00088027 E108                       	smpsAlterNote       $08
00088029 E701                       	dc.b	smpsNoAttack, $01
0008802B E104                       	smpsAlterNote       $04
0008802D E701                       	dc.b	smpsNoAttack, $01
0008802F E108                       	smpsAlterNote       $08
00088031 E701                       	dc.b	smpsNoAttack, $01
00088033 E10E                       	smpsAlterNote       $0E
00088035 E701                       	dc.b	smpsNoAttack, $01
00088037 E10F                       	smpsAlterNote       $0F
00088039 E701                       	dc.b	smpsNoAttack, $01
0008803B E10B                       	smpsAlterNote       $0B
0008803D E701                       	dc.b	smpsNoAttack, $01
0008803F E105                       	smpsAlterNote       $05
00088041 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088045 E108                       	smpsAlterNote       $08
00088047 E701                       	dc.b	smpsNoAttack, $01
00088049 E10E                       	smpsAlterNote       $0E
0008804B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008804F E108                       	smpsAlterNote       $08
00088051 E701                       	dc.b	smpsNoAttack, $01
00088053 E105                       	smpsAlterNote       $05
00088055 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088059 E10B                       	smpsAlterNote       $0B
0008805B E701                       	dc.b	smpsNoAttack, $01
0008805D E10F                       	smpsAlterNote       $0F
0008805F E701                       	dc.b	smpsNoAttack, $01
00088061 E10E                       	smpsAlterNote       $0E
00088063 E701                       	dc.b	smpsNoAttack, $01
00088065 E108                       	smpsAlterNote       $08
00088067 E701                       	dc.b	smpsNoAttack, $01
00088069 E104                       	smpsAlterNote       $04
0008806B E701                       	dc.b	smpsNoAttack, $01
0008806D E108                       	smpsAlterNote       $08
0008806F E701                       	dc.b	smpsNoAttack, $01
00088071 E10B                       	smpsAlterNote       $0B
00088073 E701                       	dc.b	smpsNoAttack, $01
00088075 E10F                       	smpsAlterNote       $0F
00088077 E701                       	dc.b	smpsNoAttack, $01
00088079 E10B                       	smpsAlterNote       $0B
0008807B E701                       	dc.b	smpsNoAttack, $01
0008807D E105                       	smpsAlterNote       $05
0008807F E701                       	dc.b	smpsNoAttack, $01
00088081 E104                       	smpsAlterNote       $04
00088083 E701                       	dc.b	smpsNoAttack, $01
00088085 E105                       	smpsAlterNote       $05
00088087 8001                       	dc.b	nRst, $01
00088089 E10D                       	smpsAlterNote       $0D
0008808B C20D                       	dc.b	nF5, $0D
0008808D E107                       	smpsAlterNote       $07
0008808F E701                       	dc.b	smpsNoAttack, $01
00088091 E106                       	smpsAlterNote       $06
00088093 E701                       	dc.b	smpsNoAttack, $01
00088095 E10A                       	smpsAlterNote       $0A
00088097 E701                       	dc.b	smpsNoAttack, $01
00088099 E110                       	smpsAlterNote       $10
0008809B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008809F E10D                       	smpsAlterNote       $0D
000880A1 E701                       	dc.b	smpsNoAttack, $01
000880A3 E107                       	smpsAlterNote       $07
000880A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880A9 E10D                       	smpsAlterNote       $0D
000880AB E701                       	dc.b	smpsNoAttack, $01
000880AD E110                       	smpsAlterNote       $10
000880AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880B3 E10A                       	smpsAlterNote       $0A
000880B5 E701                       	dc.b	smpsNoAttack, $01
000880B7 E106                       	smpsAlterNote       $06
000880B9 E701                       	dc.b	smpsNoAttack, $01
000880BB E107                       	smpsAlterNote       $07
000880BD E701                       	dc.b	smpsNoAttack, $01
000880BF E10D                       	smpsAlterNote       $0D
000880C1 E701                       	dc.b	smpsNoAttack, $01
000880C3 E111                       	smpsAlterNote       $11
000880C5 E701                       	dc.b	smpsNoAttack, $01
000880C7 E10D                       	smpsAlterNote       $0D
000880C9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000880CD E10C                       	smpsAlterNote       $0C
000880CF C10D                       	dc.b	nE5, $0D
000880D1 E10D                       	smpsAlterNote       $0D
000880D3 C20A                       	dc.b	nF5, $0A
000880D5 E10C                       	smpsAlterNote       $0C
000880D7 C10E                       	dc.b	nE5, $0E
000880D9 E106                       	smpsAlterNote       $06
000880DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880DF E10C                       	smpsAlterNote       $0C
000880E1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000880E5 E10B                       	smpsAlterNote       $0B
000880E7 BF0D                       	dc.b	nD5, $0D
000880E9 E10C                       	smpsAlterNote       $0C
000880EB C107                       	dc.b	nE5, $07
000880ED E10D                       	smpsAlterNote       $0D
000880EF C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
000880F9 E110                       	smpsAlterNote       $10
000880FB C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00088101 E10F                       	smpsAlterNote       $0F
00088103 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008810B E10D                       	smpsAlterNote       $0D
0008810D D003                       	dc.b	nG6, $03
00088111 E0C0                       	smpsPan             panCenter, $00
00088113 E6FF                       	smpsAlterVol        $FF
00088115 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00088121 8001                       	dc.b	nRst, $01
00088123 E10C                       	smpsAlterNote       $0C
00088125 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008812F E604                       	smpsAlterVol        $04
00088131 E10B                       	smpsAlterNote       $0B
00088133 B306 8001                  	dc.b	nD4, $06, nRst, $01
00088137 E10F                       	smpsAlterNote       $0F
00088139 AE03                       	dc.b	nA3, $03
0008813B E10D                       	smpsAlterNote       $0D
0008813D B603 8001                  	dc.b	nF4, $03, nRst, $01
00088141 E10C                       	smpsAlterNote       $0C
00088143 B506 8001                  	dc.b	nE4, $06, nRst, $01
00088147 E10B                       	smpsAlterNote       $0B
00088149 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008814D E10A                       	smpsAlterNote       $0A
0008814F B103                       	dc.b	nC4, $03
00088151 E110                       	smpsAlterNote       $10
00088153 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00088157 E10F                       	smpsAlterNote       $0F
00088159 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008815D E080                       	smpsPan             panLeft, $00
0008815F 01                         	dc.b	$01
00088162 E6FB                       	smpsAlterVol        $FB
00088164 E1E4                       	smpsAlterNote       $E4
00088166 C501                       	dc.b	nAb5, $01
00088168 E1F4                       	smpsAlterNote       $F4
0008816A E701                       	dc.b	smpsNoAttack, $01
0008816C E104                       	smpsAlterNote       $04
0008816E E701                       	dc.b	smpsNoAttack, $01
00088170 E114                       	smpsAlterNote       $14
00088172 E701                       	dc.b	smpsNoAttack, $01
00088174 E11C                       	smpsAlterNote       $1C
00088176 E701                       	dc.b	smpsNoAttack, $01
00088178 E1EF                       	smpsAlterNote       $EF
0008817A E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008817D E1FF                       	smpsAlterNote       $FF
0008817F E701                       	dc.b	smpsNoAttack, $01
00088181 E10F                       	smpsAlterNote       $0F
00088183 C606                       	dc.b	nA5, $06
00088185 E109                       	smpsAlterNote       $09
00088187 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008818B E10F                       	smpsAlterNote       $0F
0008818D E701                       	dc.b	smpsNoAttack, $01
0008818F E112                       	smpsAlterNote       $12
00088191 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088195 E10C                       	smpsAlterNote       $0C
00088197 E701                       	dc.b	smpsNoAttack, $01
00088199 E108                       	smpsAlterNote       $08
0008819B E701                       	dc.b	smpsNoAttack, $01
0008819D E109                       	smpsAlterNote       $09
0008819F E701                       	dc.b	smpsNoAttack, $01
000881A1 E10F                       	smpsAlterNote       $0F
000881A3 E701                       	dc.b	smpsNoAttack, $01
000881A5 E113                       	smpsAlterNote       $13
000881A7 E701                       	dc.b	smpsNoAttack, $01
000881A9 E10F                       	smpsAlterNote       $0F
000881AB E701                       	dc.b	smpsNoAttack, $01
000881AD E10C                       	smpsAlterNote       $0C
000881AF E701                       	dc.b	smpsNoAttack, $01
000881B1 E108                       	smpsAlterNote       $08
000881B3 E701                       	dc.b	smpsNoAttack, $01
000881B5 E10C                       	smpsAlterNote       $0C
000881B7 E701                       	dc.b	smpsNoAttack, $01
000881B9 E112                       	smpsAlterNote       $12
000881BB E701                       	dc.b	smpsNoAttack, $01
000881BD E113                       	smpsAlterNote       $13
000881BF E701                       	dc.b	smpsNoAttack, $01
000881C1 E10F                       	smpsAlterNote       $0F
000881C3 E701                       	dc.b	smpsNoAttack, $01
000881C5 E109                       	smpsAlterNote       $09
000881C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881CB E10C                       	smpsAlterNote       $0C
000881CD E701                       	dc.b	smpsNoAttack, $01
000881CF E112                       	smpsAlterNote       $12
000881D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881D5 E10C                       	smpsAlterNote       $0C
000881D7 E701                       	dc.b	smpsNoAttack, $01
000881D9 E109                       	smpsAlterNote       $09
000881DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881DF E10F                       	smpsAlterNote       $0F
000881E1 E701                       	dc.b	smpsNoAttack, $01
000881E3 E113                       	smpsAlterNote       $13
000881E5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000881E9 E10D                       	smpsAlterNote       $0D
000881EB C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000881F1 E10C                       	smpsAlterNote       $0C
000881F3 C102 8001                  	dc.b	nE5, $02, nRst, $01
000881F7 E10D                       	smpsAlterNote       $0D
000881F9 C201 8001                  	dc.b	nF5, $01, nRst, $01
000881FD E10C                       	smpsAlterNote       $0C
000881FF C102                       	dc.b	nE5, $02
00088201 E10B                       	smpsAlterNote       $0B
00088203 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088207 E10C                       	smpsAlterNote       $0C
00088209 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008820D E10B                       	smpsAlterNote       $0B
0008820F BF02                       	dc.b	nD5, $02
00088211 E10A                       	smpsAlterNote       $0A
00088213 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008821D E110                       	smpsAlterNote       $10
0008821F BB02                       	dc.b	nBb4, $02
00088221 E10A                       	smpsAlterNote       $0A
00088223 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00088227 E110                       	smpsAlterNote       $10
00088229 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008822D E10F                       	smpsAlterNote       $0F
0008822F BA01 8001                  	dc.b	nA4, $01, nRst, $01
00088233 E110                       	smpsAlterNote       $10
00088235 BB02                       	dc.b	nBb4, $02
00088237 E10F                       	smpsAlterNote       $0F
00088239 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00088243 E10C                       	smpsAlterNote       $0C
00088245 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008824D E10B                       	smpsAlterNote       $0B
0008824F BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00088253 E10F                       	smpsAlterNote       $0F
00088255 BA02                       	dc.b	nA4, $02
00088259 E0C0                       	smpsPan             panCenter, $00
0008825B E601                       	smpsAlterVol        $01
0008825D E109                       	smpsAlterNote       $09
0008825F AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008826B E108                       	smpsAlterNote       $08
0008826D A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00088273 E107                       	smpsAlterNote       $07
00088275 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008827B E109                       	smpsAlterNote       $09
0008827D B603 8001                  	dc.b	nF4, $03, nRst, $01
00088281 E108                       	smpsAlterNote       $08
00088283 B506 8001                  	dc.b	nE4, $06, nRst, $01
00088287 E107                       	smpsAlterNote       $07
00088289 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008828D E106                       	smpsAlterNote       $06
0008828F B103                       	dc.b	nC4, $03
00088291 E10C                       	smpsAlterNote       $0C
00088293 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00088299 E080                       	smpsPan             panLeft, $00
0008829B 07                         	dc.b	$07
0008829C E6FE                       	smpsAlterVol        $FE
0008829E E10B                       	smpsAlterNote       $0B
000882A0 B20D                       	dc.b	nCs4, $0D
000882A2 E105                       	smpsAlterNote       $05
000882A4 E701                       	dc.b	smpsNoAttack, $01
000882A6 E104                       	smpsAlterNote       $04
000882A8 E701                       	dc.b	smpsNoAttack, $01
000882AA E108                       	smpsAlterNote       $08
000882AC E701                       	dc.b	smpsNoAttack, $01
000882AE E10E                       	smpsAlterNote       $0E
000882B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882B4 E10B                       	smpsAlterNote       $0B
000882B6 E701                       	dc.b	smpsNoAttack, $01
000882B8 E105                       	smpsAlterNote       $05
000882BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882BE E10B                       	smpsAlterNote       $0B
000882C0 E701                       	dc.b	smpsNoAttack, $01
000882C2 E10E                       	smpsAlterNote       $0E
000882C4 E701                       	dc.b	smpsNoAttack, $01
000882C6 E10F                       	smpsAlterNote       $0F
000882C8 8001                       	dc.b	nRst, $01
000882CA E10B                       	smpsAlterNote       $0B
000882CC B30D                       	dc.b	nD4, $0D
000882CE E105                       	smpsAlterNote       $05
000882D0 E701                       	dc.b	smpsNoAttack, $01
000882D2 E104                       	smpsAlterNote       $04
000882D4 E701                       	dc.b	smpsNoAttack, $01
000882D6 E108                       	smpsAlterNote       $08
000882D8 E701                       	dc.b	smpsNoAttack, $01
000882DA E10E                       	smpsAlterNote       $0E
000882DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882E0 E10B                       	smpsAlterNote       $0B
000882E2 E701                       	dc.b	smpsNoAttack, $01
000882E4 E105                       	smpsAlterNote       $05
000882E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882EA E10B                       	smpsAlterNote       $0B
000882EC E701                       	dc.b	smpsNoAttack, $01
000882EE E10E                       	smpsAlterNote       $0E
000882F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882F4 E108                       	smpsAlterNote       $08
000882F6 E701                       	dc.b	smpsNoAttack, $01
000882F8 E104                       	smpsAlterNote       $04
000882FA E701                       	dc.b	smpsNoAttack, $01
000882FC E105                       	smpsAlterNote       $05
000882FE E701                       	dc.b	smpsNoAttack, $01
00088300 E10B                       	smpsAlterNote       $0B
00088302 E701                       	dc.b	smpsNoAttack, $01
00088304 E10F                       	smpsAlterNote       $0F
00088306 E701                       	dc.b	smpsNoAttack, $01
00088308 E10B                       	smpsAlterNote       $0B
0008830A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008830E E10C                       	smpsAlterNote       $0C
00088310 B50D                       	dc.b	nE4, $0D
00088312 E106                       	smpsAlterNote       $06
00088314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088318 E10C                       	smpsAlterNote       $0C
0008831A E701                       	dc.b	smpsNoAttack, $01
0008831C E10F                       	smpsAlterNote       $0F
0008831E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088322 E109                       	smpsAlterNote       $09
00088324 E701                       	dc.b	smpsNoAttack, $01
00088326 E105                       	smpsAlterNote       $05
00088328 E701                       	dc.b	smpsNoAttack, $01
0008832A E106                       	smpsAlterNote       $06
0008832C E701                       	dc.b	smpsNoAttack, $01
0008832E E10C                       	smpsAlterNote       $0C
00088330 E701                       	dc.b	smpsNoAttack, $01
00088332 E110                       	smpsAlterNote       $10
00088334 E701                       	dc.b	smpsNoAttack, $01
00088336 E10B                       	smpsAlterNote       $0B
00088338 B30E                       	dc.b	nD4, $0E
0008833A E105                       	smpsAlterNote       $05
0008833C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088340 E10B                       	smpsAlterNote       $0B
00088342 E701                       	dc.b	smpsNoAttack, $01
00088344 E10E                       	smpsAlterNote       $0E
00088346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008834A E108                       	smpsAlterNote       $08
0008834C E701                       	dc.b	smpsNoAttack, $01
0008834E E104                       	smpsAlterNote       $04
00088350 E701                       	dc.b	smpsNoAttack, $01
00088352 E105                       	smpsAlterNote       $05
00088354 E701                       	dc.b	smpsNoAttack, $01
00088356 E10B                       	smpsAlterNote       $0B
00088358 E701                       	dc.b	smpsNoAttack, $01
0008835A E10F                       	smpsAlterNote       $0F
0008835C E701                       	dc.b	smpsNoAttack, $01
0008835E E10B                       	smpsAlterNote       $0B
00088360 E701                       	dc.b	smpsNoAttack, $01
00088362 E108                       	smpsAlterNote       $08
00088364 E701                       	dc.b	smpsNoAttack, $01
00088366 E104                       	smpsAlterNote       $04
00088368 E701                       	dc.b	smpsNoAttack, $01
0008836A E108                       	smpsAlterNote       $08
0008836C E701                       	dc.b	smpsNoAttack, $01
0008836E E10E                       	smpsAlterNote       $0E
00088370 E701                       	dc.b	smpsNoAttack, $01
00088372 E10F                       	smpsAlterNote       $0F
00088374 E701                       	dc.b	smpsNoAttack, $01
00088376 E10B                       	smpsAlterNote       $0B
00088378 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008837C E108                       	smpsAlterNote       $08
0008837E E701                       	dc.b	smpsNoAttack, $01
00088380 E105                       	smpsAlterNote       $05
00088382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088386 E10B                       	smpsAlterNote       $0B
00088388 E701                       	dc.b	smpsNoAttack, $01
0008838A E10F                       	smpsAlterNote       $0F
0008838C E701                       	dc.b	smpsNoAttack, $01
0008838E E10E                       	smpsAlterNote       $0E
00088390 E701                       	dc.b	smpsNoAttack, $01
00088392 E108                       	smpsAlterNote       $08
00088394 E701                       	dc.b	smpsNoAttack, $01
00088396 E104                       	smpsAlterNote       $04
00088398 E701                       	dc.b	smpsNoAttack, $01
0008839A E108                       	smpsAlterNote       $08
0008839C E701                       	dc.b	smpsNoAttack, $01
0008839E E10B                       	smpsAlterNote       $0B
000883A0 E701                       	dc.b	smpsNoAttack, $01
000883A2 E10F                       	smpsAlterNote       $0F
000883A4 E701                       	dc.b	smpsNoAttack, $01
000883A6 E10B                       	smpsAlterNote       $0B
000883A8 B30D                       	dc.b	nD4, $0D
000883AA E108                       	smpsAlterNote       $08
000883AC E701                       	dc.b	smpsNoAttack, $01
000883AE E105                       	smpsAlterNote       $05
000883B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883B4 E10B                       	smpsAlterNote       $0B
000883B6 E701                       	dc.b	smpsNoAttack, $01
000883B8 E10F                       	smpsAlterNote       $0F
000883BA E701                       	dc.b	smpsNoAttack, $01
000883BC E10E                       	smpsAlterNote       $0E
000883BE E701                       	dc.b	smpsNoAttack, $01
000883C0 E108                       	smpsAlterNote       $08
000883C2 E701                       	dc.b	smpsNoAttack, $01
000883C4 E104                       	smpsAlterNote       $04
000883C6 E701                       	dc.b	smpsNoAttack, $01
000883C8 E108                       	smpsAlterNote       $08
000883CA E701                       	dc.b	smpsNoAttack, $01
000883CC E10B                       	smpsAlterNote       $0B
000883CE E701                       	dc.b	smpsNoAttack, $01
000883D0 E10F                       	smpsAlterNote       $0F
000883D2 E701                       	dc.b	smpsNoAttack, $01
000883D4 E10B                       	smpsAlterNote       $0B
000883D6 E701                       	dc.b	smpsNoAttack, $01
000883D8 E105                       	smpsAlterNote       $05
000883DA E701                       	dc.b	smpsNoAttack, $01
000883DC E104                       	smpsAlterNote       $04
000883DE E701                       	dc.b	smpsNoAttack, $01
000883E0 E108                       	smpsAlterNote       $08
000883E2 E701                       	dc.b	smpsNoAttack, $01
000883E4 E10E                       	smpsAlterNote       $0E
000883E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883EA E10B                       	smpsAlterNote       $0B
000883EC 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
000883F0 E108                       	smpsAlterNote       $08
000883F2 E701                       	dc.b	smpsNoAttack, $01
000883F4 E104                       	smpsAlterNote       $04
000883F6 E701                       	dc.b	smpsNoAttack, $01
000883F8 E108                       	smpsAlterNote       $08
000883FA E701                       	dc.b	smpsNoAttack, $01
000883FC E10B                       	smpsAlterNote       $0B
000883FE E701                       	dc.b	smpsNoAttack, $01
00088402 E0C0                       	smpsPan             panCenter, $00
00088404 E601                       	smpsAlterVol        $01
00088406 E108                       	smpsAlterNote       $08
00088408 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00088414 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008841C E080                       	smpsPan             panLeft, $00
0008841E 07                         	dc.b	$07
0008841F E6FF                       	smpsAlterVol        $FF
00088421 E10D                       	smpsAlterNote       $0D
00088423 B60D                       	dc.b	nF4, $0D
00088425 E10A                       	smpsAlterNote       $0A
00088427 E701                       	dc.b	smpsNoAttack, $01
00088429 E106                       	smpsAlterNote       $06
0008842B E701                       	dc.b	smpsNoAttack, $01
0008842D E10A                       	smpsAlterNote       $0A
0008842F E701                       	dc.b	smpsNoAttack, $01
00088431 E110                       	smpsAlterNote       $10
00088433 E701                       	dc.b	smpsNoAttack, $01
00088435 E111                       	smpsAlterNote       $11
00088437 E701                       	dc.b	smpsNoAttack, $01
00088439 E10D                       	smpsAlterNote       $0D
0008843B E701                       	dc.b	smpsNoAttack, $01
0008843D E107                       	smpsAlterNote       $07
0008843F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088443 E10A                       	smpsAlterNote       $0A
00088445 E701                       	dc.b	smpsNoAttack, $01
00088447 E110                       	smpsAlterNote       $10
00088449 E701                       	dc.b	smpsNoAttack, $01
0008844B E111                       	smpsAlterNote       $11
0008844D 8001                       	dc.b	nRst, $01
0008844F E10D                       	smpsAlterNote       $0D
00088451 B80D                       	dc.b	nG4, $0D
00088453 E10A                       	smpsAlterNote       $0A
00088455 E701                       	dc.b	smpsNoAttack, $01
00088457 E106                       	smpsAlterNote       $06
00088459 E701                       	dc.b	smpsNoAttack, $01
0008845B E10A                       	smpsAlterNote       $0A
0008845D E701                       	dc.b	smpsNoAttack, $01
0008845F E110                       	smpsAlterNote       $10
00088461 E701                       	dc.b	smpsNoAttack, $01
00088463 E111                       	smpsAlterNote       $11
00088465 E701                       	dc.b	smpsNoAttack, $01
00088467 E10D                       	smpsAlterNote       $0D
00088469 E701                       	dc.b	smpsNoAttack, $01
0008846B E107                       	smpsAlterNote       $07
0008846D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088471 E10D                       	smpsAlterNote       $0D
00088473 E701                       	dc.b	smpsNoAttack, $01
00088475 E110                       	smpsAlterNote       $10
00088477 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008847B E10A                       	smpsAlterNote       $0A
0008847D E701                       	dc.b	smpsNoAttack, $01
0008847F E106                       	smpsAlterNote       $06
00088481 E701                       	dc.b	smpsNoAttack, $01
00088483 E107                       	smpsAlterNote       $07
00088485 E701                       	dc.b	smpsNoAttack, $01
00088487 E10D                       	smpsAlterNote       $0D
00088489 E701                       	dc.b	smpsNoAttack, $01
0008848B E111                       	smpsAlterNote       $11
0008848D E701                       	dc.b	smpsNoAttack, $01
0008848F E10D                       	smpsAlterNote       $0D
00088491 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088495 E10F                       	smpsAlterNote       $0F
00088497 BA0D                       	dc.b	nA4, $0D
00088499 E109                       	smpsAlterNote       $09
0008849B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008849F E10C                       	smpsAlterNote       $0C
000884A1 E701                       	dc.b	smpsNoAttack, $01
000884A3 E112                       	smpsAlterNote       $12
000884A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884A9 E10C                       	smpsAlterNote       $0C
000884AB E701                       	dc.b	smpsNoAttack, $01
000884AD E109                       	smpsAlterNote       $09
000884AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884B3 E10F                       	smpsAlterNote       $0F
000884B5 E701                       	dc.b	smpsNoAttack, $01
000884B7 E113                       	smpsAlterNote       $13
000884B9 E701                       	dc.b	smpsNoAttack, $01
000884BB E112                       	smpsAlterNote       $12
000884BD E701                       	dc.b	smpsNoAttack, $01
000884BF E10C                       	smpsAlterNote       $0C
000884C1 E701                       	dc.b	smpsNoAttack, $01
000884C3 E108                       	smpsAlterNote       $08
000884C5 E701                       	dc.b	smpsNoAttack, $01
000884C7 E10C                       	smpsAlterNote       $0C
000884C9 E701                       	dc.b	smpsNoAttack, $01
000884CB E10F                       	smpsAlterNote       $0F
000884CD E701                       	dc.b	smpsNoAttack, $01
000884CF E113                       	smpsAlterNote       $13
000884D1 E701                       	dc.b	smpsNoAttack, $01
000884D3 E10F                       	smpsAlterNote       $0F
000884D5 E701                       	dc.b	smpsNoAttack, $01
000884D7 E109                       	smpsAlterNote       $09
000884D9 E701                       	dc.b	smpsNoAttack, $01
000884DB E108                       	smpsAlterNote       $08
000884DD E701                       	dc.b	smpsNoAttack, $01
000884DF E10C                       	smpsAlterNote       $0C
000884E1 E701                       	dc.b	smpsNoAttack, $01
000884E3 E112                       	smpsAlterNote       $12
000884E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884E9 E10F                       	smpsAlterNote       $0F
000884EB E701                       	dc.b	smpsNoAttack, $01
000884ED E109                       	smpsAlterNote       $09
000884EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884F3 E10F                       	smpsAlterNote       $0F
000884F5 E701                       	dc.b	smpsNoAttack, $01
000884F7 E112                       	smpsAlterNote       $12
000884F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884FD E10C                       	smpsAlterNote       $0C
000884FF E701                       	dc.b	smpsNoAttack, $01
00088501 E108                       	smpsAlterNote       $08
00088503 E701                       	dc.b	smpsNoAttack, $01
00088505 E109                       	smpsAlterNote       $09
00088507 E701                       	dc.b	smpsNoAttack, $01
00088509 E10C                       	smpsAlterNote       $0C
0008850B B50A                       	dc.b	nE4, $0A
0008850D E10D                       	smpsAlterNote       $0D
0008850F B60E                       	dc.b	nF4, $0E
00088511 E107                       	smpsAlterNote       $07
00088513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088517 E10D                       	smpsAlterNote       $0D
00088519 E701                       	dc.b	smpsNoAttack, $01
0008851B E110                       	smpsAlterNote       $10
0008851D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088521 E10A                       	smpsAlterNote       $0A
00088523 E701                       	dc.b	smpsNoAttack, $01
00088525 E106                       	smpsAlterNote       $06
00088527 E701                       	dc.b	smpsNoAttack, $01
00088529 E107                       	smpsAlterNote       $07
0008852B E701                       	dc.b	smpsNoAttack, $01
0008852D E10D                       	smpsAlterNote       $0D
0008852F E701                       	dc.b	smpsNoAttack, $01
00088531 E111                       	smpsAlterNote       $11
00088533 E701                       	dc.b	smpsNoAttack, $01
00088535 E10D                       	smpsAlterNote       $0D
00088537 B80D                       	dc.b	nG4, $0D
00088539 E10A                       	smpsAlterNote       $0A
0008853B E701                       	dc.b	smpsNoAttack, $01
0008853D E107                       	smpsAlterNote       $07
0008853F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088543 E10D                       	smpsAlterNote       $0D
00088545 E701                       	dc.b	smpsNoAttack, $01
00088547 E111                       	smpsAlterNote       $11
00088549 E701                       	dc.b	smpsNoAttack, $01
0008854B E110                       	smpsAlterNote       $10
0008854D E701                       	dc.b	smpsNoAttack, $01
0008854F E10A                       	smpsAlterNote       $0A
00088551 E701                       	dc.b	smpsNoAttack, $01
00088553 E106                       	smpsAlterNote       $06
00088555 E701                       	dc.b	smpsNoAttack, $01
00088557 E10A                       	smpsAlterNote       $0A
00088559 E701                       	dc.b	smpsNoAttack, $01
0008855B E10D                       	smpsAlterNote       $0D
0008855D E701                       	dc.b	smpsNoAttack, $01
0008855F E111                       	smpsAlterNote       $11
00088561 E701                       	dc.b	smpsNoAttack, $01
00088563 E10D                       	smpsAlterNote       $0D
00088565 E701                       	dc.b	smpsNoAttack, $01
00088567 E107                       	smpsAlterNote       $07
00088569 E701                       	dc.b	smpsNoAttack, $01
0008856B E106                       	smpsAlterNote       $06
0008856D E701                       	dc.b	smpsNoAttack, $01
0008856F E10A                       	smpsAlterNote       $0A
00088571 E701                       	dc.b	smpsNoAttack, $01
00088573 E110                       	smpsAlterNote       $10
00088575 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088579 E10D                       	smpsAlterNote       $0D
0008857B E701                       	dc.b	smpsNoAttack, $01
0008857D E10F                       	smpsAlterNote       $0F
0008857F BA0D                       	dc.b	nA4, $0D
00088581 E10C                       	smpsAlterNote       $0C
00088583 E701                       	dc.b	smpsNoAttack, $01
00088585 E108                       	smpsAlterNote       $08
00088587 E701                       	dc.b	smpsNoAttack, $01
00088589 E109                       	smpsAlterNote       $09
0008858B E701                       	dc.b	smpsNoAttack, $01
0008858D E10F                       	smpsAlterNote       $0F
0008858F E701                       	dc.b	smpsNoAttack, $01
00088591 E113                       	smpsAlterNote       $13
00088593 E701                       	dc.b	smpsNoAttack, $01
00088595 E10F                       	smpsAlterNote       $0F
00088597 E701                       	dc.b	smpsNoAttack, $01
00088599 E10C                       	smpsAlterNote       $0C
0008859B E701                       	dc.b	smpsNoAttack, $01
0008859D E108                       	smpsAlterNote       $08
0008859F E701                       	dc.b	smpsNoAttack, $01
000885A1 E10C                       	smpsAlterNote       $0C
000885A3 E701                       	dc.b	smpsNoAttack, $01
000885A5 E112                       	smpsAlterNote       $12
000885A7 E701                       	dc.b	smpsNoAttack, $01
000885A9 E113                       	smpsAlterNote       $13
000885AB E701                       	dc.b	smpsNoAttack, $01
000885AD E10F                       	smpsAlterNote       $0F
000885AF E701                       	dc.b	smpsNoAttack, $01
000885B1 E109                       	smpsAlterNote       $09
000885B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885B7 E10C                       	smpsAlterNote       $0C
000885B9 E701                       	dc.b	smpsNoAttack, $01
000885BB E112                       	smpsAlterNote       $12
000885BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885C1 E10C                       	smpsAlterNote       $0C
000885C3 E701                       	dc.b	smpsNoAttack, $01
000885C5 E109                       	smpsAlterNote       $09
000885C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885CB E10F                       	smpsAlterNote       $0F
000885CD E701                       	dc.b	smpsNoAttack, $01
000885CF E113                       	smpsAlterNote       $13
000885D1 E701                       	dc.b	smpsNoAttack, $01
000885D3 E112                       	smpsAlterNote       $12
000885D5 E701                       	dc.b	smpsNoAttack, $01
000885D7 E10C                       	smpsAlterNote       $0C
000885D9 E701                       	dc.b	smpsNoAttack, $01
000885DB E109                       	smpsAlterNote       $09
000885DD 8001                       	dc.b	nRst, $01
000885DF E10D                       	smpsAlterNote       $0D
000885E1 B60A                       	dc.b	nF4, $0A
000885E3 E10C                       	smpsAlterNote       $0C
000885E5 B506 8001                  	dc.b	nE4, $06, nRst, $01
000885E9 E10B                       	smpsAlterNote       $0B
000885EB B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000885EF E10C                       	smpsAlterNote       $0C
000885F1 B503                       	dc.b	nE4, $03
000885F3 E10D                       	smpsAlterNote       $0D
000885F5 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000885FF E10C                       	smpsAlterNote       $0C
00088601 E701                       	dc.b	smpsNoAttack, $01
00088603 E108                       	smpsAlterNote       $08
00088605 E701                       	dc.b	smpsNoAttack, $01
00088607 E10C                       	smpsAlterNote       $0C
00088609 E701                       	dc.b	smpsNoAttack, $01
0008860B E112                       	smpsAlterNote       $12
0008860D E701                       	dc.b	smpsNoAttack, $01
0008860F E113                       	smpsAlterNote       $13
00088611 E701                       	dc.b	smpsNoAttack, $01
00088613 E10F                       	smpsAlterNote       $0F
00088615 E701                       	dc.b	smpsNoAttack, $01
00088617 E109                       	smpsAlterNote       $09
00088619 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008861D E10C                       	smpsAlterNote       $0C
0008861F E701                       	dc.b	smpsNoAttack, $01
00088621 E112                       	smpsAlterNote       $12
00088623 E701                       	dc.b	smpsNoAttack, $01
00088625 E113                       	smpsAlterNote       $13
00088627 8001                       	dc.b	nRst, $01
00088629 E10D                       	smpsAlterNote       $0D
0008862B C20D                       	dc.b	nF5, $0D
0008862D E10A                       	smpsAlterNote       $0A
0008862F E701                       	dc.b	smpsNoAttack, $01
00088631 E106                       	smpsAlterNote       $06
00088633 E701                       	dc.b	smpsNoAttack, $01
00088635 E10A                       	smpsAlterNote       $0A
00088637 E701                       	dc.b	smpsNoAttack, $01
00088639 E110                       	smpsAlterNote       $10
0008863B E701                       	dc.b	smpsNoAttack, $01
0008863D E111                       	smpsAlterNote       $11
0008863F E701                       	dc.b	smpsNoAttack, $01
00088641 E10D                       	smpsAlterNote       $0D
00088643 E701                       	dc.b	smpsNoAttack, $01
00088645 E107                       	smpsAlterNote       $07
00088647 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008864B E10A                       	smpsAlterNote       $0A
0008864D E701                       	dc.b	smpsNoAttack, $01
0008864F E110                       	smpsAlterNote       $10
00088651 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088655 E10A                       	smpsAlterNote       $0A
00088657 E701                       	dc.b	smpsNoAttack, $01
00088659 E107                       	smpsAlterNote       $07
0008865B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008865F E10D                       	smpsAlterNote       $0D
00088661 E701                       	dc.b	smpsNoAttack, $01
00088663 E111                       	smpsAlterNote       $11
00088665 E701                       	dc.b	smpsNoAttack, $01
00088667 E110                       	smpsAlterNote       $10
00088669 E701                       	dc.b	smpsNoAttack, $01
0008866B E10A                       	smpsAlterNote       $0A
0008866D E701                       	dc.b	smpsNoAttack, $01
0008866F E106                       	smpsAlterNote       $06
00088671 E701                       	dc.b	smpsNoAttack, $01
00088673 E10A                       	smpsAlterNote       $0A
00088675 E701                       	dc.b	smpsNoAttack, $01
00088677 E10D                       	smpsAlterNote       $0D
00088679 E701                       	dc.b	smpsNoAttack, $01
0008867B E111                       	smpsAlterNote       $11
0008867D E701                       	dc.b	smpsNoAttack, $01
0008867F E10D                       	smpsAlterNote       $0D
00088681 E701                       	dc.b	smpsNoAttack, $01
00088683 E107                       	smpsAlterNote       $07
00088685 E701                       	dc.b	smpsNoAttack, $01
00088687 E106                       	smpsAlterNote       $06
00088689 E701                       	dc.b	smpsNoAttack, $01
0008868B E10A                       	smpsAlterNote       $0A
0008868D E701                       	dc.b	smpsNoAttack, $01
0008868F E110                       	smpsAlterNote       $10
00088691 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088695 E10D                       	smpsAlterNote       $0D
00088697 E701                       	dc.b	smpsNoAttack, $01
00088699 E107                       	smpsAlterNote       $07
0008869B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008869F E10D                       	smpsAlterNote       $0D
000886A1 E701                       	dc.b	smpsNoAttack, $01
000886A3 E110                       	smpsAlterNote       $10
000886A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886A9 E10A                       	smpsAlterNote       $0A
000886AB E701                       	dc.b	smpsNoAttack, $01
000886AD E106                       	smpsAlterNote       $06
000886AF E701                       	dc.b	smpsNoAttack, $01
000886B1 E107                       	smpsAlterNote       $07
000886B3 E701                       	dc.b	smpsNoAttack, $01
000886B5 E10D                       	smpsAlterNote       $0D
000886B7 E701                       	dc.b	smpsNoAttack, $01
000886B9 E111                       	smpsAlterNote       $11
000886BB E701                       	dc.b	smpsNoAttack, $01
000886BD E10D                       	smpsAlterNote       $0D
000886BF E701                       	dc.b	smpsNoAttack, $01
000886C1 E10A                       	smpsAlterNote       $0A
000886C3 E701                       	dc.b	smpsNoAttack, $01
000886C5 E107                       	smpsAlterNote       $07
000886C7 8001                       	dc.b	nRst, $01
000886C9 E10D                       	smpsAlterNote       $0D
000886CB C206 8001                  	dc.b	nF5, $06, nRst, $01
000886D1 E601                       	smpsAlterVol        $01
000886D3 E110                       	smpsAlterNote       $10
000886D5 BB0D                       	dc.b	nBb4, $0D
000886D7 E10A                       	smpsAlterNote       $0A
000886D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886DD E110                       	smpsAlterNote       $10
000886DF E701                       	dc.b	smpsNoAttack, $01
000886E1 E113                       	smpsAlterNote       $13
000886E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886E7 E10D                       	smpsAlterNote       $0D
000886E9 E701                       	dc.b	smpsNoAttack, $01
000886EB E109                       	smpsAlterNote       $09
000886ED E701                       	dc.b	smpsNoAttack, $01
000886EF E10A                       	smpsAlterNote       $0A
000886F1 E701                       	dc.b	smpsNoAttack, $01
000886F3 E110                       	smpsAlterNote       $10
000886F5 E701                       	dc.b	smpsNoAttack, $01
000886F7 E114                       	smpsAlterNote       $14
000886F9 E701                       	dc.b	smpsNoAttack, $01
000886FB E110                       	smpsAlterNote       $10
000886FD E701                       	dc.b	smpsNoAttack, $01
000886FF E10D                       	smpsAlterNote       $0D
00088701 E701                       	dc.b	smpsNoAttack, $01
00088703 E109                       	smpsAlterNote       $09
00088705 E701                       	dc.b	smpsNoAttack, $01
00088707 E10A                       	smpsAlterNote       $0A
00088709 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008870D E107                       	smpsAlterNote       $07
0008870F E701                       	dc.b	smpsNoAttack, $01
00088711 E103                       	smpsAlterNote       $03
00088713 E701                       	dc.b	smpsNoAttack, $01
00088715 E107                       	smpsAlterNote       $07
00088717 E701                       	dc.b	smpsNoAttack, $01
00088719 E10D                       	smpsAlterNote       $0D
0008871B E701                       	dc.b	smpsNoAttack, $01
0008871D E10E                       	smpsAlterNote       $0E
0008871F E701                       	dc.b	smpsNoAttack, $01
00088721 E10A                       	smpsAlterNote       $0A
00088723 E701                       	dc.b	smpsNoAttack, $01
00088725 E104                       	smpsAlterNote       $04
00088727 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008872B E107                       	smpsAlterNote       $07
0008872D E701                       	dc.b	smpsNoAttack, $01
0008872F E10D                       	smpsAlterNote       $0D
00088731 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088735 E107                       	smpsAlterNote       $07
00088737 E701                       	dc.b	smpsNoAttack, $01
00088739 E104                       	smpsAlterNote       $04
0008873B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008873F E10B                       	smpsAlterNote       $0B
00088741 BF0D                       	dc.b	nD5, $0D
00088743 E108                       	smpsAlterNote       $08
00088745 E701                       	dc.b	smpsNoAttack, $01
00088747 E105                       	smpsAlterNote       $05
00088749 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008874D E10B                       	smpsAlterNote       $0B
0008874F E701                       	dc.b	smpsNoAttack, $01
00088751 E10F                       	smpsAlterNote       $0F
00088753 E701                       	dc.b	smpsNoAttack, $01
00088755 E10E                       	smpsAlterNote       $0E
00088757 E701                       	dc.b	smpsNoAttack, $01
00088759 E108                       	smpsAlterNote       $08
0008875B E701                       	dc.b	smpsNoAttack, $01
0008875D E104                       	smpsAlterNote       $04
0008875F E701                       	dc.b	smpsNoAttack, $01
00088761 E108                       	smpsAlterNote       $08
00088763 E701                       	dc.b	smpsNoAttack, $01
00088765 E10B                       	smpsAlterNote       $0B
00088767 E701                       	dc.b	smpsNoAttack, $01
00088769 E10F                       	smpsAlterNote       $0F
0008876B E701                       	dc.b	smpsNoAttack, $01
0008876D E10B                       	smpsAlterNote       $0B
0008876F E701                       	dc.b	smpsNoAttack, $01
00088771 E105                       	smpsAlterNote       $05
00088773 E701                       	dc.b	smpsNoAttack, $01
00088775 E104                       	smpsAlterNote       $04
00088777 E701                       	dc.b	smpsNoAttack, $01
00088779 E105                       	smpsAlterNote       $05
0008877B 8001                       	dc.b	nRst, $01
0008877D E10C                       	smpsAlterNote       $0C
0008877F C10C                       	dc.b	nE5, $0C
00088781 E10D                       	smpsAlterNote       $0D
00088783 C201                       	dc.b	nF5, $01
00088785 E10E                       	smpsAlterNote       $0E
00088787 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008878B E10D                       	smpsAlterNote       $0D
0008878D C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00088791 E10A                       	smpsAlterNote       $0A
00088793 E701                       	dc.b	smpsNoAttack, $01
00088795 E106                       	smpsAlterNote       $06
00088797 E701                       	dc.b	smpsNoAttack, $01
00088799 E10A                       	smpsAlterNote       $0A
0008879B E701                       	dc.b	smpsNoAttack, $01
0008879D E10D                       	smpsAlterNote       $0D
0008879F E701                       	dc.b	smpsNoAttack, $01
000887A1 E111                       	smpsAlterNote       $11
000887A3 E701                       	dc.b	smpsNoAttack, $01
000887A5 E10D                       	smpsAlterNote       $0D
000887A7 E701                       	dc.b	smpsNoAttack, $01
000887A9 E107                       	smpsAlterNote       $07
000887AB E701                       	dc.b	smpsNoAttack, $01
000887AD E106                       	smpsAlterNote       $06
000887AF E701                       	dc.b	smpsNoAttack, $01
000887B1 E10A                       	smpsAlterNote       $0A
000887B3 E701                       	dc.b	smpsNoAttack, $01
000887B5 E110                       	smpsAlterNote       $10
000887B7 E701                       	dc.b	smpsNoAttack, $01
000887B9 E111                       	smpsAlterNote       $11
000887BB 8001                       	dc.b	nRst, $01
000887BD E10D                       	smpsAlterNote       $0D
000887BF C40D                       	dc.b	nG5, $0D
000887C1 E10A                       	smpsAlterNote       $0A
000887C3 E701                       	dc.b	smpsNoAttack, $01
000887C5 E106                       	smpsAlterNote       $06
000887C7 E701                       	dc.b	smpsNoAttack, $01
000887C9 E10A                       	smpsAlterNote       $0A
000887CB E701                       	dc.b	smpsNoAttack, $01
000887CD E10D                       	smpsAlterNote       $0D
000887CF E701                       	dc.b	smpsNoAttack, $01
000887D1 E10C                       	smpsAlterNote       $0C
000887D3 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000887DF 8001                       	dc.b	nRst, $01
000887E1 E10D                       	smpsAlterNote       $0D
000887E3 C20D                       	dc.b	nF5, $0D
000887E5 E10A                       	smpsAlterNote       $0A
000887E7 E701                       	dc.b	smpsNoAttack, $01
000887E9 E106                       	smpsAlterNote       $06
000887EB E701                       	dc.b	smpsNoAttack, $01
000887ED E10A                       	smpsAlterNote       $0A
000887EF E701                       	dc.b	smpsNoAttack, $01
000887F1 E110                       	smpsAlterNote       $10
000887F3 E701                       	dc.b	smpsNoAttack, $01
000887F5 E111                       	smpsAlterNote       $11
000887F7 E701                       	dc.b	smpsNoAttack, $01
000887F9 E10D                       	smpsAlterNote       $0D
000887FB E701                       	dc.b	smpsNoAttack, $01
000887FD E107                       	smpsAlterNote       $07
000887FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088803 E10A                       	smpsAlterNote       $0A
00088805 E701                       	dc.b	smpsNoAttack, $01
00088807 E110                       	smpsAlterNote       $10
00088809 E701                       	dc.b	smpsNoAttack, $01
0008880B E111                       	smpsAlterNote       $11
0008880D 8001                       	dc.b	nRst, $01
0008880F E10F                       	smpsAlterNote       $0F
00088811 C60A                       	dc.b	nA5, $0A
00088813 E10D                       	smpsAlterNote       $0D
00088815 C406 8001                  	dc.b	nG5, $06, nRst, $01
00088819 E10C                       	smpsAlterNote       $0C
0008881B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00088827 8001                       	dc.b	nRst, $01
00088829 E10D                       	smpsAlterNote       $0D
0008882B C20D                       	dc.b	nF5, $0D
0008882D E107                       	smpsAlterNote       $07
0008882F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088833 E10A                       	smpsAlterNote       $0A
00088835 E701                       	dc.b	smpsNoAttack, $01
00088837 E110                       	smpsAlterNote       $10
00088839 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008883D E10A                       	smpsAlterNote       $0A
0008883F E701                       	dc.b	smpsNoAttack, $01
00088841 E107                       	smpsAlterNote       $07
00088843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088847 E10D                       	smpsAlterNote       $0D
00088849 E701                       	dc.b	smpsNoAttack, $01
0008884B E111                       	smpsAlterNote       $11
0008884D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088851 E10D                       	smpsAlterNote       $0D
00088853 C40D                       	dc.b	nG5, $0D
00088855 E107                       	smpsAlterNote       $07
00088857 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008885B E10A                       	smpsAlterNote       $0A
0008885D E701                       	dc.b	smpsNoAttack, $01
0008885F E10D                       	smpsAlterNote       $0D
00088861 8001                       	dc.b	nRst, $01
00088863 E10C                       	smpsAlterNote       $0C
00088865 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00088871 E10D                       	smpsAlterNote       $0D
00088873 C20E                       	dc.b	nF5, $0E
00088875 E107                       	smpsAlterNote       $07
00088877 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008887B E10D                       	smpsAlterNote       $0D
0008887D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088883 E0C0                       	smpsPan             panCenter, $00
00088885 E603                       	smpsAlterVol        $03
00088887 E108                       	smpsAlterNote       $08
00088889 B406                       	dc.b	nEb4, $06
0008888B E10C                       	smpsAlterNote       $0C
0008888D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00088891 E108                       	smpsAlterNote       $08
00088893 B403                       	dc.b	nEb4, $03
00088895 E109                       	smpsAlterNote       $09
00088897 B803 8001                  	dc.b	nG4, $03, nRst, $01
0008889B E10C                       	smpsAlterNote       $0C
0008889D BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000888A5 03                         	dc.b	$03
000888A6 E6FD                       	smpsAlterVol        $FD
000888A8 F6F1 F4                    	smpsJump            music84_Jump00
000888AB                            
000888AB                            ; PSG1 Data
000888AB                            music84_PSG1:
000888AB E1FD                       	smpsAlterNote       $FD
000888AD EC04                       	smpsPSGAlterVol     $04
000888AF 9203                       	dc.b	nF1, $03
000888B1 E1FE                       	smpsAlterNote       $FE
000888B3 9603                       	dc.b	nA1, $03
000888B5 EC04                       	smpsPSGAlterVol     $04
000888B7 E701                       	dc.b	smpsNoAttack, $01
000888B9 E1FF                       	smpsAlterNote       $FF
000888BB ECFC                       	smpsPSGAlterVol     $FC
000888BD 9B03                       	dc.b	nD2, $03
000888BF E1FD                       	smpsAlterNote       $FD
000888C1 9403                       	dc.b	nG1, $03
000888C3 EC04                       	smpsPSGAlterVol     $04
000888C5 E701                       	dc.b	smpsNoAttack, $01
000888C7 E1FE                       	smpsAlterNote       $FE
000888C9 ECFC                       	smpsPSGAlterVol     $FC
000888CB 9703                       	dc.b	nBb1, $03
000888CD E1FF                       	smpsAlterNote       $FF
000888CF 9B03                       	dc.b	nD2, $03
000888D1 EC04                       	smpsPSGAlterVol     $04
000888D3 E701                       	dc.b	smpsNoAttack, $01
000888D5 E1FE                       	smpsAlterNote       $FE
000888D7 ECFC                       	smpsPSGAlterVol     $FC
000888D9 A002                       	dc.b	nG2, $02
000888DB EC04                       	smpsPSGAlterVol     $04
000888DD E701                       	dc.b	smpsNoAttack, $01
000888DF E1FF                       	smpsAlterNote       $FF
000888E1 ECFC                       	smpsPSGAlterVol     $FC
000888E3 A203                       	dc.b	nA2, $03
000888E5 EC0B                       	smpsPSGAlterVol     $0B
000888E7 800A                       	dc.b	nRst, $0A
000888E9 E105                       	smpsAlterNote       $05
000888EB 01                         	dc.b	$01
000888EC E1FC                       	smpsAlterNote       $FC
000888EE 01                         	dc.b	$01
000888EF E105                       	smpsAlterNote       $05
000888F1 01                         	dc.b	$01
000888F2 E1FD                       	smpsAlterNote       $FD
000888F4 01                         	dc.b	$01
000888F5 E105                       	smpsAlterNote       $05
000888F7 01                         	dc.b	$01
000888F8 E1FD                       	smpsAlterNote       $FD
000888FA 01                         	dc.b	$01
000888FB E1FA                       	smpsAlterNote       $FA
000888FD 01                         	dc.b	$01
000888FE E1FC                       	smpsAlterNote       $FC
00088900 01                         	dc.b	$01
00088901 E105                       	smpsAlterNote       $05
00088903 01                         	dc.b	$01
00088904 E108                       	smpsAlterNote       $08
00088906 0101                       	dc.b	$01, $01
00088908 E105                       	smpsAlterNote       $05
0008890A 01                         	dc.b	$01
0008890B E1FA                       	smpsAlterNote       $FA
0008890D 0101                       	dc.b	$01, $01
0008890F E1FD                       	smpsAlterNote       $FD
00088911 01                         	dc.b	$01
00088912 E105                       	smpsAlterNote       $05
00088914 01                         	dc.b	$01
00088915 E108                       	smpsAlterNote       $08
00088917 01                         	dc.b	$01
00088918 E105                       	smpsAlterNote       $05
0008891A 01                         	dc.b	$01
0008891B E1FC                       	smpsAlterNote       $FC
0008891D 01                         	dc.b	$01
0008891E E105                       	smpsAlterNote       $05
00088920 01                         	dc.b	$01
00088921 E1FD                       	smpsAlterNote       $FD
00088923 01                         	dc.b	$01
00088924                            
00088924                            music84_Jump07:
00088924 E105                       	smpsAlterNote       $05
00088926 8001                       	dc.b	nRst, $01
00088928 E1FD                       	smpsAlterNote       $FD
0008892A 01                         	dc.b	$01
0008892B E1FA                       	smpsAlterNote       $FA
0008892D 01                         	dc.b	$01
0008892E E1FC                       	smpsAlterNote       $FC
00088930 01                         	dc.b	$01
00088931 E1FD                       	smpsAlterNote       $FD
00088933 ECF5                       	smpsPSGAlterVol     $F5
00088935 9206                       	dc.b	nF1, $06
00088937 EC04                       	smpsPSGAlterVol     $04
00088939 E701                       	dc.b	smpsNoAttack, $01
0008893B EC07                       	smpsPSGAlterVol     $07
0008893D 8003                       	dc.b	nRst, $03
0008893F ECF5                       	smpsPSGAlterVol     $F5
00088941 9206                       	dc.b	nF1, $06
00088943 EC04                       	smpsPSGAlterVol     $04
00088945 E701                       	dc.b	smpsNoAttack, $01
00088947 EC07                       	smpsPSGAlterVol     $07
00088949 8006                       	dc.b	nRst, $06
0008894B E100                       	smpsAlterNote       $00
0008894D 01                         	dc.b	$01
0008894E E104                       	smpsAlterNote       $04
00088950 01                         	dc.b	$01
00088951 E100                       	smpsAlterNote       $00
00088953 01                         	dc.b	$01
00088954 E1FB                       	smpsAlterNote       $FB
00088956 01                         	dc.b	$01
00088957 E1FD                       	smpsAlterNote       $FD
00088959 ECF5                       	smpsPSGAlterVol     $F5
0008895B 9406                       	dc.b	nG1, $06
0008895D EC04                       	smpsPSGAlterVol     $04
0008895F E701                       	dc.b	smpsNoAttack, $01
00088961 EC07                       	smpsPSGAlterVol     $07
00088963 8003                       	dc.b	nRst, $03
00088965 ECF5                       	smpsPSGAlterVol     $F5
00088967 9407                       	dc.b	nG1, $07
00088969 EC0B                       	smpsPSGAlterVol     $0B
0008896B 8006                       	dc.b	nRst, $06
0008896D E100                       	smpsAlterNote       $00
0008896F 01                         	dc.b	$01
00088970 E103                       	smpsAlterNote       $03
00088972 0101                       	dc.b	$01, $01
00088974 E1FD                       	smpsAlterNote       $FD
00088976 01                         	dc.b	$01
00088977 ECF5                       	smpsPSGAlterVol     $F5
00088979 9207                       	dc.b	nF1, $07
0008897B EC0B                       	smpsPSGAlterVol     $0B
0008897D 8004                       	dc.b	nRst, $04
0008897F ECF5                       	smpsPSGAlterVol     $F5
00088981 9206                       	dc.b	nF1, $06
00088983 EC04                       	smpsPSGAlterVol     $04
00088985 E701                       	dc.b	smpsNoAttack, $01
00088987 EC07                       	smpsPSGAlterVol     $07
00088989 8006                       	dc.b	nRst, $06
0008898B E103                       	smpsAlterNote       $03
0008898D 01                         	dc.b	$01
0008898E E104                       	smpsAlterNote       $04
00088990 01                         	dc.b	$01
00088991 E100                       	smpsAlterNote       $00
00088993 01                         	dc.b	$01
00088994 E1FA                       	smpsAlterNote       $FA
00088996 01                         	dc.b	$01
00088997 E1FD                       	smpsAlterNote       $FD
00088999 ECF5                       	smpsPSGAlterVol     $F5
0008899B 9206                       	dc.b	nF1, $06
0008899D EC04                       	smpsPSGAlterVol     $04
0008899F E701                       	dc.b	smpsNoAttack, $01
000889A1 EC07                       	smpsPSGAlterVol     $07
000889A3 8003                       	dc.b	nRst, $03
000889A5 ECF5                       	smpsPSGAlterVol     $F5
000889A7 9106                       	dc.b	nE1, $06
000889A9 EC04                       	smpsPSGAlterVol     $04
000889AB E701                       	dc.b	smpsNoAttack, $01
000889AD EC07                       	smpsPSGAlterVol     $07
000889AF 8006                       	dc.b	nRst, $06
000889B1 E100                       	smpsAlterNote       $00
000889B3 01                         	dc.b	$01
000889B4 E104                       	smpsAlterNote       $04
000889B6 01                         	dc.b	$01
000889B7 E100                       	smpsAlterNote       $00
000889B9 01                         	dc.b	$01
000889BA E1FD                       	smpsAlterNote       $FD
000889BC 01                         	dc.b	$01
000889BD ECF5                       	smpsPSGAlterVol     $F5
000889BF 9206                       	dc.b	nF1, $06
000889C1 EC04                       	smpsPSGAlterVol     $04
000889C3 E701                       	dc.b	smpsNoAttack, $01
000889C5 EC07                       	smpsPSGAlterVol     $07
000889C7 8003                       	dc.b	nRst, $03
000889C9 ECF5                       	smpsPSGAlterVol     $F5
000889CB 9207                       	dc.b	nF1, $07
000889CD EC0B                       	smpsPSGAlterVol     $0B
000889CF 8007                       	dc.b	nRst, $07
000889D1 E103                       	smpsAlterNote       $03
000889D3 0101                       	dc.b	$01, $01
000889D5 E1FD                       	smpsAlterNote       $FD
000889D7 01                         	dc.b	$01
000889D8 E1FB                       	smpsAlterNote       $FB
000889DA 01                         	dc.b	$01
000889DB E1FD                       	smpsAlterNote       $FD
000889DD ECF5                       	smpsPSGAlterVol     $F5
000889DF 9406                       	dc.b	nG1, $06
000889E1 EC0B                       	smpsPSGAlterVol     $0B
000889E3 8004                       	dc.b	nRst, $04
000889E5 ECF5                       	smpsPSGAlterVol     $F5
000889E7 9406                       	dc.b	nG1, $06
000889E9 EC04                       	smpsPSGAlterVol     $04
000889EB E701                       	dc.b	smpsNoAttack, $01
000889ED EC07                       	smpsPSGAlterVol     $07
000889EF 8006                       	dc.b	nRst, $06
000889F1 E100                       	smpsAlterNote       $00
000889F3 01                         	dc.b	$01
000889F4 E104                       	smpsAlterNote       $04
000889F6 01                         	dc.b	$01
000889F7 E100                       	smpsAlterNote       $00
000889F9 01                         	dc.b	$01
000889FA E1F9                       	smpsAlterNote       $F9
000889FC 01                         	dc.b	$01
000889FD E1FD                       	smpsAlterNote       $FD
000889FF ECF5                       	smpsPSGAlterVol     $F5
00088A01 9206                       	dc.b	nF1, $06
00088A03 EC04                       	smpsPSGAlterVol     $04
00088A05 E701                       	dc.b	smpsNoAttack, $01
00088A07 EC07                       	smpsPSGAlterVol     $07
00088A09 8003                       	dc.b	nRst, $03
00088A0B ECF5                       	smpsPSGAlterVol     $F5
00088A0D 9207                       	dc.b	nF1, $07
00088A0F EC0B                       	smpsPSGAlterVol     $0B
00088A11 8006                       	dc.b	nRst, $06
00088A13 E100                       	smpsAlterNote       $00
00088A15 01                         	dc.b	$01
00088A16 E104                       	smpsAlterNote       $04
00088A18 01                         	dc.b	$01
00088A19 E103                       	smpsAlterNote       $03
00088A1B 01                         	dc.b	$01
00088A1C E1FD                       	smpsAlterNote       $FD
00088A1E 01                         	dc.b	$01
00088A1F ECF5                       	smpsPSGAlterVol     $F5
00088A21 9207                       	dc.b	nF1, $07
00088A23 EC0B                       	smpsPSGAlterVol     $0B
00088A25 8004                       	dc.b	nRst, $04
00088A27 ECF5                       	smpsPSGAlterVol     $F5
00088A29 9206                       	dc.b	nF1, $06
00088A2B EC0B                       	smpsPSGAlterVol     $0B
00088A2D 8007                       	dc.b	nRst, $07
00088A2F E103                       	smpsAlterNote       $03
00088A31 0101                       	dc.b	$01, $01
00088A33 E100                       	smpsAlterNote       $00
00088A35 01                         	dc.b	$01
00088A36 E1FA                       	smpsAlterNote       $FA
00088A38 01                         	dc.b	$01
00088A39 E1FD                       	smpsAlterNote       $FD
00088A3B ECF5                       	smpsPSGAlterVol     $F5
00088A3D 9206                       	dc.b	nF1, $06
00088A3F EC04                       	smpsPSGAlterVol     $04
00088A41 E701                       	dc.b	smpsNoAttack, $01
00088A43 EC07                       	smpsPSGAlterVol     $07
00088A45 8003                       	dc.b	nRst, $03
00088A47 ECF5                       	smpsPSGAlterVol     $F5
00088A49 9206                       	dc.b	nF1, $06
00088A4B EC04                       	smpsPSGAlterVol     $04
00088A4D E701                       	dc.b	smpsNoAttack, $01
00088A4F EC07                       	smpsPSGAlterVol     $07
00088A51 8006                       	dc.b	nRst, $06
00088A53 E100                       	smpsAlterNote       $00
00088A55 01                         	dc.b	$01
00088A56 E104                       	smpsAlterNote       $04
00088A58 01                         	dc.b	$01
00088A59 E100                       	smpsAlterNote       $00
00088A5B 01                         	dc.b	$01
00088A5C E1FD                       	smpsAlterNote       $FD
00088A5E 01                         	dc.b	$01
00088A5F ECF5                       	smpsPSGAlterVol     $F5
00088A61 9206                       	dc.b	nF1, $06
00088A63 EC04                       	smpsPSGAlterVol     $04
00088A65 E701                       	dc.b	smpsNoAttack, $01
00088A67 EC07                       	smpsPSGAlterVol     $07
00088A69 8003                       	dc.b	nRst, $03
00088A6B ECF5                       	smpsPSGAlterVol     $F5
00088A6D 9207                       	dc.b	nF1, $07
00088A6F EC0B                       	smpsPSGAlterVol     $0B
00088A71 8007                       	dc.b	nRst, $07
00088A73 E103                       	smpsAlterNote       $03
00088A75 0101                       	dc.b	$01, $01
00088A77 E1FD                       	smpsAlterNote       $FD
00088A79 01                         	dc.b	$01
00088A7A E1FA                       	smpsAlterNote       $FA
00088A7C 01                         	dc.b	$01
00088A7D E1FD                       	smpsAlterNote       $FD
00088A7F ECF5                       	smpsPSGAlterVol     $F5
00088A81 9206                       	dc.b	nF1, $06
00088A83 EC0B                       	smpsPSGAlterVol     $0B
00088A85 8004                       	dc.b	nRst, $04
00088A87 ECF5                       	smpsPSGAlterVol     $F5
00088A89 9206                       	dc.b	nF1, $06
00088A8B EC04                       	smpsPSGAlterVol     $04
00088A8D E701                       	dc.b	smpsNoAttack, $01
00088A8F EC07                       	smpsPSGAlterVol     $07
00088A91 8006                       	dc.b	nRst, $06
00088A93 E103                       	smpsAlterNote       $03
00088A95 01                         	dc.b	$01
00088A96 E104                       	smpsAlterNote       $04
00088A98 01                         	dc.b	$01
00088A99 E100                       	smpsAlterNote       $00
00088A9B 01                         	dc.b	$01
00088A9C E1FA                       	smpsAlterNote       $FA
00088A9E 01                         	dc.b	$01
00088A9F E1FD                       	smpsAlterNote       $FD
00088AA1 ECF5                       	smpsPSGAlterVol     $F5
00088AA3 9206                       	dc.b	nF1, $06
00088AA5 EC04                       	smpsPSGAlterVol     $04
00088AA7 E701                       	dc.b	smpsNoAttack, $01
00088AA9 EC07                       	smpsPSGAlterVol     $07
00088AAB 8003                       	dc.b	nRst, $03
00088AAD ECF5                       	smpsPSGAlterVol     $F5
00088AAF 9206                       	dc.b	nF1, $06
00088AB1 EC04                       	smpsPSGAlterVol     $04
00088AB3 E701                       	dc.b	smpsNoAttack, $01
00088AB5 EC07                       	smpsPSGAlterVol     $07
00088AB7 8006                       	dc.b	nRst, $06
00088AB9 E100                       	smpsAlterNote       $00
00088ABB 01                         	dc.b	$01
00088ABC E104                       	smpsAlterNote       $04
00088ABE 01                         	dc.b	$01
00088ABF E103                       	smpsAlterNote       $03
00088AC1 01                         	dc.b	$01
00088AC2 E1FD                       	smpsAlterNote       $FD
00088AC4 01                         	dc.b	$01
00088AC5 ECF5                       	smpsPSGAlterVol     $F5
00088AC7 9107                       	dc.b	nE1, $07
00088AC9 EC0B                       	smpsPSGAlterVol     $0B
00088ACB 8004                       	dc.b	nRst, $04
00088ACD ECF5                       	smpsPSGAlterVol     $F5
00088ACF 9106                       	dc.b	nE1, $06
00088AD1 EC0B                       	smpsPSGAlterVol     $0B
00088AD3 8007                       	dc.b	nRst, $07
00088AD5 E103                       	smpsAlterNote       $03
00088AD7 0101                       	dc.b	$01, $01
00088AD9 E100                       	smpsAlterNote       $00
00088ADB 01                         	dc.b	$01
00088ADC E1FA                       	smpsAlterNote       $FA
00088ADE 01                         	dc.b	$01
00088ADF E1FD                       	smpsAlterNote       $FD
00088AE1 ECF5                       	smpsPSGAlterVol     $F5
00088AE3 9106                       	dc.b	nE1, $06
00088AE5 EC04                       	smpsPSGAlterVol     $04
00088AE7 E701                       	dc.b	smpsNoAttack, $01
00088AE9 EC07                       	smpsPSGAlterVol     $07
00088AEB 8003                       	dc.b	nRst, $03
00088AED ECF5                       	smpsPSGAlterVol     $F5
00088AEF 9106                       	dc.b	nE1, $06
00088AF1 EC04                       	smpsPSGAlterVol     $04
00088AF3 E701                       	dc.b	smpsNoAttack, $01
00088AF5 EC07                       	smpsPSGAlterVol     $07
00088AF7 8006                       	dc.b	nRst, $06
00088AF9 E100                       	smpsAlterNote       $00
00088AFB 01                         	dc.b	$01
00088AFC E104                       	smpsAlterNote       $04
00088AFE 01                         	dc.b	$01
00088AFF E100                       	smpsAlterNote       $00
00088B01 01                         	dc.b	$01
00088B02 E1FA                       	smpsAlterNote       $FA
00088B04 01                         	dc.b	$01
00088B05 E1FD                       	smpsAlterNote       $FD
00088B07 ECF5                       	smpsPSGAlterVol     $F5
00088B09 9106                       	dc.b	nE1, $06
00088B0B EC04                       	smpsPSGAlterVol     $04
00088B0D E701                       	dc.b	smpsNoAttack, $01
00088B0F EC07                       	smpsPSGAlterVol     $07
00088B11 8003                       	dc.b	nRst, $03
00088B13 ECF5                       	smpsPSGAlterVol     $F5
00088B15 9107 9106                  	dc.b	nE1, $07, nE1, $06
00088B19 EC04                       	smpsPSGAlterVol     $04
00088B1B E701                       	dc.b	smpsNoAttack, $01
00088B1D ECFC                       	smpsPSGAlterVol     $FC
00088B1F 9103 9103                  	dc.b	nE1, $03, nE1, $03
00088B23 EC04                       	smpsPSGAlterVol     $04
00088B25 E701                       	dc.b	smpsNoAttack, $01
00088B27 ECFC                       	smpsPSGAlterVol     $FC
00088B29 9106                       	dc.b	nE1, $06
00088B2B EC04                       	smpsPSGAlterVol     $04
00088B2D E701                       	dc.b	smpsNoAttack, $01
00088B2F EC07                       	smpsPSGAlterVol     $07
00088B31 8006                       	dc.b	nRst, $06
00088B33 E100                       	smpsAlterNote       $00
00088B35 01                         	dc.b	$01
00088B36 E104                       	smpsAlterNote       $04
00088B38 01                         	dc.b	$01
00088B39 E100                       	smpsAlterNote       $00
00088B3B 01                         	dc.b	$01
00088B3C E1FA                       	smpsAlterNote       $FA
00088B3E 01                         	dc.b	$01
00088B3F E1F9                       	smpsAlterNote       $F9
00088B41 01                         	dc.b	$01
00088B42 E1FD                       	smpsAlterNote       $FD
00088B44 01                         	dc.b	$01
00088B45 E103                       	smpsAlterNote       $03
00088B47 01                         	dc.b	$01
00088B48 E104                       	smpsAlterNote       $04
00088B4A 01                         	dc.b	$01
00088B4B E100                       	smpsAlterNote       $00
00088B4D 01                         	dc.b	$01
00088B4E E1FA                       	smpsAlterNote       $FA
00088B50 0101                       	dc.b	$01, $01
00088B52 E1FD                       	smpsAlterNote       $FD
00088B54 ECF5                       	smpsPSGAlterVol     $F5
00088B56 9206                       	dc.b	nF1, $06
00088B58 EC04                       	smpsPSGAlterVol     $04
00088B5A E701                       	dc.b	smpsNoAttack, $01
00088B5C EC07                       	smpsPSGAlterVol     $07
00088B5E 8003                       	dc.b	nRst, $03
00088B60 ECF5                       	smpsPSGAlterVol     $F5
00088B62 9206                       	dc.b	nF1, $06
00088B64 EC04                       	smpsPSGAlterVol     $04
00088B66 E701                       	dc.b	smpsNoAttack, $01
00088B68 EC07                       	smpsPSGAlterVol     $07
00088B6A 8006                       	dc.b	nRst, $06
00088B6C E100                       	smpsAlterNote       $00
00088B6E 01                         	dc.b	$01
00088B6F E104                       	smpsAlterNote       $04
00088B71 01                         	dc.b	$01
00088B72 E103                       	smpsAlterNote       $03
00088B74 01                         	dc.b	$01
00088B75 E1FD                       	smpsAlterNote       $FD
00088B77 01                         	dc.b	$01
00088B78 ECF5                       	smpsPSGAlterVol     $F5
00088B7A 9407                       	dc.b	nG1, $07
00088B7C EC0B                       	smpsPSGAlterVol     $0B
00088B7E 8004                       	dc.b	nRst, $04
00088B80 ECF5                       	smpsPSGAlterVol     $F5
00088B82 9406                       	dc.b	nG1, $06
00088B84 EC0B                       	smpsPSGAlterVol     $0B
00088B86 8007                       	dc.b	nRst, $07
00088B88 E103                       	smpsAlterNote       $03
00088B8A 0101                       	dc.b	$01, $01
00088B8C E1FD                       	smpsAlterNote       $FD
00088B8E 01                         	dc.b	$01
00088B8F E1F9                       	smpsAlterNote       $F9
00088B91 01                         	dc.b	$01
00088B92 E1FD                       	smpsAlterNote       $FD
00088B94 ECF5                       	smpsPSGAlterVol     $F5
00088B96 9206                       	dc.b	nF1, $06
00088B98 EC04                       	smpsPSGAlterVol     $04
00088B9A E701                       	dc.b	smpsNoAttack, $01
00088B9C EC07                       	smpsPSGAlterVol     $07
00088B9E 8003                       	dc.b	nRst, $03
00088BA0 ECF5                       	smpsPSGAlterVol     $F5
00088BA2 9206                       	dc.b	nF1, $06
00088BA4 EC04                       	smpsPSGAlterVol     $04
00088BA6 E701                       	dc.b	smpsNoAttack, $01
00088BA8 EC07                       	smpsPSGAlterVol     $07
00088BAA 8006                       	dc.b	nRst, $06
00088BAC E100                       	smpsAlterNote       $00
00088BAE 01                         	dc.b	$01
00088BAF E104                       	smpsAlterNote       $04
00088BB1 01                         	dc.b	$01
00088BB2 E100                       	smpsAlterNote       $00
00088BB4 01                         	dc.b	$01
00088BB5 E1FA                       	smpsAlterNote       $FA
00088BB7 01                         	dc.b	$01
00088BB8 E1FD                       	smpsAlterNote       $FD
00088BBA ECF5                       	smpsPSGAlterVol     $F5
00088BBC 9206                       	dc.b	nF1, $06
00088BBE EC04                       	smpsPSGAlterVol     $04
00088BC0 E701                       	dc.b	smpsNoAttack, $01
00088BC2 EC07                       	smpsPSGAlterVol     $07
00088BC4 8003                       	dc.b	nRst, $03
00088BC6 ECF5                       	smpsPSGAlterVol     $F5
00088BC8 9107                       	dc.b	nE1, $07
00088BCA EC0B                       	smpsPSGAlterVol     $0B
00088BCC 8006                       	dc.b	nRst, $06
00088BCE E100                       	smpsAlterNote       $00
00088BD0 01                         	dc.b	$01
00088BD1 E103                       	smpsAlterNote       $03
00088BD3 0101                       	dc.b	$01, $01
00088BD5 E1FD                       	smpsAlterNote       $FD
00088BD7 01                         	dc.b	$01
00088BD8 ECF5                       	smpsPSGAlterVol     $F5
00088BDA 9207                       	dc.b	nF1, $07
00088BDC EC0B                       	smpsPSGAlterVol     $0B
00088BDE 8004                       	dc.b	nRst, $04
00088BE0 ECF5                       	smpsPSGAlterVol     $F5
00088BE2 9206                       	dc.b	nF1, $06
00088BE4 EC04                       	smpsPSGAlterVol     $04
00088BE6 E701                       	dc.b	smpsNoAttack, $01
00088BE8 EC07                       	smpsPSGAlterVol     $07
00088BEA 8006                       	dc.b	nRst, $06
00088BEC E103                       	smpsAlterNote       $03
00088BEE 01                         	dc.b	$01
00088BEF E104                       	smpsAlterNote       $04
00088BF1 01                         	dc.b	$01
00088BF2 E100                       	smpsAlterNote       $00
00088BF4 01                         	dc.b	$01
00088BF5 E1FB                       	smpsAlterNote       $FB
00088BF7 01                         	dc.b	$01
00088BF8 E1FD                       	smpsAlterNote       $FD
00088BFA ECF5                       	smpsPSGAlterVol     $F5
00088BFC 9406                       	dc.b	nG1, $06
00088BFE EC04                       	smpsPSGAlterVol     $04
00088C00 E701                       	dc.b	smpsNoAttack, $01
00088C02 EC07                       	smpsPSGAlterVol     $07
00088C04 8003                       	dc.b	nRst, $03
00088C06 ECF5                       	smpsPSGAlterVol     $F5
00088C08 9406                       	dc.b	nG1, $06
00088C0A EC04                       	smpsPSGAlterVol     $04
00088C0C E701                       	dc.b	smpsNoAttack, $01
00088C0E EC07                       	smpsPSGAlterVol     $07
00088C10 8006                       	dc.b	nRst, $06
00088C12 E100                       	smpsAlterNote       $00
00088C14 01                         	dc.b	$01
00088C15 E104                       	smpsAlterNote       $04
00088C17 01                         	dc.b	$01
00088C18 E100                       	smpsAlterNote       $00
00088C1A 01                         	dc.b	$01
00088C1B E1FD                       	smpsAlterNote       $FD
00088C1D 01                         	dc.b	$01
00088C1E ECF5                       	smpsPSGAlterVol     $F5
00088C20 9206                       	dc.b	nF1, $06
00088C22 EC04                       	smpsPSGAlterVol     $04
00088C24 E701                       	dc.b	smpsNoAttack, $01
00088C26 EC07                       	smpsPSGAlterVol     $07
00088C28 8003                       	dc.b	nRst, $03
00088C2A ECF5                       	smpsPSGAlterVol     $F5
00088C2C 9207                       	dc.b	nF1, $07
00088C2E EC0B                       	smpsPSGAlterVol     $0B
00088C30 8007                       	dc.b	nRst, $07
00088C32 E103                       	smpsAlterNote       $03
00088C34 0101                       	dc.b	$01, $01
00088C36 E1FD                       	smpsAlterNote       $FD
00088C38 01                         	dc.b	$01
00088C39 E1FA                       	smpsAlterNote       $FA
00088C3B 01                         	dc.b	$01
00088C3C E1FD                       	smpsAlterNote       $FD
00088C3E ECF5                       	smpsPSGAlterVol     $F5
00088C40 9206                       	dc.b	nF1, $06
00088C42 EC0B                       	smpsPSGAlterVol     $0B
00088C44 8004                       	dc.b	nRst, $04
00088C46 ECF5                       	smpsPSGAlterVol     $F5
00088C48 9206                       	dc.b	nF1, $06
00088C4A EC04                       	smpsPSGAlterVol     $04
00088C4C E701                       	dc.b	smpsNoAttack, $01
00088C4E EC07                       	smpsPSGAlterVol     $07
00088C50 8006                       	dc.b	nRst, $06
00088C52 E100                       	smpsAlterNote       $00
00088C54 01                         	dc.b	$01
00088C55 E104                       	smpsAlterNote       $04
00088C57 01                         	dc.b	$01
00088C58 E100                       	smpsAlterNote       $00
00088C5A 01                         	dc.b	$01
00088C5B E1FA                       	smpsAlterNote       $FA
00088C5D 01                         	dc.b	$01
00088C5E E1FD                       	smpsAlterNote       $FD
00088C60 ECF5                       	smpsPSGAlterVol     $F5
00088C62 9206                       	dc.b	nF1, $06
00088C64 EC04                       	smpsPSGAlterVol     $04
00088C66 E704                       	dc.b	smpsNoAttack, $04
00088C68 ECFC                       	smpsPSGAlterVol     $FC
00088C6A 9207                       	dc.b	nF1, $07
00088C6C EC0B                       	smpsPSGAlterVol     $0B
00088C6E 8006                       	dc.b	nRst, $06
00088C70 E100                       	smpsAlterNote       $00
00088C72 01                         	dc.b	$01
00088C73 E104                       	smpsAlterNote       $04
00088C75 01                         	dc.b	$01
00088C76 E103                       	smpsAlterNote       $03
00088C78 01                         	dc.b	$01
00088C79 E1FD                       	smpsAlterNote       $FD
00088C7B 01                         	dc.b	$01
00088C7C ECF5                       	smpsPSGAlterVol     $F5
00088C7E 9207                       	dc.b	nF1, $07
00088C80 EC0B                       	smpsPSGAlterVol     $0B
00088C82 8004                       	dc.b	nRst, $04
00088C84 ECF5                       	smpsPSGAlterVol     $F5
00088C86 9206                       	dc.b	nF1, $06
00088C88 EC0B                       	smpsPSGAlterVol     $0B
00088C8A 8007                       	dc.b	nRst, $07
00088C8C E103                       	smpsAlterNote       $03
00088C8E 0101                       	dc.b	$01, $01
00088C90 E100                       	smpsAlterNote       $00
00088C92 01                         	dc.b	$01
00088C93 E1FA                       	smpsAlterNote       $FA
00088C95 01                         	dc.b	$01
00088C96 E1FD                       	smpsAlterNote       $FD
00088C98 ECF5                       	smpsPSGAlterVol     $F5
00088C9A 9206                       	dc.b	nF1, $06
00088C9C EC04                       	smpsPSGAlterVol     $04
00088C9E E704                       	dc.b	smpsNoAttack, $04
00088CA0 ECFC                       	smpsPSGAlterVol     $FC
00088CA2 9206                       	dc.b	nF1, $06
00088CA4 EC04                       	smpsPSGAlterVol     $04
00088CA6 E701                       	dc.b	smpsNoAttack, $01
00088CA8 EC07                       	smpsPSGAlterVol     $07
00088CAA 8006                       	dc.b	nRst, $06
00088CAC E100                       	smpsAlterNote       $00
00088CAE 01                         	dc.b	$01
00088CAF E104                       	smpsAlterNote       $04
00088CB1 01                         	dc.b	$01
00088CB2 E100                       	smpsAlterNote       $00
00088CB4 01                         	dc.b	$01
00088CB5 E1FD                       	smpsAlterNote       $FD
00088CB7 01                         	dc.b	$01
00088CB8 ECF5                       	smpsPSGAlterVol     $F5
00088CBA 9206                       	dc.b	nF1, $06
00088CBC EC04                       	smpsPSGAlterVol     $04
00088CBE E701                       	dc.b	smpsNoAttack, $01
00088CC0 EC07                       	smpsPSGAlterVol     $07
00088CC2 8003                       	dc.b	nRst, $03
00088CC4 ECF5                       	smpsPSGAlterVol     $F5
00088CC6 9207                       	dc.b	nF1, $07
00088CC8 EC0B                       	smpsPSGAlterVol     $0B
00088CCA 8007                       	dc.b	nRst, $07
00088CCC E103                       	smpsAlterNote       $03
00088CCE 0101                       	dc.b	$01, $01
00088CD0 E1FD                       	smpsAlterNote       $FD
00088CD2 01                         	dc.b	$01
00088CD3 E1FA                       	smpsAlterNote       $FA
00088CD5 01                         	dc.b	$01
00088CD6 E1FD                       	smpsAlterNote       $FD
00088CD8 ECF5                       	smpsPSGAlterVol     $F5
00088CDA 9106                       	dc.b	nE1, $06
00088CDC EC0B                       	smpsPSGAlterVol     $0B
00088CDE 8004                       	dc.b	nRst, $04
00088CE0 ECF5                       	smpsPSGAlterVol     $F5
00088CE2 9106                       	dc.b	nE1, $06
00088CE4 EC04                       	smpsPSGAlterVol     $04
00088CE6 E701                       	dc.b	smpsNoAttack, $01
00088CE8 EC07                       	smpsPSGAlterVol     $07
00088CEA 8006                       	dc.b	nRst, $06
00088CEC E100                       	smpsAlterNote       $00
00088CEE 01                         	dc.b	$01
00088CEF E104                       	smpsAlterNote       $04
00088CF1 01                         	dc.b	$01
00088CF2 E100                       	smpsAlterNote       $00
00088CF4 01                         	dc.b	$01
00088CF5 E1FA                       	smpsAlterNote       $FA
00088CF7 01                         	dc.b	$01
00088CF8 E1FD                       	smpsAlterNote       $FD
00088CFA ECF5                       	smpsPSGAlterVol     $F5
00088CFC 9106                       	dc.b	nE1, $06
00088CFE EC04                       	smpsPSGAlterVol     $04
00088D00 E701                       	dc.b	smpsNoAttack, $01
00088D02 EC07                       	smpsPSGAlterVol     $07
00088D04 8003                       	dc.b	nRst, $03
00088D06 ECF5                       	smpsPSGAlterVol     $F5
00088D08 9106                       	dc.b	nE1, $06
00088D0A EC04                       	smpsPSGAlterVol     $04
00088D0C E701                       	dc.b	smpsNoAttack, $01
00088D0E EC07                       	smpsPSGAlterVol     $07
00088D10 8006                       	dc.b	nRst, $06
00088D12 E100                       	smpsAlterNote       $00
00088D14 01                         	dc.b	$01
00088D15 E104                       	smpsAlterNote       $04
00088D17 01                         	dc.b	$01
00088D18 E103                       	smpsAlterNote       $03
00088D1A 01                         	dc.b	$01
00088D1B E1FD                       	smpsAlterNote       $FD
00088D1D 01                         	dc.b	$01
00088D1E ECF5                       	smpsPSGAlterVol     $F5
00088D20 9107                       	dc.b	nE1, $07
00088D22 EC0B                       	smpsPSGAlterVol     $0B
00088D24 8004                       	dc.b	nRst, $04
00088D26 ECF5                       	smpsPSGAlterVol     $F5
00088D28 9106                       	dc.b	nE1, $06
00088D2A EC0B                       	smpsPSGAlterVol     $0B
00088D2C 8007                       	dc.b	nRst, $07
00088D2E E103                       	smpsAlterNote       $03
00088D30 0101                       	dc.b	$01, $01
00088D32 E100                       	smpsAlterNote       $00
00088D34 01                         	dc.b	$01
00088D35 E1FA                       	smpsAlterNote       $FA
00088D37 01                         	dc.b	$01
00088D38 E1FD                       	smpsAlterNote       $FD
00088D3A ECF5                       	smpsPSGAlterVol     $F5
00088D3C 9106                       	dc.b	nE1, $06
00088D3E EC04                       	smpsPSGAlterVol     $04
00088D40 E701                       	dc.b	smpsNoAttack, $01
00088D42 EC07                       	smpsPSGAlterVol     $07
00088D44 8003                       	dc.b	nRst, $03
00088D46 ECF5                       	smpsPSGAlterVol     $F5
00088D48 9106                       	dc.b	nE1, $06
00088D4A EC04                       	smpsPSGAlterVol     $04
00088D4C E701                       	dc.b	smpsNoAttack, $01
00088D4E EC07                       	smpsPSGAlterVol     $07
00088D50 8003                       	dc.b	nRst, $03
00088D52 ECF5                       	smpsPSGAlterVol     $F5
00088D54 9207                       	dc.b	nF1, $07
00088D56 EC0B                       	smpsPSGAlterVol     $0B
00088D58 8006                       	dc.b	nRst, $06
00088D5A E100                       	smpsAlterNote       $00
00088D5C 01                         	dc.b	$01
00088D5D E104                       	smpsAlterNote       $04
00088D5F 01                         	dc.b	$01
00088D60 E103                       	smpsAlterNote       $03
00088D62 01                         	dc.b	$01
00088D63 E1FD                       	smpsAlterNote       $FD
00088D65 01                         	dc.b	$01
00088D66 E1F9                       	smpsAlterNote       $F9
00088D68 01                         	dc.b	$01
00088D69 E1FD                       	smpsAlterNote       $FD
00088D6B 01                         	dc.b	$01
00088D6C E100                       	smpsAlterNote       $00
00088D6E 01                         	dc.b	$01
00088D6F E104                       	smpsAlterNote       $04
00088D71 01                         	dc.b	$01
00088D72 E1FD                       	smpsAlterNote       $FD
00088D74 ECF5                       	smpsPSGAlterVol     $F5
00088D76 9203 9203                  	dc.b	nF1, $03, nF1, $03
00088D7A EC04                       	smpsPSGAlterVol     $04
00088D7C E701                       	dc.b	smpsNoAttack, $01
00088D7E EC07                       	smpsPSGAlterVol     $07
00088D80 8009                       	dc.b	nRst, $09
00088D82 E100                       	smpsAlterNote       $00
00088D84 01                         	dc.b	$01
00088D85 E104                       	smpsAlterNote       $04
00088D87 01                         	dc.b	$01
00088D88 E103                       	smpsAlterNote       $03
00088D8A 01                         	dc.b	$01
00088D8B E1FD                       	smpsAlterNote       $FD
00088D8D 01                         	dc.b	$01
00088D8E E1F9                       	smpsAlterNote       $F9
00088D90 01                         	dc.b	$01
00088D91 E1FD                       	smpsAlterNote       $FD
00088D93 01                         	dc.b	$01
00088D94 E100                       	smpsAlterNote       $00
00088D96 01                         	dc.b	$01
00088D97 E104                       	smpsAlterNote       $04
00088D99 01                         	dc.b	$01
00088D9A E100                       	smpsAlterNote       $00
00088D9C 01                         	dc.b	$01
00088D9D E1FA                       	smpsAlterNote       $FA
00088D9F 01                         	dc.b	$01
00088DA0 E1F9                       	smpsAlterNote       $F9
00088DA2 01                         	dc.b	$01
00088DA3 E1FD                       	smpsAlterNote       $FD
00088DA5 01                         	dc.b	$01
00088DA6 E103                       	smpsAlterNote       $03
00088DA8 0101                       	dc.b	$01, $01
00088DAA E100                       	smpsAlterNote       $00
00088DAC 01                         	dc.b	$01
00088DAD E1FD                       	smpsAlterNote       $FD
00088DAF ECF5                       	smpsPSGAlterVol     $F5
00088DB1 9202                       	dc.b	nF1, $02
00088DB3 EC04                       	smpsPSGAlterVol     $04
00088DB5 E701                       	dc.b	smpsNoAttack, $01
00088DB7 ECFC                       	smpsPSGAlterVol     $FC
00088DB9 9106                       	dc.b	nE1, $06
00088DBB EC04                       	smpsPSGAlterVol     $04
00088DBD E701                       	dc.b	smpsNoAttack, $01
00088DBF EC07                       	smpsPSGAlterVol     $07
00088DC1 8006                       	dc.b	nRst, $06
00088DC3 E100                       	smpsAlterNote       $00
00088DC5 01                         	dc.b	$01
00088DC6 E104                       	smpsAlterNote       $04
00088DC8 01                         	dc.b	$01
00088DC9 E100                       	smpsAlterNote       $00
00088DCB 01                         	dc.b	$01
00088DCC E1FD                       	smpsAlterNote       $FD
00088DCE 01                         	dc.b	$01
00088DCF E1F9                       	smpsAlterNote       $F9
00088DD1 01                         	dc.b	$01
00088DD2 E1FD                       	smpsAlterNote       $FD
00088DD4 01                         	dc.b	$01
00088DD5 E103                       	smpsAlterNote       $03
00088DD7 01                         	dc.b	$01
00088DD8 E104                       	smpsAlterNote       $04
00088DDA 01                         	dc.b	$01
00088DDB E1FD                       	smpsAlterNote       $FD
00088DDD ECF5                       	smpsPSGAlterVol     $F5
00088DDF 9102                       	dc.b	nE1, $02
00088DE1 EC04                       	smpsPSGAlterVol     $04
00088DE3 E701                       	dc.b	smpsNoAttack, $01
00088DE5 ECFC                       	smpsPSGAlterVol     $FC
00088DE7 920D                       	dc.b	nF1, $0D
00088DE9 E100                       	smpsAlterNote       $00
00088DEB E701                       	dc.b	smpsNoAttack, $01
00088DED E104                       	smpsAlterNote       $04
00088DEF E701                       	dc.b	smpsNoAttack, $01
00088DF1 E100                       	smpsAlterNote       $00
00088DF3 E701                       	dc.b	smpsNoAttack, $01
00088DF5 E1FD                       	smpsAlterNote       $FD
00088DF7 E701                       	dc.b	smpsNoAttack, $01
00088DF9 E1F9                       	smpsAlterNote       $F9
00088DFB E701                       	dc.b	smpsNoAttack, $01
00088DFD E1FD                       	smpsAlterNote       $FD
00088DFF E701                       	dc.b	smpsNoAttack, $01
00088E01 E103                       	smpsAlterNote       $03
00088E03 E701                       	dc.b	smpsNoAttack, $01
00088E05 E104                       	smpsAlterNote       $04
00088E07 E701                       	dc.b	smpsNoAttack, $01
00088E09 E100                       	smpsAlterNote       $00
00088E0B E701                       	dc.b	smpsNoAttack, $01
00088E0D E1FA                       	smpsAlterNote       $FA
00088E0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E13 E1FD                       	smpsAlterNote       $FD
00088E15 E701                       	dc.b	smpsNoAttack, $01
00088E17 E103                       	smpsAlterNote       $03
00088E19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E1D E1FD                       	smpsAlterNote       $FD
00088E1F E701                       	dc.b	smpsNoAttack, $01
00088E21 E1F9                       	smpsAlterNote       $F9
00088E23 E701                       	dc.b	smpsNoAttack, $01
00088E25 E1FA                       	smpsAlterNote       $FA
00088E27 E701                       	dc.b	smpsNoAttack, $01
00088E29 E100                       	smpsAlterNote       $00
00088E2B EC04                       	smpsPSGAlterVol     $04
00088E2D E701                       	dc.b	smpsNoAttack, $01
00088E2F EC07                       	smpsPSGAlterVol     $07
00088E31 E104                       	smpsAlterNote       $04
00088E33 8001                       	dc.b	nRst, $01
00088E35 E100                       	smpsAlterNote       $00
00088E37 01                         	dc.b	$01
00088E38 E1FD                       	smpsAlterNote       $FD
00088E3A 01                         	dc.b	$01
00088E3B E1F9                       	smpsAlterNote       $F9
00088E3D 01                         	dc.b	$01
00088E3E E1FD                       	smpsAlterNote       $FD
00088E40 01                         	dc.b	$01
00088E41 E103                       	smpsAlterNote       $03
00088E43 01                         	dc.b	$01
00088E44 E104                       	smpsAlterNote       $04
00088E46 01                         	dc.b	$01
00088E47 E1FD                       	smpsAlterNote       $FD
00088E49 ECF5                       	smpsPSGAlterVol     $F5
00088E4B 9106                       	dc.b	nE1, $06
00088E4D EC04                       	smpsPSGAlterVol     $04
00088E4F E701                       	dc.b	smpsNoAttack, $01
00088E51 EC07                       	smpsPSGAlterVol     $07
00088E53 8003                       	dc.b	nRst, $03
00088E55 ECF5                       	smpsPSGAlterVol     $F5
00088E57 9106                       	dc.b	nE1, $06
00088E59 EC04                       	smpsPSGAlterVol     $04
00088E5B E701                       	dc.b	smpsNoAttack, $01
00088E5D EC07                       	smpsPSGAlterVol     $07
00088E5F 8006                       	dc.b	nRst, $06
00088E61 E100                       	smpsAlterNote       $00
00088E63 01                         	dc.b	$01
00088E64 E104                       	smpsAlterNote       $04
00088E66 01                         	dc.b	$01
00088E67 E100                       	smpsAlterNote       $00
00088E69 01                         	dc.b	$01
00088E6A E1FA                       	smpsAlterNote       $FA
00088E6C 01                         	dc.b	$01
00088E6D E1FD                       	smpsAlterNote       $FD
00088E6F ECF5                       	smpsPSGAlterVol     $F5
00088E71 9206                       	dc.b	nF1, $06
00088E73 EC04                       	smpsPSGAlterVol     $04
00088E75 E701                       	dc.b	smpsNoAttack, $01
00088E77 EC07                       	smpsPSGAlterVol     $07
00088E79 8003                       	dc.b	nRst, $03
00088E7B ECF5                       	smpsPSGAlterVol     $F5
00088E7D 9207                       	dc.b	nF1, $07
00088E7F EC0B                       	smpsPSGAlterVol     $0B
00088E81 8006                       	dc.b	nRst, $06
00088E83 E100                       	smpsAlterNote       $00
00088E85 01                         	dc.b	$01
00088E86 E103                       	smpsAlterNote       $03
00088E88 0101                       	dc.b	$01, $01
00088E8A E1FD                       	smpsAlterNote       $FD
00088E8C 01                         	dc.b	$01
00088E8D ECF5                       	smpsPSGAlterVol     $F5
00088E8F 9107                       	dc.b	nE1, $07
00088E91 EC0B                       	smpsPSGAlterVol     $0B
00088E93 8004                       	dc.b	nRst, $04
00088E95 ECF5                       	smpsPSGAlterVol     $F5
00088E97 9106                       	dc.b	nE1, $06
00088E99 EC04                       	smpsPSGAlterVol     $04
00088E9B E701                       	dc.b	smpsNoAttack, $01
00088E9D EC07                       	smpsPSGAlterVol     $07
00088E9F 8006                       	dc.b	nRst, $06
00088EA1 E103                       	smpsAlterNote       $03
00088EA3 01                         	dc.b	$01
00088EA4 E104                       	smpsAlterNote       $04
00088EA6 01                         	dc.b	$01
00088EA7 E100                       	smpsAlterNote       $00
00088EA9 01                         	dc.b	$01
00088EAA E1FA                       	smpsAlterNote       $FA
00088EAC 01                         	dc.b	$01
00088EAD E1FD                       	smpsAlterNote       $FD
00088EAF ECF5                       	smpsPSGAlterVol     $F5
00088EB1 9106                       	dc.b	nE1, $06
00088EB3 EC04                       	smpsPSGAlterVol     $04
00088EB5 E701                       	dc.b	smpsNoAttack, $01
00088EB7 EC07                       	smpsPSGAlterVol     $07
00088EB9 8003                       	dc.b	nRst, $03
00088EBB ECF5                       	smpsPSGAlterVol     $F5
00088EBD 9106                       	dc.b	nE1, $06
00088EBF EC04                       	smpsPSGAlterVol     $04
00088EC1 E701                       	dc.b	smpsNoAttack, $01
00088EC3 EC07                       	smpsPSGAlterVol     $07
00088EC5 8003                       	dc.b	nRst, $03
00088EC7 ECF5                       	smpsPSGAlterVol     $F5
00088EC9 9207                       	dc.b	nF1, $07
00088ECB EC0B                       	smpsPSGAlterVol     $0B
00088ECD 8006                       	dc.b	nRst, $06
00088ECF E100                       	smpsAlterNote       $00
00088ED1 01                         	dc.b	$01
00088ED2 E103                       	smpsAlterNote       $03
00088ED4 0101                       	dc.b	$01, $01
00088ED6 E1FD                       	smpsAlterNote       $FD
00088ED8 01                         	dc.b	$01
00088ED9 E1F9                       	smpsAlterNote       $F9
00088EDB 01                         	dc.b	$01
00088EDC E1FA                       	smpsAlterNote       $FA
00088EDE 01                         	dc.b	$01
00088EDF E100                       	smpsAlterNote       $00
00088EE1 01                         	dc.b	$01
00088EE2 E104                       	smpsAlterNote       $04
00088EE4 01                         	dc.b	$01
00088EE5 E1FD                       	smpsAlterNote       $FD
00088EE7 ECF5                       	smpsPSGAlterVol     $F5
00088EE9 9203 9203                  	dc.b	nF1, $03, nF1, $03
00088EED EC04                       	smpsPSGAlterVol     $04
00088EEF E701                       	dc.b	smpsNoAttack, $01
00088EF1 EC07                       	smpsPSGAlterVol     $07
00088EF3 8009                       	dc.b	nRst, $09
00088EF5 E100                       	smpsAlterNote       $00
00088EF7 01                         	dc.b	$01
00088EF8 E103                       	smpsAlterNote       $03
00088EFA 0101                       	dc.b	$01, $01
00088EFC E1FD                       	smpsAlterNote       $FD
00088EFE 01                         	dc.b	$01
00088EFF E1F9                       	smpsAlterNote       $F9
00088F01 01                         	dc.b	$01
00088F02 E1FA                       	smpsAlterNote       $FA
00088F04 01                         	dc.b	$01
00088F05 E100                       	smpsAlterNote       $00
00088F07 01                         	dc.b	$01
00088F08 E104                       	smpsAlterNote       $04
00088F0A 01                         	dc.b	$01
00088F0B E100                       	smpsAlterNote       $00
00088F0D 01                         	dc.b	$01
00088F0E E1FD                       	smpsAlterNote       $FD
00088F10 01                         	dc.b	$01
00088F11 E1F9                       	smpsAlterNote       $F9
00088F13 01                         	dc.b	$01
00088F14 E1FD                       	smpsAlterNote       $FD
00088F16 01                         	dc.b	$01
00088F17 E103                       	smpsAlterNote       $03
00088F19 01                         	dc.b	$01
00088F1A E104                       	smpsAlterNote       $04
00088F1C 01                         	dc.b	$01
00088F1D E100                       	smpsAlterNote       $00
00088F1F 01                         	dc.b	$01
00088F20 E1FD                       	smpsAlterNote       $FD
00088F22 ECF5                       	smpsPSGAlterVol     $F5
00088F24 9203 9106                  	dc.b	nF1, $03, nE1, $06
00088F28 EC04                       	smpsPSGAlterVol     $04
00088F2A E701                       	dc.b	smpsNoAttack, $01
00088F2C EC07                       	smpsPSGAlterVol     $07
00088F2E 8006                       	dc.b	nRst, $06
00088F30 E100                       	smpsAlterNote       $00
00088F32 01                         	dc.b	$01
00088F33 E104                       	smpsAlterNote       $04
00088F35 01                         	dc.b	$01
00088F36 E103                       	smpsAlterNote       $03
00088F38 01                         	dc.b	$01
00088F39 E1FD                       	smpsAlterNote       $FD
00088F3B 01                         	dc.b	$01
00088F3C E1F9                       	smpsAlterNote       $F9
00088F3E 01                         	dc.b	$01
00088F3F E1FD                       	smpsAlterNote       $FD
00088F41 01                         	dc.b	$01
00088F42 E100                       	smpsAlterNote       $00
00088F44 01                         	dc.b	$01
00088F45 E104                       	smpsAlterNote       $04
00088F47 01                         	dc.b	$01
00088F48 E1FD                       	smpsAlterNote       $FD
00088F4A ECF5                       	smpsPSGAlterVol     $F5
00088F4C 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00088F50 E100                       	smpsAlterNote       $00
00088F52 E701                       	dc.b	smpsNoAttack, $01
00088F54 E104                       	smpsAlterNote       $04
00088F56 E701                       	dc.b	smpsNoAttack, $01
00088F58 E100                       	smpsAlterNote       $00
00088F5A E701                       	dc.b	smpsNoAttack, $01
00088F5C E1FD                       	smpsAlterNote       $FD
00088F5E E701                       	dc.b	smpsNoAttack, $01
00088F60 E1F9                       	smpsAlterNote       $F9
00088F62 E701                       	dc.b	smpsNoAttack, $01
00088F64 E1FD                       	smpsAlterNote       $FD
00088F66 E701                       	dc.b	smpsNoAttack, $01
00088F68 E103                       	smpsAlterNote       $03
00088F6A E701                       	dc.b	smpsNoAttack, $01
00088F6C E104                       	smpsAlterNote       $04
00088F6E E701                       	dc.b	smpsNoAttack, $01
00088F70 E100                       	smpsAlterNote       $00
00088F72 E701                       	dc.b	smpsNoAttack, $01
00088F74 E1FA                       	smpsAlterNote       $FA
00088F76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F7A E1FD                       	smpsAlterNote       $FD
00088F7C E701                       	dc.b	smpsNoAttack, $01
00088F7E E103                       	smpsAlterNote       $03
00088F80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F84 E100                       	smpsAlterNote       $00
00088F86 E701                       	dc.b	smpsNoAttack, $01
00088F88 E1FA                       	smpsAlterNote       $FA
00088F8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F8E E100                       	smpsAlterNote       $00
00088F90 EC04                       	smpsPSGAlterVol     $04
00088F92 E701                       	dc.b	smpsNoAttack, $01
00088F94 EC07                       	smpsPSGAlterVol     $07
00088F96 E104                       	smpsAlterNote       $04
00088F98 8001                       	dc.b	nRst, $01
00088F9A E103                       	smpsAlterNote       $03
00088F9C 01                         	dc.b	$01
00088F9D E1FD                       	smpsAlterNote       $FD
00088F9F 01                         	dc.b	$01
00088FA0 E1F9                       	smpsAlterNote       $F9
00088FA2 01                         	dc.b	$01
00088FA3 E1FD                       	smpsAlterNote       $FD
00088FA5 01                         	dc.b	$01
00088FA6 E100                       	smpsAlterNote       $00
00088FA8 01                         	dc.b	$01
00088FA9 E104                       	smpsAlterNote       $04
00088FAB 01                         	dc.b	$01
00088FAC E1FD                       	smpsAlterNote       $FD
00088FAE ECF5                       	smpsPSGAlterVol     $F5
00088FB0 9106                       	dc.b	nE1, $06
00088FB2 EC04                       	smpsPSGAlterVol     $04
00088FB4 E701                       	dc.b	smpsNoAttack, $01
00088FB6 EC07                       	smpsPSGAlterVol     $07
00088FB8 8003                       	dc.b	nRst, $03
00088FBA ECF5                       	smpsPSGAlterVol     $F5
00088FBC 9106                       	dc.b	nE1, $06
00088FBE EC04                       	smpsPSGAlterVol     $04
00088FC0 E701                       	dc.b	smpsNoAttack, $01
00088FC2 EC07                       	smpsPSGAlterVol     $07
00088FC4 8006                       	dc.b	nRst, $06
00088FC6 E100                       	smpsAlterNote       $00
00088FC8 01                         	dc.b	$01
00088FC9 E104                       	smpsAlterNote       $04
00088FCB 01                         	dc.b	$01
00088FCC E100                       	smpsAlterNote       $00
00088FCE 01                         	dc.b	$01
00088FCF E1FD                       	smpsAlterNote       $FD
00088FD1 01                         	dc.b	$01
00088FD2 ECF5                       	smpsPSGAlterVol     $F5
00088FD4 9206                       	dc.b	nF1, $06
00088FD6 EC04                       	smpsPSGAlterVol     $04
00088FD8 E701                       	dc.b	smpsNoAttack, $01
00088FDA EC07                       	smpsPSGAlterVol     $07
00088FDC 8003                       	dc.b	nRst, $03
00088FDE ECF5                       	smpsPSGAlterVol     $F5
00088FE0 9207                       	dc.b	nF1, $07
00088FE2 EC0B                       	smpsPSGAlterVol     $0B
00088FE4 8007                       	dc.b	nRst, $07
00088FE6 E103                       	smpsAlterNote       $03
00088FE8 0101                       	dc.b	$01, $01
00088FEA E1FD                       	smpsAlterNote       $FD
00088FEC 01                         	dc.b	$01
00088FED E1FA                       	smpsAlterNote       $FA
00088FEF 01                         	dc.b	$01
00088FF0 E1FD                       	smpsAlterNote       $FD
00088FF2 ECF5                       	smpsPSGAlterVol     $F5
00088FF4 9106                       	dc.b	nE1, $06
00088FF6 EC0B                       	smpsPSGAlterVol     $0B
00088FF8 8004                       	dc.b	nRst, $04
00088FFA ECF5                       	smpsPSGAlterVol     $F5
00088FFC 9106                       	dc.b	nE1, $06
00088FFE EC04                       	smpsPSGAlterVol     $04
00089000 E701                       	dc.b	smpsNoAttack, $01
00089002 EC07                       	smpsPSGAlterVol     $07
00089004 8006                       	dc.b	nRst, $06
00089006 E100                       	smpsAlterNote       $00
00089008 01                         	dc.b	$01
00089009 E104                       	smpsAlterNote       $04
0008900B 01                         	dc.b	$01
0008900C E100                       	smpsAlterNote       $00
0008900E 01                         	dc.b	$01
0008900F E1FA                       	smpsAlterNote       $FA
00089011 01                         	dc.b	$01
00089012 E1FD                       	smpsAlterNote       $FD
00089014 ECF5                       	smpsPSGAlterVol     $F5
00089016 9206                       	dc.b	nF1, $06
00089018 EC04                       	smpsPSGAlterVol     $04
0008901A E701                       	dc.b	smpsNoAttack, $01
0008901C EC07                       	smpsPSGAlterVol     $07
0008901E 8003                       	dc.b	nRst, $03
00089020 ECF5                       	smpsPSGAlterVol     $F5
00089022 9206                       	dc.b	nF1, $06
00089024 EC04                       	smpsPSGAlterVol     $04
00089026 E701                       	dc.b	smpsNoAttack, $01
00089028 EC07                       	smpsPSGAlterVol     $07
0008902A 8006                       	dc.b	nRst, $06
0008902C E100                       	smpsAlterNote       $00
0008902E 01                         	dc.b	$01
0008902F E104                       	smpsAlterNote       $04
00089031 01                         	dc.b	$01
00089032 E103                       	smpsAlterNote       $03
00089034 01                         	dc.b	$01
00089035 E1FD                       	smpsAlterNote       $FD
00089037 01                         	dc.b	$01
00089038 ECF5                       	smpsPSGAlterVol     $F5
0008903A 9107                       	dc.b	nE1, $07
0008903C EC0B                       	smpsPSGAlterVol     $0B
0008903E 8004                       	dc.b	nRst, $04
00089040 ECF5                       	smpsPSGAlterVol     $F5
00089042 9106                       	dc.b	nE1, $06
00089044 EC0B                       	smpsPSGAlterVol     $0B
00089046 8007                       	dc.b	nRst, $07
00089048 E103                       	smpsAlterNote       $03
0008904A 0101                       	dc.b	$01, $01
0008904C E100                       	smpsAlterNote       $00
0008904E 01                         	dc.b	$01
0008904F E1FA                       	smpsAlterNote       $FA
00089051 01                         	dc.b	$01
00089052 E1FD                       	smpsAlterNote       $FD
00089054 ECF5                       	smpsPSGAlterVol     $F5
00089056 9206                       	dc.b	nF1, $06
00089058 EC04                       	smpsPSGAlterVol     $04
0008905A E701                       	dc.b	smpsNoAttack, $01
0008905C EC07                       	smpsPSGAlterVol     $07
0008905E 8003                       	dc.b	nRst, $03
00089060 ECF5                       	smpsPSGAlterVol     $F5
00089062 9206                       	dc.b	nF1, $06
00089064 EC04                       	smpsPSGAlterVol     $04
00089066 E701                       	dc.b	smpsNoAttack, $01
00089068 EC07                       	smpsPSGAlterVol     $07
0008906A 8006                       	dc.b	nRst, $06
0008906C E100                       	smpsAlterNote       $00
0008906E 01                         	dc.b	$01
0008906F E104                       	smpsAlterNote       $04
00089071 01                         	dc.b	$01
00089072 E100                       	smpsAlterNote       $00
00089074 01                         	dc.b	$01
00089075 E1FD                       	smpsAlterNote       $FD
00089077 01                         	dc.b	$01
00089078 ECF5                       	smpsPSGAlterVol     $F5
0008907A 9106                       	dc.b	nE1, $06
0008907C EC04                       	smpsPSGAlterVol     $04
0008907E E701                       	dc.b	smpsNoAttack, $01
00089080 EC07                       	smpsPSGAlterVol     $07
00089082 8003                       	dc.b	nRst, $03
00089084 ECF5                       	smpsPSGAlterVol     $F5
00089086 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008908A EC04                       	smpsPSGAlterVol     $04
0008908C E701                       	dc.b	smpsNoAttack, $01
0008908E ECFC                       	smpsPSGAlterVol     $FC
00089090 9103                       	dc.b	nE1, $03
00089092 EC04                       	smpsPSGAlterVol     $04
00089094 E701                       	dc.b	smpsNoAttack, $01
00089096 ECFC                       	smpsPSGAlterVol     $FC
00089098 9102                       	dc.b	nE1, $02
0008909A EC04                       	smpsPSGAlterVol     $04
0008909C E701                       	dc.b	smpsNoAttack, $01
0008909E ECFC                       	smpsPSGAlterVol     $FC
000890A0 9103                       	dc.b	nE1, $03
000890A2 EC0B                       	smpsPSGAlterVol     $0B
000890A4 800A                       	dc.b	nRst, $0A
000890A6 E100                       	smpsAlterNote       $00
000890A8 01                         	dc.b	$01
000890A9 E104                       	smpsAlterNote       $04
000890AB 01                         	dc.b	$01
000890AC E100                       	smpsAlterNote       $00
000890AE 01                         	dc.b	$01
000890AF E1FA                       	smpsAlterNote       $FA
000890B1 01                         	dc.b	$01
000890B2 E1F9                       	smpsAlterNote       $F9
000890B4 01                         	dc.b	$01
000890B5 E1FD                       	smpsAlterNote       $FD
000890B7 01                         	dc.b	$01
000890B8 E103                       	smpsAlterNote       $03
000890BA 0101                       	dc.b	$01, $01
000890BC E100                       	smpsAlterNote       $00
000890BE 01                         	dc.b	$01
000890BF E1FA                       	smpsAlterNote       $FA
000890C1 0101                       	dc.b	$01, $01
000890C3 E1FD                       	smpsAlterNote       $FD
000890C5 ECF5                       	smpsPSGAlterVol     $F5
000890C7 9206                       	dc.b	nF1, $06
000890C9 EC04                       	smpsPSGAlterVol     $04
000890CB E704                       	dc.b	smpsNoAttack, $04
000890CD ECFC                       	smpsPSGAlterVol     $FC
000890CF 9206                       	dc.b	nF1, $06
000890D1 EC04                       	smpsPSGAlterVol     $04
000890D3 E701                       	dc.b	smpsNoAttack, $01
000890D5 EC07                       	smpsPSGAlterVol     $07
000890D7 8006                       	dc.b	nRst, $06
000890D9 E100                       	smpsAlterNote       $00
000890DB 01                         	dc.b	$01
000890DC E104                       	smpsAlterNote       $04
000890DE 01                         	dc.b	$01
000890DF E103                       	smpsAlterNote       $03
000890E1 01                         	dc.b	$01
000890E2 E1FD                       	smpsAlterNote       $FD
000890E4 01                         	dc.b	$01
000890E5 ECF5                       	smpsPSGAlterVol     $F5
000890E7 9407                       	dc.b	nG1, $07
000890E9 EC0B                       	smpsPSGAlterVol     $0B
000890EB 8004                       	dc.b	nRst, $04
000890ED ECF5                       	smpsPSGAlterVol     $F5
000890EF 9406                       	dc.b	nG1, $06
000890F1 EC0B                       	smpsPSGAlterVol     $0B
000890F3 8007                       	dc.b	nRst, $07
000890F5 E103                       	smpsAlterNote       $03
000890F7 0101                       	dc.b	$01, $01
000890F9 E1FD                       	smpsAlterNote       $FD
000890FB 01                         	dc.b	$01
000890FC E1F9                       	smpsAlterNote       $F9
000890FE 01                         	dc.b	$01
000890FF E1FD                       	smpsAlterNote       $FD
00089101 ECF5                       	smpsPSGAlterVol     $F5
00089103 9206                       	dc.b	nF1, $06
00089105 EC04                       	smpsPSGAlterVol     $04
00089107 E701                       	dc.b	smpsNoAttack, $01
00089109 EC07                       	smpsPSGAlterVol     $07
0008910B 8003                       	dc.b	nRst, $03
0008910D ECF5                       	smpsPSGAlterVol     $F5
0008910F 9206                       	dc.b	nF1, $06
00089111 EC04                       	smpsPSGAlterVol     $04
00089113 E701                       	dc.b	smpsNoAttack, $01
00089115 EC07                       	smpsPSGAlterVol     $07
00089117 8006                       	dc.b	nRst, $06
00089119 E100                       	smpsAlterNote       $00
0008911B 01                         	dc.b	$01
0008911C E104                       	smpsAlterNote       $04
0008911E 01                         	dc.b	$01
0008911F E100                       	smpsAlterNote       $00
00089121 01                         	dc.b	$01
00089122 E1FA                       	smpsAlterNote       $FA
00089124 01                         	dc.b	$01
00089125 E1FD                       	smpsAlterNote       $FD
00089127 ECF5                       	smpsPSGAlterVol     $F5
00089129 9206                       	dc.b	nF1, $06
0008912B EC04                       	smpsPSGAlterVol     $04
0008912D E701                       	dc.b	smpsNoAttack, $01
0008912F EC07                       	smpsPSGAlterVol     $07
00089131 8003                       	dc.b	nRst, $03
00089133 ECF5                       	smpsPSGAlterVol     $F5
00089135 9107                       	dc.b	nE1, $07
00089137 EC0B                       	smpsPSGAlterVol     $0B
00089139 8006                       	dc.b	nRst, $06
0008913B E100                       	smpsAlterNote       $00
0008913D 01                         	dc.b	$01
0008913E E103                       	smpsAlterNote       $03
00089140 0101                       	dc.b	$01, $01
00089142 E1FD                       	smpsAlterNote       $FD
00089144 01                         	dc.b	$01
00089145 ECF5                       	smpsPSGAlterVol     $F5
00089147 9207                       	dc.b	nF1, $07
00089149 EC0B                       	smpsPSGAlterVol     $0B
0008914B 8004                       	dc.b	nRst, $04
0008914D ECF5                       	smpsPSGAlterVol     $F5
0008914F 9206                       	dc.b	nF1, $06
00089151 EC04                       	smpsPSGAlterVol     $04
00089153 E701                       	dc.b	smpsNoAttack, $01
00089155 EC07                       	smpsPSGAlterVol     $07
00089157 8006                       	dc.b	nRst, $06
00089159 E103                       	smpsAlterNote       $03
0008915B 01                         	dc.b	$01
0008915C E104                       	smpsAlterNote       $04
0008915E 01                         	dc.b	$01
0008915F E100                       	smpsAlterNote       $00
00089161 01                         	dc.b	$01
00089162 E1FB                       	smpsAlterNote       $FB
00089164 01                         	dc.b	$01
00089165 E1FD                       	smpsAlterNote       $FD
00089167 ECF5                       	smpsPSGAlterVol     $F5
00089169 9406                       	dc.b	nG1, $06
0008916B EC04                       	smpsPSGAlterVol     $04
0008916D E701                       	dc.b	smpsNoAttack, $01
0008916F EC07                       	smpsPSGAlterVol     $07
00089171 8003                       	dc.b	nRst, $03
00089173 ECF5                       	smpsPSGAlterVol     $F5
00089175 9406                       	dc.b	nG1, $06
00089177 EC04                       	smpsPSGAlterVol     $04
00089179 E701                       	dc.b	smpsNoAttack, $01
0008917B EC07                       	smpsPSGAlterVol     $07
0008917D 8006                       	dc.b	nRst, $06
0008917F E100                       	smpsAlterNote       $00
00089181 01                         	dc.b	$01
00089182 E104                       	smpsAlterNote       $04
00089184 01                         	dc.b	$01
00089185 E100                       	smpsAlterNote       $00
00089187 01                         	dc.b	$01
00089188 E1FD                       	smpsAlterNote       $FD
0008918A 01                         	dc.b	$01
0008918B ECF5                       	smpsPSGAlterVol     $F5
0008918D 9206                       	dc.b	nF1, $06
0008918F EC04                       	smpsPSGAlterVol     $04
00089191 E701                       	dc.b	smpsNoAttack, $01
00089193 EC07                       	smpsPSGAlterVol     $07
00089195 8003                       	dc.b	nRst, $03
00089197 ECF5                       	smpsPSGAlterVol     $F5
00089199 9207                       	dc.b	nF1, $07
0008919B EC0B                       	smpsPSGAlterVol     $0B
0008919D 8007                       	dc.b	nRst, $07
0008919F E103                       	smpsAlterNote       $03
000891A1 0101                       	dc.b	$01, $01
000891A3 E1FD                       	smpsAlterNote       $FD
000891A5 01                         	dc.b	$01
000891A6 E1FA                       	smpsAlterNote       $FA
000891A8 01                         	dc.b	$01
000891A9 E1FD                       	smpsAlterNote       $FD
000891AB ECF5                       	smpsPSGAlterVol     $F5
000891AD 9206                       	dc.b	nF1, $06
000891AF EC0B                       	smpsPSGAlterVol     $0B
000891B1 8004                       	dc.b	nRst, $04
000891B3 ECF5                       	smpsPSGAlterVol     $F5
000891B5 9206                       	dc.b	nF1, $06
000891B7 EC04                       	smpsPSGAlterVol     $04
000891B9 E701                       	dc.b	smpsNoAttack, $01
000891BB EC07                       	smpsPSGAlterVol     $07
000891BD 8006                       	dc.b	nRst, $06
000891BF E100                       	smpsAlterNote       $00
000891C1 01                         	dc.b	$01
000891C2 E104                       	smpsAlterNote       $04
000891C4 01                         	dc.b	$01
000891C5 E100                       	smpsAlterNote       $00
000891C7 01                         	dc.b	$01
000891C8 E1FA                       	smpsAlterNote       $FA
000891CA 01                         	dc.b	$01
000891CB E1FD                       	smpsAlterNote       $FD
000891CD ECF5                       	smpsPSGAlterVol     $F5
000891CF 9206                       	dc.b	nF1, $06
000891D1 EC04                       	smpsPSGAlterVol     $04
000891D3 E701                       	dc.b	smpsNoAttack, $01
000891D5 EC07                       	smpsPSGAlterVol     $07
000891D7 8003                       	dc.b	nRst, $03
000891D9 ECF5                       	smpsPSGAlterVol     $F5
000891DB 9207                       	dc.b	nF1, $07
000891DD EC0B                       	smpsPSGAlterVol     $0B
000891DF 8006                       	dc.b	nRst, $06
000891E1 E100                       	smpsAlterNote       $00
000891E3 01                         	dc.b	$01
000891E4 E103                       	smpsAlterNote       $03
000891E6 0101                       	dc.b	$01, $01
000891E8 E1FD                       	smpsAlterNote       $FD
000891EA 01                         	dc.b	$01
000891EB ECF5                       	smpsPSGAlterVol     $F5
000891ED 9207                       	dc.b	nF1, $07
000891EF EC0B                       	smpsPSGAlterVol     $0B
000891F1 8004                       	dc.b	nRst, $04
000891F3 ECF5                       	smpsPSGAlterVol     $F5
000891F5 9206                       	dc.b	nF1, $06
000891F7 EC0B                       	smpsPSGAlterVol     $0B
000891F9 8007                       	dc.b	nRst, $07
000891FB E103                       	smpsAlterNote       $03
000891FD 0101                       	dc.b	$01, $01
000891FF E100                       	smpsAlterNote       $00
00089201 01                         	dc.b	$01
00089202 E1FA                       	smpsAlterNote       $FA
00089204 01                         	dc.b	$01
00089205 E1FD                       	smpsAlterNote       $FD
00089207 ECF5                       	smpsPSGAlterVol     $F5
00089209 9206                       	dc.b	nF1, $06
0008920B EC04                       	smpsPSGAlterVol     $04
0008920D E701                       	dc.b	smpsNoAttack, $01
0008920F EC07                       	smpsPSGAlterVol     $07
00089211 8003                       	dc.b	nRst, $03
00089213 ECF5                       	smpsPSGAlterVol     $F5
00089215 9206                       	dc.b	nF1, $06
00089217 EC04                       	smpsPSGAlterVol     $04
00089219 E701                       	dc.b	smpsNoAttack, $01
0008921B EC07                       	smpsPSGAlterVol     $07
0008921D 8006                       	dc.b	nRst, $06
0008921F E100                       	smpsAlterNote       $00
00089221 01                         	dc.b	$01
00089222 E104                       	smpsAlterNote       $04
00089224 01                         	dc.b	$01
00089225 E100                       	smpsAlterNote       $00
00089227 01                         	dc.b	$01
00089228 E1FD                       	smpsAlterNote       $FD
0008922A 01                         	dc.b	$01
0008922B ECF5                       	smpsPSGAlterVol     $F5
0008922D 9206                       	dc.b	nF1, $06
0008922F EC04                       	smpsPSGAlterVol     $04
00089231 E701                       	dc.b	smpsNoAttack, $01
00089233 EC07                       	smpsPSGAlterVol     $07
00089235 8003                       	dc.b	nRst, $03
00089237 ECF5                       	smpsPSGAlterVol     $F5
00089239 9207                       	dc.b	nF1, $07
0008923B EC0B                       	smpsPSGAlterVol     $0B
0008923D 8007                       	dc.b	nRst, $07
0008923F E104                       	smpsAlterNote       $04
00089241 0101                       	dc.b	$01, $01
00089243 E1FB                       	smpsAlterNote       $FB
00089245 01                         	dc.b	$01
00089246 E1F6                       	smpsAlterNote       $F6
00089248 0101                       	dc.b	$01, $01
0008924A E1FF                       	smpsAlterNote       $FF
0008924C 01                         	dc.b	$01
0008924D E105                       	smpsAlterNote       $05
0008924F 01                         	dc.b	$01
00089250 E104                       	smpsAlterNote       $04
00089252 01                         	dc.b	$01
00089253 E1FB                       	smpsAlterNote       $FB
00089255 01                         	dc.b	$01
00089256 E1F5                       	smpsAlterNote       $F5
00089258 01                         	dc.b	$01
00089259 E1FC                       	smpsAlterNote       $FC
0008925B ECF5                       	smpsPSGAlterVol     $F5
0008925D 8B0E                       	dc.b	nBb0, $0E
0008925F E102                       	smpsAlterNote       $02
00089261 EC0B                       	smpsPSGAlterVol     $0B
00089263 8001                       	dc.b	nRst, $01
00089265 E101                       	smpsAlterNote       $01
00089267 01                         	dc.b	$01
00089268 E1FC                       	smpsAlterNote       $FC
0008926A 01                         	dc.b	$01
0008926B E1F9                       	smpsAlterNote       $F9
0008926D 0101                       	dc.b	$01, $01
0008926F E1FF                       	smpsAlterNote       $FF
00089271 01                         	dc.b	$01
00089272 E102                       	smpsAlterNote       $02
00089274 01                         	dc.b	$01
00089275 E1FF                       	smpsAlterNote       $FF
00089277 01                         	dc.b	$01
00089278 E1FC                       	smpsAlterNote       $FC
0008927A 01                         	dc.b	$01
0008927B E1F8                       	smpsAlterNote       $F8
0008927D 01                         	dc.b	$01
0008927E E1FC                       	smpsAlterNote       $FC
00089280 01                         	dc.b	$01
00089281 E101                       	smpsAlterNote       $01
00089283 01                         	dc.b	$01
00089284 E102                       	smpsAlterNote       $02
00089286 01                         	dc.b	$01
00089287 E1FF                       	smpsAlterNote       $FF
00089289 01                         	dc.b	$01
0008928A E1FB                       	smpsAlterNote       $FB
0008928C ECF5                       	smpsPSGAlterVol     $F5
0008928E 8D0D                       	dc.b	nC1, $0D
00089290 E101                       	smpsAlterNote       $01
00089292 EC0B                       	smpsPSGAlterVol     $0B
00089294 8001                       	dc.b	nRst, $01
00089296 E102                       	smpsAlterNote       $02
00089298 01                         	dc.b	$01
00089299 E1FF                       	smpsAlterNote       $FF
0008929B 01                         	dc.b	$01
0008929C E1F9                       	smpsAlterNote       $F9
0008929E 0101                       	dc.b	$01, $01
000892A0 E1FC                       	smpsAlterNote       $FC
000892A2 01                         	dc.b	$01
000892A3 E101                       	smpsAlterNote       $01
000892A5 0101                       	dc.b	$01, $01
000892A7 E1FC                       	smpsAlterNote       $FC
000892A9 01                         	dc.b	$01
000892AA E1F9                       	smpsAlterNote       $F9
000892AC 0101                       	dc.b	$01, $01
000892AE E1FF                       	smpsAlterNote       $FF
000892B0 01                         	dc.b	$01
000892B1 E102                       	smpsAlterNote       $02
000892B3 01                         	dc.b	$01
000892B4 E101                       	smpsAlterNote       $01
000892B6 01                         	dc.b	$01
000892B7 E1FC                       	smpsAlterNote       $FC
000892B9 ECF5                       	smpsPSGAlterVol     $F5
000892BB 8F0D                       	dc.b	nD1, $0D
000892BD E1FF                       	smpsAlterNote       $FF
000892BF EC04                       	smpsPSGAlterVol     $04
000892C1 E701                       	dc.b	smpsNoAttack, $01
000892C3 EC07                       	smpsPSGAlterVol     $07
000892C5 E103                       	smpsAlterNote       $03
000892C7 8001                       	dc.b	nRst, $01
000892C9 E102                       	smpsAlterNote       $02
000892CB 01                         	dc.b	$01
000892CC E1FD                       	smpsAlterNote       $FD
000892CE 01                         	dc.b	$01
000892CF E1F9                       	smpsAlterNote       $F9
000892D1 01                         	dc.b	$01
000892D2 E1FD                       	smpsAlterNote       $FD
000892D4 01                         	dc.b	$01
000892D5 E100                       	smpsAlterNote       $00
000892D7 01                         	dc.b	$01
000892D8 E103                       	smpsAlterNote       $03
000892DA 01                         	dc.b	$01
000892DB E100                       	smpsAlterNote       $00
000892DD 01                         	dc.b	$01
000892DE E1FA                       	smpsAlterNote       $FA
000892E0 01                         	dc.b	$01
000892E1 E1F9                       	smpsAlterNote       $F9
000892E3 01                         	dc.b	$01
000892E4 E1FD                       	smpsAlterNote       $FD
000892E6 01                         	dc.b	$01
000892E7 E102                       	smpsAlterNote       $02
000892E9 0101                       	dc.b	$01, $01
000892EB E100                       	smpsAlterNote       $00
000892ED 01                         	dc.b	$01
000892EE E1FD                       	smpsAlterNote       $FD
000892F0 ECF5                       	smpsPSGAlterVol     $F5
000892F2 910D                       	dc.b	nE1, $0D
000892F4 E103                       	smpsAlterNote       $03
000892F6 EC0B                       	smpsPSGAlterVol     $0B
000892F8 8001 01                    	dc.b	nRst, $01, $01
000892FB E100                       	smpsAlterNote       $00
000892FD 01                         	dc.b	$01
000892FE E1FA                       	smpsAlterNote       $FA
00089300 0101                       	dc.b	$01, $01
00089302 E100                       	smpsAlterNote       $00
00089304 01                         	dc.b	$01
00089305 E103                       	smpsAlterNote       $03
00089307 01                         	dc.b	$01
00089308 E1FD                       	smpsAlterNote       $FD
0008930A ECF5                       	smpsPSGAlterVol     $F5
0008930C 9206                       	dc.b	nF1, $06
0008930E EC04                       	smpsPSGAlterVol     $04
00089310 E701                       	dc.b	smpsNoAttack, $01
00089312 EC07                       	smpsPSGAlterVol     $07
00089314 8003                       	dc.b	nRst, $03
00089316 ECF5                       	smpsPSGAlterVol     $F5
00089318 9207                       	dc.b	nF1, $07
0008931A EC0B                       	smpsPSGAlterVol     $0B
0008931C 8006                       	dc.b	nRst, $06
0008931E E100                       	smpsAlterNote       $00
00089320 01                         	dc.b	$01
00089321 E103                       	smpsAlterNote       $03
00089323 0101                       	dc.b	$01, $01
00089325 E1FD                       	smpsAlterNote       $FD
00089327 01                         	dc.b	$01
00089328 ECF5                       	smpsPSGAlterVol     $F5
0008932A 9407                       	dc.b	nG1, $07
0008932C EC0B                       	smpsPSGAlterVol     $0B
0008932E 8004                       	dc.b	nRst, $04
00089330 ECF5                       	smpsPSGAlterVol     $F5
00089332 9406                       	dc.b	nG1, $06
00089334 EC04                       	smpsPSGAlterVol     $04
00089336 E701                       	dc.b	smpsNoAttack, $01
00089338 EC07                       	smpsPSGAlterVol     $07
0008933A 8006                       	dc.b	nRst, $06
0008933C E103                       	smpsAlterNote       $03
0008933E 01                         	dc.b	$01
0008933F E104                       	smpsAlterNote       $04
00089341 01                         	dc.b	$01
00089342 E100                       	smpsAlterNote       $00
00089344 01                         	dc.b	$01
00089345 E1F9                       	smpsAlterNote       $F9
00089347 01                         	dc.b	$01
00089348 E1FD                       	smpsAlterNote       $FD
0008934A ECF5                       	smpsPSGAlterVol     $F5
0008934C 9206                       	dc.b	nF1, $06
0008934E EC04                       	smpsPSGAlterVol     $04
00089350 E701                       	dc.b	smpsNoAttack, $01
00089352 EC07                       	smpsPSGAlterVol     $07
00089354 8003                       	dc.b	nRst, $03
00089356 ECF5                       	smpsPSGAlterVol     $F5
00089358 9206                       	dc.b	nF1, $06
0008935A EC04                       	smpsPSGAlterVol     $04
0008935C E701                       	dc.b	smpsNoAttack, $01
0008935E EC07                       	smpsPSGAlterVol     $07
00089360 8006                       	dc.b	nRst, $06
00089362 E100                       	smpsAlterNote       $00
00089364 01                         	dc.b	$01
00089365 E104                       	smpsAlterNote       $04
00089367 01                         	dc.b	$01
00089368 E103                       	smpsAlterNote       $03
0008936A 01                         	dc.b	$01
0008936B E1FD                       	smpsAlterNote       $FD
0008936D 01                         	dc.b	$01
0008936E ECF5                       	smpsPSGAlterVol     $F5
00089370 9407                       	dc.b	nG1, $07
00089372 EC0B                       	smpsPSGAlterVol     $0B
00089374 8004                       	dc.b	nRst, $04
00089376 ECF5                       	smpsPSGAlterVol     $F5
00089378 9406                       	dc.b	nG1, $06
0008937A EC0B                       	smpsPSGAlterVol     $0B
0008937C 8007                       	dc.b	nRst, $07
0008937E E103                       	smpsAlterNote       $03
00089380 0101                       	dc.b	$01, $01
00089382 E100                       	smpsAlterNote       $00
00089384 01                         	dc.b	$01
00089385 E1F9                       	smpsAlterNote       $F9
00089387 01                         	dc.b	$01
00089388 E1FD                       	smpsAlterNote       $FD
0008938A ECF5                       	smpsPSGAlterVol     $F5
0008938C 9206                       	dc.b	nF1, $06
0008938E EC04                       	smpsPSGAlterVol     $04
00089390 E701                       	dc.b	smpsNoAttack, $01
00089392 EC07                       	smpsPSGAlterVol     $07
00089394 8003                       	dc.b	nRst, $03
00089396 ECF5                       	smpsPSGAlterVol     $F5
00089398 9206                       	dc.b	nF1, $06
0008939A EC04                       	smpsPSGAlterVol     $04
0008939C E701                       	dc.b	smpsNoAttack, $01
0008939E EC07                       	smpsPSGAlterVol     $07
000893A0 8006                       	dc.b	nRst, $06
000893A2 E100                       	smpsAlterNote       $00
000893A4 01                         	dc.b	$01
000893A5 E104                       	smpsAlterNote       $04
000893A7 01                         	dc.b	$01
000893A8 E100                       	smpsAlterNote       $00
000893AA 01                         	dc.b	$01
000893AB E1FB                       	smpsAlterNote       $FB
000893AD 01                         	dc.b	$01
000893AE E1FD                       	smpsAlterNote       $FD
000893B0 ECF5                       	smpsPSGAlterVol     $F5
000893B2 9406                       	dc.b	nG1, $06
000893B4 EC04                       	smpsPSGAlterVol     $04
000893B6 E701                       	dc.b	smpsNoAttack, $01
000893B8 EC07                       	smpsPSGAlterVol     $07
000893BA 8003                       	dc.b	nRst, $03
000893BC ECF5                       	smpsPSGAlterVol     $F5
000893BE 9407                       	dc.b	nG1, $07
000893C0 EC0B                       	smpsPSGAlterVol     $0B
000893C2 8006                       	dc.b	nRst, $06
000893C4 E100                       	smpsAlterNote       $00
000893C6 01                         	dc.b	$01
000893C7 E103                       	smpsAlterNote       $03
000893C9 0101                       	dc.b	$01, $01
000893CB E1FD                       	smpsAlterNote       $FD
000893CD 01                         	dc.b	$01
000893CE ECF5                       	smpsPSGAlterVol     $F5
000893D0 9207                       	dc.b	nF1, $07
000893D2 EC0B                       	smpsPSGAlterVol     $0B
000893D4 8004                       	dc.b	nRst, $04
000893D6 ECF5                       	smpsPSGAlterVol     $F5
000893D8 9206                       	dc.b	nF1, $06
000893DA EC04                       	smpsPSGAlterVol     $04
000893DC E701                       	dc.b	smpsNoAttack, $01
000893DE ECFC                       	smpsPSGAlterVol     $FC
000893E0 E1FC                       	smpsAlterNote       $FC
000893E2 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000893E6 EC04                       	smpsPSGAlterVol     $04
000893E8 E701                       	dc.b	smpsNoAttack, $01
000893EA ECFC                       	smpsPSGAlterVol     $FC
000893EC 9003                       	dc.b	nEb1, $03
000893EE E1FD                       	smpsAlterNote       $FD
000893F0 9403                       	dc.b	nG1, $03
000893F2 EC04                       	smpsPSGAlterVol     $04
000893F4 E701                       	dc.b	smpsNoAttack, $01
000893F6 E1FE                       	smpsAlterNote       $FE
000893F8 ECFC                       	smpsPSGAlterVol     $FC
000893FA 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000893FE EC04                       	smpsPSGAlterVol     $04
00089400 E701                       	dc.b	smpsNoAttack, $01
00089402 EC07                       	smpsPSGAlterVol     $07
00089404 8009                       	dc.b	nRst, $09
00089406 E100                       	smpsAlterNote       $00
00089408 01                         	dc.b	$01
00089409 F6F5 19                    	smpsJump            music84_Jump07
0008940C                            
0008940C                            ; PSG2 Data
0008940C                            music84_PSG2:
0008940C E1FC                       	smpsAlterNote       $FC
0008940E EC04                       	smpsPSGAlterVol     $04
00089410 8F03                       	dc.b	nD1, $03
00089412 E1FD                       	smpsAlterNote       $FD
00089414 9203                       	dc.b	nF1, $03
00089416 EC04                       	smpsPSGAlterVol     $04
00089418 E701                       	dc.b	smpsNoAttack, $01
0008941A E1FE                       	smpsAlterNote       $FE
0008941C ECFC                       	smpsPSGAlterVol     $FC
0008941E 9603                       	dc.b	nA1, $03
00089420 E1FD                       	smpsAlterNote       $FD
00089422 9103                       	dc.b	nE1, $03
00089424 EC04                       	smpsPSGAlterVol     $04
00089426 E701                       	dc.b	smpsNoAttack, $01
00089428 ECFC                       	smpsPSGAlterVol     $FC
0008942A 9403                       	dc.b	nG1, $03
0008942C E1FE                       	smpsAlterNote       $FE
0008942E 9703                       	dc.b	nBb1, $03
00089430 EC04                       	smpsPSGAlterVol     $04
00089432 E701                       	dc.b	smpsNoAttack, $01
00089434 E1FF                       	smpsAlterNote       $FF
00089436 ECFC                       	smpsPSGAlterVol     $FC
00089438 9B02                       	dc.b	nD2, $02
0008943A EC04                       	smpsPSGAlterVol     $04
0008943C E701                       	dc.b	smpsNoAttack, $01
0008943E ECFC                       	smpsPSGAlterVol     $FC
00089440 E1FE                       	smpsAlterNote       $FE
00089442 9A03                       	dc.b	nCs2, $03
00089444 EC0B                       	smpsPSGAlterVol     $0B
00089446 800A                       	dc.b	nRst, $0A
00089448 E102                       	smpsAlterNote       $02
0008944A 01                         	dc.b	$01
0008944B E10A                       	smpsAlterNote       $0A
0008944D 01                         	dc.b	$01
0008944E E102                       	smpsAlterNote       $02
00089450 01                         	dc.b	$01
00089451 E1FC                       	smpsAlterNote       $FC
00089453 01                         	dc.b	$01
00089454 E10A                       	smpsAlterNote       $0A
00089456 01                         	dc.b	$01
00089457 E1FC                       	smpsAlterNote       $FC
00089459 01                         	dc.b	$01
0008945A E108                       	smpsAlterNote       $08
0008945C 01                         	dc.b	$01
0008945D E10A                       	smpsAlterNote       $0A
0008945F 01                         	dc.b	$01
00089460 E102                       	smpsAlterNote       $02
00089462 01                         	dc.b	$01
00089463 E1F7                       	smpsAlterNote       $F7
00089465 0101                       	dc.b	$01, $01
00089467 E102                       	smpsAlterNote       $02
00089469 01                         	dc.b	$01
0008946A E108                       	smpsAlterNote       $08
0008946C 0101                       	dc.b	$01, $01
0008946E E1FC                       	smpsAlterNote       $FC
00089470 01                         	dc.b	$01
00089471 E10A                       	smpsAlterNote       $0A
00089473 01                         	dc.b	$01
00089474 E1F7                       	smpsAlterNote       $F7
00089476 01                         	dc.b	$01
00089477 E102                       	smpsAlterNote       $02
00089479 01                         	dc.b	$01
0008947A E10A                       	smpsAlterNote       $0A
0008947C 01                         	dc.b	$01
0008947D E102                       	smpsAlterNote       $02
0008947F 01                         	dc.b	$01
00089480 E1FC                       	smpsAlterNote       $FC
00089482 01                         	dc.b	$01
00089483                            
00089483                            music84_Jump06:
00089483 E10A                       	smpsAlterNote       $0A
00089485 8001                       	dc.b	nRst, $01
00089487 E1FC                       	smpsAlterNote       $FC
00089489 01                         	dc.b	$01
0008948A E108                       	smpsAlterNote       $08
0008948C 01                         	dc.b	$01
0008948D E10A                       	smpsAlterNote       $0A
0008948F 01                         	dc.b	$01
00089490 E1FC                       	smpsAlterNote       $FC
00089492 ECF5                       	smpsPSGAlterVol     $F5
00089494 8F06                       	dc.b	nD1, $06
00089496 EC04                       	smpsPSGAlterVol     $04
00089498 E701                       	dc.b	smpsNoAttack, $01
0008949A EC07                       	smpsPSGAlterVol     $07
0008949C 8003                       	dc.b	nRst, $03
0008949E ECF5                       	smpsPSGAlterVol     $F5
000894A0 8F06                       	dc.b	nD1, $06
000894A2 EC04                       	smpsPSGAlterVol     $04
000894A4 E701                       	dc.b	smpsNoAttack, $01
000894A6 EC07                       	smpsPSGAlterVol     $07
000894A8 8006                       	dc.b	nRst, $06
000894AA E1FF                       	smpsAlterNote       $FF
000894AC 01                         	dc.b	$01
000894AD E102                       	smpsAlterNote       $02
000894AF 01                         	dc.b	$01
000894B0 E1FF                       	smpsAlterNote       $FF
000894B2 01                         	dc.b	$01
000894B3 E1F9                       	smpsAlterNote       $F9
000894B5 01                         	dc.b	$01
000894B6 E1FC                       	smpsAlterNote       $FC
000894B8 ECF5                       	smpsPSGAlterVol     $F5
000894BA 9006                       	dc.b	nEb1, $06
000894BC EC04                       	smpsPSGAlterVol     $04
000894BE E701                       	dc.b	smpsNoAttack, $01
000894C0 EC07                       	smpsPSGAlterVol     $07
000894C2 8003                       	dc.b	nRst, $03
000894C4 ECF5                       	smpsPSGAlterVol     $F5
000894C6 9007                       	dc.b	nEb1, $07
000894C8 EC0B                       	smpsPSGAlterVol     $0B
000894CA 8006                       	dc.b	nRst, $06
000894CC E1FF                       	smpsAlterNote       $FF
000894CE 01                         	dc.b	$01
000894CF E103                       	smpsAlterNote       $03
000894D1 0101                       	dc.b	$01, $01
000894D3 E1FC                       	smpsAlterNote       $FC
000894D5 01                         	dc.b	$01
000894D6 ECF5                       	smpsPSGAlterVol     $F5
000894D8 8F07                       	dc.b	nD1, $07
000894DA EC0B                       	smpsPSGAlterVol     $0B
000894DC 8004                       	dc.b	nRst, $04
000894DE ECF5                       	smpsPSGAlterVol     $F5
000894E0 8F06                       	dc.b	nD1, $06
000894E2 EC04                       	smpsPSGAlterVol     $04
000894E4 E701                       	dc.b	smpsNoAttack, $01
000894E6 EC07                       	smpsPSGAlterVol     $07
000894E8 8006                       	dc.b	nRst, $06
000894EA E102                       	smpsAlterNote       $02
000894EC 01                         	dc.b	$01
000894ED E103                       	smpsAlterNote       $03
000894EF 01                         	dc.b	$01
000894F0 E1FF                       	smpsAlterNote       $FF
000894F2 01                         	dc.b	$01
000894F3 E1F9                       	smpsAlterNote       $F9
000894F5 01                         	dc.b	$01
000894F6 E1FC                       	smpsAlterNote       $FC
000894F8 ECF5                       	smpsPSGAlterVol     $F5
000894FA 8F06                       	dc.b	nD1, $06
000894FC EC04                       	smpsPSGAlterVol     $04
000894FE E701                       	dc.b	smpsNoAttack, $01
00089500 EC07                       	smpsPSGAlterVol     $07
00089502 8003                       	dc.b	nRst, $03
00089504 ECF5                       	smpsPSGAlterVol     $F5
00089506 8F06                       	dc.b	nD1, $06
00089508 EC04                       	smpsPSGAlterVol     $04
0008950A E701                       	dc.b	smpsNoAttack, $01
0008950C EC07                       	smpsPSGAlterVol     $07
0008950E 8006                       	dc.b	nRst, $06
00089510 E1FF                       	smpsAlterNote       $FF
00089512 01                         	dc.b	$01
00089513 E103                       	smpsAlterNote       $03
00089515 01                         	dc.b	$01
00089516 E1FF                       	smpsAlterNote       $FF
00089518 01                         	dc.b	$01
00089519 E1FC                       	smpsAlterNote       $FC
0008951B 01                         	dc.b	$01
0008951C ECF5                       	smpsPSGAlterVol     $F5
0008951E 8F06                       	dc.b	nD1, $06
00089520 EC04                       	smpsPSGAlterVol     $04
00089522 E701                       	dc.b	smpsNoAttack, $01
00089524 EC07                       	smpsPSGAlterVol     $07
00089526 8003                       	dc.b	nRst, $03
00089528 ECF5                       	smpsPSGAlterVol     $F5
0008952A 8F07                       	dc.b	nD1, $07
0008952C EC0B                       	smpsPSGAlterVol     $0B
0008952E 8007                       	dc.b	nRst, $07
00089530 E101                       	smpsAlterNote       $01
00089532 0101                       	dc.b	$01, $01
00089534 E1FC                       	smpsAlterNote       $FC
00089536 01                         	dc.b	$01
00089537 E1F9                       	smpsAlterNote       $F9
00089539 01                         	dc.b	$01
0008953A E1FC                       	smpsAlterNote       $FC
0008953C ECF5                       	smpsPSGAlterVol     $F5
0008953E 9006                       	dc.b	nEb1, $06
00089540 EC0B                       	smpsPSGAlterVol     $0B
00089542 8004                       	dc.b	nRst, $04
00089544 ECF5                       	smpsPSGAlterVol     $F5
00089546 9006                       	dc.b	nEb1, $06
00089548 EC04                       	smpsPSGAlterVol     $04
0008954A E701                       	dc.b	smpsNoAttack, $01
0008954C EC07                       	smpsPSGAlterVol     $07
0008954E 8006                       	dc.b	nRst, $06
00089550 E100                       	smpsAlterNote       $00
00089552 01                         	dc.b	$01
00089553 E102                       	smpsAlterNote       $02
00089555 01                         	dc.b	$01
00089556 E100                       	smpsAlterNote       $00
00089558 01                         	dc.b	$01
00089559 E1FD                       	smpsAlterNote       $FD
0008955B 01                         	dc.b	$01
0008955C E1FF                       	smpsAlterNote       $FF
0008955E ECF5                       	smpsPSGAlterVol     $F5
00089560 9B06                       	dc.b	nD2, $06
00089562 EC04                       	smpsPSGAlterVol     $04
00089564 E701                       	dc.b	smpsNoAttack, $01
00089566 EC07                       	smpsPSGAlterVol     $07
00089568 8003                       	dc.b	nRst, $03
0008956A ECF5                       	smpsPSGAlterVol     $F5
0008956C 9B07                       	dc.b	nD2, $07
0008956E EC0B                       	smpsPSGAlterVol     $0B
00089570 8006                       	dc.b	nRst, $06
00089572 E102                       	smpsAlterNote       $02
00089574 01                         	dc.b	$01
00089575 E106                       	smpsAlterNote       $06
00089577 01                         	dc.b	$01
00089578 E105                       	smpsAlterNote       $05
0008957A 01                         	dc.b	$01
0008957B E1FF                       	smpsAlterNote       $FF
0008957D 01                         	dc.b	$01
0008957E ECF5                       	smpsPSGAlterVol     $F5
00089580 9B07                       	dc.b	nD2, $07
00089582 EC0B                       	smpsPSGAlterVol     $0B
00089584 8004                       	dc.b	nRst, $04
00089586 ECF5                       	smpsPSGAlterVol     $F5
00089588 9B06                       	dc.b	nD2, $06
0008958A EC0B                       	smpsPSGAlterVol     $0B
0008958C 8007                       	dc.b	nRst, $07
0008958E E105                       	smpsAlterNote       $05
00089590 0101                       	dc.b	$01, $01
00089592 E102                       	smpsAlterNote       $02
00089594 01                         	dc.b	$01
00089595 E1FC                       	smpsAlterNote       $FC
00089597 01                         	dc.b	$01
00089598 E1FF                       	smpsAlterNote       $FF
0008959A ECF5                       	smpsPSGAlterVol     $F5
0008959C 9B06                       	dc.b	nD2, $06
0008959E EC04                       	smpsPSGAlterVol     $04
000895A0 E701                       	dc.b	smpsNoAttack, $01
000895A2 EC07                       	smpsPSGAlterVol     $07
000895A4 8003                       	dc.b	nRst, $03
000895A6 ECF5                       	smpsPSGAlterVol     $F5
000895A8 9B06                       	dc.b	nD2, $06
000895AA EC04                       	smpsPSGAlterVol     $04
000895AC E701                       	dc.b	smpsNoAttack, $01
000895AE EC07                       	smpsPSGAlterVol     $07
000895B0 8006                       	dc.b	nRst, $06
000895B2 E102                       	smpsAlterNote       $02
000895B4 01                         	dc.b	$01
000895B5 E106                       	smpsAlterNote       $06
000895B7 01                         	dc.b	$01
000895B8 E102                       	smpsAlterNote       $02
000895BA 01                         	dc.b	$01
000895BB E1FF                       	smpsAlterNote       $FF
000895BD 01                         	dc.b	$01
000895BE ECF5                       	smpsPSGAlterVol     $F5
000895C0 9B06                       	dc.b	nD2, $06
000895C2 EC04                       	smpsPSGAlterVol     $04
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 EC07                       	smpsPSGAlterVol     $07
000895C8 8003                       	dc.b	nRst, $03
000895CA ECF5                       	smpsPSGAlterVol     $F5
000895CC 9B07                       	dc.b	nD2, $07
000895CE EC0B                       	smpsPSGAlterVol     $0B
000895D0 8007                       	dc.b	nRst, $07
000895D2 E105                       	smpsAlterNote       $05
000895D4 0101                       	dc.b	$01, $01
000895D6 E1FF                       	smpsAlterNote       $FF
000895D8 01                         	dc.b	$01
000895D9 E1FC                       	smpsAlterNote       $FC
000895DB 01                         	dc.b	$01
000895DC E1FF                       	smpsAlterNote       $FF
000895DE ECF5                       	smpsPSGAlterVol     $F5
000895E0 9B06                       	dc.b	nD2, $06
000895E2 EC0B                       	smpsPSGAlterVol     $0B
000895E4 8004                       	dc.b	nRst, $04
000895E6 ECF5                       	smpsPSGAlterVol     $F5
000895E8 9B06                       	dc.b	nD2, $06
000895EA EC04                       	smpsPSGAlterVol     $04
000895EC E701                       	dc.b	smpsNoAttack, $01
000895EE EC07                       	smpsPSGAlterVol     $07
000895F0 8006                       	dc.b	nRst, $06
000895F2 E105                       	smpsAlterNote       $05
000895F4 01                         	dc.b	$01
000895F5 E106                       	smpsAlterNote       $06
000895F7 01                         	dc.b	$01
000895F8 E102                       	smpsAlterNote       $02
000895FA 01                         	dc.b	$01
000895FB E1FC                       	smpsAlterNote       $FC
000895FD 01                         	dc.b	$01
000895FE E1FF                       	smpsAlterNote       $FF
00089600 ECF5                       	smpsPSGAlterVol     $F5
00089602 9B06                       	dc.b	nD2, $06
00089604 EC04                       	smpsPSGAlterVol     $04
00089606 E701                       	dc.b	smpsNoAttack, $01
00089608 EC07                       	smpsPSGAlterVol     $07
0008960A 8003                       	dc.b	nRst, $03
0008960C ECF5                       	smpsPSGAlterVol     $F5
0008960E 9B06                       	dc.b	nD2, $06
00089610 EC04                       	smpsPSGAlterVol     $04
00089612 E701                       	dc.b	smpsNoAttack, $01
00089614 EC07                       	smpsPSGAlterVol     $07
00089616 8006                       	dc.b	nRst, $06
00089618 E102                       	smpsAlterNote       $02
0008961A 01                         	dc.b	$01
0008961B E106                       	smpsAlterNote       $06
0008961D 01                         	dc.b	$01
0008961E E105                       	smpsAlterNote       $05
00089620 01                         	dc.b	$01
00089621 E1FF                       	smpsAlterNote       $FF
00089623 01                         	dc.b	$01
00089624 ECF5                       	smpsPSGAlterVol     $F5
00089626 9B07                       	dc.b	nD2, $07
00089628 EC0B                       	smpsPSGAlterVol     $0B
0008962A 8004                       	dc.b	nRst, $04
0008962C ECF5                       	smpsPSGAlterVol     $F5
0008962E 9B06                       	dc.b	nD2, $06
00089630 EC0B                       	smpsPSGAlterVol     $0B
00089632 8007                       	dc.b	nRst, $07
00089634 E105                       	smpsAlterNote       $05
00089636 0101                       	dc.b	$01, $01
00089638 E102                       	smpsAlterNote       $02
0008963A 01                         	dc.b	$01
0008963B E1FC                       	smpsAlterNote       $FC
0008963D 01                         	dc.b	$01
0008963E E1FF                       	smpsAlterNote       $FF
00089640 ECF5                       	smpsPSGAlterVol     $F5
00089642 9B06                       	dc.b	nD2, $06
00089644 EC04                       	smpsPSGAlterVol     $04
00089646 E701                       	dc.b	smpsNoAttack, $01
00089648 EC07                       	smpsPSGAlterVol     $07
0008964A 8003                       	dc.b	nRst, $03
0008964C ECF5                       	smpsPSGAlterVol     $F5
0008964E 9B06                       	dc.b	nD2, $06
00089650 EC04                       	smpsPSGAlterVol     $04
00089652 E701                       	dc.b	smpsNoAttack, $01
00089654 EC07                       	smpsPSGAlterVol     $07
00089656 8006                       	dc.b	nRst, $06
00089658 E102                       	smpsAlterNote       $02
0008965A 01                         	dc.b	$01
0008965B E106                       	smpsAlterNote       $06
0008965D 01                         	dc.b	$01
0008965E E102                       	smpsAlterNote       $02
00089660 01                         	dc.b	$01
00089661 E1FF                       	smpsAlterNote       $FF
00089663 01                         	dc.b	$01
00089664 ECF5                       	smpsPSGAlterVol     $F5
00089666 9B06                       	dc.b	nD2, $06
00089668 EC04                       	smpsPSGAlterVol     $04
0008966A E701                       	dc.b	smpsNoAttack, $01
0008966C EC07                       	smpsPSGAlterVol     $07
0008966E 8003                       	dc.b	nRst, $03
00089670 ECF5                       	smpsPSGAlterVol     $F5
00089672 9B07                       	dc.b	nD2, $07
00089674 E1FE                       	smpsAlterNote       $FE
00089676 9706                       	dc.b	nBb1, $06
00089678 EC04                       	smpsPSGAlterVol     $04
0008967A E701                       	dc.b	smpsNoAttack, $01
0008967C ECFC                       	smpsPSGAlterVol     $FC
0008967E 9703                       	dc.b	nBb1, $03
00089680 EC04                       	smpsPSGAlterVol     $04
00089682 E701                       	dc.b	smpsNoAttack, $01
00089684 ECFC                       	smpsPSGAlterVol     $FC
00089686 9702                       	dc.b	nBb1, $02
00089688 EC04                       	smpsPSGAlterVol     $04
0008968A E701                       	dc.b	smpsNoAttack, $01
0008968C ECFC                       	smpsPSGAlterVol     $FC
0008968E 9606                       	dc.b	nA1, $06
00089690 EC04                       	smpsPSGAlterVol     $04
00089692 E701                       	dc.b	smpsNoAttack, $01
00089694 EC07                       	smpsPSGAlterVol     $07
00089696 8006                       	dc.b	nRst, $06
00089698 E101                       	smpsAlterNote       $01
0008969A 01                         	dc.b	$01
0008969B E107                       	smpsAlterNote       $07
0008969D 01                         	dc.b	$01
0008969E E101                       	smpsAlterNote       $01
000896A0 01                         	dc.b	$01
000896A1 E1F8                       	smpsAlterNote       $F8
000896A3 01                         	dc.b	$01
000896A4 E1F7                       	smpsAlterNote       $F7
000896A6 01                         	dc.b	$01
000896A7 E1FC                       	smpsAlterNote       $FC
000896A9 01                         	dc.b	$01
000896AA E106                       	smpsAlterNote       $06
000896AC 01                         	dc.b	$01
000896AD E107                       	smpsAlterNote       $07
000896AF 01                         	dc.b	$01
000896B0 E101                       	smpsAlterNote       $01
000896B2 01                         	dc.b	$01
000896B3 E1F8                       	smpsAlterNote       $F8
000896B5 0101                       	dc.b	$01, $01
000896B7 E1FC                       	smpsAlterNote       $FC
000896B9 ECF5                       	smpsPSGAlterVol     $F5
000896BB 8F06                       	dc.b	nD1, $06
000896BD EC04                       	smpsPSGAlterVol     $04
000896BF E701                       	dc.b	smpsNoAttack, $01
000896C1 EC07                       	smpsPSGAlterVol     $07
000896C3 8003                       	dc.b	nRst, $03
000896C5 ECF5                       	smpsPSGAlterVol     $F5
000896C7 8F06                       	dc.b	nD1, $06
000896C9 EC04                       	smpsPSGAlterVol     $04
000896CB E701                       	dc.b	smpsNoAttack, $01
000896CD EC07                       	smpsPSGAlterVol     $07
000896CF 8006                       	dc.b	nRst, $06
000896D1 E1FF                       	smpsAlterNote       $FF
000896D3 01                         	dc.b	$01
000896D4 E102                       	smpsAlterNote       $02
000896D6 01                         	dc.b	$01
000896D7 E101                       	smpsAlterNote       $01
000896D9 01                         	dc.b	$01
000896DA E1FC                       	smpsAlterNote       $FC
000896DC 01                         	dc.b	$01
000896DD ECF5                       	smpsPSGAlterVol     $F5
000896DF 9007                       	dc.b	nEb1, $07
000896E1 EC0B                       	smpsPSGAlterVol     $0B
000896E3 8004                       	dc.b	nRst, $04
000896E5 ECF5                       	smpsPSGAlterVol     $F5
000896E7 9006                       	dc.b	nEb1, $06
000896E9 EC0B                       	smpsPSGAlterVol     $0B
000896EB 8007                       	dc.b	nRst, $07
000896ED E103                       	smpsAlterNote       $03
000896EF 0101                       	dc.b	$01, $01
000896F1 E1FC                       	smpsAlterNote       $FC
000896F3 01                         	dc.b	$01
000896F4 E1F9                       	smpsAlterNote       $F9
000896F6 01                         	dc.b	$01
000896F7 E1FC                       	smpsAlterNote       $FC
000896F9 ECF5                       	smpsPSGAlterVol     $F5
000896FB 8F06                       	dc.b	nD1, $06
000896FD EC04                       	smpsPSGAlterVol     $04
000896FF E701                       	dc.b	smpsNoAttack, $01
00089701 EC07                       	smpsPSGAlterVol     $07
00089703 8003                       	dc.b	nRst, $03
00089705 ECF5                       	smpsPSGAlterVol     $F5
00089707 8F06                       	dc.b	nD1, $06
00089709 EC04                       	smpsPSGAlterVol     $04
0008970B E701                       	dc.b	smpsNoAttack, $01
0008970D EC07                       	smpsPSGAlterVol     $07
0008970F 8006                       	dc.b	nRst, $06
00089711 E1FF                       	smpsAlterNote       $FF
00089713 01                         	dc.b	$01
00089714 E103                       	smpsAlterNote       $03
00089716 01                         	dc.b	$01
00089717 E1FF                       	smpsAlterNote       $FF
00089719 01                         	dc.b	$01
0008971A E1F9                       	smpsAlterNote       $F9
0008971C 01                         	dc.b	$01
0008971D E1FC                       	smpsAlterNote       $FC
0008971F ECF5                       	smpsPSGAlterVol     $F5
00089721 8F06                       	dc.b	nD1, $06
00089723 EC04                       	smpsPSGAlterVol     $04
00089725 E701                       	dc.b	smpsNoAttack, $01
00089727 EC07                       	smpsPSGAlterVol     $07
00089729 8003                       	dc.b	nRst, $03
0008972B ECF5                       	smpsPSGAlterVol     $F5
0008972D 8F07                       	dc.b	nD1, $07
0008972F EC0B                       	smpsPSGAlterVol     $0B
00089731 8006                       	dc.b	nRst, $06
00089733 E1FF                       	smpsAlterNote       $FF
00089735 01                         	dc.b	$01
00089736 E102                       	smpsAlterNote       $02
00089738 0101                       	dc.b	$01, $01
0008973A E1FC                       	smpsAlterNote       $FC
0008973C 01                         	dc.b	$01
0008973D ECF5                       	smpsPSGAlterVol     $F5
0008973F 8F07                       	dc.b	nD1, $07
00089741 EC0B                       	smpsPSGAlterVol     $0B
00089743 8004                       	dc.b	nRst, $04
00089745 ECF5                       	smpsPSGAlterVol     $F5
00089747 8F06                       	dc.b	nD1, $06
00089749 EC04                       	smpsPSGAlterVol     $04
0008974B E701                       	dc.b	smpsNoAttack, $01
0008974D EC07                       	smpsPSGAlterVol     $07
0008974F 8006                       	dc.b	nRst, $06
00089751 E101                       	smpsAlterNote       $01
00089753 01                         	dc.b	$01
00089754 E102                       	smpsAlterNote       $02
00089756 01                         	dc.b	$01
00089757 E1FF                       	smpsAlterNote       $FF
00089759 01                         	dc.b	$01
0008975A E1F9                       	smpsAlterNote       $F9
0008975C 01                         	dc.b	$01
0008975D E1FC                       	smpsAlterNote       $FC
0008975F ECF5                       	smpsPSGAlterVol     $F5
00089761 9006                       	dc.b	nEb1, $06
00089763 EC04                       	smpsPSGAlterVol     $04
00089765 E701                       	dc.b	smpsNoAttack, $01
00089767 EC07                       	smpsPSGAlterVol     $07
00089769 8003                       	dc.b	nRst, $03
0008976B ECF5                       	smpsPSGAlterVol     $F5
0008976D 9006                       	dc.b	nEb1, $06
0008976F EC04                       	smpsPSGAlterVol     $04
00089771 E701                       	dc.b	smpsNoAttack, $01
00089773 EC07                       	smpsPSGAlterVol     $07
00089775 8006                       	dc.b	nRst, $06
00089777 E100                       	smpsAlterNote       $00
00089779 01                         	dc.b	$01
0008977A E102                       	smpsAlterNote       $02
0008977C 01                         	dc.b	$01
0008977D E100                       	smpsAlterNote       $00
0008977F 01                         	dc.b	$01
00089780 E1FF                       	smpsAlterNote       $FF
00089782 01                         	dc.b	$01
00089783 ECF5                       	smpsPSGAlterVol     $F5
00089785 9B06                       	dc.b	nD2, $06
00089787 EC04                       	smpsPSGAlterVol     $04
00089789 E701                       	dc.b	smpsNoAttack, $01
0008978B EC07                       	smpsPSGAlterVol     $07
0008978D 8003                       	dc.b	nRst, $03
0008978F ECF5                       	smpsPSGAlterVol     $F5
00089791 9B07                       	dc.b	nD2, $07
00089793 EC0B                       	smpsPSGAlterVol     $0B
00089795 8007                       	dc.b	nRst, $07
00089797 E105                       	smpsAlterNote       $05
00089799 0101                       	dc.b	$01, $01
0008979B E1FF                       	smpsAlterNote       $FF
0008979D 01                         	dc.b	$01
0008979E E1FC                       	smpsAlterNote       $FC
000897A0 01                         	dc.b	$01
000897A1 E1FF                       	smpsAlterNote       $FF
000897A3 ECF5                       	smpsPSGAlterVol     $F5
000897A5 9B06                       	dc.b	nD2, $06
000897A7 EC0B                       	smpsPSGAlterVol     $0B
000897A9 8004                       	dc.b	nRst, $04
000897AB ECF5                       	smpsPSGAlterVol     $F5
000897AD 9B06                       	dc.b	nD2, $06
000897AF EC04                       	smpsPSGAlterVol     $04
000897B1 E701                       	dc.b	smpsNoAttack, $01
000897B3 EC07                       	smpsPSGAlterVol     $07
000897B5 8006                       	dc.b	nRst, $06
000897B7 E102                       	smpsAlterNote       $02
000897B9 01                         	dc.b	$01
000897BA E106                       	smpsAlterNote       $06
000897BC 01                         	dc.b	$01
000897BD E102                       	smpsAlterNote       $02
000897BF 01                         	dc.b	$01
000897C0 E1FC                       	smpsAlterNote       $FC
000897C2 01                         	dc.b	$01
000897C3 E1FF                       	smpsAlterNote       $FF
000897C5 ECF5                       	smpsPSGAlterVol     $F5
000897C7 9B06                       	dc.b	nD2, $06
000897C9 EC04                       	smpsPSGAlterVol     $04
000897CB E701                       	dc.b	smpsNoAttack, $01
000897CD EC07                       	smpsPSGAlterVol     $07
000897CF 8003                       	dc.b	nRst, $03
000897D1 ECF5                       	smpsPSGAlterVol     $F5
000897D3 9B07                       	dc.b	nD2, $07
000897D5 EC0B                       	smpsPSGAlterVol     $0B
000897D7 8006                       	dc.b	nRst, $06
000897D9 E102                       	smpsAlterNote       $02
000897DB 01                         	dc.b	$01
000897DC E105                       	smpsAlterNote       $05
000897DE 0101                       	dc.b	$01, $01
000897E0 E1FF                       	smpsAlterNote       $FF
000897E2 01                         	dc.b	$01
000897E3 ECF5                       	smpsPSGAlterVol     $F5
000897E5 9B07                       	dc.b	nD2, $07
000897E7 EC0B                       	smpsPSGAlterVol     $0B
000897E9 8004                       	dc.b	nRst, $04
000897EB ECF5                       	smpsPSGAlterVol     $F5
000897ED 9B06                       	dc.b	nD2, $06
000897EF EC0B                       	smpsPSGAlterVol     $0B
000897F1 8007                       	dc.b	nRst, $07
000897F3 E105                       	smpsAlterNote       $05
000897F5 0101                       	dc.b	$01, $01
000897F7 E102                       	smpsAlterNote       $02
000897F9 01                         	dc.b	$01
000897FA E1FC                       	smpsAlterNote       $FC
000897FC 01                         	dc.b	$01
000897FD E1FF                       	smpsAlterNote       $FF
000897FF ECF5                       	smpsPSGAlterVol     $F5
00089801 9B06                       	dc.b	nD2, $06
00089803 EC04                       	smpsPSGAlterVol     $04
00089805 E701                       	dc.b	smpsNoAttack, $01
00089807 EC07                       	smpsPSGAlterVol     $07
00089809 8003                       	dc.b	nRst, $03
0008980B ECF5                       	smpsPSGAlterVol     $F5
0008980D 9B06                       	dc.b	nD2, $06
0008980F EC04                       	smpsPSGAlterVol     $04
00089811 E701                       	dc.b	smpsNoAttack, $01
00089813 EC07                       	smpsPSGAlterVol     $07
00089815 8006                       	dc.b	nRst, $06
00089817 E102                       	smpsAlterNote       $02
00089819 01                         	dc.b	$01
0008981A E106                       	smpsAlterNote       $06
0008981C 01                         	dc.b	$01
0008981D E102                       	smpsAlterNote       $02
0008981F 01                         	dc.b	$01
00089820 E1FF                       	smpsAlterNote       $FF
00089822 01                         	dc.b	$01
00089823 ECF5                       	smpsPSGAlterVol     $F5
00089825 9B06                       	dc.b	nD2, $06
00089827 EC04                       	smpsPSGAlterVol     $04
00089829 E701                       	dc.b	smpsNoAttack, $01
0008982B EC07                       	smpsPSGAlterVol     $07
0008982D 8003                       	dc.b	nRst, $03
0008982F ECF5                       	smpsPSGAlterVol     $F5
00089831 9B07                       	dc.b	nD2, $07
00089833 EC0B                       	smpsPSGAlterVol     $0B
00089835 8007                       	dc.b	nRst, $07
00089837 E105                       	smpsAlterNote       $05
00089839 0101                       	dc.b	$01, $01
0008983B E1FF                       	smpsAlterNote       $FF
0008983D 01                         	dc.b	$01
0008983E E1FC                       	smpsAlterNote       $FC
00089840 01                         	dc.b	$01
00089841 E1FF                       	smpsAlterNote       $FF
00089843 ECF5                       	smpsPSGAlterVol     $F5
00089845 9B06                       	dc.b	nD2, $06
00089847 EC0B                       	smpsPSGAlterVol     $0B
00089849 8004                       	dc.b	nRst, $04
0008984B ECF5                       	smpsPSGAlterVol     $F5
0008984D 9B06                       	dc.b	nD2, $06
0008984F EC04                       	smpsPSGAlterVol     $04
00089851 E701                       	dc.b	smpsNoAttack, $01
00089853 EC07                       	smpsPSGAlterVol     $07
00089855 8006                       	dc.b	nRst, $06
00089857 E102                       	smpsAlterNote       $02
00089859 01                         	dc.b	$01
0008985A E106                       	smpsAlterNote       $06
0008985C 01                         	dc.b	$01
0008985D E102                       	smpsAlterNote       $02
0008985F 01                         	dc.b	$01
00089860 E1FC                       	smpsAlterNote       $FC
00089862 01                         	dc.b	$01
00089863 E1FF                       	smpsAlterNote       $FF
00089865 ECF5                       	smpsPSGAlterVol     $F5
00089867 9B06                       	dc.b	nD2, $06
00089869 EC04                       	smpsPSGAlterVol     $04
0008986B E701                       	dc.b	smpsNoAttack, $01
0008986D EC07                       	smpsPSGAlterVol     $07
0008986F 8003                       	dc.b	nRst, $03
00089871 ECF5                       	smpsPSGAlterVol     $F5
00089873 9B06                       	dc.b	nD2, $06
00089875 EC04                       	smpsPSGAlterVol     $04
00089877 E701                       	dc.b	smpsNoAttack, $01
00089879 EC07                       	smpsPSGAlterVol     $07
0008987B 8006                       	dc.b	nRst, $06
0008987D E102                       	smpsAlterNote       $02
0008987F 01                         	dc.b	$01
00089880 E106                       	smpsAlterNote       $06
00089882 01                         	dc.b	$01
00089883 E105                       	smpsAlterNote       $05
00089885 01                         	dc.b	$01
00089886 E1FF                       	smpsAlterNote       $FF
00089888 01                         	dc.b	$01
00089889 ECF5                       	smpsPSGAlterVol     $F5
0008988B 9B07                       	dc.b	nD2, $07
0008988D EC0B                       	smpsPSGAlterVol     $0B
0008988F 8004                       	dc.b	nRst, $04
00089891 ECF5                       	smpsPSGAlterVol     $F5
00089893 9B06                       	dc.b	nD2, $06
00089895 EC0B                       	smpsPSGAlterVol     $0B
00089897 8007                       	dc.b	nRst, $07
00089899 E105                       	smpsAlterNote       $05
0008989B 0101                       	dc.b	$01, $01
0008989D E101                       	smpsAlterNote       $01
0008989F 01                         	dc.b	$01
000898A0 E1FB                       	smpsAlterNote       $FB
000898A2 01                         	dc.b	$01
000898A3 E1FE                       	smpsAlterNote       $FE
000898A5 ECF5                       	smpsPSGAlterVol     $F5
000898A7 9A06                       	dc.b	nCs2, $06
000898A9 EC04                       	smpsPSGAlterVol     $04
000898AB E701                       	dc.b	smpsNoAttack, $01
000898AD EC07                       	smpsPSGAlterVol     $07
000898AF 8003                       	dc.b	nRst, $03
000898B1 ECF5                       	smpsPSGAlterVol     $F5
000898B3 9A06                       	dc.b	nCs2, $06
000898B5 EC04                       	smpsPSGAlterVol     $04
000898B7 E701                       	dc.b	smpsNoAttack, $01
000898B9 EC07                       	smpsPSGAlterVol     $07
000898BB 8003                       	dc.b	nRst, $03
000898BD E1FC                       	smpsAlterNote       $FC
000898BF ECF5                       	smpsPSGAlterVol     $F5
000898C1 8F07                       	dc.b	nD1, $07
000898C3 EC0B                       	smpsPSGAlterVol     $0B
000898C5 8006                       	dc.b	nRst, $06
000898C7 E1FF                       	smpsAlterNote       $FF
000898C9 01                         	dc.b	$01
000898CA E103                       	smpsAlterNote       $03
000898CC 01                         	dc.b	$01
000898CD E102                       	smpsAlterNote       $02
000898CF 01                         	dc.b	$01
000898D0 E1FC                       	smpsAlterNote       $FC
000898D2 01                         	dc.b	$01
000898D3 E1F8                       	smpsAlterNote       $F8
000898D5 01                         	dc.b	$01
000898D6 E1FC                       	smpsAlterNote       $FC
000898D8 01                         	dc.b	$01
000898D9 E1FF                       	smpsAlterNote       $FF
000898DB 01                         	dc.b	$01
000898DC E103                       	smpsAlterNote       $03
000898DE 01                         	dc.b	$01
000898DF E1FC                       	smpsAlterNote       $FC
000898E1 ECF5                       	smpsPSGAlterVol     $F5
000898E3 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000898E7 EC04                       	smpsPSGAlterVol     $04
000898E9 E701                       	dc.b	smpsNoAttack, $01
000898EB EC07                       	smpsPSGAlterVol     $07
000898ED 8009                       	dc.b	nRst, $09
000898EF E1FF                       	smpsAlterNote       $FF
000898F1 01                         	dc.b	$01
000898F2 E103                       	smpsAlterNote       $03
000898F4 01                         	dc.b	$01
000898F5 E102                       	smpsAlterNote       $02
000898F7 01                         	dc.b	$01
000898F8 E1FC                       	smpsAlterNote       $FC
000898FA 01                         	dc.b	$01
000898FB E1F8                       	smpsAlterNote       $F8
000898FD 01                         	dc.b	$01
000898FE E1FC                       	smpsAlterNote       $FC
00089900 01                         	dc.b	$01
00089901 E1FF                       	smpsAlterNote       $FF
00089903 01                         	dc.b	$01
00089904 E103                       	smpsAlterNote       $03
00089906 01                         	dc.b	$01
00089907 E1FF                       	smpsAlterNote       $FF
00089909 01                         	dc.b	$01
0008990A E1F9                       	smpsAlterNote       $F9
0008990C 01                         	dc.b	$01
0008990D E1F8                       	smpsAlterNote       $F8
0008990F 01                         	dc.b	$01
00089910 E1FC                       	smpsAlterNote       $FC
00089912 01                         	dc.b	$01
00089913 E102                       	smpsAlterNote       $02
00089915 0101                       	dc.b	$01, $01
00089917 E1FF                       	smpsAlterNote       $FF
00089919 01                         	dc.b	$01
0008991A E1FC                       	smpsAlterNote       $FC
0008991C ECF5                       	smpsPSGAlterVol     $F5
0008991E 8F02                       	dc.b	nD1, $02
00089920 EC04                       	smpsPSGAlterVol     $04
00089922 E701                       	dc.b	smpsNoAttack, $01
00089924 ECFC                       	smpsPSGAlterVol     $FC
00089926 E1FB                       	smpsAlterNote       $FB
00089928 8D06                       	dc.b	nC1, $06
0008992A EC04                       	smpsPSGAlterVol     $04
0008992C E701                       	dc.b	smpsNoAttack, $01
0008992E EC07                       	smpsPSGAlterVol     $07
00089930 8006                       	dc.b	nRst, $06
00089932 E1FE                       	smpsAlterNote       $FE
00089934 01                         	dc.b	$01
00089935 E102                       	smpsAlterNote       $02
00089937 01                         	dc.b	$01
00089938 E1FE                       	smpsAlterNote       $FE
0008993A 01                         	dc.b	$01
0008993B E1FB                       	smpsAlterNote       $FB
0008993D 01                         	dc.b	$01
0008993E E1F7                       	smpsAlterNote       $F7
00089940 01                         	dc.b	$01
00089941 E1FB                       	smpsAlterNote       $FB
00089943 01                         	dc.b	$01
00089944 E101                       	smpsAlterNote       $01
00089946 01                         	dc.b	$01
00089947 E102                       	smpsAlterNote       $02
00089949 01                         	dc.b	$01
0008994A E1FB                       	smpsAlterNote       $FB
0008994C ECF5                       	smpsPSGAlterVol     $F5
0008994E 8D02                       	dc.b	nC1, $02
00089950 EC04                       	smpsPSGAlterVol     $04
00089952 E701                       	dc.b	smpsNoAttack, $01
00089954 E1FC                       	smpsAlterNote       $FC
00089956 ECFC                       	smpsPSGAlterVol     $FC
00089958 8F0D                       	dc.b	nD1, $0D
0008995A E1FF                       	smpsAlterNote       $FF
0008995C E701                       	dc.b	smpsNoAttack, $01
0008995E E103                       	smpsAlterNote       $03
00089960 E701                       	dc.b	smpsNoAttack, $01
00089962 E1FF                       	smpsAlterNote       $FF
00089964 E701                       	dc.b	smpsNoAttack, $01
00089966 E1FC                       	smpsAlterNote       $FC
00089968 E701                       	dc.b	smpsNoAttack, $01
0008996A E1F8                       	smpsAlterNote       $F8
0008996C E701                       	dc.b	smpsNoAttack, $01
0008996E E1FC                       	smpsAlterNote       $FC
00089970 E701                       	dc.b	smpsNoAttack, $01
00089972 E102                       	smpsAlterNote       $02
00089974 E701                       	dc.b	smpsNoAttack, $01
00089976 E103                       	smpsAlterNote       $03
00089978 E701                       	dc.b	smpsNoAttack, $01
0008997A E1FF                       	smpsAlterNote       $FF
0008997C E701                       	dc.b	smpsNoAttack, $01
0008997E E1F9                       	smpsAlterNote       $F9
00089980 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089984 E1FC                       	smpsAlterNote       $FC
00089986 E701                       	dc.b	smpsNoAttack, $01
00089988 E102                       	smpsAlterNote       $02
0008998A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008998E E1FC                       	smpsAlterNote       $FC
00089990 E701                       	dc.b	smpsNoAttack, $01
00089992 E1F9                       	smpsAlterNote       $F9
00089994 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089998 E1FF                       	smpsAlterNote       $FF
0008999A EC04                       	smpsPSGAlterVol     $04
0008999C E701                       	dc.b	smpsNoAttack, $01
0008999E EC07                       	smpsPSGAlterVol     $07
000899A0 E103                       	smpsAlterNote       $03
000899A2 8001                       	dc.b	nRst, $01
000899A4 E102                       	smpsAlterNote       $02
000899A6 01                         	dc.b	$01
000899A7 E1FB                       	smpsAlterNote       $FB
000899A9 01                         	dc.b	$01
000899AA E1F7                       	smpsAlterNote       $F7
000899AC 01                         	dc.b	$01
000899AD E1FB                       	smpsAlterNote       $FB
000899AF 01                         	dc.b	$01
000899B0 E102                       	smpsAlterNote       $02
000899B2 01                         	dc.b	$01
000899B3 E103                       	smpsAlterNote       $03
000899B5 01                         	dc.b	$01
000899B6 E1FB                       	smpsAlterNote       $FB
000899B8 ECF5                       	smpsPSGAlterVol     $F5
000899BA 8E06                       	dc.b	nCs1, $06
000899BC EC04                       	smpsPSGAlterVol     $04
000899BE E701                       	dc.b	smpsNoAttack, $01
000899C0 EC07                       	smpsPSGAlterVol     $07
000899C2 8003                       	dc.b	nRst, $03
000899C4 ECF5                       	smpsPSGAlterVol     $F5
000899C6 8E06                       	dc.b	nCs1, $06
000899C8 EC04                       	smpsPSGAlterVol     $04
000899CA E701                       	dc.b	smpsNoAttack, $01
000899CC EC07                       	smpsPSGAlterVol     $07
000899CE 8006                       	dc.b	nRst, $06
000899D0 E1FE                       	smpsAlterNote       $FE
000899D2 01                         	dc.b	$01
000899D3 E102                       	smpsAlterNote       $02
000899D5 01                         	dc.b	$01
000899D6 E1FE                       	smpsAlterNote       $FE
000899D8 01                         	dc.b	$01
000899D9 E1F9                       	smpsAlterNote       $F9
000899DB 01                         	dc.b	$01
000899DC E1FC                       	smpsAlterNote       $FC
000899DE ECF5                       	smpsPSGAlterVol     $F5
000899E0 8F06                       	dc.b	nD1, $06
000899E2 EC04                       	smpsPSGAlterVol     $04
000899E4 E701                       	dc.b	smpsNoAttack, $01
000899E6 EC07                       	smpsPSGAlterVol     $07
000899E8 8003                       	dc.b	nRst, $03
000899EA ECF5                       	smpsPSGAlterVol     $F5
000899EC 8F07                       	dc.b	nD1, $07
000899EE EC0B                       	smpsPSGAlterVol     $0B
000899F0 8006                       	dc.b	nRst, $06
000899F2 E1FF                       	smpsAlterNote       $FF
000899F4 01                         	dc.b	$01
000899F5 E102                       	smpsAlterNote       $02
000899F7 0101                       	dc.b	$01, $01
000899F9 E1FB                       	smpsAlterNote       $FB
000899FB 01                         	dc.b	$01
000899FC ECF5                       	smpsPSGAlterVol     $F5
000899FE 8E07                       	dc.b	nCs1, $07
00089A00 EC0B                       	smpsPSGAlterVol     $0B
00089A02 8004                       	dc.b	nRst, $04
00089A04 ECF5                       	smpsPSGAlterVol     $F5
00089A06 8E06                       	dc.b	nCs1, $06
00089A08 EC04                       	smpsPSGAlterVol     $04
00089A0A E701                       	dc.b	smpsNoAttack, $01
00089A0C EC07                       	smpsPSGAlterVol     $07
00089A0E 8006                       	dc.b	nRst, $06
00089A10 E101                       	smpsAlterNote       $01
00089A12 01                         	dc.b	$01
00089A13 E102                       	smpsAlterNote       $02
00089A15 01                         	dc.b	$01
00089A16 E1FE                       	smpsAlterNote       $FE
00089A18 01                         	dc.b	$01
00089A19 E1F8                       	smpsAlterNote       $F8
00089A1B 01                         	dc.b	$01
00089A1C E1FB                       	smpsAlterNote       $FB
00089A1E ECF5                       	smpsPSGAlterVol     $F5
00089A20 8E06                       	dc.b	nCs1, $06
00089A22 EC04                       	smpsPSGAlterVol     $04
00089A24 E701                       	dc.b	smpsNoAttack, $01
00089A26 EC07                       	smpsPSGAlterVol     $07
00089A28 8003                       	dc.b	nRst, $03
00089A2A ECF5                       	smpsPSGAlterVol     $F5
00089A2C 8E06                       	dc.b	nCs1, $06
00089A2E EC04                       	smpsPSGAlterVol     $04
00089A30 E701                       	dc.b	smpsNoAttack, $01
00089A32 EC07                       	smpsPSGAlterVol     $07
00089A34 8004                       	dc.b	nRst, $04
00089A36 E1FC                       	smpsAlterNote       $FC
00089A38 ECF5                       	smpsPSGAlterVol     $F5
00089A3A 8F06                       	dc.b	nD1, $06
00089A3C EC0B                       	smpsPSGAlterVol     $0B
00089A3E 8006                       	dc.b	nRst, $06
00089A40 E1FF                       	smpsAlterNote       $FF
00089A42 01                         	dc.b	$01
00089A43 E102                       	smpsAlterNote       $02
00089A45 0101                       	dc.b	$01, $01
00089A47 E1FC                       	smpsAlterNote       $FC
00089A49 01                         	dc.b	$01
00089A4A E1F8                       	smpsAlterNote       $F8
00089A4C 01                         	dc.b	$01
00089A4D E1F9                       	smpsAlterNote       $F9
00089A4F 01                         	dc.b	$01
00089A50 E1FF                       	smpsAlterNote       $FF
00089A52 01                         	dc.b	$01
00089A53 E103                       	smpsAlterNote       $03
00089A55 01                         	dc.b	$01
00089A56 E1FC                       	smpsAlterNote       $FC
00089A58 ECF5                       	smpsPSGAlterVol     $F5
00089A5A 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00089A5E EC04                       	smpsPSGAlterVol     $04
00089A60 E701                       	dc.b	smpsNoAttack, $01
00089A62 EC07                       	smpsPSGAlterVol     $07
00089A64 8009                       	dc.b	nRst, $09
00089A66 E1FF                       	smpsAlterNote       $FF
00089A68 01                         	dc.b	$01
00089A69 E102                       	smpsAlterNote       $02
00089A6B 0101                       	dc.b	$01, $01
00089A6D E1FC                       	smpsAlterNote       $FC
00089A6F 01                         	dc.b	$01
00089A70 E1F8                       	smpsAlterNote       $F8
00089A72 01                         	dc.b	$01
00089A73 E1F9                       	smpsAlterNote       $F9
00089A75 01                         	dc.b	$01
00089A76 E1FF                       	smpsAlterNote       $FF
00089A78 01                         	dc.b	$01
00089A79 E103                       	smpsAlterNote       $03
00089A7B 01                         	dc.b	$01
00089A7C E1FF                       	smpsAlterNote       $FF
00089A7E 01                         	dc.b	$01
00089A7F E1FC                       	smpsAlterNote       $FC
00089A81 01                         	dc.b	$01
00089A82 E1F8                       	smpsAlterNote       $F8
00089A84 01                         	dc.b	$01
00089A85 E1FC                       	smpsAlterNote       $FC
00089A87 01                         	dc.b	$01
00089A88 E102                       	smpsAlterNote       $02
00089A8A 01                         	dc.b	$01
00089A8B E103                       	smpsAlterNote       $03
00089A8D 01                         	dc.b	$01
00089A8E E1FF                       	smpsAlterNote       $FF
00089A90 01                         	dc.b	$01
00089A91 E1FC                       	smpsAlterNote       $FC
00089A93 ECF5                       	smpsPSGAlterVol     $F5
00089A95 8F03                       	dc.b	nD1, $03
00089A97 E1FB                       	smpsAlterNote       $FB
00089A99 8D06                       	dc.b	nC1, $06
00089A9B EC04                       	smpsPSGAlterVol     $04
00089A9D E701                       	dc.b	smpsNoAttack, $01
00089A9F EC07                       	smpsPSGAlterVol     $07
00089AA1 8006                       	dc.b	nRst, $06
00089AA3 E1FE                       	smpsAlterNote       $FE
00089AA5 01                         	dc.b	$01
00089AA6 E102                       	smpsAlterNote       $02
00089AA8 01                         	dc.b	$01
00089AA9 E101                       	smpsAlterNote       $01
00089AAB 01                         	dc.b	$01
00089AAC E1FB                       	smpsAlterNote       $FB
00089AAE 01                         	dc.b	$01
00089AAF E1F7                       	smpsAlterNote       $F7
00089AB1 01                         	dc.b	$01
00089AB2 E1FB                       	smpsAlterNote       $FB
00089AB4 01                         	dc.b	$01
00089AB5 E1FE                       	smpsAlterNote       $FE
00089AB7 01                         	dc.b	$01
00089AB8 E102                       	smpsAlterNote       $02
00089ABA 01                         	dc.b	$01
00089ABB E1FB                       	smpsAlterNote       $FB
00089ABD ECF5                       	smpsPSGAlterVol     $F5
00089ABF 8D03                       	dc.b	nC1, $03
00089AC1 E1FC                       	smpsAlterNote       $FC
00089AC3 8F0D                       	dc.b	nD1, $0D
00089AC5 E1FF                       	smpsAlterNote       $FF
00089AC7 E701                       	dc.b	smpsNoAttack, $01
00089AC9 E103                       	smpsAlterNote       $03
00089ACB E701                       	dc.b	smpsNoAttack, $01
00089ACD E1FF                       	smpsAlterNote       $FF
00089ACF E701                       	dc.b	smpsNoAttack, $01
00089AD1 E1FC                       	smpsAlterNote       $FC
00089AD3 E701                       	dc.b	smpsNoAttack, $01
00089AD5 E1F8                       	smpsAlterNote       $F8
00089AD7 E701                       	dc.b	smpsNoAttack, $01
00089AD9 E1FC                       	smpsAlterNote       $FC
00089ADB E701                       	dc.b	smpsNoAttack, $01
00089ADD E102                       	smpsAlterNote       $02
00089ADF E701                       	dc.b	smpsNoAttack, $01
00089AE1 E103                       	smpsAlterNote       $03
00089AE3 E701                       	dc.b	smpsNoAttack, $01
00089AE5 E1FF                       	smpsAlterNote       $FF
00089AE7 E701                       	dc.b	smpsNoAttack, $01
00089AE9 E1F9                       	smpsAlterNote       $F9
00089AEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AEF E1FC                       	smpsAlterNote       $FC
00089AF1 E701                       	dc.b	smpsNoAttack, $01
00089AF3 E102                       	smpsAlterNote       $02
00089AF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AF9 E1FF                       	smpsAlterNote       $FF
00089AFB E701                       	dc.b	smpsNoAttack, $01
00089AFD E1F9                       	smpsAlterNote       $F9
00089AFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B03 E1FF                       	smpsAlterNote       $FF
00089B05 EC04                       	smpsPSGAlterVol     $04
00089B07 E701                       	dc.b	smpsNoAttack, $01
00089B09 EC07                       	smpsPSGAlterVol     $07
00089B0B E103                       	smpsAlterNote       $03
00089B0D 8001                       	dc.b	nRst, $01
00089B0F E102                       	smpsAlterNote       $02
00089B11 01                         	dc.b	$01
00089B12 E1FB                       	smpsAlterNote       $FB
00089B14 01                         	dc.b	$01
00089B15 E1F7                       	smpsAlterNote       $F7
00089B17 01                         	dc.b	$01
00089B18 E1FB                       	smpsAlterNote       $FB
00089B1A 01                         	dc.b	$01
00089B1B E1FF                       	smpsAlterNote       $FF
00089B1D 01                         	dc.b	$01
00089B1E E103                       	smpsAlterNote       $03
00089B20 01                         	dc.b	$01
00089B21 E1FB                       	smpsAlterNote       $FB
00089B23 ECF5                       	smpsPSGAlterVol     $F5
00089B25 8E06                       	dc.b	nCs1, $06
00089B27 EC04                       	smpsPSGAlterVol     $04
00089B29 E701                       	dc.b	smpsNoAttack, $01
00089B2B EC07                       	smpsPSGAlterVol     $07
00089B2D 8003                       	dc.b	nRst, $03
00089B2F ECF5                       	smpsPSGAlterVol     $F5
00089B31 8E06                       	dc.b	nCs1, $06
00089B33 EC04                       	smpsPSGAlterVol     $04
00089B35 E701                       	dc.b	smpsNoAttack, $01
00089B37 EC07                       	smpsPSGAlterVol     $07
00089B39 8006                       	dc.b	nRst, $06
00089B3B E1FE                       	smpsAlterNote       $FE
00089B3D 01                         	dc.b	$01
00089B3E E102                       	smpsAlterNote       $02
00089B40 01                         	dc.b	$01
00089B41 E1FE                       	smpsAlterNote       $FE
00089B43 01                         	dc.b	$01
00089B44 E1FC                       	smpsAlterNote       $FC
00089B46 01                         	dc.b	$01
00089B47 ECF5                       	smpsPSGAlterVol     $F5
00089B49 8F06                       	dc.b	nD1, $06
00089B4B EC04                       	smpsPSGAlterVol     $04
00089B4D E701                       	dc.b	smpsNoAttack, $01
00089B4F EC07                       	smpsPSGAlterVol     $07
00089B51 8003                       	dc.b	nRst, $03
00089B53 ECF5                       	smpsPSGAlterVol     $F5
00089B55 8F07                       	dc.b	nD1, $07
00089B57 EC0B                       	smpsPSGAlterVol     $0B
00089B59 8007                       	dc.b	nRst, $07
00089B5B E102                       	smpsAlterNote       $02
00089B5D 0101                       	dc.b	$01, $01
00089B5F E1FB                       	smpsAlterNote       $FB
00089B61 01                         	dc.b	$01
00089B62 E1F8                       	smpsAlterNote       $F8
00089B64 01                         	dc.b	$01
00089B65 E1FB                       	smpsAlterNote       $FB
00089B67 ECF5                       	smpsPSGAlterVol     $F5
00089B69 8E06                       	dc.b	nCs1, $06
00089B6B EC0B                       	smpsPSGAlterVol     $0B
00089B6D 8004                       	dc.b	nRst, $04
00089B6F ECF5                       	smpsPSGAlterVol     $F5
00089B71 8E06                       	dc.b	nCs1, $06
00089B73 EC04                       	smpsPSGAlterVol     $04
00089B75 E701                       	dc.b	smpsNoAttack, $01
00089B77 EC07                       	smpsPSGAlterVol     $07
00089B79 8006                       	dc.b	nRst, $06
00089B7B E1FE                       	smpsAlterNote       $FE
00089B7D 01                         	dc.b	$01
00089B7E E102                       	smpsAlterNote       $02
00089B80 01                         	dc.b	$01
00089B81 E1FE                       	smpsAlterNote       $FE
00089B83 01                         	dc.b	$01
00089B84 E1F9                       	smpsAlterNote       $F9
00089B86 01                         	dc.b	$01
00089B87 E1FC                       	smpsAlterNote       $FC
00089B89 ECF5                       	smpsPSGAlterVol     $F5
00089B8B 8F06                       	dc.b	nD1, $06
00089B8D EC04                       	smpsPSGAlterVol     $04
00089B8F E701                       	dc.b	smpsNoAttack, $01
00089B91 EC07                       	smpsPSGAlterVol     $07
00089B93 8003                       	dc.b	nRst, $03
00089B95 ECF5                       	smpsPSGAlterVol     $F5
00089B97 8F06                       	dc.b	nD1, $06
00089B99 EC04                       	smpsPSGAlterVol     $04
00089B9B E701                       	dc.b	smpsNoAttack, $01
00089B9D EC07                       	smpsPSGAlterVol     $07
00089B9F 8006                       	dc.b	nRst, $06
00089BA1 E1FF                       	smpsAlterNote       $FF
00089BA3 01                         	dc.b	$01
00089BA4 E103                       	smpsAlterNote       $03
00089BA6 01                         	dc.b	$01
00089BA7 E102                       	smpsAlterNote       $02
00089BA9 01                         	dc.b	$01
00089BAA E1FB                       	smpsAlterNote       $FB
00089BAC 01                         	dc.b	$01
00089BAD ECF5                       	smpsPSGAlterVol     $F5
00089BAF 8E07                       	dc.b	nCs1, $07
00089BB1 EC0B                       	smpsPSGAlterVol     $0B
00089BB3 8004                       	dc.b	nRst, $04
00089BB5 ECF5                       	smpsPSGAlterVol     $F5
00089BB7 8E06                       	dc.b	nCs1, $06
00089BB9 EC0B                       	smpsPSGAlterVol     $0B
00089BBB 8007                       	dc.b	nRst, $07
00089BBD E101                       	smpsAlterNote       $01
00089BBF 0101                       	dc.b	$01, $01
00089BC1 E1FE                       	smpsAlterNote       $FE
00089BC3 01                         	dc.b	$01
00089BC4 E1F9                       	smpsAlterNote       $F9
00089BC6 01                         	dc.b	$01
00089BC7 E1FC                       	smpsAlterNote       $FC
00089BC9 ECF5                       	smpsPSGAlterVol     $F5
00089BCB 8F06                       	dc.b	nD1, $06
00089BCD EC04                       	smpsPSGAlterVol     $04
00089BCF E701                       	dc.b	smpsNoAttack, $01
00089BD1 EC07                       	smpsPSGAlterVol     $07
00089BD3 8003                       	dc.b	nRst, $03
00089BD5 ECF5                       	smpsPSGAlterVol     $F5
00089BD7 8F06                       	dc.b	nD1, $06
00089BD9 EC04                       	smpsPSGAlterVol     $04
00089BDB E701                       	dc.b	smpsNoAttack, $01
00089BDD EC07                       	smpsPSGAlterVol     $07
00089BDF 8006                       	dc.b	nRst, $06
00089BE1 E1FF                       	smpsAlterNote       $FF
00089BE3 01                         	dc.b	$01
00089BE4 E103                       	smpsAlterNote       $03
00089BE6 01                         	dc.b	$01
00089BE7 E1FF                       	smpsAlterNote       $FF
00089BE9 01                         	dc.b	$01
00089BEA E1FB                       	smpsAlterNote       $FB
00089BEC 01                         	dc.b	$01
00089BED ECF5                       	smpsPSGAlterVol     $F5
00089BEF 8E06                       	dc.b	nCs1, $06
00089BF1 EC04                       	smpsPSGAlterVol     $04
00089BF3 E701                       	dc.b	smpsNoAttack, $01
00089BF5 EC07                       	smpsPSGAlterVol     $07
00089BF7 8003                       	dc.b	nRst, $03
00089BF9 ECF5                       	smpsPSGAlterVol     $F5
00089BFB 8E07                       	dc.b	nCs1, $07
00089BFD E1FF                       	smpsAlterNote       $FF
00089BFF 9B06                       	dc.b	nD2, $06
00089C01 EC04                       	smpsPSGAlterVol     $04
00089C03 E701                       	dc.b	smpsNoAttack, $01
00089C05 ECFC                       	smpsPSGAlterVol     $FC
00089C07 9B03                       	dc.b	nD2, $03
00089C09 EC04                       	smpsPSGAlterVol     $04
00089C0B E701                       	dc.b	smpsNoAttack, $01
00089C0D ECFC                       	smpsPSGAlterVol     $FC
00089C0F 9B02                       	dc.b	nD2, $02
00089C11 EC04                       	smpsPSGAlterVol     $04
00089C13 E701                       	dc.b	smpsNoAttack, $01
00089C15 ECFC                       	smpsPSGAlterVol     $FC
00089C17 E1FE                       	smpsAlterNote       $FE
00089C19 9A03                       	dc.b	nCs2, $03
00089C1B EC0B                       	smpsPSGAlterVol     $0B
00089C1D 800A                       	dc.b	nRst, $0A
00089C1F E102                       	smpsAlterNote       $02
00089C21 01                         	dc.b	$01
00089C22 E10A                       	smpsAlterNote       $0A
00089C24 01                         	dc.b	$01
00089C25 E102                       	smpsAlterNote       $02
00089C27 01                         	dc.b	$01
00089C28 E1F7                       	smpsAlterNote       $F7
00089C2A 01                         	dc.b	$01
00089C2B E10A                       	smpsAlterNote       $0A
00089C2D 01                         	dc.b	$01
00089C2E E1FC                       	smpsAlterNote       $FC
00089C30 01                         	dc.b	$01
00089C31 E108                       	smpsAlterNote       $08
00089C33 0101                       	dc.b	$01, $01
00089C35 E102                       	smpsAlterNote       $02
00089C37 01                         	dc.b	$01
00089C38 E1F7                       	smpsAlterNote       $F7
00089C3A 0101                       	dc.b	$01, $01
00089C3C E1FC                       	smpsAlterNote       $FC
00089C3E ECF5                       	smpsPSGAlterVol     $F5
00089C40 8F06                       	dc.b	nD1, $06
00089C42 EC04                       	smpsPSGAlterVol     $04
00089C44 E701                       	dc.b	smpsNoAttack, $01
00089C46 EC07                       	smpsPSGAlterVol     $07
00089C48 8003                       	dc.b	nRst, $03
00089C4A ECF5                       	smpsPSGAlterVol     $F5
00089C4C 8F06                       	dc.b	nD1, $06
00089C4E EC04                       	smpsPSGAlterVol     $04
00089C50 E701                       	dc.b	smpsNoAttack, $01
00089C52 EC07                       	smpsPSGAlterVol     $07
00089C54 8006                       	dc.b	nRst, $06
00089C56 E1FF                       	smpsAlterNote       $FF
00089C58 01                         	dc.b	$01
00089C59 E102                       	smpsAlterNote       $02
00089C5B 01                         	dc.b	$01
00089C5C E101                       	smpsAlterNote       $01
00089C5E 01                         	dc.b	$01
00089C5F E1FC                       	smpsAlterNote       $FC
00089C61 01                         	dc.b	$01
00089C62 ECF5                       	smpsPSGAlterVol     $F5
00089C64 9007                       	dc.b	nEb1, $07
00089C66 EC0B                       	smpsPSGAlterVol     $0B
00089C68 8004                       	dc.b	nRst, $04
00089C6A ECF5                       	smpsPSGAlterVol     $F5
00089C6C 9006                       	dc.b	nEb1, $06
00089C6E EC0B                       	smpsPSGAlterVol     $0B
00089C70 8007                       	dc.b	nRst, $07
00089C72 E103                       	smpsAlterNote       $03
00089C74 0101                       	dc.b	$01, $01
00089C76 E1FF                       	smpsAlterNote       $FF
00089C78 01                         	dc.b	$01
00089C79 E1F9                       	smpsAlterNote       $F9
00089C7B 01                         	dc.b	$01
00089C7C E1FC                       	smpsAlterNote       $FC
00089C7E ECF5                       	smpsPSGAlterVol     $F5
00089C80 8F06                       	dc.b	nD1, $06
00089C82 EC04                       	smpsPSGAlterVol     $04
00089C84 E701                       	dc.b	smpsNoAttack, $01
00089C86 EC07                       	smpsPSGAlterVol     $07
00089C88 8003                       	dc.b	nRst, $03
00089C8A ECF5                       	smpsPSGAlterVol     $F5
00089C8C 8F06                       	dc.b	nD1, $06
00089C8E EC04                       	smpsPSGAlterVol     $04
00089C90 E701                       	dc.b	smpsNoAttack, $01
00089C92 EC07                       	smpsPSGAlterVol     $07
00089C94 8006                       	dc.b	nRst, $06
00089C96 E1FF                       	smpsAlterNote       $FF
00089C98 01                         	dc.b	$01
00089C99 E103                       	smpsAlterNote       $03
00089C9B 01                         	dc.b	$01
00089C9C E1FF                       	smpsAlterNote       $FF
00089C9E 01                         	dc.b	$01
00089C9F E1F9                       	smpsAlterNote       $F9
00089CA1 01                         	dc.b	$01
00089CA2 E1FC                       	smpsAlterNote       $FC
00089CA4 ECF5                       	smpsPSGAlterVol     $F5
00089CA6 8F06                       	dc.b	nD1, $06
00089CA8 EC04                       	smpsPSGAlterVol     $04
00089CAA E701                       	dc.b	smpsNoAttack, $01
00089CAC EC07                       	smpsPSGAlterVol     $07
00089CAE 8003                       	dc.b	nRst, $03
00089CB0 ECF5                       	smpsPSGAlterVol     $F5
00089CB2 8F07                       	dc.b	nD1, $07
00089CB4 EC0B                       	smpsPSGAlterVol     $0B
00089CB6 8006                       	dc.b	nRst, $06
00089CB8 E1FF                       	smpsAlterNote       $FF
00089CBA 01                         	dc.b	$01
00089CBB E102                       	smpsAlterNote       $02
00089CBD 0101                       	dc.b	$01, $01
00089CBF E1FC                       	smpsAlterNote       $FC
00089CC1 01                         	dc.b	$01
00089CC2 ECF5                       	smpsPSGAlterVol     $F5
00089CC4 8F07                       	dc.b	nD1, $07
00089CC6 EC0B                       	smpsPSGAlterVol     $0B
00089CC8 8004                       	dc.b	nRst, $04
00089CCA ECF5                       	smpsPSGAlterVol     $F5
00089CCC 8F06                       	dc.b	nD1, $06
00089CCE EC04                       	smpsPSGAlterVol     $04
00089CD0 E701                       	dc.b	smpsNoAttack, $01
00089CD2 EC07                       	smpsPSGAlterVol     $07
00089CD4 8006                       	dc.b	nRst, $06
00089CD6 E101                       	smpsAlterNote       $01
00089CD8 01                         	dc.b	$01
00089CD9 E102                       	smpsAlterNote       $02
00089CDB 01                         	dc.b	$01
00089CDC E1FF                       	smpsAlterNote       $FF
00089CDE 01                         	dc.b	$01
00089CDF E1F9                       	smpsAlterNote       $F9
00089CE1 01                         	dc.b	$01
00089CE2 E1FC                       	smpsAlterNote       $FC
00089CE4 ECF5                       	smpsPSGAlterVol     $F5
00089CE6 9006                       	dc.b	nEb1, $06
00089CE8 EC04                       	smpsPSGAlterVol     $04
00089CEA E701                       	dc.b	smpsNoAttack, $01
00089CEC EC07                       	smpsPSGAlterVol     $07
00089CEE 8003                       	dc.b	nRst, $03
00089CF0 ECF5                       	smpsPSGAlterVol     $F5
00089CF2 9006                       	dc.b	nEb1, $06
00089CF4 EC04                       	smpsPSGAlterVol     $04
00089CF6 E701                       	dc.b	smpsNoAttack, $01
00089CF8 EC07                       	smpsPSGAlterVol     $07
00089CFA 8006                       	dc.b	nRst, $06
00089CFC E100                       	smpsAlterNote       $00
00089CFE 01                         	dc.b	$01
00089CFF E102                       	smpsAlterNote       $02
00089D01 01                         	dc.b	$01
00089D02 E100                       	smpsAlterNote       $00
00089D04 01                         	dc.b	$01
00089D05 E1FF                       	smpsAlterNote       $FF
00089D07 01                         	dc.b	$01
00089D08 ECF5                       	smpsPSGAlterVol     $F5
00089D0A 9B06                       	dc.b	nD2, $06
00089D0C EC04                       	smpsPSGAlterVol     $04
00089D0E E701                       	dc.b	smpsNoAttack, $01
00089D10 EC07                       	smpsPSGAlterVol     $07
00089D12 8003                       	dc.b	nRst, $03
00089D14 ECF5                       	smpsPSGAlterVol     $F5
00089D16 9B07                       	dc.b	nD2, $07
00089D18 EC0B                       	smpsPSGAlterVol     $0B
00089D1A 8007                       	dc.b	nRst, $07
00089D1C E105                       	smpsAlterNote       $05
00089D1E 0101                       	dc.b	$01, $01
00089D20 E1FF                       	smpsAlterNote       $FF
00089D22 01                         	dc.b	$01
00089D23 E1FC                       	smpsAlterNote       $FC
00089D25 01                         	dc.b	$01
00089D26 E1FF                       	smpsAlterNote       $FF
00089D28 ECF5                       	smpsPSGAlterVol     $F5
00089D2A 9B06                       	dc.b	nD2, $06
00089D2C EC0B                       	smpsPSGAlterVol     $0B
00089D2E 8004                       	dc.b	nRst, $04
00089D30 ECF5                       	smpsPSGAlterVol     $F5
00089D32 9B06                       	dc.b	nD2, $06
00089D34 EC04                       	smpsPSGAlterVol     $04
00089D36 E701                       	dc.b	smpsNoAttack, $01
00089D38 EC07                       	smpsPSGAlterVol     $07
00089D3A 8006                       	dc.b	nRst, $06
00089D3C E102                       	smpsAlterNote       $02
00089D3E 01                         	dc.b	$01
00089D3F E106                       	smpsAlterNote       $06
00089D41 01                         	dc.b	$01
00089D42 E102                       	smpsAlterNote       $02
00089D44 01                         	dc.b	$01
00089D45 E1FC                       	smpsAlterNote       $FC
00089D47 01                         	dc.b	$01
00089D48 E1FF                       	smpsAlterNote       $FF
00089D4A ECF5                       	smpsPSGAlterVol     $F5
00089D4C 9B06                       	dc.b	nD2, $06
00089D4E EC04                       	smpsPSGAlterVol     $04
00089D50 E701                       	dc.b	smpsNoAttack, $01
00089D52 EC07                       	smpsPSGAlterVol     $07
00089D54 8003                       	dc.b	nRst, $03
00089D56 ECF5                       	smpsPSGAlterVol     $F5
00089D58 9B07                       	dc.b	nD2, $07
00089D5A EC0B                       	smpsPSGAlterVol     $0B
00089D5C 8006                       	dc.b	nRst, $06
00089D5E E102                       	smpsAlterNote       $02
00089D60 01                         	dc.b	$01
00089D61 E105                       	smpsAlterNote       $05
00089D63 0101                       	dc.b	$01, $01
00089D65 E1FF                       	smpsAlterNote       $FF
00089D67 01                         	dc.b	$01
00089D68 ECF5                       	smpsPSGAlterVol     $F5
00089D6A 9B07                       	dc.b	nD2, $07
00089D6C EC0B                       	smpsPSGAlterVol     $0B
00089D6E 8004                       	dc.b	nRst, $04
00089D70 ECF5                       	smpsPSGAlterVol     $F5
00089D72 9B06                       	dc.b	nD2, $06
00089D74 EC04                       	smpsPSGAlterVol     $04
00089D76 E701                       	dc.b	smpsNoAttack, $01
00089D78 EC07                       	smpsPSGAlterVol     $07
00089D7A 8006                       	dc.b	nRst, $06
00089D7C E105                       	smpsAlterNote       $05
00089D7E 0101                       	dc.b	$01, $01
00089D80 E102                       	smpsAlterNote       $02
00089D82 01                         	dc.b	$01
00089D83 E1FC                       	smpsAlterNote       $FC
00089D85 01                         	dc.b	$01
00089D86 E1FF                       	smpsAlterNote       $FF
00089D88 ECF5                       	smpsPSGAlterVol     $F5
00089D8A 9B06                       	dc.b	nD2, $06
00089D8C EC04                       	smpsPSGAlterVol     $04
00089D8E E701                       	dc.b	smpsNoAttack, $01
00089D90 EC07                       	smpsPSGAlterVol     $07
00089D92 8003                       	dc.b	nRst, $03
00089D94 ECF5                       	smpsPSGAlterVol     $F5
00089D96 9B06                       	dc.b	nD2, $06
00089D98 EC04                       	smpsPSGAlterVol     $04
00089D9A E701                       	dc.b	smpsNoAttack, $01
00089D9C EC07                       	smpsPSGAlterVol     $07
00089D9E 8006                       	dc.b	nRst, $06
00089DA0 E102                       	smpsAlterNote       $02
00089DA2 01                         	dc.b	$01
00089DA3 E106                       	smpsAlterNote       $06
00089DA5 01                         	dc.b	$01
00089DA6 E102                       	smpsAlterNote       $02
00089DA8 01                         	dc.b	$01
00089DA9 E1FF                       	smpsAlterNote       $FF
00089DAB 01                         	dc.b	$01
00089DAC ECF5                       	smpsPSGAlterVol     $F5
00089DAE 9B06                       	dc.b	nD2, $06
00089DB0 EC04                       	smpsPSGAlterVol     $04
00089DB2 E701                       	dc.b	smpsNoAttack, $01
00089DB4 EC07                       	smpsPSGAlterVol     $07
00089DB6 8003                       	dc.b	nRst, $03
00089DB8 ECF5                       	smpsPSGAlterVol     $F5
00089DBA 9B07                       	dc.b	nD2, $07
00089DBC EC0B                       	smpsPSGAlterVol     $0B
00089DBE 8007                       	dc.b	nRst, $07
00089DC0 E107                       	smpsAlterNote       $07
00089DC2 0101                       	dc.b	$01, $01
00089DC4 E1FE                       	smpsAlterNote       $FE
00089DC6 01                         	dc.b	$01
00089DC7 E1FA                       	smpsAlterNote       $FA
00089DC9 0101                       	dc.b	$01, $01
00089DCB E103                       	smpsAlterNote       $03
00089DCD 01                         	dc.b	$01
00089DCE E109                       	smpsAlterNote       $09
00089DD0 01                         	dc.b	$01
00089DD1 E107                       	smpsAlterNote       $07
00089DD3 01                         	dc.b	$01
00089DD4 E1FE                       	smpsAlterNote       $FE
00089DD6 01                         	dc.b	$01
00089DD7 E108                       	smpsAlterNote       $08
00089DD9 01                         	dc.b	$01
00089DDA E1FD                       	smpsAlterNote       $FD
00089DDC ECF5                       	smpsPSGAlterVol     $F5
00089DDE 940E                       	dc.b	nG1, $0E
00089DE0 E103                       	smpsAlterNote       $03
00089DE2 EC0B                       	smpsPSGAlterVol     $0B
00089DE4 8001 01                    	dc.b	nRst, $01, $01
00089DE7 E1FD                       	smpsAlterNote       $FD
00089DE9 01                         	dc.b	$01
00089DEA E1FB                       	smpsAlterNote       $FB
00089DEC 0101                       	dc.b	$01, $01
00089DEE E100                       	smpsAlterNote       $00
00089DF0 01                         	dc.b	$01
00089DF1 E103                       	smpsAlterNote       $03
00089DF3 01                         	dc.b	$01
00089DF4 E100                       	smpsAlterNote       $00
00089DF6 01                         	dc.b	$01
00089DF7 E1FD                       	smpsAlterNote       $FD
00089DF9 01                         	dc.b	$01
00089DFA E1FA                       	smpsAlterNote       $FA
00089DFC 01                         	dc.b	$01
00089DFD E1FD                       	smpsAlterNote       $FD
00089DFF 01                         	dc.b	$01
00089E00 E103                       	smpsAlterNote       $03
00089E02 0101                       	dc.b	$01, $01
00089E04 E100                       	smpsAlterNote       $00
00089E06 01                         	dc.b	$01
00089E07 E1FE                       	smpsAlterNote       $FE
00089E09 ECF5                       	smpsPSGAlterVol     $F5
00089E0B 960D                       	dc.b	nA1, $0D
00089E0D E104                       	smpsAlterNote       $04
00089E0F EC0B                       	smpsPSGAlterVol     $0B
00089E11 8001 01                    	dc.b	nRst, $01, $01
00089E14 E101                       	smpsAlterNote       $01
00089E16 01                         	dc.b	$01
00089E17 E1FB                       	smpsAlterNote       $FB
00089E19 0101                       	dc.b	$01, $01
00089E1B E1FE                       	smpsAlterNote       $FE
00089E1D 01                         	dc.b	$01
00089E1E E104                       	smpsAlterNote       $04
00089E20 0101                       	dc.b	$01, $01
00089E22 E1FE                       	smpsAlterNote       $FE
00089E24 01                         	dc.b	$01
00089E25 E1FB                       	smpsAlterNote       $FB
00089E27 0101                       	dc.b	$01, $01
00089E29 E101                       	smpsAlterNote       $01
00089E2B 01                         	dc.b	$01
00089E2C E104                       	smpsAlterNote       $04
00089E2E 0101                       	dc.b	$01, $01
00089E30 E1FE                       	smpsAlterNote       $FE
00089E32 ECF5                       	smpsPSGAlterVol     $F5
00089E34 970D                       	dc.b	nBb1, $0D
00089E36 E101                       	smpsAlterNote       $01
00089E38 EC04                       	smpsPSGAlterVol     $04
00089E3A E701                       	dc.b	smpsNoAttack, $01
00089E3C EC07                       	smpsPSGAlterVol     $07
00089E3E E104                       	smpsAlterNote       $04
00089E40 8001                       	dc.b	nRst, $01
00089E42 E103                       	smpsAlterNote       $03
00089E44 01                         	dc.b	$01
00089E45 E1FE                       	smpsAlterNote       $FE
00089E47 01                         	dc.b	$01
00089E48 E1FA                       	smpsAlterNote       $FA
00089E4A 01                         	dc.b	$01
00089E4B E1FE                       	smpsAlterNote       $FE
00089E4D 01                         	dc.b	$01
00089E4E E101                       	smpsAlterNote       $01
00089E50 01                         	dc.b	$01
00089E51 E104                       	smpsAlterNote       $04
00089E53 01                         	dc.b	$01
00089E54 E101                       	smpsAlterNote       $01
00089E56 01                         	dc.b	$01
00089E57 E1FB                       	smpsAlterNote       $FB
00089E59 01                         	dc.b	$01
00089E5A E1FA                       	smpsAlterNote       $FA
00089E5C 01                         	dc.b	$01
00089E5D E1FE                       	smpsAlterNote       $FE
00089E5F 01                         	dc.b	$01
00089E60 E103                       	smpsAlterNote       $03
00089E62 0101                       	dc.b	$01, $01
00089E64 E101                       	smpsAlterNote       $01
00089E66 01                         	dc.b	$01
00089E67 E1FE                       	smpsAlterNote       $FE
00089E69 ECF5                       	smpsPSGAlterVol     $F5
00089E6B 990D                       	dc.b	nC2, $0D
00089E6D E104                       	smpsAlterNote       $04
00089E6F EC0B                       	smpsPSGAlterVol     $0B
00089E71 8001 01                    	dc.b	nRst, $01, $01
00089E74 E102                       	smpsAlterNote       $02
00089E76 01                         	dc.b	$01
00089E77 E1FC                       	smpsAlterNote       $FC
00089E79 0101                       	dc.b	$01, $01
00089E7B E102                       	smpsAlterNote       $02
00089E7D 01                         	dc.b	$01
00089E7E E104                       	smpsAlterNote       $04
00089E80 01                         	dc.b	$01
00089E81 E1FF                       	smpsAlterNote       $FF
00089E83 ECF5                       	smpsPSGAlterVol     $F5
00089E85 9B06                       	dc.b	nD2, $06
00089E87 EC04                       	smpsPSGAlterVol     $04
00089E89 E701                       	dc.b	smpsNoAttack, $01
00089E8B EC07                       	smpsPSGAlterVol     $07
00089E8D 8003                       	dc.b	nRst, $03
00089E8F ECF5                       	smpsPSGAlterVol     $F5
00089E91 9B07                       	dc.b	nD2, $07
00089E93 EC0B                       	smpsPSGAlterVol     $0B
00089E95 8006                       	dc.b	nRst, $06
00089E97 E101                       	smpsAlterNote       $01
00089E99 01                         	dc.b	$01
00089E9A E104                       	smpsAlterNote       $04
00089E9C 0101                       	dc.b	$01, $01
00089E9E E1FE                       	smpsAlterNote       $FE
00089EA0 01                         	dc.b	$01
00089EA1 E1FC                       	smpsAlterNote       $FC
00089EA3 01                         	dc.b	$01
00089EA4 E1FE                       	smpsAlterNote       $FE
00089EA6 ECF5                       	smpsPSGAlterVol     $F5
00089EA8 9C06                       	dc.b	nEb2, $06
00089EAA EC0B                       	smpsPSGAlterVol     $0B
00089EAC 8004                       	dc.b	nRst, $04
00089EAE ECF5                       	smpsPSGAlterVol     $F5
00089EB0 9C06                       	dc.b	nEb2, $06
00089EB2 EC04                       	smpsPSGAlterVol     $04
00089EB4 E701                       	dc.b	smpsNoAttack, $01
00089EB6 EC07                       	smpsPSGAlterVol     $07
00089EB8 8006                       	dc.b	nRst, $06
00089EBA E105                       	smpsAlterNote       $05
00089EBC 01                         	dc.b	$01
00089EBD E106                       	smpsAlterNote       $06
00089EBF 01                         	dc.b	$01
00089EC0 E102                       	smpsAlterNote       $02
00089EC2 01                         	dc.b	$01
00089EC3 E1FB                       	smpsAlterNote       $FB
00089EC5 01                         	dc.b	$01
00089EC6 E1FF                       	smpsAlterNote       $FF
00089EC8 ECF5                       	smpsPSGAlterVol     $F5
00089ECA 9B06                       	dc.b	nD2, $06
00089ECC EC04                       	smpsPSGAlterVol     $04
00089ECE E701                       	dc.b	smpsNoAttack, $01
00089ED0 EC07                       	smpsPSGAlterVol     $07
00089ED2 8003                       	dc.b	nRst, $03
00089ED4 ECF5                       	smpsPSGAlterVol     $F5
00089ED6 9B06                       	dc.b	nD2, $06
00089ED8 EC04                       	smpsPSGAlterVol     $04
00089EDA E701                       	dc.b	smpsNoAttack, $01
00089EDC EC07                       	smpsPSGAlterVol     $07
00089EDE 8006                       	dc.b	nRst, $06
00089EE0 E101                       	smpsAlterNote       $01
00089EE2 01                         	dc.b	$01
00089EE3 E105                       	smpsAlterNote       $05
00089EE5 01                         	dc.b	$01
00089EE6 E104                       	smpsAlterNote       $04
00089EE8 01                         	dc.b	$01
00089EE9 E1FE                       	smpsAlterNote       $FE
00089EEB 01                         	dc.b	$01
00089EEC ECF5                       	smpsPSGAlterVol     $F5
00089EEE 9C07                       	dc.b	nEb2, $07
00089EF0 EC0B                       	smpsPSGAlterVol     $0B
00089EF2 8004                       	dc.b	nRst, $04
00089EF4 ECF5                       	smpsPSGAlterVol     $F5
00089EF6 9C06                       	dc.b	nEb2, $06
00089EF8 EC0B                       	smpsPSGAlterVol     $0B
00089EFA 8007                       	dc.b	nRst, $07
00089EFC E105                       	smpsAlterNote       $05
00089EFE 0101                       	dc.b	$01, $01
00089F00 E102                       	smpsAlterNote       $02
00089F02 01                         	dc.b	$01
00089F03 E1FB                       	smpsAlterNote       $FB
00089F05 01                         	dc.b	$01
00089F06 E1FF                       	smpsAlterNote       $FF
00089F08 ECF5                       	smpsPSGAlterVol     $F5
00089F0A 9B06                       	dc.b	nD2, $06
00089F0C EC04                       	smpsPSGAlterVol     $04
00089F0E E701                       	dc.b	smpsNoAttack, $01
00089F10 EC07                       	smpsPSGAlterVol     $07
00089F12 8003                       	dc.b	nRst, $03
00089F14 ECF5                       	smpsPSGAlterVol     $F5
00089F16 9B06                       	dc.b	nD2, $06
00089F18 EC04                       	smpsPSGAlterVol     $04
00089F1A E701                       	dc.b	smpsNoAttack, $01
00089F1C EC07                       	smpsPSGAlterVol     $07
00089F1E 8006                       	dc.b	nRst, $06
00089F20 E101                       	smpsAlterNote       $01
00089F22 01                         	dc.b	$01
00089F23 E105                       	smpsAlterNote       $05
00089F25 01                         	dc.b	$01
00089F26 E101                       	smpsAlterNote       $01
00089F28 01                         	dc.b	$01
00089F29 E1FC                       	smpsAlterNote       $FC
00089F2B 01                         	dc.b	$01
00089F2C E1FE                       	smpsAlterNote       $FE
00089F2E ECF5                       	smpsPSGAlterVol     $F5
00089F30 9C06                       	dc.b	nEb2, $06
00089F32 EC04                       	smpsPSGAlterVol     $04
00089F34 E701                       	dc.b	smpsNoAttack, $01
00089F36 EC07                       	smpsPSGAlterVol     $07
00089F38 8003                       	dc.b	nRst, $03
00089F3A ECF5                       	smpsPSGAlterVol     $F5
00089F3C 9C07                       	dc.b	nEb2, $07
00089F3E EC0B                       	smpsPSGAlterVol     $0B
00089F40 8006                       	dc.b	nRst, $06
00089F42 E102                       	smpsAlterNote       $02
00089F44 01                         	dc.b	$01
00089F45 E105                       	smpsAlterNote       $05
00089F47 0101                       	dc.b	$01, $01
00089F49 E1FF                       	smpsAlterNote       $FF
00089F4B 01                         	dc.b	$01
00089F4C ECF5                       	smpsPSGAlterVol     $F5
00089F4E 9B07                       	dc.b	nD2, $07
00089F50 EC0B                       	smpsPSGAlterVol     $0B
00089F52 8004                       	dc.b	nRst, $04
00089F54 ECF5                       	smpsPSGAlterVol     $F5
00089F56 9B06                       	dc.b	nD2, $06
00089F58 EC04                       	smpsPSGAlterVol     $04
00089F5A E701                       	dc.b	smpsNoAttack, $01
00089F5C EC07                       	smpsPSGAlterVol     $07
00089F5E 8002                       	dc.b	nRst, $02
00089F60 E1FC                       	smpsAlterNote       $FC
00089F62 ECF5                       	smpsPSGAlterVol     $F5
00089F64 9006                       	dc.b	nEb1, $06
00089F66 EC04                       	smpsPSGAlterVol     $04
00089F68 E701                       	dc.b	smpsNoAttack, $01
00089F6A ECFC                       	smpsPSGAlterVol     $FC
00089F6C 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00089F70 EC04                       	smpsPSGAlterVol     $04
00089F72 E701                       	dc.b	smpsNoAttack, $01
00089F74 E1FD                       	smpsAlterNote       $FD
00089F76 ECFC                       	smpsPSGAlterVol     $FC
00089F78 9402                       	dc.b	nG1, $02
00089F7A EC04                       	smpsPSGAlterVol     $04
00089F7C E701                       	dc.b	smpsNoAttack, $01
00089F7E E1FE                       	smpsAlterNote       $FE
00089F80 ECFC                       	smpsPSGAlterVol     $FC
00089F82 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00089F86 EC04                       	smpsPSGAlterVol     $04
00089F88 E701                       	dc.b	smpsNoAttack, $01
00089F8A EC07                       	smpsPSGAlterVol     $07
00089F8C 8008                       	dc.b	nRst, $08
00089F8E F6F4 F3                    	smpsJump            music84_Jump06
00089F91                            
00089F91                            ; PSG3 Data
00089F91                            music84_PSG3:
00089F91 F500                       	smpsPSGvoice        $00
00089F93 E1FF                       	smpsAlterNote       $FF
00089F95 EC0F                       	smpsPSGAlterVol     $0F
00089F97 803A                       	dc.b	nRst, $3A
00089F99                            
00089F99                            music84_Jump05:
00089F99 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00089FA5 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00089FAF F6FF E8                    	smpsJump            music84_Jump05
00089FB2                            
00089FB2                            ; DAC Data
00089FB2                            music84_DAC:
00089FB2 E0C0                       	smpsPan             panCenter, $00
00089FB4 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00089FC0 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00089FCC 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00089FD8 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00089FE4 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00089FF0 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00089FFC 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008A008 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008A014 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008A020 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008A02C 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008A038 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008A044 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008A050 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008A05C 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008A068 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008A074 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008A080 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008A08C 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008A098 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008A0A4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008A0B0 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008A0BC 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008A0C8 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008A0D4 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008A0E0 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008A0EC 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008A0F8 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008A104 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008A110 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008A11C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008A128 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008A134 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008A140 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008A14C 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008A158 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008A164 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008A170 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008A17C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008A188 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008A194 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008A1A0 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008A1AC 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008A1B8 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008A1C4 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008A1D0 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008A1DC 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008A1E8 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008A1F4 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008A200 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008A20C 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008A218 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008A224 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008A230 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008A23C 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008A248 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008A254 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008A260 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008A26C 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008A278 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008A284 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008A290 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008A29C 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008A2A8 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008A2B4 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008A2C0 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008A2CC 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008A2D8 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008A2E4 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008A2F0 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008A2FC 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008A308 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008A314 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008A320 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008A32C 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008A338 E0C0                       	smpsPan             panCenter, $00
0008A33A F2                         	smpsStop
0008A33B                            
0008A33B                            music84_Voices:
0008A33B                            ;	Voice $00
0008A33B                            ;	$3D
0008A33B                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008A33B                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008A33B                            	smpsVcAlgorithm     $05
0008A33B                            	smpsVcFeedback      $07
0008A33B                            	smpsVcUnusedBits    $00
0008A33B                            	smpsVcDetune        $05, $04, $03, $04
0008A33B                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008A33B                            	smpsVcRateScale     $00, $00, $00, $00
0008A33B                            	smpsVcAttackRate    $11, $11, $11, $11
0008A33B                            	smpsVcAmpMod        $00, $00, $00, $00
0008A33B                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008A33B                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008A33B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008A33B                            	smpsVcReleaseRate   $08, $08, $08, $07
0008A33B 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008A354                            
0008A354                            ;	Voice $01
0008A354                            ;	$04
0008A354                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008A354                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008A354                            	smpsVcAlgorithm     $04
0008A354                            	smpsVcFeedback      $00
0008A354                            	smpsVcUnusedBits    $00
0008A354                            	smpsVcDetune        $04, $03, $04, $05
0008A354                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008A354                            	smpsVcRateScale     $00, $01, $00, $01
0008A354                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008A354                            	smpsVcAmpMod        $00, $00, $00, $00
0008A354                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008A354                            	smpsVcDecayRate2    $05, $00, $05, $00
0008A354                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008A354                            	smpsVcReleaseRate   $06, $06, $06, $06
0008A354 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008A36D                            
0008A36D                            ;	Voice $02
0008A36D                            ;	$30
0008A36D                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008A36D                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008A36D                            	smpsVcAlgorithm     $00
0008A36D                            	smpsVcFeedback      $06
0008A36D                            	smpsVcUnusedBits    $00
0008A36D                            	smpsVcDetune        $04, $02, $00, $06
0008A36D                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008A36D                            	smpsVcRateScale     $00, $00, $00, $00
0008A36D                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008A36D                            	smpsVcAmpMod        $00, $00, $00, $00
0008A36D                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008A36D                            	smpsVcDecayRate2    $01, $01, $01, $01
0008A36D                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008A36D                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008A36D 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008A386                            
0008A386                            ;	Voice $03
0008A386                            ;	$3A
0008A386                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008A386                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008A386                            	smpsVcAlgorithm     $02
0008A386                            	smpsVcFeedback      $07
0008A386                            	smpsVcUnusedBits    $00
0008A386                            	smpsVcDetune        $04, $06, $02, $00
0008A386                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008A386                            	smpsVcRateScale     $00, $00, $00, $00
0008A386                            	smpsVcAttackRate    $18, $19, $14, $14
0008A386                            	smpsVcAmpMod        $00, $00, $00, $00
0008A386                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008A386                            	smpsVcDecayRate2    $00, $00, $00, $00
0008A386                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008A386                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008A386 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008A39F                            
0008A39F                            ;	Voice $04
0008A39F                            ;	$3C
0008A39F                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008A39F                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008A39F                            	smpsVcAlgorithm     $04
0008A39F                            	smpsVcFeedback      $07
0008A39F                            	smpsVcUnusedBits    $00
0008A39F                            	smpsVcDetune        $07, $00, $00, $03
0008A39F                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008A39F                            	smpsVcRateScale     $00, $00, $00, $00
0008A39F                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008A39F                            	smpsVcAmpMod        $00, $00, $00, $00
0008A39F                            	smpsVcDecayRate1    $00, $00, $00, $00
0008A39F                            	smpsVcDecayRate2    $00, $00, $00, $00
0008A39F                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008A39F                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008A39F 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008A3B8                            
0008A3B8                            ;	Voice $05
0008A3B8                            ;	$38
0008A3B8                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008A3B8                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008A3B8                            	smpsVcAlgorithm     $00
0008A3B8                            	smpsVcFeedback      $07
0008A3B8                            	smpsVcUnusedBits    $00
0008A3B8                            	smpsVcDetune        $04, $06, $02, $00
0008A3B8                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008A3B8                            	smpsVcRateScale     $00, $00, $00, $00
0008A3B8                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008A3B8                            	smpsVcAmpMod        $00, $00, $00, $00
0008A3B8                            	smpsVcDecayRate1    $00, $03, $00, $17
0008A3B8                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008A3B8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008A3B8                            	smpsVcReleaseRate   $08, $05, $05, $05
0008A3B8 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008A3D1                            
0008A3D1                            
0008A3D2 00                         		even
0008A3D2                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008E5E2                            		even
0008E5E2                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
0009213A 00                         		even
0009213A                            Music87:	include	sound\music87.asm; Invincibility
0009213A                            triple_Header:
0009213A =00000001                  smpsHeaderStartSong = 1
0009213A 0000                       	smpsHeaderVoice     triple_Voices
0009213C 0501                       	smpsHeaderChan      $05, $01
0009213E 0200                       	smpsHeaderTempo     $02, $00
00092140                            
00092144 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00092148 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
0009214C 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00092150 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00092154 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
0009215A                            
0009215A                            ; DAC Data
0009215A                            triple_DAC:
0009215A E0C0                       	smpsPan             panCenter, $00
0009215C 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00092162                            
00092162                            triple_Loop01:
00092162 8282 82                    	dc.b	dSnare, dSnare, dSnare
00092165                            
00092165                            triple_Loop00:
00092165 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00092171 06                         	dc.b	$06
00092172 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00092177 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00092183 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
0009218A F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
0009218F 0303 1B                    	dc.b	$03, $03, $1B
00092192 E0C0                       	smpsPan             panCenter, $00
00092194 F6FF C4                    	smpsJump triple_DAC
00092197                            
00092197                            ; FM1 Data
00092197                            triple_FM1:
00092197 E0C0                       	smpsPan             panCenter, $00
0009219B 8018                       	dc.b	nRst, $18
0009219D                            
0009219D                            triple_Loop0B:
0009219D AC06 B8                    	dc.b	nG3, $06, nG4
000921A0 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000921A5                            
000921A5                            triple_Loop0C:
000921A5 A7B3                       	dc.b	nD3, nD4
000921A7 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000921AC                            
000921AC                            triple_Loop0D:
000921AC A9B5                       	dc.b	nE3, nE4
000921AE F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000921B3 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000921BB F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000921C0 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000921CC 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000921D8 AD                         	dc.b	nAb3
000921D9 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000921DE 8018                       	dc.b	nRst, $18
000921E0 E0C0                       	smpsPan             panCenter, $00
000921E4 F6FF B1                    	smpsJump triple_FM1
000921E7                            
000921E7                            ; FM2 Data
000921E7                            triple_FM2:
000921E7 E0C0                       	smpsPan             panCenter, $00
000921EB 8018                       	dc.b	nRst, $18
000921ED                            
000921ED                            triple_Loop07:
000921ED C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000921F9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00092205 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0009220A 8003                       	dc.b	nRst, $03
0009220C                            
0009220C                            triple_Loop08:
0009220C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00092212 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00092217 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009221D                            
0009221D                            triple_Loop09:
0009221D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00092229 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00092235 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
0009223A 8003                       	dc.b	nRst, $03
0009223C                            
0009223C                            triple_Loop0A:
0009223C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00092242 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00092247 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009224D E0C0                       	smpsPan             panCenter, $00
00092251 F6FF 94                    	smpsJump triple_FM2
00092254                            
00092254                            ; FM3 Data
00092254                            triple_FM3:
00092254 E0C0                       	smpsPan             panCenter, $00
00092258 8018                       	dc.b	nRst, $18
0009225A                            
0009225A                            triple_Loop06:
0009225A B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00092261 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00092266 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00092272 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
0009227E C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00092281 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00092286 8018                       	dc.b	nRst, $18
00092288 E0C0                       	smpsPan             panCenter, $00
0009228C F6FF C6                    	smpsJump triple_FM3
0009228F                            
0009228F                            ; FM4 Data
0009228F                            triple_FM4:
0009228F E103                       	smpsAlterNote       $03
00092293 E0C0                       	smpsPan             panCenter, $00
00092295 8018                       	dc.b	nRst, $18
00092297                            
00092297                            triple_Loop02:
00092297 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000922A3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000922AF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000922B4 8003                       	dc.b	nRst, $03
000922B6                            
000922B6                            triple_Loop03:
000922B6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000922BC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000922C1 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000922C7                            
000922C7                            triple_Loop04:
000922C7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000922D3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000922DF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000922E4 8003                       	dc.b	nRst, $03
000922E6                            
000922E6                            triple_Loop05:
000922E6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000922EC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000922F1 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000922F7 E0C0                       	smpsPan             panCenter, $00
000922F9 F6FF 94                    	smpsJump triple_FM4
000922FC                            
000922FC                            ; PSG1 Data
000922FC                            triple_PSG1:
000922FC 8018                       	dc.b	nRst, $18
000922FE                            
000922FE                            triple_Loop0E:
000922FE A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009230A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00092316 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00092322 9402 8004                  	dc.b	nG1, $02, nRst, $04
00092326 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0009232B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00092337 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00092343 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009234F 9402 8007                  	dc.b	nG1, $02, nRst, $07
00092353                            
00092353                            triple_Loop0F:
00092353 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00092359 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0009235E 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00092364                            
00092364                            triple_Loop10:
00092364 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00092370 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009237C 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00092388 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009238C F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00092391 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009239D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000923A9 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000923B5 9402 8007                  	dc.b	nG1, $02, nRst, $07
000923B9                            
000923B9                            triple_Loop11:
000923B9 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000923BF F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000923C4 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000923CA F500                       	smpsPSGvoice        $00
000923CC F6FF 2E                    	smpsJump triple_PSG1
000923CF                            
000923CF                            triple_Voices:
000923CF                            ;	Voice $00
000923CF                            ;	$3A
000923CF                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000923CF                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000923CF                            	smpsVcAlgorithm     $02
000923CF                            	smpsVcFeedback      $07
000923CF                            	smpsVcUnusedBits    $00
000923CF                            	smpsVcDetune        $00, $00, $00, $00
000923CF                            	smpsVcCoarseFreq    $01, $01, $07, $01
000923CF                            	smpsVcRateScale     $01, $02, $02, $02
000923CF                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000923CF                            	smpsVcAmpMod        $00, $00, $00, $00
000923CF                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000923CF                            	smpsVcDecayRate2    $00, $00, $00, $00
000923CF                            	smpsVcDecayLevel    $00, $01, $0F, $01
000923CF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000923CF 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000923E8                            
000923E8                            ;	Voice $01
000923E8                            ;	$20
000923E8                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000923E8                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000923E8                            	smpsVcAlgorithm     $00
000923E8                            	smpsVcFeedback      $04
000923E8                            	smpsVcUnusedBits    $00
000923E8                            	smpsVcDetune        $00, $00, $03, $07
000923E8                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000923E8                            	smpsVcRateScale     $03, $03, $03, $02
000923E8                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000923E8                            	smpsVcAmpMod        $00, $00, $00, $00
000923E8                            	smpsVcDecayRate1    $04, $04, $0A, $10
000923E8                            	smpsVcDecayRate2    $08, $08, $08, $0F
000923E8                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000923E8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000923E8 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000923E8 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00092402 00                         		even
00092402                            Music88:	incbin	sound\music88.bin; Extra Life
000924F0                            		even
000924F0                            Music89:	incbin	sound\music89.bin; Special Stage
000963B8 00                         		even
000963B8                            Music8A:	incbin	sound\music8A.bin; Title Screen
00096582                            		even
00096582                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009681C                            		even
0009681C                            Music8C:	incbin	sound\music8C.bin; VS Boss
00096A38                            		even
00096A38                            Music8D:	incbin	sound\music8D.bin; Final Zone
00096C54                            		even
00096C54                            Music8E:	incbin	sound\fle.bin ;		Act Clear
000970C2 00                         		even
000970C2                            Music8F:	incbin	sound\music8F.bin ; Game Over
00097702 00                         		even
00097702                            Music90:	incbin	sound\music90.bin ; Continue
00097860                            		even
00097860                            Music91:	incbin	sound\music91.bin ; Credits
00098B2E                            		even
00098B2E                            Music92:	incbin	sound\music92.bin ; Drowning
00098C58                            		even
00098C58                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
00098D28                            		even
00098D28                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
00098D62 00                         		even
00098D62                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
00098D9C 00                         		even
00098D9C                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
00098DD6 00                         		even
00098DD6                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
00098E10 00                         		even
00098E10                            Music98:	incbin	sound\music98.bin ; Marble Act 2
00098E4A 00                         		even
00098E4A                            Music99:	incbin	sound\music99.bin ; Marble Act 3
00098E84 00                         		even
00098E84                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
00098EBE 00                         		even
00098EBE                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
00098EF8 00                         		even
00098EF8                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
00098F32 00                         		even
00098F32                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
00098F6C 00                         		even
00098F6C                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
00098FA6 00                         		even
00098FA6                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00098FE0 00                         		even
00098FE0                            ; ---------------------------------------------------------------------------
00098FE0                            ; Sound	effect pointers
00098FE0                            ; ---------------------------------------------------------------------------
00098FE0 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00098FEC 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00098FF8 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00099004 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00099010 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009901C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00099028 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00099034 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00099040 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009904C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00099058 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00099064 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00099070 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009907C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00099088 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00099094 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000990A0 0000 0000                  SoundD0Index:	dc.l SoundD0
000990A4                            SoundA0:	incbin	sound\soundA0.bin
000990BA                            		even
000990BA                            SoundA1:	incbin	sound\soundA1.bin
000990E4                            		even
000990E4                            SoundA2:	incbin	sound\soundA2.bin
00099104                            		even
00099104                            SoundA3:	incbin	sound\soundA3.bin
00099136                            		even
00099136                            SoundA4:	incbin	sound\soundA4.bin
0009916C                            		even
0009916C                            SoundA5:	incbin	sound\soundA5.bin
00099198                            		even
00099198                            SoundA6:	incbin	sound\soundA6.bin
000991C8                            		even
000991C8                            SoundA7:	incbin	sound\soundA7.bin
000991F8                            		even
000991F8                            SoundA8:	incbin	sound\soundA8.bin
0009922C                            		even
0009922C                            SoundA9:	incbin	sound\soundA9.bin
0009923E                            		even
0009923E                            SoundAA:	incbin	sound\soundAA.bin
00099280                            		even
00099280                            SoundAB:	incbin	sound\soundAB.bin
000992A0                            		even
000992A0                            SoundAC:	incbin	sound\soundAC.bin
000992D4                            		even
000992D4                            SoundAD:	incbin	sound\soundAD.bin
0009930A                            		even
0009930A                            SoundAE:	incbin	sound\soundAE.bin
00099354                            		even
00099354                            SoundAF:	incbin	sound\soundAF.bin
00099382                            		even
00099382                            SoundB0:	incbin	sound\soundB0.bin
000993B4                            		even
000993B4                            SoundB1:	incbin	sound\soundB1.bin
000993E0                            		even
000993E0                            SoundB2:	incbin	sound\soundB2.bin
00099430                            		even
00099430                            SoundB3:	incbin	sound\soundB3.bin
0009947A                            		even
0009947A                            SoundB4:	include	sound\soundB4.asm
0009947A                            SndB4_Bumper_Header:
0009947A =00000001                  smpsHeaderStartSong = 1
0009947A 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009947C 01                         	smpsHeaderTempoSFX  $01
0009947D 03                         	smpsHeaderChanSFX   $03
0009947E                            
00099490                            
00099490                            ; FM5 Data
00099490                            SndB4_Bumper_FM5:
00099492 F600 00                    	smpsJump            SndB4_Bumper_Jump00
00099495                            
00099495                            ; FM4 Data
00099495                            SndB4_Bumper_FM4:
00099495 F2                         	smpsStop
00099496                            
00099496                            SndB4_Bumper_Jump00:
00099496 A020                       	dc.b	nG2, $20
00099498 F2                         	smpsStop
00099499                            
00099499                            ; FM3 Data
00099499                            SndB4_Bumper_FM3:
00099499 F2                         	smpsStop
0009949A                            
0009949A                            SndB4_Bumper_Voices:
0009949A                            ;	Voice $00
0009949A                            ;	$32
0009949A                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009949A                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009949A                            	smpsVcAlgorithm     $02
0009949A                            	smpsVcFeedback      $06
0009949A                            	smpsVcUnusedBits    $00
0009949A                            	smpsVcDetune        $07, $07, $02, $00
0009949A                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009949A                            	smpsVcRateScale     $00, $00, $00, $00
0009949A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009949A                            	smpsVcAmpMod        $00, $00, $00, $00
0009949A                            	smpsVcDecayRate1    $08, $00, $00, $09
0009949A                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009949A                            	smpsVcDecayLevel    $00, $00, $00, $00
0009949A                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009949A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009949A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000994B4 00                         		even
000994B4                            SoundB5:	incbin	sound\soundB5.bin
000994E2                            		even
000994E2                            SoundB6:	incbin	sound\soundB6.bin
00099500                            		even
00099500                            SoundB7:	incbin	sound\soundB7.bin
0009953C                            		even
0009953C                            SoundB8:	incbin	sound\soundB8.bin
0009955A                            		even
0009955A                            SoundB9:	incbin	sound\soundB9.bin
000995BE                            		even
000995BE                            SoundBA:	incbin	sound\soundBA.bin
000995E6                            		even
000995E6                            SoundBB:	incbin	sound\soundBB.bin
00099612                            		even
00099612                            SoundBC:	incbin	sound\soundBC.bin
00099654                            		even
00099654                            SoundBD:	incbin	sound\soundBD.bin
000996A8                            		even
000996A8                            SoundBE:	incbin	sound\soundBE.bin
000996E2                            		even
000996E2                            SoundBF:	incbin	sound\soundBF.bin
00099754                            		even
00099754                            SoundC0:	incbin	sound\soundC0.bin
00099782                            		even
00099782                            SoundC1:	incbin	sound\soundC1.bin
000997DC                            		even
000997DC                            SoundC2:	incbin	sound\soundC2.bin
00099806                            		even
00099806                            SoundC3:	incbin	sound\soundC3.bin
00099880                            		even
00099880                            SoundC4:	incbin	sound\soundC4.bin
000998A8                            		even
000998A8                            SoundC5:	incbin	sound\soundC5.bin
00099910                            		even
00099910                            SoundC6:	incbin	sound\soundC6.bin
00099952                            		even
00099952                            SoundC7:	incbin	sound\soundC7.bin
00099980                            		even
00099980                            SoundC8:	incbin	sound\soundC8.bin
00099992                            		even
00099992                            SoundC9:	incbin	sound\soundC9.bin
000999C0                            		even
000999C0                            SoundCA:	incbin	sound\soundCA.bin
000999EE                            		even
000999EE                            SoundCB:	incbin	sound\soundCB.bin
00099A3A                            		even
00099A3A                            SoundCC:	incbin	sound\C9.ssf
00099A68                            		even
00099A68                            SoundCD:	incbin	sound\soundCD.bin
00099A76                            		even
00099A76                            SoundCE:	incbin	sound\soundCE.bin
00099AA4                            		even
00099AA4                            SoundCF:	incbin	sound\soundCF.bin
00099ADC                            		even
00099ADC                            SoundD0:	incbin	sound\soundD0.bin
00099B16                            		even
00099B16                            SegaPCM:	incbin	sound\segapcm.bin
000B3C6C                            SegaPCM_end:	even
000B3C6C                            
000B3C6C                            IdiotPCM:	incbin	sound\youare.bin
000BDD3E 00                         IdiotPCM_end:	even
000BDD3E                            
000BDD3E                            ; end of 'ROM'
000BDD3E                            EndOfRom:
000BDD3E                            
000BDD3E                            
